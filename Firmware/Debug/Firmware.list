
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dcd8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018644  0800de88  0800de88  0001de88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080264cc  080264cc  00040300  2**0
                  CONTENTS
  4 .ARM          00000008  080264cc  080264cc  000364cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080264d4  080264d4  00040300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080264d4  080264d4  000364d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080264d8  080264d8  000364d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  080264dc  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  20000300  080267dc  00040300  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b5c  080267dc  00040b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040300  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001789a  00000000  00000000  00040330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b56  00000000  00000000  00057bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  0005b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b8  00000000  00000000  0005cc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279c7  00000000  00000000  0005dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001989b  00000000  00000000  000859af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1954  00000000  00000000  0009f24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  00180b9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d4  00000000  00000000  00180c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002178  00000000  00000000  00187d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000e4  00000000  00000000  00189ea8  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001fd  00000000  00000000  00189f8c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000300 	.word	0x20000300
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800de70 	.word	0x0800de70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000304 	.word	0x20000304
 80001ec:	0800de70 	.word	0x0800de70

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <strcmp>:
 8000360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000368:	2a01      	cmp	r2, #1
 800036a:	bf28      	it	cs
 800036c:	429a      	cmpcs	r2, r3
 800036e:	d0f7      	beq.n	8000360 <strcmp>
 8000370:	1ad0      	subs	r0, r2, r3
 8000372:	4770      	bx	lr

08000374 <__aeabi_drsub>:
 8000374:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000378:	e002      	b.n	8000380 <__adddf3>
 800037a:	bf00      	nop

0800037c <__aeabi_dsub>:
 800037c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000380 <__adddf3>:
 8000380:	b530      	push	{r4, r5, lr}
 8000382:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000386:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800038a:	ea94 0f05 	teq	r4, r5
 800038e:	bf08      	it	eq
 8000390:	ea90 0f02 	teqeq	r0, r2
 8000394:	bf1f      	itttt	ne
 8000396:	ea54 0c00 	orrsne.w	ip, r4, r0
 800039a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a6:	f000 80e2 	beq.w	800056e <__adddf3+0x1ee>
 80003aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003b2:	bfb8      	it	lt
 80003b4:	426d      	neglt	r5, r5
 80003b6:	dd0c      	ble.n	80003d2 <__adddf3+0x52>
 80003b8:	442c      	add	r4, r5
 80003ba:	ea80 0202 	eor.w	r2, r0, r2
 80003be:	ea81 0303 	eor.w	r3, r1, r3
 80003c2:	ea82 0000 	eor.w	r0, r2, r0
 80003c6:	ea83 0101 	eor.w	r1, r3, r1
 80003ca:	ea80 0202 	eor.w	r2, r0, r2
 80003ce:	ea81 0303 	eor.w	r3, r1, r3
 80003d2:	2d36      	cmp	r5, #54	; 0x36
 80003d4:	bf88      	it	hi
 80003d6:	bd30      	pophi	{r4, r5, pc}
 80003d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x70>
 80003ea:	4240      	negs	r0, r0
 80003ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003fc:	d002      	beq.n	8000404 <__adddf3+0x84>
 80003fe:	4252      	negs	r2, r2
 8000400:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000404:	ea94 0f05 	teq	r4, r5
 8000408:	f000 80a7 	beq.w	800055a <__adddf3+0x1da>
 800040c:	f1a4 0401 	sub.w	r4, r4, #1
 8000410:	f1d5 0e20 	rsbs	lr, r5, #32
 8000414:	db0d      	blt.n	8000432 <__adddf3+0xb2>
 8000416:	fa02 fc0e 	lsl.w	ip, r2, lr
 800041a:	fa22 f205 	lsr.w	r2, r2, r5
 800041e:	1880      	adds	r0, r0, r2
 8000420:	f141 0100 	adc.w	r1, r1, #0
 8000424:	fa03 f20e 	lsl.w	r2, r3, lr
 8000428:	1880      	adds	r0, r0, r2
 800042a:	fa43 f305 	asr.w	r3, r3, r5
 800042e:	4159      	adcs	r1, r3
 8000430:	e00e      	b.n	8000450 <__adddf3+0xd0>
 8000432:	f1a5 0520 	sub.w	r5, r5, #32
 8000436:	f10e 0e20 	add.w	lr, lr, #32
 800043a:	2a01      	cmp	r2, #1
 800043c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000440:	bf28      	it	cs
 8000442:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	18c0      	adds	r0, r0, r3
 800044c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	d507      	bpl.n	8000466 <__adddf3+0xe6>
 8000456:	f04f 0e00 	mov.w	lr, #0
 800045a:	f1dc 0c00 	rsbs	ip, ip, #0
 800045e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000462:	eb6e 0101 	sbc.w	r1, lr, r1
 8000466:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800046a:	d31b      	bcc.n	80004a4 <__adddf3+0x124>
 800046c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000470:	d30c      	bcc.n	800048c <__adddf3+0x10c>
 8000472:	0849      	lsrs	r1, r1, #1
 8000474:	ea5f 0030 	movs.w	r0, r0, rrx
 8000478:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800047c:	f104 0401 	add.w	r4, r4, #1
 8000480:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000484:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000488:	f080 809a 	bcs.w	80005c0 <__adddf3+0x240>
 800048c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000490:	bf08      	it	eq
 8000492:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000496:	f150 0000 	adcs.w	r0, r0, #0
 800049a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049e:	ea41 0105 	orr.w	r1, r1, r5
 80004a2:	bd30      	pop	{r4, r5, pc}
 80004a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a8:	4140      	adcs	r0, r0
 80004aa:	eb41 0101 	adc.w	r1, r1, r1
 80004ae:	3c01      	subs	r4, #1
 80004b0:	bf28      	it	cs
 80004b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b6:	d2e9      	bcs.n	800048c <__adddf3+0x10c>
 80004b8:	f091 0f00 	teq	r1, #0
 80004bc:	bf04      	itt	eq
 80004be:	4601      	moveq	r1, r0
 80004c0:	2000      	moveq	r0, #0
 80004c2:	fab1 f381 	clz	r3, r1
 80004c6:	bf08      	it	eq
 80004c8:	3320      	addeq	r3, #32
 80004ca:	f1a3 030b 	sub.w	r3, r3, #11
 80004ce:	f1b3 0220 	subs.w	r2, r3, #32
 80004d2:	da0c      	bge.n	80004ee <__adddf3+0x16e>
 80004d4:	320c      	adds	r2, #12
 80004d6:	dd08      	ble.n	80004ea <__adddf3+0x16a>
 80004d8:	f102 0c14 	add.w	ip, r2, #20
 80004dc:	f1c2 020c 	rsb	r2, r2, #12
 80004e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e4:	fa21 f102 	lsr.w	r1, r1, r2
 80004e8:	e00c      	b.n	8000504 <__adddf3+0x184>
 80004ea:	f102 0214 	add.w	r2, r2, #20
 80004ee:	bfd8      	it	le
 80004f0:	f1c2 0c20 	rsble	ip, r2, #32
 80004f4:	fa01 f102 	lsl.w	r1, r1, r2
 80004f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004fc:	bfdc      	itt	le
 80004fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000502:	4090      	lslle	r0, r2
 8000504:	1ae4      	subs	r4, r4, r3
 8000506:	bfa2      	ittt	ge
 8000508:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800050c:	4329      	orrge	r1, r5
 800050e:	bd30      	popge	{r4, r5, pc}
 8000510:	ea6f 0404 	mvn.w	r4, r4
 8000514:	3c1f      	subs	r4, #31
 8000516:	da1c      	bge.n	8000552 <__adddf3+0x1d2>
 8000518:	340c      	adds	r4, #12
 800051a:	dc0e      	bgt.n	800053a <__adddf3+0x1ba>
 800051c:	f104 0414 	add.w	r4, r4, #20
 8000520:	f1c4 0220 	rsb	r2, r4, #32
 8000524:	fa20 f004 	lsr.w	r0, r0, r4
 8000528:	fa01 f302 	lsl.w	r3, r1, r2
 800052c:	ea40 0003 	orr.w	r0, r0, r3
 8000530:	fa21 f304 	lsr.w	r3, r1, r4
 8000534:	ea45 0103 	orr.w	r1, r5, r3
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	f1c4 040c 	rsb	r4, r4, #12
 800053e:	f1c4 0220 	rsb	r2, r4, #32
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 f304 	lsl.w	r3, r1, r4
 800054a:	ea40 0003 	orr.w	r0, r0, r3
 800054e:	4629      	mov	r1, r5
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	fa21 f004 	lsr.w	r0, r1, r4
 8000556:	4629      	mov	r1, r5
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	f094 0f00 	teq	r4, #0
 800055e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000562:	bf06      	itte	eq
 8000564:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000568:	3401      	addeq	r4, #1
 800056a:	3d01      	subne	r5, #1
 800056c:	e74e      	b.n	800040c <__adddf3+0x8c>
 800056e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000572:	bf18      	it	ne
 8000574:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000578:	d029      	beq.n	80005ce <__adddf3+0x24e>
 800057a:	ea94 0f05 	teq	r4, r5
 800057e:	bf08      	it	eq
 8000580:	ea90 0f02 	teqeq	r0, r2
 8000584:	d005      	beq.n	8000592 <__adddf3+0x212>
 8000586:	ea54 0c00 	orrs.w	ip, r4, r0
 800058a:	bf04      	itt	eq
 800058c:	4619      	moveq	r1, r3
 800058e:	4610      	moveq	r0, r2
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	ea91 0f03 	teq	r1, r3
 8000596:	bf1e      	ittt	ne
 8000598:	2100      	movne	r1, #0
 800059a:	2000      	movne	r0, #0
 800059c:	bd30      	popne	{r4, r5, pc}
 800059e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005a2:	d105      	bne.n	80005b0 <__adddf3+0x230>
 80005a4:	0040      	lsls	r0, r0, #1
 80005a6:	4149      	adcs	r1, r1
 80005a8:	bf28      	it	cs
 80005aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd30      	pop	{r4, r5, pc}
 80005b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b4:	bf3c      	itt	cc
 80005b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ba:	bd30      	popcc	{r4, r5, pc}
 80005bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c8:	f04f 0000 	mov.w	r0, #0
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf1a      	itte	ne
 80005d4:	4619      	movne	r1, r3
 80005d6:	4610      	movne	r0, r2
 80005d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005dc:	bf1c      	itt	ne
 80005de:	460b      	movne	r3, r1
 80005e0:	4602      	movne	r2, r0
 80005e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e6:	bf06      	itte	eq
 80005e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005ec:	ea91 0f03 	teqeq	r1, r3
 80005f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f4:	bd30      	pop	{r4, r5, pc}
 80005f6:	bf00      	nop

080005f8 <__aeabi_ui2d>:
 80005f8:	f090 0f00 	teq	r0, #0
 80005fc:	bf04      	itt	eq
 80005fe:	2100      	moveq	r1, #0
 8000600:	4770      	bxeq	lr
 8000602:	b530      	push	{r4, r5, lr}
 8000604:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000608:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060c:	f04f 0500 	mov.w	r5, #0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e750      	b.n	80004b8 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_i2d>:
 8000618:	f090 0f00 	teq	r0, #0
 800061c:	bf04      	itt	eq
 800061e:	2100      	moveq	r1, #0
 8000620:	4770      	bxeq	lr
 8000622:	b530      	push	{r4, r5, lr}
 8000624:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000628:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000630:	bf48      	it	mi
 8000632:	4240      	negmi	r0, r0
 8000634:	f04f 0100 	mov.w	r1, #0
 8000638:	e73e      	b.n	80004b8 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_f2d>:
 800063c:	0042      	lsls	r2, r0, #1
 800063e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000642:	ea4f 0131 	mov.w	r1, r1, rrx
 8000646:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800064a:	bf1f      	itttt	ne
 800064c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000650:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000654:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000658:	4770      	bxne	lr
 800065a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065e:	bf08      	it	eq
 8000660:	4770      	bxeq	lr
 8000662:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000666:	bf04      	itt	eq
 8000668:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	e71c      	b.n	80004b8 <__adddf3+0x138>
 800067e:	bf00      	nop

08000680 <__aeabi_ul2d>:
 8000680:	ea50 0201 	orrs.w	r2, r0, r1
 8000684:	bf08      	it	eq
 8000686:	4770      	bxeq	lr
 8000688:	b530      	push	{r4, r5, lr}
 800068a:	f04f 0500 	mov.w	r5, #0
 800068e:	e00a      	b.n	80006a6 <__aeabi_l2d+0x16>

08000690 <__aeabi_l2d>:
 8000690:	ea50 0201 	orrs.w	r2, r0, r1
 8000694:	bf08      	it	eq
 8000696:	4770      	bxeq	lr
 8000698:	b530      	push	{r4, r5, lr}
 800069a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069e:	d502      	bpl.n	80006a6 <__aeabi_l2d+0x16>
 80006a0:	4240      	negs	r0, r0
 80006a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006b2:	f43f aed8 	beq.w	8000466 <__adddf3+0xe6>
 80006b6:	f04f 0203 	mov.w	r2, #3
 80006ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006be:	bf18      	it	ne
 80006c0:	3203      	addne	r2, #3
 80006c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c6:	bf18      	it	ne
 80006c8:	3203      	addne	r2, #3
 80006ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ce:	f1c2 0320 	rsb	r3, r2, #32
 80006d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d6:	fa20 f002 	lsr.w	r0, r0, r2
 80006da:	fa01 fe03 	lsl.w	lr, r1, r3
 80006de:	ea40 000e 	orr.w	r0, r0, lr
 80006e2:	fa21 f102 	lsr.w	r1, r1, r2
 80006e6:	4414      	add	r4, r2
 80006e8:	e6bd      	b.n	8000466 <__adddf3+0xe6>
 80006ea:	bf00      	nop

080006ec <__aeabi_dmul>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006fa:	bf1d      	ittte	ne
 80006fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000700:	ea94 0f0c 	teqne	r4, ip
 8000704:	ea95 0f0c 	teqne	r5, ip
 8000708:	f000 f8de 	bleq	80008c8 <__aeabi_dmul+0x1dc>
 800070c:	442c      	add	r4, r5
 800070e:	ea81 0603 	eor.w	r6, r1, r3
 8000712:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000716:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800071a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071e:	bf18      	it	ne
 8000720:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800072c:	d038      	beq.n	80007a0 <__aeabi_dmul+0xb4>
 800072e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	fbe1 e502 	umlal	lr, r5, r1, r2
 800073a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000742:	f04f 0600 	mov.w	r6, #0
 8000746:	fbe1 5603 	umlal	r5, r6, r1, r3
 800074a:	f09c 0f00 	teq	ip, #0
 800074e:	bf18      	it	ne
 8000750:	f04e 0e01 	orrne.w	lr, lr, #1
 8000754:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000758:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800075c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000760:	d204      	bcs.n	800076c <__aeabi_dmul+0x80>
 8000762:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000766:	416d      	adcs	r5, r5
 8000768:	eb46 0606 	adc.w	r6, r6, r6
 800076c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000770:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000774:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000778:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800077c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000780:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000784:	bf88      	it	hi
 8000786:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800078a:	d81e      	bhi.n	80007ca <__aeabi_dmul+0xde>
 800078c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000790:	bf08      	it	eq
 8000792:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000796:	f150 0000 	adcs.w	r0, r0, #0
 800079a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a4:	ea46 0101 	orr.w	r1, r6, r1
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b4:	bfc2      	ittt	gt
 80007b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007be:	bd70      	popgt	{r4, r5, r6, pc}
 80007c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c4:	f04f 0e00 	mov.w	lr, #0
 80007c8:	3c01      	subs	r4, #1
 80007ca:	f300 80ab 	bgt.w	8000924 <__aeabi_dmul+0x238>
 80007ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007d2:	bfde      	ittt	le
 80007d4:	2000      	movle	r0, #0
 80007d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007da:	bd70      	pople	{r4, r5, r6, pc}
 80007dc:	f1c4 0400 	rsb	r4, r4, #0
 80007e0:	3c20      	subs	r4, #32
 80007e2:	da35      	bge.n	8000850 <__aeabi_dmul+0x164>
 80007e4:	340c      	adds	r4, #12
 80007e6:	dc1b      	bgt.n	8000820 <__aeabi_dmul+0x134>
 80007e8:	f104 0414 	add.w	r4, r4, #20
 80007ec:	f1c4 0520 	rsb	r5, r4, #32
 80007f0:	fa00 f305 	lsl.w	r3, r0, r5
 80007f4:	fa20 f004 	lsr.w	r0, r0, r4
 80007f8:	fa01 f205 	lsl.w	r2, r1, r5
 80007fc:	ea40 0002 	orr.w	r0, r0, r2
 8000800:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000804:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	fa21 f604 	lsr.w	r6, r1, r4
 8000810:	eb42 0106 	adc.w	r1, r2, r6
 8000814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000818:	bf08      	it	eq
 800081a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f1c4 040c 	rsb	r4, r4, #12
 8000824:	f1c4 0520 	rsb	r5, r4, #32
 8000828:	fa00 f304 	lsl.w	r3, r0, r4
 800082c:	fa20 f005 	lsr.w	r0, r0, r5
 8000830:	fa01 f204 	lsl.w	r2, r1, r4
 8000834:	ea40 0002 	orr.w	r0, r0, r2
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000840:	f141 0100 	adc.w	r1, r1, #0
 8000844:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000848:	bf08      	it	eq
 800084a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084e:	bd70      	pop	{r4, r5, r6, pc}
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f205 	lsl.w	r2, r0, r5
 8000858:	ea4e 0e02 	orr.w	lr, lr, r2
 800085c:	fa20 f304 	lsr.w	r3, r0, r4
 8000860:	fa01 f205 	lsl.w	r2, r1, r5
 8000864:	ea43 0302 	orr.w	r3, r3, r2
 8000868:	fa21 f004 	lsr.w	r0, r1, r4
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	fa21 f204 	lsr.w	r2, r1, r4
 8000874:	ea20 0002 	bic.w	r0, r0, r2
 8000878:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800087c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000880:	bf08      	it	eq
 8000882:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f094 0f00 	teq	r4, #0
 800088c:	d10f      	bne.n	80008ae <__aeabi_dmul+0x1c2>
 800088e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000892:	0040      	lsls	r0, r0, #1
 8000894:	eb41 0101 	adc.w	r1, r1, r1
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	bf08      	it	eq
 800089e:	3c01      	subeq	r4, #1
 80008a0:	d0f7      	beq.n	8000892 <__aeabi_dmul+0x1a6>
 80008a2:	ea41 0106 	orr.w	r1, r1, r6
 80008a6:	f095 0f00 	teq	r5, #0
 80008aa:	bf18      	it	ne
 80008ac:	4770      	bxne	lr
 80008ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008b2:	0052      	lsls	r2, r2, #1
 80008b4:	eb43 0303 	adc.w	r3, r3, r3
 80008b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008bc:	bf08      	it	eq
 80008be:	3d01      	subeq	r5, #1
 80008c0:	d0f7      	beq.n	80008b2 <__aeabi_dmul+0x1c6>
 80008c2:	ea43 0306 	orr.w	r3, r3, r6
 80008c6:	4770      	bx	lr
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d0:	bf18      	it	ne
 80008d2:	ea95 0f0c 	teqne	r5, ip
 80008d6:	d00c      	beq.n	80008f2 <__aeabi_dmul+0x206>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	d1d1      	bne.n	8000888 <__aeabi_dmul+0x19c>
 80008e4:	ea81 0103 	eor.w	r1, r1, r3
 80008e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f6:	bf06      	itte	eq
 80008f8:	4610      	moveq	r0, r2
 80008fa:	4619      	moveq	r1, r3
 80008fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000900:	d019      	beq.n	8000936 <__aeabi_dmul+0x24a>
 8000902:	ea94 0f0c 	teq	r4, ip
 8000906:	d102      	bne.n	800090e <__aeabi_dmul+0x222>
 8000908:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800090c:	d113      	bne.n	8000936 <__aeabi_dmul+0x24a>
 800090e:	ea95 0f0c 	teq	r5, ip
 8000912:	d105      	bne.n	8000920 <__aeabi_dmul+0x234>
 8000914:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000918:	bf1c      	itt	ne
 800091a:	4610      	movne	r0, r2
 800091c:	4619      	movne	r1, r3
 800091e:	d10a      	bne.n	8000936 <__aeabi_dmul+0x24a>
 8000920:	ea81 0103 	eor.w	r1, r1, r3
 8000924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000928:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800092c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	bd70      	pop	{r4, r5, r6, pc}
 8000936:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800093a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093e:	bd70      	pop	{r4, r5, r6, pc}

08000940 <__aeabi_ddiv>:
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000946:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800094a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094e:	bf1d      	ittte	ne
 8000950:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000954:	ea94 0f0c 	teqne	r4, ip
 8000958:	ea95 0f0c 	teqne	r5, ip
 800095c:	f000 f8a7 	bleq	8000aae <__aeabi_ddiv+0x16e>
 8000960:	eba4 0405 	sub.w	r4, r4, r5
 8000964:	ea81 0e03 	eor.w	lr, r1, r3
 8000968:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000970:	f000 8088 	beq.w	8000a84 <__aeabi_ddiv+0x144>
 8000974:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000978:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800097c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000980:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000984:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000988:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800098c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000990:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000994:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000998:	429d      	cmp	r5, r3
 800099a:	bf08      	it	eq
 800099c:	4296      	cmpeq	r6, r2
 800099e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a6:	d202      	bcs.n	80009ae <__aeabi_ddiv+0x6e>
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	1ab6      	subs	r6, r6, r2
 80009b0:	eb65 0503 	sbc.w	r5, r5, r3
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ca:	bf22      	ittt	cs
 80009cc:	1ab6      	subcs	r6, r6, r2
 80009ce:	4675      	movcs	r5, lr
 80009d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	ebb6 0e02 	subs.w	lr, r6, r2
 80009de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e2:	bf22      	ittt	cs
 80009e4:	1ab6      	subcs	r6, r6, r2
 80009e6:	4675      	movcs	r5, lr
 80009e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fa:	bf22      	ittt	cs
 80009fc:	1ab6      	subcs	r6, r6, r2
 80009fe:	4675      	movcs	r5, lr
 8000a00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a04:	085b      	lsrs	r3, r3, #1
 8000a06:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a12:	bf22      	ittt	cs
 8000a14:	1ab6      	subcs	r6, r6, r2
 8000a16:	4675      	movcs	r5, lr
 8000a18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a1c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a20:	d018      	beq.n	8000a54 <__aeabi_ddiv+0x114>
 8000a22:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3e:	d1c0      	bne.n	80009c2 <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	d10b      	bne.n	8000a5e <__aeabi_ddiv+0x11e>
 8000a46:	ea41 0100 	orr.w	r1, r1, r0
 8000a4a:	f04f 0000 	mov.w	r0, #0
 8000a4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a52:	e7b6      	b.n	80009c2 <__aeabi_ddiv+0x82>
 8000a54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a58:	bf04      	itt	eq
 8000a5a:	4301      	orreq	r1, r0
 8000a5c:	2000      	moveq	r0, #0
 8000a5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a62:	bf88      	it	hi
 8000a64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a68:	f63f aeaf 	bhi.w	80007ca <__aeabi_dmul+0xde>
 8000a6c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a70:	bf04      	itt	eq
 8000a72:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a7a:	f150 0000 	adcs.w	r0, r0, #0
 8000a7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a90:	bfc2      	ittt	gt
 8000a92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a9a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa0:	f04f 0e00 	mov.w	lr, #0
 8000aa4:	3c01      	subs	r4, #1
 8000aa6:	e690      	b.n	80007ca <__aeabi_dmul+0xde>
 8000aa8:	ea45 0e06 	orr.w	lr, r5, r6
 8000aac:	e68d      	b.n	80007ca <__aeabi_dmul+0xde>
 8000aae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ab2:	ea94 0f0c 	teq	r4, ip
 8000ab6:	bf08      	it	eq
 8000ab8:	ea95 0f0c 	teqeq	r5, ip
 8000abc:	f43f af3b 	beq.w	8000936 <__aeabi_dmul+0x24a>
 8000ac0:	ea94 0f0c 	teq	r4, ip
 8000ac4:	d10a      	bne.n	8000adc <__aeabi_ddiv+0x19c>
 8000ac6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aca:	f47f af34 	bne.w	8000936 <__aeabi_dmul+0x24a>
 8000ace:	ea95 0f0c 	teq	r5, ip
 8000ad2:	f47f af25 	bne.w	8000920 <__aeabi_dmul+0x234>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e72c      	b.n	8000936 <__aeabi_dmul+0x24a>
 8000adc:	ea95 0f0c 	teq	r5, ip
 8000ae0:	d106      	bne.n	8000af0 <__aeabi_ddiv+0x1b0>
 8000ae2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae6:	f43f aefd 	beq.w	80008e4 <__aeabi_dmul+0x1f8>
 8000aea:	4610      	mov	r0, r2
 8000aec:	4619      	mov	r1, r3
 8000aee:	e722      	b.n	8000936 <__aeabi_dmul+0x24a>
 8000af0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af4:	bf18      	it	ne
 8000af6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000afa:	f47f aec5 	bne.w	8000888 <__aeabi_dmul+0x19c>
 8000afe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b02:	f47f af0d 	bne.w	8000920 <__aeabi_dmul+0x234>
 8000b06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b0a:	f47f aeeb 	bne.w	80008e4 <__aeabi_dmul+0x1f8>
 8000b0e:	e712      	b.n	8000936 <__aeabi_dmul+0x24a>

08000b10 <__gedf2>:
 8000b10:	f04f 3cff 	mov.w	ip, #4294967295
 8000b14:	e006      	b.n	8000b24 <__cmpdf2+0x4>
 8000b16:	bf00      	nop

08000b18 <__ledf2>:
 8000b18:	f04f 0c01 	mov.w	ip, #1
 8000b1c:	e002      	b.n	8000b24 <__cmpdf2+0x4>
 8000b1e:	bf00      	nop

08000b20 <__cmpdf2>:
 8000b20:	f04f 0c01 	mov.w	ip, #1
 8000b24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	bf18      	it	ne
 8000b36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b3a:	d01b      	beq.n	8000b74 <__cmpdf2+0x54>
 8000b3c:	b001      	add	sp, #4
 8000b3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b42:	bf0c      	ite	eq
 8000b44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b48:	ea91 0f03 	teqne	r1, r3
 8000b4c:	bf02      	ittt	eq
 8000b4e:	ea90 0f02 	teqeq	r0, r2
 8000b52:	2000      	moveq	r0, #0
 8000b54:	4770      	bxeq	lr
 8000b56:	f110 0f00 	cmn.w	r0, #0
 8000b5a:	ea91 0f03 	teq	r1, r3
 8000b5e:	bf58      	it	pl
 8000b60:	4299      	cmppl	r1, r3
 8000b62:	bf08      	it	eq
 8000b64:	4290      	cmpeq	r0, r2
 8000b66:	bf2c      	ite	cs
 8000b68:	17d8      	asrcs	r0, r3, #31
 8000b6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6e:	f040 0001 	orr.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__cmpdf2+0x64>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d107      	bne.n	8000b94 <__cmpdf2+0x74>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d1d6      	bne.n	8000b3c <__cmpdf2+0x1c>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d0d3      	beq.n	8000b3c <__cmpdf2+0x1c>
 8000b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_cdrcmple>:
 8000b9c:	4684      	mov	ip, r0
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4662      	mov	r2, ip
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	e000      	b.n	8000bac <__aeabi_cdcmpeq>
 8000baa:	bf00      	nop

08000bac <__aeabi_cdcmpeq>:
 8000bac:	b501      	push	{r0, lr}
 8000bae:	f7ff ffb7 	bl	8000b20 <__cmpdf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd01      	pop	{r0, pc}

08000bbc <__aeabi_dcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cdcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cdcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cdcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffce 	bl	8000b9c <__aeabi_cdrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc4 	bl	8000b9c <__aeabi_cdrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_dcmpun>:
 8000c20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c28:	d102      	bne.n	8000c30 <__aeabi_dcmpun+0x10>
 8000c2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2e:	d10a      	bne.n	8000c46 <__aeabi_dcmpun+0x26>
 8000c30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c38:	d102      	bne.n	8000c40 <__aeabi_dcmpun+0x20>
 8000c3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_dcmpun+0x26>
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0001 	mov.w	r0, #1
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2iz>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c54:	d215      	bcs.n	8000c82 <__aeabi_d2iz+0x36>
 8000c56:	d511      	bpl.n	8000c7c <__aeabi_d2iz+0x30>
 8000c58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c60:	d912      	bls.n	8000c88 <__aeabi_d2iz+0x3c>
 8000c62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c72:	fa23 f002 	lsr.w	r0, r3, r2
 8000c76:	bf18      	it	ne
 8000c78:	4240      	negne	r0, r0
 8000c7a:	4770      	bx	lr
 8000c7c:	f04f 0000 	mov.w	r0, #0
 8000c80:	4770      	bx	lr
 8000c82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c86:	d105      	bne.n	8000c94 <__aeabi_d2iz+0x48>
 8000c88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c92:	4770      	bx	lr
 8000c94:	f04f 0000 	mov.w	r0, #0
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2f>:
 8000c9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ca0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ca4:	bf24      	itt	cs
 8000ca6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000caa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cae:	d90d      	bls.n	8000ccc <__aeabi_d2f+0x30>
 8000cb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cc4:	bf08      	it	eq
 8000cc6:	f020 0001 	biceq.w	r0, r0, #1
 8000cca:	4770      	bx	lr
 8000ccc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cd0:	d121      	bne.n	8000d16 <__aeabi_d2f+0x7a>
 8000cd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cd6:	bfbc      	itt	lt
 8000cd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	4770      	bxlt	lr
 8000cde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ce2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ce6:	f1c2 0218 	rsb	r2, r2, #24
 8000cea:	f1c2 0c20 	rsb	ip, r2, #32
 8000cee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000cf6:	bf18      	it	ne
 8000cf8:	f040 0001 	orrne.w	r0, r0, #1
 8000cfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d08:	ea40 000c 	orr.w	r0, r0, ip
 8000d0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000d10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d14:	e7cc      	b.n	8000cb0 <__aeabi_d2f+0x14>
 8000d16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d1a:	d107      	bne.n	8000d2c <__aeabi_d2f+0x90>
 8000d1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d20:	bf1e      	ittt	ne
 8000d22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d2a:	4770      	bxne	lr
 8000d2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <__aeabi_ldivmod>:
 8000d3c:	b97b      	cbnz	r3, 8000d5e <__aeabi_ldivmod+0x22>
 8000d3e:	b972      	cbnz	r2, 8000d5e <__aeabi_ldivmod+0x22>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bfbe      	ittt	lt
 8000d44:	2000      	movlt	r0, #0
 8000d46:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000d4a:	e006      	blt.n	8000d5a <__aeabi_ldivmod+0x1e>
 8000d4c:	bf08      	it	eq
 8000d4e:	2800      	cmpeq	r0, #0
 8000d50:	bf1c      	itt	ne
 8000d52:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d56:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5a:	f000 b9bf 	b.w	80010dc <__aeabi_idiv0>
 8000d5e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d62:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d66:	2900      	cmp	r1, #0
 8000d68:	db09      	blt.n	8000d7e <__aeabi_ldivmod+0x42>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db1a      	blt.n	8000da4 <__aeabi_ldivmod+0x68>
 8000d6e:	f000 f84d 	bl	8000e0c <__udivmoddi4>
 8000d72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7a:	b004      	add	sp, #16
 8000d7c:	4770      	bx	lr
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db1b      	blt.n	8000dc0 <__aeabi_ldivmod+0x84>
 8000d88:	f000 f840 	bl	8000e0c <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	4252      	negs	r2, r2
 8000d9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000da2:	4770      	bx	lr
 8000da4:	4252      	negs	r2, r2
 8000da6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000daa:	f000 f82f 	bl	8000e0c <__udivmoddi4>
 8000dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db6:	b004      	add	sp, #16
 8000db8:	4240      	negs	r0, r0
 8000dba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dbe:	4770      	bx	lr
 8000dc0:	4252      	negs	r2, r2
 8000dc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dc6:	f000 f821 	bl	8000e0c <__udivmoddi4>
 8000dca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd2:	b004      	add	sp, #16
 8000dd4:	4252      	negs	r2, r2
 8000dd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dda:	4770      	bx	lr

08000ddc <__aeabi_uldivmod>:
 8000ddc:	b953      	cbnz	r3, 8000df4 <__aeabi_uldivmod+0x18>
 8000dde:	b94a      	cbnz	r2, 8000df4 <__aeabi_uldivmod+0x18>
 8000de0:	2900      	cmp	r1, #0
 8000de2:	bf08      	it	eq
 8000de4:	2800      	cmpeq	r0, #0
 8000de6:	bf1c      	itt	ne
 8000de8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dec:	f04f 30ff 	movne.w	r0, #4294967295
 8000df0:	f000 b974 	b.w	80010dc <__aeabi_idiv0>
 8000df4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000df8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dfc:	f000 f806 	bl	8000e0c <__udivmoddi4>
 8000e00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e08:	b004      	add	sp, #16
 8000e0a:	4770      	bx	lr

08000e0c <__udivmoddi4>:
 8000e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e10:	9d08      	ldr	r5, [sp, #32]
 8000e12:	4604      	mov	r4, r0
 8000e14:	468e      	mov	lr, r1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d14d      	bne.n	8000eb6 <__udivmoddi4+0xaa>
 8000e1a:	428a      	cmp	r2, r1
 8000e1c:	4694      	mov	ip, r2
 8000e1e:	d969      	bls.n	8000ef4 <__udivmoddi4+0xe8>
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	b152      	cbz	r2, 8000e3c <__udivmoddi4+0x30>
 8000e26:	fa01 f302 	lsl.w	r3, r1, r2
 8000e2a:	f1c2 0120 	rsb	r1, r2, #32
 8000e2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000e32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e36:	ea41 0e03 	orr.w	lr, r1, r3
 8000e3a:	4094      	lsls	r4, r2
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	0c21      	lsrs	r1, r4, #16
 8000e42:	fbbe f6f8 	udiv	r6, lr, r8
 8000e46:	fa1f f78c 	uxth.w	r7, ip
 8000e4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e52:	fb06 f107 	mul.w	r1, r6, r7
 8000e56:	4299      	cmp	r1, r3
 8000e58:	d90a      	bls.n	8000e70 <__udivmoddi4+0x64>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e62:	f080 811f 	bcs.w	80010a4 <__udivmoddi4+0x298>
 8000e66:	4299      	cmp	r1, r3
 8000e68:	f240 811c 	bls.w	80010a4 <__udivmoddi4+0x298>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3310 	mls	r3, r8, r0, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb00 f707 	mul.w	r7, r0, r7
 8000e84:	42a7      	cmp	r7, r4
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x92>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e90:	f080 810a 	bcs.w	80010a8 <__udivmoddi4+0x29c>
 8000e94:	42a7      	cmp	r7, r4
 8000e96:	f240 8107 	bls.w	80010a8 <__udivmoddi4+0x29c>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	1be4      	subs	r4, r4, r7
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	b11d      	cbz	r5, 8000eb0 <__udivmoddi4+0xa4>
 8000ea8:	40d4      	lsrs	r4, r2
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d909      	bls.n	8000ece <__udivmoddi4+0xc2>
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	f000 80ef 	beq.w	800109e <__udivmoddi4+0x292>
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	fab3 f683 	clz	r6, r3
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d14a      	bne.n	8000f6c <__udivmoddi4+0x160>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d302      	bcc.n	8000ee0 <__udivmoddi4+0xd4>
 8000eda:	4282      	cmp	r2, r0
 8000edc:	f200 80f9 	bhi.w	80010d2 <__udivmoddi4+0x2c6>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	469e      	mov	lr, r3
 8000eea:	2d00      	cmp	r5, #0
 8000eec:	d0e0      	beq.n	8000eb0 <__udivmoddi4+0xa4>
 8000eee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ef2:	e7dd      	b.n	8000eb0 <__udivmoddi4+0xa4>
 8000ef4:	b902      	cbnz	r2, 8000ef8 <__udivmoddi4+0xec>
 8000ef6:	deff      	udf	#255	; 0xff
 8000ef8:	fab2 f282 	clz	r2, r2
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	f040 8092 	bne.w	8001026 <__udivmoddi4+0x21a>
 8000f02:	eba1 010c 	sub.w	r1, r1, ip
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2601      	movs	r6, #1
 8000f10:	0c20      	lsrs	r0, r4, #16
 8000f12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f16:	fb07 1113 	mls	r1, r7, r3, r1
 8000f1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f1e:	fb0e f003 	mul.w	r0, lr, r3
 8000f22:	4288      	cmp	r0, r1
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x12c>
 8000f26:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x12a>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2c0>
 8000f36:	4643      	mov	r3, r8
 8000f38:	1a09      	subs	r1, r1, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f40:	fb07 1110 	mls	r1, r7, r0, r1
 8000f44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x156>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x154>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2ca>
 8000f60:	4608      	mov	r0, r1
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f6a:	e79c      	b.n	8000ea6 <__udivmoddi4+0x9a>
 8000f6c:	f1c6 0720 	rsb	r7, r6, #32
 8000f70:	40b3      	lsls	r3, r6
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f82:	431c      	orrs	r4, r3
 8000f84:	40f9      	lsrs	r1, r7
 8000f86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f92:	0c20      	lsrs	r0, r4, #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fb09 1118 	mls	r1, r9, r8, r1
 8000f9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fa0:	fb08 f00e 	mul.w	r0, r8, lr
 8000fa4:	4288      	cmp	r0, r1
 8000fa6:	fa02 f206 	lsl.w	r2, r2, r6
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b8>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2bc>
 8000fb8:	4288      	cmp	r0, r1
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2bc>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4461      	add	r1, ip
 8000fc4:	1a09      	subs	r1, r1, r0
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000fd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd8:	458e      	cmp	lr, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1e2>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2b4>
 8000fe6:	458e      	cmp	lr, r1
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2b4>
 8000fea:	3802      	subs	r0, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ff2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ff6:	eba1 010e 	sub.w	r1, r1, lr
 8000ffa:	42a1      	cmp	r1, r4
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46a6      	mov	lr, r4
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x2a4>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x2a0>
 8001004:	b15d      	cbz	r5, 800101e <__udivmoddi4+0x212>
 8001006:	ebb3 0208 	subs.w	r2, r3, r8
 800100a:	eb61 010e 	sbc.w	r1, r1, lr
 800100e:	fa01 f707 	lsl.w	r7, r1, r7
 8001012:	fa22 f306 	lsr.w	r3, r2, r6
 8001016:	40f1      	lsrs	r1, r6
 8001018:	431f      	orrs	r7, r3
 800101a:	e9c5 7100 	strd	r7, r1, [r5]
 800101e:	2600      	movs	r6, #0
 8001020:	4631      	mov	r1, r6
 8001022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001026:	f1c2 0320 	rsb	r3, r2, #32
 800102a:	40d8      	lsrs	r0, r3
 800102c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001030:	fa21 f303 	lsr.w	r3, r1, r3
 8001034:	4091      	lsls	r1, r2
 8001036:	4301      	orrs	r1, r0
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb3 f0f7 	udiv	r0, r3, r7
 8001044:	fb07 3610 	mls	r6, r7, r0, r3
 8001048:	0c0b      	lsrs	r3, r1, #16
 800104a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800104e:	fb00 f60e 	mul.w	r6, r0, lr
 8001052:	429e      	cmp	r6, r3
 8001054:	fa04 f402 	lsl.w	r4, r4, r2
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x260>
 800105a:	eb1c 0303 	adds.w	r3, ip, r3
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b8>
 8001064:	429e      	cmp	r6, r3
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b8>
 8001068:	3802      	subs	r0, #2
 800106a:	4463      	add	r3, ip
 800106c:	1b9b      	subs	r3, r3, r6
 800106e:	b289      	uxth	r1, r1
 8001070:	fbb3 f6f7 	udiv	r6, r3, r7
 8001074:	fb07 3316 	mls	r3, r7, r6, r3
 8001078:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800107c:	fb06 f30e 	mul.w	r3, r6, lr
 8001080:	428b      	cmp	r3, r1
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x28a>
 8001084:	eb1c 0101 	adds.w	r1, ip, r1
 8001088:	f106 38ff 	add.w	r8, r6, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2b0>
 800108e:	428b      	cmp	r3, r1
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2b0>
 8001092:	3e02      	subs	r6, #2
 8001094:	4461      	add	r1, ip
 8001096:	1ac9      	subs	r1, r1, r3
 8001098:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0x104>
 800109e:	462e      	mov	r6, r5
 80010a0:	4628      	mov	r0, r5
 80010a2:	e705      	b.n	8000eb0 <__udivmoddi4+0xa4>
 80010a4:	4606      	mov	r6, r0
 80010a6:	e6e3      	b.n	8000e70 <__udivmoddi4+0x64>
 80010a8:	4618      	mov	r0, r3
 80010aa:	e6f8      	b.n	8000e9e <__udivmoddi4+0x92>
 80010ac:	454b      	cmp	r3, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f8>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010b8:	3801      	subs	r0, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f8>
 80010bc:	4646      	mov	r6, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x28a>
 80010c0:	4620      	mov	r0, r4
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1e2>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x260>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b8>
 80010cc:	3b02      	subs	r3, #2
 80010ce:	4461      	add	r1, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x12c>
 80010d2:	4630      	mov	r0, r6
 80010d4:	e709      	b.n	8000eea <__udivmoddi4+0xde>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x156>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001104:	d02c      	beq.n	8001160 <arm_cfft_init_f32+0x80>
 8001106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800110a:	f300 809e 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 800110e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001112:	d032      	beq.n	800117a <arm_cfft_init_f32+0x9a>
 8001114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001118:	f300 8097 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 800111c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001120:	d038      	beq.n	8001194 <arm_cfft_init_f32+0xb4>
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001126:	f300 8090 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 800112a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800112e:	d03e      	beq.n	80011ae <arm_cfft_init_f32+0xce>
 8001130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001134:	f300 8089 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 8001138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800113c:	d044      	beq.n	80011c8 <arm_cfft_init_f32+0xe8>
 800113e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001142:	f300 8082 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 8001146:	2b80      	cmp	r3, #128	; 0x80
 8001148:	d04b      	beq.n	80011e2 <arm_cfft_init_f32+0x102>
 800114a:	2b80      	cmp	r3, #128	; 0x80
 800114c:	dc7d      	bgt.n	800124a <arm_cfft_init_f32+0x16a>
 800114e:	2b40      	cmp	r3, #64	; 0x40
 8001150:	d054      	beq.n	80011fc <arm_cfft_init_f32+0x11c>
 8001152:	2b40      	cmp	r3, #64	; 0x40
 8001154:	dc79      	bgt.n	800124a <arm_cfft_init_f32+0x16a>
 8001156:	2b10      	cmp	r3, #16
 8001158:	d06a      	beq.n	8001230 <arm_cfft_init_f32+0x150>
 800115a:	2b20      	cmp	r3, #32
 800115c:	d05b      	beq.n	8001216 <arm_cfft_init_f32+0x136>
 800115e:	e074      	b.n	800124a <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <arm_cfft_init_f32+0x180>)
 8001162:	899a      	ldrh	r2, [r3, #12]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	819a      	strh	r2, [r3, #12]
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <arm_cfft_init_f32+0x180>)
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <arm_cfft_init_f32+0x180>)
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	605a      	str	r2, [r3, #4]
            break;
 8001178:	e06a      	b.n	8001250 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 800117a:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <arm_cfft_init_f32+0x184>)
 800117c:	899a      	ldrh	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	819a      	strh	r2, [r3, #12]
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <arm_cfft_init_f32+0x184>)
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <arm_cfft_init_f32+0x184>)
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	605a      	str	r2, [r3, #4]

            break;
 8001192:	e05d      	b.n	8001250 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <arm_cfft_init_f32+0x188>)
 8001196:	899a      	ldrh	r2, [r3, #12]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	819a      	strh	r2, [r3, #12]
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <arm_cfft_init_f32+0x188>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <arm_cfft_init_f32+0x188>)
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	605a      	str	r2, [r3, #4]

            break;
 80011ac:	e050      	b.n	8001250 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <arm_cfft_init_f32+0x18c>)
 80011b0:	899a      	ldrh	r2, [r3, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	819a      	strh	r2, [r3, #12]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <arm_cfft_init_f32+0x18c>)
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <arm_cfft_init_f32+0x18c>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	605a      	str	r2, [r3, #4]
            break;
 80011c6:	e043      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <arm_cfft_init_f32+0x190>)
 80011ca:	899a      	ldrh	r2, [r3, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	819a      	strh	r2, [r3, #12]
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <arm_cfft_init_f32+0x190>)
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <arm_cfft_init_f32+0x190>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	605a      	str	r2, [r3, #4]
            break;
 80011e0:	e036      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <arm_cfft_init_f32+0x194>)
 80011e4:	899a      	ldrh	r2, [r3, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	819a      	strh	r2, [r3, #12]
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <arm_cfft_init_f32+0x194>)
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <arm_cfft_init_f32+0x194>)
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	605a      	str	r2, [r3, #4]
            break;
 80011fa:	e029      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <arm_cfft_init_f32+0x198>)
 80011fe:	899a      	ldrh	r2, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	819a      	strh	r2, [r3, #12]
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <arm_cfft_init_f32+0x198>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <arm_cfft_init_f32+0x198>)
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	605a      	str	r2, [r3, #4]
            break;
 8001214:	e01c      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <arm_cfft_init_f32+0x19c>)
 8001218:	899a      	ldrh	r2, [r3, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	819a      	strh	r2, [r3, #12]
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <arm_cfft_init_f32+0x19c>)
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <arm_cfft_init_f32+0x19c>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	605a      	str	r2, [r3, #4]
            break;
 800122e:	e00f      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <arm_cfft_init_f32+0x1a0>)
 8001232:	899a      	ldrh	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	819a      	strh	r2, [r3, #12]
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <arm_cfft_init_f32+0x1a0>)
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <arm_cfft_init_f32+0x1a0>)
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	605a      	str	r2, [r3, #4]
            break;
 8001248:	e002      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 800124a:	23ff      	movs	r3, #255	; 0xff
 800124c:	73fb      	strb	r3, [r7, #15]
            break;
 800124e:	bf00      	nop
        }


        return (status);
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	08010a70 	.word	0x08010a70
 8001264:	08010aa0 	.word	0x08010aa0
 8001268:	08010a40 	.word	0x08010a40
 800126c:	08010a80 	.word	0x08010a80
 8001270:	08010ab0 	.word	0x08010ab0
 8001274:	08010a60 	.word	0x08010a60
 8001278:	08010a50 	.word	0x08010a50
 800127c:	08010ac0 	.word	0x08010ac0
 8001280:	08010a90 	.word	0x08010a90

08001284 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 800128a:	f003 facd 	bl	8004828 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 800128e:	f000 f8f3 	bl	8001478 <SystemClock_Config>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 8001292:	f002 fa1f 	bl	80036d4 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8001296:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800129a:	2001      	movs	r0, #1
 800129c:	f002 faa8 	bl	80037f0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f002 fb09 	bl	80038b8 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80012a6:	f002 fdd3 	bl	8003e50 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012aa:	f04f 30ff 	mov.w	r0, #4294967295
 80012ae:	f002 fb5f 	bl	8003970 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80012b2:	f002 fa85 	bl	80037c0 <BSP_LCD_GetXSize>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29c      	uxth	r4, r3
 80012ba:	f002 fa8d 	bl	80037d8 <BSP_LCD_GetYSize>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f003 f9ab 	bl	8004620 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 80012ca:	f000 ffab 	bl	8002224 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 80012ce:	f000 ffc9 	bl	8002264 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 80012d2:	2000      	movs	r0, #0
 80012d4:	f001 fde6 	bl	8002ea4 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 80012d8:	2001      	movs	r0, #1
 80012da:	f001 fde3 	bl	8002ea4 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 80012de:	f000 fe11 	bl	8001f04 <MENU_draw>
	MENU_hint();						// Show hint at startup
 80012e2:	f000 fe99 	bl	8002018 <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 80012e6:	f000 f945 	bl	8001574 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 80012ea:	f000 fa1f 	bl	800172c <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 80012ee:	f000 fadd 	bl	80018ac <MEAS_timer_init>

    // Timer configuration
    int timer_duration = 20; // in seconds
 80012f2:	2314      	movs	r3, #20
 80012f4:	61fb      	str	r3, [r7, #28]
    time_t start_time = time(NULL);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f009 fafe 	bl	800a8f8 <time>
 80012fc:	e9c7 0104 	strd	r0, r1, [r7, #16]
    time_t current_time = start_time;
 8001300:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001304:	e9c7 2300 	strd	r2, r3, [r7]
    char* time_string = ctime(&current_time);
 8001308:	463b      	mov	r3, r7
 800130a:	4618      	mov	r0, r3
 800130c:	f008 fbf0 	bl	8009af0 <ctime>
 8001310:	60f8      	str	r0, [r7, #12]

	/* Infinite while loop */
	while (difftime(current_time, start_time) < timer_duration) {							// Infinitely loop in main function
 8001312:	e083      	b.n	800141c <main+0x198>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8001314:	2000      	movs	r0, #0
 8001316:	f001 fe4d 	bl	8002fb4 <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <main+0x1d4>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d02b      	beq.n	800137a <main+0xf6>
			MEAS_data_ready = false;
 8001322:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <main+0x1d4>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

			complex_fft(cfft_inout);
 8001328:	484c      	ldr	r0, [pc, #304]	; (800145c <main+0x1d8>)
 800132a:	f000 fff9 	bl	8002320 <complex_fft>

			// Output stored in array testOutput
			get_magnitude();
 800132e:	f001 f80d 	bl	800234c <get_magnitude>

			max_index_pass = get_max_index(testOutput);
 8001332:	484b      	ldr	r0, [pc, #300]	; (8001460 <main+0x1dc>)
 8001334:	f001 f83a 	bl	80023ac <get_max_index>
 8001338:	4603      	mov	r3, r0
 800133a:	4a4a      	ldr	r2, [pc, #296]	; (8001464 <main+0x1e0>)
 800133c:	6013      	str	r3, [r2, #0]

		    dopplerFrequency = get_doppler_frequency(max_index_pass);
 800133e:	4b49      	ldr	r3, [pc, #292]	; (8001464 <main+0x1e0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f001 f846 	bl	80023d4 <get_doppler_frequency>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	4b46      	ldr	r3, [pc, #280]	; (8001468 <main+0x1e4>)
 800134e:	edc3 7a00 	vstr	s15, [r3]

		    velocity = calculate_speed(dopplerFrequency);
 8001352:	4b45      	ldr	r3, [pc, #276]	; (8001468 <main+0x1e4>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	f001 f878 	bl	8002450 <calculate_speed>
 8001360:	eef0 7a40 	vmov.f32	s15, s0
 8001364:	4b41      	ldr	r3, [pc, #260]	; (800146c <main+0x1e8>)
 8001366:	edc3 7a00 	vstr	s15, [r3]

		    MEAS_show_data();
 800136a:	f000 fc87 	bl	8001c7c <MEAS_show_data>

		    // start measurement again
			ADC1_IN13_ADC2_IN11_dual_init(); // ADC initialize
 800136e:	f000 fad3 	bl	8001918 <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN11_dual_start(); // start sampling
 8001372:	f000 fb7b 	bl	8001a6c <ADC1_IN13_ADC2_IN11_dual_start>
			DMA2_Stream4_IRQHandler(); // write samples in ADC_samples
 8001376:	f000 fbeb 	bl	8001b50 <DMA2_Stream4_IRQHandler>

		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 800137a:	f000 ffa5 	bl	80022c8 <PB_pressed>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d01d      	beq.n	80013c0 <main+0x13c>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <main+0x1ec>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf14      	ite	ne
 800138c:	2301      	movne	r3, #1
 800138e:	2300      	moveq	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f083 0301 	eor.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <main+0x1ec>)
 80013a0:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <main+0x1ec>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <main+0x132>
				DAC_init();
 80013aa:	f000 fa23 	bl	80017f4 <DAC_init>
				BSP_LED_On(LED4);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f001 fdcc 	bl	8002f4c <BSP_LED_On>
 80013b4:	e004      	b.n	80013c0 <main+0x13c>
			} else {
				DAC_reset();
 80013b6:	f000 fa07 	bl	80017c8 <DAC_reset>
				BSP_LED_Off(LED4);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f001 fde0 	bl	8002f80 <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 80013c0:	f000 fe6a 	bl	8002098 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 80013c4:	f000 fe56 	bl	8002074 <MENU_get_transition>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d817      	bhi.n	80013fe <main+0x17a>
 80013ce:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <main+0x150>)
 80013d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d4:	080013f1 	.word	0x080013f1
 80013d8:	080013ff 	.word	0x080013ff
 80013dc:	080013ff 	.word	0x080013ff
 80013e0:	080013ff 	.word	0x080013ff
 80013e4:	080013ff 	.word	0x080013ff
 80013e8:	080013ff 	.word	0x080013ff
 80013ec:	080013ff 	.word	0x080013ff
		case MENU_NONE:					// No transition => do nothing
			break;
		case MENU_ZERO:
			ADC1_IN13_ADC2_IN11_dual_init(); // ADC initialize
 80013f0:	f000 fa92 	bl	8001918 <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN11_dual_start(); // star sampling
 80013f4:	f000 fb3a 	bl	8001a6c <ADC1_IN13_ADC2_IN11_dual_start>
			DMA2_Stream4_IRQHandler(); // write samples in ADC_samples
 80013f8:	f000 fbaa 	bl	8001b50 <DMA2_Stream4_IRQHandler>
			break;
 80013fc:	e000      	b.n	8001400 <main+0x17c>
		case MENU_FOUR:
			break;
		case MENU_FIVE:
			break;
		default:						// Should never occur
			break;
 80013fe:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 8001400:	20c8      	movs	r0, #200	; 0xc8
 8001402:	f003 fa8b 	bl	800491c <HAL_Delay>

		// Update the current time
	    printf("The current time is %s", time_string);
 8001406:	68f9      	ldr	r1, [r7, #12]
 8001408:	481a      	ldr	r0, [pc, #104]	; (8001474 <main+0x1f0>)
 800140a:	f009 fa19 	bl	800a840 <iprintf>
		current_time = time(NULL);
 800140e:	2000      	movs	r0, #0
 8001410:	f009 fa72 	bl	800a8f8 <time>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	e9c7 2300 	strd	r2, r3, [r7]
	while (difftime(current_time, start_time) < timer_duration) {							// Infinitely loop in main function
 800141c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001420:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001424:	f008 fb6b 	bl	8009afe <difftime>
 8001428:	ec55 4b10 	vmov	r4, r5, d0
 800142c:	69f8      	ldr	r0, [r7, #28]
 800142e:	f7ff f8f3 	bl	8000618 <__aeabi_i2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7ff fbc9 	bl	8000bd0 <__aeabi_dcmplt>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	f47f af67 	bne.w	8001314 <main+0x90>
	}
	BSP_LED_Toggle(LED4);			// Visual feedback when running
 8001446:	2001      	movs	r0, #1
 8001448:	f001 fdb4 	bl	8002fb4 <BSP_LED_Toggle>
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bdb0      	pop	{r4, r5, r7, pc}
 8001456:	bf00      	nop
 8001458:	20000424 	.word	0x20000424
 800145c:	20000630 	.word	0x20000630
 8001460:	20000320 	.word	0x20000320
 8001464:	20000420 	.word	0x20000420
 8001468:	2000083c 	.word	0x2000083c
 800146c:	2000031c 	.word	0x2000031c
 8001470:	20000425 	.word	0x20000425
 8001474:	0800de88 	.word	0x0800de88

08001478 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b0a0      	sub	sp, #128	; 0x80
 800147c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001482:	2230      	movs	r2, #48	; 0x30
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f008 fc88 	bl	8009d9c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2230      	movs	r2, #48	; 0x30
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f008 fc79 	bl	8009d9c <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <SystemClock_Config+0xf0>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <SystemClock_Config+0xf0>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <SystemClock_Config+0xf0>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <SystemClock_Config+0xf4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a27      	ldr	r2, [pc, #156]	; (800156c <SystemClock_Config+0xf4>)
 80014d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <SystemClock_Config+0xf4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ec:	2302      	movs	r3, #2
 80014ee:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014f4:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80014f6:	2308      	movs	r3, #8
 80014f8:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 80014fa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014fe:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001500:	2302      	movs	r3, #2
 8001502:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001504:	2307      	movs	r3, #7
 8001506:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001508:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800150c:	4618      	mov	r0, r3
 800150e:	f005 fc57 	bl	8006dc0 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001512:	230f      	movs	r3, #15
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001516:	2302      	movs	r3, #2
 8001518:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800151e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800152a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800152e:	2105      	movs	r1, #5
 8001530:	4618      	mov	r0, r3
 8001532:	f005 feb3 	bl	800729c <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001536:	2308      	movs	r3, #8
 8001538:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800153a:	23c0      	movs	r3, #192	; 0xc0
 800153c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800153e:	2304      	movs	r3, #4
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4618      	mov	r0, r3
 800154e:	f006 f8b1 	bl	80076b4 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <SystemClock_Config+0xf8>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4a06      	ldr	r2, [pc, #24]	; (8001570 <SystemClock_Config+0xf8>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6053      	str	r3, [r2, #4]
}
 800155e:	bf00      	nop
 8001560:	3780      	adds	r7, #128	; 0x80
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000
 8001570:	40012300 	.word	0x40012300

08001574 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <gyro_disable+0xb4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a29      	ldr	r2, [pc, #164]	; (8001628 <gyro_disable+0xb4>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <gyro_disable+0xb4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <gyro_disable+0xb8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a24      	ldr	r2, [pc, #144]	; (800162c <gyro_disable+0xb8>)
 800159c:	f023 030c 	bic.w	r3, r3, #12
 80015a0:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <gyro_disable+0xb8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <gyro_disable+0xb8>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <gyro_disable+0xb8>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <gyro_disable+0xb8>)
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 80015ba:	200a      	movs	r0, #10
 80015bc:	f003 f9ae 	bl	800491c <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <gyro_disable+0xb8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <gyro_disable+0xb8>)
 80015c6:	f043 030c 	orr.w	r3, r3, #12
 80015ca:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <gyro_disable+0xb4>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <gyro_disable+0xb4>)
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <gyro_disable+0xb4>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <gyro_disable+0xbc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a10      	ldr	r2, [pc, #64]	; (8001630 <gyro_disable+0xbc>)
 80015ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015f2:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <gyro_disable+0xbc>)
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <gyro_disable+0xbc>)
 80015fa:	f023 030f 	bic.w	r3, r3, #15
 80015fe:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <gyro_disable+0xbc>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <gyro_disable+0xbc>)
 8001606:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800160a:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 800160c:	200a      	movs	r0, #10
 800160e:	f003 f985 	bl	800491c <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <gyro_disable+0xbc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <gyro_disable+0xbc>)
 8001618:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800161c:	6013      	str	r3, [r2, #0]
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40020800 	.word	0x40020800
 8001630:	40021400 	.word	0x40021400

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db12      	blt.n	80016a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	490a      	ldr	r1, [pc, #40]	; (80016b4 <__NVIC_DisableIRQ+0x44>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	3320      	adds	r3, #32
 8001698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800169c:	f3bf 8f4f 	dsb	sy
}
 80016a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016a2:	f3bf 8f6f 	isb	sy
}
 80016a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0c      	blt.n	80016e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <__NVIC_ClearPendingIRQ+0x38>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	3360      	adds	r3, #96	; 0x60
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <roundToAccuracy>:

/******************************************************************************
 * Functions
 *****************************************************************************/

float32_t roundToAccuracy(float32_t num) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	ed87 0a01 	vstr	s0, [r7, #4]
    return roundf(num / 0.3f) * 0.3f;
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001728 <roundToAccuracy+0x34>
 8001706:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800170a:	eeb0 0a47 	vmov.f32	s0, s14
 800170e:	f00c fb11 	bl	800dd34 <roundf>
 8001712:	eef0 7a40 	vmov.f32	s15, s0
 8001716:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001728 <roundToAccuracy+0x34>
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800171e:	eeb0 0a67 	vmov.f32	s0, s15
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	3e99999a 	.word	0x3e99999a

0800172c <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MEAS_GPIO_analog_init+0x90>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <MEAS_GPIO_analog_init+0x90>)
 8001754:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001758:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MEAS_GPIO_analog_init+0x94>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a11      	ldr	r2, [pc, #68]	; (80017c0 <MEAS_GPIO_analog_init+0x94>)
 800177c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001780:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MEAS_GPIO_analog_init+0x98>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <MEAS_GPIO_analog_init+0x98>)
 80017a4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80017a8:	6013      	str	r3, [r2, #0]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40021400 	.word	0x40021400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020000 	.word	0x40020000

080017c8 <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <DAC_reset+0x28>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <DAC_reset+0x28>)
 80017d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017d6:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <DAC_reset+0x28>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <DAC_reset+0x28>)
 80017de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80017e2:	6213      	str	r3, [r2, #32]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <DAC_init+0x3c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <DAC_init+0x3c>)
 8001804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <DAC_init+0x3c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <DAC_init+0x40>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a06      	ldr	r2, [pc, #24]	; (8001834 <DAC_init+0x40>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40007400 	.word	0x40007400

08001838 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <DAC_increment+0x30>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3314      	adds	r3, #20
 8001842:	4a09      	ldr	r2, [pc, #36]	; (8001868 <DAC_increment+0x30>)
 8001844:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <DAC_increment+0x30>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800184e:	d302      	bcc.n	8001856 <DAC_increment+0x1e>
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <DAC_increment+0x30>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <DAC_increment+0x34>)
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <DAC_increment+0x30>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6153      	str	r3, [r2, #20]
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	2000062c 	.word	0x2000062c
 800186c:	40007400 	.word	0x40007400

08001870 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <ADC_reset+0x38>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <ADC_reset+0x38>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <ADC_reset+0x38>)
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <ADC_reset+0x38>)
 8001886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800188a:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 800188c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MEAS_timer_init+0x68>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <MEAS_timer_init+0x68>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MEAS_timer_init+0x68>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 80018ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d2:	2237      	movs	r2, #55	; 0x37
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 80018d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018da:	2231      	movs	r2, #49	; 0x31
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 80018de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 80018ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 80018fe:	201c      	movs	r0, #28
 8001900:	f7ff feda 	bl	80016b8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8001904:	201c      	movs	r0, #28
 8001906:	f7ff fe95 	bl	8001634 <__NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <ADC1_IN13_ADC2_IN11_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN11 = GPIO PC1
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_init(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// Only 1 input is converted
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <ADC1_IN13_ADC2_IN11_dual_init+0x130>)
 8001920:	2202      	movs	r2, #2
 8001922:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	4a47      	ldr	r2, [pc, #284]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800192e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001932:	6453      	str	r3, [r2, #68]	; 0x44
 8001934:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800194a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194e:	6453      	str	r3, [r2, #68]	; 0x44
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 800195c:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4a38      	ldr	r2, [pc, #224]	; (8001a50 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 800196e:	f043 0306 	orr.w	r3, r3, #6
 8001972:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001974:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a36      	ldr	r2, [pc, #216]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 800197a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8001986:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 800198a:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (11UL << ADC_SQR3_SQ1_Pos);	// Input 11 = first conversion
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	4a30      	ldr	r2, [pc, #192]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8001992:	f043 030b 	orr.w	r3, r3, #11
 8001996:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	4a2e      	ldr	r2, [pc, #184]	; (8001a58 <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 800199e:	f043 030d 	orr.w	r3, r3, #13
 80019a2:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80019ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019b2:	6313      	str	r3, [r2, #48]	; 0x30
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80019cc:	bf00      	nop
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <ADC1_IN13_ADC2_IN11_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 80019e0:	f043 0320 	orr.w	r3, r3, #32
 80019e4:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019e8:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a10:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a32:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x14c>)
 8001a34:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a38:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <ADC1_IN13_ADC2_IN11_dual_init+0x150>)
 8001a3a:	60da      	str	r2, [r3, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40012300 	.word	0x40012300
 8001a54:	40012000 	.word	0x40012000
 8001a58:	40012100 	.word	0x40012100
 8001a5c:	40026470 	.word	0x40026470
 8001a60:	40026400 	.word	0x40026400
 8001a64:	40012308 	.word	0x40012308
 8001a68:	2000042c 	.word	0x2000042c

08001a6c <ADC1_IN13_ADC2_IN11_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_start(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <ADC1_IN13_ADC2_IN11_dual_start+0x48>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <ADC1_IN13_ADC2_IN11_dual_start+0x48>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 8001a7c:	203c      	movs	r0, #60	; 0x3c
 8001a7e:	f7ff fe1b 	bl	80016b8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 8001a82:	203c      	movs	r0, #60	; 0x3c
 8001a84:	f7ff fdd6 	bl	8001634 <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <ADC1_IN13_ADC2_IN11_dual_start+0x4c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <ADC1_IN13_ADC2_IN11_dual_start+0x4c>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <ADC1_IN13_ADC2_IN11_dual_start+0x50>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <ADC1_IN13_ADC2_IN11_dual_start+0x50>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40026470 	.word	0x40026470
 8001ab8:	40012000 	.word	0x40012000
 8001abc:	40012100 	.word	0x40012100

08001ac0 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <TIM2_IRQHandler+0x24>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001adc:	f7ff feac 	bl	8001838 <DAC_increment>
	}
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000425 	.word	0x20000425

08001ae8 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <ADC_IRQHandler+0x58>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001af8:	4911      	ldr	r1, [pc, #68]	; (8001b40 <ADC_IRQHandler+0x58>)
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <ADC_IRQHandler+0x5c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	4810      	ldr	r0, [pc, #64]	; (8001b44 <ADC_IRQHandler+0x5c>)
 8001b02:	6002      	str	r2, [r0, #0]
 8001b04:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001b06:	4910      	ldr	r1, [pc, #64]	; (8001b48 <ADC_IRQHandler+0x60>)
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <ADC_IRQHandler+0x5c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b3f      	cmp	r3, #63	; 0x3f
 8001b12:	d912      	bls.n	8001b3a <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <ADC_IRQHandler+0x58>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <ADC_IRQHandler+0x58>)
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001b30:	f7ff fe9e 	bl	8001870 <ADC_reset>
			MEAS_data_ready = true;
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <ADC_IRQHandler+0x64>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40012200 	.word	0x40012200
 8001b44:	20000428 	.word	0x20000428
 8001b48:	2000042c 	.word	0x2000042c
 8001b4c:	20000424 	.word	0x20000424

08001b50 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <DMA2_Stream4_IRQHandler+0x10c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d077      	beq.n	8001c52 <DMA2_Stream4_IRQHandler+0x102>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8001b62:	203c      	movs	r0, #60	; 0x3c
 8001b64:	f7ff fd84 	bl	8001670 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8001b68:	203c      	movs	r0, #60	; 0x3c
 8001b6a:	f7ff fda5 	bl	80016b8 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <DMA2_Stream4_IRQHandler+0x110>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a3b      	ldr	r2, [pc, #236]	; (8001c60 <DMA2_Stream4_IRQHandler+0x110>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001b7a:	bf00      	nop
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <DMA2_Stream4_IRQHandler+0x110>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8001b88:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <DMA2_Stream4_IRQHandler+0x10c>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a33      	ldr	r2, [pc, #204]	; (8001c5c <DMA2_Stream4_IRQHandler+0x10c>)
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
 8001b92:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <DMA2_Stream4_IRQHandler+0x114>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	; (8001c64 <DMA2_Stream4_IRQHandler+0x114>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <DMA2_Stream4_IRQHandler+0x118>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a2c      	ldr	r2, [pc, #176]	; (8001c68 <DMA2_Stream4_IRQHandler+0x118>)
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <DMA2_Stream4_IRQHandler+0x11c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <DMA2_Stream4_IRQHandler+0x11c>)
 8001bc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001bc6:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--) {
 8001bc8:	233f      	movs	r3, #63	; 0x3f
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	e039      	b.n	8001c42 <DMA2_Stream4_IRQHandler+0xf2>
		    ADC_samples[2*i+1] = (ADC_samples[i] >> 16);         // (*(int32_t*)& cast für ADC_samples
 8001bce:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	3301      	adds	r3, #1
 8001bdc:	0c12      	lsrs	r2, r2, #16
 8001bde:	4924      	ldr	r1, [pc, #144]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	491f      	ldr	r1, [pc, #124]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			cfft_inout[2*i+1] = ADC_samples[2*i+1];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001c00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	3301      	adds	r3, #1
 8001c0a:	ee07 2a90 	vmov	s15, r2
 8001c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c12:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <DMA2_Stream4_IRQHandler+0x124>)
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	edc3 7a00 	vstr	s15, [r3]
			cfft_inout[2*i]   = ADC_samples[2*i];          // (*(int32_t*)&
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001c22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	ee07 2a90 	vmov	s15, r2
 8001c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <DMA2_Stream4_IRQHandler+0x124>)
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	edc3 7a00 	vstr	s15, [r3]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	dac2      	bge.n	8001bce <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8001c48:	f7ff fe12 	bl	8001870 <ADC_reset>
		MEAS_data_ready = true;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <DMA2_Stream4_IRQHandler+0x128>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
	}
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40026400 	.word	0x40026400
 8001c60:	40026470 	.word	0x40026470
 8001c64:	40012000 	.word	0x40012000
 8001c68:	40012100 	.word	0x40012100
 8001c6c:	40012300 	.word	0x40012300
 8001c70:	2000042c 	.word	0x2000042c
 8001c74:	20000630 	.word	0x20000630
 8001c78:	20000424 	.word	0x20000424

08001c7c <MEAS_show_data>:
 * of signals and results.
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void) {
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b099      	sub	sp, #100	; 0x64
 8001c80:	af02      	add	r7, sp, #8

	float32_t v = velocity;
 8001c82:	4b97      	ldr	r3, [pc, #604]	; (8001ee0 <MEAS_show_data+0x264>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	647b      	str	r3, [r7, #68]	; 0x44
	const uint32_t Y_OFFSET = 260;
 8001c88:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c8c:	643b      	str	r3, [r7, #64]	; 0x40
	const uint32_t X_SIZE = 240;
 8001c8e:	23f0      	movs	r3, #240	; 0xf0
 8001c90:	63fb      	str	r3, [r7, #60]	; 0x3c

	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 8001c92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t data;
	uint32_t data_last;

	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f001 fe18 	bl	80038d8 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8001ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f002 f84e 	bl	8003d58 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font16);
 8001cbc:	4889      	ldr	r0, [pc, #548]	; (8001ee4 <MEAS_show_data+0x268>)
 8001cbe:	f001 fe3d 	bl	800393c <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc6:	f001 fe1f 	bl	8003908 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001cca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001cce:	f001 fe03 	bl	80038d8 <BSP_LCD_SetTextColor>
	char text[50];
	snprintf(text, 50, "velocity: %.1f km/h", v);
 8001cd2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001cd4:	f7fe fcb2 	bl	800063c <__aeabi_f2d>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4638      	mov	r0, r7
 8001cde:	e9cd 2300 	strd	r2, r3, [sp]
 8001ce2:	4a81      	ldr	r2, [pc, #516]	; (8001ee8 <MEAS_show_data+0x26c>)
 8001ce4:	2132      	movs	r1, #50	; 0x32
 8001ce6:	f008 fdd3 	bl	800a890 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, CENTER_MODE);
 8001cea:	463a      	mov	r2, r7
 8001cec:	2301      	movs	r3, #1
 8001cee:	2132      	movs	r1, #50	; 0x32
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f001 fea9 	bl	8003a48 <BSP_LCD_DisplayStringAt>

	snprintf(text, 50, "I: blue, Q: red");
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	4a7c      	ldr	r2, [pc, #496]	; (8001eec <MEAS_show_data+0x270>)
 8001cfa:	2132      	movs	r1, #50	; 0x32
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f008 fdc7 	bl	800a890 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 70, (uint8_t *)text, CENTER_MODE);
 8001d02:	463a      	mov	r2, r7
 8001d04:	2301      	movs	r3, #1
 8001d06:	2146      	movs	r1, #70	; 0x46
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f001 fe9d 	bl	8003a48 <BSP_LCD_DisplayStringAt>


	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d0e:	4878      	ldr	r0, [pc, #480]	; (8001ef0 <MEAS_show_data+0x274>)
 8001d10:	f001 fde2 	bl	80038d8 <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_input_count*0] / f;
 8001d14:	4b77      	ldr	r3, [pc, #476]	; (8001ef4 <MEAS_show_data+0x278>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	657b      	str	r3, [r7, #84]	; 0x54
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001d20:	2301      	movs	r3, #1
 8001d22:	653b      	str	r3, [r7, #80]	; 0x50
 8001d24:	e033      	b.n	8001d8e <MEAS_show_data+0x112>
		data_last = data;
 8001d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
		data = (ADC_samples[MEAS_input_count*i]) / f;
 8001d2a:	4b73      	ldr	r3, [pc, #460]	; (8001ef8 <MEAS_show_data+0x27c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	4a6f      	ldr	r2, [pc, #444]	; (8001ef4 <MEAS_show_data+0x278>)
 8001d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d40:	657b      	str	r3, [r7, #84]	; 0x54
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001d42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d901      	bls.n	8001d4e <MEAS_show_data+0xd2>
 8001d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d4c:	657b      	str	r3, [r7, #84]	; 0x54
		BSP_LCD_DrawLine(3*(i-1), Y_OFFSET-data_last, 3*i, Y_OFFSET-data);
 8001d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	0052      	lsls	r2, r2, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	3b03      	subs	r3, #3
 8001d5c:	b298      	uxth	r0, r3
 8001d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	461a      	mov	r2, r3
 8001d70:	0052      	lsls	r2, r2, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	b29c      	uxth	r4, r3
 8001d76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	4622      	mov	r2, r4
 8001d84:	f001 ff1e 	bl	8003bc4 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	653b      	str	r3, [r7, #80]	; 0x50
 8001d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d90:	2b3f      	cmp	r3, #63	; 0x3f
 8001d92:	d9c8      	bls.n	8001d26 <MEAS_show_data+0xaa>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_input_count == 2) {
 8001d94:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <MEAS_show_data+0x27c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d143      	bne.n	8001e24 <MEAS_show_data+0x1a8>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001d9c:	4857      	ldr	r0, [pc, #348]	; (8001efc <MEAS_show_data+0x280>)
 8001d9e:	f001 fd9b 	bl	80038d8 <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 8001da2:	4b54      	ldr	r3, [pc, #336]	; (8001ef4 <MEAS_show_data+0x278>)
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	657b      	str	r3, [r7, #84]	; 0x54
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001dae:	2301      	movs	r3, #1
 8001db0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001db2:	e034      	b.n	8001e1e <MEAS_show_data+0x1a2>
			data_last = data;
 8001db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db6:	637b      	str	r3, [r7, #52]	; 0x34
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 8001db8:	4b4f      	ldr	r3, [pc, #316]	; (8001ef8 <MEAS_show_data+0x27c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <MEAS_show_data+0x278>)
 8001dc6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd0:	657b      	str	r3, [r7, #84]	; 0x54
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001dd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d901      	bls.n	8001dde <MEAS_show_data+0x162>
 8001dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ddc:	657b      	str	r3, [r7, #84]	; 0x54
			BSP_LCD_DrawLine(3*(i-1), Y_OFFSET-data_last, 3*i, Y_OFFSET-data);
 8001dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	0052      	lsls	r2, r2, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	3b03      	subs	r3, #3
 8001dec:	b298      	uxth	r0, r3
 8001dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b299      	uxth	r1, r3
 8001dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	0052      	lsls	r2, r2, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	b29c      	uxth	r4, r3
 8001e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	4622      	mov	r2, r4
 8001e14:	f001 fed6 	bl	8003bc4 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e20:	2b3f      	cmp	r3, #63	; 0x3f
 8001e22:	d9c7      	bls.n	8001db4 <MEAS_show_data+0x138>
		}
	}

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001e24:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001e28:	f001 fd56 	bl	80038d8 <BSP_LCD_SetTextColor>
	data = testOutput[0] / (f*9);
 8001e2c:	4b34      	ldr	r3, [pc, #208]	; (8001f00 <MEAS_show_data+0x284>)
 8001e2e:	edd3 6a00 	vldr	s13, [r3]
 8001e32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e34:	4613      	mov	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4a:	ee17 3a90 	vmov	r3, s15
 8001e4e:	657b      	str	r3, [r7, #84]	; 0x54
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001e50:	2301      	movs	r3, #1
 8001e52:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e54:	e03c      	b.n	8001ed0 <MEAS_show_data+0x254>
		data_last = data;
 8001e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
		data = (testOutput[i]) / (f*9);
 8001e5a:	4a29      	ldr	r2, [pc, #164]	; (8001f00 <MEAS_show_data+0x284>)
 8001e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	edd3 6a00 	vldr	s13, [r3]
 8001e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e7e:	ee17 3a90 	vmov	r3, s15
 8001e82:	657b      	str	r3, [r7, #84]	; 0x54
		if (data > Y_OFFSET) { data = Y_OFFSET; } // Limit value, prevent crash
 8001e84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d901      	bls.n	8001e90 <MEAS_show_data+0x214>
 8001e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8e:	657b      	str	r3, [r7, #84]	; 0x54
		BSP_LCD_DrawLine(3*(i-1), Y_OFFSET-data_last, 3*i, Y_OFFSET-data);
 8001e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	0052      	lsls	r2, r2, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b03      	subs	r3, #3
 8001e9e:	b298      	uxth	r0, r3
 8001ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	b299      	uxth	r1, r3
 8001eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	0052      	lsls	r2, r2, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	b29c      	uxth	r4, r3
 8001eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4622      	mov	r2, r4
 8001ec6:	f001 fe7d 	bl	8003bc4 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ecc:	3301      	adds	r3, #1
 8001ece:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ed4:	d9bf      	bls.n	8001e56 <MEAS_show_data+0x1da>
	}



}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	375c      	adds	r7, #92	; 0x5c
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd90      	pop	{r4, r7, pc}
 8001ee0:	2000031c 	.word	0x2000031c
 8001ee4:	200000b0 	.word	0x200000b0
 8001ee8:	0800dea0 	.word	0x0800dea0
 8001eec:	0800deb4 	.word	0x0800deb4
 8001ef0:	ff0000ff 	.word	0xff0000ff
 8001ef4:	2000042c 	.word	0x2000042c
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	ffff0000 	.word	0xffff0000
 8001f00:	20000320 	.word	0x20000320

08001f04 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8001f0a:	4841      	ldr	r0, [pc, #260]	; (8002010 <MENU_draw+0x10c>)
 8001f0c:	f001 fd16 	bl	800393c <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8001f10:	f001 fc62 	bl	80037d8 <BSP_LCD_GetYSize>
 8001f14:	4603      	mov	r3, r0
 8001f16:	3b28      	subs	r3, #40	; 0x28
 8001f18:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8001f1e:	f001 fc4f 	bl	80037c0 <BSP_LCD_GetXSize>
 8001f22:	60b8      	str	r0, [r7, #8]
	h = MENU_HEIGHT;
 8001f24:	2328      	movs	r3, #40	; 0x28
 8001f26:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	e068      	b.n	8002000 <MENU_draw+0xfc>
		x = i*w;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8001f38:	4936      	ldr	r1, [pc, #216]	; (8002014 <MENU_draw+0x110>)
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	3324      	adds	r3, #36	; 0x24
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f001 fcc4 	bl	80038d8 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	b298      	uxth	r0, r3
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	b299      	uxth	r1, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	b29c      	uxth	r4, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4622      	mov	r2, r4
 8001f8a:	f001 fee5 	bl	8003d58 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 8001f8e:	4921      	ldr	r1, [pc, #132]	; (8002014 <MENU_draw+0x110>)
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4613      	mov	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3324      	adds	r3, #36	; 0x24
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f001 fcb1 	bl	8003908 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8001fa6:	491b      	ldr	r1, [pc, #108]	; (8002014 <MENU_draw+0x110>)
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3320      	adds	r3, #32
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f001 fc8d 	bl	80038d8 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,(uint8_t *)MENU_entry[i].line1, CENTER_MODE);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	0052      	lsls	r2, r2, #1
 8001fc6:	4413      	add	r3, r2
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	4413      	add	r3, r2
 8001fd0:	b298      	uxth	r0, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	0052      	lsls	r2, r2, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b299      	uxth	r1, r3
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4a08      	ldr	r2, [pc, #32]	; (8002014 <MENU_draw+0x110>)
 8001ff2:	441a      	add	r2, r3
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	f001 fd27 	bl	8003a48 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d093      	beq.n	8001f2e <MENU_draw+0x2a>
//		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
	}
}
 8002006:	bf00      	nop
 8002008:	bf00      	nop
 800200a:	371c      	adds	r7, #28
 800200c:	46bd      	mov	sp, r7
 800200e:	bd90      	pop	{r4, r7, pc}
 8002010:	200000b8 	.word	0x200000b8
 8002014:	20000008 	.word	0x20000008

08002018 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f001 fc72 	bl	8003908 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002024:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002028:	f001 fc56 	bl	80038d8 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 800202c:	480c      	ldr	r0, [pc, #48]	; (8002060 <MENU_hint+0x48>)
 800202e:	f001 fc85 	bl	800393c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Doppler Radar", CENTER_MODE);
 8002032:	2301      	movs	r3, #1
 8002034:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <MENU_hint+0x4c>)
 8002036:	210a      	movs	r1, #10
 8002038:	2005      	movs	r0, #5
 800203a:	f001 fd05 	bl	8003a48 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 800203e:	480a      	ldr	r0, [pc, #40]	; (8002068 <MENU_hint+0x50>)
 8002040:	f001 fc7c 	bl	800393c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Press \"start\" button", LEFT_MODE);
 8002044:	2303      	movs	r3, #3
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <MENU_hint+0x54>)
 8002048:	213c      	movs	r1, #60	; 0x3c
 800204a:	2005      	movs	r0, #5
 800204c:	f001 fcfc 	bl	8003a48 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start measurement", LEFT_MODE);
 8002050:	2303      	movs	r3, #3
 8002052:	4a07      	ldr	r2, [pc, #28]	; (8002070 <MENU_hint+0x58>)
 8002054:	2150      	movs	r1, #80	; 0x50
 8002056:	2005      	movs	r0, #5
 8002058:	f001 fcf6 	bl	8003a48 <BSP_LCD_DisplayStringAt>
//	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
//	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
//	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
//	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200000a8 	.word	0x200000a8
 8002064:	0800dec4 	.word	0x0800dec4
 8002068:	200000b0 	.word	0x200000b0
 800206c:	0800ded4 	.word	0x0800ded4
 8002070:	0800deec 	.word	0x0800deec

08002074 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 800207a:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MENU_get_transition+0x20>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 8002080:	4b04      	ldr	r3, [pc, #16]	; (8002094 <MENU_get_transition+0x20>)
 8002082:	2206      	movs	r2, #6
 8002084:	701a      	strb	r2, [r3, #0]
	return item;
 8002086:	79fb      	ldrb	r3, [r7, #7]
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	20000004 	.word	0x20000004

08002098 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8002098:	b598      	push	{r3, r4, r7, lr}
 800209a:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 800209c:	482e      	ldr	r0, [pc, #184]	; (8002158 <MENU_check_transition+0xc0>)
 800209e:	f002 fb05 	bl	80046ac <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 80020a2:	f001 fb99 	bl	80037d8 <BSP_LCD_GetYSize>
 80020a6:	4603      	mov	r3, r0
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <MENU_check_transition+0xc0>)
 80020ac:	889b      	ldrh	r3, [r3, #4]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	4b29      	ldr	r3, [pc, #164]	; (8002158 <MENU_check_transition+0xc0>)
 80020b4:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 80020b6:	f001 fb83 	bl	80037c0 <BSP_LCD_GetXSize>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b26      	ldr	r3, [pc, #152]	; (8002158 <MENU_check_transition+0xc0>)
 80020c0:	885b      	ldrh	r3, [r3, #2]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <MENU_check_transition+0xc0>)
 80020c8:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 80020ca:	f001 fb85 	bl	80037d8 <BSP_LCD_GetYSize>
 80020ce:	4603      	mov	r3, r0
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <MENU_check_transition+0xc0>)
 80020d4:	889b      	ldrh	r3, [r3, #4]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <MENU_check_transition+0xc0>)
 80020dc:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <MENU_check_transition+0xc0>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d035      	beq.n	8002152 <MENU_check_transition+0xba>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <MENU_check_transition+0xc4>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d131      	bne.n	8002152 <MENU_check_transition+0xba>
			item_old = item_new;		// Store old item
 80020ee:	4b1c      	ldr	r3, [pc, #112]	; (8002160 <MENU_check_transition+0xc8>)
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <MENU_check_transition+0xcc>)
 80020f4:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 80020f6:	f001 fb6f 	bl	80037d8 <BSP_LCD_GetYSize>
 80020fa:	4603      	mov	r3, r0
 80020fc:	3b28      	subs	r3, #40	; 0x28
 80020fe:	4a16      	ldr	r2, [pc, #88]	; (8002158 <MENU_check_transition+0xc0>)
 8002100:	8892      	ldrh	r2, [r2, #4]
 8002102:	4293      	cmp	r3, r2
 8002104:	d225      	bcs.n	8002152 <MENU_check_transition+0xba>
 8002106:	f001 fb67 	bl	80037d8 <BSP_LCD_GetYSize>
 800210a:	4603      	mov	r3, r0
 800210c:	4a12      	ldr	r2, [pc, #72]	; (8002158 <MENU_check_transition+0xc0>)
 800210e:	8892      	ldrh	r2, [r2, #4]
 8002110:	4293      	cmp	r3, r2
 8002112:	d91e      	bls.n	8002152 <MENU_check_transition+0xba>
				item_new = TS_State.X	// Calculate new item
 8002114:	4b10      	ldr	r3, [pc, #64]	; (8002158 <MENU_check_transition+0xc0>)
 8002116:	885b      	ldrh	r3, [r3, #2]
 8002118:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 800211a:	f001 fb51 	bl	80037c0 <BSP_LCD_GetXSize>
 800211e:	4603      	mov	r3, r0
 8002120:	fbb4 f3f3 	udiv	r3, r4, r3
 8002124:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <MENU_check_transition+0xc8>)
 8002128:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <MENU_check_transition+0xc8>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <MENU_check_transition+0xa0>
					item_new = MENU_NONE;	// Out of bounds
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <MENU_check_transition+0xc8>)
 8002134:	2206      	movs	r2, #6
 8002136:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8002138:	4b09      	ldr	r3, [pc, #36]	; (8002160 <MENU_check_transition+0xc8>)
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MENU_check_transition+0xcc>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	429a      	cmp	r2, r3
 8002142:	d106      	bne.n	8002152 <MENU_check_transition+0xba>
					item_new = MENU_NONE;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <MENU_check_transition+0xc8>)
 8002146:	2206      	movs	r2, #6
 8002148:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <MENU_check_transition+0xcc>)
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	4b03      	ldr	r3, [pc, #12]	; (800215c <MENU_check_transition+0xc4>)
 8002150:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8002152:	bf00      	nop
 8002154:	bd98      	pop	{r3, r4, r7, pc}
 8002156:	bf00      	nop
 8002158:	20000830 	.word	0x20000830
 800215c:	20000004 	.word	0x20000004
 8002160:	20000030 	.word	0x20000030
 8002164:	20000031 	.word	0x20000031

08002168 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 800216c:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <EXTI15_10_IRQHandler+0x40>)
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d014      	beq.n	80021a2 <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <EXTI15_10_IRQHandler+0x40>)
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <EXTI15_10_IRQHandler+0x40>)
 800217e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002182:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8002184:	f002 fa86 	bl	8004694 <BSP_TS_ITGetStatus>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 800218e:	f002 fb3f 	bl	8004810 <BSP_TS_ITClear>
			MENU_check_transition();
 8002192:	f7ff ff81 	bl	8002098 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <EXTI15_10_IRQHandler+0x40>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <EXTI15_10_IRQHandler+0x40>)
 800219c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a0:	6153      	str	r3, [r2, #20]
	}
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40013c00 	.word	0x40013c00

080021ac <__NVIC_EnableIRQ>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	db0b      	blt.n	80021d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	f003 021f 	and.w	r2, r3, #31
 80021c4:	4907      	ldr	r1, [pc, #28]	; (80021e4 <__NVIC_EnableIRQ+0x38>)
 80021c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2001      	movs	r0, #1
 80021ce:	fa00 f202 	lsl.w	r2, r0, r2
 80021d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_ClearPendingIRQ>:
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0c      	blt.n	8002214 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	; (8002220 <__NVIC_ClearPendingIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	3360      	adds	r3, #96	; 0x60
 8002210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100

08002224 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <PB_init+0x38>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <PB_init+0x38>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b08      	ldr	r3, [pc, #32]	; (800225c <PB_init+0x38>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <PB_init+0x3c>)
 8002248:	4a05      	ldr	r2, [pc, #20]	; (8002260 <PB_init+0x3c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6013      	str	r3, [r2, #0]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800
 8002260:	40020000 	.word	0x40020000

08002264 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <PB_enableIRQ+0x58>)
 8002270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <PB_enableIRQ+0x58>)
 8002274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002278:	6453      	str	r3, [r2, #68]	; 0x44
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <PB_enableIRQ+0x58>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8002286:	4b0e      	ldr	r3, [pc, #56]	; (80022c0 <PB_enableIRQ+0x5c>)
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <PB_enableIRQ+0x5c>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <PB_enableIRQ+0x60>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <PB_enableIRQ+0x60>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <PB_enableIRQ+0x60>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <PB_enableIRQ+0x60>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 80022a6:	2006      	movs	r0, #6
 80022a8:	f7ff ff9e 	bl	80021e8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 80022ac:	2006      	movs	r0, #6
 80022ae:	f7ff ff7d 	bl	80021ac <__NVIC_EnableIRQ>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <PB_pressed+0x20>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 80022d4:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <PB_pressed+0x20>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
	return pressed;
 80022da:	79fb      	ldrb	r3, [r7, #7]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	20000838 	.word	0x20000838

080022ec <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <EXTI0_IRQHandler+0x2c>)
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <EXTI0_IRQHandler+0x2c>)
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	4a05      	ldr	r2, [pc, #20]	; (8002318 <EXTI0_IRQHandler+0x2c>)
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <EXTI0_IRQHandler+0x30>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
	}
}
 800230e:	bf00      	nop
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	40013c00 	.word	0x40013c00
 800231c:	20000838 	.word	0x20000838

08002320 <complex_fft>:
arm_cfft_instance_f32 fftInstance;
float32_t max_value;
uint32_t max_index; // index at max value

// Functions
void complex_fft(float32_t fft_input[]) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

    // Initialize the FFT instance
    arm_cfft_init_f32(&fftInstance, FFT_SIZE);
 8002328:	2140      	movs	r1, #64	; 0x40
 800232a:	4806      	ldr	r0, [pc, #24]	; (8002344 <complex_fft+0x24>)
 800232c:	f7fe fed8 	bl	80010e0 <arm_cfft_init_f32>

    // Perform the FFT, 0 indicates forward FFT, 1 enables bit reversal of output
    arm_cfft_f32(&fftInstance, cfft_inout, 0, 1);
 8002330:	2301      	movs	r3, #1
 8002332:	2200      	movs	r2, #0
 8002334:	4904      	ldr	r1, [pc, #16]	; (8002348 <complex_fft+0x28>)
 8002336:	4803      	ldr	r0, [pc, #12]	; (8002344 <complex_fft+0x24>)
 8002338:	f006 ff86 	bl	8009248 <arm_cfft_f32>

}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	20000840 	.word	0x20000840
 8002348:	20000630 	.word	0x20000630

0800234c <get_magnitude>:

void get_magnitude(void) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0

    // magnitude calculation
    arm_cmplx_mag_f32(cfft_inout, testOutput, FFT_SIZE);
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	4913      	ldr	r1, [pc, #76]	; (80023a4 <get_magnitude+0x58>)
 8002356:	4814      	ldr	r0, [pc, #80]	; (80023a8 <get_magnitude+0x5c>)
 8002358:	f006 fff0 	bl	800933c <arm_cmplx_mag_f32>

    // set DC value to 0 because we have an offset of 1.4V
    testOutput[0] = 0;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <get_magnitude+0x58>)
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

    int size = 64;
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	60bb      	str	r3, [r7, #8]
    int mean = meanOfArray(testOutput, size);
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	480e      	ldr	r0, [pc, #56]	; (80023a4 <get_magnitude+0x58>)
 800236c:	f000 f8b4 	bl	80024d8 <meanOfArray>
 8002370:	6078      	str	r0, [r7, #4]

    if(mean < THRESHOLD) {
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002378:	da10      	bge.n	800239c <get_magnitude+0x50>

    	for(int i = 0; i < size; i++) {
 800237a:	2300      	movs	r3, #0
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	e009      	b.n	8002394 <get_magnitude+0x48>
    		testOutput[i] = (float32_t) 0.0;
 8002380:	4a08      	ldr	r2, [pc, #32]	; (80023a4 <get_magnitude+0x58>)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
    	for(int i = 0; i < size; i++) {
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3301      	adds	r3, #1
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	429a      	cmp	r2, r3
 800239a:	dbf1      	blt.n	8002380 <get_magnitude+0x34>
    	}
    }
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000320 	.word	0x20000320
 80023a8:	20000630 	.word	0x20000630

080023ac <get_max_index>:

uint32_t get_max_index(float32_t testOutput[]) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

    // get max value and corresponding index
    arm_max_f32(testOutput, FFT_SIZE, &max_value, &max_index);
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <get_max_index+0x20>)
 80023b6:	4a06      	ldr	r2, [pc, #24]	; (80023d0 <get_max_index+0x24>)
 80023b8:	2140      	movs	r1, #64	; 0x40
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f006 fbae 	bl	8008b1c <arm_max_f32>

    return max_index;
 80023c0:	4b02      	ldr	r3, [pc, #8]	; (80023cc <get_max_index+0x20>)
 80023c2:	681b      	ldr	r3, [r3, #0]

}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20000854 	.word	0x20000854
 80023d0:	20000850 	.word	0x20000850

080023d4 <get_doppler_frequency>:

float32_t get_doppler_frequency(uint32_t max_index) {
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

    // calculate Doppler frequency by multiplying max_index by frequency resolution
    dopplerFrequency = (float32_t)max_index * ADC_FS / FFT_SIZE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023e6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800243c <get_doppler_frequency+0x68>
 80023ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ee:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002440 <get_doppler_frequency+0x6c>
 80023f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023f6:	4b13      	ldr	r3, [pc, #76]	; (8002444 <get_doppler_frequency+0x70>)
 80023f8:	edc3 7a00 	vstr	s15, [r3]

    // check if dopplerFrequency is in the second Nyquist zone -> > fs/2
    if (dopplerFrequency > (ADC_FS / 2)) {
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <get_doppler_frequency+0x70>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002448 <get_doppler_frequency+0x74>
 8002406:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	dd09      	ble.n	8002424 <get_doppler_frequency+0x50>
    	dopplerFrequency = dopplerFrequency - ADC_FS;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <get_doppler_frequency+0x70>)
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800243c <get_doppler_frequency+0x68>
 800241a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <get_doppler_frequency+0x70>)
 8002420:	edc3 7a00 	vstr	s15, [r3]
    }

    return dopplerFrequency;
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <get_doppler_frequency+0x70>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	ee07 3a90 	vmov	s15, r3

}
 800242c:	eeb0 0a67 	vmov.f32	s0, s15
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	46ea6000 	.word	0x46ea6000
 8002440:	42800000 	.word	0x42800000
 8002444:	2000083c 	.word	0x2000083c
 8002448:	466a6000 	.word	0x466a6000
 800244c:	00000000 	.word	0x00000000

08002450 <calculate_speed>:

float32_t calculate_speed(float32_t dopplerFrequency) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	ed87 0a01 	vstr	s0, [r7, #4]

    // Calculate velocity in m/s
    float32_t lambda = SPEED_OF_LIGHT / TRANSMIT_FREQUENCY;
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <calculate_speed+0x80>)
 800245c:	60fb      	str	r3, [r7, #12]
    velocity = (dopplerFrequency*lambda) / 2.0f;
 800245e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002462:	edd7 7a03 	vldr	s15, [r7, #12]
 8002466:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800246e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <calculate_speed+0x84>)
 8002474:	edc3 7a00 	vstr	s15, [r3]

    // convert to m/s to km/h and round to accuracy +/- 0.3
    velocity = velocity*3.6;
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <calculate_speed+0x84>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f8dd 	bl	800063c <__aeabi_f2d>
 8002482:	a311      	add	r3, pc, #68	; (adr r3, 80024c8 <calculate_speed+0x78>)
 8002484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002488:	f7fe f930 	bl	80006ec <__aeabi_dmul>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f7fe fc02 	bl	8000c9c <__aeabi_d2f>
 8002498:	4603      	mov	r3, r0
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <calculate_speed+0x84>)
 800249c:	6013      	str	r3, [r2, #0]
    velocity = roundToAccuracy(velocity);
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <calculate_speed+0x84>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	eeb0 0a67 	vmov.f32	s0, s15
 80024a8:	f7ff f924 	bl	80016f4 <roundToAccuracy>
 80024ac:	eef0 7a40 	vmov.f32	s15, s0
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <calculate_speed+0x84>)
 80024b2:	edc3 7a00 	vstr	s15, [r3]

    return velocity;
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <calculate_speed+0x84>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	ee07 3a90 	vmov	s15, r3

}
 80024be:	eeb0 0a67 	vmov.f32	s0, s15
 80024c2:	3710      	adds	r7, #16
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	cccccccd 	.word	0xcccccccd
 80024cc:	400ccccc 	.word	0x400ccccc
 80024d0:	3c4ca888 	.word	0x3c4ca888
 80024d4:	2000031c 	.word	0x2000031c

080024d8 <meanOfArray>:

int meanOfArray(float32_t testOutput[], int size) {
 80024d8:	b480      	push	{r7}
 80024da:	b087      	sub	sp, #28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]

	int sum = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
	int average = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]

	for(int i = 1; i < size ; i++) {
 80024ea:	2301      	movs	r3, #1
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	e014      	b.n	800251a <meanOfArray+0x42>
		sum += testOutput[i];
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	ee07 3a90 	vmov	s15, r3
 80024f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	edd3 7a00 	vldr	s15, [r3]
 8002506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800250e:	ee17 3a90 	vmov	r3, s15
 8002512:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < size ; i++) {
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	3301      	adds	r3, #1
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	429a      	cmp	r2, r3
 8002520:	dbe6      	blt.n	80024f0 <meanOfArray+0x18>
	}

	average = sum / size;
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	fb92 f3f3 	sdiv	r3, r2, r3
 800252a:	60fb      	str	r3, [r7, #12]

	return average;
 800252c:	68fb      	ldr	r3, [r7, #12]
}
 800252e:	4618      	mov	r0, r3
 8002530:	371c      	adds	r7, #28
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 800254c:	e7fe      	b.n	800254c <HardFault_Handler+0x4>

0800254e <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8002552:	e7fe      	b.n	8002552 <MemManage_Handler+0x4>

08002554 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002558:	e7fe      	b.n	8002558 <BusFault_Handler+0x4>

0800255a <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 800255e:	e7fe      	b.n	800255e <UsageFault_Handler+0x4>

08002560 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
}
 8002564:	bf00      	nop
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800258e:	f002 f9a5 	bl	80048dc <HAL_IncTick>
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800259c:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <SystemInit+0x60>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a2:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <SystemInit+0x60>)
 80025a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80025ac:	4b13      	ldr	r3, [pc, #76]	; (80025fc <SystemInit+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a12      	ldr	r2, [pc, #72]	; (80025fc <SystemInit+0x64>)
 80025b2:	f043 0301 	orr.w	r3, r3, #1
 80025b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80025b8:	4b10      	ldr	r3, [pc, #64]	; (80025fc <SystemInit+0x64>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <SystemInit+0x64>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <SystemInit+0x64>)
 80025c4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80025c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <SystemInit+0x64>)
 80025d0:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <SystemInit+0x68>)
 80025d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80025d4:	4b09      	ldr	r3, [pc, #36]	; (80025fc <SystemInit+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a08      	ldr	r2, [pc, #32]	; (80025fc <SystemInit+0x64>)
 80025da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <SystemInit+0x64>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025e6:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <SystemInit+0x60>)
 80025e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ec:	609a      	str	r2, [r3, #8]
#endif
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	e000ed00 	.word	0xe000ed00
 80025fc:	40023800 	.word	0x40023800
 8002600:	24003010 	.word	0x24003010

08002604 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002604:	f8df d034 	ldr.w	sp, [pc, #52]	; 800263c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002608:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800260a:	e003      	b.n	8002614 <LoopCopyDataInit>

0800260c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800260e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002610:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002612:	3104      	adds	r1, #4

08002614 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002614:	480b      	ldr	r0, [pc, #44]	; (8002644 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002618:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800261a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800261c:	d3f6      	bcc.n	800260c <CopyDataInit>
  ldr  r2, =_sbss
 800261e:	4a0b      	ldr	r2, [pc, #44]	; (800264c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002620:	e002      	b.n	8002628 <LoopFillZerobss>

08002622 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002622:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002624:	f842 3b04 	str.w	r3, [r2], #4

08002628 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800262a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800262c:	d3f9      	bcc.n	8002622 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800262e:	f7ff ffb3 	bl	8002598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002632:	f007 fa6d 	bl	8009b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002636:	f7fe fe25 	bl	8001284 <main>
  bx  lr    
 800263a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800263c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002640:	080264dc 	.word	0x080264dc
  ldr  r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002648:	20000300 	.word	0x20000300
  ldr  r2, =_sbss
 800264c:	20000300 	.word	0x20000300
  ldr  r3, = _ebss
 8002650:	20000b5c 	.word	0x20000b5c

08002654 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002654:	e7fe      	b.n	8002654 <CAN1_RX0_IRQHandler>

08002656 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800265a:	f000 feed 	bl	8003438 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800265e:	20ca      	movs	r0, #202	; 0xca
 8002660:	f000 f95d 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002664:	20c3      	movs	r0, #195	; 0xc3
 8002666:	f000 f967 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800266a:	2008      	movs	r0, #8
 800266c:	f000 f964 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002670:	2050      	movs	r0, #80	; 0x50
 8002672:	f000 f961 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002676:	20cf      	movs	r0, #207	; 0xcf
 8002678:	f000 f951 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800267c:	2000      	movs	r0, #0
 800267e:	f000 f95b 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8002682:	20c1      	movs	r0, #193	; 0xc1
 8002684:	f000 f958 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002688:	2030      	movs	r0, #48	; 0x30
 800268a:	f000 f955 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800268e:	20ed      	movs	r0, #237	; 0xed
 8002690:	f000 f945 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002694:	2064      	movs	r0, #100	; 0x64
 8002696:	f000 f94f 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800269a:	2003      	movs	r0, #3
 800269c:	f000 f94c 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80026a0:	2012      	movs	r0, #18
 80026a2:	f000 f949 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80026a6:	2081      	movs	r0, #129	; 0x81
 80026a8:	f000 f946 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80026ac:	20e8      	movs	r0, #232	; 0xe8
 80026ae:	f000 f936 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80026b2:	2085      	movs	r0, #133	; 0x85
 80026b4:	f000 f940 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f000 f93d 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80026be:	2078      	movs	r0, #120	; 0x78
 80026c0:	f000 f93a 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80026c4:	20cb      	movs	r0, #203	; 0xcb
 80026c6:	f000 f92a 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80026ca:	2039      	movs	r0, #57	; 0x39
 80026cc:	f000 f934 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80026d0:	202c      	movs	r0, #44	; 0x2c
 80026d2:	f000 f931 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f000 f92e 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80026dc:	2034      	movs	r0, #52	; 0x34
 80026de:	f000 f92b 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80026e2:	2002      	movs	r0, #2
 80026e4:	f000 f928 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80026e8:	20f7      	movs	r0, #247	; 0xf7
 80026ea:	f000 f918 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80026ee:	2020      	movs	r0, #32
 80026f0:	f000 f922 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80026f4:	20ea      	movs	r0, #234	; 0xea
 80026f6:	f000 f912 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f000 f91c 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002700:	2000      	movs	r0, #0
 8002702:	f000 f919 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002706:	20b1      	movs	r0, #177	; 0xb1
 8002708:	f000 f909 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800270c:	2000      	movs	r0, #0
 800270e:	f000 f913 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002712:	201b      	movs	r0, #27
 8002714:	f000 f910 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002718:	20b6      	movs	r0, #182	; 0xb6
 800271a:	f000 f900 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800271e:	200a      	movs	r0, #10
 8002720:	f000 f90a 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002724:	20a2      	movs	r0, #162	; 0xa2
 8002726:	f000 f907 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800272a:	20c0      	movs	r0, #192	; 0xc0
 800272c:	f000 f8f7 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002730:	2010      	movs	r0, #16
 8002732:	f000 f901 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002736:	20c1      	movs	r0, #193	; 0xc1
 8002738:	f000 f8f1 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800273c:	2010      	movs	r0, #16
 800273e:	f000 f8fb 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002742:	20c5      	movs	r0, #197	; 0xc5
 8002744:	f000 f8eb 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002748:	2045      	movs	r0, #69	; 0x45
 800274a:	f000 f8f5 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800274e:	2015      	movs	r0, #21
 8002750:	f000 f8f2 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002754:	20c7      	movs	r0, #199	; 0xc7
 8002756:	f000 f8e2 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800275a:	2090      	movs	r0, #144	; 0x90
 800275c:	f000 f8ec 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002760:	2036      	movs	r0, #54	; 0x36
 8002762:	f000 f8dc 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002766:	20c8      	movs	r0, #200	; 0xc8
 8002768:	f000 f8e6 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800276c:	20f2      	movs	r0, #242	; 0xf2
 800276e:	f000 f8d6 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002772:	2000      	movs	r0, #0
 8002774:	f000 f8e0 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002778:	20b0      	movs	r0, #176	; 0xb0
 800277a:	f000 f8d0 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800277e:	20c2      	movs	r0, #194	; 0xc2
 8002780:	f000 f8da 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002784:	20b6      	movs	r0, #182	; 0xb6
 8002786:	f000 f8ca 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800278a:	200a      	movs	r0, #10
 800278c:	f000 f8d4 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002790:	20a7      	movs	r0, #167	; 0xa7
 8002792:	f000 f8d1 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002796:	2027      	movs	r0, #39	; 0x27
 8002798:	f000 f8ce 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800279c:	2004      	movs	r0, #4
 800279e:	f000 f8cb 	bl	8002938 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80027a2:	202a      	movs	r0, #42	; 0x2a
 80027a4:	f000 f8bb 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f000 f8c5 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 f8c2 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f000 f8bf 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80027ba:	20ef      	movs	r0, #239	; 0xef
 80027bc:	f000 f8bc 	bl	8002938 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80027c0:	202b      	movs	r0, #43	; 0x2b
 80027c2:	f000 f8ac 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027c6:	2000      	movs	r0, #0
 80027c8:	f000 f8b6 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f000 f8b3 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f000 f8b0 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80027d8:	203f      	movs	r0, #63	; 0x3f
 80027da:	f000 f8ad 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80027de:	20f6      	movs	r0, #246	; 0xf6
 80027e0:	f000 f89d 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80027e4:	2001      	movs	r0, #1
 80027e6:	f000 f8a7 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027ea:	2000      	movs	r0, #0
 80027ec:	f000 f8a4 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80027f0:	2006      	movs	r0, #6
 80027f2:	f000 f8a1 	bl	8002938 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80027f6:	202c      	movs	r0, #44	; 0x2c
 80027f8:	f000 f891 	bl	800291e <ili9341_WriteReg>
  LCD_Delay(200);
 80027fc:	20c8      	movs	r0, #200	; 0xc8
 80027fe:	f000 ff09 	bl	8003614 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002802:	2026      	movs	r0, #38	; 0x26
 8002804:	f000 f88b 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002808:	2001      	movs	r0, #1
 800280a:	f000 f895 	bl	8002938 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800280e:	20e0      	movs	r0, #224	; 0xe0
 8002810:	f000 f885 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002814:	200f      	movs	r0, #15
 8002816:	f000 f88f 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800281a:	2029      	movs	r0, #41	; 0x29
 800281c:	f000 f88c 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002820:	2024      	movs	r0, #36	; 0x24
 8002822:	f000 f889 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002826:	200c      	movs	r0, #12
 8002828:	f000 f886 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800282c:	200e      	movs	r0, #14
 800282e:	f000 f883 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002832:	2009      	movs	r0, #9
 8002834:	f000 f880 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002838:	204e      	movs	r0, #78	; 0x4e
 800283a:	f000 f87d 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800283e:	2078      	movs	r0, #120	; 0x78
 8002840:	f000 f87a 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002844:	203c      	movs	r0, #60	; 0x3c
 8002846:	f000 f877 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800284a:	2009      	movs	r0, #9
 800284c:	f000 f874 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002850:	2013      	movs	r0, #19
 8002852:	f000 f871 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002856:	2005      	movs	r0, #5
 8002858:	f000 f86e 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800285c:	2017      	movs	r0, #23
 800285e:	f000 f86b 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002862:	2011      	movs	r0, #17
 8002864:	f000 f868 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002868:	2000      	movs	r0, #0
 800286a:	f000 f865 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800286e:	20e1      	movs	r0, #225	; 0xe1
 8002870:	f000 f855 	bl	800291e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f000 f85f 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800287a:	2016      	movs	r0, #22
 800287c:	f000 f85c 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002880:	201b      	movs	r0, #27
 8002882:	f000 f859 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002886:	2004      	movs	r0, #4
 8002888:	f000 f856 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800288c:	2011      	movs	r0, #17
 800288e:	f000 f853 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002892:	2007      	movs	r0, #7
 8002894:	f000 f850 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002898:	2031      	movs	r0, #49	; 0x31
 800289a:	f000 f84d 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800289e:	2033      	movs	r0, #51	; 0x33
 80028a0:	f000 f84a 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80028a4:	2042      	movs	r0, #66	; 0x42
 80028a6:	f000 f847 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80028aa:	2005      	movs	r0, #5
 80028ac:	f000 f844 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80028b0:	200c      	movs	r0, #12
 80028b2:	f000 f841 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80028b6:	200a      	movs	r0, #10
 80028b8:	f000 f83e 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80028bc:	2028      	movs	r0, #40	; 0x28
 80028be:	f000 f83b 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80028c2:	202f      	movs	r0, #47	; 0x2f
 80028c4:	f000 f838 	bl	8002938 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80028c8:	200f      	movs	r0, #15
 80028ca:	f000 f835 	bl	8002938 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80028ce:	2011      	movs	r0, #17
 80028d0:	f000 f825 	bl	800291e <ili9341_WriteReg>
  LCD_Delay(200);
 80028d4:	20c8      	movs	r0, #200	; 0xc8
 80028d6:	f000 fe9d 	bl	8003614 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80028da:	2029      	movs	r0, #41	; 0x29
 80028dc:	f000 f81f 	bl	800291e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80028e0:	202c      	movs	r0, #44	; 0x2c
 80028e2:	f000 f81c 	bl	800291e <ili9341_WriteReg>
}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}

080028ea <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80028ee:	f000 fda3 	bl	8003438 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80028f2:	2103      	movs	r1, #3
 80028f4:	20d3      	movs	r0, #211	; 0xd3
 80028f6:	f000 f82c 	bl	8002952 <ili9341_ReadData>
 80028fa:	4603      	mov	r3, r0
 80028fc:	b29b      	uxth	r3, r3
}
 80028fe:	4618      	mov	r0, r3
 8002900:	bd80      	pop	{r7, pc}

08002902 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002906:	2029      	movs	r0, #41	; 0x29
 8002908:	f000 f809 	bl	800291e <ili9341_WriteReg>
}
 800290c:	bf00      	nop
 800290e:	bd80      	pop	{r7, pc}

08002910 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002914:	2028      	movs	r0, #40	; 0x28
 8002916:	f000 f802 	bl	800291e <ili9341_WriteReg>
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}

0800291e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fe1e 	bl	800356c <LCD_IO_WriteReg>
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002942:	88fb      	ldrh	r3, [r7, #6]
 8002944:	4618      	mov	r0, r3
 8002946:	f000 fdef 	bl	8003528 <LCD_IO_WriteData>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	460a      	mov	r2, r1
 800295c:	80fb      	strh	r3, [r7, #6]
 800295e:	4613      	mov	r3, r2
 8002960:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002962:	797a      	ldrb	r2, [r7, #5]
 8002964:	88fb      	ldrh	r3, [r7, #6]
 8002966:	4611      	mov	r1, r2
 8002968:	4618      	mov	r0, r3
 800296a:	f000 fe21 	bl	80035b0 <LCD_IO_ReadData>
 800296e:	4603      	mov	r3, r0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 800297c:	23f0      	movs	r3, #240	; 0xf0
}
 800297e:	4618      	mov	r0, r3
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 800298c:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 fa59 	bl	8002e60 <stmpe811_GetInstance>
 80029ae:	4603      	mov	r3, r0
 80029b0:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	2bff      	cmp	r3, #255	; 0xff
 80029b6:	d112      	bne.n	80029de <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f000 fa51 	bl	8002e60 <stmpe811_GetInstance>
 80029be:	4603      	mov	r3, r0
 80029c0:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 80029c2:	7bbb      	ldrb	r3, [r7, #14]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d80a      	bhi.n	80029de <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 80029c8:	7bbb      	ldrb	r3, [r7, #14]
 80029ca:	88fa      	ldrh	r2, [r7, #6]
 80029cc:	b2d1      	uxtb	r1, r2
 80029ce:	4a06      	ldr	r2, [pc, #24]	; (80029e8 <stmpe811_Init+0x4c>)
 80029d0:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 80029d2:	f000 fe2a 	bl	800362a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	4618      	mov	r0, r3
 80029da:	f000 f807 	bl	80029ec <stmpe811_Reset>
    }
  }
}
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000858 	.word	0x20000858

080029ec <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2202      	movs	r2, #2
 80029fc:	2103      	movs	r1, #3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fe1f 	bl	8003642 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002a04:	200a      	movs	r0, #10
 8002a06:	f000 fe59 	bl	80036bc <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2103      	movs	r1, #3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fe15 	bl	8003642 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002a18:	2002      	movs	r0, #2
 8002a1a:	f000 fe4f 	bl	80036bc <IOE_Delay>
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002a26:	b590      	push	{r4, r7, lr}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002a30:	f000 fdfb 	bl	800362a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fe14 	bl	8003668 <IOE_Read>
 8002a40:	4603      	mov	r3, r0
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fe0b 	bl	8003668 <IOE_Read>
 8002a52:	4603      	mov	r3, r0
 8002a54:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002a56:	4323      	orrs	r3, r4
 8002a58:	b21b      	sxth	r3, r3
 8002a5a:	b29b      	uxth	r3, r3
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd90      	pop	{r4, r7, pc}

08002a64 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2109      	movs	r1, #9
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fdf5 	bl	8003668 <IOE_Read>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002a8a:	88fb      	ldrh	r3, [r7, #6]
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	2109      	movs	r1, #9
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fdd5 	bl	8003642 <IOE_Write>
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2109      	movs	r1, #9
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fdd7 	bl	8003668 <IOE_Read>
 8002aba:	4603      	mov	r3, r0
 8002abc:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	f023 0301 	bic.w	r3, r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	7bfa      	ldrb	r2, [r7, #15]
 8002acc:	2109      	movs	r1, #9
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fdb7 	bl	8003642 <IOE_Write>
    
}
 8002ad4:	bf00      	nop
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	460a      	mov	r2, r1
 8002ae6:	80fb      	strh	r3, [r7, #6]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002aec:	2300      	movs	r3, #0
 8002aee:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	210a      	movs	r1, #10
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fdb6 	bl	8003668 <IOE_Read>
 8002afc:	4603      	mov	r3, r0
 8002afe:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	797b      	ldrb	r3, [r7, #5]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002b08:	88fb      	ldrh	r3, [r7, #6]
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	210a      	movs	r1, #10
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 fd96 	bl	8003642 <IOE_Write>
}
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b084      	sub	sp, #16
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	460a      	mov	r2, r1
 8002b28:	80fb      	strh	r3, [r7, #6]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	210a      	movs	r1, #10
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fd95 	bl	8003668 <IOE_Read>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002b42:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002b46:	43db      	mvns	r3, r3
 8002b48:	b25a      	sxtb	r2, r3
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002b54:	88fb      	ldrh	r3, [r7, #6]
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	7bfa      	ldrb	r2, [r7, #15]
 8002b5a:	210a      	movs	r1, #10
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fd70 	bl	8003642 <IOE_Write>
}
 8002b62:	bf00      	nop
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b082      	sub	sp, #8
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	460a      	mov	r2, r1
 8002b74:	80fb      	strh	r3, [r7, #6]
 8002b76:	4613      	mov	r3, r2
 8002b78:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	210b      	movs	r1, #11
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fd71 	bl	8003668 <IOE_Read>
 8002b86:	4603      	mov	r3, r0
 8002b88:	461a      	mov	r2, r3
 8002b8a:	797b      	ldrb	r3, [r7, #5]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b2db      	uxtb	r3, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	460a      	mov	r2, r1
 8002ba2:	80fb      	strh	r3, [r7, #6]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	797a      	ldrb	r2, [r7, #5]
 8002bae:	210b      	movs	r1, #11
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 fd46 	bl	8003642 <IOE_Write>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	6039      	str	r1, [r7, #0]
 8002bc8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2117      	movs	r1, #23
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fd47 	bl	8003668 <IOE_Read>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	b25a      	sxtb	r2, r3
 8002be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bea:	4013      	ands	r3, r2
 8002bec:	b25b      	sxtb	r3, r3
 8002bee:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	2117      	movs	r1, #23
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fd22 	bl	8003642 <IOE_Write>
}
 8002bfe:	bf00      	nop
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b084      	sub	sp, #16
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2104      	movs	r1, #4
 8002c16:	4618      	mov	r0, r3
 8002c18:	f000 fd26 	bl	8003668 <IOE_Read>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	f023 0304 	bic.w	r3, r3, #4
 8002c26:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002c28:	88fb      	ldrh	r3, [r7, #6]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	2104      	movs	r1, #4
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fd06 	bl	8003642 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	21f0      	movs	r1, #240	; 0xf0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff ffbf 	bl	8002bbe <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	2104      	movs	r1, #4
 8002c50:	4618      	mov	r0, r3
 8002c52:	f000 fcf6 	bl	8003642 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002c56:	88fb      	ldrh	r3, [r7, #6]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2249      	movs	r2, #73	; 0x49
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fcef 	bl	8003642 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002c64:	2002      	movs	r0, #2
 8002c66:	f000 fd29 	bl	80036bc <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2201      	movs	r2, #1
 8002c70:	2121      	movs	r1, #33	; 0x21
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fce5 	bl	8003642 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	229a      	movs	r2, #154	; 0x9a
 8002c7e:	2141      	movs	r1, #65	; 0x41
 8002c80:	4618      	mov	r0, r3
 8002c82:	f000 fcde 	bl	8003642 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	214a      	movs	r1, #74	; 0x4a
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fcd7 	bl	8003642 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2201      	movs	r2, #1
 8002c9a:	214b      	movs	r1, #75	; 0x4b
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fcd0 	bl	8003642 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	214b      	movs	r1, #75	; 0x4b
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 fcc9 	bl	8003642 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	2156      	movs	r1, #86	; 0x56
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fcc2 	bl	8003642 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2158      	movs	r1, #88	; 0x58
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fcbb 	bl	8003642 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	2140      	movs	r1, #64	; 0x40
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 fcb4 	bl	8003642 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	22ff      	movs	r2, #255	; 0xff
 8002ce0:	210b      	movs	r1, #11
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f000 fcad 	bl	8003642 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f000 fce7 	bl	80036bc <IOE_Delay>
}
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	2140      	movs	r1, #64	; 0x40
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 fcac 	bl	8003668 <IOE_Read>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d16:	2b80      	cmp	r3, #128	; 0x80
 8002d18:	bf0c      	ite	eq
 8002d1a:	2301      	moveq	r3, #1
 8002d1c:	2300      	movne	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002d22:	7bbb      	ldrb	r3, [r7, #14]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	214c      	movs	r1, #76	; 0x4c
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 fc9a 	bl	8003668 <IOE_Read>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
 8002d3e:	e00d      	b.n	8002d5c <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002d40:	88fb      	ldrh	r3, [r7, #6]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2201      	movs	r2, #1
 8002d46:	214b      	movs	r1, #75	; 0x4b
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 fc7a 	bl	8003642 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2200      	movs	r2, #0
 8002d54:	214b      	movs	r1, #75	; 0x4b
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fc73 	bl	8003642 <IOE_Write>
  }
  
  return ret;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	607a      	str	r2, [r7, #4]
 8002d72:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002d74:	89fb      	ldrh	r3, [r7, #14]
 8002d76:	b2d8      	uxtb	r0, r3
 8002d78:	f107 0210 	add.w	r2, r7, #16
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	21d7      	movs	r1, #215	; 0xd7
 8002d80:	f000 fc85 	bl	800368e <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002d84:	7c3b      	ldrb	r3, [r7, #16]
 8002d86:	061a      	lsls	r2, r3, #24
 8002d88:	7c7b      	ldrb	r3, [r7, #17]
 8002d8a:	041b      	lsls	r3, r3, #16
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	7cbb      	ldrb	r3, [r7, #18]
 8002d90:	021b      	lsls	r3, r3, #8
 8002d92:	4313      	orrs	r3, r2
 8002d94:	7cfa      	ldrb	r2, [r7, #19]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	0d1b      	lsrs	r3, r3, #20
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	0a1b      	lsrs	r3, r3, #8
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2201      	movs	r2, #1
 8002dba:	214b      	movs	r1, #75	; 0x4b
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f000 fc40 	bl	8003642 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002dc2:	89fb      	ldrh	r3, [r7, #14]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	214b      	movs	r1, #75	; 0x4b
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fc39 	bl	8003642 <IOE_Write>
}
 8002dd0:	bf00      	nop
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002de2:	f000 fc28 	bl	8003636 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	211f      	movs	r1, #31
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fe76 	bl	8002adc <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff fe36 	bl	8002a64 <stmpe811_EnableGlobalIT>
}
 8002df8:	bf00      	nop
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff fe47 	bl	8002aa0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	211f      	movs	r1, #31
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff fe81 	bl	8002b1e <stmpe811_DisableITSource>
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	211f      	movs	r1, #31
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fe99 	bl	8002b6a <stmpe811_ReadGITStatus>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	4603      	mov	r3, r0
 8002e4a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	211f      	movs	r1, #31
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff fea1 	bl	8002b98 <stmpe811_ClearGlobalIT>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
 8002e72:	e00b      	b.n	8002e8c <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <stmpe811_GetInstance+0x40>)
 8002e78:	5cd3      	ldrb	r3, [r2, r3]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	88fa      	ldrh	r2, [r7, #6]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d101      	bne.n	8002e86 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	e006      	b.n	8002e94 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d9f0      	bls.n	8002e74 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002e92:	23ff      	movs	r3, #255	; 0xff
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	20000858 	.word	0x20000858

08002ea4 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10e      	bne.n	8002ed2 <BSP_LED_Init+0x2e>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	4b21      	ldr	r3, [pc, #132]	; (8002f40 <BSP_LED_Init+0x9c>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	4a20      	ldr	r2, [pc, #128]	; (8002f40 <BSP_LED_Init+0x9c>)
 8002ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec4:	4b1e      	ldr	r3, [pc, #120]	; (8002f40 <BSP_LED_Init+0x9c>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	e010      	b.n	8002ef4 <BSP_LED_Init+0x50>
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d10d      	bne.n	8002ef4 <BSP_LED_Init+0x50>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	4b18      	ldr	r3, [pc, #96]	; (8002f40 <BSP_LED_Init+0x9c>)
 8002ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee0:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <BSP_LED_Init+0x9c>)
 8002ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <BSP_LED_Init+0x9c>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	4a13      	ldr	r2, [pc, #76]	; (8002f44 <BSP_LED_Init+0xa0>)
 8002ef8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efe:	2301      	movs	r3, #1
 8002f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f02:	2301      	movs	r3, #1
 8002f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002f06:	2302      	movs	r3, #2
 8002f08:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002f0a:	79fb      	ldrb	r3, [r7, #7]
 8002f0c:	4a0e      	ldr	r2, [pc, #56]	; (8002f48 <BSP_LED_Init+0xa4>)
 8002f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f12:	f107 0214 	add.w	r2, r7, #20
 8002f16:	4611      	mov	r1, r2
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f002 fa89 	bl	8005430 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <BSP_LED_Init+0xa4>)
 8002f22:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <BSP_LED_Init+0xa0>)
 8002f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	4619      	mov	r1, r3
 8002f32:	f002 fc29 	bl	8005788 <HAL_GPIO_WritePin>
}
 8002f36:	bf00      	nop
 8002f38:	3728      	adds	r7, #40	; 0x28
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	0800df28 	.word	0x0800df28
 8002f48:	20000098 	.word	0x20000098

08002f4c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <BSP_LED_On+0x2c>)
 8002f5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	4a06      	ldr	r2, [pc, #24]	; (8002f7c <BSP_LED_On+0x30>)
 8002f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f66:	2201      	movs	r2, #1
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f002 fc0d 	bl	8005788 <HAL_GPIO_WritePin>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000098 	.word	0x20000098
 8002f7c:	0800df28 	.word	0x0800df28

08002f80 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	4a07      	ldr	r2, [pc, #28]	; (8002fac <BSP_LED_Off+0x2c>)
 8002f8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	4a06      	ldr	r2, [pc, #24]	; (8002fb0 <BSP_LED_Off+0x30>)
 8002f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f002 fbf3 	bl	8005788 <HAL_GPIO_WritePin>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000098 	.word	0x20000098
 8002fb0:	0800df28 	.word	0x0800df28

08002fb4 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	4603      	mov	r3, r0
 8002fbc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <BSP_LED_Toggle+0x2c>)
 8002fc2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	4906      	ldr	r1, [pc, #24]	; (8002fe4 <BSP_LED_Toggle+0x30>)
 8002fca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	f002 fbf2 	bl	80057ba <HAL_GPIO_TogglePin>
}
 8002fd6:	bf00      	nop
 8002fd8:	3708      	adds	r7, #8
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000098 	.word	0x20000098
 8002fe4:	0800df28 	.word	0x0800df28

08002fe8 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a33      	ldr	r2, [pc, #204]	; (80030c4 <I2Cx_MspInit+0xdc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d15f      	bne.n	80030ba <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <I2Cx_MspInit+0xe0>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a31      	ldr	r2, [pc, #196]	; (80030c8 <I2Cx_MspInit+0xe0>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b2f      	ldr	r3, [pc, #188]	; (80030c8 <I2Cx_MspInit+0xe0>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <I2Cx_MspInit+0xe0>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <I2Cx_MspInit+0xe0>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <I2Cx_MspInit+0xe0>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003038:	2312      	movs	r3, #18
 800303a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003040:	2302      	movs	r3, #2
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003044:	2304      	movs	r3, #4
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4619      	mov	r1, r3
 800304e:	481f      	ldr	r0, [pc, #124]	; (80030cc <I2Cx_MspInit+0xe4>)
 8003050:	f002 f9ee 	bl	8005430 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003058:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	4619      	mov	r1, r3
 8003060:	481b      	ldr	r0, [pc, #108]	; (80030d0 <I2Cx_MspInit+0xe8>)
 8003062:	f002 f9e5 	bl	8005430 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	60bb      	str	r3, [r7, #8]
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <I2Cx_MspInit+0xe0>)
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <I2Cx_MspInit+0xe0>)
 8003070:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003074:	6413      	str	r3, [r2, #64]	; 0x40
 8003076:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <I2Cx_MspInit+0xe0>)
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <I2Cx_MspInit+0xe0>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4a10      	ldr	r2, [pc, #64]	; (80030c8 <I2Cx_MspInit+0xe0>)
 8003088:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800308c:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800308e:	4b0e      	ldr	r3, [pc, #56]	; (80030c8 <I2Cx_MspInit+0xe0>)
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	4a0d      	ldr	r2, [pc, #52]	; (80030c8 <I2Cx_MspInit+0xe0>)
 8003094:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003098:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	210f      	movs	r1, #15
 800309e:	2048      	movs	r0, #72	; 0x48
 80030a0:	f001 fd3b 	bl	8004b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80030a4:	2048      	movs	r0, #72	; 0x48
 80030a6:	f001 fd54 	bl	8004b52 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80030aa:	2200      	movs	r2, #0
 80030ac:	210f      	movs	r1, #15
 80030ae:	2049      	movs	r0, #73	; 0x49
 80030b0:	f001 fd33 	bl	8004b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80030b4:	2049      	movs	r0, #73	; 0x49
 80030b6:	f001 fd4c 	bl	8004b52 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 80030ba:	bf00      	nop
 80030bc:	3728      	adds	r7, #40	; 0x28
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40005c00 	.word	0x40005c00
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40020000 	.word	0x40020000
 80030d0:	40020800 	.word	0x40020800

080030d4 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80030d8:	4814      	ldr	r0, [pc, #80]	; (800312c <I2Cx_Init+0x58>)
 80030da:	f003 f831 	bl	8006140 <HAL_I2C_GetState>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d121      	bne.n	8003128 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <I2Cx_Init+0x58>)
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <I2Cx_Init+0x5c>)
 80030e8:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <I2Cx_Init+0x58>)
 80030ec:	4a11      	ldr	r2, [pc, #68]	; (8003134 <I2Cx_Init+0x60>)
 80030ee:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80030f0:	4b0e      	ldr	r3, [pc, #56]	; (800312c <I2Cx_Init+0x58>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <I2Cx_Init+0x58>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <I2Cx_Init+0x58>)
 80030fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003102:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <I2Cx_Init+0x58>)
 8003106:	2200      	movs	r2, #0
 8003108:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800310a:	4b08      	ldr	r3, [pc, #32]	; (800312c <I2Cx_Init+0x58>)
 800310c:	2200      	movs	r2, #0
 800310e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003110:	4b06      	ldr	r3, [pc, #24]	; (800312c <I2Cx_Init+0x58>)
 8003112:	2200      	movs	r2, #0
 8003114:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <I2Cx_Init+0x58>)
 8003118:	2200      	movs	r2, #0
 800311a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 800311c:	4803      	ldr	r0, [pc, #12]	; (800312c <I2Cx_Init+0x58>)
 800311e:	f7ff ff63 	bl	8002fe8 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8003122:	4802      	ldr	r0, [pc, #8]	; (800312c <I2Cx_Init+0x58>)
 8003124:	f002 fb64 	bl	80057f0 <HAL_I2C_Init>
  }
}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000085c 	.word	0x2000085c
 8003130:	40005c00 	.word	0x40005c00
 8003134:	000186a0 	.word	0x000186a0

08003138 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4b13      	ldr	r3, [pc, #76]	; (8003190 <I2Cx_ITConfig+0x58>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <I2Cx_ITConfig+0x58>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6313      	str	r3, [r2, #48]	; 0x30
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <I2Cx_ITConfig+0x58>)
 8003150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 800315a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003160:	2301      	movs	r3, #1
 8003162:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003164:	2300      	movs	r3, #0
 8003166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003168:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <I2Cx_ITConfig+0x5c>)
 800316a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 800316c:	1d3b      	adds	r3, r7, #4
 800316e:	4619      	mov	r1, r3
 8003170:	4809      	ldr	r0, [pc, #36]	; (8003198 <I2Cx_ITConfig+0x60>)
 8003172:	f002 f95d 	bl	8005430 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8003176:	2200      	movs	r2, #0
 8003178:	210f      	movs	r1, #15
 800317a:	2028      	movs	r0, #40	; 0x28
 800317c:	f001 fccd 	bl	8004b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003180:	2028      	movs	r0, #40	; 0x28
 8003182:	f001 fce6 	bl	8004b52 <HAL_NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	10210000 	.word	0x10210000
 8003198:	40020000 	.word	0x40020000

0800319c <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af04      	add	r7, sp, #16
 80031a2:	4603      	mov	r3, r0
 80031a4:	71fb      	strb	r3, [r7, #7]
 80031a6:	460b      	mov	r3, r1
 80031a8:	71bb      	strb	r3, [r7, #6]
 80031aa:	4613      	mov	r3, r2
 80031ac:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80031ae:	2300      	movs	r3, #0
 80031b0:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	b299      	uxth	r1, r3
 80031b6:	79bb      	ldrb	r3, [r7, #6]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <I2Cx_WriteData+0x4c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	9302      	str	r3, [sp, #8]
 80031c0:	2301      	movs	r3, #1
 80031c2:	9301      	str	r3, [sp, #4]
 80031c4:	1d7b      	adds	r3, r7, #5
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2301      	movs	r3, #1
 80031ca:	4808      	ldr	r0, [pc, #32]	; (80031ec <I2Cx_WriteData+0x50>)
 80031cc:	f002 fc98 	bl	8005b00 <HAL_I2C_Mem_Write>
 80031d0:	4603      	mov	r3, r0
 80031d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80031da:	f000 f863 	bl	80032a4 <I2Cx_Error>
  }        
}
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200000a0 	.word	0x200000a0
 80031ec:	2000085c 	.word	0x2000085c

080031f0 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af04      	add	r7, sp, #16
 80031f6:	4603      	mov	r3, r0
 80031f8:	460a      	mov	r2, r1
 80031fa:	71fb      	strb	r3, [r7, #7]
 80031fc:	4613      	mov	r3, r2
 80031fe:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	b299      	uxth	r1, r3
 800320c:	79bb      	ldrb	r3, [r7, #6]
 800320e:	b29a      	uxth	r2, r3
 8003210:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <I2Cx_ReadData+0x50>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	9302      	str	r3, [sp, #8]
 8003216:	2301      	movs	r3, #1
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	f107 030e 	add.w	r3, r7, #14
 800321e:	9300      	str	r3, [sp, #0]
 8003220:	2301      	movs	r3, #1
 8003222:	4808      	ldr	r0, [pc, #32]	; (8003244 <I2Cx_ReadData+0x54>)
 8003224:	f002 fd66 	bl	8005cf4 <HAL_I2C_Mem_Read>
 8003228:	4603      	mov	r3, r0
 800322a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 800322c:	7bfb      	ldrb	r3, [r7, #15]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003232:	f000 f837 	bl	80032a4 <I2Cx_Error>
  
  }
  return value;
 8003236:	7bbb      	ldrb	r3, [r7, #14]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	200000a0 	.word	0x200000a0
 8003244:	2000085c 	.word	0x2000085c

08003248 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af04      	add	r7, sp, #16
 800324e:	603a      	str	r2, [r7, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
 8003256:	460b      	mov	r3, r1
 8003258:	71bb      	strb	r3, [r7, #6]
 800325a:	4613      	mov	r3, r2
 800325c:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	b299      	uxth	r1, r3
 8003266:	79bb      	ldrb	r3, [r7, #6]
 8003268:	b29a      	uxth	r2, r3
 800326a:	4b0c      	ldr	r3, [pc, #48]	; (800329c <I2Cx_ReadBuffer+0x54>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	9302      	str	r3, [sp, #8]
 8003270:	88bb      	ldrh	r3, [r7, #4]
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2301      	movs	r3, #1
 800327a:	4809      	ldr	r0, [pc, #36]	; (80032a0 <I2Cx_ReadBuffer+0x58>)
 800327c:	f002 fd3a 	bl	8005cf4 <HAL_I2C_Mem_Read>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800328a:	2300      	movs	r3, #0
 800328c:	e002      	b.n	8003294 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800328e:	f000 f809 	bl	80032a4 <I2Cx_Error>

    return 1;
 8003292:	2301      	movs	r3, #1
  }
}
 8003294:	4618      	mov	r0, r3
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	200000a0 	.word	0x200000a0
 80032a0:	2000085c 	.word	0x2000085c

080032a4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80032a8:	4803      	ldr	r0, [pc, #12]	; (80032b8 <I2Cx_Error+0x14>)
 80032aa:	f002 fbe5 	bl	8005a78 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80032ae:	f7ff ff11 	bl	80030d4 <I2Cx_Init>
}
 80032b2:	bf00      	nop
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	2000085c 	.word	0x2000085c

080032bc <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80032c0:	4819      	ldr	r0, [pc, #100]	; (8003328 <SPIx_Init+0x6c>)
 80032c2:	f005 f9ca 	bl	800865a <HAL_SPI_GetState>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d12b      	bne.n	8003324 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <SPIx_Init+0x6c>)
 80032ce:	4a17      	ldr	r2, [pc, #92]	; (800332c <SPIx_Init+0x70>)
 80032d0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <SPIx_Init+0x6c>)
 80032d4:	2218      	movs	r2, #24
 80032d6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80032d8:	4b13      	ldr	r3, [pc, #76]	; (8003328 <SPIx_Init+0x6c>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80032de:	4b12      	ldr	r3, [pc, #72]	; (8003328 <SPIx_Init+0x6c>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80032e4:	4b10      	ldr	r3, [pc, #64]	; (8003328 <SPIx_Init+0x6c>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80032ea:	4b0f      	ldr	r3, [pc, #60]	; (8003328 <SPIx_Init+0x6c>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80032f0:	4b0d      	ldr	r3, [pc, #52]	; (8003328 <SPIx_Init+0x6c>)
 80032f2:	2207      	movs	r2, #7
 80032f4:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <SPIx_Init+0x6c>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <SPIx_Init+0x6c>)
 80032fe:	2200      	movs	r2, #0
 8003300:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003302:	4b09      	ldr	r3, [pc, #36]	; (8003328 <SPIx_Init+0x6c>)
 8003304:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003308:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <SPIx_Init+0x6c>)
 800330c:	2200      	movs	r2, #0
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <SPIx_Init+0x6c>)
 8003312:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003316:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8003318:	4803      	ldr	r0, [pc, #12]	; (8003328 <SPIx_Init+0x6c>)
 800331a:	f000 f853 	bl	80033c4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800331e:	4802      	ldr	r0, [pc, #8]	; (8003328 <SPIx_Init+0x6c>)
 8003320:	f004 fc11 	bl	8007b46 <HAL_SPI_Init>
  } 
}
 8003324:	bf00      	nop
 8003326:	bd80      	pop	{r7, pc}
 8003328:	200008b0 	.word	0x200008b0
 800332c:	40015000 	.word	0x40015000

08003330 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800333e:	79fb      	ldrb	r3, [r7, #7]
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <SPIx_Read+0x38>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f107 0108 	add.w	r1, r7, #8
 800334a:	4808      	ldr	r0, [pc, #32]	; (800336c <SPIx_Read+0x3c>)
 800334c:	f004 fdf8 	bl	8007f40 <HAL_SPI_Receive>
 8003350:	4603      	mov	r3, r0
 8003352:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800335a:	f000 f827 	bl	80033ac <SPIx_Error>
  }
  
  return readvalue;
 800335e:	68bb      	ldr	r3, [r7, #8]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	200000a4 	.word	0x200000a4
 800336c:	200008b0 	.word	0x200008b0

08003370 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <SPIx_Write+0x34>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	1db9      	adds	r1, r7, #6
 8003384:	2201      	movs	r2, #1
 8003386:	4808      	ldr	r0, [pc, #32]	; (80033a8 <SPIx_Write+0x38>)
 8003388:	f004 fc84 	bl	8007c94 <HAL_SPI_Transmit>
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003396:	f000 f809 	bl	80033ac <SPIx_Error>
  }
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200000a4 	.word	0x200000a4
 80033a8:	200008b0 	.word	0x200008b0

080033ac <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <SPIx_Error+0x14>)
 80033b2:	f004 fc33 	bl	8007c1c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80033b6:	f7ff ff81 	bl	80032bc <SPIx_Init>
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	200008b0 	.word	0x200008b0

080033c4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80033cc:	2300      	movs	r3, #0
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	4b17      	ldr	r3, [pc, #92]	; (8003430 <SPIx_MspInit+0x6c>)
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	4a16      	ldr	r2, [pc, #88]	; (8003430 <SPIx_MspInit+0x6c>)
 80033d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033da:	6453      	str	r3, [r2, #68]	; 0x44
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <SPIx_MspInit+0x6c>)
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e4:	613b      	str	r3, [r7, #16]
 80033e6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80033e8:	2300      	movs	r3, #0
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	4b10      	ldr	r3, [pc, #64]	; (8003430 <SPIx_MspInit+0x6c>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	4a0f      	ldr	r2, [pc, #60]	; (8003430 <SPIx_MspInit+0x6c>)
 80033f2:	f043 0320 	orr.w	r3, r3, #32
 80033f6:	6313      	str	r3, [r2, #48]	; 0x30
 80033f8:	4b0d      	ldr	r3, [pc, #52]	; (8003430 <SPIx_MspInit+0x6c>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	f003 0320 	and.w	r3, r3, #32
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003404:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003408:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800340e:	2302      	movs	r3, #2
 8003410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003412:	2301      	movs	r3, #1
 8003414:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003416:	2305      	movs	r3, #5
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	4804      	ldr	r0, [pc, #16]	; (8003434 <SPIx_MspInit+0x70>)
 8003422:	f002 f805 	bl	8005430 <HAL_GPIO_Init>
}
 8003426:	bf00      	nop
 8003428:	3728      	adds	r7, #40	; 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	40023800 	.word	0x40023800
 8003434:	40021400 	.word	0x40021400

08003438 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800343e:	4b36      	ldr	r3, [pc, #216]	; (8003518 <LCD_IO_Init+0xe0>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d164      	bne.n	8003510 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003446:	4b34      	ldr	r3, [pc, #208]	; (8003518 <LCD_IO_Init+0xe0>)
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800344c:	2300      	movs	r3, #0
 800344e:	60bb      	str	r3, [r7, #8]
 8003450:	4b32      	ldr	r3, [pc, #200]	; (800351c <LCD_IO_Init+0xe4>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	4a31      	ldr	r2, [pc, #196]	; (800351c <LCD_IO_Init+0xe4>)
 8003456:	f043 0308 	orr.w	r3, r3, #8
 800345a:	6313      	str	r3, [r2, #48]	; 0x30
 800345c:	4b2f      	ldr	r3, [pc, #188]	; (800351c <LCD_IO_Init+0xe4>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800346c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800346e:	2301      	movs	r3, #1
 8003470:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003476:	2302      	movs	r3, #2
 8003478:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	4619      	mov	r1, r3
 8003480:	4827      	ldr	r0, [pc, #156]	; (8003520 <LCD_IO_Init+0xe8>)
 8003482:	f001 ffd5 	bl	8005430 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003486:	2300      	movs	r3, #0
 8003488:	607b      	str	r3, [r7, #4]
 800348a:	4b24      	ldr	r3, [pc, #144]	; (800351c <LCD_IO_Init+0xe4>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	4a23      	ldr	r2, [pc, #140]	; (800351c <LCD_IO_Init+0xe4>)
 8003490:	f043 0308 	orr.w	r3, r3, #8
 8003494:	6313      	str	r3, [r2, #48]	; 0x30
 8003496:	4b21      	ldr	r3, [pc, #132]	; (800351c <LCD_IO_Init+0xe4>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	607b      	str	r3, [r7, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80034a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80034a8:	2301      	movs	r3, #1
 80034aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80034b0:	2302      	movs	r3, #2
 80034b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	4619      	mov	r1, r3
 80034ba:	4819      	ldr	r0, [pc, #100]	; (8003520 <LCD_IO_Init+0xe8>)
 80034bc:	f001 ffb8 	bl	8005430 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80034c0:	2300      	movs	r3, #0
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4b15      	ldr	r3, [pc, #84]	; (800351c <LCD_IO_Init+0xe4>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c8:	4a14      	ldr	r2, [pc, #80]	; (800351c <LCD_IO_Init+0xe4>)
 80034ca:	f043 0304 	orr.w	r3, r3, #4
 80034ce:	6313      	str	r3, [r2, #48]	; 0x30
 80034d0:	4b12      	ldr	r3, [pc, #72]	; (800351c <LCD_IO_Init+0xe4>)
 80034d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d4:	f003 0304 	and.w	r3, r3, #4
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80034dc:	2304      	movs	r3, #4
 80034de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80034e0:	2301      	movs	r3, #1
 80034e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80034e8:	2302      	movs	r3, #2
 80034ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80034ec:	f107 030c 	add.w	r3, r7, #12
 80034f0:	4619      	mov	r1, r3
 80034f2:	480c      	ldr	r0, [pc, #48]	; (8003524 <LCD_IO_Init+0xec>)
 80034f4:	f001 ff9c 	bl	8005430 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80034f8:	2200      	movs	r2, #0
 80034fa:	2104      	movs	r1, #4
 80034fc:	4809      	ldr	r0, [pc, #36]	; (8003524 <LCD_IO_Init+0xec>)
 80034fe:	f002 f943 	bl	8005788 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003502:	2201      	movs	r2, #1
 8003504:	2104      	movs	r1, #4
 8003506:	4807      	ldr	r0, [pc, #28]	; (8003524 <LCD_IO_Init+0xec>)
 8003508:	f002 f93e 	bl	8005788 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800350c:	f7ff fed6 	bl	80032bc <SPIx_Init>
  }
}
 8003510:	bf00      	nop
 8003512:	3720      	adds	r7, #32
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000908 	.word	0x20000908
 800351c:	40023800 	.word	0x40023800
 8003520:	40020c00 	.word	0x40020c00
 8003524:	40020800 	.word	0x40020800

08003528 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003532:	2201      	movs	r2, #1
 8003534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003538:	480a      	ldr	r0, [pc, #40]	; (8003564 <LCD_IO_WriteData+0x3c>)
 800353a:	f002 f925 	bl	8005788 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800353e:	2200      	movs	r2, #0
 8003540:	2104      	movs	r1, #4
 8003542:	4809      	ldr	r0, [pc, #36]	; (8003568 <LCD_IO_WriteData+0x40>)
 8003544:	f002 f920 	bl	8005788 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003548:	88fb      	ldrh	r3, [r7, #6]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ff10 	bl	8003370 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003550:	2201      	movs	r2, #1
 8003552:	2104      	movs	r1, #4
 8003554:	4804      	ldr	r0, [pc, #16]	; (8003568 <LCD_IO_WriteData+0x40>)
 8003556:	f002 f917 	bl	8005788 <HAL_GPIO_WritePin>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40020c00 	.word	0x40020c00
 8003568:	40020800 	.word	0x40020800

0800356c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003576:	2200      	movs	r2, #0
 8003578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800357c:	480a      	ldr	r0, [pc, #40]	; (80035a8 <LCD_IO_WriteReg+0x3c>)
 800357e:	f002 f903 	bl	8005788 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003582:	2200      	movs	r2, #0
 8003584:	2104      	movs	r1, #4
 8003586:	4809      	ldr	r0, [pc, #36]	; (80035ac <LCD_IO_WriteReg+0x40>)
 8003588:	f002 f8fe 	bl	8005788 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	b29b      	uxth	r3, r3
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff feed 	bl	8003370 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003596:	2201      	movs	r2, #1
 8003598:	2104      	movs	r1, #4
 800359a:	4804      	ldr	r0, [pc, #16]	; (80035ac <LCD_IO_WriteReg+0x40>)
 800359c:	f002 f8f4 	bl	8005788 <HAL_GPIO_WritePin>
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40020c00 	.word	0x40020c00
 80035ac:	40020800 	.word	0x40020800

080035b0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	460a      	mov	r2, r1
 80035ba:	80fb      	strh	r3, [r7, #6]
 80035bc:	4613      	mov	r3, r2
 80035be:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80035c4:	2200      	movs	r2, #0
 80035c6:	2104      	movs	r1, #4
 80035c8:	4810      	ldr	r0, [pc, #64]	; (800360c <LCD_IO_ReadData+0x5c>)
 80035ca:	f002 f8dd 	bl	8005788 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80035ce:	2200      	movs	r2, #0
 80035d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035d4:	480e      	ldr	r0, [pc, #56]	; (8003610 <LCD_IO_ReadData+0x60>)
 80035d6:	f002 f8d7 	bl	8005788 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fec7 	bl	8003370 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80035e2:	797b      	ldrb	r3, [r7, #5]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fea3 	bl	8003330 <SPIx_Read>
 80035ea:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80035ec:	2201      	movs	r2, #1
 80035ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035f2:	4807      	ldr	r0, [pc, #28]	; (8003610 <LCD_IO_ReadData+0x60>)
 80035f4:	f002 f8c8 	bl	8005788 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80035f8:	2201      	movs	r2, #1
 80035fa:	2104      	movs	r1, #4
 80035fc:	4803      	ldr	r0, [pc, #12]	; (800360c <LCD_IO_ReadData+0x5c>)
 80035fe:	f002 f8c3 	bl	8005788 <HAL_GPIO_WritePin>
  
  return readvalue;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40020800 	.word	0x40020800
 8003610:	40020c00 	.word	0x40020c00

08003614 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f001 f97d 	bl	800491c <HAL_Delay>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800362a:	b580      	push	{r7, lr}
 800362c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800362e:	f7ff fd51 	bl	80030d4 <I2Cx_Init>
}
 8003632:	bf00      	nop
 8003634:	bd80      	pop	{r7, pc}

08003636 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800363a:	f7ff fd7d 	bl	8003138 <I2Cx_ITConfig>
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}

08003642 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	4603      	mov	r3, r0
 800364a:	71fb      	strb	r3, [r7, #7]
 800364c:	460b      	mov	r3, r1
 800364e:	71bb      	strb	r3, [r7, #6]
 8003650:	4613      	mov	r3, r2
 8003652:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003654:	797a      	ldrb	r2, [r7, #5]
 8003656:	79b9      	ldrb	r1, [r7, #6]
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fd9e 	bl	800319c <I2Cx_WriteData>
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	460a      	mov	r2, r1
 8003672:	71fb      	strb	r3, [r7, #7]
 8003674:	4613      	mov	r3, r2
 8003676:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003678:	79ba      	ldrb	r2, [r7, #6]
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f7ff fdb6 	bl	80031f0 <I2Cx_ReadData>
 8003684:	4603      	mov	r3, r0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b082      	sub	sp, #8
 8003692:	af00      	add	r7, sp, #0
 8003694:	603a      	str	r2, [r7, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	4603      	mov	r3, r0
 800369a:	71fb      	strb	r3, [r7, #7]
 800369c:	460b      	mov	r3, r1
 800369e:	71bb      	strb	r3, [r7, #6]
 80036a0:	4613      	mov	r3, r2
 80036a2:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80036a4:	88bb      	ldrh	r3, [r7, #4]
 80036a6:	79b9      	ldrb	r1, [r7, #6]
 80036a8:	79f8      	ldrb	r0, [r7, #7]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	f7ff fdcc 	bl	8003248 <I2Cx_ReadBuffer>
 80036b0:	4603      	mov	r3, r0
 80036b2:	b29b      	uxth	r3, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f001 f929 	bl	800491c <HAL_Delay>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
	flippedLcd = true;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <BSP_LCD_Init_Flipped+0x14>)
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 80036de:	f000 f805 	bl	80036ec <BSP_LCD_Init>
 80036e2:	4603      	mov	r3, r0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000a44 	.word	0x20000a44

080036ec <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80036f0:	4b2d      	ldr	r3, [pc, #180]	; (80037a8 <BSP_LCD_Init+0xbc>)
 80036f2:	4a2e      	ldr	r2, [pc, #184]	; (80037ac <BSP_LCD_Init+0xc0>)
 80036f4:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80036f6:	4b2c      	ldr	r3, [pc, #176]	; (80037a8 <BSP_LCD_Init+0xbc>)
 80036f8:	2209      	movs	r2, #9
 80036fa:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80036fc:	4b2a      	ldr	r3, [pc, #168]	; (80037a8 <BSP_LCD_Init+0xbc>)
 80036fe:	2201      	movs	r2, #1
 8003700:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003702:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003704:	221d      	movs	r2, #29
 8003706:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003708:	4b27      	ldr	r3, [pc, #156]	; (80037a8 <BSP_LCD_Init+0xbc>)
 800370a:	2203      	movs	r2, #3
 800370c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800370e:	4b26      	ldr	r3, [pc, #152]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003710:	f240 120d 	movw	r2, #269	; 0x10d
 8003714:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003716:	4b24      	ldr	r3, [pc, #144]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003718:	f240 1243 	movw	r2, #323	; 0x143
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800371e:	4b22      	ldr	r3, [pc, #136]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003720:	f240 1217 	movw	r2, #279	; 0x117
 8003724:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003726:	4b20      	ldr	r3, [pc, #128]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003728:	f240 1247 	movw	r2, #327	; 0x147
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800372e:	4b1e      	ldr	r3, [pc, #120]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003736:	4b1c      	ldr	r3, [pc, #112]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800373e:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <BSP_LCD_Init+0xc4>)
 8003748:	2208      	movs	r2, #8
 800374a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800374c:	4b18      	ldr	r3, [pc, #96]	; (80037b0 <BSP_LCD_Init+0xc4>)
 800374e:	22c0      	movs	r2, #192	; 0xc0
 8003750:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8003752:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <BSP_LCD_Init+0xc4>)
 8003754:	2204      	movs	r2, #4
 8003756:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003758:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <BSP_LCD_Init+0xc4>)
 800375a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800375e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003760:	4813      	ldr	r0, [pc, #76]	; (80037b0 <BSP_LCD_Init+0xc4>)
 8003762:	f003 ffa7 	bl	80076b4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003768:	2200      	movs	r2, #0
 800376a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <BSP_LCD_Init+0xbc>)
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8003772:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003774:	2200      	movs	r2, #0
 8003776:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003778:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <BSP_LCD_Init+0xbc>)
 800377a:	2200      	movs	r2, #0
 800377c:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800377e:	f000 fb77 	bl	8003e70 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8003782:	4809      	ldr	r0, [pc, #36]	; (80037a8 <BSP_LCD_Init+0xbc>)
 8003784:	f003 f842 	bl	800680c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003788:	4b0a      	ldr	r3, [pc, #40]	; (80037b4 <BSP_LCD_Init+0xc8>)
 800378a:	4a0b      	ldr	r2, [pc, #44]	; (80037b8 <BSP_LCD_Init+0xcc>)
 800378c:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800378e:	4b09      	ldr	r3, [pc, #36]	; (80037b4 <BSP_LCD_Init+0xc8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003796:	f000 fd79 	bl	800428c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800379a:	4808      	ldr	r0, [pc, #32]	; (80037bc <BSP_LCD_Init+0xd0>)
 800379c:	f000 f8ce 	bl	800393c <BSP_LCD_SetFont>

  return LCD_OK;
 80037a0:	2300      	movs	r3, #0
}  
 80037a2:	4618      	mov	r0, r3
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	2000090c 	.word	0x2000090c
 80037ac:	40016800 	.word	0x40016800
 80037b0:	200009f4 	.word	0x200009f4
 80037b4:	20000a40 	.word	0x20000a40
 80037b8:	20000038 	.word	0x20000038
 80037bc:	200000a8 	.word	0x200000a8

080037c0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <BSP_LCD_GetXSize+0x14>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	4798      	blx	r3
 80037cc:	4603      	mov	r3, r0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000a40 	.word	0x20000a40

080037d8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <BSP_LCD_GetYSize+0x14>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	4798      	blx	r3
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000a40 	.word	0x20000a40

080037f0 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b090      	sub	sp, #64	; 0x40
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003800:	f7ff ffde 	bl	80037c0 <BSP_LCD_GetXSize>
 8003804:	4603      	mov	r3, r0
 8003806:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800380c:	f7ff ffe4 	bl	80037d8 <BSP_LCD_GetYSize>
 8003810:	4603      	mov	r3, r0
 8003812:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800381c:	23ff      	movs	r3, #255	; 0xff
 800381e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800382a:	2300      	movs	r3, #0
 800382c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003830:	2300      	movs	r3, #0
 8003832:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003836:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800383c:	2307      	movs	r3, #7
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003840:	f7ff ffbe 	bl	80037c0 <BSP_LCD_GetXSize>
 8003844:	4603      	mov	r3, r0
 8003846:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003848:	f7ff ffc6 	bl	80037d8 <BSP_LCD_GetYSize>
 800384c:	4603      	mov	r3, r0
 800384e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	f107 030c 	add.w	r3, r7, #12
 8003856:	4619      	mov	r1, r3
 8003858:	4814      	ldr	r0, [pc, #80]	; (80038ac <BSP_LCD_LayerDefaultInit+0xbc>)
 800385a:	f003 f8b1 	bl	80069c0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800385e:	88fa      	ldrh	r2, [r7, #6]
 8003860:	4913      	ldr	r1, [pc, #76]	; (80038b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003862:	4613      	mov	r3, r2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4413      	add	r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3304      	adds	r3, #4
 800386e:	f04f 32ff 	mov.w	r2, #4294967295
 8003872:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	490e      	ldr	r1, [pc, #56]	; (80038b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003878:	4613      	mov	r3, r2
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	4413      	add	r3, r2
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	440b      	add	r3, r1
 8003882:	3308      	adds	r3, #8
 8003884:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003886:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003888:	88fa      	ldrh	r2, [r7, #6]
 800388a:	4909      	ldr	r1, [pc, #36]	; (80038b0 <BSP_LCD_LayerDefaultInit+0xc0>)
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800389a:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 800389c:	4803      	ldr	r0, [pc, #12]	; (80038ac <BSP_LCD_LayerDefaultInit+0xbc>)
 800389e:	f003 f8cd 	bl	8006a3c <HAL_LTDC_EnableDither>
}
 80038a2:	bf00      	nop
 80038a4:	3740      	adds	r7, #64	; 0x40
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	2000090c 	.word	0x2000090c
 80038b0:	20000a28 	.word	0x20000a28
 80038b4:	200000a8 	.word	0x200000a8

080038b8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80038c0:	4a04      	ldr	r2, [pc, #16]	; (80038d4 <BSP_LCD_SelectLayer+0x1c>)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6013      	str	r3, [r2, #0]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000a24 	.word	0x20000a24

080038d8 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <BSP_LCD_SetTextColor+0x28>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	4907      	ldr	r1, [pc, #28]	; (8003904 <BSP_LCD_SetTextColor+0x2c>)
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	20000a24 	.word	0x20000a24
 8003904:	20000a28 	.word	0x20000a28

08003908 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <BSP_LCD_SetBackColor+0x2c>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4908      	ldr	r1, [pc, #32]	; (8003938 <BSP_LCD_SetBackColor+0x30>)
 8003916:	4613      	mov	r3, r2
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	3304      	adds	r3, #4
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	601a      	str	r2, [r3, #0]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000a24 	.word	0x20000a24
 8003938:	20000a28 	.word	0x20000a28

0800393c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003944:	4b08      	ldr	r3, [pc, #32]	; (8003968 <BSP_LCD_SetFont+0x2c>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	4908      	ldr	r1, [pc, #32]	; (800396c <BSP_LCD_SetFont+0x30>)
 800394a:	4613      	mov	r3, r2
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	3308      	adds	r3, #8
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	601a      	str	r2, [r3, #0]
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000a24 	.word	0x20000a24
 800396c:	20000a28 	.word	0x20000a28

08003970 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003972:	b085      	sub	sp, #20
 8003974:	af02      	add	r7, sp, #8
 8003976:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <BSP_LCD_Clear+0x48>)
 800397a:	681c      	ldr	r4, [r3, #0]
 800397c:	4b0e      	ldr	r3, [pc, #56]	; (80039b8 <BSP_LCD_Clear+0x48>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0e      	ldr	r2, [pc, #56]	; (80039bc <BSP_LCD_Clear+0x4c>)
 8003982:	2134      	movs	r1, #52	; 0x34
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	335c      	adds	r3, #92	; 0x5c
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461e      	mov	r6, r3
 8003990:	f7ff ff16 	bl	80037c0 <BSP_LCD_GetXSize>
 8003994:	4605      	mov	r5, r0
 8003996:	f7ff ff1f 	bl	80037d8 <BSP_LCD_GetYSize>
 800399a:	4602      	mov	r2, r0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	2300      	movs	r3, #0
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	462a      	mov	r2, r5
 80039a8:	4631      	mov	r1, r6
 80039aa:	4620      	mov	r0, r4
 80039ac:	f000 fc36 	bl	800421c <FillBuffer>
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039b8:	20000a24 	.word	0x20000a24
 80039bc:	2000090c 	.word	0x2000090c

080039c0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	80fb      	strh	r3, [r7, #6]
 80039ca:	460b      	mov	r3, r1
 80039cc:	80bb      	strh	r3, [r7, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80039d2:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <BSP_LCD_DisplayChar+0x80>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	491b      	ldr	r1, [pc, #108]	; (8003a44 <BSP_LCD_DisplayChar+0x84>)
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	3308      	adds	r3, #8
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80039ee:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <BSP_LCD_DisplayChar+0x80>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	4c14      	ldr	r4, [pc, #80]	; (8003a44 <BSP_LCD_DisplayChar+0x84>)
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4423      	add	r3, r4
 80039fe:	3308      	adds	r3, #8
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a04:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <BSP_LCD_DisplayChar+0x80>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4c0d      	ldr	r4, [pc, #52]	; (8003a44 <BSP_LCD_DisplayChar+0x84>)
 8003a0e:	4613      	mov	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4423      	add	r3, r4
 8003a18:	3308      	adds	r3, #8
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	889b      	ldrh	r3, [r3, #4]
 8003a1e:	3307      	adds	r3, #7
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	da00      	bge.n	8003a26 <BSP_LCD_DisplayChar+0x66>
 8003a24:	3307      	adds	r3, #7
 8003a26:	10db      	asrs	r3, r3, #3
 8003a28:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a2c:	18ca      	adds	r2, r1, r3
 8003a2e:	88b9      	ldrh	r1, [r7, #4]
 8003a30:	88fb      	ldrh	r3, [r7, #6]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fb38 	bl	80040a8 <DrawChar>
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd90      	pop	{r4, r7, pc}
 8003a40:	20000a24 	.word	0x20000a24
 8003a44:	20000a28 	.word	0x20000a28

08003a48 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003a48:	b5b0      	push	{r4, r5, r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60ba      	str	r2, [r7, #8]
 8003a50:	461a      	mov	r2, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	81fb      	strh	r3, [r7, #14]
 8003a56:	460b      	mov	r3, r1
 8003a58:	81bb      	strh	r3, [r7, #12]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	83fb      	strh	r3, [r7, #30]
 8003a62:	2300      	movs	r3, #0
 8003a64:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003a66:	2300      	movs	r3, #0
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003a72:	e002      	b.n	8003a7a <BSP_LCD_DisplayStringAt+0x32>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	3301      	adds	r3, #1
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	617a      	str	r2, [r7, #20]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f6      	bne.n	8003a74 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003a86:	f7ff fe9b 	bl	80037c0 <BSP_LCD_GetXSize>
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	4b4b      	ldr	r3, [pc, #300]	; (8003bbc <BSP_LCD_DisplayStringAt+0x174>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	484b      	ldr	r0, [pc, #300]	; (8003bc0 <BSP_LCD_DisplayStringAt+0x178>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4403      	add	r3, r0
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	889b      	ldrh	r3, [r3, #4]
 8003aa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aa6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d01c      	beq.n	8003ae8 <BSP_LCD_DisplayStringAt+0xa0>
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	dc33      	bgt.n	8003b1a <BSP_LCD_DisplayStringAt+0xd2>
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d002      	beq.n	8003abc <BSP_LCD_DisplayStringAt+0x74>
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d019      	beq.n	8003aee <BSP_LCD_DisplayStringAt+0xa6>
 8003aba:	e02e      	b.n	8003b1a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	1ad1      	subs	r1, r2, r3
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <BSP_LCD_DisplayStringAt+0x174>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	483e      	ldr	r0, [pc, #248]	; (8003bc0 <BSP_LCD_DisplayStringAt+0x178>)
 8003ac8:	4613      	mov	r3, r2
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4403      	add	r3, r0
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	889b      	ldrh	r3, [r3, #4]
 8003ad8:	fb01 f303 	mul.w	r3, r1, r3
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	89fb      	ldrh	r3, [r7, #14]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	83fb      	strh	r3, [r7, #30]
      break;
 8003ae6:	e01b      	b.n	8003b20 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003ae8:	89fb      	ldrh	r3, [r7, #14]
 8003aea:	83fb      	strh	r3, [r7, #30]
      break;
 8003aec:	e018      	b.n	8003b20 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	b299      	uxth	r1, r3
 8003af6:	4b31      	ldr	r3, [pc, #196]	; (8003bbc <BSP_LCD_DisplayStringAt+0x174>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4831      	ldr	r0, [pc, #196]	; (8003bc0 <BSP_LCD_DisplayStringAt+0x178>)
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4403      	add	r3, r0
 8003b06:	3308      	adds	r3, #8
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	889b      	ldrh	r3, [r3, #4]
 8003b0c:	fb11 f303 	smulbb	r3, r1, r3
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	89fb      	ldrh	r3, [r7, #14]
 8003b14:	4413      	add	r3, r2
 8003b16:	83fb      	strh	r3, [r7, #30]
      break;
 8003b18:	e002      	b.n	8003b20 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003b1a:	89fb      	ldrh	r3, [r7, #14]
 8003b1c:	83fb      	strh	r3, [r7, #30]
      break;
 8003b1e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003b20:	e01a      	b.n	8003b58 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	89b9      	ldrh	r1, [r7, #12]
 8003b28:	8bfb      	ldrh	r3, [r7, #30]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff ff48 	bl	80039c0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003b30:	4b22      	ldr	r3, [pc, #136]	; (8003bbc <BSP_LCD_DisplayStringAt+0x174>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4922      	ldr	r1, [pc, #136]	; (8003bc0 <BSP_LCD_DisplayStringAt+0x178>)
 8003b36:	4613      	mov	r3, r2
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3308      	adds	r3, #8
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	889a      	ldrh	r2, [r3, #4]
 8003b46:	8bfb      	ldrh	r3, [r7, #30]
 8003b48:	4413      	add	r3, r2
 8003b4a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
    i++;
 8003b52:	8bbb      	ldrh	r3, [r7, #28]
 8003b54:	3301      	adds	r3, #1
 8003b56:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf14      	ite	ne
 8003b60:	2301      	movne	r3, #1
 8003b62:	2300      	moveq	r3, #0
 8003b64:	b2dc      	uxtb	r4, r3
 8003b66:	f7ff fe2b 	bl	80037c0 <BSP_LCD_GetXSize>
 8003b6a:	8bb9      	ldrh	r1, [r7, #28]
 8003b6c:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <BSP_LCD_DisplayStringAt+0x174>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4d13      	ldr	r5, [pc, #76]	; (8003bc0 <BSP_LCD_DisplayStringAt+0x178>)
 8003b72:	4613      	mov	r3, r2
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	442b      	add	r3, r5
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	889b      	ldrh	r3, [r3, #4]
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	1ac3      	subs	r3, r0, r3
 8003b88:	b299      	uxth	r1, r3
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <BSP_LCD_DisplayStringAt+0x174>)
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <BSP_LCD_DisplayStringAt+0x178>)
 8003b90:	4613      	mov	r3, r2
 8003b92:	005b      	lsls	r3, r3, #1
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4403      	add	r3, r0
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	889b      	ldrh	r3, [r3, #4]
 8003ba0:	4299      	cmp	r1, r3
 8003ba2:	bf2c      	ite	cs
 8003ba4:	2301      	movcs	r3, #1
 8003ba6:	2300      	movcc	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	4023      	ands	r3, r4
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1b7      	bne.n	8003b22 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003bb2:	bf00      	nop
 8003bb4:	bf00      	nop
 8003bb6:	3720      	adds	r7, #32
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bdb0      	pop	{r4, r5, r7, pc}
 8003bbc:	20000a24 	.word	0x20000a24
 8003bc0:	20000a28 	.word	0x20000a28

08003bc4 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003bc4:	b590      	push	{r4, r7, lr}
 8003bc6:	b08b      	sub	sp, #44	; 0x2c
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4623      	mov	r3, r4
 8003bd4:	80fb      	strh	r3, [r7, #6]
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80bb      	strh	r3, [r7, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	807b      	strh	r3, [r7, #2]
 8003bde:	4613      	mov	r3, r2
 8003be0:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003be2:	2300      	movs	r3, #0
 8003be4:	823b      	strh	r3, [r7, #16]
 8003be6:	2300      	movs	r3, #0
 8003be8:	81fb      	strh	r3, [r7, #14]
 8003bea:	2300      	movs	r3, #0
 8003bec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003bee:	2300      	movs	r3, #0
 8003bf0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	847b      	strh	r3, [r7, #34]	; 0x22
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	83fb      	strh	r3, [r7, #30]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	83bb      	strh	r3, [r7, #28]
 8003c02:	2300      	movs	r3, #0
 8003c04:	837b      	strh	r3, [r7, #26]
 8003c06:	2300      	movs	r3, #0
 8003c08:	833b      	strh	r3, [r7, #24]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	82fb      	strh	r3, [r7, #22]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003c12:	2300      	movs	r3, #0
 8003c14:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003c16:	887a      	ldrh	r2, [r7, #2]
 8003c18:	88fb      	ldrh	r3, [r7, #6]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bfb8      	it	lt
 8003c20:	425b      	neglt	r3, r3
 8003c22:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003c24:	883a      	ldrh	r2, [r7, #0]
 8003c26:	88bb      	ldrh	r3, [r7, #4]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bfb8      	it	lt
 8003c2e:	425b      	neglt	r3, r3
 8003c30:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003c36:	88bb      	ldrh	r3, [r7, #4]
 8003c38:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8003c3a:	887a      	ldrh	r2, [r7, #2]
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d304      	bcc.n	8003c4c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003c42:	2301      	movs	r3, #1
 8003c44:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003c46:	2301      	movs	r3, #1
 8003c48:	843b      	strh	r3, [r7, #32]
 8003c4a:	e005      	b.n	8003c58 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c50:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003c52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c56:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003c58:	883a      	ldrh	r2, [r7, #0]
 8003c5a:	88bb      	ldrh	r3, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d304      	bcc.n	8003c6a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003c60:	2301      	movs	r3, #1
 8003c62:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003c64:	2301      	movs	r3, #1
 8003c66:	83bb      	strh	r3, [r7, #28]
 8003c68:	e005      	b.n	8003c76 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c6e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c74:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003c76:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	db10      	blt.n	8003ca4 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003c82:	2300      	movs	r3, #0
 8003c84:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003c86:	2300      	movs	r3, #0
 8003c88:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003c8a:	8a3b      	ldrh	r3, [r7, #16]
 8003c8c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003c8e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c92:	0fda      	lsrs	r2, r3, #31
 8003c94:	4413      	add	r3, r2
 8003c96:	105b      	asrs	r3, r3, #1
 8003c98:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003c9a:	89fb      	ldrh	r3, [r7, #14]
 8003c9c:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003c9e:	8a3b      	ldrh	r3, [r7, #16]
 8003ca0:	82bb      	strh	r3, [r7, #20]
 8003ca2:	e00f      	b.n	8003cc4 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003ca8:	2300      	movs	r3, #0
 8003caa:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003cac:	89fb      	ldrh	r3, [r7, #14]
 8003cae:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003cb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003cb4:	0fda      	lsrs	r2, r3, #31
 8003cb6:	4413      	add	r3, r2
 8003cb8:	105b      	asrs	r3, r3, #1
 8003cba:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003cbc:	8a3b      	ldrh	r3, [r7, #16]
 8003cbe:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003cc0:	89fb      	ldrh	r3, [r7, #14]
 8003cc2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	827b      	strh	r3, [r7, #18]
 8003cc8:	e037      	b.n	8003d3a <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003cca:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003ccc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003cce:	4b20      	ldr	r3, [pc, #128]	; (8003d50 <BSP_LCD_DrawLine+0x18c>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	4c20      	ldr	r4, [pc, #128]	; (8003d54 <BSP_LCD_DrawLine+0x190>)
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	4413      	add	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4423      	add	r3, r4
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f000 f99b 	bl	800401c <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003ce6:	8b3a      	ldrh	r2, [r7, #24]
 8003ce8:	8afb      	ldrh	r3, [r7, #22]
 8003cea:	4413      	add	r3, r2
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003cf0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003cf4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	db0e      	blt.n	8003d1a <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003cfc:	8b3a      	ldrh	r2, [r7, #24]
 8003cfe:	8b7b      	ldrh	r3, [r7, #26]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003d06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d0a:	4413      	add	r3, r2
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003d10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d12:	8bfb      	ldrh	r3, [r7, #30]
 8003d14:	4413      	add	r3, r2
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003d1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003d1c:	8c3b      	ldrh	r3, [r7, #32]
 8003d1e:	4413      	add	r3, r2
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003d24:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d26:	8bbb      	ldrh	r3, [r7, #28]
 8003d28:	4413      	add	r3, r2
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003d2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	827b      	strh	r3, [r7, #18]
 8003d3a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	ddc1      	ble.n	8003cca <BSP_LCD_DrawLine+0x106>
  }
}
 8003d46:	bf00      	nop
 8003d48:	bf00      	nop
 8003d4a:	372c      	adds	r7, #44	; 0x2c
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd90      	pop	{r4, r7, pc}
 8003d50:	20000a24 	.word	0x20000a24
 8003d54:	20000a28 	.word	0x20000a28

08003d58 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af02      	add	r7, sp, #8
 8003d60:	4604      	mov	r4, r0
 8003d62:	4608      	mov	r0, r1
 8003d64:	4611      	mov	r1, r2
 8003d66:	461a      	mov	r2, r3
 8003d68:	4623      	mov	r3, r4
 8003d6a:	80fb      	strh	r3, [r7, #6]
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	80bb      	strh	r3, [r7, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	807b      	strh	r3, [r7, #2]
 8003d74:	4613      	mov	r3, r2
 8003d76:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003d7c:	4b30      	ldr	r3, [pc, #192]	; (8003e40 <BSP_LCD_FillRect+0xe8>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4930      	ldr	r1, [pc, #192]	; (8003e44 <BSP_LCD_FillRect+0xec>)
 8003d82:	4613      	mov	r3, r2
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fda2 	bl	80038d8 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8003d94:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <BSP_LCD_FillRect+0xf0>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d01b      	beq.n	8003dd4 <BSP_LCD_FillRect+0x7c>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +76800); //Rotate by 180°
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <BSP_LCD_FillRect+0xe8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <BSP_LCD_FillRect+0xf4>)
 8003da2:	2134      	movs	r1, #52	; 0x34
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	4413      	add	r3, r2
 8003daa:	335c      	adds	r3, #92	; 0x5c
 8003dac:	681c      	ldr	r4, [r3, #0]
 8003dae:	f7ff fd07 	bl	80037c0 <BSP_LCD_GetXSize>
 8003db2:	4603      	mov	r3, r0
 8003db4:	425b      	negs	r3, r3
 8003db6:	88b9      	ldrh	r1, [r7, #4]
 8003db8:	883a      	ldrh	r2, [r7, #0]
 8003dba:	440a      	add	r2, r1
 8003dbc:	fb02 f303 	mul.w	r3, r2, r3
 8003dc0:	88f9      	ldrh	r1, [r7, #6]
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	440a      	add	r2, r1
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4423      	add	r3, r4
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e013      	b.n	8003dfc <BSP_LCD_FillRect+0xa4>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <BSP_LCD_FillRect+0xe8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <BSP_LCD_FillRect+0xf4>)
 8003dda:	2134      	movs	r1, #52	; 0x34
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	4413      	add	r3, r2
 8003de2:	335c      	adds	r3, #92	; 0x5c
 8003de4:	681c      	ldr	r4, [r3, #0]
 8003de6:	f7ff fceb 	bl	80037c0 <BSP_LCD_GetXSize>
 8003dea:	4602      	mov	r2, r0
 8003dec:	88bb      	ldrh	r3, [r7, #4]
 8003dee:	fb03 f202 	mul.w	r2, r3, r2
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	4413      	add	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4423      	add	r3, r4
 8003dfa:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003dfc:	4b10      	ldr	r3, [pc, #64]	; (8003e40 <BSP_LCD_FillRect+0xe8>)
 8003dfe:	681c      	ldr	r4, [r3, #0]
 8003e00:	68fd      	ldr	r5, [r7, #12]
 8003e02:	887e      	ldrh	r6, [r7, #2]
 8003e04:	f8b7 8000 	ldrh.w	r8, [r7]
 8003e08:	f7ff fcda 	bl	80037c0 <BSP_LCD_GetXSize>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	887b      	ldrh	r3, [r7, #2]
 8003e10:	1ad1      	subs	r1, r2, r3
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <BSP_LCD_FillRect+0xe8>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	480b      	ldr	r0, [pc, #44]	; (8003e44 <BSP_LCD_FillRect+0xec>)
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	4403      	add	r3, r0
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	9100      	str	r1, [sp, #0]
 8003e28:	4643      	mov	r3, r8
 8003e2a:	4632      	mov	r2, r6
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f000 f9f4 	bl	800421c <FillBuffer>
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000a24 	.word	0x20000a24
 8003e44:	20000a28 	.word	0x20000a28
 8003e48:	20000a44 	.word	0x20000a44
 8003e4c:	2000090c 	.word	0x2000090c

08003e50 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <BSP_LCD_DisplayOn+0x1c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003e5e:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <BSP_LCD_DisplayOn+0x1c>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	4798      	blx	r3
  }
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000a40 	.word	0x20000a40

08003e70 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08e      	sub	sp, #56	; 0x38
 8003e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	623b      	str	r3, [r7, #32]
 8003e7a:	4b61      	ldr	r3, [pc, #388]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	4a60      	ldr	r2, [pc, #384]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003e80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e84:	6453      	str	r3, [r2, #68]	; 0x44
 8003e86:	4b5e      	ldr	r3, [pc, #376]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e8e:	623b      	str	r3, [r7, #32]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
 8003e96:	4b5a      	ldr	r3, [pc, #360]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a59      	ldr	r2, [pc, #356]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003e9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b57      	ldr	r3, [pc, #348]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	61bb      	str	r3, [r7, #24]
 8003eb2:	4b53      	ldr	r3, [pc, #332]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb6:	4a52      	ldr	r2, [pc, #328]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ebe:	4b50      	ldr	r3, [pc, #320]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	61bb      	str	r3, [r7, #24]
 8003ec8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	4b4c      	ldr	r3, [pc, #304]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	4a4b      	ldr	r2, [pc, #300]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003ed4:	f043 0302 	orr.w	r3, r3, #2
 8003ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	4b45      	ldr	r3, [pc, #276]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	4a44      	ldr	r2, [pc, #272]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003ef0:	f043 0304 	orr.w	r3, r3, #4
 8003ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef6:	4b42      	ldr	r3, [pc, #264]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f003 0304 	and.w	r3, r3, #4
 8003efe:	613b      	str	r3, [r7, #16]
 8003f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]
 8003f06:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	4a3d      	ldr	r2, [pc, #244]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003f0c:	f043 0308 	orr.w	r3, r3, #8
 8003f10:	6313      	str	r3, [r2, #48]	; 0x30
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	4b37      	ldr	r3, [pc, #220]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f26:	4a36      	ldr	r2, [pc, #216]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003f28:	f043 0320 	orr.w	r3, r3, #32
 8003f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	4b30      	ldr	r3, [pc, #192]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	4a2f      	ldr	r2, [pc, #188]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003f44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f48:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4a:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <BSP_LCD_MspInit+0x190>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f52:	607b      	str	r3, [r7, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003f56:	f641 0358 	movw	r3, #6232	; 0x1858
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003f64:	2302      	movs	r3, #2
 8003f66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003f68:	230e      	movs	r3, #14
 8003f6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f70:	4619      	mov	r1, r3
 8003f72:	4824      	ldr	r0, [pc, #144]	; (8004004 <BSP_LCD_MspInit+0x194>)
 8003f74:	f001 fa5c 	bl	8005430 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003f78:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f82:	4619      	mov	r1, r3
 8003f84:	4820      	ldr	r0, [pc, #128]	; (8004008 <BSP_LCD_MspInit+0x198>)
 8003f86:	f001 fa53 	bl	8005430 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003f8a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f94:	4619      	mov	r1, r3
 8003f96:	481d      	ldr	r0, [pc, #116]	; (800400c <BSP_LCD_MspInit+0x19c>)
 8003f98:	f001 fa4a 	bl	8005430 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003f9c:	2348      	movs	r3, #72	; 0x48
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	481a      	ldr	r0, [pc, #104]	; (8004010 <BSP_LCD_MspInit+0x1a0>)
 8003fa8:	f001 fa42 	bl	8005430 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003fb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4816      	ldr	r0, [pc, #88]	; (8004014 <BSP_LCD_MspInit+0x1a4>)
 8003fba:	f001 fa39 	bl	8005430 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003fbe:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4813      	ldr	r0, [pc, #76]	; (8004018 <BSP_LCD_MspInit+0x1a8>)
 8003fcc:	f001 fa30 	bl	8005430 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003fd4:	2309      	movs	r3, #9
 8003fd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fdc:	4619      	mov	r1, r3
 8003fde:	480a      	ldr	r0, [pc, #40]	; (8004008 <BSP_LCD_MspInit+0x198>)
 8003fe0:	f001 fa26 	bl	8005430 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003fe4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4809      	ldr	r0, [pc, #36]	; (8004018 <BSP_LCD_MspInit+0x1a8>)
 8003ff2:	f001 fa1d 	bl	8005430 <HAL_GPIO_Init>
}
 8003ff6:	bf00      	nop
 8003ff8:	3738      	adds	r7, #56	; 0x38
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40023800 	.word	0x40023800
 8004004:	40020000 	.word	0x40020000
 8004008:	40020400 	.word	0x40020400
 800400c:	40020800 	.word	0x40020800
 8004010:	40020c00 	.word	0x40020c00
 8004014:	40021400 	.word	0x40021400
 8004018:	40021800 	.word	0x40021800

0800401c <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800401c:	b5b0      	push	{r4, r5, r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	603a      	str	r2, [r7, #0]
 8004026:	80fb      	strh	r3, [r7, #6]
 8004028:	460b      	mov	r3, r1
 800402a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <BSP_LCD_DrawPixel+0x80>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d018      	beq.n	8004066 <BSP_LCD_DrawPixel+0x4a>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (76800 - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 8004034:	4b1a      	ldr	r3, [pc, #104]	; (80040a0 <BSP_LCD_DrawPixel+0x84>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <BSP_LCD_DrawPixel+0x88>)
 800403a:	2134      	movs	r1, #52	; 0x34
 800403c:	fb01 f303 	mul.w	r3, r1, r3
 8004040:	4413      	add	r3, r2
 8004042:	335c      	adds	r3, #92	; 0x5c
 8004044:	681c      	ldr	r4, [r3, #0]
 8004046:	88fd      	ldrh	r5, [r7, #6]
 8004048:	f7ff fbba 	bl	80037c0 <BSP_LCD_GetXSize>
 800404c:	4602      	mov	r2, r0
 800404e:	88bb      	ldrh	r3, [r7, #4]
 8004050:	fb02 f303 	mul.w	r3, r2, r3
 8004054:	442b      	add	r3, r5
 8004056:	f5c3 3396 	rsb	r3, r3, #76800	; 0x12c00
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4423      	add	r3, r4
 800405e:	461a      	mov	r2, r3
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004064:	e015      	b.n	8004092 <BSP_LCD_DrawPixel+0x76>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004066:	4b0e      	ldr	r3, [pc, #56]	; (80040a0 <BSP_LCD_DrawPixel+0x84>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <BSP_LCD_DrawPixel+0x88>)
 800406c:	2134      	movs	r1, #52	; 0x34
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	335c      	adds	r3, #92	; 0x5c
 8004076:	681c      	ldr	r4, [r3, #0]
 8004078:	88bd      	ldrh	r5, [r7, #4]
 800407a:	f7ff fba1 	bl	80037c0 <BSP_LCD_GetXSize>
 800407e:	4603      	mov	r3, r0
 8004080:	fb03 f205 	mul.w	r2, r3, r5
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4423      	add	r3, r4
 800408c:	461a      	mov	r2, r3
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6013      	str	r3, [r2, #0]
}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bdb0      	pop	{r4, r5, r7, pc}
 800409a:	bf00      	nop
 800409c:	20000a44 	.word	0x20000a44
 80040a0:	20000a24 	.word	0x20000a24
 80040a4:	2000090c 	.word	0x2000090c

080040a8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	603a      	str	r2, [r7, #0]
 80040b2:	80fb      	strh	r3, [r7, #6]
 80040b4:	460b      	mov	r3, r1
 80040b6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
 80040bc:	2300      	movs	r3, #0
 80040be:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80040c4:	4b53      	ldr	r3, [pc, #332]	; (8004214 <DrawChar+0x16c>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4953      	ldr	r1, [pc, #332]	; (8004218 <DrawChar+0x170>)
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	3308      	adds	r3, #8
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	88db      	ldrh	r3, [r3, #6]
 80040da:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80040dc:	4b4d      	ldr	r3, [pc, #308]	; (8004214 <DrawChar+0x16c>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	494d      	ldr	r1, [pc, #308]	; (8004218 <DrawChar+0x170>)
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	3308      	adds	r3, #8
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	889b      	ldrh	r3, [r3, #4]
 80040f2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80040f4:	8a3b      	ldrh	r3, [r7, #16]
 80040f6:	3307      	adds	r3, #7
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	da00      	bge.n	80040fe <DrawChar+0x56>
 80040fc:	3307      	adds	r3, #7
 80040fe:	10db      	asrs	r3, r3, #3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	b2da      	uxtb	r2, r3
 8004106:	8a3b      	ldrh	r3, [r7, #16]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800410e:	2300      	movs	r3, #0
 8004110:	61fb      	str	r3, [r7, #28]
 8004112:	e076      	b.n	8004202 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004114:	8a3b      	ldrh	r3, [r7, #16]
 8004116:	3307      	adds	r3, #7
 8004118:	2b00      	cmp	r3, #0
 800411a:	da00      	bge.n	800411e <DrawChar+0x76>
 800411c:	3307      	adds	r3, #7
 800411e:	10db      	asrs	r3, r3, #3
 8004120:	461a      	mov	r2, r3
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	fb02 f303 	mul.w	r3, r2, r3
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	4413      	add	r3, r2
 800412c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800412e:	8a3b      	ldrh	r3, [r7, #16]
 8004130:	3307      	adds	r3, #7
 8004132:	2b00      	cmp	r3, #0
 8004134:	da00      	bge.n	8004138 <DrawChar+0x90>
 8004136:	3307      	adds	r3, #7
 8004138:	10db      	asrs	r3, r3, #3
 800413a:	2b01      	cmp	r3, #1
 800413c:	d002      	beq.n	8004144 <DrawChar+0x9c>
 800413e:	2b02      	cmp	r3, #2
 8004140:	d004      	beq.n	800414c <DrawChar+0xa4>
 8004142:	e00c      	b.n	800415e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	617b      	str	r3, [r7, #20]
      break;
 800414a:	e016      	b.n	800417a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	3201      	adds	r2, #1
 8004156:	7812      	ldrb	r2, [r2, #0]
 8004158:	4313      	orrs	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
      break;
 800415c:	e00d      	b.n	800417a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	041a      	lsls	r2, r3, #16
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	3301      	adds	r3, #1
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	4313      	orrs	r3, r2
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	3202      	adds	r2, #2
 8004172:	7812      	ldrb	r2, [r2, #0]
 8004174:	4313      	orrs	r3, r2
 8004176:	617b      	str	r3, [r7, #20]
      break;
 8004178:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800417a:	2300      	movs	r3, #0
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	e036      	b.n	80041ee <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004180:	8a3a      	ldrh	r2, [r7, #16]
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	1ad2      	subs	r2, r2, r3
 8004186:	7bfb      	ldrb	r3, [r7, #15]
 8004188:	4413      	add	r3, r2
 800418a:	3b01      	subs	r3, #1
 800418c:	2201      	movs	r2, #1
 800418e:	fa02 f303 	lsl.w	r3, r2, r3
 8004192:	461a      	mov	r2, r3
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	4013      	ands	r3, r2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d012      	beq.n	80041c2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	b29a      	uxth	r2, r3
 80041a0:	88fb      	ldrh	r3, [r7, #6]
 80041a2:	4413      	add	r3, r2
 80041a4:	b298      	uxth	r0, r3
 80041a6:	4b1b      	ldr	r3, [pc, #108]	; (8004214 <DrawChar+0x16c>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	491b      	ldr	r1, [pc, #108]	; (8004218 <DrawChar+0x170>)
 80041ac:	4613      	mov	r3, r2
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	88bb      	ldrh	r3, [r7, #4]
 80041ba:	4619      	mov	r1, r3
 80041bc:	f7ff ff2e 	bl	800401c <BSP_LCD_DrawPixel>
 80041c0:	e012      	b.n	80041e8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	88fb      	ldrh	r3, [r7, #6]
 80041c8:	4413      	add	r3, r2
 80041ca:	b298      	uxth	r0, r3
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <DrawChar+0x16c>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4911      	ldr	r1, [pc, #68]	; (8004218 <DrawChar+0x170>)
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	440b      	add	r3, r1
 80041dc:	3304      	adds	r3, #4
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	88bb      	ldrh	r3, [r7, #4]
 80041e2:	4619      	mov	r1, r3
 80041e4:	f7ff ff1a 	bl	800401c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	3301      	adds	r3, #1
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	8a3b      	ldrh	r3, [r7, #16]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d3c4      	bcc.n	8004180 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80041f6:	88bb      	ldrh	r3, [r7, #4]
 80041f8:	3301      	adds	r3, #1
 80041fa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	3301      	adds	r3, #1
 8004200:	61fb      	str	r3, [r7, #28]
 8004202:	8a7b      	ldrh	r3, [r7, #18]
 8004204:	69fa      	ldr	r2, [r7, #28]
 8004206:	429a      	cmp	r2, r3
 8004208:	d384      	bcc.n	8004114 <DrawChar+0x6c>
  }
}
 800420a:	bf00      	nop
 800420c:	bf00      	nop
 800420e:	3720      	adds	r7, #32
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	20000a24 	.word	0x20000a24
 8004218:	20000a28 	.word	0x20000a28

0800421c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]
 8004228:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800422a:	4b16      	ldr	r3, [pc, #88]	; (8004284 <FillBuffer+0x68>)
 800422c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004230:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <FillBuffer+0x68>)
 8004234:	2200      	movs	r2, #0
 8004236:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8004238:	4a12      	ldr	r2, [pc, #72]	; (8004284 <FillBuffer+0x68>)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <FillBuffer+0x68>)
 8004240:	4a11      	ldr	r2, [pc, #68]	; (8004288 <FillBuffer+0x6c>)
 8004242:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004244:	480f      	ldr	r0, [pc, #60]	; (8004284 <FillBuffer+0x68>)
 8004246:	f000 fe5d 	bl	8004f04 <HAL_DMA2D_Init>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d115      	bne.n	800427c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	480c      	ldr	r0, [pc, #48]	; (8004284 <FillBuffer+0x68>)
 8004254:	f000 ffbe 	bl	80051d4 <HAL_DMA2D_ConfigLayer>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10e      	bne.n	800427c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	69f9      	ldr	r1, [r7, #28]
 8004268:	4806      	ldr	r0, [pc, #24]	; (8004284 <FillBuffer+0x68>)
 800426a:	f000 fe9e 	bl	8004faa <HAL_DMA2D_Start>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004274:	210a      	movs	r1, #10
 8004276:	4803      	ldr	r0, [pc, #12]	; (8004284 <FillBuffer+0x68>)
 8004278:	f000 fec2 	bl	8005000 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	200009b4 	.word	0x200009b4
 8004288:	4002b000 	.word	0x4002b000

0800428c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <BSP_SDRAM_Init+0xac>)
 8004292:	4a2a      	ldr	r2, [pc, #168]	; (800433c <BSP_SDRAM_Init+0xb0>)
 8004294:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004296:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <BSP_SDRAM_Init+0xb4>)
 8004298:	2202      	movs	r2, #2
 800429a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800429c:	4b28      	ldr	r3, [pc, #160]	; (8004340 <BSP_SDRAM_Init+0xb4>)
 800429e:	2207      	movs	r2, #7
 80042a0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80042a2:	4b27      	ldr	r3, [pc, #156]	; (8004340 <BSP_SDRAM_Init+0xb4>)
 80042a4:	2204      	movs	r2, #4
 80042a6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80042a8:	4b25      	ldr	r3, [pc, #148]	; (8004340 <BSP_SDRAM_Init+0xb4>)
 80042aa:	2207      	movs	r2, #7
 80042ac:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80042ae:	4b24      	ldr	r3, [pc, #144]	; (8004340 <BSP_SDRAM_Init+0xb4>)
 80042b0:	2202      	movs	r2, #2
 80042b2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80042b4:	4b22      	ldr	r3, [pc, #136]	; (8004340 <BSP_SDRAM_Init+0xb4>)
 80042b6:	2202      	movs	r2, #2
 80042b8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80042ba:	4b21      	ldr	r3, [pc, #132]	; (8004340 <BSP_SDRAM_Init+0xb4>)
 80042bc:	2202      	movs	r2, #2
 80042be:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80042c0:	4b1d      	ldr	r3, [pc, #116]	; (8004338 <BSP_SDRAM_Init+0xac>)
 80042c2:	2201      	movs	r2, #1
 80042c4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80042c6:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <BSP_SDRAM_Init+0xac>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80042cc:	4b1a      	ldr	r3, [pc, #104]	; (8004338 <BSP_SDRAM_Init+0xac>)
 80042ce:	2204      	movs	r2, #4
 80042d0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80042d2:	4b19      	ldr	r3, [pc, #100]	; (8004338 <BSP_SDRAM_Init+0xac>)
 80042d4:	2210      	movs	r2, #16
 80042d6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <BSP_SDRAM_Init+0xac>)
 80042da:	2240      	movs	r2, #64	; 0x40
 80042dc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80042de:	4b16      	ldr	r3, [pc, #88]	; (8004338 <BSP_SDRAM_Init+0xac>)
 80042e0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80042e4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80042e6:	4b14      	ldr	r3, [pc, #80]	; (8004338 <BSP_SDRAM_Init+0xac>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80042ec:	4b12      	ldr	r3, [pc, #72]	; (8004338 <BSP_SDRAM_Init+0xac>)
 80042ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80042f4:	4b10      	ldr	r3, [pc, #64]	; (8004338 <BSP_SDRAM_Init+0xac>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80042fa:	4b0f      	ldr	r3, [pc, #60]	; (8004338 <BSP_SDRAM_Init+0xac>)
 80042fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004302:	2100      	movs	r1, #0
 8004304:	480c      	ldr	r0, [pc, #48]	; (8004338 <BSP_SDRAM_Init+0xac>)
 8004306:	f000 f87f 	bl	8004408 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800430a:	490d      	ldr	r1, [pc, #52]	; (8004340 <BSP_SDRAM_Init+0xb4>)
 800430c:	480a      	ldr	r0, [pc, #40]	; (8004338 <BSP_SDRAM_Init+0xac>)
 800430e:	f003 fb91 	bl	8007a34 <HAL_SDRAM_Init>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <BSP_SDRAM_Init+0xb8>)
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e002      	b.n	8004326 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004320:	4b08      	ldr	r3, [pc, #32]	; (8004344 <BSP_SDRAM_Init+0xb8>)
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004326:	f240 506a 	movw	r0, #1386	; 0x56a
 800432a:	f000 f80d 	bl	8004348 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <BSP_SDRAM_Init+0xb8>)
 8004330:	781b      	ldrb	r3, [r3, #0]
}
 8004332:	4618      	mov	r0, r3
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	20000a48 	.word	0x20000a48
 800433c:	a0000140 	.word	0xa0000140
 8004340:	20000a7c 	.word	0x20000a7c
 8004344:	200000c0 	.word	0x200000c0

08004348 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004354:	4b2a      	ldr	r3, [pc, #168]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004356:	2201      	movs	r2, #1
 8004358:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800435a:	4b29      	ldr	r3, [pc, #164]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800435c:	2208      	movs	r2, #8
 800435e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004360:	4b27      	ldr	r3, [pc, #156]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004362:	2201      	movs	r2, #1
 8004364:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004368:	2200      	movs	r2, #0
 800436a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800436c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004370:	4923      	ldr	r1, [pc, #140]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004372:	4824      	ldr	r0, [pc, #144]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004374:	f003 fb9c 	bl	8007ab0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004378:	2001      	movs	r0, #1
 800437a:	f000 facf 	bl	800491c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004380:	2202      	movs	r2, #2
 8004382:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004384:	4b1e      	ldr	r3, [pc, #120]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004386:	2208      	movs	r2, #8
 8004388:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800438c:	2201      	movs	r2, #1
 800438e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004392:	2200      	movs	r2, #0
 8004394:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800439a:	4919      	ldr	r1, [pc, #100]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800439c:	4819      	ldr	r0, [pc, #100]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800439e:	f003 fb87 	bl	8007ab0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80043a2:	4b17      	ldr	r3, [pc, #92]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043a4:	2203      	movs	r2, #3
 80043a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80043a8:	4b15      	ldr	r3, [pc, #84]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043aa:	2208      	movs	r2, #8
 80043ac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80043ae:	4b14      	ldr	r3, [pc, #80]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043b0:	2204      	movs	r2, #4
 80043b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80043b4:	4b12      	ldr	r3, [pc, #72]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80043ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043be:	4910      	ldr	r1, [pc, #64]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043c0:	4810      	ldr	r0, [pc, #64]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043c2:	f003 fb75 	bl	8007ab0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80043c6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80043ca:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ce:	2204      	movs	r2, #4
 80043d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043d4:	2208      	movs	r2, #8
 80043d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043da:	2201      	movs	r2, #1
 80043dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a07      	ldr	r2, [pc, #28]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043e2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80043e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e8:	4905      	ldr	r1, [pc, #20]	; (8004400 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043ea:	4806      	ldr	r0, [pc, #24]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043ec:	f003 fb60 	bl	8007ab0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	4804      	ldr	r0, [pc, #16]	; (8004404 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80043f4:	f003 fb87 	bl	8007b06 <HAL_SDRAM_ProgramRefreshRate>
}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	20000a98 	.word	0x20000a98
 8004404:	20000a48 	.word	0x20000a48

08004408 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b090      	sub	sp, #64	; 0x40
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80ec 	beq.w	80045f2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800441a:	2300      	movs	r3, #0
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
 800441e:	4b77      	ldr	r3, [pc, #476]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	4a76      	ldr	r2, [pc, #472]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6393      	str	r3, [r2, #56]	; 0x38
 800442a:	4b74      	ldr	r3, [pc, #464]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	4b70      	ldr	r3, [pc, #448]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 800443c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443e:	4a6f      	ldr	r2, [pc, #444]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004440:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004444:	6313      	str	r3, [r2, #48]	; 0x30
 8004446:	4b6d      	ldr	r3, [pc, #436]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800444e:	627b      	str	r3, [r7, #36]	; 0x24
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	623b      	str	r3, [r7, #32]
 8004456:	4b69      	ldr	r3, [pc, #420]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4a68      	ldr	r2, [pc, #416]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 800445c:	f043 0302 	orr.w	r3, r3, #2
 8004460:	6313      	str	r3, [r2, #48]	; 0x30
 8004462:	4b66      	ldr	r3, [pc, #408]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	4b62      	ldr	r3, [pc, #392]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	4a61      	ldr	r2, [pc, #388]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004478:	f043 0304 	orr.w	r3, r3, #4
 800447c:	6313      	str	r3, [r2, #48]	; 0x30
 800447e:	4b5f      	ldr	r3, [pc, #380]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800448a:	2300      	movs	r3, #0
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	4b5b      	ldr	r3, [pc, #364]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	4a5a      	ldr	r2, [pc, #360]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 8004494:	f043 0308 	orr.w	r3, r3, #8
 8004498:	6313      	str	r3, [r2, #48]	; 0x30
 800449a:	4b58      	ldr	r3, [pc, #352]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 800449c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	4b54      	ldr	r3, [pc, #336]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	4a53      	ldr	r2, [pc, #332]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 80044b0:	f043 0310 	orr.w	r3, r3, #16
 80044b4:	6313      	str	r3, [r2, #48]	; 0x30
 80044b6:	4b51      	ldr	r3, [pc, #324]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	4b4d      	ldr	r3, [pc, #308]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	4a4c      	ldr	r2, [pc, #304]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 80044cc:	f043 0320 	orr.w	r3, r3, #32
 80044d0:	6313      	str	r3, [r2, #48]	; 0x30
 80044d2:	4b4a      	ldr	r3, [pc, #296]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	4b46      	ldr	r3, [pc, #280]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a45      	ldr	r2, [pc, #276]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 80044e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b43      	ldr	r3, [pc, #268]	; (80045fc <BSP_SDRAM_MspInit+0x1f4>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80044fa:	2302      	movs	r3, #2
 80044fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80044fe:	2302      	movs	r3, #2
 8004500:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004502:	2300      	movs	r3, #0
 8004504:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004506:	230c      	movs	r3, #12
 8004508:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800450a:	2360      	movs	r3, #96	; 0x60
 800450c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800450e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004512:	4619      	mov	r1, r3
 8004514:	483a      	ldr	r0, [pc, #232]	; (8004600 <BSP_SDRAM_MspInit+0x1f8>)
 8004516:	f000 ff8b 	bl	8005430 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800451a:	2301      	movs	r3, #1
 800451c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800451e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004522:	4619      	mov	r1, r3
 8004524:	4837      	ldr	r0, [pc, #220]	; (8004604 <BSP_SDRAM_MspInit+0x1fc>)
 8004526:	f000 ff83 	bl	8005430 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800452a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004534:	4619      	mov	r1, r3
 8004536:	4834      	ldr	r0, [pc, #208]	; (8004608 <BSP_SDRAM_MspInit+0x200>)
 8004538:	f000 ff7a 	bl	8005430 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800453c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004546:	4619      	mov	r1, r3
 8004548:	4830      	ldr	r0, [pc, #192]	; (800460c <BSP_SDRAM_MspInit+0x204>)
 800454a:	f000 ff71 	bl	8005430 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800454e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004558:	4619      	mov	r1, r3
 800455a:	482d      	ldr	r0, [pc, #180]	; (8004610 <BSP_SDRAM_MspInit+0x208>)
 800455c:	f000 ff68 	bl	8005430 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004560:	f248 1333 	movw	r3, #33075	; 0x8133
 8004564:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800456a:	4619      	mov	r1, r3
 800456c:	4829      	ldr	r0, [pc, #164]	; (8004614 <BSP_SDRAM_MspInit+0x20c>)
 800456e:	f000 ff5f 	bl	8005430 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004572:	4b29      	ldr	r3, [pc, #164]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 8004574:	2200      	movs	r2, #0
 8004576:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004578:	4b27      	ldr	r3, [pc, #156]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800457e:	4b26      	ldr	r3, [pc, #152]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 8004580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004584:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004586:	4b24      	ldr	r3, [pc, #144]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 8004588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800458c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800458e:	4b22      	ldr	r3, [pc, #136]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 8004590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004594:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004596:	4b20      	ldr	r3, [pc, #128]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 8004598:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800459c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80045a4:	4b1c      	ldr	r3, [pc, #112]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80045aa:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80045ac:	4b1a      	ldr	r3, [pc, #104]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80045b2:	4b19      	ldr	r3, [pc, #100]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045b4:	2203      	movs	r2, #3
 80045b6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80045b8:	4b17      	ldr	r3, [pc, #92]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80045be:	4b16      	ldr	r3, [pc, #88]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80045c4:	4b14      	ldr	r3, [pc, #80]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <BSP_SDRAM_MspInit+0x214>)
 80045c8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a12      	ldr	r2, [pc, #72]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
 80045d0:	4a11      	ldr	r2, [pc, #68]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80045d6:	4810      	ldr	r0, [pc, #64]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045d8:	f000 fb84 	bl	8004ce4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80045dc:	480e      	ldr	r0, [pc, #56]	; (8004618 <BSP_SDRAM_MspInit+0x210>)
 80045de:	f000 fad3 	bl	8004b88 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80045e2:	2200      	movs	r2, #0
 80045e4:	210f      	movs	r1, #15
 80045e6:	2038      	movs	r0, #56	; 0x38
 80045e8:	f000 fa97 	bl	8004b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80045ec:	2038      	movs	r0, #56	; 0x38
 80045ee:	f000 fab0 	bl	8004b52 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80045f2:	bf00      	nop
 80045f4:	3740      	adds	r7, #64	; 0x40
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023800 	.word	0x40023800
 8004600:	40020400 	.word	0x40020400
 8004604:	40020800 	.word	0x40020800
 8004608:	40020c00 	.word	0x40020c00
 800460c:	40021000 	.word	0x40021000
 8004610:	40021400 	.word	0x40021400
 8004614:	40021800 	.word	0x40021800
 8004618:	20000aa8 	.word	0x20000aa8
 800461c:	40026410 	.word	0x40026410

08004620 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	460a      	mov	r2, r1
 800462a:	80fb      	strh	r3, [r7, #6]
 800462c:	4613      	mov	r3, r2
 800462e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004634:	4a13      	ldr	r2, [pc, #76]	; (8004684 <BSP_TS_Init+0x64>)
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800463a:	4a13      	ldr	r2, [pc, #76]	; (8004688 <BSP_TS_Init+0x68>)
 800463c:	88bb      	ldrh	r3, [r7, #4]
 800463e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <BSP_TS_Init+0x6c>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2082      	movs	r0, #130	; 0x82
 8004646:	4798      	blx	r3
 8004648:	4603      	mov	r3, r0
 800464a:	461a      	mov	r2, r3
 800464c:	f640 0311 	movw	r3, #2065	; 0x811
 8004650:	429a      	cmp	r2, r3
 8004652:	d104      	bne.n	800465e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <BSP_TS_Init+0x70>)
 8004656:	4a0d      	ldr	r2, [pc, #52]	; (800468c <BSP_TS_Init+0x6c>)
 8004658:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800465e:	7bfb      	ldrb	r3, [r7, #15]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d109      	bne.n	8004678 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004664:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <BSP_TS_Init+0x70>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2082      	movs	r0, #130	; 0x82
 800466c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800466e:	4b08      	ldr	r3, [pc, #32]	; (8004690 <BSP_TS_Init+0x70>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	2082      	movs	r0, #130	; 0x82
 8004676:	4798      	blx	r3
  }

  return ret;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000b0c 	.word	0x20000b0c
 8004688:	20000b0e 	.word	0x20000b0e
 800468c:	20000070 	.word	0x20000070
 8004690:	20000b08 	.word	0x20000b08

08004694 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004698:	4b03      	ldr	r3, [pc, #12]	; (80046a8 <BSP_TS_ITGetStatus+0x14>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	2082      	movs	r0, #130	; 0x82
 80046a0:	4798      	blx	r3
 80046a2:	4603      	mov	r3, r0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	20000b08 	.word	0x20000b08

080046ac <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80046b4:	4b4f      	ldr	r3, [pc, #316]	; (80047f4 <BSP_TS_GetState+0x148>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2082      	movs	r0, #130	; 0x82
 80046bc:	4798      	blx	r3
 80046be:	4603      	mov	r3, r0
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 808d 	beq.w	80047ea <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80046d0:	4b48      	ldr	r3, [pc, #288]	; (80047f4 <BSP_TS_GetState+0x148>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	f107 020c 	add.w	r2, r7, #12
 80046da:	f107 010e 	add.w	r1, r7, #14
 80046de:	2082      	movs	r0, #130	; 0x82
 80046e0:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80046e2:	89bb      	ldrh	r3, [r7, #12]
 80046e4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80046ec:	89bb      	ldrh	r3, [r7, #12]
 80046ee:	4a42      	ldr	r2, [pc, #264]	; (80047f8 <BSP_TS_GetState+0x14c>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	08db      	lsrs	r3, r3, #3
 80046f6:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80046f8:	8abb      	ldrh	r3, [r7, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	82bb      	strh	r3, [r7, #20]
 8004702:	e008      	b.n	8004716 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004704:	4b3d      	ldr	r3, [pc, #244]	; (80047fc <BSP_TS_GetState+0x150>)
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	8aba      	ldrh	r2, [r7, #20]
 800470a:	429a      	cmp	r2, r3
 800470c:	d903      	bls.n	8004716 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800470e:	4b3b      	ldr	r3, [pc, #236]	; (80047fc <BSP_TS_GetState+0x150>)
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	3b01      	subs	r3, #1
 8004714:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004716:	8abb      	ldrh	r3, [r7, #20]
 8004718:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800471a:	89fb      	ldrh	r3, [r7, #14]
 800471c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004720:	4293      	cmp	r3, r2
 8004722:	d806      	bhi.n	8004732 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004724:	89fb      	ldrh	r3, [r7, #14]
 8004726:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800472a:	330e      	adds	r3, #14
 800472c:	b29b      	uxth	r3, r3
 800472e:	81fb      	strh	r3, [r7, #14]
 8004730:	e005      	b.n	800473e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004732:	89fb      	ldrh	r3, [r7, #14]
 8004734:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8004738:	3308      	adds	r3, #8
 800473a:	b29b      	uxth	r3, r3
 800473c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800473e:	89fb      	ldrh	r3, [r7, #14]
 8004740:	4a2f      	ldr	r2, [pc, #188]	; (8004800 <BSP_TS_GetState+0x154>)
 8004742:	fba2 2303 	umull	r2, r3, r2, r3
 8004746:	08db      	lsrs	r3, r3, #3
 8004748:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800474a:	8afb      	ldrh	r3, [r7, #22]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d102      	bne.n	8004756 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004750:	2300      	movs	r3, #0
 8004752:	82fb      	strh	r3, [r7, #22]
 8004754:	e008      	b.n	8004768 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004756:	4b2b      	ldr	r3, [pc, #172]	; (8004804 <BSP_TS_GetState+0x158>)
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	8afa      	ldrh	r2, [r7, #22]
 800475c:	429a      	cmp	r2, r3
 800475e:	d903      	bls.n	8004768 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004760:	4b28      	ldr	r3, [pc, #160]	; (8004804 <BSP_TS_GetState+0x158>)
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	3b01      	subs	r3, #1
 8004766:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004768:	8afb      	ldrh	r3, [r7, #22]
 800476a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 800476c:	89fb      	ldrh	r3, [r7, #14]
 800476e:	461a      	mov	r2, r3
 8004770:	4b25      	ldr	r3, [pc, #148]	; (8004808 <BSP_TS_GetState+0x15c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d906      	bls.n	8004786 <BSP_TS_GetState+0xda>
 8004778:	89fa      	ldrh	r2, [r7, #14]
 800477a:	4b23      	ldr	r3, [pc, #140]	; (8004808 <BSP_TS_GetState+0x15c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	b29b      	uxth	r3, r3
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	b29b      	uxth	r3, r3
 8004784:	e005      	b.n	8004792 <BSP_TS_GetState+0xe6>
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <BSP_TS_GetState+0x15c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	b29a      	uxth	r2, r3
 800478c:	89fb      	ldrh	r3, [r7, #14]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	b29b      	uxth	r3, r3
 8004792:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004794:	89bb      	ldrh	r3, [r7, #12]
 8004796:	461a      	mov	r2, r3
 8004798:	4b1c      	ldr	r3, [pc, #112]	; (800480c <BSP_TS_GetState+0x160>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d906      	bls.n	80047ae <BSP_TS_GetState+0x102>
 80047a0:	89ba      	ldrh	r2, [r7, #12]
 80047a2:	4b1a      	ldr	r3, [pc, #104]	; (800480c <BSP_TS_GetState+0x160>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	b29b      	uxth	r3, r3
 80047ac:	e005      	b.n	80047ba <BSP_TS_GetState+0x10e>
 80047ae:	4b17      	ldr	r3, [pc, #92]	; (800480c <BSP_TS_GetState+0x160>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	89bb      	ldrh	r3, [r7, #12]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 80047bc:	8a7a      	ldrh	r2, [r7, #18]
 80047be:	8a3b      	ldrh	r3, [r7, #16]
 80047c0:	4413      	add	r3, r2
 80047c2:	2b05      	cmp	r3, #5
 80047c4:	dd07      	ble.n	80047d6 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80047c6:	89fb      	ldrh	r3, [r7, #14]
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <BSP_TS_GetState+0x15c>)
 80047cc:	601a      	str	r2, [r3, #0]
      _y = y; 
 80047ce:	89bb      	ldrh	r3, [r7, #12]
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b0e      	ldr	r3, [pc, #56]	; (800480c <BSP_TS_GetState+0x160>)
 80047d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <BSP_TS_GetState+0x15c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b29a      	uxth	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <BSP_TS_GetState+0x160>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	809a      	strh	r2, [r3, #4]
  }
}
 80047ea:	bf00      	nop
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20000b08 	.word	0x20000b08
 80047f8:	ba2e8ba3 	.word	0xba2e8ba3
 80047fc:	20000b0e 	.word	0x20000b0e
 8004800:	88888889 	.word	0x88888889
 8004804:	20000b0c 	.word	0x20000b0c
 8004808:	20000b10 	.word	0x20000b10
 800480c:	20000b14 	.word	0x20000b14

08004810 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8004814:	4b03      	ldr	r3, [pc, #12]	; (8004824 <BSP_TS_ITClear+0x14>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	2082      	movs	r0, #130	; 0x82
 800481c:	4798      	blx	r3
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000b08 	.word	0x20000b08

08004828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800482c:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <HAL_Init+0x40>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a0d      	ldr	r2, [pc, #52]	; (8004868 <HAL_Init+0x40>)
 8004832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_Init+0x40>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a0a      	ldr	r2, [pc, #40]	; (8004868 <HAL_Init+0x40>)
 800483e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004844:	4b08      	ldr	r3, [pc, #32]	; (8004868 <HAL_Init+0x40>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a07      	ldr	r2, [pc, #28]	; (8004868 <HAL_Init+0x40>)
 800484a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004850:	2003      	movs	r0, #3
 8004852:	f000 f957 	bl	8004b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004856:	200f      	movs	r0, #15
 8004858:	f000 f810 	bl	800487c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800485c:	f000 f806 	bl	800486c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023c00 	.word	0x40023c00

0800486c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
	...

0800487c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004884:	4b12      	ldr	r3, [pc, #72]	; (80048d0 <HAL_InitTick+0x54>)
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <HAL_InitTick+0x58>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	4619      	mov	r1, r3
 800488e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004892:	fbb3 f3f1 	udiv	r3, r3, r1
 8004896:	fbb2 f3f3 	udiv	r3, r2, r3
 800489a:	4618      	mov	r0, r3
 800489c:	f000 f967 	bl	8004b6e <HAL_SYSTICK_Config>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e00e      	b.n	80048c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b0f      	cmp	r3, #15
 80048ae:	d80a      	bhi.n	80048c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048b0:	2200      	movs	r2, #0
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	f000 f92f 	bl	8004b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048bc:	4a06      	ldr	r2, [pc, #24]	; (80048d8 <HAL_InitTick+0x5c>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	e000      	b.n	80048c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000034 	.word	0x20000034
 80048d4:	200000c8 	.word	0x200000c8
 80048d8:	200000c4 	.word	0x200000c4

080048dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048e0:	4b06      	ldr	r3, [pc, #24]	; (80048fc <HAL_IncTick+0x20>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	4b06      	ldr	r3, [pc, #24]	; (8004900 <HAL_IncTick+0x24>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4413      	add	r3, r2
 80048ec:	4a04      	ldr	r2, [pc, #16]	; (8004900 <HAL_IncTick+0x24>)
 80048ee:	6013      	str	r3, [r2, #0]
}
 80048f0:	bf00      	nop
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	200000c8 	.word	0x200000c8
 8004900:	20000b18 	.word	0x20000b18

08004904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return uwTick;
 8004908:	4b03      	ldr	r3, [pc, #12]	; (8004918 <HAL_GetTick+0x14>)
 800490a:	681b      	ldr	r3, [r3, #0]
}
 800490c:	4618      	mov	r0, r3
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000b18 	.word	0x20000b18

0800491c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004924:	f7ff ffee 	bl	8004904 <HAL_GetTick>
 8004928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d005      	beq.n	8004942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <HAL_Delay+0x44>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004942:	bf00      	nop
 8004944:	f7ff ffde 	bl	8004904 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	429a      	cmp	r2, r3
 8004952:	d8f7      	bhi.n	8004944 <HAL_Delay+0x28>
  {
  }
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	200000c8 	.word	0x200000c8

08004964 <__NVIC_SetPriorityGrouping>:
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004980:	4013      	ands	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800498c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004994:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004996:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <__NVIC_SetPriorityGrouping+0x44>)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	60d3      	str	r3, [r2, #12]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	e000ed00 	.word	0xe000ed00

080049ac <__NVIC_GetPriorityGrouping>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049b0:	4b04      	ldr	r3, [pc, #16]	; (80049c4 <__NVIC_GetPriorityGrouping+0x18>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	0a1b      	lsrs	r3, r3, #8
 80049b6:	f003 0307 	and.w	r3, r3, #7
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr
 80049c4:	e000ed00 	.word	0xe000ed00

080049c8 <__NVIC_EnableIRQ>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	db0b      	blt.n	80049f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	f003 021f 	and.w	r2, r3, #31
 80049e0:	4907      	ldr	r1, [pc, #28]	; (8004a00 <__NVIC_EnableIRQ+0x38>)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	2001      	movs	r0, #1
 80049ea:	fa00 f202 	lsl.w	r2, r0, r2
 80049ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	e000e100 	.word	0xe000e100

08004a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	db0a      	blt.n	8004a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	490c      	ldr	r1, [pc, #48]	; (8004a50 <__NVIC_SetPriority+0x4c>)
 8004a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a22:	0112      	lsls	r2, r2, #4
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	440b      	add	r3, r1
 8004a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a2c:	e00a      	b.n	8004a44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4908      	ldr	r1, [pc, #32]	; (8004a54 <__NVIC_SetPriority+0x50>)
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	f003 030f 	and.w	r3, r3, #15
 8004a3a:	3b04      	subs	r3, #4
 8004a3c:	0112      	lsls	r2, r2, #4
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	440b      	add	r3, r1
 8004a42:	761a      	strb	r2, [r3, #24]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000e100 	.word	0xe000e100
 8004a54:	e000ed00 	.word	0xe000ed00

08004a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b089      	sub	sp, #36	; 0x24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f1c3 0307 	rsb	r3, r3, #7
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	bf28      	it	cs
 8004a76:	2304      	movcs	r3, #4
 8004a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	2b06      	cmp	r3, #6
 8004a80:	d902      	bls.n	8004a88 <NVIC_EncodePriority+0x30>
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	3b03      	subs	r3, #3
 8004a86:	e000      	b.n	8004a8a <NVIC_EncodePriority+0x32>
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	fa02 f303 	lsl.w	r3, r2, r3
 8004a96:	43da      	mvns	r2, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	401a      	ands	r2, r3
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aaa:	43d9      	mvns	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ab0:	4313      	orrs	r3, r2
         );
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3724      	adds	r7, #36	; 0x24
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	3b01      	subs	r3, #1
 8004acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ad0:	d301      	bcc.n	8004ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e00f      	b.n	8004af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <SysTick_Config+0x40>)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3b01      	subs	r3, #1
 8004adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ade:	210f      	movs	r1, #15
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	f7ff ff8e 	bl	8004a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae8:	4b05      	ldr	r3, [pc, #20]	; (8004b00 <SysTick_Config+0x40>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aee:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <SysTick_Config+0x40>)
 8004af0:	2207      	movs	r2, #7
 8004af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	e000e010 	.word	0xe000e010

08004b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7ff ff29 	bl	8004964 <__NVIC_SetPriorityGrouping>
}
 8004b12:	bf00      	nop
 8004b14:	3708      	adds	r7, #8
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b086      	sub	sp, #24
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	4603      	mov	r3, r0
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
 8004b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b2c:	f7ff ff3e 	bl	80049ac <__NVIC_GetPriorityGrouping>
 8004b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68b9      	ldr	r1, [r7, #8]
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	f7ff ff8e 	bl	8004a58 <NVIC_EncodePriority>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b42:	4611      	mov	r1, r2
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff5d 	bl	8004a04 <__NVIC_SetPriority>
}
 8004b4a:	bf00      	nop
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b082      	sub	sp, #8
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff ff31 	bl	80049c8 <__NVIC_EnableIRQ>
}
 8004b66:	bf00      	nop
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b082      	sub	sp, #8
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff ffa2 	bl	8004ac0 <SysTick_Config>
 8004b7c:	4603      	mov	r3, r0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b94:	f7ff feb6 	bl	8004904 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e099      	b.n	8004cd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bc4:	e00f      	b.n	8004be6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bc6:	f7ff fe9d 	bl	8004904 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b05      	cmp	r3, #5
 8004bd2:	d908      	bls.n	8004be6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2203      	movs	r2, #3
 8004bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e078      	b.n	8004cd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1e8      	bne.n	8004bc6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4b38      	ldr	r3, [pc, #224]	; (8004ce0 <HAL_DMA_Init+0x158>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	2b04      	cmp	r3, #4
 8004c3e:	d107      	bne.n	8004c50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f023 0307 	bic.w	r3, r3, #7
 8004c66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d117      	bne.n	8004caa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d00e      	beq.n	8004caa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f8bd 	bl	8004e0c <DMA_CheckFifoParam>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d008      	beq.n	8004caa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2240      	movs	r2, #64	; 0x40
 8004c9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e016      	b.n	8004cd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f874 	bl	8004da0 <DMA_CalcBaseAndBitshift>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc0:	223f      	movs	r2, #63	; 0x3f
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	f010803f 	.word	0xf010803f

08004ce4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e050      	b.n	8004d98 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d101      	bne.n	8004d06 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004d02:	2302      	movs	r3, #2
 8004d04:	e048      	b.n	8004d98 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0201 	bic.w	r2, r2, #1
 8004d14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2200      	movs	r2, #0
 8004d24:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2221      	movs	r2, #33	; 0x21
 8004d44:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f82a 	bl	8004da0 <DMA_CalcBaseAndBitshift>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d78:	223f      	movs	r2, #63	; 0x3f
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	3b10      	subs	r3, #16
 8004db0:	4a14      	ldr	r2, [pc, #80]	; (8004e04 <DMA_CalcBaseAndBitshift+0x64>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	091b      	lsrs	r3, r3, #4
 8004db8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dba:	4a13      	ldr	r2, [pc, #76]	; (8004e08 <DMA_CalcBaseAndBitshift+0x68>)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d909      	bls.n	8004de2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	1d1a      	adds	r2, r3, #4
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	659a      	str	r2, [r3, #88]	; 0x58
 8004de0:	e007      	b.n	8004df2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	aaaaaaab 	.word	0xaaaaaaab
 8004e08:	08010a38 	.word	0x08010a38

08004e0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d11f      	bne.n	8004e66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d856      	bhi.n	8004eda <DMA_CheckFifoParam+0xce>
 8004e2c:	a201      	add	r2, pc, #4	; (adr r2, 8004e34 <DMA_CheckFifoParam+0x28>)
 8004e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e32:	bf00      	nop
 8004e34:	08004e45 	.word	0x08004e45
 8004e38:	08004e57 	.word	0x08004e57
 8004e3c:	08004e45 	.word	0x08004e45
 8004e40:	08004edb 	.word	0x08004edb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d046      	beq.n	8004ede <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e54:	e043      	b.n	8004ede <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e5e:	d140      	bne.n	8004ee2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e64:	e03d      	b.n	8004ee2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6e:	d121      	bne.n	8004eb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d837      	bhi.n	8004ee6 <DMA_CheckFifoParam+0xda>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <DMA_CheckFifoParam+0x70>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e93 	.word	0x08004e93
 8004e84:	08004e8d 	.word	0x08004e8d
 8004e88:	08004ea5 	.word	0x08004ea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e90:	e030      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d025      	beq.n	8004eea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ea2:	e022      	b.n	8004eea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004eac:	d11f      	bne.n	8004eee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004eb2:	e01c      	b.n	8004eee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d903      	bls.n	8004ec2 <DMA_CheckFifoParam+0xb6>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d003      	beq.n	8004ec8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ec0:	e018      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec6:	e015      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00e      	beq.n	8004ef2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed8:	e00b      	b.n	8004ef2 <DMA_CheckFifoParam+0xe6>
      break;
 8004eda:	bf00      	nop
 8004edc:	e00a      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ede:	bf00      	nop
 8004ee0:	e008      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ee2:	bf00      	nop
 8004ee4:	e006      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ee6:	bf00      	nop
 8004ee8:	e004      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8004eea:	bf00      	nop
 8004eec:	e002      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004eee:	bf00      	nop
 8004ef0:	e000      	b.n	8004ef4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ef2:	bf00      	nop
    }
  } 
  
  return status; 
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop

08004f04 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e03b      	b.n	8004f8e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d106      	bne.n	8004f30 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f833 	bl	8004f96 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685a      	ldr	r2, [r3, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f54:	f023 0107 	bic.w	r1, r3, #7
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689a      	ldr	r2, [r3, #8]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	68d1      	ldr	r1, [r2, #12]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6812      	ldr	r2, [r2, #0]
 8004f7a:	430b      	orrs	r3, r1
 8004f7c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr

08004faa <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b086      	sub	sp, #24
 8004fae:	af02      	add	r7, sp, #8
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_DMA2D_Start+0x1c>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e018      	b.n	8004ff8 <HAL_DMA2D_Start+0x4e>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 f989 	bl	80052f8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	d056      	beq.n	80050ca <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800501c:	f7ff fc72 	bl	8004904 <HAL_GetTick>
 8005020:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005022:	e04b      	b.n	80050bc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005032:	2b00      	cmp	r3, #0
 8005034:	d023      	beq.n	800507e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f003 0320 	and.w	r3, r3, #32
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	f043 0202 	orr.w	r2, r3, #2
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	f043 0201 	orr.w	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2221      	movs	r2, #33	; 0x21
 8005068:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2204      	movs	r2, #4
 800506e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e0a5      	b.n	80051ca <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005084:	d01a      	beq.n	80050bc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005086:	f7ff fc3d 	bl	8004904 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <HAL_DMA2D_PollForTransfer+0x9c>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10f      	bne.n	80050bc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	f043 0220 	orr.w	r2, r3, #32
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2203      	movs	r2, #3
 80050ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e086      	b.n	80051ca <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0ac      	beq.n	8005024 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	69db      	ldr	r3, [r3, #28]
 80050d0:	f003 0320 	and.w	r3, r3, #32
 80050d4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	f003 0320 	and.w	r3, r3, #32
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d061      	beq.n	80051b0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80050ec:	f7ff fc0a 	bl	8004904 <HAL_GetTick>
 80050f0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80050f2:	e056      	b.n	80051a2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02e      	beq.n	8005164 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005114:	f043 0204 	orr.w	r2, r3, #4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 0320 	and.w	r3, r3, #32
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	f043 0202 	orr.w	r2, r3, #2
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d005      	beq.n	8005148 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005140:	f043 0201 	orr.w	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2229      	movs	r2, #41	; 0x29
 800514e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2204      	movs	r2, #4
 8005154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e032      	b.n	80051ca <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	d01a      	beq.n	80051a2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800516c:	f7ff fbca 	bl	8004904 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d302      	bcc.n	8005182 <HAL_DMA2D_PollForTransfer+0x182>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d10f      	bne.n	80051a2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2203      	movs	r2, #3
 8005192:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e013      	b.n	80051ca <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0a1      	beq.n	80050f4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2212      	movs	r2, #18
 80051b6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_DMA2D_ConfigLayer+0x20>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e079      	b.n	80052e8 <HAL_DMA2D_ConfigLayer+0x114>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	3318      	adds	r3, #24
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	041b      	lsls	r3, r3, #16
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800521e:	4b35      	ldr	r3, [pc, #212]	; (80052f4 <HAL_DMA2D_ConfigLayer+0x120>)
 8005220:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b0a      	cmp	r3, #10
 8005228:	d003      	beq.n	8005232 <HAL_DMA2D_ConfigLayer+0x5e>
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b09      	cmp	r3, #9
 8005230:	d107      	bne.n	8005242 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	e005      	b.n	800524e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	061b      	lsls	r3, r3, #24
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d120      	bne.n	8005296 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	43db      	mvns	r3, r3
 800525e:	ea02 0103 	and.w	r1, r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	430a      	orrs	r2, r1
 800526a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b0a      	cmp	r3, #10
 800527c:	d003      	beq.n	8005286 <HAL_DMA2D_ConfigLayer+0xb2>
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	2b09      	cmp	r3, #9
 8005284:	d127      	bne.n	80052d6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005292:	629a      	str	r2, [r3, #40]	; 0x28
 8005294:	e01f      	b.n	80052d6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	43db      	mvns	r3, r3
 80052a0:	ea02 0103 	and.w	r1, r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	6812      	ldr	r2, [r2, #0]
 80052b6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2b0a      	cmp	r3, #10
 80052be:	d003      	beq.n	80052c8 <HAL_DMA2D_ConfigLayer+0xf4>
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	2b09      	cmp	r3, #9
 80052c6:	d106      	bne.n	80052d6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80052d4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr
 80052f4:	ff03000f 	.word	0xff03000f

080052f8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b08b      	sub	sp, #44	; 0x2c
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
 8005304:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	041a      	lsls	r2, r3, #16
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	431a      	orrs	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005330:	d174      	bne.n	800541c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005338:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005340:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005348:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	b2db      	uxtb	r3, r3
 800534e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d108      	bne.n	800536a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	431a      	orrs	r2, r3
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	4313      	orrs	r3, r2
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	4313      	orrs	r3, r2
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
 8005368:	e053      	b.n	8005412 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b01      	cmp	r3, #1
 8005370:	d106      	bne.n	8005380 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	4313      	orrs	r3, r2
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	4313      	orrs	r3, r2
 800537c:	627b      	str	r3, [r7, #36]	; 0x24
 800537e:	e048      	b.n	8005412 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	2b02      	cmp	r3, #2
 8005386:	d111      	bne.n	80053ac <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	0cdb      	lsrs	r3, r3, #19
 800538c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	0a9b      	lsrs	r3, r3, #10
 8005392:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	08db      	lsrs	r3, r3, #3
 8005398:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	015a      	lsls	r2, r3, #5
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	02db      	lsls	r3, r3, #11
 80053a2:	4313      	orrs	r3, r2
 80053a4:	697a      	ldr	r2, [r7, #20]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	627b      	str	r3, [r7, #36]	; 0x24
 80053aa:	e032      	b.n	8005412 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d117      	bne.n	80053e4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	0fdb      	lsrs	r3, r3, #31
 80053b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	0cdb      	lsrs	r3, r3, #19
 80053be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	0adb      	lsrs	r3, r3, #11
 80053c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	08db      	lsrs	r3, r3, #3
 80053ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	029b      	lsls	r3, r3, #10
 80053d4:	431a      	orrs	r2, r3
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	03db      	lsls	r3, r3, #15
 80053da:	4313      	orrs	r3, r2
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	e016      	b.n	8005412 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	0f1b      	lsrs	r3, r3, #28
 80053e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	0d1b      	lsrs	r3, r3, #20
 80053ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	0b1b      	lsrs	r3, r3, #12
 80053f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	011a      	lsls	r2, r3, #4
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	021b      	lsls	r3, r3, #8
 8005404:	431a      	orrs	r2, r3
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	031b      	lsls	r3, r3, #12
 800540a:	4313      	orrs	r3, r2
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	4313      	orrs	r3, r2
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800541a:	e003      	b.n	8005424 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	60da      	str	r2, [r3, #12]
}
 8005424:	bf00      	nop
 8005426:	372c      	adds	r7, #44	; 0x2c
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005430:	b480      	push	{r7}
 8005432:	b089      	sub	sp, #36	; 0x24
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005442:	2300      	movs	r3, #0
 8005444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	e177      	b.n	800573c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800544c:	2201      	movs	r2, #1
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4013      	ands	r3, r2
 800545e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	429a      	cmp	r2, r3
 8005466:	f040 8166 	bne.w	8005736 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d00b      	beq.n	800548a <HAL_GPIO_Init+0x5a>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d007      	beq.n	800548a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800547e:	2b11      	cmp	r3, #17
 8005480:	d003      	beq.n	800548a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b12      	cmp	r3, #18
 8005488:	d130      	bne.n	80054ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	005b      	lsls	r3, r3, #1
 8005494:	2203      	movs	r2, #3
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43db      	mvns	r3, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4013      	ands	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	005b      	lsls	r3, r3, #1
 80054aa:	fa02 f303 	lsl.w	r3, r2, r3
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054c0:	2201      	movs	r2, #1
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	fa02 f303 	lsl.w	r3, r2, r3
 80054c8:	43db      	mvns	r3, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4013      	ands	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f003 0201 	and.w	r2, r3, #1
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	2203      	movs	r2, #3
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	43db      	mvns	r3, r3
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	4013      	ands	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	689a      	ldr	r2, [r3, #8]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	4313      	orrs	r3, r2
 8005514:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69ba      	ldr	r2, [r7, #24]
 800551a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d003      	beq.n	800552c <HAL_GPIO_Init+0xfc>
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2b12      	cmp	r3, #18
 800552a:	d123      	bne.n	8005574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	08da      	lsrs	r2, r3, #3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3208      	adds	r2, #8
 8005534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	220f      	movs	r2, #15
 8005544:	fa02 f303 	lsl.w	r3, r2, r3
 8005548:	43db      	mvns	r3, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	4013      	ands	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	fa02 f303 	lsl.w	r3, r2, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	08da      	lsrs	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3208      	adds	r2, #8
 800556e:	69b9      	ldr	r1, [r7, #24]
 8005570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	2203      	movs	r2, #3
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	43db      	mvns	r3, r3
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	4013      	ands	r3, r2
 800558a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 0203 	and.w	r2, r3, #3
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	005b      	lsls	r3, r3, #1
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	4313      	orrs	r3, r2
 80055a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 80c0 	beq.w	8005736 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	4b66      	ldr	r3, [pc, #408]	; (8005754 <HAL_GPIO_Init+0x324>)
 80055bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055be:	4a65      	ldr	r2, [pc, #404]	; (8005754 <HAL_GPIO_Init+0x324>)
 80055c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055c4:	6453      	str	r3, [r2, #68]	; 0x44
 80055c6:	4b63      	ldr	r3, [pc, #396]	; (8005754 <HAL_GPIO_Init+0x324>)
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055d2:	4a61      	ldr	r2, [pc, #388]	; (8005758 <HAL_GPIO_Init+0x328>)
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	089b      	lsrs	r3, r3, #2
 80055d8:	3302      	adds	r3, #2
 80055da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	220f      	movs	r2, #15
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a58      	ldr	r2, [pc, #352]	; (800575c <HAL_GPIO_Init+0x32c>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d037      	beq.n	800566e <HAL_GPIO_Init+0x23e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a57      	ldr	r2, [pc, #348]	; (8005760 <HAL_GPIO_Init+0x330>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d031      	beq.n	800566a <HAL_GPIO_Init+0x23a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a56      	ldr	r2, [pc, #344]	; (8005764 <HAL_GPIO_Init+0x334>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d02b      	beq.n	8005666 <HAL_GPIO_Init+0x236>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a55      	ldr	r2, [pc, #340]	; (8005768 <HAL_GPIO_Init+0x338>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d025      	beq.n	8005662 <HAL_GPIO_Init+0x232>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a54      	ldr	r2, [pc, #336]	; (800576c <HAL_GPIO_Init+0x33c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01f      	beq.n	800565e <HAL_GPIO_Init+0x22e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a53      	ldr	r2, [pc, #332]	; (8005770 <HAL_GPIO_Init+0x340>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d019      	beq.n	800565a <HAL_GPIO_Init+0x22a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a52      	ldr	r2, [pc, #328]	; (8005774 <HAL_GPIO_Init+0x344>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_GPIO_Init+0x226>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a51      	ldr	r2, [pc, #324]	; (8005778 <HAL_GPIO_Init+0x348>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00d      	beq.n	8005652 <HAL_GPIO_Init+0x222>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a50      	ldr	r2, [pc, #320]	; (800577c <HAL_GPIO_Init+0x34c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <HAL_GPIO_Init+0x21e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a4f      	ldr	r2, [pc, #316]	; (8005780 <HAL_GPIO_Init+0x350>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d101      	bne.n	800564a <HAL_GPIO_Init+0x21a>
 8005646:	2309      	movs	r3, #9
 8005648:	e012      	b.n	8005670 <HAL_GPIO_Init+0x240>
 800564a:	230a      	movs	r3, #10
 800564c:	e010      	b.n	8005670 <HAL_GPIO_Init+0x240>
 800564e:	2308      	movs	r3, #8
 8005650:	e00e      	b.n	8005670 <HAL_GPIO_Init+0x240>
 8005652:	2307      	movs	r3, #7
 8005654:	e00c      	b.n	8005670 <HAL_GPIO_Init+0x240>
 8005656:	2306      	movs	r3, #6
 8005658:	e00a      	b.n	8005670 <HAL_GPIO_Init+0x240>
 800565a:	2305      	movs	r3, #5
 800565c:	e008      	b.n	8005670 <HAL_GPIO_Init+0x240>
 800565e:	2304      	movs	r3, #4
 8005660:	e006      	b.n	8005670 <HAL_GPIO_Init+0x240>
 8005662:	2303      	movs	r3, #3
 8005664:	e004      	b.n	8005670 <HAL_GPIO_Init+0x240>
 8005666:	2302      	movs	r3, #2
 8005668:	e002      	b.n	8005670 <HAL_GPIO_Init+0x240>
 800566a:	2301      	movs	r3, #1
 800566c:	e000      	b.n	8005670 <HAL_GPIO_Init+0x240>
 800566e:	2300      	movs	r3, #0
 8005670:	69fa      	ldr	r2, [r7, #28]
 8005672:	f002 0203 	and.w	r2, r2, #3
 8005676:	0092      	lsls	r2, r2, #2
 8005678:	4093      	lsls	r3, r2
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	4313      	orrs	r3, r2
 800567e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005680:	4935      	ldr	r1, [pc, #212]	; (8005758 <HAL_GPIO_Init+0x328>)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	089b      	lsrs	r3, r3, #2
 8005686:	3302      	adds	r3, #2
 8005688:	69ba      	ldr	r2, [r7, #24]
 800568a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800568e:	4b3d      	ldr	r3, [pc, #244]	; (8005784 <HAL_GPIO_Init+0x354>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056b2:	4a34      	ldr	r2, [pc, #208]	; (8005784 <HAL_GPIO_Init+0x354>)
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80056b8:	4b32      	ldr	r3, [pc, #200]	; (8005784 <HAL_GPIO_Init+0x354>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	4013      	ands	r3, r2
 80056c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d003      	beq.n	80056dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056dc:	4a29      	ldr	r2, [pc, #164]	; (8005784 <HAL_GPIO_Init+0x354>)
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056e2:	4b28      	ldr	r3, [pc, #160]	; (8005784 <HAL_GPIO_Init+0x354>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005706:	4a1f      	ldr	r2, [pc, #124]	; (8005784 <HAL_GPIO_Init+0x354>)
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800570c:	4b1d      	ldr	r3, [pc, #116]	; (8005784 <HAL_GPIO_Init+0x354>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	43db      	mvns	r3, r3
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	4013      	ands	r3, r2
 800571a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4313      	orrs	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005730:	4a14      	ldr	r2, [pc, #80]	; (8005784 <HAL_GPIO_Init+0x354>)
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	3301      	adds	r3, #1
 800573a:	61fb      	str	r3, [r7, #28]
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b0f      	cmp	r3, #15
 8005740:	f67f ae84 	bls.w	800544c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005744:	bf00      	nop
 8005746:	bf00      	nop
 8005748:	3724      	adds	r7, #36	; 0x24
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40023800 	.word	0x40023800
 8005758:	40013800 	.word	0x40013800
 800575c:	40020000 	.word	0x40020000
 8005760:	40020400 	.word	0x40020400
 8005764:	40020800 	.word	0x40020800
 8005768:	40020c00 	.word	0x40020c00
 800576c:	40021000 	.word	0x40021000
 8005770:	40021400 	.word	0x40021400
 8005774:	40021800 	.word	0x40021800
 8005778:	40021c00 	.word	0x40021c00
 800577c:	40022000 	.word	0x40022000
 8005780:	40022400 	.word	0x40022400
 8005784:	40013c00 	.word	0x40013c00

08005788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	807b      	strh	r3, [r7, #2]
 8005794:	4613      	mov	r3, r2
 8005796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005798:	787b      	ldrb	r3, [r7, #1]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800579e:	887a      	ldrh	r2, [r7, #2]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057a4:	e003      	b.n	80057ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057a6:	887b      	ldrh	r3, [r7, #2]
 80057a8:	041a      	lsls	r2, r3, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	619a      	str	r2, [r3, #24]
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	460b      	mov	r3, r1
 80057c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695a      	ldr	r2, [r3, #20]
 80057ca:	887b      	ldrh	r3, [r7, #2]
 80057cc:	401a      	ands	r2, r3
 80057ce:	887b      	ldrh	r3, [r7, #2]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d104      	bne.n	80057de <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80057d4:	887b      	ldrh	r3, [r7, #2]
 80057d6:	041a      	lsls	r2, r3, #16
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80057dc:	e002      	b.n	80057e4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80057de:	887a      	ldrh	r2, [r7, #2]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	619a      	str	r2, [r3, #24]
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e12b      	b.n	8005a5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d106      	bne.n	800581c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 f95d 	bl	8005ad6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2224      	movs	r2, #36	; 0x24
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 0201 	bic.w	r2, r2, #1
 8005832:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005842:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005852:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005854:	f001 ff1a 	bl	800768c <HAL_RCC_GetPCLK1Freq>
 8005858:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	4a81      	ldr	r2, [pc, #516]	; (8005a64 <HAL_I2C_Init+0x274>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d807      	bhi.n	8005874 <HAL_I2C_Init+0x84>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4a80      	ldr	r2, [pc, #512]	; (8005a68 <HAL_I2C_Init+0x278>)
 8005868:	4293      	cmp	r3, r2
 800586a:	bf94      	ite	ls
 800586c:	2301      	movls	r3, #1
 800586e:	2300      	movhi	r3, #0
 8005870:	b2db      	uxtb	r3, r3
 8005872:	e006      	b.n	8005882 <HAL_I2C_Init+0x92>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4a7d      	ldr	r2, [pc, #500]	; (8005a6c <HAL_I2C_Init+0x27c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	bf94      	ite	ls
 800587c:	2301      	movls	r3, #1
 800587e:	2300      	movhi	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e0e7      	b.n	8005a5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4a78      	ldr	r2, [pc, #480]	; (8005a70 <HAL_I2C_Init+0x280>)
 800588e:	fba2 2303 	umull	r2, r3, r2, r3
 8005892:	0c9b      	lsrs	r3, r3, #18
 8005894:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	4a6a      	ldr	r2, [pc, #424]	; (8005a64 <HAL_I2C_Init+0x274>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d802      	bhi.n	80058c4 <HAL_I2C_Init+0xd4>
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	3301      	adds	r3, #1
 80058c2:	e009      	b.n	80058d8 <HAL_I2C_Init+0xe8>
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80058ca:	fb02 f303 	mul.w	r3, r2, r3
 80058ce:	4a69      	ldr	r2, [pc, #420]	; (8005a74 <HAL_I2C_Init+0x284>)
 80058d0:	fba2 2303 	umull	r2, r3, r2, r3
 80058d4:	099b      	lsrs	r3, r3, #6
 80058d6:	3301      	adds	r3, #1
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6812      	ldr	r2, [r2, #0]
 80058dc:	430b      	orrs	r3, r1
 80058de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	69db      	ldr	r3, [r3, #28]
 80058e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	495c      	ldr	r1, [pc, #368]	; (8005a64 <HAL_I2C_Init+0x274>)
 80058f4:	428b      	cmp	r3, r1
 80058f6:	d819      	bhi.n	800592c <HAL_I2C_Init+0x13c>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	1e59      	subs	r1, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	fbb1 f3f3 	udiv	r3, r1, r3
 8005906:	1c59      	adds	r1, r3, #1
 8005908:	f640 73fc 	movw	r3, #4092	; 0xffc
 800590c:	400b      	ands	r3, r1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_I2C_Init+0x138>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1e59      	subs	r1, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005920:	3301      	adds	r3, #1
 8005922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005926:	e051      	b.n	80059cc <HAL_I2C_Init+0x1dc>
 8005928:	2304      	movs	r3, #4
 800592a:	e04f      	b.n	80059cc <HAL_I2C_Init+0x1dc>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d111      	bne.n	8005958 <HAL_I2C_Init+0x168>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	1e58      	subs	r0, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6859      	ldr	r1, [r3, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	005b      	lsls	r3, r3, #1
 8005940:	440b      	add	r3, r1
 8005942:	fbb0 f3f3 	udiv	r3, r0, r3
 8005946:	3301      	adds	r3, #1
 8005948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800594c:	2b00      	cmp	r3, #0
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	e012      	b.n	800597e <HAL_I2C_Init+0x18e>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	1e58      	subs	r0, r3, #1
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6859      	ldr	r1, [r3, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	0099      	lsls	r1, r3, #2
 8005968:	440b      	add	r3, r1
 800596a:	fbb0 f3f3 	udiv	r3, r0, r3
 800596e:	3301      	adds	r3, #1
 8005970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005974:	2b00      	cmp	r3, #0
 8005976:	bf0c      	ite	eq
 8005978:	2301      	moveq	r3, #1
 800597a:	2300      	movne	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_I2C_Init+0x196>
 8005982:	2301      	movs	r3, #1
 8005984:	e022      	b.n	80059cc <HAL_I2C_Init+0x1dc>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10e      	bne.n	80059ac <HAL_I2C_Init+0x1bc>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1e58      	subs	r0, r3, #1
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6859      	ldr	r1, [r3, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	440b      	add	r3, r1
 800599c:	fbb0 f3f3 	udiv	r3, r0, r3
 80059a0:	3301      	adds	r3, #1
 80059a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059aa:	e00f      	b.n	80059cc <HAL_I2C_Init+0x1dc>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1e58      	subs	r0, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6859      	ldr	r1, [r3, #4]
 80059b4:	460b      	mov	r3, r1
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	0099      	lsls	r1, r3, #2
 80059bc:	440b      	add	r3, r1
 80059be:	fbb0 f3f3 	udiv	r3, r0, r3
 80059c2:	3301      	adds	r3, #1
 80059c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80059cc:	6879      	ldr	r1, [r7, #4]
 80059ce:	6809      	ldr	r1, [r1, #0]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69da      	ldr	r2, [r3, #28]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6911      	ldr	r1, [r2, #16]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68d2      	ldr	r2, [r2, #12]
 8005a06:	4311      	orrs	r1, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695a      	ldr	r2, [r3, #20]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	430a      	orrs	r2, r1
 8005a2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	000186a0 	.word	0x000186a0
 8005a68:	001e847f 	.word	0x001e847f
 8005a6c:	003d08ff 	.word	0x003d08ff
 8005a70:	431bde83 	.word	0x431bde83
 8005a74:	10624dd3 	.word	0x10624dd3

08005a78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e021      	b.n	8005ace <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2224      	movs	r2, #36	; 0x24
 8005a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f821 	bl	8005aea <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	4608      	mov	r0, r1
 8005b0a:	4611      	mov	r1, r2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	817b      	strh	r3, [r7, #10]
 8005b12:	460b      	mov	r3, r1
 8005b14:	813b      	strh	r3, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b1a:	f7fe fef3 	bl	8004904 <HAL_GetTick>
 8005b1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b20      	cmp	r3, #32
 8005b2a:	f040 80d9 	bne.w	8005ce0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	2319      	movs	r3, #25
 8005b34:	2201      	movs	r2, #1
 8005b36:	496d      	ldr	r1, [pc, #436]	; (8005cec <HAL_I2C_Mem_Write+0x1ec>)
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fc89 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b44:	2302      	movs	r3, #2
 8005b46:	e0cc      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_I2C_Mem_Write+0x56>
 8005b52:	2302      	movs	r3, #2
 8005b54:	e0c5      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d007      	beq.n	8005b7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2221      	movs	r2, #33	; 0x21
 8005b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2240      	movs	r2, #64	; 0x40
 8005b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	4a4d      	ldr	r2, [pc, #308]	; (8005cf0 <HAL_I2C_Mem_Write+0x1f0>)
 8005bbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bbe:	88f8      	ldrh	r0, [r7, #6]
 8005bc0:	893a      	ldrh	r2, [r7, #8]
 8005bc2:	8979      	ldrh	r1, [r7, #10]
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	4603      	mov	r3, r0
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fac4 	bl	800615c <I2C_RequestMemoryWrite>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d052      	beq.n	8005c80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e081      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fd0a 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00d      	beq.n	8005c0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b04      	cmp	r3, #4
 8005bf4:	d107      	bne.n	8005c06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e06b      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	781a      	ldrb	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1a:	1c5a      	adds	r2, r3, #1
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	3b01      	subs	r3, #1
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d11b      	bne.n	8005c80 <HAL_I2C_Mem_Write+0x180>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d017      	beq.n	8005c80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1aa      	bne.n	8005bde <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fcf6 	bl	800667e <I2C_WaitOnBTFFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d00d      	beq.n	8005cb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d107      	bne.n	8005cb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e016      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	e000      	b.n	8005ce2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005ce0:	2302      	movs	r3, #2
  }
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3718      	adds	r7, #24
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	00100002 	.word	0x00100002
 8005cf0:	ffff0000 	.word	0xffff0000

08005cf4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08c      	sub	sp, #48	; 0x30
 8005cf8:	af02      	add	r7, sp, #8
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	4611      	mov	r1, r2
 8005d00:	461a      	mov	r2, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	817b      	strh	r3, [r7, #10]
 8005d06:	460b      	mov	r3, r1
 8005d08:	813b      	strh	r3, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d0e:	f7fe fdf9 	bl	8004904 <HAL_GetTick>
 8005d12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	f040 8208 	bne.w	8006132 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	2319      	movs	r3, #25
 8005d28:	2201      	movs	r2, #1
 8005d2a:	497b      	ldr	r1, [pc, #492]	; (8005f18 <HAL_I2C_Mem_Read+0x224>)
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fb8f 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e1fb      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_I2C_Mem_Read+0x56>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e1f4      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d007      	beq.n	8005d70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f042 0201 	orr.w	r2, r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2222      	movs	r2, #34	; 0x22
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2240      	movs	r2, #64	; 0x40
 8005d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005da0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4a5b      	ldr	r2, [pc, #364]	; (8005f1c <HAL_I2C_Mem_Read+0x228>)
 8005db0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005db2:	88f8      	ldrh	r0, [r7, #6]
 8005db4:	893a      	ldrh	r2, [r7, #8]
 8005db6:	8979      	ldrh	r1, [r7, #10]
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fa5e 	bl	8006284 <I2C_RequestMemoryRead>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e1b0      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d113      	bne.n	8005e02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dda:	2300      	movs	r3, #0
 8005ddc:	623b      	str	r3, [r7, #32]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	623b      	str	r3, [r7, #32]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	623b      	str	r3, [r7, #32]
 8005dee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	e184      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d11b      	bne.n	8005e42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	61fb      	str	r3, [r7, #28]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699b      	ldr	r3, [r3, #24]
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	e164      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d11b      	bne.n	8005e82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695b      	ldr	r3, [r3, #20]
 8005e74:	61bb      	str	r3, [r7, #24]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	61bb      	str	r3, [r7, #24]
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	e144      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e82:	2300      	movs	r3, #0
 8005e84:	617b      	str	r3, [r7, #20]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	617b      	str	r3, [r7, #20]
 8005e96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e98:	e138      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	f200 80f1 	bhi.w	8006086 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d123      	bne.n	8005ef4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fc25 	bl	8006700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e139      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005edc:	3b01      	subs	r3, #1
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ef2:	e10b      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d14e      	bne.n	8005f9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	2200      	movs	r2, #0
 8005f04:	4906      	ldr	r1, [pc, #24]	; (8005f20 <HAL_I2C_Mem_Read+0x22c>)
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 faa2 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d008      	beq.n	8005f24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e10e      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
 8005f16:	bf00      	nop
 8005f18:	00100002 	.word	0x00100002
 8005f1c:	ffff0000 	.word	0xffff0000
 8005f20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	691a      	ldr	r2, [r3, #16]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	b2d2      	uxtb	r2, r2
 8005f72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	1c5a      	adds	r2, r3, #1
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f98:	e0b8      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4966      	ldr	r1, [pc, #408]	; (800613c <HAL_I2C_Mem_Read+0x448>)
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fa53 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d001      	beq.n	8005fb4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0bf      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	494f      	ldr	r1, [pc, #316]	; (800613c <HAL_I2C_Mem_Read+0x448>)
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 fa25 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e091      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800601e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	691a      	ldr	r2, [r3, #16]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	b2d2      	uxtb	r2, r2
 800602c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800603c:	3b01      	subs	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	691a      	ldr	r2, [r3, #16]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006064:	1c5a      	adds	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800606e:	3b01      	subs	r3, #1
 8006070:	b29a      	uxth	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006084:	e042      	b.n	800610c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006088:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f000 fb38 	bl	8006700 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e04c      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	b2d2      	uxtb	r2, r2
 80060a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d118      	bne.n	800610c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006110:	2b00      	cmp	r3, #0
 8006112:	f47f aec2 	bne.w	8005e9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	e000      	b.n	8006134 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006132:	2302      	movs	r3, #2
  }
}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	; 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	00010004 	.word	0x00010004

08006140 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614e:	b2db      	uxtb	r3, r3
}
 8006150:	4618      	mov	r0, r3
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b088      	sub	sp, #32
 8006160:	af02      	add	r7, sp, #8
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	4608      	mov	r0, r1
 8006166:	4611      	mov	r1, r2
 8006168:	461a      	mov	r2, r3
 800616a:	4603      	mov	r3, r0
 800616c:	817b      	strh	r3, [r7, #10]
 800616e:	460b      	mov	r3, r1
 8006170:	813b      	strh	r3, [r7, #8]
 8006172:	4613      	mov	r3, r2
 8006174:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006184:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	2200      	movs	r2, #0
 800618e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 f95c 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00c      	beq.n	80061b8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	e05f      	b.n	8006278 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061b8:	897b      	ldrh	r3, [r7, #10]
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	461a      	mov	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	6a3a      	ldr	r2, [r7, #32]
 80061cc:	492c      	ldr	r1, [pc, #176]	; (8006280 <I2C_RequestMemoryWrite+0x124>)
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f995 	bl	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e04c      	b.n	8006278 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061de:	2300      	movs	r3, #0
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	695b      	ldr	r3, [r3, #20]
 80061e8:	617b      	str	r3, [r7, #20]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061f6:	6a39      	ldr	r1, [r7, #32]
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f9ff 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00d      	beq.n	8006220 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	2b04      	cmp	r3, #4
 800620a:	d107      	bne.n	800621c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800621a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e02b      	b.n	8006278 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006220:	88fb      	ldrh	r3, [r7, #6]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d105      	bne.n	8006232 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006226:	893b      	ldrh	r3, [r7, #8]
 8006228:	b2da      	uxtb	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	611a      	str	r2, [r3, #16]
 8006230:	e021      	b.n	8006276 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006232:	893b      	ldrh	r3, [r7, #8]
 8006234:	0a1b      	lsrs	r3, r3, #8
 8006236:	b29b      	uxth	r3, r3
 8006238:	b2da      	uxtb	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006242:	6a39      	ldr	r1, [r7, #32]
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f000 f9d9 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00d      	beq.n	800626c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	2b04      	cmp	r3, #4
 8006256:	d107      	bne.n	8006268 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006266:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e005      	b.n	8006278 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800626c:	893b      	ldrh	r3, [r7, #8]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	00010002 	.word	0x00010002

08006284 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af02      	add	r7, sp, #8
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	4608      	mov	r0, r1
 800628e:	4611      	mov	r1, r2
 8006290:	461a      	mov	r2, r3
 8006292:	4603      	mov	r3, r0
 8006294:	817b      	strh	r3, [r7, #10]
 8006296:	460b      	mov	r3, r1
 8006298:	813b      	strh	r3, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f8c0 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00c      	beq.n	80062f0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e0a9      	b.n	8006444 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062f0:	897b      	ldrh	r3, [r7, #10]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	6a3a      	ldr	r2, [r7, #32]
 8006304:	4951      	ldr	r1, [pc, #324]	; (800644c <I2C_RequestMemoryRead+0x1c8>)
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f8f9 	bl	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e096      	b.n	8006444 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	617b      	str	r3, [r7, #20]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	617b      	str	r3, [r7, #20]
 800632a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800632c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632e:	6a39      	ldr	r1, [r7, #32]
 8006330:	68f8      	ldr	r0, [r7, #12]
 8006332:	f000 f963 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d00d      	beq.n	8006358 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	2b04      	cmp	r3, #4
 8006342:	d107      	bne.n	8006354 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006352:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e075      	b.n	8006444 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006358:	88fb      	ldrh	r3, [r7, #6]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d105      	bne.n	800636a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800635e:	893b      	ldrh	r3, [r7, #8]
 8006360:	b2da      	uxtb	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	611a      	str	r2, [r3, #16]
 8006368:	e021      	b.n	80063ae <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800636a:	893b      	ldrh	r3, [r7, #8]
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	b29b      	uxth	r3, r3
 8006370:	b2da      	uxtb	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800637a:	6a39      	ldr	r1, [r7, #32]
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 f93d 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00d      	beq.n	80063a4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638c:	2b04      	cmp	r3, #4
 800638e:	d107      	bne.n	80063a0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e04f      	b.n	8006444 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063a4:	893b      	ldrh	r3, [r7, #8]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b0:	6a39      	ldr	r1, [r7, #32]
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 f922 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00d      	beq.n	80063da <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d107      	bne.n	80063d6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e034      	b.n	8006444 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	9300      	str	r3, [sp, #0]
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 f82a 	bl	8006450 <I2C_WaitOnFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00c      	beq.n	800641c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006416:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e013      	b.n	8006444 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800641c:	897b      	ldrh	r3, [r7, #10]
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	b2da      	uxtb	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	6a3a      	ldr	r2, [r7, #32]
 8006430:	4906      	ldr	r1, [pc, #24]	; (800644c <I2C_RequestMemoryRead+0x1c8>)
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	f000 f863 	bl	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	00010002 	.word	0x00010002

08006450 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006460:	e025      	b.n	80064ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d021      	beq.n	80064ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646a:	f7fe fa4b 	bl	8004904 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d302      	bcc.n	8006480 <I2C_WaitOnFlagUntilTimeout+0x30>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d116      	bne.n	80064ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	f043 0220 	orr.w	r2, r3, #32
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e023      	b.n	80064f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d10d      	bne.n	80064d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	43da      	mvns	r2, r3
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4013      	ands	r3, r2
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bf0c      	ite	eq
 80064ca:	2301      	moveq	r3, #1
 80064cc:	2300      	movne	r3, #0
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	e00c      	b.n	80064ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	43da      	mvns	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4013      	ands	r3, r2
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	bf0c      	ite	eq
 80064e6:	2301      	moveq	r3, #1
 80064e8:	2300      	movne	r3, #0
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	461a      	mov	r2, r3
 80064ee:	79fb      	ldrb	r3, [r7, #7]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d0b6      	beq.n	8006462 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800650c:	e051      	b.n	80065b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651c:	d123      	bne.n	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800652c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006536:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2220      	movs	r2, #32
 8006542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006552:	f043 0204 	orr.w	r2, r3, #4
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e046      	b.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656c:	d021      	beq.n	80065b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656e:	f7fe f9c9 	bl	8004904 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	429a      	cmp	r2, r3
 800657c:	d302      	bcc.n	8006584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d116      	bne.n	80065b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f043 0220 	orr.w	r2, r3, #32
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e020      	b.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	0c1b      	lsrs	r3, r3, #16
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d10c      	bne.n	80065d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	43da      	mvns	r2, r3
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	4013      	ands	r3, r2
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	bf14      	ite	ne
 80065ce:	2301      	movne	r3, #1
 80065d0:	2300      	moveq	r3, #0
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	e00b      	b.n	80065ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	43da      	mvns	r2, r3
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4013      	ands	r3, r2
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	bf14      	ite	ne
 80065e8:	2301      	movne	r3, #1
 80065ea:	2300      	moveq	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d18d      	bne.n	800650e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006608:	e02d      	b.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f8ce 	bl	80067ac <I2C_IsAcknowledgeFailed>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e02d      	b.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d021      	beq.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006622:	f7fe f96f 	bl	8004904 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	429a      	cmp	r2, r3
 8006630:	d302      	bcc.n	8006638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d116      	bne.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2220      	movs	r2, #32
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f043 0220 	orr.w	r2, r3, #32
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e007      	b.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006670:	2b80      	cmp	r3, #128	; 0x80
 8006672:	d1ca      	bne.n	800660a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	60f8      	str	r0, [r7, #12]
 8006686:	60b9      	str	r1, [r7, #8]
 8006688:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800668a:	e02d      	b.n	80066e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f000 f88d 	bl	80067ac <I2C_IsAcknowledgeFailed>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e02d      	b.n	80066f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d021      	beq.n	80066e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066a4:	f7fe f92e 	bl	8004904 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d302      	bcc.n	80066ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d116      	bne.n	80066e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	f043 0220 	orr.w	r2, r3, #32
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e007      	b.n	80066f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d1ca      	bne.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800670c:	e042      	b.n	8006794 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	f003 0310 	and.w	r3, r3, #16
 8006718:	2b10      	cmp	r3, #16
 800671a:	d119      	bne.n	8006750 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0210 	mvn.w	r2, #16
 8006724:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2220      	movs	r2, #32
 8006730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e029      	b.n	80067a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006750:	f7fe f8d8 	bl	8004904 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	429a      	cmp	r2, r3
 800675e:	d302      	bcc.n	8006766 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d116      	bne.n	8006794 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	f043 0220 	orr.w	r2, r3, #32
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e007      	b.n	80067a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b40      	cmp	r3, #64	; 0x40
 80067a0:	d1b5      	bne.n	800670e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c2:	d11b      	bne.n	80067fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	f043 0204 	orr.w	r2, r3, #4
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e000      	b.n	80067fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
	...

0800680c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e0bf      	b.n	800699e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f8ba 	bl	80069ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	699a      	ldr	r2, [r3, #24]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800684e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6999      	ldr	r1, [r3, #24]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685a      	ldr	r2, [r3, #4]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006864:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	430a      	orrs	r2, r1
 8006872:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6899      	ldr	r1, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4b4a      	ldr	r3, [pc, #296]	; (80069a8 <HAL_LTDC_Init+0x19c>)
 8006880:	400b      	ands	r3, r1
 8006882:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	041b      	lsls	r3, r3, #16
 800688a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6899      	ldr	r1, [r3, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	699a      	ldr	r2, [r3, #24]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68d9      	ldr	r1, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	4b3e      	ldr	r3, [pc, #248]	; (80069a8 <HAL_LTDC_Init+0x19c>)
 80068ae:	400b      	ands	r3, r1
 80068b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	041b      	lsls	r3, r3, #16
 80068b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68d9      	ldr	r1, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a1a      	ldr	r2, [r3, #32]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6919      	ldr	r1, [r3, #16]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4b33      	ldr	r3, [pc, #204]	; (80069a8 <HAL_LTDC_Init+0x19c>)
 80068dc:	400b      	ands	r3, r1
 80068de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e4:	041b      	lsls	r3, r3, #16
 80068e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6919      	ldr	r1, [r3, #16]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6959      	ldr	r1, [r3, #20]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	4b27      	ldr	r3, [pc, #156]	; (80069a8 <HAL_LTDC_Init+0x19c>)
 800690a:	400b      	ands	r3, r1
 800690c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006912:	041b      	lsls	r3, r3, #16
 8006914:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6959      	ldr	r1, [r3, #20]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	431a      	orrs	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800693c:	041b      	lsls	r3, r3, #16
 800693e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800694e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006962:	431a      	orrs	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f042 0206 	orr.w	r2, r2, #6
 800697a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699a      	ldr	r2, [r3, #24]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f042 0201 	orr.w	r2, r2, #1
 800698a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	f000f800 	.word	0xf000f800

080069ac <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80069c0:	b5b0      	push	{r4, r5, r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_LTDC_ConfigLayer+0x1a>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e02c      	b.n	8006a34 <HAL_LTDC_ConfigLayer+0x74>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2134      	movs	r1, #52	; 0x34
 80069f0:	fb01 f303 	mul.w	r3, r1, r3
 80069f4:	4413      	add	r3, r2
 80069f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4614      	mov	r4, r2
 80069fe:	461d      	mov	r5, r3
 8006a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f83b 	bl	8006a90 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bdb0      	pop	{r4, r5, r7, pc}

08006a3c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_LTDC_EnableDither+0x16>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e016      	b.n	8006a80 <HAL_LTDC_EnableDither+0x44>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006a62:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <HAL_LTDC_EnableDither+0x50>)
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <HAL_LTDC_EnableDither+0x50>)
 8006a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a6c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	40016800 	.word	0x40016800

08006a90 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b089      	sub	sp, #36	; 0x24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	685a      	ldr	r2, [r3, #4]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	0c1b      	lsrs	r3, r3, #16
 8006aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006aac:	4413      	add	r3, r2
 8006aae:	041b      	lsls	r3, r3, #16
 8006ab0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	01db      	lsls	r3, r3, #7
 8006abc:	4413      	add	r3, r2
 8006abe:	3384      	adds	r3, #132	; 0x84
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	4611      	mov	r1, r2
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	01d2      	lsls	r2, r2, #7
 8006acc:	440a      	add	r2, r1
 8006ace:	3284      	adds	r2, #132	; 0x84
 8006ad0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006ad4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	0c1b      	lsrs	r3, r3, #16
 8006ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ae6:	4413      	add	r3, r2
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4619      	mov	r1, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	01db      	lsls	r3, r3, #7
 8006af4:	440b      	add	r3, r1
 8006af6:	3384      	adds	r3, #132	; 0x84
 8006af8:	4619      	mov	r1, r3
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	68da      	ldr	r2, [r3, #12]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b0e:	4413      	add	r3, r2
 8006b10:	041b      	lsls	r3, r3, #16
 8006b12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	01db      	lsls	r3, r3, #7
 8006b1e:	4413      	add	r3, r2
 8006b20:	3384      	adds	r3, #132	; 0x84
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	6812      	ldr	r2, [r2, #0]
 8006b28:	4611      	mov	r1, r2
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	01d2      	lsls	r2, r2, #7
 8006b2e:	440a      	add	r2, r1
 8006b30:	3284      	adds	r2, #132	; 0x84
 8006b32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006b36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b46:	4413      	add	r3, r2
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	01db      	lsls	r3, r3, #7
 8006b54:	440b      	add	r3, r1
 8006b56:	3384      	adds	r3, #132	; 0x84
 8006b58:	4619      	mov	r1, r3
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	461a      	mov	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	01db      	lsls	r3, r3, #7
 8006b6a:	4413      	add	r3, r2
 8006b6c:	3384      	adds	r3, #132	; 0x84
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	4611      	mov	r1, r2
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	01d2      	lsls	r2, r2, #7
 8006b7a:	440a      	add	r2, r1
 8006b7c:	3284      	adds	r2, #132	; 0x84
 8006b7e:	f023 0307 	bic.w	r3, r3, #7
 8006b82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	01db      	lsls	r3, r3, #7
 8006b8e:	4413      	add	r3, r2
 8006b90:	3384      	adds	r3, #132	; 0x84
 8006b92:	461a      	mov	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006baa:	041b      	lsls	r3, r3, #16
 8006bac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	061b      	lsls	r3, r3, #24
 8006bb4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	01db      	lsls	r3, r3, #7
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3384      	adds	r3, #132	; 0x84
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	01db      	lsls	r3, r3, #7
 8006bd0:	4413      	add	r3, r2
 8006bd2:	3384      	adds	r3, #132	; 0x84
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006be0:	461a      	mov	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	431a      	orrs	r2, r3
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4619      	mov	r1, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	01db      	lsls	r3, r3, #7
 8006bf4:	440b      	add	r3, r1
 8006bf6:	3384      	adds	r3, #132	; 0x84
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	01db      	lsls	r3, r3, #7
 8006c0a:	4413      	add	r3, r2
 8006c0c:	3384      	adds	r3, #132	; 0x84
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	6812      	ldr	r2, [r2, #0]
 8006c14:	4611      	mov	r1, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	01d2      	lsls	r2, r2, #7
 8006c1a:	440a      	add	r2, r1
 8006c1c:	3284      	adds	r2, #132	; 0x84
 8006c1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	01db      	lsls	r3, r3, #7
 8006c2e:	4413      	add	r3, r2
 8006c30:	3384      	adds	r3, #132	; 0x84
 8006c32:	461a      	mov	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	01db      	lsls	r3, r3, #7
 8006c44:	4413      	add	r3, r2
 8006c46:	3384      	adds	r3, #132	; 0x84
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	6812      	ldr	r2, [r2, #0]
 8006c4e:	4611      	mov	r1, r2
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	01d2      	lsls	r2, r2, #7
 8006c54:	440a      	add	r2, r1
 8006c56:	3284      	adds	r2, #132	; 0x84
 8006c58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006c5c:	f023 0307 	bic.w	r3, r3, #7
 8006c60:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	69da      	ldr	r2, [r3, #28]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	68f9      	ldr	r1, [r7, #12]
 8006c6c:	6809      	ldr	r1, [r1, #0]
 8006c6e:	4608      	mov	r0, r1
 8006c70:	6879      	ldr	r1, [r7, #4]
 8006c72:	01c9      	lsls	r1, r1, #7
 8006c74:	4401      	add	r1, r0
 8006c76:	3184      	adds	r1, #132	; 0x84
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	461a      	mov	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	01db      	lsls	r3, r3, #7
 8006c86:	4413      	add	r3, r2
 8006c88:	3384      	adds	r3, #132	; 0x84
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	01db      	lsls	r3, r3, #7
 8006c96:	4413      	add	r3, r2
 8006c98:	3384      	adds	r3, #132	; 0x84
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	01db      	lsls	r3, r3, #7
 8006caa:	4413      	add	r3, r2
 8006cac:	3384      	adds	r3, #132	; 0x84
 8006cae:	461a      	mov	r2, r3
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	691b      	ldr	r3, [r3, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d102      	bne.n	8006cc4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006cbe:	2304      	movs	r3, #4
 8006cc0:	61fb      	str	r3, [r7, #28]
 8006cc2:	e01b      	b.n	8006cfc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d102      	bne.n	8006cd2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	61fb      	str	r3, [r7, #28]
 8006cd0:	e014      	b.n	8006cfc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d00b      	beq.n	8006cf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d007      	beq.n	8006cf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ce6:	2b03      	cmp	r3, #3
 8006ce8:	d003      	beq.n	8006cf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006cee:	2b07      	cmp	r3, #7
 8006cf0:	d102      	bne.n	8006cf8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	61fb      	str	r3, [r7, #28]
 8006cf6:	e001      	b.n	8006cfc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	461a      	mov	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	01db      	lsls	r3, r3, #7
 8006d06:	4413      	add	r3, r2
 8006d08:	3384      	adds	r3, #132	; 0x84
 8006d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	6812      	ldr	r2, [r2, #0]
 8006d10:	4611      	mov	r1, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	01d2      	lsls	r2, r2, #7
 8006d16:	440a      	add	r2, r1
 8006d18:	3284      	adds	r2, #132	; 0x84
 8006d1a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006d1e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d24:	69fa      	ldr	r2, [r7, #28]
 8006d26:	fb02 f303 	mul.w	r3, r2, r3
 8006d2a:	041a      	lsls	r2, r3, #16
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	6859      	ldr	r1, [r3, #4]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	1acb      	subs	r3, r1, r3
 8006d36:	69f9      	ldr	r1, [r7, #28]
 8006d38:	fb01 f303 	mul.w	r3, r1, r3
 8006d3c:	3303      	adds	r3, #3
 8006d3e:	68f9      	ldr	r1, [r7, #12]
 8006d40:	6809      	ldr	r1, [r1, #0]
 8006d42:	4608      	mov	r0, r1
 8006d44:	6879      	ldr	r1, [r7, #4]
 8006d46:	01c9      	lsls	r1, r1, #7
 8006d48:	4401      	add	r1, r0
 8006d4a:	3184      	adds	r1, #132	; 0x84
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	01db      	lsls	r3, r3, #7
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3384      	adds	r3, #132	; 0x84
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	4611      	mov	r1, r2
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	01d2      	lsls	r2, r2, #7
 8006d6a:	440a      	add	r2, r1
 8006d6c:	3284      	adds	r2, #132	; 0x84
 8006d6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d72:	f023 0307 	bic.w	r3, r3, #7
 8006d76:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	01db      	lsls	r3, r3, #7
 8006d82:	4413      	add	r3, r2
 8006d84:	3384      	adds	r3, #132	; 0x84
 8006d86:	461a      	mov	r2, r3
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	461a      	mov	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	01db      	lsls	r3, r3, #7
 8006d98:	4413      	add	r3, r2
 8006d9a:	3384      	adds	r3, #132	; 0x84
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	6812      	ldr	r2, [r2, #0]
 8006da2:	4611      	mov	r1, r2
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	01d2      	lsls	r2, r2, #7
 8006da8:	440a      	add	r2, r1
 8006daa:	3284      	adds	r2, #132	; 0x84
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	6013      	str	r3, [r2, #0]
}
 8006db2:	bf00      	nop
 8006db4:	3724      	adds	r7, #36	; 0x24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
	...

08006dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e25e      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 0301 	and.w	r3, r3, #1
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d075      	beq.n	8006eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006dde:	4b88      	ldr	r3, [pc, #544]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 030c 	and.w	r3, r3, #12
 8006de6:	2b04      	cmp	r3, #4
 8006de8:	d00c      	beq.n	8006e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006dea:	4b85      	ldr	r3, [pc, #532]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d112      	bne.n	8006e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006df6:	4b82      	ldr	r3, [pc, #520]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e02:	d10b      	bne.n	8006e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e04:	4b7e      	ldr	r3, [pc, #504]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d05b      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x108>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d157      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e239      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e24:	d106      	bne.n	8006e34 <HAL_RCC_OscConfig+0x74>
 8006e26:	4b76      	ldr	r3, [pc, #472]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a75      	ldr	r2, [pc, #468]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e30:	6013      	str	r3, [r2, #0]
 8006e32:	e01d      	b.n	8006e70 <HAL_RCC_OscConfig+0xb0>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e3c:	d10c      	bne.n	8006e58 <HAL_RCC_OscConfig+0x98>
 8006e3e:	4b70      	ldr	r3, [pc, #448]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a6f      	ldr	r2, [pc, #444]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e48:	6013      	str	r3, [r2, #0]
 8006e4a:	4b6d      	ldr	r3, [pc, #436]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a6c      	ldr	r2, [pc, #432]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	e00b      	b.n	8006e70 <HAL_RCC_OscConfig+0xb0>
 8006e58:	4b69      	ldr	r3, [pc, #420]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a68      	ldr	r2, [pc, #416]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	4b66      	ldr	r3, [pc, #408]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a65      	ldr	r2, [pc, #404]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d013      	beq.n	8006ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e78:	f7fd fd44 	bl	8004904 <HAL_GetTick>
 8006e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e7e:	e008      	b.n	8006e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e80:	f7fd fd40 	bl	8004904 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	2b64      	cmp	r3, #100	; 0x64
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e1fe      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e92:	4b5b      	ldr	r3, [pc, #364]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0f0      	beq.n	8006e80 <HAL_RCC_OscConfig+0xc0>
 8006e9e:	e014      	b.n	8006eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ea0:	f7fd fd30 	bl	8004904 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ea8:	f7fd fd2c 	bl	8004904 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b64      	cmp	r3, #100	; 0x64
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e1ea      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eba:	4b51      	ldr	r3, [pc, #324]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1f0      	bne.n	8006ea8 <HAL_RCC_OscConfig+0xe8>
 8006ec6:	e000      	b.n	8006eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d063      	beq.n	8006f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006ed6:	4b4a      	ldr	r3, [pc, #296]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 030c 	and.w	r3, r3, #12
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00b      	beq.n	8006efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ee2:	4b47      	ldr	r3, [pc, #284]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006eea:	2b08      	cmp	r3, #8
 8006eec:	d11c      	bne.n	8006f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006eee:	4b44      	ldr	r3, [pc, #272]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d116      	bne.n	8006f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006efa:	4b41      	ldr	r3, [pc, #260]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d005      	beq.n	8006f12 <HAL_RCC_OscConfig+0x152>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d001      	beq.n	8006f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e1be      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f12:	4b3b      	ldr	r3, [pc, #236]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	4937      	ldr	r1, [pc, #220]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f26:	e03a      	b.n	8006f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d020      	beq.n	8006f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f30:	4b34      	ldr	r3, [pc, #208]	; (8007004 <HAL_RCC_OscConfig+0x244>)
 8006f32:	2201      	movs	r2, #1
 8006f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f36:	f7fd fce5 	bl	8004904 <HAL_GetTick>
 8006f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f3c:	e008      	b.n	8006f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f3e:	f7fd fce1 	bl	8004904 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d901      	bls.n	8006f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e19f      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f50:	4b2b      	ldr	r3, [pc, #172]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d0f0      	beq.n	8006f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f5c:	4b28      	ldr	r3, [pc, #160]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	4925      	ldr	r1, [pc, #148]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	600b      	str	r3, [r1, #0]
 8006f70:	e015      	b.n	8006f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f72:	4b24      	ldr	r3, [pc, #144]	; (8007004 <HAL_RCC_OscConfig+0x244>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f78:	f7fd fcc4 	bl	8004904 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f80:	f7fd fcc0 	bl	8004904 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e17e      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f92:	4b1b      	ldr	r3, [pc, #108]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 0302 	and.w	r3, r3, #2
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1f0      	bne.n	8006f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0308 	and.w	r3, r3, #8
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d036      	beq.n	8007018 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d016      	beq.n	8006fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fb2:	4b15      	ldr	r3, [pc, #84]	; (8007008 <HAL_RCC_OscConfig+0x248>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fb8:	f7fd fca4 	bl	8004904 <HAL_GetTick>
 8006fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fbe:	e008      	b.n	8006fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fc0:	f7fd fca0 	bl	8004904 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d901      	bls.n	8006fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e15e      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <HAL_RCC_OscConfig+0x240>)
 8006fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd6:	f003 0302 	and.w	r3, r3, #2
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0f0      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x200>
 8006fde:	e01b      	b.n	8007018 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fe0:	4b09      	ldr	r3, [pc, #36]	; (8007008 <HAL_RCC_OscConfig+0x248>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006fe6:	f7fd fc8d 	bl	8004904 <HAL_GetTick>
 8006fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006fec:	e00e      	b.n	800700c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006fee:	f7fd fc89 	bl	8004904 <HAL_GetTick>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d907      	bls.n	800700c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e147      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
 8007000:	40023800 	.word	0x40023800
 8007004:	42470000 	.word	0x42470000
 8007008:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800700c:	4b88      	ldr	r3, [pc, #544]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 800700e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1ea      	bne.n	8006fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 8097 	beq.w	8007154 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007026:	2300      	movs	r3, #0
 8007028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800702a:	4b81      	ldr	r3, [pc, #516]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 800702c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10f      	bne.n	8007056 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007036:	2300      	movs	r3, #0
 8007038:	60bb      	str	r3, [r7, #8]
 800703a:	4b7d      	ldr	r3, [pc, #500]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	4a7c      	ldr	r2, [pc, #496]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 8007040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007044:	6413      	str	r3, [r2, #64]	; 0x40
 8007046:	4b7a      	ldr	r3, [pc, #488]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 8007048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800704e:	60bb      	str	r3, [r7, #8]
 8007050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007056:	4b77      	ldr	r3, [pc, #476]	; (8007234 <HAL_RCC_OscConfig+0x474>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705e:	2b00      	cmp	r3, #0
 8007060:	d118      	bne.n	8007094 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007062:	4b74      	ldr	r3, [pc, #464]	; (8007234 <HAL_RCC_OscConfig+0x474>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a73      	ldr	r2, [pc, #460]	; (8007234 <HAL_RCC_OscConfig+0x474>)
 8007068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800706c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800706e:	f7fd fc49 	bl	8004904 <HAL_GetTick>
 8007072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007074:	e008      	b.n	8007088 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007076:	f7fd fc45 	bl	8004904 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d901      	bls.n	8007088 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e103      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007088:	4b6a      	ldr	r3, [pc, #424]	; (8007234 <HAL_RCC_OscConfig+0x474>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007090:	2b00      	cmp	r3, #0
 8007092:	d0f0      	beq.n	8007076 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d106      	bne.n	80070aa <HAL_RCC_OscConfig+0x2ea>
 800709c:	4b64      	ldr	r3, [pc, #400]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 800709e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070a0:	4a63      	ldr	r2, [pc, #396]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80070a2:	f043 0301 	orr.w	r3, r3, #1
 80070a6:	6713      	str	r3, [r2, #112]	; 0x70
 80070a8:	e01c      	b.n	80070e4 <HAL_RCC_OscConfig+0x324>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b05      	cmp	r3, #5
 80070b0:	d10c      	bne.n	80070cc <HAL_RCC_OscConfig+0x30c>
 80070b2:	4b5f      	ldr	r3, [pc, #380]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	4a5e      	ldr	r2, [pc, #376]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80070b8:	f043 0304 	orr.w	r3, r3, #4
 80070bc:	6713      	str	r3, [r2, #112]	; 0x70
 80070be:	4b5c      	ldr	r3, [pc, #368]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80070c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c2:	4a5b      	ldr	r2, [pc, #364]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	6713      	str	r3, [r2, #112]	; 0x70
 80070ca:	e00b      	b.n	80070e4 <HAL_RCC_OscConfig+0x324>
 80070cc:	4b58      	ldr	r3, [pc, #352]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80070ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d0:	4a57      	ldr	r2, [pc, #348]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80070d2:	f023 0301 	bic.w	r3, r3, #1
 80070d6:	6713      	str	r3, [r2, #112]	; 0x70
 80070d8:	4b55      	ldr	r3, [pc, #340]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070dc:	4a54      	ldr	r2, [pc, #336]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80070de:	f023 0304 	bic.w	r3, r3, #4
 80070e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d015      	beq.n	8007118 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ec:	f7fd fc0a 	bl	8004904 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070f2:	e00a      	b.n	800710a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070f4:	f7fd fc06 	bl	8004904 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007102:	4293      	cmp	r3, r2
 8007104:	d901      	bls.n	800710a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007106:	2303      	movs	r3, #3
 8007108:	e0c2      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800710a:	4b49      	ldr	r3, [pc, #292]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 800710c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0ee      	beq.n	80070f4 <HAL_RCC_OscConfig+0x334>
 8007116:	e014      	b.n	8007142 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007118:	f7fd fbf4 	bl	8004904 <HAL_GetTick>
 800711c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800711e:	e00a      	b.n	8007136 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007120:	f7fd fbf0 	bl	8004904 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f241 3288 	movw	r2, #5000	; 0x1388
 800712e:	4293      	cmp	r3, r2
 8007130:	d901      	bls.n	8007136 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	e0ac      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007136:	4b3e      	ldr	r3, [pc, #248]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 8007138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1ee      	bne.n	8007120 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007142:	7dfb      	ldrb	r3, [r7, #23]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d105      	bne.n	8007154 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007148:	4b39      	ldr	r3, [pc, #228]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 800714a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714c:	4a38      	ldr	r2, [pc, #224]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 800714e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007152:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	699b      	ldr	r3, [r3, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 8098 	beq.w	800728e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800715e:	4b34      	ldr	r3, [pc, #208]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f003 030c 	and.w	r3, r3, #12
 8007166:	2b08      	cmp	r3, #8
 8007168:	d05c      	beq.n	8007224 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d141      	bne.n	80071f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007172:	4b31      	ldr	r3, [pc, #196]	; (8007238 <HAL_RCC_OscConfig+0x478>)
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007178:	f7fd fbc4 	bl	8004904 <HAL_GetTick>
 800717c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007180:	f7fd fbc0 	bl	8004904 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e07e      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007192:	4b27      	ldr	r3, [pc, #156]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69da      	ldr	r2, [r3, #28]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	431a      	orrs	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	019b      	lsls	r3, r3, #6
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	085b      	lsrs	r3, r3, #1
 80071b6:	3b01      	subs	r3, #1
 80071b8:	041b      	lsls	r3, r3, #16
 80071ba:	431a      	orrs	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c0:	061b      	lsls	r3, r3, #24
 80071c2:	491b      	ldr	r1, [pc, #108]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071c8:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <HAL_RCC_OscConfig+0x478>)
 80071ca:	2201      	movs	r2, #1
 80071cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071ce:	f7fd fb99 	bl	8004904 <HAL_GetTick>
 80071d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071d4:	e008      	b.n	80071e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071d6:	f7fd fb95 	bl	8004904 <HAL_GetTick>
 80071da:	4602      	mov	r2, r0
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	1ad3      	subs	r3, r2, r3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e053      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071e8:	4b11      	ldr	r3, [pc, #68]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d0f0      	beq.n	80071d6 <HAL_RCC_OscConfig+0x416>
 80071f4:	e04b      	b.n	800728e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071f6:	4b10      	ldr	r3, [pc, #64]	; (8007238 <HAL_RCC_OscConfig+0x478>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071fc:	f7fd fb82 	bl	8004904 <HAL_GetTick>
 8007200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007202:	e008      	b.n	8007216 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007204:	f7fd fb7e 	bl	8004904 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b02      	cmp	r3, #2
 8007210:	d901      	bls.n	8007216 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007212:	2303      	movs	r3, #3
 8007214:	e03c      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007216:	4b06      	ldr	r3, [pc, #24]	; (8007230 <HAL_RCC_OscConfig+0x470>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1f0      	bne.n	8007204 <HAL_RCC_OscConfig+0x444>
 8007222:	e034      	b.n	800728e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d107      	bne.n	800723c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e02f      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
 8007230:	40023800 	.word	0x40023800
 8007234:	40007000 	.word	0x40007000
 8007238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800723c:	4b16      	ldr	r3, [pc, #88]	; (8007298 <HAL_RCC_OscConfig+0x4d8>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	69db      	ldr	r3, [r3, #28]
 800724c:	429a      	cmp	r2, r3
 800724e:	d11c      	bne.n	800728a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800725a:	429a      	cmp	r2, r3
 800725c:	d115      	bne.n	800728a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007264:	4013      	ands	r3, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800726a:	4293      	cmp	r3, r2
 800726c:	d10d      	bne.n	800728a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007278:	429a      	cmp	r2, r3
 800727a:	d106      	bne.n	800728a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007286:	429a      	cmp	r2, r3
 8007288:	d001      	beq.n	800728e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e000      	b.n	8007290 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3718      	adds	r7, #24
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	40023800 	.word	0x40023800

0800729c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	e0cc      	b.n	800744a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80072b0:	4b68      	ldr	r3, [pc, #416]	; (8007454 <HAL_RCC_ClockConfig+0x1b8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	683a      	ldr	r2, [r7, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d90c      	bls.n	80072d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072be:	4b65      	ldr	r3, [pc, #404]	; (8007454 <HAL_RCC_ClockConfig+0x1b8>)
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	b2d2      	uxtb	r2, r2
 80072c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072c6:	4b63      	ldr	r3, [pc, #396]	; (8007454 <HAL_RCC_ClockConfig+0x1b8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d001      	beq.n	80072d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e0b8      	b.n	800744a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d020      	beq.n	8007326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d005      	beq.n	80072fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80072f0:	4b59      	ldr	r3, [pc, #356]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	4a58      	ldr	r2, [pc, #352]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 80072f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80072fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007308:	4b53      	ldr	r3, [pc, #332]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	4a52      	ldr	r2, [pc, #328]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 800730e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007314:	4b50      	ldr	r3, [pc, #320]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	494d      	ldr	r1, [pc, #308]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 8007322:	4313      	orrs	r3, r2
 8007324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b00      	cmp	r3, #0
 8007330:	d044      	beq.n	80073bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d107      	bne.n	800734a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800733a:	4b47      	ldr	r3, [pc, #284]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d119      	bne.n	800737a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e07f      	b.n	800744a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	2b02      	cmp	r3, #2
 8007350:	d003      	beq.n	800735a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007356:	2b03      	cmp	r3, #3
 8007358:	d107      	bne.n	800736a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800735a:	4b3f      	ldr	r3, [pc, #252]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d109      	bne.n	800737a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e06f      	b.n	800744a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800736a:	4b3b      	ldr	r3, [pc, #236]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b00      	cmp	r3, #0
 8007374:	d101      	bne.n	800737a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	e067      	b.n	800744a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800737a:	4b37      	ldr	r3, [pc, #220]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f023 0203 	bic.w	r2, r3, #3
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	4934      	ldr	r1, [pc, #208]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 8007388:	4313      	orrs	r3, r2
 800738a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800738c:	f7fd faba 	bl	8004904 <HAL_GetTick>
 8007390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007392:	e00a      	b.n	80073aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007394:	f7fd fab6 	bl	8004904 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e04f      	b.n	800744a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073aa:	4b2b      	ldr	r3, [pc, #172]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	f003 020c 	and.w	r2, r3, #12
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d1eb      	bne.n	8007394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80073bc:	4b25      	ldr	r3, [pc, #148]	; (8007454 <HAL_RCC_ClockConfig+0x1b8>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 030f 	and.w	r3, r3, #15
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d20c      	bcs.n	80073e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ca:	4b22      	ldr	r3, [pc, #136]	; (8007454 <HAL_RCC_ClockConfig+0x1b8>)
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	b2d2      	uxtb	r2, r2
 80073d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073d2:	4b20      	ldr	r3, [pc, #128]	; (8007454 <HAL_RCC_ClockConfig+0x1b8>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	683a      	ldr	r2, [r7, #0]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d001      	beq.n	80073e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e032      	b.n	800744a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d008      	beq.n	8007402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80073f0:	4b19      	ldr	r3, [pc, #100]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	4916      	ldr	r1, [pc, #88]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0308 	and.w	r3, r3, #8
 800740a:	2b00      	cmp	r3, #0
 800740c:	d009      	beq.n	8007422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800740e:	4b12      	ldr	r3, [pc, #72]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	490e      	ldr	r1, [pc, #56]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 800741e:	4313      	orrs	r3, r2
 8007420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007422:	f000 f821 	bl	8007468 <HAL_RCC_GetSysClockFreq>
 8007426:	4602      	mov	r2, r0
 8007428:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <HAL_RCC_ClockConfig+0x1bc>)
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	091b      	lsrs	r3, r3, #4
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	490a      	ldr	r1, [pc, #40]	; (800745c <HAL_RCC_ClockConfig+0x1c0>)
 8007434:	5ccb      	ldrb	r3, [r1, r3]
 8007436:	fa22 f303 	lsr.w	r3, r2, r3
 800743a:	4a09      	ldr	r2, [pc, #36]	; (8007460 <HAL_RCC_ClockConfig+0x1c4>)
 800743c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800743e:	4b09      	ldr	r3, [pc, #36]	; (8007464 <HAL_RCC_ClockConfig+0x1c8>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f7fd fa1a 	bl	800487c <HAL_InitTick>

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40023c00 	.word	0x40023c00
 8007458:	40023800 	.word	0x40023800
 800745c:	0800df10 	.word	0x0800df10
 8007460:	20000034 	.word	0x20000034
 8007464:	200000c4 	.word	0x200000c4

08007468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800746c:	b094      	sub	sp, #80	; 0x50
 800746e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	647b      	str	r3, [r7, #68]	; 0x44
 8007474:	2300      	movs	r3, #0
 8007476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007478:	2300      	movs	r3, #0
 800747a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007480:	4b79      	ldr	r3, [pc, #484]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f003 030c 	and.w	r3, r3, #12
 8007488:	2b08      	cmp	r3, #8
 800748a:	d00d      	beq.n	80074a8 <HAL_RCC_GetSysClockFreq+0x40>
 800748c:	2b08      	cmp	r3, #8
 800748e:	f200 80e1 	bhi.w	8007654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <HAL_RCC_GetSysClockFreq+0x34>
 8007496:	2b04      	cmp	r3, #4
 8007498:	d003      	beq.n	80074a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800749a:	e0db      	b.n	8007654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800749c:	4b73      	ldr	r3, [pc, #460]	; (800766c <HAL_RCC_GetSysClockFreq+0x204>)
 800749e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80074a0:	e0db      	b.n	800765a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074a2:	4b73      	ldr	r3, [pc, #460]	; (8007670 <HAL_RCC_GetSysClockFreq+0x208>)
 80074a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80074a6:	e0d8      	b.n	800765a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074a8:	4b6f      	ldr	r3, [pc, #444]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80074b2:	4b6d      	ldr	r3, [pc, #436]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d063      	beq.n	8007586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074be:	4b6a      	ldr	r3, [pc, #424]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	099b      	lsrs	r3, r3, #6
 80074c4:	2200      	movs	r2, #0
 80074c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80074c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d0:	633b      	str	r3, [r7, #48]	; 0x30
 80074d2:	2300      	movs	r3, #0
 80074d4:	637b      	str	r3, [r7, #52]	; 0x34
 80074d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80074da:	4622      	mov	r2, r4
 80074dc:	462b      	mov	r3, r5
 80074de:	f04f 0000 	mov.w	r0, #0
 80074e2:	f04f 0100 	mov.w	r1, #0
 80074e6:	0159      	lsls	r1, r3, #5
 80074e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074ec:	0150      	lsls	r0, r2, #5
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4621      	mov	r1, r4
 80074f4:	1a51      	subs	r1, r2, r1
 80074f6:	6139      	str	r1, [r7, #16]
 80074f8:	4629      	mov	r1, r5
 80074fa:	eb63 0301 	sbc.w	r3, r3, r1
 80074fe:	617b      	str	r3, [r7, #20]
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800750c:	4659      	mov	r1, fp
 800750e:	018b      	lsls	r3, r1, #6
 8007510:	4651      	mov	r1, sl
 8007512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007516:	4651      	mov	r1, sl
 8007518:	018a      	lsls	r2, r1, #6
 800751a:	4651      	mov	r1, sl
 800751c:	ebb2 0801 	subs.w	r8, r2, r1
 8007520:	4659      	mov	r1, fp
 8007522:	eb63 0901 	sbc.w	r9, r3, r1
 8007526:	f04f 0200 	mov.w	r2, #0
 800752a:	f04f 0300 	mov.w	r3, #0
 800752e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800753a:	4690      	mov	r8, r2
 800753c:	4699      	mov	r9, r3
 800753e:	4623      	mov	r3, r4
 8007540:	eb18 0303 	adds.w	r3, r8, r3
 8007544:	60bb      	str	r3, [r7, #8]
 8007546:	462b      	mov	r3, r5
 8007548:	eb49 0303 	adc.w	r3, r9, r3
 800754c:	60fb      	str	r3, [r7, #12]
 800754e:	f04f 0200 	mov.w	r2, #0
 8007552:	f04f 0300 	mov.w	r3, #0
 8007556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800755a:	4629      	mov	r1, r5
 800755c:	024b      	lsls	r3, r1, #9
 800755e:	4621      	mov	r1, r4
 8007560:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007564:	4621      	mov	r1, r4
 8007566:	024a      	lsls	r2, r1, #9
 8007568:	4610      	mov	r0, r2
 800756a:	4619      	mov	r1, r3
 800756c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800756e:	2200      	movs	r2, #0
 8007570:	62bb      	str	r3, [r7, #40]	; 0x28
 8007572:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007578:	f7f9 fc30 	bl	8000ddc <__aeabi_uldivmod>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	4613      	mov	r3, r2
 8007582:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007584:	e058      	b.n	8007638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007586:	4b38      	ldr	r3, [pc, #224]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	099b      	lsrs	r3, r3, #6
 800758c:	2200      	movs	r2, #0
 800758e:	4618      	mov	r0, r3
 8007590:	4611      	mov	r1, r2
 8007592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007596:	623b      	str	r3, [r7, #32]
 8007598:	2300      	movs	r3, #0
 800759a:	627b      	str	r3, [r7, #36]	; 0x24
 800759c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80075a0:	4642      	mov	r2, r8
 80075a2:	464b      	mov	r3, r9
 80075a4:	f04f 0000 	mov.w	r0, #0
 80075a8:	f04f 0100 	mov.w	r1, #0
 80075ac:	0159      	lsls	r1, r3, #5
 80075ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075b2:	0150      	lsls	r0, r2, #5
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	4641      	mov	r1, r8
 80075ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80075be:	4649      	mov	r1, r9
 80075c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80075c4:	f04f 0200 	mov.w	r2, #0
 80075c8:	f04f 0300 	mov.w	r3, #0
 80075cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80075d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80075d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80075d8:	ebb2 040a 	subs.w	r4, r2, sl
 80075dc:	eb63 050b 	sbc.w	r5, r3, fp
 80075e0:	f04f 0200 	mov.w	r2, #0
 80075e4:	f04f 0300 	mov.w	r3, #0
 80075e8:	00eb      	lsls	r3, r5, #3
 80075ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80075ee:	00e2      	lsls	r2, r4, #3
 80075f0:	4614      	mov	r4, r2
 80075f2:	461d      	mov	r5, r3
 80075f4:	4643      	mov	r3, r8
 80075f6:	18e3      	adds	r3, r4, r3
 80075f8:	603b      	str	r3, [r7, #0]
 80075fa:	464b      	mov	r3, r9
 80075fc:	eb45 0303 	adc.w	r3, r5, r3
 8007600:	607b      	str	r3, [r7, #4]
 8007602:	f04f 0200 	mov.w	r2, #0
 8007606:	f04f 0300 	mov.w	r3, #0
 800760a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800760e:	4629      	mov	r1, r5
 8007610:	028b      	lsls	r3, r1, #10
 8007612:	4621      	mov	r1, r4
 8007614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007618:	4621      	mov	r1, r4
 800761a:	028a      	lsls	r2, r1, #10
 800761c:	4610      	mov	r0, r2
 800761e:	4619      	mov	r1, r3
 8007620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007622:	2200      	movs	r2, #0
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	61fa      	str	r2, [r7, #28]
 8007628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800762c:	f7f9 fbd6 	bl	8000ddc <__aeabi_uldivmod>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4613      	mov	r3, r2
 8007636:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007638:	4b0b      	ldr	r3, [pc, #44]	; (8007668 <HAL_RCC_GetSysClockFreq+0x200>)
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	f003 0303 	and.w	r3, r3, #3
 8007642:	3301      	adds	r3, #1
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007648:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800764a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800764c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007650:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007652:	e002      	b.n	800765a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007654:	4b05      	ldr	r3, [pc, #20]	; (800766c <HAL_RCC_GetSysClockFreq+0x204>)
 8007656:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800765a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800765c:	4618      	mov	r0, r3
 800765e:	3750      	adds	r7, #80	; 0x50
 8007660:	46bd      	mov	sp, r7
 8007662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007666:	bf00      	nop
 8007668:	40023800 	.word	0x40023800
 800766c:	00f42400 	.word	0x00f42400
 8007670:	007a1200 	.word	0x007a1200

08007674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007678:	4b03      	ldr	r3, [pc, #12]	; (8007688 <HAL_RCC_GetHCLKFreq+0x14>)
 800767a:	681b      	ldr	r3, [r3, #0]
}
 800767c:	4618      	mov	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	20000034 	.word	0x20000034

0800768c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007690:	f7ff fff0 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 8007694:	4602      	mov	r2, r0
 8007696:	4b05      	ldr	r3, [pc, #20]	; (80076ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	0a9b      	lsrs	r3, r3, #10
 800769c:	f003 0307 	and.w	r3, r3, #7
 80076a0:	4903      	ldr	r1, [pc, #12]	; (80076b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076a2:	5ccb      	ldrb	r3, [r1, r3]
 80076a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40023800 	.word	0x40023800
 80076b0:	0800df20 	.word	0x0800df20

080076b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d105      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d075      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80076e8:	4b91      	ldr	r3, [pc, #580]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80076ee:	f7fd f909 	bl	8004904 <HAL_GetTick>
 80076f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80076f4:	e008      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80076f6:	f7fd f905 	bl	8004904 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d901      	bls.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e189      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007708:	4b8a      	ldr	r3, [pc, #552]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1f0      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0301 	and.w	r3, r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	d009      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	019a      	lsls	r2, r3, #6
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	071b      	lsls	r3, r3, #28
 800772c:	4981      	ldr	r1, [pc, #516]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d01f      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007740:	4b7c      	ldr	r3, [pc, #496]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007746:	0f1b      	lsrs	r3, r3, #28
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	019a      	lsls	r2, r3, #6
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	061b      	lsls	r3, r3, #24
 800775a:	431a      	orrs	r2, r3
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	071b      	lsls	r3, r3, #28
 8007760:	4974      	ldr	r1, [pc, #464]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007762:	4313      	orrs	r3, r2
 8007764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007768:	4b72      	ldr	r3, [pc, #456]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800776a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800776e:	f023 021f 	bic.w	r2, r3, #31
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	69db      	ldr	r3, [r3, #28]
 8007776:	3b01      	subs	r3, #1
 8007778:	496e      	ldr	r1, [pc, #440]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800777a:	4313      	orrs	r3, r2
 800777c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00d      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	019a      	lsls	r2, r3, #6
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	061b      	lsls	r3, r3, #24
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	071b      	lsls	r3, r3, #28
 80077a0:	4964      	ldr	r1, [pc, #400]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80077a8:	4b61      	ldr	r3, [pc, #388]	; (8007930 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80077aa:	2201      	movs	r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80077ae:	f7fd f8a9 	bl	8004904 <HAL_GetTick>
 80077b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077b4:	e008      	b.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80077b6:	f7fd f8a5 	bl	8004904 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e129      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80077c8:	4b5a      	ldr	r3, [pc, #360]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0f0      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d105      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d079      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80077ec:	4b52      	ldr	r3, [pc, #328]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80077f2:	f7fd f887 	bl	8004904 <HAL_GetTick>
 80077f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80077f8:	e008      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80077fa:	f7fd f883 	bl	8004904 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d901      	bls.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	e107      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800780c:	4b49      	ldr	r3, [pc, #292]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007818:	d0ef      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0304 	and.w	r3, r3, #4
 8007822:	2b00      	cmp	r3, #0
 8007824:	d020      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007826:	4b43      	ldr	r3, [pc, #268]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782c:	0f1b      	lsrs	r3, r3, #28
 800782e:	f003 0307 	and.w	r3, r3, #7
 8007832:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	019a      	lsls	r2, r3, #6
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	061b      	lsls	r3, r3, #24
 8007840:	431a      	orrs	r2, r3
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	071b      	lsls	r3, r3, #28
 8007846:	493b      	ldr	r1, [pc, #236]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007848:	4313      	orrs	r3, r2
 800784a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800784e:	4b39      	ldr	r3, [pc, #228]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007854:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	3b01      	subs	r3, #1
 800785e:	021b      	lsls	r3, r3, #8
 8007860:	4934      	ldr	r1, [pc, #208]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007862:	4313      	orrs	r3, r2
 8007864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01e      	beq.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007874:	4b2f      	ldr	r3, [pc, #188]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787a:	0e1b      	lsrs	r3, r3, #24
 800787c:	f003 030f 	and.w	r3, r3, #15
 8007880:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	019a      	lsls	r2, r3, #6
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	061b      	lsls	r3, r3, #24
 800788c:	431a      	orrs	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	071b      	lsls	r3, r3, #28
 8007894:	4927      	ldr	r1, [pc, #156]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007896:	4313      	orrs	r3, r2
 8007898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800789c:	4b25      	ldr	r3, [pc, #148]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800789e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078aa:	4922      	ldr	r1, [pc, #136]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078ac:	4313      	orrs	r3, r2
 80078ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80078b2:	4b21      	ldr	r3, [pc, #132]	; (8007938 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80078b4:	2201      	movs	r2, #1
 80078b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078b8:	f7fd f824 	bl	8004904 <HAL_GetTick>
 80078bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80078c0:	f7fd f820 	bl	8004904 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e0a4      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80078d2:	4b18      	ldr	r3, [pc, #96]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078de:	d1ef      	bne.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0320 	and.w	r3, r3, #32
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 808b 	beq.w	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
 80078f2:	4b10      	ldr	r3, [pc, #64]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	4a0f      	ldr	r2, [pc, #60]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078fc:	6413      	str	r3, [r2, #64]	; 0x40
 80078fe:	4b0d      	ldr	r3, [pc, #52]	; (8007934 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007906:	60fb      	str	r3, [r7, #12]
 8007908:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800790a:	4b0c      	ldr	r3, [pc, #48]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a0b      	ldr	r2, [pc, #44]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007914:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007916:	f7fc fff5 	bl	8004904 <HAL_GetTick>
 800791a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800791c:	e010      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800791e:	f7fc fff1 	bl	8004904 <HAL_GetTick>
 8007922:	4602      	mov	r2, r0
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	1ad3      	subs	r3, r2, r3
 8007928:	2b02      	cmp	r3, #2
 800792a:	d909      	bls.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800792c:	2303      	movs	r3, #3
 800792e:	e075      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007930:	42470068 	.word	0x42470068
 8007934:	40023800 	.word	0x40023800
 8007938:	42470070 	.word	0x42470070
 800793c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007940:	4b38      	ldr	r3, [pc, #224]	; (8007a24 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007948:	2b00      	cmp	r3, #0
 800794a:	d0e8      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800794c:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800794e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007954:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d02f      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	429a      	cmp	r2, r3
 8007968:	d028      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800796a:	4b2f      	ldr	r3, [pc, #188]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800796c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007972:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007974:	4b2d      	ldr	r3, [pc, #180]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007976:	2201      	movs	r2, #1
 8007978:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800797a:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800797c:	2200      	movs	r2, #0
 800797e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007980:	4a29      	ldr	r2, [pc, #164]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007986:	4b28      	ldr	r3, [pc, #160]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798a:	f003 0301 	and.w	r3, r3, #1
 800798e:	2b01      	cmp	r3, #1
 8007990:	d114      	bne.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007992:	f7fc ffb7 	bl	8004904 <HAL_GetTick>
 8007996:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007998:	e00a      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800799a:	f7fc ffb3 	bl	8004904 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d901      	bls.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e035      	b.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079b0:	4b1d      	ldr	r3, [pc, #116]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b4:	f003 0302 	and.w	r3, r3, #2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0ee      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079c8:	d10d      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80079ca:	4b17      	ldr	r3, [pc, #92]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80079da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079de:	4912      	ldr	r1, [pc, #72]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079e0:	4313      	orrs	r3, r2
 80079e2:	608b      	str	r3, [r1, #8]
 80079e4:	e005      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80079e6:	4b10      	ldr	r3, [pc, #64]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	4a0f      	ldr	r2, [pc, #60]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80079f0:	6093      	str	r3, [r2, #8]
 80079f2:	4b0d      	ldr	r3, [pc, #52]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079fe:	490a      	ldr	r1, [pc, #40]	; (8007a28 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a00:	4313      	orrs	r3, r2
 8007a02:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 0310 	and.w	r3, r3, #16
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d004      	beq.n	8007a1a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007a16:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007a18:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	40007000 	.word	0x40007000
 8007a28:	40023800 	.word	0x40023800
 8007a2c:	42470e40 	.word	0x42470e40
 8007a30:	424711e0 	.word	0x424711e0

08007a34 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d101      	bne.n	8007a48 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e025      	b.n	8007a94 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d106      	bne.n	8007a62 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f81d 	bl	8007a9c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2202      	movs	r2, #2
 8007a66:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	3304      	adds	r3, #4
 8007a72:	4619      	mov	r1, r3
 8007a74:	4610      	mov	r0, r2
 8007a76:	f000 ff0f 	bl	8008898 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6818      	ldr	r0, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	461a      	mov	r2, r3
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	f000 ff7a 	bl	800897e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3708      	adds	r7, #8
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d101      	bne.n	8007acc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e018      	b.n	8007afe <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f000 ffcd 	bl	8008a7c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d104      	bne.n	8007af4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2205      	movs	r2, #5
 8007aee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007af2:	e003      	b.n	8007afc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d101      	bne.n	8007b20 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e00e      	b.n	8007b3e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2202      	movs	r2, #2
 8007b24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f000 ffe0 	bl	8008af4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3708      	adds	r7, #8
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b082      	sub	sp, #8
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e05d      	b.n	8007c14 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d106      	bne.n	8007b72 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f87d 	bl	8007c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	431a      	orrs	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	699b      	ldr	r3, [r3, #24]
 8007baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bae:	431a      	orrs	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	431a      	orrs	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	ea42 0103 	orr.w	r1, r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	0c1b      	lsrs	r3, r3, #16
 8007bd0:	f003 0104 	and.w	r1, r3, #4
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be8:	d104      	bne.n	8007bf4 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007bf2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	69da      	ldr	r2, [r3, #28]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e01a      	b.n	8007c64 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2202      	movs	r2, #2
 8007c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f81a 	bl	8007c80 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_SPI_Transmit+0x22>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e140      	b.n	8007f38 <HAL_SPI_Transmit+0x2a4>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cbe:	f7fc fe21 	bl	8004904 <HAL_GetTick>
 8007cc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007cc4:	88fb      	ldrh	r3, [r7, #6]
 8007cc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d002      	beq.n	8007cda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cd8:	e125      	b.n	8007f26 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <HAL_SPI_Transmit+0x52>
 8007ce0:	88fb      	ldrh	r3, [r7, #6]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cea:	e11c      	b.n	8007f26 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2203      	movs	r2, #3
 8007cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	88fa      	ldrh	r2, [r7, #6]
 8007d04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	88fa      	ldrh	r2, [r7, #6]
 8007d0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2200      	movs	r2, #0
 8007d16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d32:	d107      	bne.n	8007d44 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d42:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d4c:	d10f      	bne.n	8007d6e <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d6c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	d007      	beq.n	8007d8c <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d94:	d14b      	bne.n	8007e2e <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <HAL_SPI_Transmit+0x110>
 8007d9e:	8afb      	ldrh	r3, [r7, #22]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d13e      	bne.n	8007e22 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da8:	881a      	ldrh	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db4:	1c9a      	adds	r2, r3, #2
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007dc8:	e02b      	b.n	8007e22 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d112      	bne.n	8007dfe <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ddc:	881a      	ldrh	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de8:	1c9a      	adds	r2, r3, #2
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007df2:	b29b      	uxth	r3, r3
 8007df4:	3b01      	subs	r3, #1
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8007dfc:	e011      	b.n	8007e22 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dfe:	f7fc fd81 	bl	8004904 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	683a      	ldr	r2, [r7, #0]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d803      	bhi.n	8007e16 <HAL_SPI_Transmit+0x182>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e14:	d102      	bne.n	8007e1c <HAL_SPI_Transmit+0x188>
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d102      	bne.n	8007e22 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e20:	e081      	b.n	8007f26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1ce      	bne.n	8007dca <HAL_SPI_Transmit+0x136>
 8007e2c:	e04c      	b.n	8007ec8 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d002      	beq.n	8007e3c <HAL_SPI_Transmit+0x1a8>
 8007e36:	8afb      	ldrh	r3, [r7, #22]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d140      	bne.n	8007ebe <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	330c      	adds	r3, #12
 8007e46:	7812      	ldrb	r2, [r2, #0]
 8007e48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	1c5a      	adds	r2, r3, #1
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	3b01      	subs	r3, #1
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007e62:	e02c      	b.n	8007ebe <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f003 0302 	and.w	r3, r3, #2
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d113      	bne.n	8007e9a <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	330c      	adds	r3, #12
 8007e7c:	7812      	ldrb	r2, [r2, #0]
 8007e7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	3b01      	subs	r3, #1
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e98:	e011      	b.n	8007ebe <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e9a:	f7fc fd33 	bl	8004904 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d803      	bhi.n	8007eb2 <HAL_SPI_Transmit+0x21e>
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb0:	d102      	bne.n	8007eb8 <HAL_SPI_Transmit+0x224>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d102      	bne.n	8007ebe <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ebc:	e033      	b.n	8007f26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1cd      	bne.n	8007e64 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ed0:	d107      	bne.n	8007ee2 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ee0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 fc94 	bl	8008814 <SPI_EndRxTxTransaction>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d002      	beq.n	8007ef8 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f00:	2300      	movs	r3, #0
 8007f02:	613b      	str	r3, [r7, #16]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	613b      	str	r3, [r7, #16]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	613b      	str	r3, [r7, #16]
 8007f14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	77fb      	strb	r3, [r7, #31]
 8007f22:	e000      	b.n	8007f26 <HAL_SPI_Transmit+0x292>
  }

error:
 8007f24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007f36:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3720      	adds	r7, #32
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f5c:	d112      	bne.n	8007f84 <HAL_SPI_Receive+0x44>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10e      	bne.n	8007f84 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2204      	movs	r2, #4
 8007f6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f6e:	88fa      	ldrh	r2, [r7, #6]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	4613      	mov	r3, r2
 8007f76:	68ba      	ldr	r2, [r7, #8]
 8007f78:	68b9      	ldr	r1, [r7, #8]
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f000 f95f 	bl	800823e <HAL_SPI_TransmitReceive>
 8007f80:	4603      	mov	r3, r0
 8007f82:	e158      	b.n	8008236 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d101      	bne.n	8007f92 <HAL_SPI_Receive+0x52>
 8007f8e:	2302      	movs	r3, #2
 8007f90:	e151      	b.n	8008236 <HAL_SPI_Receive+0x2f6>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f9a:	f7fc fcb3 	bl	8004904 <HAL_GetTick>
 8007f9e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d002      	beq.n	8007fb2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007fac:	2302      	movs	r3, #2
 8007fae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fb0:	e138      	b.n	8008224 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d002      	beq.n	8007fbe <HAL_SPI_Receive+0x7e>
 8007fb8:	88fb      	ldrh	r3, [r7, #6]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d102      	bne.n	8007fc4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007fc2:	e12f      	b.n	8008224 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2204      	movs	r2, #4
 8007fc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	88fa      	ldrh	r2, [r7, #6]
 8007fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	88fa      	ldrh	r2, [r7, #6]
 8007fe2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800800a:	d116      	bne.n	800803a <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800802a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008042:	d107      	bne.n	8008054 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008052:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805e:	2b40      	cmp	r3, #64	; 0x40
 8008060:	d007      	beq.n	8008072 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008070:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d162      	bne.n	8008140 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800807a:	e02e      	b.n	80080da <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	2b01      	cmp	r3, #1
 8008088:	d115      	bne.n	80080b6 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f103 020c 	add.w	r2, r3, #12
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008096:	7812      	ldrb	r2, [r2, #0]
 8008098:	b2d2      	uxtb	r2, r2
 800809a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	3b01      	subs	r3, #1
 80080ae:	b29a      	uxth	r2, r3
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080b4:	e011      	b.n	80080da <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080b6:	f7fc fc25 	bl	8004904 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d803      	bhi.n	80080ce <HAL_SPI_Receive+0x18e>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080cc:	d102      	bne.n	80080d4 <HAL_SPI_Receive+0x194>
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80080d8:	e0a4      	b.n	8008224 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080de:	b29b      	uxth	r3, r3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1cb      	bne.n	800807c <HAL_SPI_Receive+0x13c>
 80080e4:	e031      	b.n	800814a <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f003 0301 	and.w	r3, r3, #1
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d113      	bne.n	800811c <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	b292      	uxth	r2, r2
 8008100:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008106:	1c9a      	adds	r2, r3, #2
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008110:	b29b      	uxth	r3, r3
 8008112:	3b01      	subs	r3, #1
 8008114:	b29a      	uxth	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	87da      	strh	r2, [r3, #62]	; 0x3e
 800811a:	e011      	b.n	8008140 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800811c:	f7fc fbf2 	bl	8004904 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d803      	bhi.n	8008134 <HAL_SPI_Receive+0x1f4>
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008132:	d102      	bne.n	800813a <HAL_SPI_Receive+0x1fa>
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800813a:	2303      	movs	r3, #3
 800813c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800813e:	e071      	b.n	8008224 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1cd      	bne.n	80080e6 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008152:	d142      	bne.n	80081da <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	681a      	ldr	r2, [r3, #0]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008162:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	9300      	str	r3, [sp, #0]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2201      	movs	r2, #1
 800816c:	2101      	movs	r1, #1
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 fa81 	bl	8008676 <SPI_WaitFlagStateUntilTimeout>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d002      	beq.n	8008180 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800817a:	2303      	movs	r3, #3
 800817c:	75fb      	strb	r3, [r7, #23]
      goto error;
 800817e:	e051      	b.n	8008224 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008188:	d107      	bne.n	800819a <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008194:	b292      	uxth	r2, r2
 8008196:	801a      	strh	r2, [r3, #0]
 8008198:	e008      	b.n	80081ac <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f103 020c 	add.w	r2, r3, #12
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	b2d2      	uxtb	r2, r2
 80081aa:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	2201      	movs	r2, #1
 80081b4:	2101      	movs	r1, #1
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f000 fa5d 	bl	8008676 <SPI_WaitFlagStateUntilTimeout>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d008      	beq.n	80081d4 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c6:	f043 0202 	orr.w	r2, r3, #2
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	75fb      	strb	r3, [r7, #23]
      goto error;
 80081d2:	e027      	b.n	8008224 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081da:	693a      	ldr	r2, [r7, #16]
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 fab3 	bl	800874a <SPI_EndRxTransaction>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2220      	movs	r2, #32
 80081ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	f003 0310 	and.w	r3, r3, #16
 80081fa:	2b10      	cmp	r3, #16
 80081fc:	d10a      	bne.n	8008214 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008202:	f043 0202 	orr.w	r2, r3, #2
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008212:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008218:	2b00      	cmp	r3, #0
 800821a:	d002      	beq.n	8008222 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	75fb      	strb	r3, [r7, #23]
 8008220:	e000      	b.n	8008224 <HAL_SPI_Receive+0x2e4>
  }

error :
 8008222:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008234:	7dfb      	ldrb	r3, [r7, #23]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3718      	adds	r7, #24
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b08e      	sub	sp, #56	; 0x38
 8008242:	af02      	add	r7, sp, #8
 8008244:	60f8      	str	r0, [r7, #12]
 8008246:	60b9      	str	r1, [r7, #8]
 8008248:	607a      	str	r2, [r7, #4]
 800824a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800824c:	2301      	movs	r3, #1
 800824e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800825c:	2b01      	cmp	r3, #1
 800825e:	d101      	bne.n	8008264 <HAL_SPI_TransmitReceive+0x26>
 8008260:	2302      	movs	r3, #2
 8008262:	e1f6      	b.n	8008652 <HAL_SPI_TransmitReceive+0x414>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800826c:	f7fc fb4a 	bl	8004904 <HAL_GetTick>
 8008270:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008278:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008282:	887b      	ldrh	r3, [r7, #2]
 8008284:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008286:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800828a:	2b01      	cmp	r3, #1
 800828c:	d00f      	beq.n	80082ae <HAL_SPI_TransmitReceive+0x70>
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008294:	d107      	bne.n	80082a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d103      	bne.n	80082a6 <HAL_SPI_TransmitReceive+0x68>
 800829e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	d003      	beq.n	80082ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80082a6:	2302      	movs	r3, #2
 80082a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80082ac:	e1c7      	b.n	800863e <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <HAL_SPI_TransmitReceive+0x82>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d002      	beq.n	80082c0 <HAL_SPI_TransmitReceive+0x82>
 80082ba:	887b      	ldrh	r3, [r7, #2]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80082c0:	2301      	movs	r3, #1
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80082c6:	e1ba      	b.n	800863e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d003      	beq.n	80082dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2205      	movs	r2, #5
 80082d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	887a      	ldrh	r2, [r7, #2]
 80082ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	887a      	ldrh	r2, [r7, #2]
 80082f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	887a      	ldrh	r2, [r7, #2]
 80082fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	887a      	ldrh	r2, [r7, #2]
 8008304:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800831a:	d10f      	bne.n	800833c <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800833a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008346:	2b40      	cmp	r3, #64	; 0x40
 8008348:	d007      	beq.n	800835a <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008358:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008362:	f040 808b 	bne.w	800847c <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d002      	beq.n	8008374 <HAL_SPI_TransmitReceive+0x136>
 800836e:	8b7b      	ldrh	r3, [r7, #26]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d178      	bne.n	8008466 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008378:	881a      	ldrh	r2, [r3, #0]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008384:	1c9a      	adds	r2, r3, #2
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800838e:	b29b      	uxth	r3, r3
 8008390:	3b01      	subs	r3, #1
 8008392:	b29a      	uxth	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008398:	e065      	b.n	8008466 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d12d      	bne.n	8008404 <HAL_SPI_TransmitReceive+0x1c6>
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d028      	beq.n	8008404 <HAL_SPI_TransmitReceive+0x1c6>
 80083b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d125      	bne.n	8008404 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083bc:	881a      	ldrh	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c8:	1c9a      	adds	r2, r3, #2
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	3b01      	subs	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d10c      	bne.n	8008404 <HAL_SPI_TransmitReceive+0x1c6>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083f2:	d107      	bne.n	8008404 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008402:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b01      	cmp	r3, #1
 8008410:	d119      	bne.n	8008446 <HAL_SPI_TransmitReceive+0x208>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008416:	b29b      	uxth	r3, r3
 8008418:	2b00      	cmp	r3, #0
 800841a:	d014      	beq.n	8008446 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008426:	b292      	uxth	r2, r2
 8008428:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842e:	1c9a      	adds	r2, r3, #2
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008438:	b29b      	uxth	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008442:	2301      	movs	r3, #1
 8008444:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008446:	f7fc fa5d 	bl	8004904 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008452:	429a      	cmp	r2, r3
 8008454:	d807      	bhi.n	8008466 <HAL_SPI_TransmitReceive+0x228>
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845c:	d003      	beq.n	8008466 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008464:	e0eb      	b.n	800863e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800846a:	b29b      	uxth	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	d194      	bne.n	800839a <HAL_SPI_TransmitReceive+0x15c>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008474:	b29b      	uxth	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d18f      	bne.n	800839a <HAL_SPI_TransmitReceive+0x15c>
 800847a:	e08e      	b.n	800859a <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <HAL_SPI_TransmitReceive+0x24c>
 8008484:	8b7b      	ldrh	r3, [r7, #26]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d17d      	bne.n	8008586 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	330c      	adds	r3, #12
 8008494:	7812      	ldrb	r2, [r2, #0]
 8008496:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849c:	1c5a      	adds	r2, r3, #1
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084b0:	e069      	b.n	8008586 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d12e      	bne.n	800851e <HAL_SPI_TransmitReceive+0x2e0>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d029      	beq.n	800851e <HAL_SPI_TransmitReceive+0x2e0>
 80084ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084cc:	2b01      	cmp	r3, #1
 80084ce:	d126      	bne.n	800851e <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	330c      	adds	r3, #12
 80084da:	7812      	ldrb	r2, [r2, #0]
 80084dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084fe:	b29b      	uxth	r3, r3
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10c      	bne.n	800851e <HAL_SPI_TransmitReceive+0x2e0>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800850c:	d107      	bne.n	800851e <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800851c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f003 0301 	and.w	r3, r3, #1
 8008528:	2b01      	cmp	r3, #1
 800852a:	d119      	bne.n	8008560 <HAL_SPI_TransmitReceive+0x322>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008530:	b29b      	uxth	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	d014      	beq.n	8008560 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008540:	b2d2      	uxtb	r2, r2
 8008542:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800855c:	2301      	movs	r3, #1
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008560:	f7fc f9d0 	bl	8004904 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800856c:	429a      	cmp	r2, r3
 800856e:	d803      	bhi.n	8008578 <HAL_SPI_TransmitReceive+0x33a>
 8008570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d102      	bne.n	800857e <HAL_SPI_TransmitReceive+0x340>
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	2b00      	cmp	r3, #0
 800857c:	d103      	bne.n	8008586 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 800857e:	2303      	movs	r3, #3
 8008580:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008584:	e05b      	b.n	800863e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800858a:	b29b      	uxth	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	d190      	bne.n	80084b2 <HAL_SPI_TransmitReceive+0x274>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008594:	b29b      	uxth	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d18b      	bne.n	80084b2 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085a2:	d117      	bne.n	80085d4 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085aa:	2201      	movs	r2, #1
 80085ac:	2101      	movs	r1, #1
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f000 f861 	bl	8008676 <SPI_WaitFlagStateUntilTimeout>
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d009      	beq.n	80085ce <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085be:	f043 0202 	orr.w	r2, r3, #2
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80085c6:	2303      	movs	r3, #3
 80085c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80085cc:	e037      	b.n	800863e <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f003 0310 	and.w	r3, r3, #16
 80085de:	2b10      	cmp	r3, #16
 80085e0:	d10d      	bne.n	80085fe <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e6:	f043 0202 	orr.w	r2, r3, #2
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80085f6:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008600:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f906 	bl	8008814 <SPI_EndRxTxTransaction>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d006      	beq.n	800861c <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2220      	movs	r2, #32
 8008618:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800861a:	e010      	b.n	800863e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10b      	bne.n	800863c <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008624:	2300      	movs	r3, #0
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	617b      	str	r3, [r7, #20]
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	e000      	b.n	800863e <HAL_SPI_TransmitReceive+0x400>
  }

error :
 800863c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2201      	movs	r2, #1
 8008642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800864e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008652:	4618      	mov	r0, r3
 8008654:	3730      	adds	r7, #48	; 0x30
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008668:	b2db      	uxtb	r3, r3
}
 800866a:	4618      	mov	r0, r3
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	60f8      	str	r0, [r7, #12]
 800867e:	60b9      	str	r1, [r7, #8]
 8008680:	603b      	str	r3, [r7, #0]
 8008682:	4613      	mov	r3, r2
 8008684:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008686:	e04c      	b.n	8008722 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868e:	d048      	beq.n	8008722 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008690:	f7fc f938 	bl	8004904 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	429a      	cmp	r2, r3
 800869e:	d902      	bls.n	80086a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d13d      	bne.n	8008722 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086be:	d111      	bne.n	80086e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c8:	d004      	beq.n	80086d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086d2:	d107      	bne.n	80086e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ec:	d10f      	bne.n	800870e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800870c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e00f      	b.n	8008742 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4013      	ands	r3, r2
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	429a      	cmp	r2, r3
 8008730:	bf0c      	ite	eq
 8008732:	2301      	moveq	r3, #1
 8008734:	2300      	movne	r3, #0
 8008736:	b2db      	uxtb	r3, r3
 8008738:	461a      	mov	r2, r3
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	429a      	cmp	r2, r3
 800873e:	d1a3      	bne.n	8008688 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af02      	add	r7, sp, #8
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800875e:	d111      	bne.n	8008784 <SPI_EndRxTransaction+0x3a>
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008768:	d004      	beq.n	8008774 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008772:	d107      	bne.n	8008784 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008782:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800878c:	d12a      	bne.n	80087e4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008796:	d012      	beq.n	80087be <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2200      	movs	r2, #0
 80087a0:	2180      	movs	r1, #128	; 0x80
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f7ff ff67 	bl	8008676 <SPI_WaitFlagStateUntilTimeout>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d02d      	beq.n	800880a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b2:	f043 0220 	orr.w	r2, r3, #32
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e026      	b.n	800880c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2200      	movs	r2, #0
 80087c6:	2101      	movs	r1, #1
 80087c8:	68f8      	ldr	r0, [r7, #12]
 80087ca:	f7ff ff54 	bl	8008676 <SPI_WaitFlagStateUntilTimeout>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01a      	beq.n	800880a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d8:	f043 0220 	orr.w	r2, r3, #32
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e013      	b.n	800880c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2200      	movs	r2, #0
 80087ec:	2101      	movs	r1, #1
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f7ff ff41 	bl	8008676 <SPI_WaitFlagStateUntilTimeout>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d007      	beq.n	800880a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fe:	f043 0220 	orr.w	r2, r3, #32
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008806:	2303      	movs	r3, #3
 8008808:	e000      	b.n	800880c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b088      	sub	sp, #32
 8008818:	af02      	add	r7, sp, #8
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008820:	4b1b      	ldr	r3, [pc, #108]	; (8008890 <SPI_EndRxTxTransaction+0x7c>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a1b      	ldr	r2, [pc, #108]	; (8008894 <SPI_EndRxTxTransaction+0x80>)
 8008826:	fba2 2303 	umull	r2, r3, r2, r3
 800882a:	0d5b      	lsrs	r3, r3, #21
 800882c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008830:	fb02 f303 	mul.w	r3, r2, r3
 8008834:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800883e:	d112      	bne.n	8008866 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2200      	movs	r2, #0
 8008848:	2180      	movs	r1, #128	; 0x80
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff ff13 	bl	8008676 <SPI_WaitFlagStateUntilTimeout>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d016      	beq.n	8008884 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885a:	f043 0220 	orr.w	r2, r3, #32
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e00f      	b.n	8008886 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	3b01      	subs	r3, #1
 8008870:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887c:	2b80      	cmp	r3, #128	; 0x80
 800887e:	d0f2      	beq.n	8008866 <SPI_EndRxTxTransaction+0x52>
 8008880:	e000      	b.n	8008884 <SPI_EndRxTxTransaction+0x70>
        break;
 8008882:	bf00      	nop
  }

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	20000034 	.word	0x20000034
 8008894:	165e9f81 	.word	0x165e9f81

08008898 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008898:	b480      	push	{r7}
 800889a:	b085      	sub	sp, #20
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d029      	beq.n	8008906 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80088be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088c2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80088cc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80088d2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80088d8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80088de:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80088e4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80088ea:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80088f0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80088f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	601a      	str	r2, [r3, #0]
 8008904:	e034      	b.n	8008970 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008912:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800891c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008922:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	4313      	orrs	r3, r2
 8008928:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008936:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800893a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008944:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800894a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008950:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8008956:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800895c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	4313      	orrs	r3, r2
 8008962:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800897e:	b480      	push	{r7}
 8008980:	b087      	sub	sp, #28
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d02e      	beq.n	80089f6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80089a4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80089b4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80089be:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80089c8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80089d2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	3b01      	subs	r3, #1
 80089da:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80089dc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80089e6:	4313      	orrs	r3, r2
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	609a      	str	r2, [r3, #8]
 80089f4:	e03b      	b.n	8008a6e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008a02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a06:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	695b      	ldr	r3, [r3, #20]
 8008a14:	3b01      	subs	r3, #1
 8008a16:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a2c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008a3c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	3b01      	subs	r3, #1
 8008a44:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008a46:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008a50:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	3b01      	subs	r3, #1
 8008a58:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	60b9      	str	r1, [r7, #8]
 8008a86:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008a98:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008aa2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008aaa:	4313      	orrs	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008ab4:	f7fb ff26 	bl	8004904 <HAL_GetTick>
 8008ab8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008aba:	e010      	b.n	8008ade <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac2:	d00c      	beq.n	8008ade <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d007      	beq.n	8008ada <FMC_SDRAM_SendCommand+0x5e>
 8008aca:	f7fb ff1b 	bl	8004904 <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d201      	bcs.n	8008ade <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e006      	b.n	8008aec <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	f003 0320 	and.w	r3, r3, #32
 8008ae6:	2b20      	cmp	r3, #32
 8008ae8:	d0e8      	beq.n	8008abc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3718      	adds	r7, #24
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	695a      	ldr	r2, [r3, #20]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	431a      	orrs	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	370c      	adds	r7, #12
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
	...

08008b1c <arm_max_f32>:
 8008b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b20:	1e4f      	subs	r7, r1, #1
 8008b22:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8008b26:	f100 0e04 	add.w	lr, r0, #4
 8008b2a:	edd0 7a00 	vldr	s15, [r0]
 8008b2e:	d058      	beq.n	8008be2 <arm_max_f32+0xc6>
 8008b30:	3014      	adds	r0, #20
 8008b32:	46c4      	mov	ip, r8
 8008b34:	2604      	movs	r6, #4
 8008b36:	2400      	movs	r4, #0
 8008b38:	ed10 6a04 	vldr	s12, [r0, #-16]
 8008b3c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8008b40:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008b44:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008b48:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b50:	bfc8      	it	gt
 8008b52:	eef0 7a46 	vmovgt.f32	s15, s12
 8008b56:	f1a6 0503 	sub.w	r5, r6, #3
 8008b5a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008b5e:	bfc8      	it	gt
 8008b60:	462c      	movgt	r4, r5
 8008b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b66:	bf48      	it	mi
 8008b68:	eef0 7a66 	vmovmi.f32	s15, s13
 8008b6c:	f1a6 0502 	sub.w	r5, r6, #2
 8008b70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b74:	bf48      	it	mi
 8008b76:	462c      	movmi	r4, r5
 8008b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b7c:	bf48      	it	mi
 8008b7e:	eef0 7a47 	vmovmi.f32	s15, s14
 8008b82:	f106 35ff 	add.w	r5, r6, #4294967295
 8008b86:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008b8a:	bf48      	it	mi
 8008b8c:	462c      	movmi	r4, r5
 8008b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b92:	bf48      	it	mi
 8008b94:	4634      	movmi	r4, r6
 8008b96:	bf48      	it	mi
 8008b98:	eef0 7a65 	vmovmi.f32	s15, s11
 8008b9c:	f1bc 0c01 	subs.w	ip, ip, #1
 8008ba0:	f100 0010 	add.w	r0, r0, #16
 8008ba4:	f106 0604 	add.w	r6, r6, #4
 8008ba8:	d1c6      	bne.n	8008b38 <arm_max_f32+0x1c>
 8008baa:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8008bae:	f017 0003 	ands.w	r0, r7, #3
 8008bb2:	d018      	beq.n	8008be6 <arm_max_f32+0xca>
 8008bb4:	1a08      	subs	r0, r1, r0
 8008bb6:	ecbe 7a01 	vldmia	lr!, {s14}
 8008bba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc2:	bfc8      	it	gt
 8008bc4:	4604      	movgt	r4, r0
 8008bc6:	f100 0001 	add.w	r0, r0, #1
 8008bca:	bfd8      	it	le
 8008bcc:	eeb0 7a67 	vmovle.f32	s14, s15
 8008bd0:	4281      	cmp	r1, r0
 8008bd2:	eef0 7a47 	vmov.f32	s15, s14
 8008bd6:	d1ee      	bne.n	8008bb6 <arm_max_f32+0x9a>
 8008bd8:	ed82 7a00 	vstr	s14, [r2]
 8008bdc:	601c      	str	r4, [r3, #0]
 8008bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be2:	4644      	mov	r4, r8
 8008be4:	e7e3      	b.n	8008bae <arm_max_f32+0x92>
 8008be6:	eeb0 7a67 	vmov.f32	s14, s15
 8008bea:	e7f5      	b.n	8008bd8 <arm_max_f32+0xbc>

08008bec <arm_cfft_radix8by2_f32>:
 8008bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf0:	ed2d 8b08 	vpush	{d8-d11}
 8008bf4:	4607      	mov	r7, r0
 8008bf6:	4608      	mov	r0, r1
 8008bf8:	f8b7 e000 	ldrh.w	lr, [r7]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8008c02:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8008c06:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8008c0a:	f000 80b0 	beq.w	8008d6e <arm_cfft_radix8by2_f32+0x182>
 8008c0e:	008b      	lsls	r3, r1, #2
 8008c10:	3310      	adds	r3, #16
 8008c12:	18c6      	adds	r6, r0, r3
 8008c14:	3210      	adds	r2, #16
 8008c16:	4443      	add	r3, r8
 8008c18:	f100 0510 	add.w	r5, r0, #16
 8008c1c:	f108 0410 	add.w	r4, r8, #16
 8008c20:	ed54 1a04 	vldr	s3, [r4, #-16]
 8008c24:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008c28:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008c2c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008c30:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008c34:	ed13 5a01 	vldr	s10, [r3, #-4]
 8008c38:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008c3c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008c40:	ed16 2a04 	vldr	s4, [r6, #-16]
 8008c44:	ed56 2a03 	vldr	s5, [r6, #-12]
 8008c48:	ed15 6a03 	vldr	s12, [r5, #-12]
 8008c4c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8008c50:	ed15 3a04 	vldr	s6, [r5, #-16]
 8008c54:	ed56 0a02 	vldr	s1, [r6, #-8]
 8008c58:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008c5c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8008c60:	ee73 ba21 	vadd.f32	s23, s6, s3
 8008c64:	ee36 ba26 	vadd.f32	s22, s12, s13
 8008c68:	ee37 aa27 	vadd.f32	s20, s14, s15
 8008c6c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8008c70:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8008c74:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008c78:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008c7c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8008c80:	ed45 ba04 	vstr	s23, [r5, #-16]
 8008c84:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008c88:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008c8c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8008c90:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008c94:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008c98:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008c9c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008ca0:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008ca4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008ca8:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008cac:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008cb0:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008cb4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008cb8:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008cbc:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008cc0:	ee63 1a22 	vmul.f32	s3, s6, s5
 8008cc4:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008cc8:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008ccc:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8008cd0:	ee23 6a86 	vmul.f32	s12, s7, s12
 8008cd4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008cd8:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008cdc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008ce0:	ee72 3a63 	vsub.f32	s7, s4, s7
 8008ce4:	ee71 2a88 	vadd.f32	s5, s3, s16
 8008ce8:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008cec:	ed44 2a04 	vstr	s5, [r4, #-16]
 8008cf0:	ed43 3a04 	vstr	s7, [r3, #-16]
 8008cf4:	ed03 6a03 	vstr	s12, [r3, #-12]
 8008cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cfc:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8008d00:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008d04:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008d08:	ee35 6a41 	vsub.f32	s12, s10, s2
 8008d0c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008d10:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008d14:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008d18:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8008d1c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008d20:	ee64 4a87 	vmul.f32	s9, s9, s14
 8008d24:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008d28:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008d2c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008d30:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008d34:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008d38:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008d3c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008d40:	f1be 0e01 	subs.w	lr, lr, #1
 8008d44:	ed44 5a02 	vstr	s11, [r4, #-8]
 8008d48:	f105 0510 	add.w	r5, r5, #16
 8008d4c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008d50:	f106 0610 	add.w	r6, r6, #16
 8008d54:	ed03 6a02 	vstr	s12, [r3, #-8]
 8008d58:	ed03 7a01 	vstr	s14, [r3, #-4]
 8008d5c:	f102 0210 	add.w	r2, r2, #16
 8008d60:	f104 0410 	add.w	r4, r4, #16
 8008d64:	f103 0310 	add.w	r3, r3, #16
 8008d68:	f47f af5a 	bne.w	8008c20 <arm_cfft_radix8by2_f32+0x34>
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	b28c      	uxth	r4, r1
 8008d70:	4621      	mov	r1, r4
 8008d72:	2302      	movs	r3, #2
 8008d74:	f000 fbca 	bl	800950c <arm_radix8_butterfly_f32>
 8008d78:	ecbd 8b08 	vpop	{d8-d11}
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	4640      	mov	r0, r8
 8008d82:	2302      	movs	r3, #2
 8008d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d88:	f000 bbc0 	b.w	800950c <arm_radix8_butterfly_f32>

08008d8c <arm_cfft_radix8by4_f32>:
 8008d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d90:	ed2d 8b0a 	vpush	{d8-d12}
 8008d94:	8802      	ldrh	r2, [r0, #0]
 8008d96:	ed91 6a00 	vldr	s12, [r1]
 8008d9a:	b08f      	sub	sp, #60	; 0x3c
 8008d9c:	460f      	mov	r7, r1
 8008d9e:	0852      	lsrs	r2, r2, #1
 8008da0:	6841      	ldr	r1, [r0, #4]
 8008da2:	900c      	str	r0, [sp, #48]	; 0x30
 8008da4:	0093      	lsls	r3, r2, #2
 8008da6:	4638      	mov	r0, r7
 8008da8:	4418      	add	r0, r3
 8008daa:	4606      	mov	r6, r0
 8008dac:	9009      	str	r0, [sp, #36]	; 0x24
 8008dae:	4418      	add	r0, r3
 8008db0:	edd0 6a00 	vldr	s13, [r0]
 8008db4:	ed96 4a00 	vldr	s8, [r6]
 8008db8:	edd6 2a01 	vldr	s5, [r6, #4]
 8008dbc:	edd0 7a01 	vldr	s15, [r0, #4]
 8008dc0:	900a      	str	r0, [sp, #40]	; 0x28
 8008dc2:	ee76 5a26 	vadd.f32	s11, s12, s13
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	4625      	mov	r5, r4
 8008dca:	441c      	add	r4, r3
 8008dcc:	edd4 4a00 	vldr	s9, [r4]
 8008dd0:	ed97 7a01 	vldr	s14, [r7, #4]
 8008dd4:	ed94 3a01 	vldr	s6, [r4, #4]
 8008dd8:	9401      	str	r4, [sp, #4]
 8008dda:	ee35 5a84 	vadd.f32	s10, s11, s8
 8008dde:	4630      	mov	r0, r6
 8008de0:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008de4:	463e      	mov	r6, r7
 8008de6:	ee15 ea10 	vmov	lr, s10
 8008dea:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008dee:	f846 eb08 	str.w	lr, [r6], #8
 8008df2:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008df6:	ed90 5a01 	vldr	s10, [r0, #4]
 8008dfa:	9605      	str	r6, [sp, #20]
 8008dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e00:	9e01      	ldr	r6, [sp, #4]
 8008e02:	9707      	str	r7, [sp, #28]
 8008e04:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8008e08:	ed96 2a01 	vldr	s4, [r6, #4]
 8008e0c:	ee36 7a05 	vadd.f32	s14, s12, s10
 8008e10:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8008e14:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8008e18:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008e1c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8008e20:	4604      	mov	r4, r0
 8008e22:	46a3      	mov	fp, r4
 8008e24:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008e28:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008e2c:	ee14 8a10 	vmov	r8, s8
 8008e30:	46a4      	mov	ip, r4
 8008e32:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8008e36:	ed87 7a01 	vstr	s14, [r7, #4]
 8008e3a:	f84b 8b08 	str.w	r8, [fp], #8
 8008e3e:	f1ac 0704 	sub.w	r7, ip, #4
 8008e42:	ed8c 5a01 	vstr	s10, [ip, #4]
 8008e46:	f101 0c08 	add.w	ip, r1, #8
 8008e4a:	462c      	mov	r4, r5
 8008e4c:	f8cd c010 	str.w	ip, [sp, #16]
 8008e50:	ee15 ca90 	vmov	ip, s11
 8008e54:	ee36 6a62 	vsub.f32	s12, s12, s5
 8008e58:	f844 cb08 	str.w	ip, [r4], #8
 8008e5c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008e60:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008e64:	9406      	str	r4, [sp, #24]
 8008e66:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008e6a:	f101 0410 	add.w	r4, r1, #16
 8008e6e:	0852      	lsrs	r2, r2, #1
 8008e70:	9402      	str	r4, [sp, #8]
 8008e72:	ed85 6a01 	vstr	s12, [r5, #4]
 8008e76:	462c      	mov	r4, r5
 8008e78:	f101 0518 	add.w	r5, r1, #24
 8008e7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8008e7e:	46b2      	mov	sl, r6
 8008e80:	9503      	str	r5, [sp, #12]
 8008e82:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008e86:	3a02      	subs	r2, #2
 8008e88:	ee16 5a90 	vmov	r5, s13
 8008e8c:	46b6      	mov	lr, r6
 8008e8e:	4630      	mov	r0, r6
 8008e90:	0852      	lsrs	r2, r2, #1
 8008e92:	f84a 5b08 	str.w	r5, [sl], #8
 8008e96:	f1a0 0604 	sub.w	r6, r0, #4
 8008e9a:	edce 7a01 	vstr	s15, [lr, #4]
 8008e9e:	9208      	str	r2, [sp, #32]
 8008ea0:	f000 8130 	beq.w	8009104 <arm_cfft_radix8by4_f32+0x378>
 8008ea4:	4691      	mov	r9, r2
 8008ea6:	9a07      	ldr	r2, [sp, #28]
 8008ea8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008eac:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008eb0:	3b08      	subs	r3, #8
 8008eb2:	f102 0510 	add.w	r5, r2, #16
 8008eb6:	f101 0c20 	add.w	ip, r1, #32
 8008eba:	f1a4 020c 	sub.w	r2, r4, #12
 8008ebe:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8008ec2:	4433      	add	r3, r6
 8008ec4:	3410      	adds	r4, #16
 8008ec6:	4650      	mov	r0, sl
 8008ec8:	4659      	mov	r1, fp
 8008eca:	ed55 3a02 	vldr	s7, [r5, #-8]
 8008ece:	ed14 5a02 	vldr	s10, [r4, #-8]
 8008ed2:	ed91 7a00 	vldr	s14, [r1]
 8008ed6:	edd0 7a00 	vldr	s15, [r0]
 8008eda:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008ede:	ed15 4a01 	vldr	s8, [r5, #-4]
 8008ee2:	edd0 6a01 	vldr	s13, [r0, #4]
 8008ee6:	ed91 6a01 	vldr	s12, [r1, #4]
 8008eea:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008eee:	ee34 0a25 	vadd.f32	s0, s8, s11
 8008ef2:	ee78 4a07 	vadd.f32	s9, s16, s14
 8008ef6:	ee74 5a65 	vsub.f32	s11, s8, s11
 8008efa:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8008efe:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8008f02:	ed45 4a02 	vstr	s9, [r5, #-8]
 8008f06:	edd1 4a01 	vldr	s9, [r1, #4]
 8008f0a:	ed90 4a01 	vldr	s8, [r0, #4]
 8008f0e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8008f12:	ee75 aa06 	vadd.f32	s21, s10, s12
 8008f16:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008f1a:	ee35 aac7 	vsub.f32	s20, s11, s14
 8008f1e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8008f22:	edd6 1a00 	vldr	s3, [r6]
 8008f26:	edd7 0a00 	vldr	s1, [r7]
 8008f2a:	ed92 4a02 	vldr	s8, [r2, #8]
 8008f2e:	edd3 3a02 	vldr	s7, [r3, #8]
 8008f32:	ed93 2a01 	vldr	s4, [r3, #4]
 8008f36:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008f3a:	edd2 2a01 	vldr	s5, [r2, #4]
 8008f3e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8008f42:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8008f46:	ee39 3a81 	vadd.f32	s6, s19, s2
 8008f4a:	ee74 8a84 	vadd.f32	s17, s9, s8
 8008f4e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8008f52:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8008f56:	ee7a aae6 	vsub.f32	s21, s21, s13
 8008f5a:	ee18 aa90 	vmov	sl, s17
 8008f5e:	f847 a908 	str.w	sl, [r7], #-8
 8008f62:	edd2 8a01 	vldr	s17, [r2, #4]
 8008f66:	ed93 9a01 	vldr	s18, [r3, #4]
 8008f6a:	ee73 8a28 	vadd.f32	s17, s6, s17
 8008f6e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8008f72:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008f76:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008f7a:	edc7 8a01 	vstr	s17, [r7, #4]
 8008f7e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8008f82:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008f86:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008f8a:	ee6a ba28 	vmul.f32	s23, s20, s17
 8008f8e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8008f92:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008f96:	ee31 9a20 	vadd.f32	s18, s2, s1
 8008f9a:	ee79 9a82 	vadd.f32	s19, s19, s4
 8008f9e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8008fa2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008fa6:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008faa:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8008fae:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8008fb2:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008fb6:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008fba:	ee1c aa10 	vmov	sl, s24
 8008fbe:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8008fc2:	f841 ab08 	str.w	sl, [r1], #8
 8008fc6:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8008fca:	ee3b bacb 	vsub.f32	s22, s23, s22
 8008fce:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8008fd2:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008fd6:	ed01 aa01 	vstr	s20, [r1, #-4]
 8008fda:	edc2 8a01 	vstr	s17, [r2, #4]
 8008fde:	ed82 ba02 	vstr	s22, [r2, #8]
 8008fe2:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8008fe6:	ee74 3a63 	vsub.f32	s7, s8, s7
 8008fea:	ee38 8a47 	vsub.f32	s16, s16, s14
 8008fee:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8008ff2:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008ff6:	ee33 3a42 	vsub.f32	s6, s6, s4
 8008ffa:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008ffe:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009002:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8009006:	ee63 8a04 	vmul.f32	s17, s6, s8
 800900a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800900e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8009012:	ee28 8a04 	vmul.f32	s16, s16, s8
 8009016:	ee20 0a24 	vmul.f32	s0, s0, s9
 800901a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800901e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8009022:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8009026:	ee14 aa10 	vmov	sl, s8
 800902a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800902e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8009032:	ed44 9a02 	vstr	s19, [r4, #-8]
 8009036:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800903a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800903e:	f846 a908 	str.w	sl, [r6], #-8
 8009042:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009046:	ee35 7a87 	vadd.f32	s14, s11, s14
 800904a:	edc6 3a01 	vstr	s7, [r6, #4]
 800904e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009056:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800905a:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800905e:	ee67 5a86 	vmul.f32	s11, s15, s12
 8009062:	ee26 5a87 	vmul.f32	s10, s13, s14
 8009066:	ee72 2a62 	vsub.f32	s5, s4, s5
 800906a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800906e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8009072:	ee75 5a25 	vadd.f32	s11, s10, s11
 8009076:	ee62 0a86 	vmul.f32	s1, s5, s12
 800907a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800907e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009082:	ee21 6a06 	vmul.f32	s12, s2, s12
 8009086:	ee62 2a87 	vmul.f32	s5, s5, s14
 800908a:	ee21 1a07 	vmul.f32	s2, s2, s14
 800908e:	ee15 aa90 	vmov	sl, s11
 8009092:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009096:	f840 ab08 	str.w	sl, [r0], #8
 800909a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800909e:	ee76 2a22 	vadd.f32	s5, s12, s5
 80090a2:	f1b9 0901 	subs.w	r9, r9, #1
 80090a6:	ed40 7a01 	vstr	s15, [r0, #-4]
 80090aa:	f105 0508 	add.w	r5, r5, #8
 80090ae:	ed83 1a02 	vstr	s2, [r3, #8]
 80090b2:	edc3 2a01 	vstr	s5, [r3, #4]
 80090b6:	f108 0808 	add.w	r8, r8, #8
 80090ba:	f1a2 0208 	sub.w	r2, r2, #8
 80090be:	f10c 0c10 	add.w	ip, ip, #16
 80090c2:	f104 0408 	add.w	r4, r4, #8
 80090c6:	f10e 0e18 	add.w	lr, lr, #24
 80090ca:	f1a3 0308 	sub.w	r3, r3, #8
 80090ce:	f47f aefc 	bne.w	8008eca <arm_cfft_radix8by4_f32+0x13e>
 80090d2:	9908      	ldr	r1, [sp, #32]
 80090d4:	9802      	ldr	r0, [sp, #8]
 80090d6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80090da:	00cb      	lsls	r3, r1, #3
 80090dc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80090e0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80090e4:	9102      	str	r1, [sp, #8]
 80090e6:	9905      	ldr	r1, [sp, #20]
 80090e8:	4419      	add	r1, r3
 80090ea:	9105      	str	r1, [sp, #20]
 80090ec:	9904      	ldr	r1, [sp, #16]
 80090ee:	4419      	add	r1, r3
 80090f0:	9104      	str	r1, [sp, #16]
 80090f2:	9906      	ldr	r1, [sp, #24]
 80090f4:	449b      	add	fp, r3
 80090f6:	4419      	add	r1, r3
 80090f8:	449a      	add	sl, r3
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	9106      	str	r1, [sp, #24]
 80090fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009102:	9303      	str	r3, [sp, #12]
 8009104:	9a05      	ldr	r2, [sp, #20]
 8009106:	9806      	ldr	r0, [sp, #24]
 8009108:	ed92 4a00 	vldr	s8, [r2]
 800910c:	ed90 7a00 	vldr	s14, [r0]
 8009110:	ed9b 3a00 	vldr	s6, [fp]
 8009114:	edda 3a00 	vldr	s7, [sl]
 8009118:	edd2 4a01 	vldr	s9, [r2, #4]
 800911c:	edd0 6a01 	vldr	s13, [r0, #4]
 8009120:	ed9a 2a01 	vldr	s4, [sl, #4]
 8009124:	eddb 7a01 	vldr	s15, [fp, #4]
 8009128:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800912c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800912e:	ee34 6a07 	vadd.f32	s12, s8, s14
 8009132:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8009136:	ee36 5a03 	vadd.f32	s10, s12, s6
 800913a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800913e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009142:	ee34 7a47 	vsub.f32	s14, s8, s14
 8009146:	ed82 5a00 	vstr	s10, [r2]
 800914a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800914e:	edda 4a01 	vldr	s9, [sl, #4]
 8009152:	ee35 5a85 	vadd.f32	s10, s11, s10
 8009156:	ee37 4a27 	vadd.f32	s8, s14, s15
 800915a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800915e:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8009162:	ed82 5a01 	vstr	s10, [r2, #4]
 8009166:	9a04      	ldr	r2, [sp, #16]
 8009168:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800916c:	edd2 1a00 	vldr	s3, [r2]
 8009170:	edd2 2a01 	vldr	s5, [r2, #4]
 8009174:	9a02      	ldr	r2, [sp, #8]
 8009176:	ee34 4a42 	vsub.f32	s8, s8, s4
 800917a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800917e:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009182:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009186:	ee65 2a22 	vmul.f32	s5, s10, s5
 800918a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800918e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009192:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009196:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800919a:	edcb 2a00 	vstr	s5, [fp]
 800919e:	ed8b 5a01 	vstr	s10, [fp, #4]
 80091a2:	ed92 4a01 	vldr	s8, [r2, #4]
 80091a6:	ed92 5a00 	vldr	s10, [r2]
 80091aa:	9a03      	ldr	r2, [sp, #12]
 80091ac:	ee36 6a63 	vsub.f32	s12, s12, s7
 80091b0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80091b4:	ee66 4a05 	vmul.f32	s9, s12, s10
 80091b8:	ee25 5a85 	vmul.f32	s10, s11, s10
 80091bc:	ee26 6a04 	vmul.f32	s12, s12, s8
 80091c0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80091c4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80091c8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80091cc:	ee76 6a83 	vadd.f32	s13, s13, s6
 80091d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80091d4:	ed80 6a01 	vstr	s12, [r0, #4]
 80091d8:	edc0 5a00 	vstr	s11, [r0]
 80091dc:	edd2 5a01 	vldr	s11, [r2, #4]
 80091e0:	9807      	ldr	r0, [sp, #28]
 80091e2:	ee77 7a02 	vadd.f32	s15, s14, s4
 80091e6:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80091ea:	edd2 6a00 	vldr	s13, [r2]
 80091ee:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80091f2:	ee67 6a26 	vmul.f32	s13, s14, s13
 80091f6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80091fa:	ee27 7a25 	vmul.f32	s14, s14, s11
 80091fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009202:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009206:	edca 7a01 	vstr	s15, [sl, #4]
 800920a:	ed8a 7a00 	vstr	s14, [sl]
 800920e:	6872      	ldr	r2, [r6, #4]
 8009210:	4621      	mov	r1, r4
 8009212:	2304      	movs	r3, #4
 8009214:	f000 f97a 	bl	800950c <arm_radix8_butterfly_f32>
 8009218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800921a:	6872      	ldr	r2, [r6, #4]
 800921c:	4621      	mov	r1, r4
 800921e:	2304      	movs	r3, #4
 8009220:	f000 f974 	bl	800950c <arm_radix8_butterfly_f32>
 8009224:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009226:	6872      	ldr	r2, [r6, #4]
 8009228:	4621      	mov	r1, r4
 800922a:	2304      	movs	r3, #4
 800922c:	f000 f96e 	bl	800950c <arm_radix8_butterfly_f32>
 8009230:	6872      	ldr	r2, [r6, #4]
 8009232:	9801      	ldr	r0, [sp, #4]
 8009234:	4621      	mov	r1, r4
 8009236:	2304      	movs	r3, #4
 8009238:	b00f      	add	sp, #60	; 0x3c
 800923a:	ecbd 8b0a 	vpop	{d8-d12}
 800923e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009242:	f000 b963 	b.w	800950c <arm_radix8_butterfly_f32>
 8009246:	bf00      	nop

08009248 <arm_cfft_f32>:
 8009248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924c:	2a01      	cmp	r2, #1
 800924e:	4606      	mov	r6, r0
 8009250:	4617      	mov	r7, r2
 8009252:	460c      	mov	r4, r1
 8009254:	4698      	mov	r8, r3
 8009256:	8805      	ldrh	r5, [r0, #0]
 8009258:	d054      	beq.n	8009304 <arm_cfft_f32+0xbc>
 800925a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800925e:	d04c      	beq.n	80092fa <arm_cfft_f32+0xb2>
 8009260:	d916      	bls.n	8009290 <arm_cfft_f32+0x48>
 8009262:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8009266:	d01a      	beq.n	800929e <arm_cfft_f32+0x56>
 8009268:	d95c      	bls.n	8009324 <arm_cfft_f32+0xdc>
 800926a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800926e:	d044      	beq.n	80092fa <arm_cfft_f32+0xb2>
 8009270:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009274:	d105      	bne.n	8009282 <arm_cfft_f32+0x3a>
 8009276:	2301      	movs	r3, #1
 8009278:	6872      	ldr	r2, [r6, #4]
 800927a:	4629      	mov	r1, r5
 800927c:	4620      	mov	r0, r4
 800927e:	f000 f945 	bl	800950c <arm_radix8_butterfly_f32>
 8009282:	f1b8 0f00 	cmp.w	r8, #0
 8009286:	d111      	bne.n	80092ac <arm_cfft_f32+0x64>
 8009288:	2f01      	cmp	r7, #1
 800928a:	d016      	beq.n	80092ba <arm_cfft_f32+0x72>
 800928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009290:	2d20      	cmp	r5, #32
 8009292:	d032      	beq.n	80092fa <arm_cfft_f32+0xb2>
 8009294:	d94a      	bls.n	800932c <arm_cfft_f32+0xe4>
 8009296:	2d40      	cmp	r5, #64	; 0x40
 8009298:	d0ed      	beq.n	8009276 <arm_cfft_f32+0x2e>
 800929a:	2d80      	cmp	r5, #128	; 0x80
 800929c:	d1f1      	bne.n	8009282 <arm_cfft_f32+0x3a>
 800929e:	4621      	mov	r1, r4
 80092a0:	4630      	mov	r0, r6
 80092a2:	f7ff fca3 	bl	8008bec <arm_cfft_radix8by2_f32>
 80092a6:	f1b8 0f00 	cmp.w	r8, #0
 80092aa:	d0ed      	beq.n	8009288 <arm_cfft_f32+0x40>
 80092ac:	68b2      	ldr	r2, [r6, #8]
 80092ae:	89b1      	ldrh	r1, [r6, #12]
 80092b0:	4620      	mov	r0, r4
 80092b2:	f7f6 ff9d 	bl	80001f0 <arm_bitreversal_32>
 80092b6:	2f01      	cmp	r7, #1
 80092b8:	d1e8      	bne.n	800928c <arm_cfft_f32+0x44>
 80092ba:	ee07 5a90 	vmov	s15, r5
 80092be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80092ca:	2d00      	cmp	r5, #0
 80092cc:	d0de      	beq.n	800928c <arm_cfft_f32+0x44>
 80092ce:	f104 0108 	add.w	r1, r4, #8
 80092d2:	2300      	movs	r3, #0
 80092d4:	3301      	adds	r3, #1
 80092d6:	429d      	cmp	r5, r3
 80092d8:	f101 0108 	add.w	r1, r1, #8
 80092dc:	ed11 7a04 	vldr	s14, [r1, #-16]
 80092e0:	ed51 7a03 	vldr	s15, [r1, #-12]
 80092e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80092e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80092ec:	ed01 7a04 	vstr	s14, [r1, #-16]
 80092f0:	ed41 7a03 	vstr	s15, [r1, #-12]
 80092f4:	d1ee      	bne.n	80092d4 <arm_cfft_f32+0x8c>
 80092f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092fa:	4621      	mov	r1, r4
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7ff fd45 	bl	8008d8c <arm_cfft_radix8by4_f32>
 8009302:	e7be      	b.n	8009282 <arm_cfft_f32+0x3a>
 8009304:	b1ad      	cbz	r5, 8009332 <arm_cfft_f32+0xea>
 8009306:	f101 030c 	add.w	r3, r1, #12
 800930a:	2200      	movs	r2, #0
 800930c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8009310:	3201      	adds	r2, #1
 8009312:	eef1 7a67 	vneg.f32	s15, s15
 8009316:	4295      	cmp	r5, r2
 8009318:	ed43 7a02 	vstr	s15, [r3, #-8]
 800931c:	f103 0308 	add.w	r3, r3, #8
 8009320:	d1f4      	bne.n	800930c <arm_cfft_f32+0xc4>
 8009322:	e79a      	b.n	800925a <arm_cfft_f32+0x12>
 8009324:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8009328:	d0a5      	beq.n	8009276 <arm_cfft_f32+0x2e>
 800932a:	e7aa      	b.n	8009282 <arm_cfft_f32+0x3a>
 800932c:	2d10      	cmp	r5, #16
 800932e:	d0b6      	beq.n	800929e <arm_cfft_f32+0x56>
 8009330:	e7a7      	b.n	8009282 <arm_cfft_f32+0x3a>
 8009332:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009336:	d894      	bhi.n	8009262 <arm_cfft_f32+0x1a>
 8009338:	e7aa      	b.n	8009290 <arm_cfft_f32+0x48>
 800933a:	bf00      	nop

0800933c <arm_cmplx_mag_f32>:
 800933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009340:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8009344:	b084      	sub	sp, #16
 8009346:	d07f      	beq.n	8009448 <arm_cmplx_mag_f32+0x10c>
 8009348:	2700      	movs	r7, #0
 800934a:	f100 0420 	add.w	r4, r0, #32
 800934e:	f101 0510 	add.w	r5, r1, #16
 8009352:	4646      	mov	r6, r8
 8009354:	e05a      	b.n	800940c <arm_cmplx_mag_f32+0xd0>
 8009356:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800935a:	eeb4 0a40 	vcmp.f32	s0, s0
 800935e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009362:	f040 80a4 	bne.w	80094ae <arm_cmplx_mag_f32+0x172>
 8009366:	ed05 0a04 	vstr	s0, [r5, #-16]
 800936a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800936e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8009372:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009376:	ee20 0a00 	vmul.f32	s0, s0, s0
 800937a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800937e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009386:	f2c0 808f 	blt.w	80094a8 <arm_cmplx_mag_f32+0x16c>
 800938a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800938e:	eeb4 0a40 	vcmp.f32	s0, s0
 8009392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009396:	f040 80af 	bne.w	80094f8 <arm_cmplx_mag_f32+0x1bc>
 800939a:	ed05 0a03 	vstr	s0, [r5, #-12]
 800939e:	ed54 7a04 	vldr	s15, [r4, #-16]
 80093a2:	ed14 0a03 	vldr	s0, [r4, #-12]
 80093a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093aa:	ee20 0a00 	vmul.f32	s0, s0, s0
 80093ae:	ee77 7a80 	vadd.f32	s15, s15, s0
 80093b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ba:	db72      	blt.n	80094a2 <arm_cmplx_mag_f32+0x166>
 80093bc:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80093c0:	eeb4 0a40 	vcmp.f32	s0, s0
 80093c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093c8:	f040 808c 	bne.w	80094e4 <arm_cmplx_mag_f32+0x1a8>
 80093cc:	ed05 0a02 	vstr	s0, [r5, #-8]
 80093d0:	ed54 7a02 	vldr	s15, [r4, #-8]
 80093d4:	ed14 0a01 	vldr	s0, [r4, #-4]
 80093d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80093e0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80093e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80093e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ec:	db20      	blt.n	8009430 <arm_cmplx_mag_f32+0xf4>
 80093ee:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80093f2:	eeb4 0a40 	vcmp.f32	s0, s0
 80093f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093fa:	d169      	bne.n	80094d0 <arm_cmplx_mag_f32+0x194>
 80093fc:	3e01      	subs	r6, #1
 80093fe:	ed05 0a01 	vstr	s0, [r5, #-4]
 8009402:	f104 0420 	add.w	r4, r4, #32
 8009406:	f105 0510 	add.w	r5, r5, #16
 800940a:	d019      	beq.n	8009440 <arm_cmplx_mag_f32+0x104>
 800940c:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8009410:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8009414:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009418:	ee20 0a00 	vmul.f32	s0, s0, s0
 800941c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009428:	da95      	bge.n	8009356 <arm_cmplx_mag_f32+0x1a>
 800942a:	f845 7c10 	str.w	r7, [r5, #-16]
 800942e:	e79c      	b.n	800936a <arm_cmplx_mag_f32+0x2e>
 8009430:	3e01      	subs	r6, #1
 8009432:	f845 7c04 	str.w	r7, [r5, #-4]
 8009436:	f104 0420 	add.w	r4, r4, #32
 800943a:	f105 0510 	add.w	r5, r5, #16
 800943e:	d1e5      	bne.n	800940c <arm_cmplx_mag_f32+0xd0>
 8009440:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8009444:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8009448:	f012 0503 	ands.w	r5, r2, #3
 800944c:	d026      	beq.n	800949c <arm_cmplx_mag_f32+0x160>
 800944e:	2600      	movs	r6, #0
 8009450:	f100 0408 	add.w	r4, r0, #8
 8009454:	e00c      	b.n	8009470 <arm_cmplx_mag_f32+0x134>
 8009456:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800945a:	eeb4 0a40 	vcmp.f32	s0, s0
 800945e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009462:	d12e      	bne.n	80094c2 <arm_cmplx_mag_f32+0x186>
 8009464:	3d01      	subs	r5, #1
 8009466:	ed01 0a01 	vstr	s0, [r1, #-4]
 800946a:	f104 0408 	add.w	r4, r4, #8
 800946e:	d015      	beq.n	800949c <arm_cmplx_mag_f32+0x160>
 8009470:	ed54 7a02 	vldr	s15, [r4, #-8]
 8009474:	ed14 0a01 	vldr	s0, [r4, #-4]
 8009478:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800947c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009480:	3104      	adds	r1, #4
 8009482:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800948a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948e:	dae2      	bge.n	8009456 <arm_cmplx_mag_f32+0x11a>
 8009490:	3d01      	subs	r5, #1
 8009492:	f841 6c04 	str.w	r6, [r1, #-4]
 8009496:	f104 0408 	add.w	r4, r4, #8
 800949a:	d1e9      	bne.n	8009470 <arm_cmplx_mag_f32+0x134>
 800949c:	b004      	add	sp, #16
 800949e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a2:	f845 7c08 	str.w	r7, [r5, #-8]
 80094a6:	e793      	b.n	80093d0 <arm_cmplx_mag_f32+0x94>
 80094a8:	f845 7c0c 	str.w	r7, [r5, #-12]
 80094ac:	e777      	b.n	800939e <arm_cmplx_mag_f32+0x62>
 80094ae:	eeb0 0a67 	vmov.f32	s0, s15
 80094b2:	9203      	str	r2, [sp, #12]
 80094b4:	9102      	str	r1, [sp, #8]
 80094b6:	9001      	str	r0, [sp, #4]
 80094b8:	f004 fc60 	bl	800dd7c <sqrtf>
 80094bc:	a801      	add	r0, sp, #4
 80094be:	c807      	ldmia	r0, {r0, r1, r2}
 80094c0:	e751      	b.n	8009366 <arm_cmplx_mag_f32+0x2a>
 80094c2:	eeb0 0a67 	vmov.f32	s0, s15
 80094c6:	9101      	str	r1, [sp, #4]
 80094c8:	f004 fc58 	bl	800dd7c <sqrtf>
 80094cc:	9901      	ldr	r1, [sp, #4]
 80094ce:	e7c9      	b.n	8009464 <arm_cmplx_mag_f32+0x128>
 80094d0:	eeb0 0a67 	vmov.f32	s0, s15
 80094d4:	9203      	str	r2, [sp, #12]
 80094d6:	9102      	str	r1, [sp, #8]
 80094d8:	9001      	str	r0, [sp, #4]
 80094da:	f004 fc4f 	bl	800dd7c <sqrtf>
 80094de:	a801      	add	r0, sp, #4
 80094e0:	c807      	ldmia	r0, {r0, r1, r2}
 80094e2:	e78b      	b.n	80093fc <arm_cmplx_mag_f32+0xc0>
 80094e4:	eeb0 0a67 	vmov.f32	s0, s15
 80094e8:	9203      	str	r2, [sp, #12]
 80094ea:	9102      	str	r1, [sp, #8]
 80094ec:	9001      	str	r0, [sp, #4]
 80094ee:	f004 fc45 	bl	800dd7c <sqrtf>
 80094f2:	a801      	add	r0, sp, #4
 80094f4:	c807      	ldmia	r0, {r0, r1, r2}
 80094f6:	e769      	b.n	80093cc <arm_cmplx_mag_f32+0x90>
 80094f8:	eeb0 0a67 	vmov.f32	s0, s15
 80094fc:	9203      	str	r2, [sp, #12]
 80094fe:	9102      	str	r1, [sp, #8]
 8009500:	9001      	str	r0, [sp, #4]
 8009502:	f004 fc3b 	bl	800dd7c <sqrtf>
 8009506:	a801      	add	r0, sp, #4
 8009508:	c807      	ldmia	r0, {r0, r1, r2}
 800950a:	e746      	b.n	800939a <arm_cmplx_mag_f32+0x5e>

0800950c <arm_radix8_butterfly_f32>:
 800950c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	ed2d 8b10 	vpush	{d8-d15}
 8009514:	461c      	mov	r4, r3
 8009516:	b09d      	sub	sp, #116	; 0x74
 8009518:	4603      	mov	r3, r0
 800951a:	3304      	adds	r3, #4
 800951c:	ed9f bac4 	vldr	s22, [pc, #784]	; 8009830 <arm_radix8_butterfly_f32+0x324>
 8009520:	9019      	str	r0, [sp, #100]	; 0x64
 8009522:	921a      	str	r2, [sp, #104]	; 0x68
 8009524:	468b      	mov	fp, r1
 8009526:	931b      	str	r3, [sp, #108]	; 0x6c
 8009528:	468a      	mov	sl, r1
 800952a:	46a1      	mov	r9, r4
 800952c:	4607      	mov	r7, r0
 800952e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8009532:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8009536:	eb03 0508 	add.w	r5, r3, r8
 800953a:	195c      	adds	r4, r3, r5
 800953c:	00de      	lsls	r6, r3, #3
 800953e:	191a      	adds	r2, r3, r4
 8009540:	9600      	str	r6, [sp, #0]
 8009542:	1898      	adds	r0, r3, r2
 8009544:	4619      	mov	r1, r3
 8009546:	9e00      	ldr	r6, [sp, #0]
 8009548:	9311      	str	r3, [sp, #68]	; 0x44
 800954a:	4401      	add	r1, r0
 800954c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8009550:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8009554:	19be      	adds	r6, r7, r6
 8009556:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800955a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800955e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8009562:	9f00      	ldr	r7, [sp, #0]
 8009564:	011b      	lsls	r3, r3, #4
 8009566:	eb06 0e07 	add.w	lr, r6, r7
 800956a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800956c:	9302      	str	r3, [sp, #8]
 800956e:	3204      	adds	r2, #4
 8009570:	3104      	adds	r1, #4
 8009572:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009576:	f04f 0c00 	mov.w	ip, #0
 800957a:	edde 7a00 	vldr	s15, [lr]
 800957e:	edd6 6a00 	vldr	s13, [r6]
 8009582:	ed95 2a00 	vldr	s4, [r5]
 8009586:	ed17 aa01 	vldr	s20, [r7, #-4]
 800958a:	edd4 4a00 	vldr	s9, [r4]
 800958e:	ed90 5a00 	vldr	s10, [r0]
 8009592:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009596:	ed51 0a01 	vldr	s1, [r1, #-4]
 800959a:	ee77 8a85 	vadd.f32	s17, s15, s10
 800959e:	ee76 3a87 	vadd.f32	s7, s13, s14
 80095a2:	ee32 4a20 	vadd.f32	s8, s4, s1
 80095a6:	ee3a 3a24 	vadd.f32	s6, s20, s9
 80095aa:	ee33 6a84 	vadd.f32	s12, s7, s8
 80095ae:	ee73 5a28 	vadd.f32	s11, s6, s17
 80095b2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80095b6:	ee75 6a86 	vadd.f32	s13, s11, s12
 80095ba:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80095be:	ed47 6a01 	vstr	s13, [r7, #-4]
 80095c2:	edc4 5a00 	vstr	s11, [r4]
 80095c6:	ed92 9a00 	vldr	s18, [r2]
 80095ca:	ed95 1a01 	vldr	s2, [r5, #4]
 80095ce:	edd6 5a01 	vldr	s11, [r6, #4]
 80095d2:	ed91 6a00 	vldr	s12, [r1]
 80095d6:	edd7 2a00 	vldr	s5, [r7]
 80095da:	edd4 1a01 	vldr	s3, [r4, #4]
 80095de:	edde 6a01 	vldr	s13, [lr, #4]
 80095e2:	edd0 9a01 	vldr	s19, [r0, #4]
 80095e6:	ee72 0a60 	vsub.f32	s1, s4, s1
 80095ea:	ee71 aa46 	vsub.f32	s21, s2, s12
 80095ee:	ee35 2ac9 	vsub.f32	s4, s11, s18
 80095f2:	ee37 0a60 	vsub.f32	s0, s14, s1
 80095f6:	ee32 8a2a 	vadd.f32	s16, s4, s21
 80095fa:	ee37 7a20 	vadd.f32	s14, s14, s1
 80095fe:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8009602:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8009606:	ee75 5a89 	vadd.f32	s11, s11, s18
 800960a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800960e:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8009612:	ee31 6a06 	vadd.f32	s12, s2, s12
 8009616:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800961a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800961e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8009622:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8009626:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800962a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800962e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8009632:	ee33 3a68 	vsub.f32	s6, s6, s17
 8009636:	ee36 0a88 	vadd.f32	s0, s13, s16
 800963a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800963e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8009642:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8009646:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800964a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800964e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009652:	ee75 4a27 	vadd.f32	s9, s10, s15
 8009656:	ee71 5a49 	vsub.f32	s11, s2, s18
 800965a:	ee31 2a09 	vadd.f32	s4, s2, s18
 800965e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8009662:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8009666:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800966a:	ee73 0a06 	vadd.f32	s1, s6, s12
 800966e:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8009672:	ee36 5a87 	vadd.f32	s10, s13, s14
 8009676:	ee32 8a28 	vadd.f32	s16, s4, s17
 800967a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800967e:	ee34 4a25 	vadd.f32	s8, s8, s11
 8009682:	ee33 3a80 	vadd.f32	s6, s7, s0
 8009686:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800968a:	ee71 5a64 	vsub.f32	s11, s2, s9
 800968e:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8009692:	ee32 2a68 	vsub.f32	s4, s4, s17
 8009696:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800969a:	ee74 4a81 	vadd.f32	s9, s9, s2
 800969e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 80096a2:	44dc      	add	ip, fp
 80096a4:	45e2      	cmp	sl, ip
 80096a6:	ed87 8a00 	vstr	s16, [r7]
 80096aa:	ed84 2a01 	vstr	s4, [r4, #4]
 80096ae:	441f      	add	r7, r3
 80096b0:	edce 0a00 	vstr	s1, [lr]
 80096b4:	441c      	add	r4, r3
 80096b6:	ed80 6a00 	vstr	s12, [r0]
 80096ba:	edce 1a01 	vstr	s3, [lr, #4]
 80096be:	ed80 4a01 	vstr	s8, [r0, #4]
 80096c2:	449e      	add	lr, r3
 80096c4:	ed86 3a00 	vstr	s6, [r6]
 80096c8:	4418      	add	r0, r3
 80096ca:	ed41 3a01 	vstr	s7, [r1, #-4]
 80096ce:	ed02 5a01 	vstr	s10, [r2, #-4]
 80096d2:	ed85 7a00 	vstr	s14, [r5]
 80096d6:	edc6 5a01 	vstr	s11, [r6, #4]
 80096da:	edc1 4a00 	vstr	s9, [r1]
 80096de:	441e      	add	r6, r3
 80096e0:	edc2 6a00 	vstr	s13, [r2]
 80096e4:	4419      	add	r1, r3
 80096e6:	edc5 7a01 	vstr	s15, [r5, #4]
 80096ea:	441a      	add	r2, r3
 80096ec:	441d      	add	r5, r3
 80096ee:	f63f af44 	bhi.w	800957a <arm_radix8_butterfly_f32+0x6e>
 80096f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096f4:	2a07      	cmp	r2, #7
 80096f6:	f240 81f5 	bls.w	8009ae4 <arm_radix8_butterfly_f32+0x5d8>
 80096fa:	f108 0101 	add.w	r1, r8, #1
 80096fe:	188f      	adds	r7, r1, r2
 8009700:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8009704:	19d6      	adds	r6, r2, r7
 8009706:	eb08 0c09 	add.w	ip, r8, r9
 800970a:	1994      	adds	r4, r2, r6
 800970c:	eb0c 0e09 	add.w	lr, ip, r9
 8009710:	4610      	mov	r0, r2
 8009712:	9701      	str	r7, [sp, #4]
 8009714:	4420      	add	r0, r4
 8009716:	eb0e 0709 	add.w	r7, lr, r9
 800971a:	1815      	adds	r5, r2, r0
 800971c:	eb07 0209 	add.w	r2, r7, r9
 8009720:	9203      	str	r2, [sp, #12]
 8009722:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009724:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009728:	9117      	str	r1, [sp, #92]	; 0x5c
 800972a:	440a      	add	r2, r1
 800972c:	9900      	ldr	r1, [sp, #0]
 800972e:	3108      	adds	r1, #8
 8009730:	9100      	str	r1, [sp, #0]
 8009732:	9902      	ldr	r1, [sp, #8]
 8009734:	3108      	adds	r1, #8
 8009736:	9102      	str	r1, [sp, #8]
 8009738:	9919      	ldr	r1, [sp, #100]	; 0x64
 800973a:	00ff      	lsls	r7, r7, #3
 800973c:	9715      	str	r7, [sp, #84]	; 0x54
 800973e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8009742:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009746:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800974a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800974c:	9903      	ldr	r1, [sp, #12]
 800974e:	19d7      	adds	r7, r2, r7
 8009750:	00c9      	lsls	r1, r1, #3
 8009752:	9114      	str	r1, [sp, #80]	; 0x50
 8009754:	9710      	str	r7, [sp, #64]	; 0x40
 8009756:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009758:	9f00      	ldr	r7, [sp, #0]
 800975a:	19cf      	adds	r7, r1, r7
 800975c:	970d      	str	r7, [sp, #52]	; 0x34
 800975e:	9f02      	ldr	r7, [sp, #8]
 8009760:	19cf      	adds	r7, r1, r7
 8009762:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8009766:	970c      	str	r7, [sp, #48]	; 0x30
 8009768:	9f01      	ldr	r7, [sp, #4]
 800976a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800976e:	3504      	adds	r5, #4
 8009770:	3004      	adds	r0, #4
 8009772:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8009776:	9508      	str	r5, [sp, #32]
 8009778:	9009      	str	r0, [sp, #36]	; 0x24
 800977a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800977c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800977e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8009782:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8009786:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800978a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800978c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8009790:	1945      	adds	r5, r0, r5
 8009792:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8009796:	460f      	mov	r7, r1
 8009798:	3404      	adds	r4, #4
 800979a:	4641      	mov	r1, r8
 800979c:	1841      	adds	r1, r0, r1
 800979e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 80097a2:	940a      	str	r4, [sp, #40]	; 0x28
 80097a4:	eb00 0c06 	add.w	ip, r0, r6
 80097a8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80097ac:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80097ae:	9506      	str	r5, [sp, #24]
 80097b0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80097b2:	9105      	str	r1, [sp, #20]
 80097b4:	4639      	mov	r1, r7
 80097b6:	1905      	adds	r5, r0, r4
 80097b8:	3108      	adds	r1, #8
 80097ba:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80097bc:	9507      	str	r5, [sp, #28]
 80097be:	910f      	str	r1, [sp, #60]	; 0x3c
 80097c0:	ea4f 1509 	mov.w	r5, r9, lsl #4
 80097c4:	2101      	movs	r1, #1
 80097c6:	eb00 0e06 	add.w	lr, r0, r6
 80097ca:	9518      	str	r5, [sp, #96]	; 0x60
 80097cc:	9404      	str	r4, [sp, #16]
 80097ce:	9103      	str	r1, [sp, #12]
 80097d0:	4620      	mov	r0, r4
 80097d2:	4689      	mov	r9, r1
 80097d4:	9e06      	ldr	r6, [sp, #24]
 80097d6:	ed90 fa00 	vldr	s30, [r0]
 80097da:	edd6 7a01 	vldr	s15, [r6, #4]
 80097de:	edd0 ba01 	vldr	s23, [r0, #4]
 80097e2:	edcd 7a00 	vstr	s15, [sp]
 80097e6:	a80d      	add	r0, sp, #52	; 0x34
 80097e8:	edde 7a01 	vldr	s15, [lr, #4]
 80097ec:	9c05      	ldr	r4, [sp, #20]
 80097ee:	9d07      	ldr	r5, [sp, #28]
 80097f0:	edd2 fa00 	vldr	s31, [r2]
 80097f4:	ed92 ca01 	vldr	s24, [r2, #4]
 80097f8:	edcd 7a01 	vstr	s15, [sp, #4]
 80097fc:	c807      	ldmia	r0, {r0, r1, r2}
 80097fe:	eddc 7a01 	vldr	s15, [ip, #4]
 8009802:	edd4 ea00 	vldr	s29, [r4]
 8009806:	ed95 ea00 	vldr	s28, [r5]
 800980a:	edd6 da00 	vldr	s27, [r6]
 800980e:	edd4 aa01 	vldr	s21, [r4, #4]
 8009812:	ed95 aa01 	vldr	s20, [r5, #4]
 8009816:	ed9e da00 	vldr	s26, [lr]
 800981a:	eddc ca00 	vldr	s25, [ip]
 800981e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009822:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009824:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009826:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009828:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800982a:	edcd 7a02 	vstr	s15, [sp, #8]
 800982e:	e001      	b.n	8009834 <arm_radix8_butterfly_f32+0x328>
 8009830:	3f3504f3 	.word	0x3f3504f3
 8009834:	ed16 6a01 	vldr	s12, [r6, #-4]
 8009838:	ed91 5a00 	vldr	s10, [r1]
 800983c:	ed57 9a01 	vldr	s19, [r7, #-4]
 8009840:	edd5 7a00 	vldr	s15, [r5]
 8009844:	ed18 7a01 	vldr	s14, [r8, #-4]
 8009848:	edd2 3a00 	vldr	s7, [r2]
 800984c:	ed94 3a00 	vldr	s6, [r4]
 8009850:	ed90 2a00 	vldr	s4, [r0]
 8009854:	ed92 0a01 	vldr	s0, [r2, #4]
 8009858:	ee33 8a85 	vadd.f32	s16, s7, s10
 800985c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009860:	ee33 4a29 	vadd.f32	s8, s6, s19
 8009864:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009868:	ee78 1a04 	vadd.f32	s3, s16, s8
 800986c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009870:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009874:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009878:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800987c:	ed82 6a00 	vstr	s12, [r2]
 8009880:	edd5 8a01 	vldr	s17, [r5, #4]
 8009884:	ed90 9a01 	vldr	s18, [r0, #4]
 8009888:	edd6 2a00 	vldr	s5, [r6]
 800988c:	ed98 7a00 	vldr	s14, [r8]
 8009890:	edd4 0a01 	vldr	s1, [r4, #4]
 8009894:	ed91 6a01 	vldr	s12, [r1, #4]
 8009898:	edd7 5a00 	vldr	s11, [r7]
 800989c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80098a0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80098a4:	ee39 5a62 	vsub.f32	s10, s18, s5
 80098a8:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80098ac:	ee38 4a44 	vsub.f32	s8, s16, s8
 80098b0:	ee38 7a87 	vadd.f32	s14, s17, s14
 80098b4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80098b8:	ee79 2a22 	vadd.f32	s5, s18, s5
 80098bc:	ee75 8a69 	vsub.f32	s17, s10, s19
 80098c0:	ee32 9a27 	vadd.f32	s18, s4, s15
 80098c4:	ee35 5a29 	vadd.f32	s10, s10, s19
 80098c8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80098cc:	ee30 2a06 	vadd.f32	s4, s0, s12
 80098d0:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80098d4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80098d8:	ee32 9a08 	vadd.f32	s18, s4, s16
 80098dc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80098e0:	ee32 2a48 	vsub.f32	s4, s4, s16
 80098e4:	ee71 4a64 	vsub.f32	s9, s2, s9
 80098e8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80098ec:	ee32 1a87 	vadd.f32	s2, s5, s14
 80098f0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80098f4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80098f8:	ee30 6a46 	vsub.f32	s12, s0, s12
 80098fc:	ee73 0a29 	vadd.f32	s1, s6, s19
 8009900:	ee36 0a28 	vadd.f32	s0, s12, s17
 8009904:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009908:	ee32 7a64 	vsub.f32	s14, s4, s9
 800990c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8009910:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009914:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009918:	ee75 8a85 	vadd.f32	s17, s11, s10
 800991c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8009920:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8009924:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009928:	ee79 1a41 	vsub.f32	s3, s18, s2
 800992c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8009930:	ee76 5a43 	vsub.f32	s11, s12, s6
 8009934:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009938:	ee74 4a82 	vadd.f32	s9, s9, s4
 800993c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8009940:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8009944:	ee30 0a80 	vadd.f32	s0, s1, s0
 8009948:	ee77 9a85 	vadd.f32	s19, s15, s10
 800994c:	ee33 6a06 	vadd.f32	s12, s6, s12
 8009950:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009954:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8009958:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800995c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8009960:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8009964:	ee39 1a01 	vadd.f32	s2, s18, s2
 8009968:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800996c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8009970:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8009974:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8009978:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800997c:	ee35 3a03 	vadd.f32	s6, s10, s6
 8009980:	ee72 6a66 	vsub.f32	s13, s4, s13
 8009984:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8009988:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800998c:	ed9d 4a02 	vldr	s8, [sp, #8]
 8009990:	ed82 1a01 	vstr	s2, [r2, #4]
 8009994:	ee77 3a63 	vsub.f32	s7, s14, s7
 8009998:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800999c:	ed9d 7a01 	vldr	s14, [sp, #4]
 80099a0:	ed81 3a00 	vstr	s6, [r1]
 80099a4:	ee30 9a89 	vadd.f32	s18, s1, s18
 80099a8:	ee32 2a05 	vadd.f32	s4, s4, s10
 80099ac:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80099b0:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80099b4:	ee67 2a22 	vmul.f32	s5, s14, s5
 80099b8:	ee64 1a00 	vmul.f32	s3, s8, s0
 80099bc:	ee27 7a24 	vmul.f32	s14, s14, s9
 80099c0:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80099c4:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80099c8:	ee64 8a28 	vmul.f32	s17, s8, s17
 80099cc:	ed9d 4a00 	vldr	s8, [sp]
 80099d0:	edc1 6a01 	vstr	s13, [r1, #4]
 80099d4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80099d8:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80099dc:	ee64 9a29 	vmul.f32	s19, s8, s19
 80099e0:	ee24 4a25 	vmul.f32	s8, s8, s11
 80099e4:	ee30 7a87 	vadd.f32	s14, s1, s14
 80099e8:	ee74 4a84 	vadd.f32	s9, s9, s8
 80099ec:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80099f0:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80099f4:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80099f8:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80099fc:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8009a00:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8009a04:	ee75 1a21 	vadd.f32	s3, s10, s3
 8009a08:	ee30 0a68 	vsub.f32	s0, s0, s17
 8009a0c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8009a10:	ee70 0a84 	vadd.f32	s1, s1, s8
 8009a14:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009a18:	44d9      	add	r9, fp
 8009a1a:	45ca      	cmp	sl, r9
 8009a1c:	ed84 9a00 	vstr	s18, [r4]
 8009a20:	edc4 3a01 	vstr	s7, [r4, #4]
 8009a24:	441a      	add	r2, r3
 8009a26:	ed07 7a01 	vstr	s14, [r7, #-4]
 8009a2a:	edc7 2a00 	vstr	s5, [r7]
 8009a2e:	4419      	add	r1, r3
 8009a30:	ed80 2a00 	vstr	s4, [r0]
 8009a34:	ed80 8a01 	vstr	s16, [r0, #4]
 8009a38:	441c      	add	r4, r3
 8009a3a:	ed48 1a01 	vstr	s3, [r8, #-4]
 8009a3e:	ed88 0a00 	vstr	s0, [r8]
 8009a42:	441f      	add	r7, r3
 8009a44:	ed46 4a01 	vstr	s9, [r6, #-4]
 8009a48:	4418      	add	r0, r3
 8009a4a:	edc6 9a00 	vstr	s19, [r6]
 8009a4e:	4498      	add	r8, r3
 8009a50:	edc5 0a00 	vstr	s1, [r5]
 8009a54:	ed85 6a01 	vstr	s12, [r5, #4]
 8009a58:	441e      	add	r6, r3
 8009a5a:	441d      	add	r5, r3
 8009a5c:	f63f aeea 	bhi.w	8009834 <arm_radix8_butterfly_f32+0x328>
 8009a60:	9a03      	ldr	r2, [sp, #12]
 8009a62:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009a64:	3201      	adds	r2, #1
 8009a66:	4611      	mov	r1, r2
 8009a68:	9203      	str	r2, [sp, #12]
 8009a6a:	9a04      	ldr	r2, [sp, #16]
 8009a6c:	4402      	add	r2, r0
 8009a6e:	9204      	str	r2, [sp, #16]
 8009a70:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009a72:	9a05      	ldr	r2, [sp, #20]
 8009a74:	4402      	add	r2, r0
 8009a76:	9205      	str	r2, [sp, #20]
 8009a78:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009a7a:	9a07      	ldr	r2, [sp, #28]
 8009a7c:	4402      	add	r2, r0
 8009a7e:	9207      	str	r2, [sp, #28]
 8009a80:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009a82:	9a06      	ldr	r2, [sp, #24]
 8009a84:	4402      	add	r2, r0
 8009a86:	9206      	str	r2, [sp, #24]
 8009a88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a8a:	4496      	add	lr, r2
 8009a8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009a8e:	4494      	add	ip, r2
 8009a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009a92:	3208      	adds	r2, #8
 8009a94:	920f      	str	r2, [sp, #60]	; 0x3c
 8009a96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a98:	3208      	adds	r2, #8
 8009a9a:	920e      	str	r2, [sp, #56]	; 0x38
 8009a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a9e:	3208      	adds	r2, #8
 8009aa0:	920d      	str	r2, [sp, #52]	; 0x34
 8009aa2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009aa4:	3208      	adds	r2, #8
 8009aa6:	920c      	str	r2, [sp, #48]	; 0x30
 8009aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009aaa:	3208      	adds	r2, #8
 8009aac:	920b      	str	r2, [sp, #44]	; 0x2c
 8009aae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ab0:	3208      	adds	r2, #8
 8009ab2:	920a      	str	r2, [sp, #40]	; 0x28
 8009ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ab6:	3208      	adds	r2, #8
 8009ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8009aba:	9a08      	ldr	r2, [sp, #32]
 8009abc:	3208      	adds	r2, #8
 8009abe:	9208      	str	r2, [sp, #32]
 8009ac0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009ac2:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009ac4:	4288      	cmp	r0, r1
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	d007      	beq.n	8009ada <arm_radix8_butterfly_f32+0x5ce>
 8009aca:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009acc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	4401      	add	r1, r0
 8009ad4:	9110      	str	r1, [sp, #64]	; 0x40
 8009ad6:	9804      	ldr	r0, [sp, #16]
 8009ad8:	e67c      	b.n	80097d4 <arm_radix8_butterfly_f32+0x2c8>
 8009ada:	4683      	mov	fp, r0
 8009adc:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8009ae0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009ae2:	e524      	b.n	800952e <arm_radix8_butterfly_f32+0x22>
 8009ae4:	b01d      	add	sp, #116	; 0x74
 8009ae6:	ecbd 8b10 	vpop	{d8-d15}
 8009aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aee:	bf00      	nop

08009af0 <ctime>:
 8009af0:	b508      	push	{r3, lr}
 8009af2:	f000 f831 	bl	8009b58 <localtime>
 8009af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009afa:	f001 b953 	b.w	800ada4 <asctime>

08009afe <difftime>:
 8009afe:	1a80      	subs	r0, r0, r2
 8009b00:	b508      	push	{r3, lr}
 8009b02:	eb61 0103 	sbc.w	r1, r1, r3
 8009b06:	f7f6 fdc3 	bl	8000690 <__aeabi_l2d>
 8009b0a:	ec41 0b10 	vmov	d0, r0, r1
 8009b0e:	bd08      	pop	{r3, pc}

08009b10 <__libc_init_array>:
 8009b10:	b570      	push	{r4, r5, r6, lr}
 8009b12:	4d0d      	ldr	r5, [pc, #52]	; (8009b48 <__libc_init_array+0x38>)
 8009b14:	4c0d      	ldr	r4, [pc, #52]	; (8009b4c <__libc_init_array+0x3c>)
 8009b16:	1b64      	subs	r4, r4, r5
 8009b18:	10a4      	asrs	r4, r4, #2
 8009b1a:	2600      	movs	r6, #0
 8009b1c:	42a6      	cmp	r6, r4
 8009b1e:	d109      	bne.n	8009b34 <__libc_init_array+0x24>
 8009b20:	4d0b      	ldr	r5, [pc, #44]	; (8009b50 <__libc_init_array+0x40>)
 8009b22:	4c0c      	ldr	r4, [pc, #48]	; (8009b54 <__libc_init_array+0x44>)
 8009b24:	f004 f9a4 	bl	800de70 <_init>
 8009b28:	1b64      	subs	r4, r4, r5
 8009b2a:	10a4      	asrs	r4, r4, #2
 8009b2c:	2600      	movs	r6, #0
 8009b2e:	42a6      	cmp	r6, r4
 8009b30:	d105      	bne.n	8009b3e <__libc_init_array+0x2e>
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b38:	4798      	blx	r3
 8009b3a:	3601      	adds	r6, #1
 8009b3c:	e7ee      	b.n	8009b1c <__libc_init_array+0xc>
 8009b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b42:	4798      	blx	r3
 8009b44:	3601      	adds	r6, #1
 8009b46:	e7f2      	b.n	8009b2e <__libc_init_array+0x1e>
 8009b48:	080264d4 	.word	0x080264d4
 8009b4c:	080264d4 	.word	0x080264d4
 8009b50:	080264d4 	.word	0x080264d4
 8009b54:	080264d8 	.word	0x080264d8

08009b58 <localtime>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4b0b      	ldr	r3, [pc, #44]	; (8009b88 <localtime+0x30>)
 8009b5c:	681d      	ldr	r5, [r3, #0]
 8009b5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009b60:	4604      	mov	r4, r0
 8009b62:	b953      	cbnz	r3, 8009b7a <localtime+0x22>
 8009b64:	2024      	movs	r0, #36	; 0x24
 8009b66:	f000 f909 	bl	8009d7c <malloc>
 8009b6a:	4602      	mov	r2, r0
 8009b6c:	63e8      	str	r0, [r5, #60]	; 0x3c
 8009b6e:	b920      	cbnz	r0, 8009b7a <localtime+0x22>
 8009b70:	4b06      	ldr	r3, [pc, #24]	; (8009b8c <localtime+0x34>)
 8009b72:	4807      	ldr	r0, [pc, #28]	; (8009b90 <localtime+0x38>)
 8009b74:	2132      	movs	r1, #50	; 0x32
 8009b76:	f001 f95d 	bl	800ae34 <__assert_func>
 8009b7a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b82:	f000 b807 	b.w	8009b94 <localtime_r>
 8009b86:	bf00      	nop
 8009b88:	200000cc 	.word	0x200000cc
 8009b8c:	08025f2c 	.word	0x08025f2c
 8009b90:	08025f43 	.word	0x08025f43

08009b94 <localtime_r>:
 8009b94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b98:	4680      	mov	r8, r0
 8009b9a:	9101      	str	r1, [sp, #4]
 8009b9c:	f002 f940 	bl	800be20 <__gettzinfo>
 8009ba0:	9901      	ldr	r1, [sp, #4]
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	4640      	mov	r0, r8
 8009ba6:	f002 f93f 	bl	800be28 <gmtime_r>
 8009baa:	6943      	ldr	r3, [r0, #20]
 8009bac:	0799      	lsls	r1, r3, #30
 8009bae:	4604      	mov	r4, r0
 8009bb0:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8009bb4:	d105      	bne.n	8009bc2 <localtime_r+0x2e>
 8009bb6:	2264      	movs	r2, #100	; 0x64
 8009bb8:	fb97 f3f2 	sdiv	r3, r7, r2
 8009bbc:	fb02 7313 	mls	r3, r2, r3, r7
 8009bc0:	bb73      	cbnz	r3, 8009c20 <localtime_r+0x8c>
 8009bc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009bc6:	fb97 f6f3 	sdiv	r6, r7, r3
 8009bca:	fb03 7616 	mls	r6, r3, r6, r7
 8009bce:	fab6 f386 	clz	r3, r6
 8009bd2:	095b      	lsrs	r3, r3, #5
 8009bd4:	4e67      	ldr	r6, [pc, #412]	; (8009d74 <localtime_r+0x1e0>)
 8009bd6:	2230      	movs	r2, #48	; 0x30
 8009bd8:	fb02 6603 	mla	r6, r2, r3, r6
 8009bdc:	f000 ff50 	bl	800aa80 <__tz_lock>
 8009be0:	f000 ff5a 	bl	800aa98 <_tzset_unlocked>
 8009be4:	4b64      	ldr	r3, [pc, #400]	; (8009d78 <localtime_r+0x1e4>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	b34b      	cbz	r3, 8009c3e <localtime_r+0xaa>
 8009bea:	686b      	ldr	r3, [r5, #4]
 8009bec:	42bb      	cmp	r3, r7
 8009bee:	d119      	bne.n	8009c24 <localtime_r+0x90>
 8009bf0:	682f      	ldr	r7, [r5, #0]
 8009bf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009bf6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8009bfa:	b9df      	cbnz	r7, 8009c34 <localtime_r+0xa0>
 8009bfc:	4282      	cmp	r2, r0
 8009bfe:	eb73 0101 	sbcs.w	r1, r3, r1
 8009c02:	da23      	bge.n	8009c4c <localtime_r+0xb8>
 8009c04:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009c08:	4282      	cmp	r2, r0
 8009c0a:	eb73 0701 	sbcs.w	r7, r3, r1
 8009c0e:	bfb4      	ite	lt
 8009c10:	2701      	movlt	r7, #1
 8009c12:	2700      	movge	r7, #0
 8009c14:	4282      	cmp	r2, r0
 8009c16:	418b      	sbcs	r3, r1
 8009c18:	6227      	str	r7, [r4, #32]
 8009c1a:	db19      	blt.n	8009c50 <localtime_r+0xbc>
 8009c1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009c1e:	e018      	b.n	8009c52 <localtime_r+0xbe>
 8009c20:	2301      	movs	r3, #1
 8009c22:	e7d7      	b.n	8009bd4 <localtime_r+0x40>
 8009c24:	4638      	mov	r0, r7
 8009c26:	f000 fe81 	bl	800a92c <__tzcalc_limits>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d1e0      	bne.n	8009bf0 <localtime_r+0x5c>
 8009c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8009c32:	e004      	b.n	8009c3e <localtime_r+0xaa>
 8009c34:	4282      	cmp	r2, r0
 8009c36:	eb73 0101 	sbcs.w	r1, r3, r1
 8009c3a:	da02      	bge.n	8009c42 <localtime_r+0xae>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	6223      	str	r3, [r4, #32]
 8009c40:	e7ec      	b.n	8009c1c <localtime_r+0x88>
 8009c42:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009c46:	4282      	cmp	r2, r0
 8009c48:	418b      	sbcs	r3, r1
 8009c4a:	daf7      	bge.n	8009c3c <localtime_r+0xa8>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	6223      	str	r3, [r4, #32]
 8009c50:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009c52:	6861      	ldr	r1, [r4, #4]
 8009c54:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8009c58:	203c      	movs	r0, #60	; 0x3c
 8009c5a:	fb93 f5f2 	sdiv	r5, r3, r2
 8009c5e:	fb02 3315 	mls	r3, r2, r5, r3
 8009c62:	fb93 f2f0 	sdiv	r2, r3, r0
 8009c66:	fb00 3012 	mls	r0, r0, r2, r3
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	1a89      	subs	r1, r1, r2
 8009c6e:	68a2      	ldr	r2, [r4, #8]
 8009c70:	6061      	str	r1, [r4, #4]
 8009c72:	1a1b      	subs	r3, r3, r0
 8009c74:	1b52      	subs	r2, r2, r5
 8009c76:	2b3b      	cmp	r3, #59	; 0x3b
 8009c78:	6023      	str	r3, [r4, #0]
 8009c7a:	60a2      	str	r2, [r4, #8]
 8009c7c:	dd35      	ble.n	8009cea <localtime_r+0x156>
 8009c7e:	3101      	adds	r1, #1
 8009c80:	6061      	str	r1, [r4, #4]
 8009c82:	3b3c      	subs	r3, #60	; 0x3c
 8009c84:	6023      	str	r3, [r4, #0]
 8009c86:	6863      	ldr	r3, [r4, #4]
 8009c88:	2b3b      	cmp	r3, #59	; 0x3b
 8009c8a:	dd34      	ble.n	8009cf6 <localtime_r+0x162>
 8009c8c:	3201      	adds	r2, #1
 8009c8e:	60a2      	str	r2, [r4, #8]
 8009c90:	3b3c      	subs	r3, #60	; 0x3c
 8009c92:	6063      	str	r3, [r4, #4]
 8009c94:	68a3      	ldr	r3, [r4, #8]
 8009c96:	2b17      	cmp	r3, #23
 8009c98:	dd33      	ble.n	8009d02 <localtime_r+0x16e>
 8009c9a:	69e2      	ldr	r2, [r4, #28]
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	61e2      	str	r2, [r4, #28]
 8009ca0:	69a2      	ldr	r2, [r4, #24]
 8009ca2:	3201      	adds	r2, #1
 8009ca4:	2a06      	cmp	r2, #6
 8009ca6:	bfc8      	it	gt
 8009ca8:	2200      	movgt	r2, #0
 8009caa:	61a2      	str	r2, [r4, #24]
 8009cac:	68e2      	ldr	r2, [r4, #12]
 8009cae:	3b18      	subs	r3, #24
 8009cb0:	3201      	adds	r2, #1
 8009cb2:	60a3      	str	r3, [r4, #8]
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	60e2      	str	r2, [r4, #12]
 8009cb8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8009cbc:	428a      	cmp	r2, r1
 8009cbe:	dd0e      	ble.n	8009cde <localtime_r+0x14a>
 8009cc0:	2b0b      	cmp	r3, #11
 8009cc2:	eba2 0201 	sub.w	r2, r2, r1
 8009cc6:	60e2      	str	r2, [r4, #12]
 8009cc8:	f103 0201 	add.w	r2, r3, #1
 8009ccc:	bf09      	itett	eq
 8009cce:	6963      	ldreq	r3, [r4, #20]
 8009cd0:	6122      	strne	r2, [r4, #16]
 8009cd2:	2200      	moveq	r2, #0
 8009cd4:	3301      	addeq	r3, #1
 8009cd6:	bf02      	ittt	eq
 8009cd8:	6122      	streq	r2, [r4, #16]
 8009cda:	6163      	streq	r3, [r4, #20]
 8009cdc:	61e2      	streq	r2, [r4, #28]
 8009cde:	f000 fed5 	bl	800aa8c <__tz_unlock>
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	b002      	add	sp, #8
 8009ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dacb      	bge.n	8009c86 <localtime_r+0xf2>
 8009cee:	3901      	subs	r1, #1
 8009cf0:	6061      	str	r1, [r4, #4]
 8009cf2:	333c      	adds	r3, #60	; 0x3c
 8009cf4:	e7c6      	b.n	8009c84 <localtime_r+0xf0>
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	dacc      	bge.n	8009c94 <localtime_r+0x100>
 8009cfa:	3a01      	subs	r2, #1
 8009cfc:	60a2      	str	r2, [r4, #8]
 8009cfe:	333c      	adds	r3, #60	; 0x3c
 8009d00:	e7c7      	b.n	8009c92 <localtime_r+0xfe>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	daeb      	bge.n	8009cde <localtime_r+0x14a>
 8009d06:	69e2      	ldr	r2, [r4, #28]
 8009d08:	3a01      	subs	r2, #1
 8009d0a:	61e2      	str	r2, [r4, #28]
 8009d0c:	69a2      	ldr	r2, [r4, #24]
 8009d0e:	3a01      	subs	r2, #1
 8009d10:	bf48      	it	mi
 8009d12:	2206      	movmi	r2, #6
 8009d14:	61a2      	str	r2, [r4, #24]
 8009d16:	68e2      	ldr	r2, [r4, #12]
 8009d18:	3318      	adds	r3, #24
 8009d1a:	3a01      	subs	r2, #1
 8009d1c:	60e2      	str	r2, [r4, #12]
 8009d1e:	60a3      	str	r3, [r4, #8]
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	d1dc      	bne.n	8009cde <localtime_r+0x14a>
 8009d24:	6923      	ldr	r3, [r4, #16]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	d405      	bmi.n	8009d36 <localtime_r+0x1a2>
 8009d2a:	6123      	str	r3, [r4, #16]
 8009d2c:	6923      	ldr	r3, [r4, #16]
 8009d2e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009d32:	60e3      	str	r3, [r4, #12]
 8009d34:	e7d3      	b.n	8009cde <localtime_r+0x14a>
 8009d36:	230b      	movs	r3, #11
 8009d38:	6123      	str	r3, [r4, #16]
 8009d3a:	6963      	ldr	r3, [r4, #20]
 8009d3c:	1e5a      	subs	r2, r3, #1
 8009d3e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8009d42:	6162      	str	r2, [r4, #20]
 8009d44:	079a      	lsls	r2, r3, #30
 8009d46:	d105      	bne.n	8009d54 <localtime_r+0x1c0>
 8009d48:	2164      	movs	r1, #100	; 0x64
 8009d4a:	fb93 f2f1 	sdiv	r2, r3, r1
 8009d4e:	fb01 3212 	mls	r2, r1, r2, r3
 8009d52:	b962      	cbnz	r2, 8009d6e <localtime_r+0x1da>
 8009d54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009d58:	fb93 f1f2 	sdiv	r1, r3, r2
 8009d5c:	fb02 3311 	mls	r3, r2, r1, r3
 8009d60:	fab3 f383 	clz	r3, r3
 8009d64:	095b      	lsrs	r3, r3, #5
 8009d66:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009d6a:	61e3      	str	r3, [r4, #28]
 8009d6c:	e7de      	b.n	8009d2c <localtime_r+0x198>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e7f9      	b.n	8009d66 <localtime_r+0x1d2>
 8009d72:	bf00      	nop
 8009d74:	08025fa0 	.word	0x08025fa0
 8009d78:	20000b40 	.word	0x20000b40

08009d7c <malloc>:
 8009d7c:	4b02      	ldr	r3, [pc, #8]	; (8009d88 <malloc+0xc>)
 8009d7e:	4601      	mov	r1, r0
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	f000 b87f 	b.w	8009e84 <_malloc_r>
 8009d86:	bf00      	nop
 8009d88:	200000cc 	.word	0x200000cc

08009d8c <free>:
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <free+0xc>)
 8009d8e:	4601      	mov	r1, r0
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	f000 b80b 	b.w	8009dac <_free_r>
 8009d96:	bf00      	nop
 8009d98:	200000cc 	.word	0x200000cc

08009d9c <memset>:
 8009d9c:	4402      	add	r2, r0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d100      	bne.n	8009da6 <memset+0xa>
 8009da4:	4770      	bx	lr
 8009da6:	f803 1b01 	strb.w	r1, [r3], #1
 8009daa:	e7f9      	b.n	8009da0 <memset+0x4>

08009dac <_free_r>:
 8009dac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dae:	2900      	cmp	r1, #0
 8009db0:	d044      	beq.n	8009e3c <_free_r+0x90>
 8009db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db6:	9001      	str	r0, [sp, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f1a1 0404 	sub.w	r4, r1, #4
 8009dbe:	bfb8      	it	lt
 8009dc0:	18e4      	addlt	r4, r4, r3
 8009dc2:	f002 f8f5 	bl	800bfb0 <__malloc_lock>
 8009dc6:	4a1e      	ldr	r2, [pc, #120]	; (8009e40 <_free_r+0x94>)
 8009dc8:	9801      	ldr	r0, [sp, #4]
 8009dca:	6813      	ldr	r3, [r2, #0]
 8009dcc:	b933      	cbnz	r3, 8009ddc <_free_r+0x30>
 8009dce:	6063      	str	r3, [r4, #4]
 8009dd0:	6014      	str	r4, [r2, #0]
 8009dd2:	b003      	add	sp, #12
 8009dd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dd8:	f002 b8f0 	b.w	800bfbc <__malloc_unlock>
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	d908      	bls.n	8009df2 <_free_r+0x46>
 8009de0:	6825      	ldr	r5, [r4, #0]
 8009de2:	1961      	adds	r1, r4, r5
 8009de4:	428b      	cmp	r3, r1
 8009de6:	bf01      	itttt	eq
 8009de8:	6819      	ldreq	r1, [r3, #0]
 8009dea:	685b      	ldreq	r3, [r3, #4]
 8009dec:	1949      	addeq	r1, r1, r5
 8009dee:	6021      	streq	r1, [r4, #0]
 8009df0:	e7ed      	b.n	8009dce <_free_r+0x22>
 8009df2:	461a      	mov	r2, r3
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	b10b      	cbz	r3, 8009dfc <_free_r+0x50>
 8009df8:	42a3      	cmp	r3, r4
 8009dfa:	d9fa      	bls.n	8009df2 <_free_r+0x46>
 8009dfc:	6811      	ldr	r1, [r2, #0]
 8009dfe:	1855      	adds	r5, r2, r1
 8009e00:	42a5      	cmp	r5, r4
 8009e02:	d10b      	bne.n	8009e1c <_free_r+0x70>
 8009e04:	6824      	ldr	r4, [r4, #0]
 8009e06:	4421      	add	r1, r4
 8009e08:	1854      	adds	r4, r2, r1
 8009e0a:	42a3      	cmp	r3, r4
 8009e0c:	6011      	str	r1, [r2, #0]
 8009e0e:	d1e0      	bne.n	8009dd2 <_free_r+0x26>
 8009e10:	681c      	ldr	r4, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	6053      	str	r3, [r2, #4]
 8009e16:	4421      	add	r1, r4
 8009e18:	6011      	str	r1, [r2, #0]
 8009e1a:	e7da      	b.n	8009dd2 <_free_r+0x26>
 8009e1c:	d902      	bls.n	8009e24 <_free_r+0x78>
 8009e1e:	230c      	movs	r3, #12
 8009e20:	6003      	str	r3, [r0, #0]
 8009e22:	e7d6      	b.n	8009dd2 <_free_r+0x26>
 8009e24:	6825      	ldr	r5, [r4, #0]
 8009e26:	1961      	adds	r1, r4, r5
 8009e28:	428b      	cmp	r3, r1
 8009e2a:	bf04      	itt	eq
 8009e2c:	6819      	ldreq	r1, [r3, #0]
 8009e2e:	685b      	ldreq	r3, [r3, #4]
 8009e30:	6063      	str	r3, [r4, #4]
 8009e32:	bf04      	itt	eq
 8009e34:	1949      	addeq	r1, r1, r5
 8009e36:	6021      	streq	r1, [r4, #0]
 8009e38:	6054      	str	r4, [r2, #4]
 8009e3a:	e7ca      	b.n	8009dd2 <_free_r+0x26>
 8009e3c:	b003      	add	sp, #12
 8009e3e:	bd30      	pop	{r4, r5, pc}
 8009e40:	20000b1c 	.word	0x20000b1c

08009e44 <sbrk_aligned>:
 8009e44:	b570      	push	{r4, r5, r6, lr}
 8009e46:	4e0e      	ldr	r6, [pc, #56]	; (8009e80 <sbrk_aligned+0x3c>)
 8009e48:	460c      	mov	r4, r1
 8009e4a:	6831      	ldr	r1, [r6, #0]
 8009e4c:	4605      	mov	r5, r0
 8009e4e:	b911      	cbnz	r1, 8009e56 <sbrk_aligned+0x12>
 8009e50:	f000 fd0e 	bl	800a870 <_sbrk_r>
 8009e54:	6030      	str	r0, [r6, #0]
 8009e56:	4621      	mov	r1, r4
 8009e58:	4628      	mov	r0, r5
 8009e5a:	f000 fd09 	bl	800a870 <_sbrk_r>
 8009e5e:	1c43      	adds	r3, r0, #1
 8009e60:	d00a      	beq.n	8009e78 <sbrk_aligned+0x34>
 8009e62:	1cc4      	adds	r4, r0, #3
 8009e64:	f024 0403 	bic.w	r4, r4, #3
 8009e68:	42a0      	cmp	r0, r4
 8009e6a:	d007      	beq.n	8009e7c <sbrk_aligned+0x38>
 8009e6c:	1a21      	subs	r1, r4, r0
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f000 fcfe 	bl	800a870 <_sbrk_r>
 8009e74:	3001      	adds	r0, #1
 8009e76:	d101      	bne.n	8009e7c <sbrk_aligned+0x38>
 8009e78:	f04f 34ff 	mov.w	r4, #4294967295
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	20000b20 	.word	0x20000b20

08009e84 <_malloc_r>:
 8009e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e88:	1ccd      	adds	r5, r1, #3
 8009e8a:	f025 0503 	bic.w	r5, r5, #3
 8009e8e:	3508      	adds	r5, #8
 8009e90:	2d0c      	cmp	r5, #12
 8009e92:	bf38      	it	cc
 8009e94:	250c      	movcc	r5, #12
 8009e96:	2d00      	cmp	r5, #0
 8009e98:	4607      	mov	r7, r0
 8009e9a:	db01      	blt.n	8009ea0 <_malloc_r+0x1c>
 8009e9c:	42a9      	cmp	r1, r5
 8009e9e:	d905      	bls.n	8009eac <_malloc_r+0x28>
 8009ea0:	230c      	movs	r3, #12
 8009ea2:	603b      	str	r3, [r7, #0]
 8009ea4:	2600      	movs	r6, #0
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009eac:	4e2e      	ldr	r6, [pc, #184]	; (8009f68 <_malloc_r+0xe4>)
 8009eae:	f002 f87f 	bl	800bfb0 <__malloc_lock>
 8009eb2:	6833      	ldr	r3, [r6, #0]
 8009eb4:	461c      	mov	r4, r3
 8009eb6:	bb34      	cbnz	r4, 8009f06 <_malloc_r+0x82>
 8009eb8:	4629      	mov	r1, r5
 8009eba:	4638      	mov	r0, r7
 8009ebc:	f7ff ffc2 	bl	8009e44 <sbrk_aligned>
 8009ec0:	1c43      	adds	r3, r0, #1
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	d14d      	bne.n	8009f62 <_malloc_r+0xde>
 8009ec6:	6834      	ldr	r4, [r6, #0]
 8009ec8:	4626      	mov	r6, r4
 8009eca:	2e00      	cmp	r6, #0
 8009ecc:	d140      	bne.n	8009f50 <_malloc_r+0xcc>
 8009ece:	6823      	ldr	r3, [r4, #0]
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	eb04 0803 	add.w	r8, r4, r3
 8009ed8:	f000 fcca 	bl	800a870 <_sbrk_r>
 8009edc:	4580      	cmp	r8, r0
 8009ede:	d13a      	bne.n	8009f56 <_malloc_r+0xd2>
 8009ee0:	6821      	ldr	r1, [r4, #0]
 8009ee2:	3503      	adds	r5, #3
 8009ee4:	1a6d      	subs	r5, r5, r1
 8009ee6:	f025 0503 	bic.w	r5, r5, #3
 8009eea:	3508      	adds	r5, #8
 8009eec:	2d0c      	cmp	r5, #12
 8009eee:	bf38      	it	cc
 8009ef0:	250c      	movcc	r5, #12
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	f7ff ffa5 	bl	8009e44 <sbrk_aligned>
 8009efa:	3001      	adds	r0, #1
 8009efc:	d02b      	beq.n	8009f56 <_malloc_r+0xd2>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	442b      	add	r3, r5
 8009f02:	6023      	str	r3, [r4, #0]
 8009f04:	e00e      	b.n	8009f24 <_malloc_r+0xa0>
 8009f06:	6822      	ldr	r2, [r4, #0]
 8009f08:	1b52      	subs	r2, r2, r5
 8009f0a:	d41e      	bmi.n	8009f4a <_malloc_r+0xc6>
 8009f0c:	2a0b      	cmp	r2, #11
 8009f0e:	d916      	bls.n	8009f3e <_malloc_r+0xba>
 8009f10:	1961      	adds	r1, r4, r5
 8009f12:	42a3      	cmp	r3, r4
 8009f14:	6025      	str	r5, [r4, #0]
 8009f16:	bf18      	it	ne
 8009f18:	6059      	strne	r1, [r3, #4]
 8009f1a:	6863      	ldr	r3, [r4, #4]
 8009f1c:	bf08      	it	eq
 8009f1e:	6031      	streq	r1, [r6, #0]
 8009f20:	5162      	str	r2, [r4, r5]
 8009f22:	604b      	str	r3, [r1, #4]
 8009f24:	4638      	mov	r0, r7
 8009f26:	f104 060b 	add.w	r6, r4, #11
 8009f2a:	f002 f847 	bl	800bfbc <__malloc_unlock>
 8009f2e:	f026 0607 	bic.w	r6, r6, #7
 8009f32:	1d23      	adds	r3, r4, #4
 8009f34:	1af2      	subs	r2, r6, r3
 8009f36:	d0b6      	beq.n	8009ea6 <_malloc_r+0x22>
 8009f38:	1b9b      	subs	r3, r3, r6
 8009f3a:	50a3      	str	r3, [r4, r2]
 8009f3c:	e7b3      	b.n	8009ea6 <_malloc_r+0x22>
 8009f3e:	6862      	ldr	r2, [r4, #4]
 8009f40:	42a3      	cmp	r3, r4
 8009f42:	bf0c      	ite	eq
 8009f44:	6032      	streq	r2, [r6, #0]
 8009f46:	605a      	strne	r2, [r3, #4]
 8009f48:	e7ec      	b.n	8009f24 <_malloc_r+0xa0>
 8009f4a:	4623      	mov	r3, r4
 8009f4c:	6864      	ldr	r4, [r4, #4]
 8009f4e:	e7b2      	b.n	8009eb6 <_malloc_r+0x32>
 8009f50:	4634      	mov	r4, r6
 8009f52:	6876      	ldr	r6, [r6, #4]
 8009f54:	e7b9      	b.n	8009eca <_malloc_r+0x46>
 8009f56:	230c      	movs	r3, #12
 8009f58:	603b      	str	r3, [r7, #0]
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	f002 f82e 	bl	800bfbc <__malloc_unlock>
 8009f60:	e7a1      	b.n	8009ea6 <_malloc_r+0x22>
 8009f62:	6025      	str	r5, [r4, #0]
 8009f64:	e7de      	b.n	8009f24 <_malloc_r+0xa0>
 8009f66:	bf00      	nop
 8009f68:	20000b1c 	.word	0x20000b1c

08009f6c <__cvt>:
 8009f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	ec55 4b10 	vmov	r4, r5, d0
 8009f74:	2d00      	cmp	r5, #0
 8009f76:	460e      	mov	r6, r1
 8009f78:	4619      	mov	r1, r3
 8009f7a:	462b      	mov	r3, r5
 8009f7c:	bfbb      	ittet	lt
 8009f7e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f82:	461d      	movlt	r5, r3
 8009f84:	2300      	movge	r3, #0
 8009f86:	232d      	movlt	r3, #45	; 0x2d
 8009f88:	700b      	strb	r3, [r1, #0]
 8009f8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f8c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f90:	4691      	mov	r9, r2
 8009f92:	f023 0820 	bic.w	r8, r3, #32
 8009f96:	bfbc      	itt	lt
 8009f98:	4622      	movlt	r2, r4
 8009f9a:	4614      	movlt	r4, r2
 8009f9c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fa0:	d005      	beq.n	8009fae <__cvt+0x42>
 8009fa2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009fa6:	d100      	bne.n	8009faa <__cvt+0x3e>
 8009fa8:	3601      	adds	r6, #1
 8009faa:	2102      	movs	r1, #2
 8009fac:	e000      	b.n	8009fb0 <__cvt+0x44>
 8009fae:	2103      	movs	r1, #3
 8009fb0:	ab03      	add	r3, sp, #12
 8009fb2:	9301      	str	r3, [sp, #4]
 8009fb4:	ab02      	add	r3, sp, #8
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	ec45 4b10 	vmov	d0, r4, r5
 8009fbc:	4653      	mov	r3, sl
 8009fbe:	4632      	mov	r2, r6
 8009fc0:	f000 ffe2 	bl	800af88 <_dtoa_r>
 8009fc4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009fc8:	4607      	mov	r7, r0
 8009fca:	d102      	bne.n	8009fd2 <__cvt+0x66>
 8009fcc:	f019 0f01 	tst.w	r9, #1
 8009fd0:	d022      	beq.n	800a018 <__cvt+0xac>
 8009fd2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fd6:	eb07 0906 	add.w	r9, r7, r6
 8009fda:	d110      	bne.n	8009ffe <__cvt+0x92>
 8009fdc:	783b      	ldrb	r3, [r7, #0]
 8009fde:	2b30      	cmp	r3, #48	; 0x30
 8009fe0:	d10a      	bne.n	8009ff8 <__cvt+0x8c>
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 fde7 	bl	8000bbc <__aeabi_dcmpeq>
 8009fee:	b918      	cbnz	r0, 8009ff8 <__cvt+0x8c>
 8009ff0:	f1c6 0601 	rsb	r6, r6, #1
 8009ff4:	f8ca 6000 	str.w	r6, [sl]
 8009ff8:	f8da 3000 	ldr.w	r3, [sl]
 8009ffc:	4499      	add	r9, r3
 8009ffe:	2200      	movs	r2, #0
 800a000:	2300      	movs	r3, #0
 800a002:	4620      	mov	r0, r4
 800a004:	4629      	mov	r1, r5
 800a006:	f7f6 fdd9 	bl	8000bbc <__aeabi_dcmpeq>
 800a00a:	b108      	cbz	r0, 800a010 <__cvt+0xa4>
 800a00c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a010:	2230      	movs	r2, #48	; 0x30
 800a012:	9b03      	ldr	r3, [sp, #12]
 800a014:	454b      	cmp	r3, r9
 800a016:	d307      	bcc.n	800a028 <__cvt+0xbc>
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a01c:	1bdb      	subs	r3, r3, r7
 800a01e:	4638      	mov	r0, r7
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	b004      	add	sp, #16
 800a024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a028:	1c59      	adds	r1, r3, #1
 800a02a:	9103      	str	r1, [sp, #12]
 800a02c:	701a      	strb	r2, [r3, #0]
 800a02e:	e7f0      	b.n	800a012 <__cvt+0xa6>

0800a030 <__exponent>:
 800a030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a032:	4603      	mov	r3, r0
 800a034:	2900      	cmp	r1, #0
 800a036:	bfb8      	it	lt
 800a038:	4249      	neglt	r1, r1
 800a03a:	f803 2b02 	strb.w	r2, [r3], #2
 800a03e:	bfb4      	ite	lt
 800a040:	222d      	movlt	r2, #45	; 0x2d
 800a042:	222b      	movge	r2, #43	; 0x2b
 800a044:	2909      	cmp	r1, #9
 800a046:	7042      	strb	r2, [r0, #1]
 800a048:	dd2a      	ble.n	800a0a0 <__exponent+0x70>
 800a04a:	f10d 0407 	add.w	r4, sp, #7
 800a04e:	46a4      	mov	ip, r4
 800a050:	270a      	movs	r7, #10
 800a052:	46a6      	mov	lr, r4
 800a054:	460a      	mov	r2, r1
 800a056:	fb91 f6f7 	sdiv	r6, r1, r7
 800a05a:	fb07 1516 	mls	r5, r7, r6, r1
 800a05e:	3530      	adds	r5, #48	; 0x30
 800a060:	2a63      	cmp	r2, #99	; 0x63
 800a062:	f104 34ff 	add.w	r4, r4, #4294967295
 800a066:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a06a:	4631      	mov	r1, r6
 800a06c:	dcf1      	bgt.n	800a052 <__exponent+0x22>
 800a06e:	3130      	adds	r1, #48	; 0x30
 800a070:	f1ae 0502 	sub.w	r5, lr, #2
 800a074:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a078:	1c44      	adds	r4, r0, #1
 800a07a:	4629      	mov	r1, r5
 800a07c:	4561      	cmp	r1, ip
 800a07e:	d30a      	bcc.n	800a096 <__exponent+0x66>
 800a080:	f10d 0209 	add.w	r2, sp, #9
 800a084:	eba2 020e 	sub.w	r2, r2, lr
 800a088:	4565      	cmp	r5, ip
 800a08a:	bf88      	it	hi
 800a08c:	2200      	movhi	r2, #0
 800a08e:	4413      	add	r3, r2
 800a090:	1a18      	subs	r0, r3, r0
 800a092:	b003      	add	sp, #12
 800a094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a096:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a09a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a09e:	e7ed      	b.n	800a07c <__exponent+0x4c>
 800a0a0:	2330      	movs	r3, #48	; 0x30
 800a0a2:	3130      	adds	r1, #48	; 0x30
 800a0a4:	7083      	strb	r3, [r0, #2]
 800a0a6:	70c1      	strb	r1, [r0, #3]
 800a0a8:	1d03      	adds	r3, r0, #4
 800a0aa:	e7f1      	b.n	800a090 <__exponent+0x60>

0800a0ac <_printf_float>:
 800a0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b0:	ed2d 8b02 	vpush	{d8}
 800a0b4:	b08d      	sub	sp, #52	; 0x34
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a0bc:	4616      	mov	r6, r2
 800a0be:	461f      	mov	r7, r3
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	f001 ff5d 	bl	800bf80 <_localeconv_r>
 800a0c6:	f8d0 a000 	ldr.w	sl, [r0]
 800a0ca:	4650      	mov	r0, sl
 800a0cc:	f7f6 f8f0 	bl	80002b0 <strlen>
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	9305      	str	r3, [sp, #20]
 800a0d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a0e0:	3307      	adds	r3, #7
 800a0e2:	f023 0307 	bic.w	r3, r3, #7
 800a0e6:	f103 0208 	add.w	r2, r3, #8
 800a0ea:	f8c8 2000 	str.w	r2, [r8]
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a0f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a0fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	f8cd 8018 	str.w	r8, [sp, #24]
 800a104:	ee08 0a10 	vmov	s16, r0
 800a108:	4b9f      	ldr	r3, [pc, #636]	; (800a388 <_printf_float+0x2dc>)
 800a10a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a10e:	f04f 32ff 	mov.w	r2, #4294967295
 800a112:	f7f6 fd85 	bl	8000c20 <__aeabi_dcmpun>
 800a116:	bb88      	cbnz	r0, 800a17c <_printf_float+0xd0>
 800a118:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a11c:	4b9a      	ldr	r3, [pc, #616]	; (800a388 <_printf_float+0x2dc>)
 800a11e:	f04f 32ff 	mov.w	r2, #4294967295
 800a122:	f7f6 fd5f 	bl	8000be4 <__aeabi_dcmple>
 800a126:	bb48      	cbnz	r0, 800a17c <_printf_float+0xd0>
 800a128:	2200      	movs	r2, #0
 800a12a:	2300      	movs	r3, #0
 800a12c:	4640      	mov	r0, r8
 800a12e:	4649      	mov	r1, r9
 800a130:	f7f6 fd4e 	bl	8000bd0 <__aeabi_dcmplt>
 800a134:	b110      	cbz	r0, 800a13c <_printf_float+0x90>
 800a136:	232d      	movs	r3, #45	; 0x2d
 800a138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a13c:	4b93      	ldr	r3, [pc, #588]	; (800a38c <_printf_float+0x2e0>)
 800a13e:	4894      	ldr	r0, [pc, #592]	; (800a390 <_printf_float+0x2e4>)
 800a140:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a144:	bf94      	ite	ls
 800a146:	4698      	movls	r8, r3
 800a148:	4680      	movhi	r8, r0
 800a14a:	2303      	movs	r3, #3
 800a14c:	6123      	str	r3, [r4, #16]
 800a14e:	9b05      	ldr	r3, [sp, #20]
 800a150:	f023 0204 	bic.w	r2, r3, #4
 800a154:	6022      	str	r2, [r4, #0]
 800a156:	f04f 0900 	mov.w	r9, #0
 800a15a:	9700      	str	r7, [sp, #0]
 800a15c:	4633      	mov	r3, r6
 800a15e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a160:	4621      	mov	r1, r4
 800a162:	4628      	mov	r0, r5
 800a164:	f000 f9d8 	bl	800a518 <_printf_common>
 800a168:	3001      	adds	r0, #1
 800a16a:	f040 8090 	bne.w	800a28e <_printf_float+0x1e2>
 800a16e:	f04f 30ff 	mov.w	r0, #4294967295
 800a172:	b00d      	add	sp, #52	; 0x34
 800a174:	ecbd 8b02 	vpop	{d8}
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	4642      	mov	r2, r8
 800a17e:	464b      	mov	r3, r9
 800a180:	4640      	mov	r0, r8
 800a182:	4649      	mov	r1, r9
 800a184:	f7f6 fd4c 	bl	8000c20 <__aeabi_dcmpun>
 800a188:	b140      	cbz	r0, 800a19c <_printf_float+0xf0>
 800a18a:	464b      	mov	r3, r9
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	bfbc      	itt	lt
 800a190:	232d      	movlt	r3, #45	; 0x2d
 800a192:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a196:	487f      	ldr	r0, [pc, #508]	; (800a394 <_printf_float+0x2e8>)
 800a198:	4b7f      	ldr	r3, [pc, #508]	; (800a398 <_printf_float+0x2ec>)
 800a19a:	e7d1      	b.n	800a140 <_printf_float+0x94>
 800a19c:	6863      	ldr	r3, [r4, #4]
 800a19e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a1a2:	9206      	str	r2, [sp, #24]
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	d13f      	bne.n	800a228 <_printf_float+0x17c>
 800a1a8:	2306      	movs	r3, #6
 800a1aa:	6063      	str	r3, [r4, #4]
 800a1ac:	9b05      	ldr	r3, [sp, #20]
 800a1ae:	6861      	ldr	r1, [r4, #4]
 800a1b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	9303      	str	r3, [sp, #12]
 800a1b8:	ab0a      	add	r3, sp, #40	; 0x28
 800a1ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a1be:	ab09      	add	r3, sp, #36	; 0x24
 800a1c0:	ec49 8b10 	vmov	d0, r8, r9
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	6022      	str	r2, [r4, #0]
 800a1c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	f7ff fecd 	bl	8009f6c <__cvt>
 800a1d2:	9b06      	ldr	r3, [sp, #24]
 800a1d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1d6:	2b47      	cmp	r3, #71	; 0x47
 800a1d8:	4680      	mov	r8, r0
 800a1da:	d108      	bne.n	800a1ee <_printf_float+0x142>
 800a1dc:	1cc8      	adds	r0, r1, #3
 800a1de:	db02      	blt.n	800a1e6 <_printf_float+0x13a>
 800a1e0:	6863      	ldr	r3, [r4, #4]
 800a1e2:	4299      	cmp	r1, r3
 800a1e4:	dd41      	ble.n	800a26a <_printf_float+0x1be>
 800a1e6:	f1ab 0b02 	sub.w	fp, fp, #2
 800a1ea:	fa5f fb8b 	uxtb.w	fp, fp
 800a1ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1f2:	d820      	bhi.n	800a236 <_printf_float+0x18a>
 800a1f4:	3901      	subs	r1, #1
 800a1f6:	465a      	mov	r2, fp
 800a1f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a1fc:	9109      	str	r1, [sp, #36]	; 0x24
 800a1fe:	f7ff ff17 	bl	800a030 <__exponent>
 800a202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a204:	1813      	adds	r3, r2, r0
 800a206:	2a01      	cmp	r2, #1
 800a208:	4681      	mov	r9, r0
 800a20a:	6123      	str	r3, [r4, #16]
 800a20c:	dc02      	bgt.n	800a214 <_printf_float+0x168>
 800a20e:	6822      	ldr	r2, [r4, #0]
 800a210:	07d2      	lsls	r2, r2, #31
 800a212:	d501      	bpl.n	800a218 <_printf_float+0x16c>
 800a214:	3301      	adds	r3, #1
 800a216:	6123      	str	r3, [r4, #16]
 800a218:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d09c      	beq.n	800a15a <_printf_float+0xae>
 800a220:	232d      	movs	r3, #45	; 0x2d
 800a222:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a226:	e798      	b.n	800a15a <_printf_float+0xae>
 800a228:	9a06      	ldr	r2, [sp, #24]
 800a22a:	2a47      	cmp	r2, #71	; 0x47
 800a22c:	d1be      	bne.n	800a1ac <_printf_float+0x100>
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d1bc      	bne.n	800a1ac <_printf_float+0x100>
 800a232:	2301      	movs	r3, #1
 800a234:	e7b9      	b.n	800a1aa <_printf_float+0xfe>
 800a236:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a23a:	d118      	bne.n	800a26e <_printf_float+0x1c2>
 800a23c:	2900      	cmp	r1, #0
 800a23e:	6863      	ldr	r3, [r4, #4]
 800a240:	dd0b      	ble.n	800a25a <_printf_float+0x1ae>
 800a242:	6121      	str	r1, [r4, #16]
 800a244:	b913      	cbnz	r3, 800a24c <_printf_float+0x1a0>
 800a246:	6822      	ldr	r2, [r4, #0]
 800a248:	07d0      	lsls	r0, r2, #31
 800a24a:	d502      	bpl.n	800a252 <_printf_float+0x1a6>
 800a24c:	3301      	adds	r3, #1
 800a24e:	440b      	add	r3, r1
 800a250:	6123      	str	r3, [r4, #16]
 800a252:	65a1      	str	r1, [r4, #88]	; 0x58
 800a254:	f04f 0900 	mov.w	r9, #0
 800a258:	e7de      	b.n	800a218 <_printf_float+0x16c>
 800a25a:	b913      	cbnz	r3, 800a262 <_printf_float+0x1b6>
 800a25c:	6822      	ldr	r2, [r4, #0]
 800a25e:	07d2      	lsls	r2, r2, #31
 800a260:	d501      	bpl.n	800a266 <_printf_float+0x1ba>
 800a262:	3302      	adds	r3, #2
 800a264:	e7f4      	b.n	800a250 <_printf_float+0x1a4>
 800a266:	2301      	movs	r3, #1
 800a268:	e7f2      	b.n	800a250 <_printf_float+0x1a4>
 800a26a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a270:	4299      	cmp	r1, r3
 800a272:	db05      	blt.n	800a280 <_printf_float+0x1d4>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	6121      	str	r1, [r4, #16]
 800a278:	07d8      	lsls	r0, r3, #31
 800a27a:	d5ea      	bpl.n	800a252 <_printf_float+0x1a6>
 800a27c:	1c4b      	adds	r3, r1, #1
 800a27e:	e7e7      	b.n	800a250 <_printf_float+0x1a4>
 800a280:	2900      	cmp	r1, #0
 800a282:	bfd4      	ite	le
 800a284:	f1c1 0202 	rsble	r2, r1, #2
 800a288:	2201      	movgt	r2, #1
 800a28a:	4413      	add	r3, r2
 800a28c:	e7e0      	b.n	800a250 <_printf_float+0x1a4>
 800a28e:	6823      	ldr	r3, [r4, #0]
 800a290:	055a      	lsls	r2, r3, #21
 800a292:	d407      	bmi.n	800a2a4 <_printf_float+0x1f8>
 800a294:	6923      	ldr	r3, [r4, #16]
 800a296:	4642      	mov	r2, r8
 800a298:	4631      	mov	r1, r6
 800a29a:	4628      	mov	r0, r5
 800a29c:	47b8      	blx	r7
 800a29e:	3001      	adds	r0, #1
 800a2a0:	d12c      	bne.n	800a2fc <_printf_float+0x250>
 800a2a2:	e764      	b.n	800a16e <_printf_float+0xc2>
 800a2a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2a8:	f240 80e0 	bls.w	800a46c <_printf_float+0x3c0>
 800a2ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	f7f6 fc82 	bl	8000bbc <__aeabi_dcmpeq>
 800a2b8:	2800      	cmp	r0, #0
 800a2ba:	d034      	beq.n	800a326 <_printf_float+0x27a>
 800a2bc:	4a37      	ldr	r2, [pc, #220]	; (800a39c <_printf_float+0x2f0>)
 800a2be:	2301      	movs	r3, #1
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4628      	mov	r0, r5
 800a2c4:	47b8      	blx	r7
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	f43f af51 	beq.w	800a16e <_printf_float+0xc2>
 800a2cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	db02      	blt.n	800a2da <_printf_float+0x22e>
 800a2d4:	6823      	ldr	r3, [r4, #0]
 800a2d6:	07d8      	lsls	r0, r3, #31
 800a2d8:	d510      	bpl.n	800a2fc <_printf_float+0x250>
 800a2da:	ee18 3a10 	vmov	r3, s16
 800a2de:	4652      	mov	r2, sl
 800a2e0:	4631      	mov	r1, r6
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	47b8      	blx	r7
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	f43f af41 	beq.w	800a16e <_printf_float+0xc2>
 800a2ec:	f04f 0800 	mov.w	r8, #0
 800a2f0:	f104 091a 	add.w	r9, r4, #26
 800a2f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2f6:	3b01      	subs	r3, #1
 800a2f8:	4543      	cmp	r3, r8
 800a2fa:	dc09      	bgt.n	800a310 <_printf_float+0x264>
 800a2fc:	6823      	ldr	r3, [r4, #0]
 800a2fe:	079b      	lsls	r3, r3, #30
 800a300:	f100 8105 	bmi.w	800a50e <_printf_float+0x462>
 800a304:	68e0      	ldr	r0, [r4, #12]
 800a306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a308:	4298      	cmp	r0, r3
 800a30a:	bfb8      	it	lt
 800a30c:	4618      	movlt	r0, r3
 800a30e:	e730      	b.n	800a172 <_printf_float+0xc6>
 800a310:	2301      	movs	r3, #1
 800a312:	464a      	mov	r2, r9
 800a314:	4631      	mov	r1, r6
 800a316:	4628      	mov	r0, r5
 800a318:	47b8      	blx	r7
 800a31a:	3001      	adds	r0, #1
 800a31c:	f43f af27 	beq.w	800a16e <_printf_float+0xc2>
 800a320:	f108 0801 	add.w	r8, r8, #1
 800a324:	e7e6      	b.n	800a2f4 <_printf_float+0x248>
 800a326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dc39      	bgt.n	800a3a0 <_printf_float+0x2f4>
 800a32c:	4a1b      	ldr	r2, [pc, #108]	; (800a39c <_printf_float+0x2f0>)
 800a32e:	2301      	movs	r3, #1
 800a330:	4631      	mov	r1, r6
 800a332:	4628      	mov	r0, r5
 800a334:	47b8      	blx	r7
 800a336:	3001      	adds	r0, #1
 800a338:	f43f af19 	beq.w	800a16e <_printf_float+0xc2>
 800a33c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a340:	4313      	orrs	r3, r2
 800a342:	d102      	bne.n	800a34a <_printf_float+0x29e>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	07d9      	lsls	r1, r3, #31
 800a348:	d5d8      	bpl.n	800a2fc <_printf_float+0x250>
 800a34a:	ee18 3a10 	vmov	r3, s16
 800a34e:	4652      	mov	r2, sl
 800a350:	4631      	mov	r1, r6
 800a352:	4628      	mov	r0, r5
 800a354:	47b8      	blx	r7
 800a356:	3001      	adds	r0, #1
 800a358:	f43f af09 	beq.w	800a16e <_printf_float+0xc2>
 800a35c:	f04f 0900 	mov.w	r9, #0
 800a360:	f104 0a1a 	add.w	sl, r4, #26
 800a364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a366:	425b      	negs	r3, r3
 800a368:	454b      	cmp	r3, r9
 800a36a:	dc01      	bgt.n	800a370 <_printf_float+0x2c4>
 800a36c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36e:	e792      	b.n	800a296 <_printf_float+0x1ea>
 800a370:	2301      	movs	r3, #1
 800a372:	4652      	mov	r2, sl
 800a374:	4631      	mov	r1, r6
 800a376:	4628      	mov	r0, r5
 800a378:	47b8      	blx	r7
 800a37a:	3001      	adds	r0, #1
 800a37c:	f43f aef7 	beq.w	800a16e <_printf_float+0xc2>
 800a380:	f109 0901 	add.w	r9, r9, #1
 800a384:	e7ee      	b.n	800a364 <_printf_float+0x2b8>
 800a386:	bf00      	nop
 800a388:	7fefffff 	.word	0x7fefffff
 800a38c:	08026000 	.word	0x08026000
 800a390:	08026004 	.word	0x08026004
 800a394:	0802600c 	.word	0x0802600c
 800a398:	08026008 	.word	0x08026008
 800a39c:	080264b4 	.word	0x080264b4
 800a3a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	bfa8      	it	ge
 800a3a8:	461a      	movge	r2, r3
 800a3aa:	2a00      	cmp	r2, #0
 800a3ac:	4691      	mov	r9, r2
 800a3ae:	dc37      	bgt.n	800a420 <_printf_float+0x374>
 800a3b0:	f04f 0b00 	mov.w	fp, #0
 800a3b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3b8:	f104 021a 	add.w	r2, r4, #26
 800a3bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3be:	9305      	str	r3, [sp, #20]
 800a3c0:	eba3 0309 	sub.w	r3, r3, r9
 800a3c4:	455b      	cmp	r3, fp
 800a3c6:	dc33      	bgt.n	800a430 <_printf_float+0x384>
 800a3c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	db3b      	blt.n	800a448 <_printf_float+0x39c>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	07da      	lsls	r2, r3, #31
 800a3d4:	d438      	bmi.n	800a448 <_printf_float+0x39c>
 800a3d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d8:	9a05      	ldr	r2, [sp, #20]
 800a3da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3dc:	1a9a      	subs	r2, r3, r2
 800a3de:	eba3 0901 	sub.w	r9, r3, r1
 800a3e2:	4591      	cmp	r9, r2
 800a3e4:	bfa8      	it	ge
 800a3e6:	4691      	movge	r9, r2
 800a3e8:	f1b9 0f00 	cmp.w	r9, #0
 800a3ec:	dc35      	bgt.n	800a45a <_printf_float+0x3ae>
 800a3ee:	f04f 0800 	mov.w	r8, #0
 800a3f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3f6:	f104 0a1a 	add.w	sl, r4, #26
 800a3fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3fe:	1a9b      	subs	r3, r3, r2
 800a400:	eba3 0309 	sub.w	r3, r3, r9
 800a404:	4543      	cmp	r3, r8
 800a406:	f77f af79 	ble.w	800a2fc <_printf_float+0x250>
 800a40a:	2301      	movs	r3, #1
 800a40c:	4652      	mov	r2, sl
 800a40e:	4631      	mov	r1, r6
 800a410:	4628      	mov	r0, r5
 800a412:	47b8      	blx	r7
 800a414:	3001      	adds	r0, #1
 800a416:	f43f aeaa 	beq.w	800a16e <_printf_float+0xc2>
 800a41a:	f108 0801 	add.w	r8, r8, #1
 800a41e:	e7ec      	b.n	800a3fa <_printf_float+0x34e>
 800a420:	4613      	mov	r3, r2
 800a422:	4631      	mov	r1, r6
 800a424:	4642      	mov	r2, r8
 800a426:	4628      	mov	r0, r5
 800a428:	47b8      	blx	r7
 800a42a:	3001      	adds	r0, #1
 800a42c:	d1c0      	bne.n	800a3b0 <_printf_float+0x304>
 800a42e:	e69e      	b.n	800a16e <_printf_float+0xc2>
 800a430:	2301      	movs	r3, #1
 800a432:	4631      	mov	r1, r6
 800a434:	4628      	mov	r0, r5
 800a436:	9205      	str	r2, [sp, #20]
 800a438:	47b8      	blx	r7
 800a43a:	3001      	adds	r0, #1
 800a43c:	f43f ae97 	beq.w	800a16e <_printf_float+0xc2>
 800a440:	9a05      	ldr	r2, [sp, #20]
 800a442:	f10b 0b01 	add.w	fp, fp, #1
 800a446:	e7b9      	b.n	800a3bc <_printf_float+0x310>
 800a448:	ee18 3a10 	vmov	r3, s16
 800a44c:	4652      	mov	r2, sl
 800a44e:	4631      	mov	r1, r6
 800a450:	4628      	mov	r0, r5
 800a452:	47b8      	blx	r7
 800a454:	3001      	adds	r0, #1
 800a456:	d1be      	bne.n	800a3d6 <_printf_float+0x32a>
 800a458:	e689      	b.n	800a16e <_printf_float+0xc2>
 800a45a:	9a05      	ldr	r2, [sp, #20]
 800a45c:	464b      	mov	r3, r9
 800a45e:	4442      	add	r2, r8
 800a460:	4631      	mov	r1, r6
 800a462:	4628      	mov	r0, r5
 800a464:	47b8      	blx	r7
 800a466:	3001      	adds	r0, #1
 800a468:	d1c1      	bne.n	800a3ee <_printf_float+0x342>
 800a46a:	e680      	b.n	800a16e <_printf_float+0xc2>
 800a46c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a46e:	2a01      	cmp	r2, #1
 800a470:	dc01      	bgt.n	800a476 <_printf_float+0x3ca>
 800a472:	07db      	lsls	r3, r3, #31
 800a474:	d538      	bpl.n	800a4e8 <_printf_float+0x43c>
 800a476:	2301      	movs	r3, #1
 800a478:	4642      	mov	r2, r8
 800a47a:	4631      	mov	r1, r6
 800a47c:	4628      	mov	r0, r5
 800a47e:	47b8      	blx	r7
 800a480:	3001      	adds	r0, #1
 800a482:	f43f ae74 	beq.w	800a16e <_printf_float+0xc2>
 800a486:	ee18 3a10 	vmov	r3, s16
 800a48a:	4652      	mov	r2, sl
 800a48c:	4631      	mov	r1, r6
 800a48e:	4628      	mov	r0, r5
 800a490:	47b8      	blx	r7
 800a492:	3001      	adds	r0, #1
 800a494:	f43f ae6b 	beq.w	800a16e <_printf_float+0xc2>
 800a498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a49c:	2200      	movs	r2, #0
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f7f6 fb8c 	bl	8000bbc <__aeabi_dcmpeq>
 800a4a4:	b9d8      	cbnz	r0, 800a4de <_printf_float+0x432>
 800a4a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4a8:	f108 0201 	add.w	r2, r8, #1
 800a4ac:	3b01      	subs	r3, #1
 800a4ae:	4631      	mov	r1, r6
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	47b8      	blx	r7
 800a4b4:	3001      	adds	r0, #1
 800a4b6:	d10e      	bne.n	800a4d6 <_printf_float+0x42a>
 800a4b8:	e659      	b.n	800a16e <_printf_float+0xc2>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	4652      	mov	r2, sl
 800a4be:	4631      	mov	r1, r6
 800a4c0:	4628      	mov	r0, r5
 800a4c2:	47b8      	blx	r7
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	f43f ae52 	beq.w	800a16e <_printf_float+0xc2>
 800a4ca:	f108 0801 	add.w	r8, r8, #1
 800a4ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	4543      	cmp	r3, r8
 800a4d4:	dcf1      	bgt.n	800a4ba <_printf_float+0x40e>
 800a4d6:	464b      	mov	r3, r9
 800a4d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4dc:	e6dc      	b.n	800a298 <_printf_float+0x1ec>
 800a4de:	f04f 0800 	mov.w	r8, #0
 800a4e2:	f104 0a1a 	add.w	sl, r4, #26
 800a4e6:	e7f2      	b.n	800a4ce <_printf_float+0x422>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	4642      	mov	r2, r8
 800a4ec:	e7df      	b.n	800a4ae <_printf_float+0x402>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	464a      	mov	r2, r9
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	47b8      	blx	r7
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	f43f ae38 	beq.w	800a16e <_printf_float+0xc2>
 800a4fe:	f108 0801 	add.w	r8, r8, #1
 800a502:	68e3      	ldr	r3, [r4, #12]
 800a504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a506:	1a5b      	subs	r3, r3, r1
 800a508:	4543      	cmp	r3, r8
 800a50a:	dcf0      	bgt.n	800a4ee <_printf_float+0x442>
 800a50c:	e6fa      	b.n	800a304 <_printf_float+0x258>
 800a50e:	f04f 0800 	mov.w	r8, #0
 800a512:	f104 0919 	add.w	r9, r4, #25
 800a516:	e7f4      	b.n	800a502 <_printf_float+0x456>

0800a518 <_printf_common>:
 800a518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a51c:	4616      	mov	r6, r2
 800a51e:	4699      	mov	r9, r3
 800a520:	688a      	ldr	r2, [r1, #8]
 800a522:	690b      	ldr	r3, [r1, #16]
 800a524:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a528:	4293      	cmp	r3, r2
 800a52a:	bfb8      	it	lt
 800a52c:	4613      	movlt	r3, r2
 800a52e:	6033      	str	r3, [r6, #0]
 800a530:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a534:	4607      	mov	r7, r0
 800a536:	460c      	mov	r4, r1
 800a538:	b10a      	cbz	r2, 800a53e <_printf_common+0x26>
 800a53a:	3301      	adds	r3, #1
 800a53c:	6033      	str	r3, [r6, #0]
 800a53e:	6823      	ldr	r3, [r4, #0]
 800a540:	0699      	lsls	r1, r3, #26
 800a542:	bf42      	ittt	mi
 800a544:	6833      	ldrmi	r3, [r6, #0]
 800a546:	3302      	addmi	r3, #2
 800a548:	6033      	strmi	r3, [r6, #0]
 800a54a:	6825      	ldr	r5, [r4, #0]
 800a54c:	f015 0506 	ands.w	r5, r5, #6
 800a550:	d106      	bne.n	800a560 <_printf_common+0x48>
 800a552:	f104 0a19 	add.w	sl, r4, #25
 800a556:	68e3      	ldr	r3, [r4, #12]
 800a558:	6832      	ldr	r2, [r6, #0]
 800a55a:	1a9b      	subs	r3, r3, r2
 800a55c:	42ab      	cmp	r3, r5
 800a55e:	dc26      	bgt.n	800a5ae <_printf_common+0x96>
 800a560:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a564:	1e13      	subs	r3, r2, #0
 800a566:	6822      	ldr	r2, [r4, #0]
 800a568:	bf18      	it	ne
 800a56a:	2301      	movne	r3, #1
 800a56c:	0692      	lsls	r2, r2, #26
 800a56e:	d42b      	bmi.n	800a5c8 <_printf_common+0xb0>
 800a570:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a574:	4649      	mov	r1, r9
 800a576:	4638      	mov	r0, r7
 800a578:	47c0      	blx	r8
 800a57a:	3001      	adds	r0, #1
 800a57c:	d01e      	beq.n	800a5bc <_printf_common+0xa4>
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	68e5      	ldr	r5, [r4, #12]
 800a582:	6832      	ldr	r2, [r6, #0]
 800a584:	f003 0306 	and.w	r3, r3, #6
 800a588:	2b04      	cmp	r3, #4
 800a58a:	bf08      	it	eq
 800a58c:	1aad      	subeq	r5, r5, r2
 800a58e:	68a3      	ldr	r3, [r4, #8]
 800a590:	6922      	ldr	r2, [r4, #16]
 800a592:	bf0c      	ite	eq
 800a594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a598:	2500      	movne	r5, #0
 800a59a:	4293      	cmp	r3, r2
 800a59c:	bfc4      	itt	gt
 800a59e:	1a9b      	subgt	r3, r3, r2
 800a5a0:	18ed      	addgt	r5, r5, r3
 800a5a2:	2600      	movs	r6, #0
 800a5a4:	341a      	adds	r4, #26
 800a5a6:	42b5      	cmp	r5, r6
 800a5a8:	d11a      	bne.n	800a5e0 <_printf_common+0xc8>
 800a5aa:	2000      	movs	r0, #0
 800a5ac:	e008      	b.n	800a5c0 <_printf_common+0xa8>
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	4652      	mov	r2, sl
 800a5b2:	4649      	mov	r1, r9
 800a5b4:	4638      	mov	r0, r7
 800a5b6:	47c0      	blx	r8
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	d103      	bne.n	800a5c4 <_printf_common+0xac>
 800a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5c4:	3501      	adds	r5, #1
 800a5c6:	e7c6      	b.n	800a556 <_printf_common+0x3e>
 800a5c8:	18e1      	adds	r1, r4, r3
 800a5ca:	1c5a      	adds	r2, r3, #1
 800a5cc:	2030      	movs	r0, #48	; 0x30
 800a5ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5d2:	4422      	add	r2, r4
 800a5d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5dc:	3302      	adds	r3, #2
 800a5de:	e7c7      	b.n	800a570 <_printf_common+0x58>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	4622      	mov	r2, r4
 800a5e4:	4649      	mov	r1, r9
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	47c0      	blx	r8
 800a5ea:	3001      	adds	r0, #1
 800a5ec:	d0e6      	beq.n	800a5bc <_printf_common+0xa4>
 800a5ee:	3601      	adds	r6, #1
 800a5f0:	e7d9      	b.n	800a5a6 <_printf_common+0x8e>
	...

0800a5f4 <_printf_i>:
 800a5f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f8:	7e0f      	ldrb	r7, [r1, #24]
 800a5fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a5fc:	2f78      	cmp	r7, #120	; 0x78
 800a5fe:	4691      	mov	r9, r2
 800a600:	4680      	mov	r8, r0
 800a602:	460c      	mov	r4, r1
 800a604:	469a      	mov	sl, r3
 800a606:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a60a:	d807      	bhi.n	800a61c <_printf_i+0x28>
 800a60c:	2f62      	cmp	r7, #98	; 0x62
 800a60e:	d80a      	bhi.n	800a626 <_printf_i+0x32>
 800a610:	2f00      	cmp	r7, #0
 800a612:	f000 80d8 	beq.w	800a7c6 <_printf_i+0x1d2>
 800a616:	2f58      	cmp	r7, #88	; 0x58
 800a618:	f000 80a3 	beq.w	800a762 <_printf_i+0x16e>
 800a61c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a620:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a624:	e03a      	b.n	800a69c <_printf_i+0xa8>
 800a626:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a62a:	2b15      	cmp	r3, #21
 800a62c:	d8f6      	bhi.n	800a61c <_printf_i+0x28>
 800a62e:	a101      	add	r1, pc, #4	; (adr r1, 800a634 <_printf_i+0x40>)
 800a630:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a634:	0800a68d 	.word	0x0800a68d
 800a638:	0800a6a1 	.word	0x0800a6a1
 800a63c:	0800a61d 	.word	0x0800a61d
 800a640:	0800a61d 	.word	0x0800a61d
 800a644:	0800a61d 	.word	0x0800a61d
 800a648:	0800a61d 	.word	0x0800a61d
 800a64c:	0800a6a1 	.word	0x0800a6a1
 800a650:	0800a61d 	.word	0x0800a61d
 800a654:	0800a61d 	.word	0x0800a61d
 800a658:	0800a61d 	.word	0x0800a61d
 800a65c:	0800a61d 	.word	0x0800a61d
 800a660:	0800a7ad 	.word	0x0800a7ad
 800a664:	0800a6d1 	.word	0x0800a6d1
 800a668:	0800a78f 	.word	0x0800a78f
 800a66c:	0800a61d 	.word	0x0800a61d
 800a670:	0800a61d 	.word	0x0800a61d
 800a674:	0800a7cf 	.word	0x0800a7cf
 800a678:	0800a61d 	.word	0x0800a61d
 800a67c:	0800a6d1 	.word	0x0800a6d1
 800a680:	0800a61d 	.word	0x0800a61d
 800a684:	0800a61d 	.word	0x0800a61d
 800a688:	0800a797 	.word	0x0800a797
 800a68c:	682b      	ldr	r3, [r5, #0]
 800a68e:	1d1a      	adds	r2, r3, #4
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	602a      	str	r2, [r5, #0]
 800a694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a69c:	2301      	movs	r3, #1
 800a69e:	e0a3      	b.n	800a7e8 <_printf_i+0x1f4>
 800a6a0:	6820      	ldr	r0, [r4, #0]
 800a6a2:	6829      	ldr	r1, [r5, #0]
 800a6a4:	0606      	lsls	r6, r0, #24
 800a6a6:	f101 0304 	add.w	r3, r1, #4
 800a6aa:	d50a      	bpl.n	800a6c2 <_printf_i+0xce>
 800a6ac:	680e      	ldr	r6, [r1, #0]
 800a6ae:	602b      	str	r3, [r5, #0]
 800a6b0:	2e00      	cmp	r6, #0
 800a6b2:	da03      	bge.n	800a6bc <_printf_i+0xc8>
 800a6b4:	232d      	movs	r3, #45	; 0x2d
 800a6b6:	4276      	negs	r6, r6
 800a6b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6bc:	485e      	ldr	r0, [pc, #376]	; (800a838 <_printf_i+0x244>)
 800a6be:	230a      	movs	r3, #10
 800a6c0:	e019      	b.n	800a6f6 <_printf_i+0x102>
 800a6c2:	680e      	ldr	r6, [r1, #0]
 800a6c4:	602b      	str	r3, [r5, #0]
 800a6c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6ca:	bf18      	it	ne
 800a6cc:	b236      	sxthne	r6, r6
 800a6ce:	e7ef      	b.n	800a6b0 <_printf_i+0xbc>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	6820      	ldr	r0, [r4, #0]
 800a6d4:	1d19      	adds	r1, r3, #4
 800a6d6:	6029      	str	r1, [r5, #0]
 800a6d8:	0601      	lsls	r1, r0, #24
 800a6da:	d501      	bpl.n	800a6e0 <_printf_i+0xec>
 800a6dc:	681e      	ldr	r6, [r3, #0]
 800a6de:	e002      	b.n	800a6e6 <_printf_i+0xf2>
 800a6e0:	0646      	lsls	r6, r0, #25
 800a6e2:	d5fb      	bpl.n	800a6dc <_printf_i+0xe8>
 800a6e4:	881e      	ldrh	r6, [r3, #0]
 800a6e6:	4854      	ldr	r0, [pc, #336]	; (800a838 <_printf_i+0x244>)
 800a6e8:	2f6f      	cmp	r7, #111	; 0x6f
 800a6ea:	bf0c      	ite	eq
 800a6ec:	2308      	moveq	r3, #8
 800a6ee:	230a      	movne	r3, #10
 800a6f0:	2100      	movs	r1, #0
 800a6f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6f6:	6865      	ldr	r5, [r4, #4]
 800a6f8:	60a5      	str	r5, [r4, #8]
 800a6fa:	2d00      	cmp	r5, #0
 800a6fc:	bfa2      	ittt	ge
 800a6fe:	6821      	ldrge	r1, [r4, #0]
 800a700:	f021 0104 	bicge.w	r1, r1, #4
 800a704:	6021      	strge	r1, [r4, #0]
 800a706:	b90e      	cbnz	r6, 800a70c <_printf_i+0x118>
 800a708:	2d00      	cmp	r5, #0
 800a70a:	d04d      	beq.n	800a7a8 <_printf_i+0x1b4>
 800a70c:	4615      	mov	r5, r2
 800a70e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a712:	fb03 6711 	mls	r7, r3, r1, r6
 800a716:	5dc7      	ldrb	r7, [r0, r7]
 800a718:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a71c:	4637      	mov	r7, r6
 800a71e:	42bb      	cmp	r3, r7
 800a720:	460e      	mov	r6, r1
 800a722:	d9f4      	bls.n	800a70e <_printf_i+0x11a>
 800a724:	2b08      	cmp	r3, #8
 800a726:	d10b      	bne.n	800a740 <_printf_i+0x14c>
 800a728:	6823      	ldr	r3, [r4, #0]
 800a72a:	07de      	lsls	r6, r3, #31
 800a72c:	d508      	bpl.n	800a740 <_printf_i+0x14c>
 800a72e:	6923      	ldr	r3, [r4, #16]
 800a730:	6861      	ldr	r1, [r4, #4]
 800a732:	4299      	cmp	r1, r3
 800a734:	bfde      	ittt	le
 800a736:	2330      	movle	r3, #48	; 0x30
 800a738:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a73c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a740:	1b52      	subs	r2, r2, r5
 800a742:	6122      	str	r2, [r4, #16]
 800a744:	f8cd a000 	str.w	sl, [sp]
 800a748:	464b      	mov	r3, r9
 800a74a:	aa03      	add	r2, sp, #12
 800a74c:	4621      	mov	r1, r4
 800a74e:	4640      	mov	r0, r8
 800a750:	f7ff fee2 	bl	800a518 <_printf_common>
 800a754:	3001      	adds	r0, #1
 800a756:	d14c      	bne.n	800a7f2 <_printf_i+0x1fe>
 800a758:	f04f 30ff 	mov.w	r0, #4294967295
 800a75c:	b004      	add	sp, #16
 800a75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a762:	4835      	ldr	r0, [pc, #212]	; (800a838 <_printf_i+0x244>)
 800a764:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a768:	6829      	ldr	r1, [r5, #0]
 800a76a:	6823      	ldr	r3, [r4, #0]
 800a76c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a770:	6029      	str	r1, [r5, #0]
 800a772:	061d      	lsls	r5, r3, #24
 800a774:	d514      	bpl.n	800a7a0 <_printf_i+0x1ac>
 800a776:	07df      	lsls	r7, r3, #31
 800a778:	bf44      	itt	mi
 800a77a:	f043 0320 	orrmi.w	r3, r3, #32
 800a77e:	6023      	strmi	r3, [r4, #0]
 800a780:	b91e      	cbnz	r6, 800a78a <_printf_i+0x196>
 800a782:	6823      	ldr	r3, [r4, #0]
 800a784:	f023 0320 	bic.w	r3, r3, #32
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	2310      	movs	r3, #16
 800a78c:	e7b0      	b.n	800a6f0 <_printf_i+0xfc>
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	f043 0320 	orr.w	r3, r3, #32
 800a794:	6023      	str	r3, [r4, #0]
 800a796:	2378      	movs	r3, #120	; 0x78
 800a798:	4828      	ldr	r0, [pc, #160]	; (800a83c <_printf_i+0x248>)
 800a79a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a79e:	e7e3      	b.n	800a768 <_printf_i+0x174>
 800a7a0:	0659      	lsls	r1, r3, #25
 800a7a2:	bf48      	it	mi
 800a7a4:	b2b6      	uxthmi	r6, r6
 800a7a6:	e7e6      	b.n	800a776 <_printf_i+0x182>
 800a7a8:	4615      	mov	r5, r2
 800a7aa:	e7bb      	b.n	800a724 <_printf_i+0x130>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	6826      	ldr	r6, [r4, #0]
 800a7b0:	6961      	ldr	r1, [r4, #20]
 800a7b2:	1d18      	adds	r0, r3, #4
 800a7b4:	6028      	str	r0, [r5, #0]
 800a7b6:	0635      	lsls	r5, r6, #24
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	d501      	bpl.n	800a7c0 <_printf_i+0x1cc>
 800a7bc:	6019      	str	r1, [r3, #0]
 800a7be:	e002      	b.n	800a7c6 <_printf_i+0x1d2>
 800a7c0:	0670      	lsls	r0, r6, #25
 800a7c2:	d5fb      	bpl.n	800a7bc <_printf_i+0x1c8>
 800a7c4:	8019      	strh	r1, [r3, #0]
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	6123      	str	r3, [r4, #16]
 800a7ca:	4615      	mov	r5, r2
 800a7cc:	e7ba      	b.n	800a744 <_printf_i+0x150>
 800a7ce:	682b      	ldr	r3, [r5, #0]
 800a7d0:	1d1a      	adds	r2, r3, #4
 800a7d2:	602a      	str	r2, [r5, #0]
 800a7d4:	681d      	ldr	r5, [r3, #0]
 800a7d6:	6862      	ldr	r2, [r4, #4]
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4628      	mov	r0, r5
 800a7dc:	f7f5 fd70 	bl	80002c0 <memchr>
 800a7e0:	b108      	cbz	r0, 800a7e6 <_printf_i+0x1f2>
 800a7e2:	1b40      	subs	r0, r0, r5
 800a7e4:	6060      	str	r0, [r4, #4]
 800a7e6:	6863      	ldr	r3, [r4, #4]
 800a7e8:	6123      	str	r3, [r4, #16]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f0:	e7a8      	b.n	800a744 <_printf_i+0x150>
 800a7f2:	6923      	ldr	r3, [r4, #16]
 800a7f4:	462a      	mov	r2, r5
 800a7f6:	4649      	mov	r1, r9
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	47d0      	blx	sl
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d0ab      	beq.n	800a758 <_printf_i+0x164>
 800a800:	6823      	ldr	r3, [r4, #0]
 800a802:	079b      	lsls	r3, r3, #30
 800a804:	d413      	bmi.n	800a82e <_printf_i+0x23a>
 800a806:	68e0      	ldr	r0, [r4, #12]
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	4298      	cmp	r0, r3
 800a80c:	bfb8      	it	lt
 800a80e:	4618      	movlt	r0, r3
 800a810:	e7a4      	b.n	800a75c <_printf_i+0x168>
 800a812:	2301      	movs	r3, #1
 800a814:	4632      	mov	r2, r6
 800a816:	4649      	mov	r1, r9
 800a818:	4640      	mov	r0, r8
 800a81a:	47d0      	blx	sl
 800a81c:	3001      	adds	r0, #1
 800a81e:	d09b      	beq.n	800a758 <_printf_i+0x164>
 800a820:	3501      	adds	r5, #1
 800a822:	68e3      	ldr	r3, [r4, #12]
 800a824:	9903      	ldr	r1, [sp, #12]
 800a826:	1a5b      	subs	r3, r3, r1
 800a828:	42ab      	cmp	r3, r5
 800a82a:	dcf2      	bgt.n	800a812 <_printf_i+0x21e>
 800a82c:	e7eb      	b.n	800a806 <_printf_i+0x212>
 800a82e:	2500      	movs	r5, #0
 800a830:	f104 0619 	add.w	r6, r4, #25
 800a834:	e7f5      	b.n	800a822 <_printf_i+0x22e>
 800a836:	bf00      	nop
 800a838:	08026010 	.word	0x08026010
 800a83c:	08026021 	.word	0x08026021

0800a840 <iprintf>:
 800a840:	b40f      	push	{r0, r1, r2, r3}
 800a842:	4b0a      	ldr	r3, [pc, #40]	; (800a86c <iprintf+0x2c>)
 800a844:	b513      	push	{r0, r1, r4, lr}
 800a846:	681c      	ldr	r4, [r3, #0]
 800a848:	b124      	cbz	r4, 800a854 <iprintf+0x14>
 800a84a:	69a3      	ldr	r3, [r4, #24]
 800a84c:	b913      	cbnz	r3, 800a854 <iprintf+0x14>
 800a84e:	4620      	mov	r0, r4
 800a850:	f001 f9e0 	bl	800bc14 <__sinit>
 800a854:	ab05      	add	r3, sp, #20
 800a856:	9a04      	ldr	r2, [sp, #16]
 800a858:	68a1      	ldr	r1, [r4, #8]
 800a85a:	9301      	str	r3, [sp, #4]
 800a85c:	4620      	mov	r0, r4
 800a85e:	f002 f8d3 	bl	800ca08 <_vfiprintf_r>
 800a862:	b002      	add	sp, #8
 800a864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a868:	b004      	add	sp, #16
 800a86a:	4770      	bx	lr
 800a86c:	200000cc 	.word	0x200000cc

0800a870 <_sbrk_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	4d06      	ldr	r5, [pc, #24]	; (800a88c <_sbrk_r+0x1c>)
 800a874:	2300      	movs	r3, #0
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	f003 fae0 	bl	800de40 <_sbrk>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_sbrk_r+0x1a>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	b103      	cbz	r3, 800a88a <_sbrk_r+0x1a>
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	20000b50 	.word	0x20000b50

0800a890 <sniprintf>:
 800a890:	b40c      	push	{r2, r3}
 800a892:	b530      	push	{r4, r5, lr}
 800a894:	4b17      	ldr	r3, [pc, #92]	; (800a8f4 <sniprintf+0x64>)
 800a896:	1e0c      	subs	r4, r1, #0
 800a898:	681d      	ldr	r5, [r3, #0]
 800a89a:	b09d      	sub	sp, #116	; 0x74
 800a89c:	da08      	bge.n	800a8b0 <sniprintf+0x20>
 800a89e:	238b      	movs	r3, #139	; 0x8b
 800a8a0:	602b      	str	r3, [r5, #0]
 800a8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a6:	b01d      	add	sp, #116	; 0x74
 800a8a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8ac:	b002      	add	sp, #8
 800a8ae:	4770      	bx	lr
 800a8b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8b8:	bf14      	ite	ne
 800a8ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8be:	4623      	moveq	r3, r4
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	9307      	str	r3, [sp, #28]
 800a8c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8c8:	9002      	str	r0, [sp, #8]
 800a8ca:	9006      	str	r0, [sp, #24]
 800a8cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a8d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a8d2:	ab21      	add	r3, sp, #132	; 0x84
 800a8d4:	a902      	add	r1, sp, #8
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	f001 ff6b 	bl	800c7b4 <_svfiprintf_r>
 800a8de:	1c43      	adds	r3, r0, #1
 800a8e0:	bfbc      	itt	lt
 800a8e2:	238b      	movlt	r3, #139	; 0x8b
 800a8e4:	602b      	strlt	r3, [r5, #0]
 800a8e6:	2c00      	cmp	r4, #0
 800a8e8:	d0dd      	beq.n	800a8a6 <sniprintf+0x16>
 800a8ea:	9b02      	ldr	r3, [sp, #8]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	701a      	strb	r2, [r3, #0]
 800a8f0:	e7d9      	b.n	800a8a6 <sniprintf+0x16>
 800a8f2:	bf00      	nop
 800a8f4:	200000cc 	.word	0x200000cc

0800a8f8 <time>:
 800a8f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8fa:	4b0b      	ldr	r3, [pc, #44]	; (800a928 <time+0x30>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	4669      	mov	r1, sp
 800a900:	4604      	mov	r4, r0
 800a902:	6818      	ldr	r0, [r3, #0]
 800a904:	f001 fa7a 	bl	800bdfc <_gettimeofday_r>
 800a908:	2800      	cmp	r0, #0
 800a90a:	bfbe      	ittt	lt
 800a90c:	f04f 32ff 	movlt.w	r2, #4294967295
 800a910:	f04f 33ff 	movlt.w	r3, #4294967295
 800a914:	e9cd 2300 	strdlt	r2, r3, [sp]
 800a918:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a91c:	b10c      	cbz	r4, 800a922 <time+0x2a>
 800a91e:	e9c4 0100 	strd	r0, r1, [r4]
 800a922:	b004      	add	sp, #16
 800a924:	bd10      	pop	{r4, pc}
 800a926:	bf00      	nop
 800a928:	200000cc 	.word	0x200000cc

0800a92c <__tzcalc_limits>:
 800a92c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a930:	4605      	mov	r5, r0
 800a932:	f001 fa75 	bl	800be20 <__gettzinfo>
 800a936:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800a93a:	429d      	cmp	r5, r3
 800a93c:	f340 8099 	ble.w	800aa72 <__tzcalc_limits+0x146>
 800a940:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800a944:	18ac      	adds	r4, r5, r2
 800a946:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800a94a:	f240 126d 	movw	r2, #365	; 0x16d
 800a94e:	10a4      	asrs	r4, r4, #2
 800a950:	fb02 4403 	mla	r4, r2, r3, r4
 800a954:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800a958:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800a95c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a960:	441c      	add	r4, r3
 800a962:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a966:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800a96a:	fb95 fcf3 	sdiv	ip, r5, r3
 800a96e:	fb03 5c1c 	mls	ip, r3, ip, r5
 800a972:	186a      	adds	r2, r5, r1
 800a974:	fabc f68c 	clz	r6, ip
 800a978:	fbb2 f2f3 	udiv	r2, r2, r3
 800a97c:	f005 0303 	and.w	r3, r5, #3
 800a980:	4414      	add	r4, r2
 800a982:	2264      	movs	r2, #100	; 0x64
 800a984:	6045      	str	r5, [r0, #4]
 800a986:	fb95 f7f2 	sdiv	r7, r5, r2
 800a98a:	0976      	lsrs	r6, r6, #5
 800a98c:	fb02 5717 	mls	r7, r2, r7, r5
 800a990:	4601      	mov	r1, r0
 800a992:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	f04f 0a07 	mov.w	sl, #7
 800a99c:	7a0d      	ldrb	r5, [r1, #8]
 800a99e:	694b      	ldr	r3, [r1, #20]
 800a9a0:	2d4a      	cmp	r5, #74	; 0x4a
 800a9a2:	d12d      	bne.n	800aa00 <__tzcalc_limits+0xd4>
 800a9a4:	9a00      	ldr	r2, [sp, #0]
 800a9a6:	eb04 0e03 	add.w	lr, r4, r3
 800a9aa:	b902      	cbnz	r2, 800a9ae <__tzcalc_limits+0x82>
 800a9ac:	b917      	cbnz	r7, 800a9b4 <__tzcalc_limits+0x88>
 800a9ae:	f1bc 0f00 	cmp.w	ip, #0
 800a9b2:	d123      	bne.n	800a9fc <__tzcalc_limits+0xd0>
 800a9b4:	2b3b      	cmp	r3, #59	; 0x3b
 800a9b6:	bfd4      	ite	le
 800a9b8:	2300      	movle	r3, #0
 800a9ba:	2301      	movgt	r3, #1
 800a9bc:	4473      	add	r3, lr
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	698d      	ldr	r5, [r1, #24]
 800a9c2:	4a2d      	ldr	r2, [pc, #180]	; (800aa78 <__tzcalc_limits+0x14c>)
 800a9c4:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800a9c8:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800a9cc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800a9ce:	18ed      	adds	r5, r5, r3
 800a9d0:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800a9d4:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800a9d8:	3128      	adds	r1, #40	; 0x28
 800a9da:	458b      	cmp	fp, r1
 800a9dc:	d1de      	bne.n	800a99c <__tzcalc_limits+0x70>
 800a9de:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800a9e2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800a9e6:	428c      	cmp	r4, r1
 800a9e8:	eb72 0303 	sbcs.w	r3, r2, r3
 800a9ec:	bfb4      	ite	lt
 800a9ee:	2301      	movlt	r3, #1
 800a9f0:	2300      	movge	r3, #0
 800a9f2:	6003      	str	r3, [r0, #0]
 800a9f4:	2001      	movs	r0, #1
 800a9f6:	b003      	add	sp, #12
 800a9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	e7dd      	b.n	800a9bc <__tzcalc_limits+0x90>
 800aa00:	2d44      	cmp	r5, #68	; 0x44
 800aa02:	d101      	bne.n	800aa08 <__tzcalc_limits+0xdc>
 800aa04:	4423      	add	r3, r4
 800aa06:	e7db      	b.n	800a9c0 <__tzcalc_limits+0x94>
 800aa08:	9a00      	ldr	r2, [sp, #0]
 800aa0a:	bb62      	cbnz	r2, 800aa66 <__tzcalc_limits+0x13a>
 800aa0c:	2f00      	cmp	r7, #0
 800aa0e:	bf0c      	ite	eq
 800aa10:	4635      	moveq	r5, r6
 800aa12:	2501      	movne	r5, #1
 800aa14:	68ca      	ldr	r2, [r1, #12]
 800aa16:	9201      	str	r2, [sp, #4]
 800aa18:	4a18      	ldr	r2, [pc, #96]	; (800aa7c <__tzcalc_limits+0x150>)
 800aa1a:	f04f 0930 	mov.w	r9, #48	; 0x30
 800aa1e:	fb09 2505 	mla	r5, r9, r5, r2
 800aa22:	46a6      	mov	lr, r4
 800aa24:	f04f 0800 	mov.w	r8, #0
 800aa28:	3d04      	subs	r5, #4
 800aa2a:	9a01      	ldr	r2, [sp, #4]
 800aa2c:	f108 0801 	add.w	r8, r8, #1
 800aa30:	4542      	cmp	r2, r8
 800aa32:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800aa36:	dc18      	bgt.n	800aa6a <__tzcalc_limits+0x13e>
 800aa38:	f10e 0504 	add.w	r5, lr, #4
 800aa3c:	fb95 f8fa 	sdiv	r8, r5, sl
 800aa40:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800aa44:	eba5 0808 	sub.w	r8, r5, r8
 800aa48:	ebb3 0808 	subs.w	r8, r3, r8
 800aa4c:	690b      	ldr	r3, [r1, #16]
 800aa4e:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa52:	bf48      	it	mi
 800aa54:	f108 0807 	addmi.w	r8, r8, #7
 800aa58:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800aa5c:	4443      	add	r3, r8
 800aa5e:	454b      	cmp	r3, r9
 800aa60:	da05      	bge.n	800aa6e <__tzcalc_limits+0x142>
 800aa62:	4473      	add	r3, lr
 800aa64:	e7ac      	b.n	800a9c0 <__tzcalc_limits+0x94>
 800aa66:	4635      	mov	r5, r6
 800aa68:	e7d4      	b.n	800aa14 <__tzcalc_limits+0xe8>
 800aa6a:	44ce      	add	lr, r9
 800aa6c:	e7dd      	b.n	800aa2a <__tzcalc_limits+0xfe>
 800aa6e:	3b07      	subs	r3, #7
 800aa70:	e7f5      	b.n	800aa5e <__tzcalc_limits+0x132>
 800aa72:	2000      	movs	r0, #0
 800aa74:	e7bf      	b.n	800a9f6 <__tzcalc_limits+0xca>
 800aa76:	bf00      	nop
 800aa78:	00015180 	.word	0x00015180
 800aa7c:	08025fa0 	.word	0x08025fa0

0800aa80 <__tz_lock>:
 800aa80:	4801      	ldr	r0, [pc, #4]	; (800aa88 <__tz_lock+0x8>)
 800aa82:	f001 ba82 	b.w	800bf8a <__retarget_lock_acquire>
 800aa86:	bf00      	nop
 800aa88:	20000b4c 	.word	0x20000b4c

0800aa8c <__tz_unlock>:
 800aa8c:	4801      	ldr	r0, [pc, #4]	; (800aa94 <__tz_unlock+0x8>)
 800aa8e:	f001 ba7e 	b.w	800bf8e <__retarget_lock_release>
 800aa92:	bf00      	nop
 800aa94:	20000b4c 	.word	0x20000b4c

0800aa98 <_tzset_unlocked>:
 800aa98:	4b01      	ldr	r3, [pc, #4]	; (800aaa0 <_tzset_unlocked+0x8>)
 800aa9a:	6818      	ldr	r0, [r3, #0]
 800aa9c:	f000 b802 	b.w	800aaa4 <_tzset_unlocked_r>
 800aaa0:	200000cc 	.word	0x200000cc

0800aaa4 <_tzset_unlocked_r>:
 800aaa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	b08d      	sub	sp, #52	; 0x34
 800aaaa:	4607      	mov	r7, r0
 800aaac:	f001 f9b8 	bl	800be20 <__gettzinfo>
 800aab0:	49b0      	ldr	r1, [pc, #704]	; (800ad74 <_tzset_unlocked_r+0x2d0>)
 800aab2:	4eb1      	ldr	r6, [pc, #708]	; (800ad78 <_tzset_unlocked_r+0x2d4>)
 800aab4:	4605      	mov	r5, r0
 800aab6:	4638      	mov	r0, r7
 800aab8:	f001 f998 	bl	800bdec <_getenv_r>
 800aabc:	4604      	mov	r4, r0
 800aabe:	b970      	cbnz	r0, 800aade <_tzset_unlocked_r+0x3a>
 800aac0:	4bae      	ldr	r3, [pc, #696]	; (800ad7c <_tzset_unlocked_r+0x2d8>)
 800aac2:	4aaf      	ldr	r2, [pc, #700]	; (800ad80 <_tzset_unlocked_r+0x2dc>)
 800aac4:	6018      	str	r0, [r3, #0]
 800aac6:	4baf      	ldr	r3, [pc, #700]	; (800ad84 <_tzset_unlocked_r+0x2e0>)
 800aac8:	6018      	str	r0, [r3, #0]
 800aaca:	4baf      	ldr	r3, [pc, #700]	; (800ad88 <_tzset_unlocked_r+0x2e4>)
 800aacc:	6830      	ldr	r0, [r6, #0]
 800aace:	e9c3 2200 	strd	r2, r2, [r3]
 800aad2:	f7ff f95b 	bl	8009d8c <free>
 800aad6:	6034      	str	r4, [r6, #0]
 800aad8:	b00d      	add	sp, #52	; 0x34
 800aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aade:	6831      	ldr	r1, [r6, #0]
 800aae0:	2900      	cmp	r1, #0
 800aae2:	d162      	bne.n	800abaa <_tzset_unlocked_r+0x106>
 800aae4:	6830      	ldr	r0, [r6, #0]
 800aae6:	f7ff f951 	bl	8009d8c <free>
 800aaea:	4620      	mov	r0, r4
 800aaec:	f7f5 fbe0 	bl	80002b0 <strlen>
 800aaf0:	1c41      	adds	r1, r0, #1
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	f7ff f9c6 	bl	8009e84 <_malloc_r>
 800aaf8:	6030      	str	r0, [r6, #0]
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d15a      	bne.n	800abb4 <_tzset_unlocked_r+0x110>
 800aafe:	7823      	ldrb	r3, [r4, #0]
 800ab00:	4aa2      	ldr	r2, [pc, #648]	; (800ad8c <_tzset_unlocked_r+0x2e8>)
 800ab02:	49a3      	ldr	r1, [pc, #652]	; (800ad90 <_tzset_unlocked_r+0x2ec>)
 800ab04:	2b3a      	cmp	r3, #58	; 0x3a
 800ab06:	bf08      	it	eq
 800ab08:	3401      	addeq	r4, #1
 800ab0a:	ae0a      	add	r6, sp, #40	; 0x28
 800ab0c:	4633      	mov	r3, r6
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f002 f8ca 	bl	800cca8 <siscanf>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	dddf      	ble.n	800aad8 <_tzset_unlocked_r+0x34>
 800ab18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab1a:	18e7      	adds	r7, r4, r3
 800ab1c:	5ce3      	ldrb	r3, [r4, r3]
 800ab1e:	2b2d      	cmp	r3, #45	; 0x2d
 800ab20:	d14c      	bne.n	800abbc <_tzset_unlocked_r+0x118>
 800ab22:	3701      	adds	r7, #1
 800ab24:	f04f 38ff 	mov.w	r8, #4294967295
 800ab28:	f10d 0a20 	add.w	sl, sp, #32
 800ab2c:	f10d 0b1e 	add.w	fp, sp, #30
 800ab30:	2400      	movs	r4, #0
 800ab32:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800ab36:	4997      	ldr	r1, [pc, #604]	; (800ad94 <_tzset_unlocked_r+0x2f0>)
 800ab38:	9603      	str	r6, [sp, #12]
 800ab3a:	f8cd b000 	str.w	fp, [sp]
 800ab3e:	4633      	mov	r3, r6
 800ab40:	aa07      	add	r2, sp, #28
 800ab42:	4638      	mov	r0, r7
 800ab44:	f8ad 401e 	strh.w	r4, [sp, #30]
 800ab48:	f8ad 4020 	strh.w	r4, [sp, #32]
 800ab4c:	f002 f8ac 	bl	800cca8 <siscanf>
 800ab50:	42a0      	cmp	r0, r4
 800ab52:	ddc1      	ble.n	800aad8 <_tzset_unlocked_r+0x34>
 800ab54:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ab58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ab5c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800ada0 <_tzset_unlocked_r+0x2fc>
 800ab60:	213c      	movs	r1, #60	; 0x3c
 800ab62:	fb01 3302 	mla	r3, r1, r2, r3
 800ab66:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ab6a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ab6e:	fb01 3302 	mla	r3, r1, r2, r3
 800ab72:	fb08 f303 	mul.w	r3, r8, r3
 800ab76:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800ad88 <_tzset_unlocked_r+0x2e4>
 800ab7a:	62ab      	str	r3, [r5, #40]	; 0x28
 800ab7c:	4b83      	ldr	r3, [pc, #524]	; (800ad8c <_tzset_unlocked_r+0x2e8>)
 800ab7e:	f8c8 3000 	str.w	r3, [r8]
 800ab82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab84:	4982      	ldr	r1, [pc, #520]	; (800ad90 <_tzset_unlocked_r+0x2ec>)
 800ab86:	441f      	add	r7, r3
 800ab88:	464a      	mov	r2, r9
 800ab8a:	4633      	mov	r3, r6
 800ab8c:	4638      	mov	r0, r7
 800ab8e:	f002 f88b 	bl	800cca8 <siscanf>
 800ab92:	42a0      	cmp	r0, r4
 800ab94:	dc18      	bgt.n	800abc8 <_tzset_unlocked_r+0x124>
 800ab96:	f8d8 3000 	ldr.w	r3, [r8]
 800ab9a:	f8c8 3004 	str.w	r3, [r8, #4]
 800ab9e:	4b77      	ldr	r3, [pc, #476]	; (800ad7c <_tzset_unlocked_r+0x2d8>)
 800aba0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	4b77      	ldr	r3, [pc, #476]	; (800ad84 <_tzset_unlocked_r+0x2e0>)
 800aba6:	601c      	str	r4, [r3, #0]
 800aba8:	e796      	b.n	800aad8 <_tzset_unlocked_r+0x34>
 800abaa:	f7f5 fbd9 	bl	8000360 <strcmp>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d198      	bne.n	800aae4 <_tzset_unlocked_r+0x40>
 800abb2:	e791      	b.n	800aad8 <_tzset_unlocked_r+0x34>
 800abb4:	4621      	mov	r1, r4
 800abb6:	f002 f8e8 	bl	800cd8a <strcpy>
 800abba:	e7a0      	b.n	800aafe <_tzset_unlocked_r+0x5a>
 800abbc:	2b2b      	cmp	r3, #43	; 0x2b
 800abbe:	bf08      	it	eq
 800abc0:	3701      	addeq	r7, #1
 800abc2:	f04f 0801 	mov.w	r8, #1
 800abc6:	e7af      	b.n	800ab28 <_tzset_unlocked_r+0x84>
 800abc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abca:	f8c8 9004 	str.w	r9, [r8, #4]
 800abce:	18fc      	adds	r4, r7, r3
 800abd0:	5cfb      	ldrb	r3, [r7, r3]
 800abd2:	2b2d      	cmp	r3, #45	; 0x2d
 800abd4:	f040 808b 	bne.w	800acee <_tzset_unlocked_r+0x24a>
 800abd8:	3401      	adds	r4, #1
 800abda:	f04f 37ff 	mov.w	r7, #4294967295
 800abde:	2300      	movs	r3, #0
 800abe0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800abe4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800abe8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800abec:	930a      	str	r3, [sp, #40]	; 0x28
 800abee:	e9cd a602 	strd	sl, r6, [sp, #8]
 800abf2:	e9cd b600 	strd	fp, r6, [sp]
 800abf6:	4967      	ldr	r1, [pc, #412]	; (800ad94 <_tzset_unlocked_r+0x2f0>)
 800abf8:	4633      	mov	r3, r6
 800abfa:	aa07      	add	r2, sp, #28
 800abfc:	4620      	mov	r0, r4
 800abfe:	f002 f853 	bl	800cca8 <siscanf>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	dc78      	bgt.n	800acf8 <_tzset_unlocked_r+0x254>
 800ac06:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ac08:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800ac0c:	652b      	str	r3, [r5, #80]	; 0x50
 800ac0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac10:	462f      	mov	r7, r5
 800ac12:	441c      	add	r4, r3
 800ac14:	f04f 0900 	mov.w	r9, #0
 800ac18:	7823      	ldrb	r3, [r4, #0]
 800ac1a:	2b2c      	cmp	r3, #44	; 0x2c
 800ac1c:	bf08      	it	eq
 800ac1e:	3401      	addeq	r4, #1
 800ac20:	f894 8000 	ldrb.w	r8, [r4]
 800ac24:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800ac28:	d178      	bne.n	800ad1c <_tzset_unlocked_r+0x278>
 800ac2a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800ac2e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ac32:	ab09      	add	r3, sp, #36	; 0x24
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	4958      	ldr	r1, [pc, #352]	; (800ad98 <_tzset_unlocked_r+0x2f4>)
 800ac38:	9603      	str	r6, [sp, #12]
 800ac3a:	4633      	mov	r3, r6
 800ac3c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ac40:	4620      	mov	r0, r4
 800ac42:	f002 f831 	bl	800cca8 <siscanf>
 800ac46:	2803      	cmp	r0, #3
 800ac48:	f47f af46 	bne.w	800aad8 <_tzset_unlocked_r+0x34>
 800ac4c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ac50:	1e4b      	subs	r3, r1, #1
 800ac52:	2b0b      	cmp	r3, #11
 800ac54:	f63f af40 	bhi.w	800aad8 <_tzset_unlocked_r+0x34>
 800ac58:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ac5c:	1e53      	subs	r3, r2, #1
 800ac5e:	2b04      	cmp	r3, #4
 800ac60:	f63f af3a 	bhi.w	800aad8 <_tzset_unlocked_r+0x34>
 800ac64:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ac68:	2b06      	cmp	r3, #6
 800ac6a:	f63f af35 	bhi.w	800aad8 <_tzset_unlocked_r+0x34>
 800ac6e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ac72:	f887 8008 	strb.w	r8, [r7, #8]
 800ac76:	617b      	str	r3, [r7, #20]
 800ac78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac7a:	eb04 0803 	add.w	r8, r4, r3
 800ac7e:	2302      	movs	r3, #2
 800ac80:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ac84:	2300      	movs	r3, #0
 800ac86:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ac8a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ac8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ac90:	f898 3000 	ldrb.w	r3, [r8]
 800ac94:	2b2f      	cmp	r3, #47	; 0x2f
 800ac96:	d109      	bne.n	800acac <_tzset_unlocked_r+0x208>
 800ac98:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ac9c:	e9cd b600 	strd	fp, r6, [sp]
 800aca0:	493e      	ldr	r1, [pc, #248]	; (800ad9c <_tzset_unlocked_r+0x2f8>)
 800aca2:	4633      	mov	r3, r6
 800aca4:	aa07      	add	r2, sp, #28
 800aca6:	4640      	mov	r0, r8
 800aca8:	f001 fffe 	bl	800cca8 <siscanf>
 800acac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800acb0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800acb4:	213c      	movs	r1, #60	; 0x3c
 800acb6:	fb01 3302 	mla	r3, r1, r2, r3
 800acba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800acbe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800acc2:	fb01 3302 	mla	r3, r1, r2, r3
 800acc6:	61bb      	str	r3, [r7, #24]
 800acc8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800acca:	3728      	adds	r7, #40	; 0x28
 800accc:	4444      	add	r4, r8
 800acce:	f1b9 0f00 	cmp.w	r9, #0
 800acd2:	d020      	beq.n	800ad16 <_tzset_unlocked_r+0x272>
 800acd4:	6868      	ldr	r0, [r5, #4]
 800acd6:	f7ff fe29 	bl	800a92c <__tzcalc_limits>
 800acda:	4b28      	ldr	r3, [pc, #160]	; (800ad7c <_tzset_unlocked_r+0x2d8>)
 800acdc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800acde:	601a      	str	r2, [r3, #0]
 800ace0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ace2:	1a9b      	subs	r3, r3, r2
 800ace4:	4a27      	ldr	r2, [pc, #156]	; (800ad84 <_tzset_unlocked_r+0x2e0>)
 800ace6:	bf18      	it	ne
 800ace8:	2301      	movne	r3, #1
 800acea:	6013      	str	r3, [r2, #0]
 800acec:	e6f4      	b.n	800aad8 <_tzset_unlocked_r+0x34>
 800acee:	2b2b      	cmp	r3, #43	; 0x2b
 800acf0:	bf08      	it	eq
 800acf2:	3401      	addeq	r4, #1
 800acf4:	2701      	movs	r7, #1
 800acf6:	e772      	b.n	800abde <_tzset_unlocked_r+0x13a>
 800acf8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800acfc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ad00:	213c      	movs	r1, #60	; 0x3c
 800ad02:	fb01 3302 	mla	r3, r1, r2, r3
 800ad06:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ad0a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ad0e:	fb01 3302 	mla	r3, r1, r2, r3
 800ad12:	437b      	muls	r3, r7
 800ad14:	e77a      	b.n	800ac0c <_tzset_unlocked_r+0x168>
 800ad16:	f04f 0901 	mov.w	r9, #1
 800ad1a:	e77d      	b.n	800ac18 <_tzset_unlocked_r+0x174>
 800ad1c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800ad20:	bf06      	itte	eq
 800ad22:	3401      	addeq	r4, #1
 800ad24:	4643      	moveq	r3, r8
 800ad26:	2344      	movne	r3, #68	; 0x44
 800ad28:	220a      	movs	r2, #10
 800ad2a:	a90b      	add	r1, sp, #44	; 0x2c
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	9305      	str	r3, [sp, #20]
 800ad30:	f002 f8bc 	bl	800ceac <strtoul>
 800ad34:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ad38:	9b05      	ldr	r3, [sp, #20]
 800ad3a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800ad3e:	45a0      	cmp	r8, r4
 800ad40:	d114      	bne.n	800ad6c <_tzset_unlocked_r+0x2c8>
 800ad42:	234d      	movs	r3, #77	; 0x4d
 800ad44:	f1b9 0f00 	cmp.w	r9, #0
 800ad48:	d107      	bne.n	800ad5a <_tzset_unlocked_r+0x2b6>
 800ad4a:	722b      	strb	r3, [r5, #8]
 800ad4c:	2103      	movs	r1, #3
 800ad4e:	2302      	movs	r3, #2
 800ad50:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800ad54:	f8c5 9014 	str.w	r9, [r5, #20]
 800ad58:	e791      	b.n	800ac7e <_tzset_unlocked_r+0x1da>
 800ad5a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800ad5e:	220b      	movs	r2, #11
 800ad60:	2301      	movs	r3, #1
 800ad62:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800ad66:	2300      	movs	r3, #0
 800ad68:	63eb      	str	r3, [r5, #60]	; 0x3c
 800ad6a:	e788      	b.n	800ac7e <_tzset_unlocked_r+0x1da>
 800ad6c:	b280      	uxth	r0, r0
 800ad6e:	723b      	strb	r3, [r7, #8]
 800ad70:	6178      	str	r0, [r7, #20]
 800ad72:	e784      	b.n	800ac7e <_tzset_unlocked_r+0x1da>
 800ad74:	08026032 	.word	0x08026032
 800ad78:	20000b3c 	.word	0x20000b3c
 800ad7c:	20000b44 	.word	0x20000b44
 800ad80:	08026035 	.word	0x08026035
 800ad84:	20000b40 	.word	0x20000b40
 800ad88:	20000130 	.word	0x20000130
 800ad8c:	20000b2f 	.word	0x20000b2f
 800ad90:	08026039 	.word	0x08026039
 800ad94:	0802605c 	.word	0x0802605c
 800ad98:	08026048 	.word	0x08026048
 800ad9c:	0802605b 	.word	0x0802605b
 800ada0:	20000b24 	.word	0x20000b24

0800ada4 <asctime>:
 800ada4:	4b0d      	ldr	r3, [pc, #52]	; (800addc <asctime+0x38>)
 800ada6:	b570      	push	{r4, r5, r6, lr}
 800ada8:	681d      	ldr	r5, [r3, #0]
 800adaa:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800adac:	4604      	mov	r4, r0
 800adae:	b976      	cbnz	r6, 800adce <asctime+0x2a>
 800adb0:	201a      	movs	r0, #26
 800adb2:	f7fe ffe3 	bl	8009d7c <malloc>
 800adb6:	4602      	mov	r2, r0
 800adb8:	6428      	str	r0, [r5, #64]	; 0x40
 800adba:	b920      	cbnz	r0, 800adc6 <asctime+0x22>
 800adbc:	4b08      	ldr	r3, [pc, #32]	; (800ade0 <asctime+0x3c>)
 800adbe:	4809      	ldr	r0, [pc, #36]	; (800ade4 <asctime+0x40>)
 800adc0:	2137      	movs	r1, #55	; 0x37
 800adc2:	f000 f837 	bl	800ae34 <__assert_func>
 800adc6:	221a      	movs	r2, #26
 800adc8:	4631      	mov	r1, r6
 800adca:	f7fe ffe7 	bl	8009d9c <memset>
 800adce:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800add0:	4620      	mov	r0, r4
 800add2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800add6:	f000 b807 	b.w	800ade8 <asctime_r>
 800adda:	bf00      	nop
 800addc:	200000cc 	.word	0x200000cc
 800ade0:	08025f2c 	.word	0x08025f2c
 800ade4:	0802606e 	.word	0x0802606e

0800ade8 <asctime_r>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	460c      	mov	r4, r1
 800adec:	6941      	ldr	r1, [r0, #20]
 800adee:	6903      	ldr	r3, [r0, #16]
 800adf0:	6982      	ldr	r2, [r0, #24]
 800adf2:	b086      	sub	sp, #24
 800adf4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800adf8:	9104      	str	r1, [sp, #16]
 800adfa:	6801      	ldr	r1, [r0, #0]
 800adfc:	9103      	str	r1, [sp, #12]
 800adfe:	6841      	ldr	r1, [r0, #4]
 800ae00:	9102      	str	r1, [sp, #8]
 800ae02:	6881      	ldr	r1, [r0, #8]
 800ae04:	9101      	str	r1, [sp, #4]
 800ae06:	68c1      	ldr	r1, [r0, #12]
 800ae08:	9100      	str	r1, [sp, #0]
 800ae0a:	4907      	ldr	r1, [pc, #28]	; (800ae28 <asctime_r+0x40>)
 800ae0c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ae10:	440b      	add	r3, r1
 800ae12:	4906      	ldr	r1, [pc, #24]	; (800ae2c <asctime_r+0x44>)
 800ae14:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ae18:	440a      	add	r2, r1
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	4904      	ldr	r1, [pc, #16]	; (800ae30 <asctime_r+0x48>)
 800ae1e:	f001 ff23 	bl	800cc68 <siprintf>
 800ae22:	4620      	mov	r0, r4
 800ae24:	b006      	add	sp, #24
 800ae26:	bd10      	pop	{r4, pc}
 800ae28:	080260ff 	.word	0x080260ff
 800ae2c:	080260ea 	.word	0x080260ea
 800ae30:	080260ca 	.word	0x080260ca

0800ae34 <__assert_func>:
 800ae34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae36:	4614      	mov	r4, r2
 800ae38:	461a      	mov	r2, r3
 800ae3a:	4b09      	ldr	r3, [pc, #36]	; (800ae60 <__assert_func+0x2c>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	4605      	mov	r5, r0
 800ae40:	68d8      	ldr	r0, [r3, #12]
 800ae42:	b14c      	cbz	r4, 800ae58 <__assert_func+0x24>
 800ae44:	4b07      	ldr	r3, [pc, #28]	; (800ae64 <__assert_func+0x30>)
 800ae46:	9100      	str	r1, [sp, #0]
 800ae48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae4c:	4906      	ldr	r1, [pc, #24]	; (800ae68 <__assert_func+0x34>)
 800ae4e:	462b      	mov	r3, r5
 800ae50:	f000 ff5e 	bl	800bd10 <fiprintf>
 800ae54:	f002 f906 	bl	800d064 <abort>
 800ae58:	4b04      	ldr	r3, [pc, #16]	; (800ae6c <__assert_func+0x38>)
 800ae5a:	461c      	mov	r4, r3
 800ae5c:	e7f3      	b.n	800ae46 <__assert_func+0x12>
 800ae5e:	bf00      	nop
 800ae60:	200000cc 	.word	0x200000cc
 800ae64:	08026123 	.word	0x08026123
 800ae68:	08026130 	.word	0x08026130
 800ae6c:	080260e9 	.word	0x080260e9

0800ae70 <quorem>:
 800ae70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	6903      	ldr	r3, [r0, #16]
 800ae76:	690c      	ldr	r4, [r1, #16]
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	4607      	mov	r7, r0
 800ae7c:	f2c0 8081 	blt.w	800af82 <quorem+0x112>
 800ae80:	3c01      	subs	r4, #1
 800ae82:	f101 0814 	add.w	r8, r1, #20
 800ae86:	f100 0514 	add.w	r5, r0, #20
 800ae8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae8e:	9301      	str	r3, [sp, #4]
 800ae90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aea0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aea4:	fbb2 f6f3 	udiv	r6, r2, r3
 800aea8:	d331      	bcc.n	800af0e <quorem+0x9e>
 800aeaa:	f04f 0e00 	mov.w	lr, #0
 800aeae:	4640      	mov	r0, r8
 800aeb0:	46ac      	mov	ip, r5
 800aeb2:	46f2      	mov	sl, lr
 800aeb4:	f850 2b04 	ldr.w	r2, [r0], #4
 800aeb8:	b293      	uxth	r3, r2
 800aeba:	fb06 e303 	mla	r3, r6, r3, lr
 800aebe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	ebaa 0303 	sub.w	r3, sl, r3
 800aec8:	f8dc a000 	ldr.w	sl, [ip]
 800aecc:	0c12      	lsrs	r2, r2, #16
 800aece:	fa13 f38a 	uxtah	r3, r3, sl
 800aed2:	fb06 e202 	mla	r2, r6, r2, lr
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	9b00      	ldr	r3, [sp, #0]
 800aeda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aede:	b292      	uxth	r2, r2
 800aee0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800aee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aee8:	f8bd 3000 	ldrh.w	r3, [sp]
 800aeec:	4581      	cmp	r9, r0
 800aeee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aef2:	f84c 3b04 	str.w	r3, [ip], #4
 800aef6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800aefa:	d2db      	bcs.n	800aeb4 <quorem+0x44>
 800aefc:	f855 300b 	ldr.w	r3, [r5, fp]
 800af00:	b92b      	cbnz	r3, 800af0e <quorem+0x9e>
 800af02:	9b01      	ldr	r3, [sp, #4]
 800af04:	3b04      	subs	r3, #4
 800af06:	429d      	cmp	r5, r3
 800af08:	461a      	mov	r2, r3
 800af0a:	d32e      	bcc.n	800af6a <quorem+0xfa>
 800af0c:	613c      	str	r4, [r7, #16]
 800af0e:	4638      	mov	r0, r7
 800af10:	f001 fadc 	bl	800c4cc <__mcmp>
 800af14:	2800      	cmp	r0, #0
 800af16:	db24      	blt.n	800af62 <quorem+0xf2>
 800af18:	3601      	adds	r6, #1
 800af1a:	4628      	mov	r0, r5
 800af1c:	f04f 0c00 	mov.w	ip, #0
 800af20:	f858 2b04 	ldr.w	r2, [r8], #4
 800af24:	f8d0 e000 	ldr.w	lr, [r0]
 800af28:	b293      	uxth	r3, r2
 800af2a:	ebac 0303 	sub.w	r3, ip, r3
 800af2e:	0c12      	lsrs	r2, r2, #16
 800af30:	fa13 f38e 	uxtah	r3, r3, lr
 800af34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af42:	45c1      	cmp	r9, r8
 800af44:	f840 3b04 	str.w	r3, [r0], #4
 800af48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af4c:	d2e8      	bcs.n	800af20 <quorem+0xb0>
 800af4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af56:	b922      	cbnz	r2, 800af62 <quorem+0xf2>
 800af58:	3b04      	subs	r3, #4
 800af5a:	429d      	cmp	r5, r3
 800af5c:	461a      	mov	r2, r3
 800af5e:	d30a      	bcc.n	800af76 <quorem+0x106>
 800af60:	613c      	str	r4, [r7, #16]
 800af62:	4630      	mov	r0, r6
 800af64:	b003      	add	sp, #12
 800af66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6a:	6812      	ldr	r2, [r2, #0]
 800af6c:	3b04      	subs	r3, #4
 800af6e:	2a00      	cmp	r2, #0
 800af70:	d1cc      	bne.n	800af0c <quorem+0x9c>
 800af72:	3c01      	subs	r4, #1
 800af74:	e7c7      	b.n	800af06 <quorem+0x96>
 800af76:	6812      	ldr	r2, [r2, #0]
 800af78:	3b04      	subs	r3, #4
 800af7a:	2a00      	cmp	r2, #0
 800af7c:	d1f0      	bne.n	800af60 <quorem+0xf0>
 800af7e:	3c01      	subs	r4, #1
 800af80:	e7eb      	b.n	800af5a <quorem+0xea>
 800af82:	2000      	movs	r0, #0
 800af84:	e7ee      	b.n	800af64 <quorem+0xf4>
	...

0800af88 <_dtoa_r>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	ed2d 8b04 	vpush	{d8-d9}
 800af90:	ec57 6b10 	vmov	r6, r7, d0
 800af94:	b093      	sub	sp, #76	; 0x4c
 800af96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af9c:	9106      	str	r1, [sp, #24]
 800af9e:	ee10 aa10 	vmov	sl, s0
 800afa2:	4604      	mov	r4, r0
 800afa4:	9209      	str	r2, [sp, #36]	; 0x24
 800afa6:	930c      	str	r3, [sp, #48]	; 0x30
 800afa8:	46bb      	mov	fp, r7
 800afaa:	b975      	cbnz	r5, 800afca <_dtoa_r+0x42>
 800afac:	2010      	movs	r0, #16
 800afae:	f7fe fee5 	bl	8009d7c <malloc>
 800afb2:	4602      	mov	r2, r0
 800afb4:	6260      	str	r0, [r4, #36]	; 0x24
 800afb6:	b920      	cbnz	r0, 800afc2 <_dtoa_r+0x3a>
 800afb8:	4ba7      	ldr	r3, [pc, #668]	; (800b258 <_dtoa_r+0x2d0>)
 800afba:	21ea      	movs	r1, #234	; 0xea
 800afbc:	48a7      	ldr	r0, [pc, #668]	; (800b25c <_dtoa_r+0x2d4>)
 800afbe:	f7ff ff39 	bl	800ae34 <__assert_func>
 800afc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800afc6:	6005      	str	r5, [r0, #0]
 800afc8:	60c5      	str	r5, [r0, #12]
 800afca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afcc:	6819      	ldr	r1, [r3, #0]
 800afce:	b151      	cbz	r1, 800afe6 <_dtoa_r+0x5e>
 800afd0:	685a      	ldr	r2, [r3, #4]
 800afd2:	604a      	str	r2, [r1, #4]
 800afd4:	2301      	movs	r3, #1
 800afd6:	4093      	lsls	r3, r2
 800afd8:	608b      	str	r3, [r1, #8]
 800afda:	4620      	mov	r0, r4
 800afdc:	f001 f834 	bl	800c048 <_Bfree>
 800afe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe2:	2200      	movs	r2, #0
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	1e3b      	subs	r3, r7, #0
 800afe8:	bfaa      	itet	ge
 800afea:	2300      	movge	r3, #0
 800afec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800aff0:	f8c8 3000 	strge.w	r3, [r8]
 800aff4:	4b9a      	ldr	r3, [pc, #616]	; (800b260 <_dtoa_r+0x2d8>)
 800aff6:	bfbc      	itt	lt
 800aff8:	2201      	movlt	r2, #1
 800affa:	f8c8 2000 	strlt.w	r2, [r8]
 800affe:	ea33 030b 	bics.w	r3, r3, fp
 800b002:	d11b      	bne.n	800b03c <_dtoa_r+0xb4>
 800b004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b006:	f242 730f 	movw	r3, #9999	; 0x270f
 800b00a:	6013      	str	r3, [r2, #0]
 800b00c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b010:	4333      	orrs	r3, r6
 800b012:	f000 8592 	beq.w	800bb3a <_dtoa_r+0xbb2>
 800b016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b018:	b963      	cbnz	r3, 800b034 <_dtoa_r+0xac>
 800b01a:	4b92      	ldr	r3, [pc, #584]	; (800b264 <_dtoa_r+0x2dc>)
 800b01c:	e022      	b.n	800b064 <_dtoa_r+0xdc>
 800b01e:	4b92      	ldr	r3, [pc, #584]	; (800b268 <_dtoa_r+0x2e0>)
 800b020:	9301      	str	r3, [sp, #4]
 800b022:	3308      	adds	r3, #8
 800b024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b026:	6013      	str	r3, [r2, #0]
 800b028:	9801      	ldr	r0, [sp, #4]
 800b02a:	b013      	add	sp, #76	; 0x4c
 800b02c:	ecbd 8b04 	vpop	{d8-d9}
 800b030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b034:	4b8b      	ldr	r3, [pc, #556]	; (800b264 <_dtoa_r+0x2dc>)
 800b036:	9301      	str	r3, [sp, #4]
 800b038:	3303      	adds	r3, #3
 800b03a:	e7f3      	b.n	800b024 <_dtoa_r+0x9c>
 800b03c:	2200      	movs	r2, #0
 800b03e:	2300      	movs	r3, #0
 800b040:	4650      	mov	r0, sl
 800b042:	4659      	mov	r1, fp
 800b044:	f7f5 fdba 	bl	8000bbc <__aeabi_dcmpeq>
 800b048:	ec4b ab19 	vmov	d9, sl, fp
 800b04c:	4680      	mov	r8, r0
 800b04e:	b158      	cbz	r0, 800b068 <_dtoa_r+0xe0>
 800b050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b052:	2301      	movs	r3, #1
 800b054:	6013      	str	r3, [r2, #0]
 800b056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f000 856b 	beq.w	800bb34 <_dtoa_r+0xbac>
 800b05e:	4883      	ldr	r0, [pc, #524]	; (800b26c <_dtoa_r+0x2e4>)
 800b060:	6018      	str	r0, [r3, #0]
 800b062:	1e43      	subs	r3, r0, #1
 800b064:	9301      	str	r3, [sp, #4]
 800b066:	e7df      	b.n	800b028 <_dtoa_r+0xa0>
 800b068:	ec4b ab10 	vmov	d0, sl, fp
 800b06c:	aa10      	add	r2, sp, #64	; 0x40
 800b06e:	a911      	add	r1, sp, #68	; 0x44
 800b070:	4620      	mov	r0, r4
 800b072:	f001 fad1 	bl	800c618 <__d2b>
 800b076:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b07a:	ee08 0a10 	vmov	s16, r0
 800b07e:	2d00      	cmp	r5, #0
 800b080:	f000 8084 	beq.w	800b18c <_dtoa_r+0x204>
 800b084:	ee19 3a90 	vmov	r3, s19
 800b088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b08c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b090:	4656      	mov	r6, sl
 800b092:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b09a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b09e:	4b74      	ldr	r3, [pc, #464]	; (800b270 <_dtoa_r+0x2e8>)
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	4630      	mov	r0, r6
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	f7f5 f969 	bl	800037c <__aeabi_dsub>
 800b0aa:	a365      	add	r3, pc, #404	; (adr r3, 800b240 <_dtoa_r+0x2b8>)
 800b0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b0:	f7f5 fb1c 	bl	80006ec <__aeabi_dmul>
 800b0b4:	a364      	add	r3, pc, #400	; (adr r3, 800b248 <_dtoa_r+0x2c0>)
 800b0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ba:	f7f5 f961 	bl	8000380 <__adddf3>
 800b0be:	4606      	mov	r6, r0
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	460f      	mov	r7, r1
 800b0c4:	f7f5 faa8 	bl	8000618 <__aeabi_i2d>
 800b0c8:	a361      	add	r3, pc, #388	; (adr r3, 800b250 <_dtoa_r+0x2c8>)
 800b0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ce:	f7f5 fb0d 	bl	80006ec <__aeabi_dmul>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	4630      	mov	r0, r6
 800b0d8:	4639      	mov	r1, r7
 800b0da:	f7f5 f951 	bl	8000380 <__adddf3>
 800b0de:	4606      	mov	r6, r0
 800b0e0:	460f      	mov	r7, r1
 800b0e2:	f7f5 fdb3 	bl	8000c4c <__aeabi_d2iz>
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	9000      	str	r0, [sp, #0]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	4639      	mov	r1, r7
 800b0f0:	f7f5 fd6e 	bl	8000bd0 <__aeabi_dcmplt>
 800b0f4:	b150      	cbz	r0, 800b10c <_dtoa_r+0x184>
 800b0f6:	9800      	ldr	r0, [sp, #0]
 800b0f8:	f7f5 fa8e 	bl	8000618 <__aeabi_i2d>
 800b0fc:	4632      	mov	r2, r6
 800b0fe:	463b      	mov	r3, r7
 800b100:	f7f5 fd5c 	bl	8000bbc <__aeabi_dcmpeq>
 800b104:	b910      	cbnz	r0, 800b10c <_dtoa_r+0x184>
 800b106:	9b00      	ldr	r3, [sp, #0]
 800b108:	3b01      	subs	r3, #1
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	9b00      	ldr	r3, [sp, #0]
 800b10e:	2b16      	cmp	r3, #22
 800b110:	d85a      	bhi.n	800b1c8 <_dtoa_r+0x240>
 800b112:	9a00      	ldr	r2, [sp, #0]
 800b114:	4b57      	ldr	r3, [pc, #348]	; (800b274 <_dtoa_r+0x2ec>)
 800b116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	ec51 0b19 	vmov	r0, r1, d9
 800b122:	f7f5 fd55 	bl	8000bd0 <__aeabi_dcmplt>
 800b126:	2800      	cmp	r0, #0
 800b128:	d050      	beq.n	800b1cc <_dtoa_r+0x244>
 800b12a:	9b00      	ldr	r3, [sp, #0]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	9300      	str	r3, [sp, #0]
 800b130:	2300      	movs	r3, #0
 800b132:	930b      	str	r3, [sp, #44]	; 0x2c
 800b134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b136:	1b5d      	subs	r5, r3, r5
 800b138:	1e6b      	subs	r3, r5, #1
 800b13a:	9305      	str	r3, [sp, #20]
 800b13c:	bf45      	ittet	mi
 800b13e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b142:	9304      	strmi	r3, [sp, #16]
 800b144:	2300      	movpl	r3, #0
 800b146:	2300      	movmi	r3, #0
 800b148:	bf4c      	ite	mi
 800b14a:	9305      	strmi	r3, [sp, #20]
 800b14c:	9304      	strpl	r3, [sp, #16]
 800b14e:	9b00      	ldr	r3, [sp, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	db3d      	blt.n	800b1d0 <_dtoa_r+0x248>
 800b154:	9b05      	ldr	r3, [sp, #20]
 800b156:	9a00      	ldr	r2, [sp, #0]
 800b158:	920a      	str	r2, [sp, #40]	; 0x28
 800b15a:	4413      	add	r3, r2
 800b15c:	9305      	str	r3, [sp, #20]
 800b15e:	2300      	movs	r3, #0
 800b160:	9307      	str	r3, [sp, #28]
 800b162:	9b06      	ldr	r3, [sp, #24]
 800b164:	2b09      	cmp	r3, #9
 800b166:	f200 8089 	bhi.w	800b27c <_dtoa_r+0x2f4>
 800b16a:	2b05      	cmp	r3, #5
 800b16c:	bfc4      	itt	gt
 800b16e:	3b04      	subgt	r3, #4
 800b170:	9306      	strgt	r3, [sp, #24]
 800b172:	9b06      	ldr	r3, [sp, #24]
 800b174:	f1a3 0302 	sub.w	r3, r3, #2
 800b178:	bfcc      	ite	gt
 800b17a:	2500      	movgt	r5, #0
 800b17c:	2501      	movle	r5, #1
 800b17e:	2b03      	cmp	r3, #3
 800b180:	f200 8087 	bhi.w	800b292 <_dtoa_r+0x30a>
 800b184:	e8df f003 	tbb	[pc, r3]
 800b188:	59383a2d 	.word	0x59383a2d
 800b18c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b190:	441d      	add	r5, r3
 800b192:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b196:	2b20      	cmp	r3, #32
 800b198:	bfc1      	itttt	gt
 800b19a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b19e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b1a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b1a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b1aa:	bfda      	itte	le
 800b1ac:	f1c3 0320 	rsble	r3, r3, #32
 800b1b0:	fa06 f003 	lslle.w	r0, r6, r3
 800b1b4:	4318      	orrgt	r0, r3
 800b1b6:	f7f5 fa1f 	bl	80005f8 <__aeabi_ui2d>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	4606      	mov	r6, r0
 800b1be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b1c2:	3d01      	subs	r5, #1
 800b1c4:	930e      	str	r3, [sp, #56]	; 0x38
 800b1c6:	e76a      	b.n	800b09e <_dtoa_r+0x116>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e7b2      	b.n	800b132 <_dtoa_r+0x1aa>
 800b1cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800b1ce:	e7b1      	b.n	800b134 <_dtoa_r+0x1ac>
 800b1d0:	9b04      	ldr	r3, [sp, #16]
 800b1d2:	9a00      	ldr	r2, [sp, #0]
 800b1d4:	1a9b      	subs	r3, r3, r2
 800b1d6:	9304      	str	r3, [sp, #16]
 800b1d8:	4253      	negs	r3, r2
 800b1da:	9307      	str	r3, [sp, #28]
 800b1dc:	2300      	movs	r3, #0
 800b1de:	930a      	str	r3, [sp, #40]	; 0x28
 800b1e0:	e7bf      	b.n	800b162 <_dtoa_r+0x1da>
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9308      	str	r3, [sp, #32]
 800b1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	dc55      	bgt.n	800b298 <_dtoa_r+0x310>
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f6:	e00c      	b.n	800b212 <_dtoa_r+0x28a>
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e7f3      	b.n	800b1e4 <_dtoa_r+0x25c>
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b200:	9308      	str	r3, [sp, #32]
 800b202:	9b00      	ldr	r3, [sp, #0]
 800b204:	4413      	add	r3, r2
 800b206:	9302      	str	r3, [sp, #8]
 800b208:	3301      	adds	r3, #1
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	9303      	str	r3, [sp, #12]
 800b20e:	bfb8      	it	lt
 800b210:	2301      	movlt	r3, #1
 800b212:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b214:	2200      	movs	r2, #0
 800b216:	6042      	str	r2, [r0, #4]
 800b218:	2204      	movs	r2, #4
 800b21a:	f102 0614 	add.w	r6, r2, #20
 800b21e:	429e      	cmp	r6, r3
 800b220:	6841      	ldr	r1, [r0, #4]
 800b222:	d93d      	bls.n	800b2a0 <_dtoa_r+0x318>
 800b224:	4620      	mov	r0, r4
 800b226:	f000 fecf 	bl	800bfc8 <_Balloc>
 800b22a:	9001      	str	r0, [sp, #4]
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d13b      	bne.n	800b2a8 <_dtoa_r+0x320>
 800b230:	4b11      	ldr	r3, [pc, #68]	; (800b278 <_dtoa_r+0x2f0>)
 800b232:	4602      	mov	r2, r0
 800b234:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b238:	e6c0      	b.n	800afbc <_dtoa_r+0x34>
 800b23a:	2301      	movs	r3, #1
 800b23c:	e7df      	b.n	800b1fe <_dtoa_r+0x276>
 800b23e:	bf00      	nop
 800b240:	636f4361 	.word	0x636f4361
 800b244:	3fd287a7 	.word	0x3fd287a7
 800b248:	8b60c8b3 	.word	0x8b60c8b3
 800b24c:	3fc68a28 	.word	0x3fc68a28
 800b250:	509f79fb 	.word	0x509f79fb
 800b254:	3fd34413 	.word	0x3fd34413
 800b258:	08025f2c 	.word	0x08025f2c
 800b25c:	0802616c 	.word	0x0802616c
 800b260:	7ff00000 	.word	0x7ff00000
 800b264:	08026168 	.word	0x08026168
 800b268:	0802615f 	.word	0x0802615f
 800b26c:	080264b5 	.word	0x080264b5
 800b270:	3ff80000 	.word	0x3ff80000
 800b274:	080262c0 	.word	0x080262c0
 800b278:	080261c7 	.word	0x080261c7
 800b27c:	2501      	movs	r5, #1
 800b27e:	2300      	movs	r3, #0
 800b280:	9306      	str	r3, [sp, #24]
 800b282:	9508      	str	r5, [sp, #32]
 800b284:	f04f 33ff 	mov.w	r3, #4294967295
 800b288:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b28c:	2200      	movs	r2, #0
 800b28e:	2312      	movs	r3, #18
 800b290:	e7b0      	b.n	800b1f4 <_dtoa_r+0x26c>
 800b292:	2301      	movs	r3, #1
 800b294:	9308      	str	r3, [sp, #32]
 800b296:	e7f5      	b.n	800b284 <_dtoa_r+0x2fc>
 800b298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b29a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b29e:	e7b8      	b.n	800b212 <_dtoa_r+0x28a>
 800b2a0:	3101      	adds	r1, #1
 800b2a2:	6041      	str	r1, [r0, #4]
 800b2a4:	0052      	lsls	r2, r2, #1
 800b2a6:	e7b8      	b.n	800b21a <_dtoa_r+0x292>
 800b2a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2aa:	9a01      	ldr	r2, [sp, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	9b03      	ldr	r3, [sp, #12]
 800b2b0:	2b0e      	cmp	r3, #14
 800b2b2:	f200 809d 	bhi.w	800b3f0 <_dtoa_r+0x468>
 800b2b6:	2d00      	cmp	r5, #0
 800b2b8:	f000 809a 	beq.w	800b3f0 <_dtoa_r+0x468>
 800b2bc:	9b00      	ldr	r3, [sp, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	dd32      	ble.n	800b328 <_dtoa_r+0x3a0>
 800b2c2:	4ab7      	ldr	r2, [pc, #732]	; (800b5a0 <_dtoa_r+0x618>)
 800b2c4:	f003 030f 	and.w	r3, r3, #15
 800b2c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b2cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2d0:	9b00      	ldr	r3, [sp, #0]
 800b2d2:	05d8      	lsls	r0, r3, #23
 800b2d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b2d8:	d516      	bpl.n	800b308 <_dtoa_r+0x380>
 800b2da:	4bb2      	ldr	r3, [pc, #712]	; (800b5a4 <_dtoa_r+0x61c>)
 800b2dc:	ec51 0b19 	vmov	r0, r1, d9
 800b2e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b2e4:	f7f5 fb2c 	bl	8000940 <__aeabi_ddiv>
 800b2e8:	f007 070f 	and.w	r7, r7, #15
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	468b      	mov	fp, r1
 800b2f0:	2503      	movs	r5, #3
 800b2f2:	4eac      	ldr	r6, [pc, #688]	; (800b5a4 <_dtoa_r+0x61c>)
 800b2f4:	b957      	cbnz	r7, 800b30c <_dtoa_r+0x384>
 800b2f6:	4642      	mov	r2, r8
 800b2f8:	464b      	mov	r3, r9
 800b2fa:	4650      	mov	r0, sl
 800b2fc:	4659      	mov	r1, fp
 800b2fe:	f7f5 fb1f 	bl	8000940 <__aeabi_ddiv>
 800b302:	4682      	mov	sl, r0
 800b304:	468b      	mov	fp, r1
 800b306:	e028      	b.n	800b35a <_dtoa_r+0x3d2>
 800b308:	2502      	movs	r5, #2
 800b30a:	e7f2      	b.n	800b2f2 <_dtoa_r+0x36a>
 800b30c:	07f9      	lsls	r1, r7, #31
 800b30e:	d508      	bpl.n	800b322 <_dtoa_r+0x39a>
 800b310:	4640      	mov	r0, r8
 800b312:	4649      	mov	r1, r9
 800b314:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b318:	f7f5 f9e8 	bl	80006ec <__aeabi_dmul>
 800b31c:	3501      	adds	r5, #1
 800b31e:	4680      	mov	r8, r0
 800b320:	4689      	mov	r9, r1
 800b322:	107f      	asrs	r7, r7, #1
 800b324:	3608      	adds	r6, #8
 800b326:	e7e5      	b.n	800b2f4 <_dtoa_r+0x36c>
 800b328:	f000 809b 	beq.w	800b462 <_dtoa_r+0x4da>
 800b32c:	9b00      	ldr	r3, [sp, #0]
 800b32e:	4f9d      	ldr	r7, [pc, #628]	; (800b5a4 <_dtoa_r+0x61c>)
 800b330:	425e      	negs	r6, r3
 800b332:	4b9b      	ldr	r3, [pc, #620]	; (800b5a0 <_dtoa_r+0x618>)
 800b334:	f006 020f 	and.w	r2, r6, #15
 800b338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b340:	ec51 0b19 	vmov	r0, r1, d9
 800b344:	f7f5 f9d2 	bl	80006ec <__aeabi_dmul>
 800b348:	1136      	asrs	r6, r6, #4
 800b34a:	4682      	mov	sl, r0
 800b34c:	468b      	mov	fp, r1
 800b34e:	2300      	movs	r3, #0
 800b350:	2502      	movs	r5, #2
 800b352:	2e00      	cmp	r6, #0
 800b354:	d17a      	bne.n	800b44c <_dtoa_r+0x4c4>
 800b356:	2b00      	cmp	r3, #0
 800b358:	d1d3      	bne.n	800b302 <_dtoa_r+0x37a>
 800b35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	f000 8082 	beq.w	800b466 <_dtoa_r+0x4de>
 800b362:	4b91      	ldr	r3, [pc, #580]	; (800b5a8 <_dtoa_r+0x620>)
 800b364:	2200      	movs	r2, #0
 800b366:	4650      	mov	r0, sl
 800b368:	4659      	mov	r1, fp
 800b36a:	f7f5 fc31 	bl	8000bd0 <__aeabi_dcmplt>
 800b36e:	2800      	cmp	r0, #0
 800b370:	d079      	beq.n	800b466 <_dtoa_r+0x4de>
 800b372:	9b03      	ldr	r3, [sp, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d076      	beq.n	800b466 <_dtoa_r+0x4de>
 800b378:	9b02      	ldr	r3, [sp, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	dd36      	ble.n	800b3ec <_dtoa_r+0x464>
 800b37e:	9b00      	ldr	r3, [sp, #0]
 800b380:	4650      	mov	r0, sl
 800b382:	4659      	mov	r1, fp
 800b384:	1e5f      	subs	r7, r3, #1
 800b386:	2200      	movs	r2, #0
 800b388:	4b88      	ldr	r3, [pc, #544]	; (800b5ac <_dtoa_r+0x624>)
 800b38a:	f7f5 f9af 	bl	80006ec <__aeabi_dmul>
 800b38e:	9e02      	ldr	r6, [sp, #8]
 800b390:	4682      	mov	sl, r0
 800b392:	468b      	mov	fp, r1
 800b394:	3501      	adds	r5, #1
 800b396:	4628      	mov	r0, r5
 800b398:	f7f5 f93e 	bl	8000618 <__aeabi_i2d>
 800b39c:	4652      	mov	r2, sl
 800b39e:	465b      	mov	r3, fp
 800b3a0:	f7f5 f9a4 	bl	80006ec <__aeabi_dmul>
 800b3a4:	4b82      	ldr	r3, [pc, #520]	; (800b5b0 <_dtoa_r+0x628>)
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f7f4 ffea 	bl	8000380 <__adddf3>
 800b3ac:	46d0      	mov	r8, sl
 800b3ae:	46d9      	mov	r9, fp
 800b3b0:	4682      	mov	sl, r0
 800b3b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b3b6:	2e00      	cmp	r6, #0
 800b3b8:	d158      	bne.n	800b46c <_dtoa_r+0x4e4>
 800b3ba:	4b7e      	ldr	r3, [pc, #504]	; (800b5b4 <_dtoa_r+0x62c>)
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4640      	mov	r0, r8
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	f7f4 ffdb 	bl	800037c <__aeabi_dsub>
 800b3c6:	4652      	mov	r2, sl
 800b3c8:	465b      	mov	r3, fp
 800b3ca:	4680      	mov	r8, r0
 800b3cc:	4689      	mov	r9, r1
 800b3ce:	f7f5 fc1d 	bl	8000c0c <__aeabi_dcmpgt>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	f040 8295 	bne.w	800b902 <_dtoa_r+0x97a>
 800b3d8:	4652      	mov	r2, sl
 800b3da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b3de:	4640      	mov	r0, r8
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	f7f5 fbf5 	bl	8000bd0 <__aeabi_dcmplt>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	f040 8289 	bne.w	800b8fe <_dtoa_r+0x976>
 800b3ec:	ec5b ab19 	vmov	sl, fp, d9
 800b3f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	f2c0 8148 	blt.w	800b688 <_dtoa_r+0x700>
 800b3f8:	9a00      	ldr	r2, [sp, #0]
 800b3fa:	2a0e      	cmp	r2, #14
 800b3fc:	f300 8144 	bgt.w	800b688 <_dtoa_r+0x700>
 800b400:	4b67      	ldr	r3, [pc, #412]	; (800b5a0 <_dtoa_r+0x618>)
 800b402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b406:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	f280 80d5 	bge.w	800b5bc <_dtoa_r+0x634>
 800b412:	9b03      	ldr	r3, [sp, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	f300 80d1 	bgt.w	800b5bc <_dtoa_r+0x634>
 800b41a:	f040 826f 	bne.w	800b8fc <_dtoa_r+0x974>
 800b41e:	4b65      	ldr	r3, [pc, #404]	; (800b5b4 <_dtoa_r+0x62c>)
 800b420:	2200      	movs	r2, #0
 800b422:	4640      	mov	r0, r8
 800b424:	4649      	mov	r1, r9
 800b426:	f7f5 f961 	bl	80006ec <__aeabi_dmul>
 800b42a:	4652      	mov	r2, sl
 800b42c:	465b      	mov	r3, fp
 800b42e:	f7f5 fbe3 	bl	8000bf8 <__aeabi_dcmpge>
 800b432:	9e03      	ldr	r6, [sp, #12]
 800b434:	4637      	mov	r7, r6
 800b436:	2800      	cmp	r0, #0
 800b438:	f040 8245 	bne.w	800b8c6 <_dtoa_r+0x93e>
 800b43c:	9d01      	ldr	r5, [sp, #4]
 800b43e:	2331      	movs	r3, #49	; 0x31
 800b440:	f805 3b01 	strb.w	r3, [r5], #1
 800b444:	9b00      	ldr	r3, [sp, #0]
 800b446:	3301      	adds	r3, #1
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	e240      	b.n	800b8ce <_dtoa_r+0x946>
 800b44c:	07f2      	lsls	r2, r6, #31
 800b44e:	d505      	bpl.n	800b45c <_dtoa_r+0x4d4>
 800b450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b454:	f7f5 f94a 	bl	80006ec <__aeabi_dmul>
 800b458:	3501      	adds	r5, #1
 800b45a:	2301      	movs	r3, #1
 800b45c:	1076      	asrs	r6, r6, #1
 800b45e:	3708      	adds	r7, #8
 800b460:	e777      	b.n	800b352 <_dtoa_r+0x3ca>
 800b462:	2502      	movs	r5, #2
 800b464:	e779      	b.n	800b35a <_dtoa_r+0x3d2>
 800b466:	9f00      	ldr	r7, [sp, #0]
 800b468:	9e03      	ldr	r6, [sp, #12]
 800b46a:	e794      	b.n	800b396 <_dtoa_r+0x40e>
 800b46c:	9901      	ldr	r1, [sp, #4]
 800b46e:	4b4c      	ldr	r3, [pc, #304]	; (800b5a0 <_dtoa_r+0x618>)
 800b470:	4431      	add	r1, r6
 800b472:	910d      	str	r1, [sp, #52]	; 0x34
 800b474:	9908      	ldr	r1, [sp, #32]
 800b476:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b47a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b47e:	2900      	cmp	r1, #0
 800b480:	d043      	beq.n	800b50a <_dtoa_r+0x582>
 800b482:	494d      	ldr	r1, [pc, #308]	; (800b5b8 <_dtoa_r+0x630>)
 800b484:	2000      	movs	r0, #0
 800b486:	f7f5 fa5b 	bl	8000940 <__aeabi_ddiv>
 800b48a:	4652      	mov	r2, sl
 800b48c:	465b      	mov	r3, fp
 800b48e:	f7f4 ff75 	bl	800037c <__aeabi_dsub>
 800b492:	9d01      	ldr	r5, [sp, #4]
 800b494:	4682      	mov	sl, r0
 800b496:	468b      	mov	fp, r1
 800b498:	4649      	mov	r1, r9
 800b49a:	4640      	mov	r0, r8
 800b49c:	f7f5 fbd6 	bl	8000c4c <__aeabi_d2iz>
 800b4a0:	4606      	mov	r6, r0
 800b4a2:	f7f5 f8b9 	bl	8000618 <__aeabi_i2d>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	f7f4 ff65 	bl	800037c <__aeabi_dsub>
 800b4b2:	3630      	adds	r6, #48	; 0x30
 800b4b4:	f805 6b01 	strb.w	r6, [r5], #1
 800b4b8:	4652      	mov	r2, sl
 800b4ba:	465b      	mov	r3, fp
 800b4bc:	4680      	mov	r8, r0
 800b4be:	4689      	mov	r9, r1
 800b4c0:	f7f5 fb86 	bl	8000bd0 <__aeabi_dcmplt>
 800b4c4:	2800      	cmp	r0, #0
 800b4c6:	d163      	bne.n	800b590 <_dtoa_r+0x608>
 800b4c8:	4642      	mov	r2, r8
 800b4ca:	464b      	mov	r3, r9
 800b4cc:	4936      	ldr	r1, [pc, #216]	; (800b5a8 <_dtoa_r+0x620>)
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	f7f4 ff54 	bl	800037c <__aeabi_dsub>
 800b4d4:	4652      	mov	r2, sl
 800b4d6:	465b      	mov	r3, fp
 800b4d8:	f7f5 fb7a 	bl	8000bd0 <__aeabi_dcmplt>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	f040 80b5 	bne.w	800b64c <_dtoa_r+0x6c4>
 800b4e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4e4:	429d      	cmp	r5, r3
 800b4e6:	d081      	beq.n	800b3ec <_dtoa_r+0x464>
 800b4e8:	4b30      	ldr	r3, [pc, #192]	; (800b5ac <_dtoa_r+0x624>)
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	4650      	mov	r0, sl
 800b4ee:	4659      	mov	r1, fp
 800b4f0:	f7f5 f8fc 	bl	80006ec <__aeabi_dmul>
 800b4f4:	4b2d      	ldr	r3, [pc, #180]	; (800b5ac <_dtoa_r+0x624>)
 800b4f6:	4682      	mov	sl, r0
 800b4f8:	468b      	mov	fp, r1
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	2200      	movs	r2, #0
 800b500:	f7f5 f8f4 	bl	80006ec <__aeabi_dmul>
 800b504:	4680      	mov	r8, r0
 800b506:	4689      	mov	r9, r1
 800b508:	e7c6      	b.n	800b498 <_dtoa_r+0x510>
 800b50a:	4650      	mov	r0, sl
 800b50c:	4659      	mov	r1, fp
 800b50e:	f7f5 f8ed 	bl	80006ec <__aeabi_dmul>
 800b512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b514:	9d01      	ldr	r5, [sp, #4]
 800b516:	930f      	str	r3, [sp, #60]	; 0x3c
 800b518:	4682      	mov	sl, r0
 800b51a:	468b      	mov	fp, r1
 800b51c:	4649      	mov	r1, r9
 800b51e:	4640      	mov	r0, r8
 800b520:	f7f5 fb94 	bl	8000c4c <__aeabi_d2iz>
 800b524:	4606      	mov	r6, r0
 800b526:	f7f5 f877 	bl	8000618 <__aeabi_i2d>
 800b52a:	3630      	adds	r6, #48	; 0x30
 800b52c:	4602      	mov	r2, r0
 800b52e:	460b      	mov	r3, r1
 800b530:	4640      	mov	r0, r8
 800b532:	4649      	mov	r1, r9
 800b534:	f7f4 ff22 	bl	800037c <__aeabi_dsub>
 800b538:	f805 6b01 	strb.w	r6, [r5], #1
 800b53c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b53e:	429d      	cmp	r5, r3
 800b540:	4680      	mov	r8, r0
 800b542:	4689      	mov	r9, r1
 800b544:	f04f 0200 	mov.w	r2, #0
 800b548:	d124      	bne.n	800b594 <_dtoa_r+0x60c>
 800b54a:	4b1b      	ldr	r3, [pc, #108]	; (800b5b8 <_dtoa_r+0x630>)
 800b54c:	4650      	mov	r0, sl
 800b54e:	4659      	mov	r1, fp
 800b550:	f7f4 ff16 	bl	8000380 <__adddf3>
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	4640      	mov	r0, r8
 800b55a:	4649      	mov	r1, r9
 800b55c:	f7f5 fb56 	bl	8000c0c <__aeabi_dcmpgt>
 800b560:	2800      	cmp	r0, #0
 800b562:	d173      	bne.n	800b64c <_dtoa_r+0x6c4>
 800b564:	4652      	mov	r2, sl
 800b566:	465b      	mov	r3, fp
 800b568:	4913      	ldr	r1, [pc, #76]	; (800b5b8 <_dtoa_r+0x630>)
 800b56a:	2000      	movs	r0, #0
 800b56c:	f7f4 ff06 	bl	800037c <__aeabi_dsub>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	4640      	mov	r0, r8
 800b576:	4649      	mov	r1, r9
 800b578:	f7f5 fb2a 	bl	8000bd0 <__aeabi_dcmplt>
 800b57c:	2800      	cmp	r0, #0
 800b57e:	f43f af35 	beq.w	800b3ec <_dtoa_r+0x464>
 800b582:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b584:	1e6b      	subs	r3, r5, #1
 800b586:	930f      	str	r3, [sp, #60]	; 0x3c
 800b588:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b58c:	2b30      	cmp	r3, #48	; 0x30
 800b58e:	d0f8      	beq.n	800b582 <_dtoa_r+0x5fa>
 800b590:	9700      	str	r7, [sp, #0]
 800b592:	e049      	b.n	800b628 <_dtoa_r+0x6a0>
 800b594:	4b05      	ldr	r3, [pc, #20]	; (800b5ac <_dtoa_r+0x624>)
 800b596:	f7f5 f8a9 	bl	80006ec <__aeabi_dmul>
 800b59a:	4680      	mov	r8, r0
 800b59c:	4689      	mov	r9, r1
 800b59e:	e7bd      	b.n	800b51c <_dtoa_r+0x594>
 800b5a0:	080262c0 	.word	0x080262c0
 800b5a4:	08026298 	.word	0x08026298
 800b5a8:	3ff00000 	.word	0x3ff00000
 800b5ac:	40240000 	.word	0x40240000
 800b5b0:	401c0000 	.word	0x401c0000
 800b5b4:	40140000 	.word	0x40140000
 800b5b8:	3fe00000 	.word	0x3fe00000
 800b5bc:	9d01      	ldr	r5, [sp, #4]
 800b5be:	4656      	mov	r6, sl
 800b5c0:	465f      	mov	r7, fp
 800b5c2:	4642      	mov	r2, r8
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	f7f5 f9b9 	bl	8000940 <__aeabi_ddiv>
 800b5ce:	f7f5 fb3d 	bl	8000c4c <__aeabi_d2iz>
 800b5d2:	4682      	mov	sl, r0
 800b5d4:	f7f5 f820 	bl	8000618 <__aeabi_i2d>
 800b5d8:	4642      	mov	r2, r8
 800b5da:	464b      	mov	r3, r9
 800b5dc:	f7f5 f886 	bl	80006ec <__aeabi_dmul>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	4639      	mov	r1, r7
 800b5e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b5ec:	f7f4 fec6 	bl	800037c <__aeabi_dsub>
 800b5f0:	f805 6b01 	strb.w	r6, [r5], #1
 800b5f4:	9e01      	ldr	r6, [sp, #4]
 800b5f6:	9f03      	ldr	r7, [sp, #12]
 800b5f8:	1bae      	subs	r6, r5, r6
 800b5fa:	42b7      	cmp	r7, r6
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	d135      	bne.n	800b66e <_dtoa_r+0x6e6>
 800b602:	f7f4 febd 	bl	8000380 <__adddf3>
 800b606:	4642      	mov	r2, r8
 800b608:	464b      	mov	r3, r9
 800b60a:	4606      	mov	r6, r0
 800b60c:	460f      	mov	r7, r1
 800b60e:	f7f5 fafd 	bl	8000c0c <__aeabi_dcmpgt>
 800b612:	b9d0      	cbnz	r0, 800b64a <_dtoa_r+0x6c2>
 800b614:	4642      	mov	r2, r8
 800b616:	464b      	mov	r3, r9
 800b618:	4630      	mov	r0, r6
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f5 face 	bl	8000bbc <__aeabi_dcmpeq>
 800b620:	b110      	cbz	r0, 800b628 <_dtoa_r+0x6a0>
 800b622:	f01a 0f01 	tst.w	sl, #1
 800b626:	d110      	bne.n	800b64a <_dtoa_r+0x6c2>
 800b628:	4620      	mov	r0, r4
 800b62a:	ee18 1a10 	vmov	r1, s16
 800b62e:	f000 fd0b 	bl	800c048 <_Bfree>
 800b632:	2300      	movs	r3, #0
 800b634:	9800      	ldr	r0, [sp, #0]
 800b636:	702b      	strb	r3, [r5, #0]
 800b638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b63a:	3001      	adds	r0, #1
 800b63c:	6018      	str	r0, [r3, #0]
 800b63e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b640:	2b00      	cmp	r3, #0
 800b642:	f43f acf1 	beq.w	800b028 <_dtoa_r+0xa0>
 800b646:	601d      	str	r5, [r3, #0]
 800b648:	e4ee      	b.n	800b028 <_dtoa_r+0xa0>
 800b64a:	9f00      	ldr	r7, [sp, #0]
 800b64c:	462b      	mov	r3, r5
 800b64e:	461d      	mov	r5, r3
 800b650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b654:	2a39      	cmp	r2, #57	; 0x39
 800b656:	d106      	bne.n	800b666 <_dtoa_r+0x6de>
 800b658:	9a01      	ldr	r2, [sp, #4]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d1f7      	bne.n	800b64e <_dtoa_r+0x6c6>
 800b65e:	9901      	ldr	r1, [sp, #4]
 800b660:	2230      	movs	r2, #48	; 0x30
 800b662:	3701      	adds	r7, #1
 800b664:	700a      	strb	r2, [r1, #0]
 800b666:	781a      	ldrb	r2, [r3, #0]
 800b668:	3201      	adds	r2, #1
 800b66a:	701a      	strb	r2, [r3, #0]
 800b66c:	e790      	b.n	800b590 <_dtoa_r+0x608>
 800b66e:	4ba6      	ldr	r3, [pc, #664]	; (800b908 <_dtoa_r+0x980>)
 800b670:	2200      	movs	r2, #0
 800b672:	f7f5 f83b 	bl	80006ec <__aeabi_dmul>
 800b676:	2200      	movs	r2, #0
 800b678:	2300      	movs	r3, #0
 800b67a:	4606      	mov	r6, r0
 800b67c:	460f      	mov	r7, r1
 800b67e:	f7f5 fa9d 	bl	8000bbc <__aeabi_dcmpeq>
 800b682:	2800      	cmp	r0, #0
 800b684:	d09d      	beq.n	800b5c2 <_dtoa_r+0x63a>
 800b686:	e7cf      	b.n	800b628 <_dtoa_r+0x6a0>
 800b688:	9a08      	ldr	r2, [sp, #32]
 800b68a:	2a00      	cmp	r2, #0
 800b68c:	f000 80d7 	beq.w	800b83e <_dtoa_r+0x8b6>
 800b690:	9a06      	ldr	r2, [sp, #24]
 800b692:	2a01      	cmp	r2, #1
 800b694:	f300 80ba 	bgt.w	800b80c <_dtoa_r+0x884>
 800b698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b69a:	2a00      	cmp	r2, #0
 800b69c:	f000 80b2 	beq.w	800b804 <_dtoa_r+0x87c>
 800b6a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6a4:	9e07      	ldr	r6, [sp, #28]
 800b6a6:	9d04      	ldr	r5, [sp, #16]
 800b6a8:	9a04      	ldr	r2, [sp, #16]
 800b6aa:	441a      	add	r2, r3
 800b6ac:	9204      	str	r2, [sp, #16]
 800b6ae:	9a05      	ldr	r2, [sp, #20]
 800b6b0:	2101      	movs	r1, #1
 800b6b2:	441a      	add	r2, r3
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	9205      	str	r2, [sp, #20]
 800b6b8:	f000 fd7e 	bl	800c1b8 <__i2b>
 800b6bc:	4607      	mov	r7, r0
 800b6be:	2d00      	cmp	r5, #0
 800b6c0:	dd0c      	ble.n	800b6dc <_dtoa_r+0x754>
 800b6c2:	9b05      	ldr	r3, [sp, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	dd09      	ble.n	800b6dc <_dtoa_r+0x754>
 800b6c8:	42ab      	cmp	r3, r5
 800b6ca:	9a04      	ldr	r2, [sp, #16]
 800b6cc:	bfa8      	it	ge
 800b6ce:	462b      	movge	r3, r5
 800b6d0:	1ad2      	subs	r2, r2, r3
 800b6d2:	9204      	str	r2, [sp, #16]
 800b6d4:	9a05      	ldr	r2, [sp, #20]
 800b6d6:	1aed      	subs	r5, r5, r3
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	9305      	str	r3, [sp, #20]
 800b6dc:	9b07      	ldr	r3, [sp, #28]
 800b6de:	b31b      	cbz	r3, 800b728 <_dtoa_r+0x7a0>
 800b6e0:	9b08      	ldr	r3, [sp, #32]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 80af 	beq.w	800b846 <_dtoa_r+0x8be>
 800b6e8:	2e00      	cmp	r6, #0
 800b6ea:	dd13      	ble.n	800b714 <_dtoa_r+0x78c>
 800b6ec:	4639      	mov	r1, r7
 800b6ee:	4632      	mov	r2, r6
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	f000 fe21 	bl	800c338 <__pow5mult>
 800b6f6:	ee18 2a10 	vmov	r2, s16
 800b6fa:	4601      	mov	r1, r0
 800b6fc:	4607      	mov	r7, r0
 800b6fe:	4620      	mov	r0, r4
 800b700:	f000 fd70 	bl	800c1e4 <__multiply>
 800b704:	ee18 1a10 	vmov	r1, s16
 800b708:	4680      	mov	r8, r0
 800b70a:	4620      	mov	r0, r4
 800b70c:	f000 fc9c 	bl	800c048 <_Bfree>
 800b710:	ee08 8a10 	vmov	s16, r8
 800b714:	9b07      	ldr	r3, [sp, #28]
 800b716:	1b9a      	subs	r2, r3, r6
 800b718:	d006      	beq.n	800b728 <_dtoa_r+0x7a0>
 800b71a:	ee18 1a10 	vmov	r1, s16
 800b71e:	4620      	mov	r0, r4
 800b720:	f000 fe0a 	bl	800c338 <__pow5mult>
 800b724:	ee08 0a10 	vmov	s16, r0
 800b728:	2101      	movs	r1, #1
 800b72a:	4620      	mov	r0, r4
 800b72c:	f000 fd44 	bl	800c1b8 <__i2b>
 800b730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b732:	2b00      	cmp	r3, #0
 800b734:	4606      	mov	r6, r0
 800b736:	f340 8088 	ble.w	800b84a <_dtoa_r+0x8c2>
 800b73a:	461a      	mov	r2, r3
 800b73c:	4601      	mov	r1, r0
 800b73e:	4620      	mov	r0, r4
 800b740:	f000 fdfa 	bl	800c338 <__pow5mult>
 800b744:	9b06      	ldr	r3, [sp, #24]
 800b746:	2b01      	cmp	r3, #1
 800b748:	4606      	mov	r6, r0
 800b74a:	f340 8081 	ble.w	800b850 <_dtoa_r+0x8c8>
 800b74e:	f04f 0800 	mov.w	r8, #0
 800b752:	6933      	ldr	r3, [r6, #16]
 800b754:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b758:	6918      	ldr	r0, [r3, #16]
 800b75a:	f000 fcdd 	bl	800c118 <__hi0bits>
 800b75e:	f1c0 0020 	rsb	r0, r0, #32
 800b762:	9b05      	ldr	r3, [sp, #20]
 800b764:	4418      	add	r0, r3
 800b766:	f010 001f 	ands.w	r0, r0, #31
 800b76a:	f000 8092 	beq.w	800b892 <_dtoa_r+0x90a>
 800b76e:	f1c0 0320 	rsb	r3, r0, #32
 800b772:	2b04      	cmp	r3, #4
 800b774:	f340 808a 	ble.w	800b88c <_dtoa_r+0x904>
 800b778:	f1c0 001c 	rsb	r0, r0, #28
 800b77c:	9b04      	ldr	r3, [sp, #16]
 800b77e:	4403      	add	r3, r0
 800b780:	9304      	str	r3, [sp, #16]
 800b782:	9b05      	ldr	r3, [sp, #20]
 800b784:	4403      	add	r3, r0
 800b786:	4405      	add	r5, r0
 800b788:	9305      	str	r3, [sp, #20]
 800b78a:	9b04      	ldr	r3, [sp, #16]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	dd07      	ble.n	800b7a0 <_dtoa_r+0x818>
 800b790:	ee18 1a10 	vmov	r1, s16
 800b794:	461a      	mov	r2, r3
 800b796:	4620      	mov	r0, r4
 800b798:	f000 fe28 	bl	800c3ec <__lshift>
 800b79c:	ee08 0a10 	vmov	s16, r0
 800b7a0:	9b05      	ldr	r3, [sp, #20]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	dd05      	ble.n	800b7b2 <_dtoa_r+0x82a>
 800b7a6:	4631      	mov	r1, r6
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f000 fe1e 	bl	800c3ec <__lshift>
 800b7b0:	4606      	mov	r6, r0
 800b7b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d06e      	beq.n	800b896 <_dtoa_r+0x90e>
 800b7b8:	ee18 0a10 	vmov	r0, s16
 800b7bc:	4631      	mov	r1, r6
 800b7be:	f000 fe85 	bl	800c4cc <__mcmp>
 800b7c2:	2800      	cmp	r0, #0
 800b7c4:	da67      	bge.n	800b896 <_dtoa_r+0x90e>
 800b7c6:	9b00      	ldr	r3, [sp, #0]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	ee18 1a10 	vmov	r1, s16
 800b7ce:	9300      	str	r3, [sp, #0]
 800b7d0:	220a      	movs	r2, #10
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f000 fc59 	bl	800c08c <__multadd>
 800b7da:	9b08      	ldr	r3, [sp, #32]
 800b7dc:	ee08 0a10 	vmov	s16, r0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 81b1 	beq.w	800bb48 <_dtoa_r+0xbc0>
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	4639      	mov	r1, r7
 800b7ea:	220a      	movs	r2, #10
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fc4d 	bl	800c08c <__multadd>
 800b7f2:	9b02      	ldr	r3, [sp, #8]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	f300 808e 	bgt.w	800b918 <_dtoa_r+0x990>
 800b7fc:	9b06      	ldr	r3, [sp, #24]
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	dc51      	bgt.n	800b8a6 <_dtoa_r+0x91e>
 800b802:	e089      	b.n	800b918 <_dtoa_r+0x990>
 800b804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b80a:	e74b      	b.n	800b6a4 <_dtoa_r+0x71c>
 800b80c:	9b03      	ldr	r3, [sp, #12]
 800b80e:	1e5e      	subs	r6, r3, #1
 800b810:	9b07      	ldr	r3, [sp, #28]
 800b812:	42b3      	cmp	r3, r6
 800b814:	bfbf      	itttt	lt
 800b816:	9b07      	ldrlt	r3, [sp, #28]
 800b818:	9607      	strlt	r6, [sp, #28]
 800b81a:	1af2      	sublt	r2, r6, r3
 800b81c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b81e:	bfb6      	itet	lt
 800b820:	189b      	addlt	r3, r3, r2
 800b822:	1b9e      	subge	r6, r3, r6
 800b824:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b826:	9b03      	ldr	r3, [sp, #12]
 800b828:	bfb8      	it	lt
 800b82a:	2600      	movlt	r6, #0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	bfb7      	itett	lt
 800b830:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b834:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b838:	1a9d      	sublt	r5, r3, r2
 800b83a:	2300      	movlt	r3, #0
 800b83c:	e734      	b.n	800b6a8 <_dtoa_r+0x720>
 800b83e:	9e07      	ldr	r6, [sp, #28]
 800b840:	9d04      	ldr	r5, [sp, #16]
 800b842:	9f08      	ldr	r7, [sp, #32]
 800b844:	e73b      	b.n	800b6be <_dtoa_r+0x736>
 800b846:	9a07      	ldr	r2, [sp, #28]
 800b848:	e767      	b.n	800b71a <_dtoa_r+0x792>
 800b84a:	9b06      	ldr	r3, [sp, #24]
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	dc18      	bgt.n	800b882 <_dtoa_r+0x8fa>
 800b850:	f1ba 0f00 	cmp.w	sl, #0
 800b854:	d115      	bne.n	800b882 <_dtoa_r+0x8fa>
 800b856:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b85a:	b993      	cbnz	r3, 800b882 <_dtoa_r+0x8fa>
 800b85c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b860:	0d1b      	lsrs	r3, r3, #20
 800b862:	051b      	lsls	r3, r3, #20
 800b864:	b183      	cbz	r3, 800b888 <_dtoa_r+0x900>
 800b866:	9b04      	ldr	r3, [sp, #16]
 800b868:	3301      	adds	r3, #1
 800b86a:	9304      	str	r3, [sp, #16]
 800b86c:	9b05      	ldr	r3, [sp, #20]
 800b86e:	3301      	adds	r3, #1
 800b870:	9305      	str	r3, [sp, #20]
 800b872:	f04f 0801 	mov.w	r8, #1
 800b876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b878:	2b00      	cmp	r3, #0
 800b87a:	f47f af6a 	bne.w	800b752 <_dtoa_r+0x7ca>
 800b87e:	2001      	movs	r0, #1
 800b880:	e76f      	b.n	800b762 <_dtoa_r+0x7da>
 800b882:	f04f 0800 	mov.w	r8, #0
 800b886:	e7f6      	b.n	800b876 <_dtoa_r+0x8ee>
 800b888:	4698      	mov	r8, r3
 800b88a:	e7f4      	b.n	800b876 <_dtoa_r+0x8ee>
 800b88c:	f43f af7d 	beq.w	800b78a <_dtoa_r+0x802>
 800b890:	4618      	mov	r0, r3
 800b892:	301c      	adds	r0, #28
 800b894:	e772      	b.n	800b77c <_dtoa_r+0x7f4>
 800b896:	9b03      	ldr	r3, [sp, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	dc37      	bgt.n	800b90c <_dtoa_r+0x984>
 800b89c:	9b06      	ldr	r3, [sp, #24]
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	dd34      	ble.n	800b90c <_dtoa_r+0x984>
 800b8a2:	9b03      	ldr	r3, [sp, #12]
 800b8a4:	9302      	str	r3, [sp, #8]
 800b8a6:	9b02      	ldr	r3, [sp, #8]
 800b8a8:	b96b      	cbnz	r3, 800b8c6 <_dtoa_r+0x93e>
 800b8aa:	4631      	mov	r1, r6
 800b8ac:	2205      	movs	r2, #5
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	f000 fbec 	bl	800c08c <__multadd>
 800b8b4:	4601      	mov	r1, r0
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	ee18 0a10 	vmov	r0, s16
 800b8bc:	f000 fe06 	bl	800c4cc <__mcmp>
 800b8c0:	2800      	cmp	r0, #0
 800b8c2:	f73f adbb 	bgt.w	800b43c <_dtoa_r+0x4b4>
 800b8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c8:	9d01      	ldr	r5, [sp, #4]
 800b8ca:	43db      	mvns	r3, r3
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	f04f 0800 	mov.w	r8, #0
 800b8d2:	4631      	mov	r1, r6
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f000 fbb7 	bl	800c048 <_Bfree>
 800b8da:	2f00      	cmp	r7, #0
 800b8dc:	f43f aea4 	beq.w	800b628 <_dtoa_r+0x6a0>
 800b8e0:	f1b8 0f00 	cmp.w	r8, #0
 800b8e4:	d005      	beq.n	800b8f2 <_dtoa_r+0x96a>
 800b8e6:	45b8      	cmp	r8, r7
 800b8e8:	d003      	beq.n	800b8f2 <_dtoa_r+0x96a>
 800b8ea:	4641      	mov	r1, r8
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f000 fbab 	bl	800c048 <_Bfree>
 800b8f2:	4639      	mov	r1, r7
 800b8f4:	4620      	mov	r0, r4
 800b8f6:	f000 fba7 	bl	800c048 <_Bfree>
 800b8fa:	e695      	b.n	800b628 <_dtoa_r+0x6a0>
 800b8fc:	2600      	movs	r6, #0
 800b8fe:	4637      	mov	r7, r6
 800b900:	e7e1      	b.n	800b8c6 <_dtoa_r+0x93e>
 800b902:	9700      	str	r7, [sp, #0]
 800b904:	4637      	mov	r7, r6
 800b906:	e599      	b.n	800b43c <_dtoa_r+0x4b4>
 800b908:	40240000 	.word	0x40240000
 800b90c:	9b08      	ldr	r3, [sp, #32]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f000 80ca 	beq.w	800baa8 <_dtoa_r+0xb20>
 800b914:	9b03      	ldr	r3, [sp, #12]
 800b916:	9302      	str	r3, [sp, #8]
 800b918:	2d00      	cmp	r5, #0
 800b91a:	dd05      	ble.n	800b928 <_dtoa_r+0x9a0>
 800b91c:	4639      	mov	r1, r7
 800b91e:	462a      	mov	r2, r5
 800b920:	4620      	mov	r0, r4
 800b922:	f000 fd63 	bl	800c3ec <__lshift>
 800b926:	4607      	mov	r7, r0
 800b928:	f1b8 0f00 	cmp.w	r8, #0
 800b92c:	d05b      	beq.n	800b9e6 <_dtoa_r+0xa5e>
 800b92e:	6879      	ldr	r1, [r7, #4]
 800b930:	4620      	mov	r0, r4
 800b932:	f000 fb49 	bl	800bfc8 <_Balloc>
 800b936:	4605      	mov	r5, r0
 800b938:	b928      	cbnz	r0, 800b946 <_dtoa_r+0x9be>
 800b93a:	4b87      	ldr	r3, [pc, #540]	; (800bb58 <_dtoa_r+0xbd0>)
 800b93c:	4602      	mov	r2, r0
 800b93e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b942:	f7ff bb3b 	b.w	800afbc <_dtoa_r+0x34>
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	3202      	adds	r2, #2
 800b94a:	0092      	lsls	r2, r2, #2
 800b94c:	f107 010c 	add.w	r1, r7, #12
 800b950:	300c      	adds	r0, #12
 800b952:	f000 fb1e 	bl	800bf92 <memcpy>
 800b956:	2201      	movs	r2, #1
 800b958:	4629      	mov	r1, r5
 800b95a:	4620      	mov	r0, r4
 800b95c:	f000 fd46 	bl	800c3ec <__lshift>
 800b960:	9b01      	ldr	r3, [sp, #4]
 800b962:	f103 0901 	add.w	r9, r3, #1
 800b966:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b96a:	4413      	add	r3, r2
 800b96c:	9305      	str	r3, [sp, #20]
 800b96e:	f00a 0301 	and.w	r3, sl, #1
 800b972:	46b8      	mov	r8, r7
 800b974:	9304      	str	r3, [sp, #16]
 800b976:	4607      	mov	r7, r0
 800b978:	4631      	mov	r1, r6
 800b97a:	ee18 0a10 	vmov	r0, s16
 800b97e:	f7ff fa77 	bl	800ae70 <quorem>
 800b982:	4641      	mov	r1, r8
 800b984:	9002      	str	r0, [sp, #8]
 800b986:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b98a:	ee18 0a10 	vmov	r0, s16
 800b98e:	f000 fd9d 	bl	800c4cc <__mcmp>
 800b992:	463a      	mov	r2, r7
 800b994:	9003      	str	r0, [sp, #12]
 800b996:	4631      	mov	r1, r6
 800b998:	4620      	mov	r0, r4
 800b99a:	f000 fdb3 	bl	800c504 <__mdiff>
 800b99e:	68c2      	ldr	r2, [r0, #12]
 800b9a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	bb02      	cbnz	r2, 800b9ea <_dtoa_r+0xa62>
 800b9a8:	4601      	mov	r1, r0
 800b9aa:	ee18 0a10 	vmov	r0, s16
 800b9ae:	f000 fd8d 	bl	800c4cc <__mcmp>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	9207      	str	r2, [sp, #28]
 800b9ba:	f000 fb45 	bl	800c048 <_Bfree>
 800b9be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b9c2:	ea43 0102 	orr.w	r1, r3, r2
 800b9c6:	9b04      	ldr	r3, [sp, #16]
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	464d      	mov	r5, r9
 800b9cc:	d10f      	bne.n	800b9ee <_dtoa_r+0xa66>
 800b9ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9d2:	d02a      	beq.n	800ba2a <_dtoa_r+0xaa2>
 800b9d4:	9b03      	ldr	r3, [sp, #12]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	dd02      	ble.n	800b9e0 <_dtoa_r+0xa58>
 800b9da:	9b02      	ldr	r3, [sp, #8]
 800b9dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b9e0:	f88b a000 	strb.w	sl, [fp]
 800b9e4:	e775      	b.n	800b8d2 <_dtoa_r+0x94a>
 800b9e6:	4638      	mov	r0, r7
 800b9e8:	e7ba      	b.n	800b960 <_dtoa_r+0x9d8>
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	e7e2      	b.n	800b9b4 <_dtoa_r+0xa2c>
 800b9ee:	9b03      	ldr	r3, [sp, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	db04      	blt.n	800b9fe <_dtoa_r+0xa76>
 800b9f4:	9906      	ldr	r1, [sp, #24]
 800b9f6:	430b      	orrs	r3, r1
 800b9f8:	9904      	ldr	r1, [sp, #16]
 800b9fa:	430b      	orrs	r3, r1
 800b9fc:	d122      	bne.n	800ba44 <_dtoa_r+0xabc>
 800b9fe:	2a00      	cmp	r2, #0
 800ba00:	ddee      	ble.n	800b9e0 <_dtoa_r+0xa58>
 800ba02:	ee18 1a10 	vmov	r1, s16
 800ba06:	2201      	movs	r2, #1
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f000 fcef 	bl	800c3ec <__lshift>
 800ba0e:	4631      	mov	r1, r6
 800ba10:	ee08 0a10 	vmov	s16, r0
 800ba14:	f000 fd5a 	bl	800c4cc <__mcmp>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	dc03      	bgt.n	800ba24 <_dtoa_r+0xa9c>
 800ba1c:	d1e0      	bne.n	800b9e0 <_dtoa_r+0xa58>
 800ba1e:	f01a 0f01 	tst.w	sl, #1
 800ba22:	d0dd      	beq.n	800b9e0 <_dtoa_r+0xa58>
 800ba24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba28:	d1d7      	bne.n	800b9da <_dtoa_r+0xa52>
 800ba2a:	2339      	movs	r3, #57	; 0x39
 800ba2c:	f88b 3000 	strb.w	r3, [fp]
 800ba30:	462b      	mov	r3, r5
 800ba32:	461d      	mov	r5, r3
 800ba34:	3b01      	subs	r3, #1
 800ba36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba3a:	2a39      	cmp	r2, #57	; 0x39
 800ba3c:	d071      	beq.n	800bb22 <_dtoa_r+0xb9a>
 800ba3e:	3201      	adds	r2, #1
 800ba40:	701a      	strb	r2, [r3, #0]
 800ba42:	e746      	b.n	800b8d2 <_dtoa_r+0x94a>
 800ba44:	2a00      	cmp	r2, #0
 800ba46:	dd07      	ble.n	800ba58 <_dtoa_r+0xad0>
 800ba48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba4c:	d0ed      	beq.n	800ba2a <_dtoa_r+0xaa2>
 800ba4e:	f10a 0301 	add.w	r3, sl, #1
 800ba52:	f88b 3000 	strb.w	r3, [fp]
 800ba56:	e73c      	b.n	800b8d2 <_dtoa_r+0x94a>
 800ba58:	9b05      	ldr	r3, [sp, #20]
 800ba5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ba5e:	4599      	cmp	r9, r3
 800ba60:	d047      	beq.n	800baf2 <_dtoa_r+0xb6a>
 800ba62:	ee18 1a10 	vmov	r1, s16
 800ba66:	2300      	movs	r3, #0
 800ba68:	220a      	movs	r2, #10
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f000 fb0e 	bl	800c08c <__multadd>
 800ba70:	45b8      	cmp	r8, r7
 800ba72:	ee08 0a10 	vmov	s16, r0
 800ba76:	f04f 0300 	mov.w	r3, #0
 800ba7a:	f04f 020a 	mov.w	r2, #10
 800ba7e:	4641      	mov	r1, r8
 800ba80:	4620      	mov	r0, r4
 800ba82:	d106      	bne.n	800ba92 <_dtoa_r+0xb0a>
 800ba84:	f000 fb02 	bl	800c08c <__multadd>
 800ba88:	4680      	mov	r8, r0
 800ba8a:	4607      	mov	r7, r0
 800ba8c:	f109 0901 	add.w	r9, r9, #1
 800ba90:	e772      	b.n	800b978 <_dtoa_r+0x9f0>
 800ba92:	f000 fafb 	bl	800c08c <__multadd>
 800ba96:	4639      	mov	r1, r7
 800ba98:	4680      	mov	r8, r0
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	220a      	movs	r2, #10
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f000 faf4 	bl	800c08c <__multadd>
 800baa4:	4607      	mov	r7, r0
 800baa6:	e7f1      	b.n	800ba8c <_dtoa_r+0xb04>
 800baa8:	9b03      	ldr	r3, [sp, #12]
 800baaa:	9302      	str	r3, [sp, #8]
 800baac:	9d01      	ldr	r5, [sp, #4]
 800baae:	ee18 0a10 	vmov	r0, s16
 800bab2:	4631      	mov	r1, r6
 800bab4:	f7ff f9dc 	bl	800ae70 <quorem>
 800bab8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800babc:	9b01      	ldr	r3, [sp, #4]
 800babe:	f805 ab01 	strb.w	sl, [r5], #1
 800bac2:	1aea      	subs	r2, r5, r3
 800bac4:	9b02      	ldr	r3, [sp, #8]
 800bac6:	4293      	cmp	r3, r2
 800bac8:	dd09      	ble.n	800bade <_dtoa_r+0xb56>
 800baca:	ee18 1a10 	vmov	r1, s16
 800bace:	2300      	movs	r3, #0
 800bad0:	220a      	movs	r2, #10
 800bad2:	4620      	mov	r0, r4
 800bad4:	f000 fada 	bl	800c08c <__multadd>
 800bad8:	ee08 0a10 	vmov	s16, r0
 800badc:	e7e7      	b.n	800baae <_dtoa_r+0xb26>
 800bade:	9b02      	ldr	r3, [sp, #8]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	bfc8      	it	gt
 800bae4:	461d      	movgt	r5, r3
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	bfd8      	it	le
 800baea:	2501      	movle	r5, #1
 800baec:	441d      	add	r5, r3
 800baee:	f04f 0800 	mov.w	r8, #0
 800baf2:	ee18 1a10 	vmov	r1, s16
 800baf6:	2201      	movs	r2, #1
 800baf8:	4620      	mov	r0, r4
 800bafa:	f000 fc77 	bl	800c3ec <__lshift>
 800bafe:	4631      	mov	r1, r6
 800bb00:	ee08 0a10 	vmov	s16, r0
 800bb04:	f000 fce2 	bl	800c4cc <__mcmp>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	dc91      	bgt.n	800ba30 <_dtoa_r+0xaa8>
 800bb0c:	d102      	bne.n	800bb14 <_dtoa_r+0xb8c>
 800bb0e:	f01a 0f01 	tst.w	sl, #1
 800bb12:	d18d      	bne.n	800ba30 <_dtoa_r+0xaa8>
 800bb14:	462b      	mov	r3, r5
 800bb16:	461d      	mov	r5, r3
 800bb18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb1c:	2a30      	cmp	r2, #48	; 0x30
 800bb1e:	d0fa      	beq.n	800bb16 <_dtoa_r+0xb8e>
 800bb20:	e6d7      	b.n	800b8d2 <_dtoa_r+0x94a>
 800bb22:	9a01      	ldr	r2, [sp, #4]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d184      	bne.n	800ba32 <_dtoa_r+0xaaa>
 800bb28:	9b00      	ldr	r3, [sp, #0]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	2331      	movs	r3, #49	; 0x31
 800bb30:	7013      	strb	r3, [r2, #0]
 800bb32:	e6ce      	b.n	800b8d2 <_dtoa_r+0x94a>
 800bb34:	4b09      	ldr	r3, [pc, #36]	; (800bb5c <_dtoa_r+0xbd4>)
 800bb36:	f7ff ba95 	b.w	800b064 <_dtoa_r+0xdc>
 800bb3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	f47f aa6e 	bne.w	800b01e <_dtoa_r+0x96>
 800bb42:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <_dtoa_r+0xbd8>)
 800bb44:	f7ff ba8e 	b.w	800b064 <_dtoa_r+0xdc>
 800bb48:	9b02      	ldr	r3, [sp, #8]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	dcae      	bgt.n	800baac <_dtoa_r+0xb24>
 800bb4e:	9b06      	ldr	r3, [sp, #24]
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	f73f aea8 	bgt.w	800b8a6 <_dtoa_r+0x91e>
 800bb56:	e7a9      	b.n	800baac <_dtoa_r+0xb24>
 800bb58:	080261c7 	.word	0x080261c7
 800bb5c:	080264b4 	.word	0x080264b4
 800bb60:	0802615f 	.word	0x0802615f

0800bb64 <std>:
 800bb64:	2300      	movs	r3, #0
 800bb66:	b510      	push	{r4, lr}
 800bb68:	4604      	mov	r4, r0
 800bb6a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb72:	6083      	str	r3, [r0, #8]
 800bb74:	8181      	strh	r1, [r0, #12]
 800bb76:	6643      	str	r3, [r0, #100]	; 0x64
 800bb78:	81c2      	strh	r2, [r0, #14]
 800bb7a:	6183      	str	r3, [r0, #24]
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	2208      	movs	r2, #8
 800bb80:	305c      	adds	r0, #92	; 0x5c
 800bb82:	f7fe f90b 	bl	8009d9c <memset>
 800bb86:	4b05      	ldr	r3, [pc, #20]	; (800bb9c <std+0x38>)
 800bb88:	6263      	str	r3, [r4, #36]	; 0x24
 800bb8a:	4b05      	ldr	r3, [pc, #20]	; (800bba0 <std+0x3c>)
 800bb8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb8e:	4b05      	ldr	r3, [pc, #20]	; (800bba4 <std+0x40>)
 800bb90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb92:	4b05      	ldr	r3, [pc, #20]	; (800bba8 <std+0x44>)
 800bb94:	6224      	str	r4, [r4, #32]
 800bb96:	6323      	str	r3, [r4, #48]	; 0x30
 800bb98:	bd10      	pop	{r4, pc}
 800bb9a:	bf00      	nop
 800bb9c:	0800cd01 	.word	0x0800cd01
 800bba0:	0800cd27 	.word	0x0800cd27
 800bba4:	0800cd5f 	.word	0x0800cd5f
 800bba8:	0800cd83 	.word	0x0800cd83

0800bbac <_cleanup_r>:
 800bbac:	4901      	ldr	r1, [pc, #4]	; (800bbb4 <_cleanup_r+0x8>)
 800bbae:	f000 b8c1 	b.w	800bd34 <_fwalk_reent>
 800bbb2:	bf00      	nop
 800bbb4:	0800d1b9 	.word	0x0800d1b9

0800bbb8 <__sfmoreglue>:
 800bbb8:	b570      	push	{r4, r5, r6, lr}
 800bbba:	2268      	movs	r2, #104	; 0x68
 800bbbc:	1e4d      	subs	r5, r1, #1
 800bbbe:	4355      	muls	r5, r2
 800bbc0:	460e      	mov	r6, r1
 800bbc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbc6:	f7fe f95d 	bl	8009e84 <_malloc_r>
 800bbca:	4604      	mov	r4, r0
 800bbcc:	b140      	cbz	r0, 800bbe0 <__sfmoreglue+0x28>
 800bbce:	2100      	movs	r1, #0
 800bbd0:	e9c0 1600 	strd	r1, r6, [r0]
 800bbd4:	300c      	adds	r0, #12
 800bbd6:	60a0      	str	r0, [r4, #8]
 800bbd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbdc:	f7fe f8de 	bl	8009d9c <memset>
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	bd70      	pop	{r4, r5, r6, pc}

0800bbe4 <__sfp_lock_acquire>:
 800bbe4:	4801      	ldr	r0, [pc, #4]	; (800bbec <__sfp_lock_acquire+0x8>)
 800bbe6:	f000 b9d1 	b.w	800bf8c <__retarget_lock_acquire_recursive>
 800bbea:	bf00      	nop
 800bbec:	20000b4a 	.word	0x20000b4a

0800bbf0 <__sfp_lock_release>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	; (800bbf8 <__sfp_lock_release+0x8>)
 800bbf2:	f000 b9cd 	b.w	800bf90 <__retarget_lock_release_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	20000b4a 	.word	0x20000b4a

0800bbfc <__sinit_lock_acquire>:
 800bbfc:	4801      	ldr	r0, [pc, #4]	; (800bc04 <__sinit_lock_acquire+0x8>)
 800bbfe:	f000 b9c5 	b.w	800bf8c <__retarget_lock_acquire_recursive>
 800bc02:	bf00      	nop
 800bc04:	20000b4b 	.word	0x20000b4b

0800bc08 <__sinit_lock_release>:
 800bc08:	4801      	ldr	r0, [pc, #4]	; (800bc10 <__sinit_lock_release+0x8>)
 800bc0a:	f000 b9c1 	b.w	800bf90 <__retarget_lock_release_recursive>
 800bc0e:	bf00      	nop
 800bc10:	20000b4b 	.word	0x20000b4b

0800bc14 <__sinit>:
 800bc14:	b510      	push	{r4, lr}
 800bc16:	4604      	mov	r4, r0
 800bc18:	f7ff fff0 	bl	800bbfc <__sinit_lock_acquire>
 800bc1c:	69a3      	ldr	r3, [r4, #24]
 800bc1e:	b11b      	cbz	r3, 800bc28 <__sinit+0x14>
 800bc20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc24:	f7ff bff0 	b.w	800bc08 <__sinit_lock_release>
 800bc28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc2c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc2e:	4b13      	ldr	r3, [pc, #76]	; (800bc7c <__sinit+0x68>)
 800bc30:	4a13      	ldr	r2, [pc, #76]	; (800bc80 <__sinit+0x6c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc36:	42a3      	cmp	r3, r4
 800bc38:	bf04      	itt	eq
 800bc3a:	2301      	moveq	r3, #1
 800bc3c:	61a3      	streq	r3, [r4, #24]
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f000 f820 	bl	800bc84 <__sfp>
 800bc44:	6060      	str	r0, [r4, #4]
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 f81c 	bl	800bc84 <__sfp>
 800bc4c:	60a0      	str	r0, [r4, #8]
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f000 f818 	bl	800bc84 <__sfp>
 800bc54:	2200      	movs	r2, #0
 800bc56:	60e0      	str	r0, [r4, #12]
 800bc58:	2104      	movs	r1, #4
 800bc5a:	6860      	ldr	r0, [r4, #4]
 800bc5c:	f7ff ff82 	bl	800bb64 <std>
 800bc60:	68a0      	ldr	r0, [r4, #8]
 800bc62:	2201      	movs	r2, #1
 800bc64:	2109      	movs	r1, #9
 800bc66:	f7ff ff7d 	bl	800bb64 <std>
 800bc6a:	68e0      	ldr	r0, [r4, #12]
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	2112      	movs	r1, #18
 800bc70:	f7ff ff78 	bl	800bb64 <std>
 800bc74:	2301      	movs	r3, #1
 800bc76:	61a3      	str	r3, [r4, #24]
 800bc78:	e7d2      	b.n	800bc20 <__sinit+0xc>
 800bc7a:	bf00      	nop
 800bc7c:	08025f28 	.word	0x08025f28
 800bc80:	0800bbad 	.word	0x0800bbad

0800bc84 <__sfp>:
 800bc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc86:	4607      	mov	r7, r0
 800bc88:	f7ff ffac 	bl	800bbe4 <__sfp_lock_acquire>
 800bc8c:	4b1e      	ldr	r3, [pc, #120]	; (800bd08 <__sfp+0x84>)
 800bc8e:	681e      	ldr	r6, [r3, #0]
 800bc90:	69b3      	ldr	r3, [r6, #24]
 800bc92:	b913      	cbnz	r3, 800bc9a <__sfp+0x16>
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7ff ffbd 	bl	800bc14 <__sinit>
 800bc9a:	3648      	adds	r6, #72	; 0x48
 800bc9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	d503      	bpl.n	800bcac <__sfp+0x28>
 800bca4:	6833      	ldr	r3, [r6, #0]
 800bca6:	b30b      	cbz	r3, 800bcec <__sfp+0x68>
 800bca8:	6836      	ldr	r6, [r6, #0]
 800bcaa:	e7f7      	b.n	800bc9c <__sfp+0x18>
 800bcac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcb0:	b9d5      	cbnz	r5, 800bce8 <__sfp+0x64>
 800bcb2:	4b16      	ldr	r3, [pc, #88]	; (800bd0c <__sfp+0x88>)
 800bcb4:	60e3      	str	r3, [r4, #12]
 800bcb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcba:	6665      	str	r5, [r4, #100]	; 0x64
 800bcbc:	f000 f964 	bl	800bf88 <__retarget_lock_init_recursive>
 800bcc0:	f7ff ff96 	bl	800bbf0 <__sfp_lock_release>
 800bcc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bcc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bccc:	6025      	str	r5, [r4, #0]
 800bcce:	61a5      	str	r5, [r4, #24]
 800bcd0:	2208      	movs	r2, #8
 800bcd2:	4629      	mov	r1, r5
 800bcd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcd8:	f7fe f860 	bl	8009d9c <memset>
 800bcdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bce4:	4620      	mov	r0, r4
 800bce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bce8:	3468      	adds	r4, #104	; 0x68
 800bcea:	e7d9      	b.n	800bca0 <__sfp+0x1c>
 800bcec:	2104      	movs	r1, #4
 800bcee:	4638      	mov	r0, r7
 800bcf0:	f7ff ff62 	bl	800bbb8 <__sfmoreglue>
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	6030      	str	r0, [r6, #0]
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d1d5      	bne.n	800bca8 <__sfp+0x24>
 800bcfc:	f7ff ff78 	bl	800bbf0 <__sfp_lock_release>
 800bd00:	230c      	movs	r3, #12
 800bd02:	603b      	str	r3, [r7, #0]
 800bd04:	e7ee      	b.n	800bce4 <__sfp+0x60>
 800bd06:	bf00      	nop
 800bd08:	08025f28 	.word	0x08025f28
 800bd0c:	ffff0001 	.word	0xffff0001

0800bd10 <fiprintf>:
 800bd10:	b40e      	push	{r1, r2, r3}
 800bd12:	b503      	push	{r0, r1, lr}
 800bd14:	4601      	mov	r1, r0
 800bd16:	ab03      	add	r3, sp, #12
 800bd18:	4805      	ldr	r0, [pc, #20]	; (800bd30 <fiprintf+0x20>)
 800bd1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd1e:	6800      	ldr	r0, [r0, #0]
 800bd20:	9301      	str	r3, [sp, #4]
 800bd22:	f000 fe71 	bl	800ca08 <_vfiprintf_r>
 800bd26:	b002      	add	sp, #8
 800bd28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd2c:	b003      	add	sp, #12
 800bd2e:	4770      	bx	lr
 800bd30:	200000cc 	.word	0x200000cc

0800bd34 <_fwalk_reent>:
 800bd34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd38:	4606      	mov	r6, r0
 800bd3a:	4688      	mov	r8, r1
 800bd3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd40:	2700      	movs	r7, #0
 800bd42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd46:	f1b9 0901 	subs.w	r9, r9, #1
 800bd4a:	d505      	bpl.n	800bd58 <_fwalk_reent+0x24>
 800bd4c:	6824      	ldr	r4, [r4, #0]
 800bd4e:	2c00      	cmp	r4, #0
 800bd50:	d1f7      	bne.n	800bd42 <_fwalk_reent+0xe>
 800bd52:	4638      	mov	r0, r7
 800bd54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd58:	89ab      	ldrh	r3, [r5, #12]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d907      	bls.n	800bd6e <_fwalk_reent+0x3a>
 800bd5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd62:	3301      	adds	r3, #1
 800bd64:	d003      	beq.n	800bd6e <_fwalk_reent+0x3a>
 800bd66:	4629      	mov	r1, r5
 800bd68:	4630      	mov	r0, r6
 800bd6a:	47c0      	blx	r8
 800bd6c:	4307      	orrs	r7, r0
 800bd6e:	3568      	adds	r5, #104	; 0x68
 800bd70:	e7e9      	b.n	800bd46 <_fwalk_reent+0x12>
	...

0800bd74 <_findenv_r>:
 800bd74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd78:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800bde8 <_findenv_r+0x74>
 800bd7c:	4607      	mov	r7, r0
 800bd7e:	4689      	mov	r9, r1
 800bd80:	4616      	mov	r6, r2
 800bd82:	f001 f987 	bl	800d094 <__env_lock>
 800bd86:	f8da 4000 	ldr.w	r4, [sl]
 800bd8a:	b134      	cbz	r4, 800bd9a <_findenv_r+0x26>
 800bd8c:	464b      	mov	r3, r9
 800bd8e:	4698      	mov	r8, r3
 800bd90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd94:	b13a      	cbz	r2, 800bda6 <_findenv_r+0x32>
 800bd96:	2a3d      	cmp	r2, #61	; 0x3d
 800bd98:	d1f9      	bne.n	800bd8e <_findenv_r+0x1a>
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	f001 f980 	bl	800d0a0 <__env_unlock>
 800bda0:	2000      	movs	r0, #0
 800bda2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda6:	eba8 0809 	sub.w	r8, r8, r9
 800bdaa:	46a3      	mov	fp, r4
 800bdac:	f854 0b04 	ldr.w	r0, [r4], #4
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d0f2      	beq.n	800bd9a <_findenv_r+0x26>
 800bdb4:	4642      	mov	r2, r8
 800bdb6:	4649      	mov	r1, r9
 800bdb8:	f000 ffef 	bl	800cd9a <strncmp>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d1f4      	bne.n	800bdaa <_findenv_r+0x36>
 800bdc0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bdc4:	eb03 0508 	add.w	r5, r3, r8
 800bdc8:	f813 3008 	ldrb.w	r3, [r3, r8]
 800bdcc:	2b3d      	cmp	r3, #61	; 0x3d
 800bdce:	d1ec      	bne.n	800bdaa <_findenv_r+0x36>
 800bdd0:	f8da 3000 	ldr.w	r3, [sl]
 800bdd4:	ebab 0303 	sub.w	r3, fp, r3
 800bdd8:	109b      	asrs	r3, r3, #2
 800bdda:	4638      	mov	r0, r7
 800bddc:	6033      	str	r3, [r6, #0]
 800bdde:	f001 f95f 	bl	800d0a0 <__env_unlock>
 800bde2:	1c68      	adds	r0, r5, #1
 800bde4:	e7dd      	b.n	800bda2 <_findenv_r+0x2e>
 800bde6:	bf00      	nop
 800bde8:	20000190 	.word	0x20000190

0800bdec <_getenv_r>:
 800bdec:	b507      	push	{r0, r1, r2, lr}
 800bdee:	aa01      	add	r2, sp, #4
 800bdf0:	f7ff ffc0 	bl	800bd74 <_findenv_r>
 800bdf4:	b003      	add	sp, #12
 800bdf6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800bdfc <_gettimeofday_r>:
 800bdfc:	b538      	push	{r3, r4, r5, lr}
 800bdfe:	4d07      	ldr	r5, [pc, #28]	; (800be1c <_gettimeofday_r+0x20>)
 800be00:	2300      	movs	r3, #0
 800be02:	4604      	mov	r4, r0
 800be04:	4608      	mov	r0, r1
 800be06:	4611      	mov	r1, r2
 800be08:	602b      	str	r3, [r5, #0]
 800be0a:	f001 fff1 	bl	800ddf0 <_gettimeofday>
 800be0e:	1c43      	adds	r3, r0, #1
 800be10:	d102      	bne.n	800be18 <_gettimeofday_r+0x1c>
 800be12:	682b      	ldr	r3, [r5, #0]
 800be14:	b103      	cbz	r3, 800be18 <_gettimeofday_r+0x1c>
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	bd38      	pop	{r3, r4, r5, pc}
 800be1a:	bf00      	nop
 800be1c:	20000b50 	.word	0x20000b50

0800be20 <__gettzinfo>:
 800be20:	4800      	ldr	r0, [pc, #0]	; (800be24 <__gettzinfo+0x4>)
 800be22:	4770      	bx	lr
 800be24:	20000138 	.word	0x20000138

0800be28 <gmtime_r>:
 800be28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be2c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800be30:	460c      	mov	r4, r1
 800be32:	4a4f      	ldr	r2, [pc, #316]	; (800bf70 <gmtime_r+0x148>)
 800be34:	2300      	movs	r3, #0
 800be36:	4630      	mov	r0, r6
 800be38:	4639      	mov	r1, r7
 800be3a:	f7f4 ff7f 	bl	8000d3c <__aeabi_ldivmod>
 800be3e:	4639      	mov	r1, r7
 800be40:	4605      	mov	r5, r0
 800be42:	4a4b      	ldr	r2, [pc, #300]	; (800bf70 <gmtime_r+0x148>)
 800be44:	4630      	mov	r0, r6
 800be46:	2300      	movs	r3, #0
 800be48:	f7f4 ff78 	bl	8000d3c <__aeabi_ldivmod>
 800be4c:	2a00      	cmp	r2, #0
 800be4e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800be52:	bfb7      	itett	lt
 800be54:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800be58:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800be5c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800be60:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800be64:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800be68:	fbb2 f1f0 	udiv	r1, r2, r0
 800be6c:	fb00 2211 	mls	r2, r0, r1, r2
 800be70:	203c      	movs	r0, #60	; 0x3c
 800be72:	60a1      	str	r1, [r4, #8]
 800be74:	fbb2 f1f0 	udiv	r1, r2, r0
 800be78:	fb00 2211 	mls	r2, r0, r1, r2
 800be7c:	6061      	str	r1, [r4, #4]
 800be7e:	6022      	str	r2, [r4, #0]
 800be80:	2107      	movs	r1, #7
 800be82:	1cda      	adds	r2, r3, #3
 800be84:	fb92 f1f1 	sdiv	r1, r2, r1
 800be88:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800be8c:	1a52      	subs	r2, r2, r1
 800be8e:	bf48      	it	mi
 800be90:	3207      	addmi	r2, #7
 800be92:	4d38      	ldr	r5, [pc, #224]	; (800bf74 <gmtime_r+0x14c>)
 800be94:	4838      	ldr	r0, [pc, #224]	; (800bf78 <gmtime_r+0x150>)
 800be96:	61a2      	str	r2, [r4, #24]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	bfb7      	itett	lt
 800be9c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800bea0:	fb93 f5f5 	sdivge	r5, r3, r5
 800bea4:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800bea8:	fb92 f5f5 	sdivlt	r5, r2, r5
 800beac:	fb00 3005 	mla	r0, r0, r5, r3
 800beb0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800beb4:	fbb0 f2f2 	udiv	r2, r0, r2
 800beb8:	4402      	add	r2, r0
 800beba:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800bebe:	fbb0 f1f3 	udiv	r1, r0, r3
 800bec2:	1a52      	subs	r2, r2, r1
 800bec4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800bec8:	492c      	ldr	r1, [pc, #176]	; (800bf7c <gmtime_r+0x154>)
 800beca:	fbb0 f1f1 	udiv	r1, r0, r1
 800bece:	2764      	movs	r7, #100	; 0x64
 800bed0:	1a52      	subs	r2, r2, r1
 800bed2:	fbb2 f1fc 	udiv	r1, r2, ip
 800bed6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beda:	fbb1 f6f7 	udiv	r6, r1, r7
 800bede:	1af3      	subs	r3, r6, r3
 800bee0:	4403      	add	r3, r0
 800bee2:	fb0c 3311 	mls	r3, ip, r1, r3
 800bee6:	2299      	movs	r2, #153	; 0x99
 800bee8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800beec:	f10e 0e02 	add.w	lr, lr, #2
 800bef0:	f103 0c01 	add.w	ip, r3, #1
 800bef4:	fbbe f0f2 	udiv	r0, lr, r2
 800bef8:	4342      	muls	r2, r0
 800befa:	3202      	adds	r2, #2
 800befc:	f04f 0805 	mov.w	r8, #5
 800bf00:	fbb2 f2f8 	udiv	r2, r2, r8
 800bf04:	ebac 0c02 	sub.w	ip, ip, r2
 800bf08:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800bf0c:	4596      	cmp	lr, r2
 800bf0e:	bf94      	ite	ls
 800bf10:	2202      	movls	r2, #2
 800bf12:	f06f 0209 	mvnhi.w	r2, #9
 800bf16:	4410      	add	r0, r2
 800bf18:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bf1c:	fb02 1505 	mla	r5, r2, r5, r1
 800bf20:	2801      	cmp	r0, #1
 800bf22:	bf98      	it	ls
 800bf24:	3501      	addls	r5, #1
 800bf26:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800bf2a:	d30d      	bcc.n	800bf48 <gmtime_r+0x120>
 800bf2c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800bf30:	61e3      	str	r3, [r4, #28]
 800bf32:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800bf36:	2300      	movs	r3, #0
 800bf38:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800bf3c:	f8c4 c00c 	str.w	ip, [r4, #12]
 800bf40:	6223      	str	r3, [r4, #32]
 800bf42:	4620      	mov	r0, r4
 800bf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf48:	078a      	lsls	r2, r1, #30
 800bf4a:	d102      	bne.n	800bf52 <gmtime_r+0x12a>
 800bf4c:	fb07 1616 	mls	r6, r7, r6, r1
 800bf50:	b95e      	cbnz	r6, 800bf6a <gmtime_r+0x142>
 800bf52:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bf56:	fbb1 f6f2 	udiv	r6, r1, r2
 800bf5a:	fb02 1216 	mls	r2, r2, r6, r1
 800bf5e:	fab2 f282 	clz	r2, r2
 800bf62:	0952      	lsrs	r2, r2, #5
 800bf64:	333b      	adds	r3, #59	; 0x3b
 800bf66:	4413      	add	r3, r2
 800bf68:	e7e2      	b.n	800bf30 <gmtime_r+0x108>
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	e7fa      	b.n	800bf64 <gmtime_r+0x13c>
 800bf6e:	bf00      	nop
 800bf70:	00015180 	.word	0x00015180
 800bf74:	00023ab1 	.word	0x00023ab1
 800bf78:	fffdc54f 	.word	0xfffdc54f
 800bf7c:	00023ab0 	.word	0x00023ab0

0800bf80 <_localeconv_r>:
 800bf80:	4800      	ldr	r0, [pc, #0]	; (800bf84 <_localeconv_r+0x4>)
 800bf82:	4770      	bx	lr
 800bf84:	20000284 	.word	0x20000284

0800bf88 <__retarget_lock_init_recursive>:
 800bf88:	4770      	bx	lr

0800bf8a <__retarget_lock_acquire>:
 800bf8a:	4770      	bx	lr

0800bf8c <__retarget_lock_acquire_recursive>:
 800bf8c:	4770      	bx	lr

0800bf8e <__retarget_lock_release>:
 800bf8e:	4770      	bx	lr

0800bf90 <__retarget_lock_release_recursive>:
 800bf90:	4770      	bx	lr

0800bf92 <memcpy>:
 800bf92:	440a      	add	r2, r1
 800bf94:	4291      	cmp	r1, r2
 800bf96:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf9a:	d100      	bne.n	800bf9e <memcpy+0xc>
 800bf9c:	4770      	bx	lr
 800bf9e:	b510      	push	{r4, lr}
 800bfa0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfa4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfa8:	4291      	cmp	r1, r2
 800bfaa:	d1f9      	bne.n	800bfa0 <memcpy+0xe>
 800bfac:	bd10      	pop	{r4, pc}
	...

0800bfb0 <__malloc_lock>:
 800bfb0:	4801      	ldr	r0, [pc, #4]	; (800bfb8 <__malloc_lock+0x8>)
 800bfb2:	f7ff bfeb 	b.w	800bf8c <__retarget_lock_acquire_recursive>
 800bfb6:	bf00      	nop
 800bfb8:	20000b49 	.word	0x20000b49

0800bfbc <__malloc_unlock>:
 800bfbc:	4801      	ldr	r0, [pc, #4]	; (800bfc4 <__malloc_unlock+0x8>)
 800bfbe:	f7ff bfe7 	b.w	800bf90 <__retarget_lock_release_recursive>
 800bfc2:	bf00      	nop
 800bfc4:	20000b49 	.word	0x20000b49

0800bfc8 <_Balloc>:
 800bfc8:	b570      	push	{r4, r5, r6, lr}
 800bfca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bfcc:	4604      	mov	r4, r0
 800bfce:	460d      	mov	r5, r1
 800bfd0:	b976      	cbnz	r6, 800bff0 <_Balloc+0x28>
 800bfd2:	2010      	movs	r0, #16
 800bfd4:	f7fd fed2 	bl	8009d7c <malloc>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	6260      	str	r0, [r4, #36]	; 0x24
 800bfdc:	b920      	cbnz	r0, 800bfe8 <_Balloc+0x20>
 800bfde:	4b18      	ldr	r3, [pc, #96]	; (800c040 <_Balloc+0x78>)
 800bfe0:	4818      	ldr	r0, [pc, #96]	; (800c044 <_Balloc+0x7c>)
 800bfe2:	2166      	movs	r1, #102	; 0x66
 800bfe4:	f7fe ff26 	bl	800ae34 <__assert_func>
 800bfe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfec:	6006      	str	r6, [r0, #0]
 800bfee:	60c6      	str	r6, [r0, #12]
 800bff0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bff2:	68f3      	ldr	r3, [r6, #12]
 800bff4:	b183      	cbz	r3, 800c018 <_Balloc+0x50>
 800bff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bffe:	b9b8      	cbnz	r0, 800c030 <_Balloc+0x68>
 800c000:	2101      	movs	r1, #1
 800c002:	fa01 f605 	lsl.w	r6, r1, r5
 800c006:	1d72      	adds	r2, r6, #5
 800c008:	0092      	lsls	r2, r2, #2
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fb60 	bl	800c6d0 <_calloc_r>
 800c010:	b160      	cbz	r0, 800c02c <_Balloc+0x64>
 800c012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c016:	e00e      	b.n	800c036 <_Balloc+0x6e>
 800c018:	2221      	movs	r2, #33	; 0x21
 800c01a:	2104      	movs	r1, #4
 800c01c:	4620      	mov	r0, r4
 800c01e:	f000 fb57 	bl	800c6d0 <_calloc_r>
 800c022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c024:	60f0      	str	r0, [r6, #12]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d1e4      	bne.n	800bff6 <_Balloc+0x2e>
 800c02c:	2000      	movs	r0, #0
 800c02e:	bd70      	pop	{r4, r5, r6, pc}
 800c030:	6802      	ldr	r2, [r0, #0]
 800c032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c036:	2300      	movs	r3, #0
 800c038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c03c:	e7f7      	b.n	800c02e <_Balloc+0x66>
 800c03e:	bf00      	nop
 800c040:	08025f2c 	.word	0x08025f2c
 800c044:	08026238 	.word	0x08026238

0800c048 <_Bfree>:
 800c048:	b570      	push	{r4, r5, r6, lr}
 800c04a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c04c:	4605      	mov	r5, r0
 800c04e:	460c      	mov	r4, r1
 800c050:	b976      	cbnz	r6, 800c070 <_Bfree+0x28>
 800c052:	2010      	movs	r0, #16
 800c054:	f7fd fe92 	bl	8009d7c <malloc>
 800c058:	4602      	mov	r2, r0
 800c05a:	6268      	str	r0, [r5, #36]	; 0x24
 800c05c:	b920      	cbnz	r0, 800c068 <_Bfree+0x20>
 800c05e:	4b09      	ldr	r3, [pc, #36]	; (800c084 <_Bfree+0x3c>)
 800c060:	4809      	ldr	r0, [pc, #36]	; (800c088 <_Bfree+0x40>)
 800c062:	218a      	movs	r1, #138	; 0x8a
 800c064:	f7fe fee6 	bl	800ae34 <__assert_func>
 800c068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c06c:	6006      	str	r6, [r0, #0]
 800c06e:	60c6      	str	r6, [r0, #12]
 800c070:	b13c      	cbz	r4, 800c082 <_Bfree+0x3a>
 800c072:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c074:	6862      	ldr	r2, [r4, #4]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c07c:	6021      	str	r1, [r4, #0]
 800c07e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c082:	bd70      	pop	{r4, r5, r6, pc}
 800c084:	08025f2c 	.word	0x08025f2c
 800c088:	08026238 	.word	0x08026238

0800c08c <__multadd>:
 800c08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c090:	690d      	ldr	r5, [r1, #16]
 800c092:	4607      	mov	r7, r0
 800c094:	460c      	mov	r4, r1
 800c096:	461e      	mov	r6, r3
 800c098:	f101 0c14 	add.w	ip, r1, #20
 800c09c:	2000      	movs	r0, #0
 800c09e:	f8dc 3000 	ldr.w	r3, [ip]
 800c0a2:	b299      	uxth	r1, r3
 800c0a4:	fb02 6101 	mla	r1, r2, r1, r6
 800c0a8:	0c1e      	lsrs	r6, r3, #16
 800c0aa:	0c0b      	lsrs	r3, r1, #16
 800c0ac:	fb02 3306 	mla	r3, r2, r6, r3
 800c0b0:	b289      	uxth	r1, r1
 800c0b2:	3001      	adds	r0, #1
 800c0b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0b8:	4285      	cmp	r5, r0
 800c0ba:	f84c 1b04 	str.w	r1, [ip], #4
 800c0be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0c2:	dcec      	bgt.n	800c09e <__multadd+0x12>
 800c0c4:	b30e      	cbz	r6, 800c10a <__multadd+0x7e>
 800c0c6:	68a3      	ldr	r3, [r4, #8]
 800c0c8:	42ab      	cmp	r3, r5
 800c0ca:	dc19      	bgt.n	800c100 <__multadd+0x74>
 800c0cc:	6861      	ldr	r1, [r4, #4]
 800c0ce:	4638      	mov	r0, r7
 800c0d0:	3101      	adds	r1, #1
 800c0d2:	f7ff ff79 	bl	800bfc8 <_Balloc>
 800c0d6:	4680      	mov	r8, r0
 800c0d8:	b928      	cbnz	r0, 800c0e6 <__multadd+0x5a>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	4b0c      	ldr	r3, [pc, #48]	; (800c110 <__multadd+0x84>)
 800c0de:	480d      	ldr	r0, [pc, #52]	; (800c114 <__multadd+0x88>)
 800c0e0:	21b5      	movs	r1, #181	; 0xb5
 800c0e2:	f7fe fea7 	bl	800ae34 <__assert_func>
 800c0e6:	6922      	ldr	r2, [r4, #16]
 800c0e8:	3202      	adds	r2, #2
 800c0ea:	f104 010c 	add.w	r1, r4, #12
 800c0ee:	0092      	lsls	r2, r2, #2
 800c0f0:	300c      	adds	r0, #12
 800c0f2:	f7ff ff4e 	bl	800bf92 <memcpy>
 800c0f6:	4621      	mov	r1, r4
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	f7ff ffa5 	bl	800c048 <_Bfree>
 800c0fe:	4644      	mov	r4, r8
 800c100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c104:	3501      	adds	r5, #1
 800c106:	615e      	str	r6, [r3, #20]
 800c108:	6125      	str	r5, [r4, #16]
 800c10a:	4620      	mov	r0, r4
 800c10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c110:	080261c7 	.word	0x080261c7
 800c114:	08026238 	.word	0x08026238

0800c118 <__hi0bits>:
 800c118:	0c03      	lsrs	r3, r0, #16
 800c11a:	041b      	lsls	r3, r3, #16
 800c11c:	b9d3      	cbnz	r3, 800c154 <__hi0bits+0x3c>
 800c11e:	0400      	lsls	r0, r0, #16
 800c120:	2310      	movs	r3, #16
 800c122:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c126:	bf04      	itt	eq
 800c128:	0200      	lsleq	r0, r0, #8
 800c12a:	3308      	addeq	r3, #8
 800c12c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c130:	bf04      	itt	eq
 800c132:	0100      	lsleq	r0, r0, #4
 800c134:	3304      	addeq	r3, #4
 800c136:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c13a:	bf04      	itt	eq
 800c13c:	0080      	lsleq	r0, r0, #2
 800c13e:	3302      	addeq	r3, #2
 800c140:	2800      	cmp	r0, #0
 800c142:	db05      	blt.n	800c150 <__hi0bits+0x38>
 800c144:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c148:	f103 0301 	add.w	r3, r3, #1
 800c14c:	bf08      	it	eq
 800c14e:	2320      	moveq	r3, #32
 800c150:	4618      	mov	r0, r3
 800c152:	4770      	bx	lr
 800c154:	2300      	movs	r3, #0
 800c156:	e7e4      	b.n	800c122 <__hi0bits+0xa>

0800c158 <__lo0bits>:
 800c158:	6803      	ldr	r3, [r0, #0]
 800c15a:	f013 0207 	ands.w	r2, r3, #7
 800c15e:	4601      	mov	r1, r0
 800c160:	d00b      	beq.n	800c17a <__lo0bits+0x22>
 800c162:	07da      	lsls	r2, r3, #31
 800c164:	d423      	bmi.n	800c1ae <__lo0bits+0x56>
 800c166:	0798      	lsls	r0, r3, #30
 800c168:	bf49      	itett	mi
 800c16a:	085b      	lsrmi	r3, r3, #1
 800c16c:	089b      	lsrpl	r3, r3, #2
 800c16e:	2001      	movmi	r0, #1
 800c170:	600b      	strmi	r3, [r1, #0]
 800c172:	bf5c      	itt	pl
 800c174:	600b      	strpl	r3, [r1, #0]
 800c176:	2002      	movpl	r0, #2
 800c178:	4770      	bx	lr
 800c17a:	b298      	uxth	r0, r3
 800c17c:	b9a8      	cbnz	r0, 800c1aa <__lo0bits+0x52>
 800c17e:	0c1b      	lsrs	r3, r3, #16
 800c180:	2010      	movs	r0, #16
 800c182:	b2da      	uxtb	r2, r3
 800c184:	b90a      	cbnz	r2, 800c18a <__lo0bits+0x32>
 800c186:	3008      	adds	r0, #8
 800c188:	0a1b      	lsrs	r3, r3, #8
 800c18a:	071a      	lsls	r2, r3, #28
 800c18c:	bf04      	itt	eq
 800c18e:	091b      	lsreq	r3, r3, #4
 800c190:	3004      	addeq	r0, #4
 800c192:	079a      	lsls	r2, r3, #30
 800c194:	bf04      	itt	eq
 800c196:	089b      	lsreq	r3, r3, #2
 800c198:	3002      	addeq	r0, #2
 800c19a:	07da      	lsls	r2, r3, #31
 800c19c:	d403      	bmi.n	800c1a6 <__lo0bits+0x4e>
 800c19e:	085b      	lsrs	r3, r3, #1
 800c1a0:	f100 0001 	add.w	r0, r0, #1
 800c1a4:	d005      	beq.n	800c1b2 <__lo0bits+0x5a>
 800c1a6:	600b      	str	r3, [r1, #0]
 800c1a8:	4770      	bx	lr
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	e7e9      	b.n	800c182 <__lo0bits+0x2a>
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	4770      	bx	lr
 800c1b2:	2020      	movs	r0, #32
 800c1b4:	4770      	bx	lr
	...

0800c1b8 <__i2b>:
 800c1b8:	b510      	push	{r4, lr}
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	2101      	movs	r1, #1
 800c1be:	f7ff ff03 	bl	800bfc8 <_Balloc>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	b928      	cbnz	r0, 800c1d2 <__i2b+0x1a>
 800c1c6:	4b05      	ldr	r3, [pc, #20]	; (800c1dc <__i2b+0x24>)
 800c1c8:	4805      	ldr	r0, [pc, #20]	; (800c1e0 <__i2b+0x28>)
 800c1ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c1ce:	f7fe fe31 	bl	800ae34 <__assert_func>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	6144      	str	r4, [r0, #20]
 800c1d6:	6103      	str	r3, [r0, #16]
 800c1d8:	bd10      	pop	{r4, pc}
 800c1da:	bf00      	nop
 800c1dc:	080261c7 	.word	0x080261c7
 800c1e0:	08026238 	.word	0x08026238

0800c1e4 <__multiply>:
 800c1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1e8:	4691      	mov	r9, r2
 800c1ea:	690a      	ldr	r2, [r1, #16]
 800c1ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	bfb8      	it	lt
 800c1f4:	460b      	movlt	r3, r1
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	bfbc      	itt	lt
 800c1fa:	464c      	movlt	r4, r9
 800c1fc:	4699      	movlt	r9, r3
 800c1fe:	6927      	ldr	r7, [r4, #16]
 800c200:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c204:	68a3      	ldr	r3, [r4, #8]
 800c206:	6861      	ldr	r1, [r4, #4]
 800c208:	eb07 060a 	add.w	r6, r7, sl
 800c20c:	42b3      	cmp	r3, r6
 800c20e:	b085      	sub	sp, #20
 800c210:	bfb8      	it	lt
 800c212:	3101      	addlt	r1, #1
 800c214:	f7ff fed8 	bl	800bfc8 <_Balloc>
 800c218:	b930      	cbnz	r0, 800c228 <__multiply+0x44>
 800c21a:	4602      	mov	r2, r0
 800c21c:	4b44      	ldr	r3, [pc, #272]	; (800c330 <__multiply+0x14c>)
 800c21e:	4845      	ldr	r0, [pc, #276]	; (800c334 <__multiply+0x150>)
 800c220:	f240 115d 	movw	r1, #349	; 0x15d
 800c224:	f7fe fe06 	bl	800ae34 <__assert_func>
 800c228:	f100 0514 	add.w	r5, r0, #20
 800c22c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c230:	462b      	mov	r3, r5
 800c232:	2200      	movs	r2, #0
 800c234:	4543      	cmp	r3, r8
 800c236:	d321      	bcc.n	800c27c <__multiply+0x98>
 800c238:	f104 0314 	add.w	r3, r4, #20
 800c23c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c240:	f109 0314 	add.w	r3, r9, #20
 800c244:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c248:	9202      	str	r2, [sp, #8]
 800c24a:	1b3a      	subs	r2, r7, r4
 800c24c:	3a15      	subs	r2, #21
 800c24e:	f022 0203 	bic.w	r2, r2, #3
 800c252:	3204      	adds	r2, #4
 800c254:	f104 0115 	add.w	r1, r4, #21
 800c258:	428f      	cmp	r7, r1
 800c25a:	bf38      	it	cc
 800c25c:	2204      	movcc	r2, #4
 800c25e:	9201      	str	r2, [sp, #4]
 800c260:	9a02      	ldr	r2, [sp, #8]
 800c262:	9303      	str	r3, [sp, #12]
 800c264:	429a      	cmp	r2, r3
 800c266:	d80c      	bhi.n	800c282 <__multiply+0x9e>
 800c268:	2e00      	cmp	r6, #0
 800c26a:	dd03      	ble.n	800c274 <__multiply+0x90>
 800c26c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c270:	2b00      	cmp	r3, #0
 800c272:	d05a      	beq.n	800c32a <__multiply+0x146>
 800c274:	6106      	str	r6, [r0, #16]
 800c276:	b005      	add	sp, #20
 800c278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c27c:	f843 2b04 	str.w	r2, [r3], #4
 800c280:	e7d8      	b.n	800c234 <__multiply+0x50>
 800c282:	f8b3 a000 	ldrh.w	sl, [r3]
 800c286:	f1ba 0f00 	cmp.w	sl, #0
 800c28a:	d024      	beq.n	800c2d6 <__multiply+0xf2>
 800c28c:	f104 0e14 	add.w	lr, r4, #20
 800c290:	46a9      	mov	r9, r5
 800c292:	f04f 0c00 	mov.w	ip, #0
 800c296:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c29a:	f8d9 1000 	ldr.w	r1, [r9]
 800c29e:	fa1f fb82 	uxth.w	fp, r2
 800c2a2:	b289      	uxth	r1, r1
 800c2a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c2a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c2ac:	f8d9 2000 	ldr.w	r2, [r9]
 800c2b0:	4461      	add	r1, ip
 800c2b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c2ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c2be:	b289      	uxth	r1, r1
 800c2c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c2c4:	4577      	cmp	r7, lr
 800c2c6:	f849 1b04 	str.w	r1, [r9], #4
 800c2ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2ce:	d8e2      	bhi.n	800c296 <__multiply+0xb2>
 800c2d0:	9a01      	ldr	r2, [sp, #4]
 800c2d2:	f845 c002 	str.w	ip, [r5, r2]
 800c2d6:	9a03      	ldr	r2, [sp, #12]
 800c2d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	f1b9 0f00 	cmp.w	r9, #0
 800c2e2:	d020      	beq.n	800c326 <__multiply+0x142>
 800c2e4:	6829      	ldr	r1, [r5, #0]
 800c2e6:	f104 0c14 	add.w	ip, r4, #20
 800c2ea:	46ae      	mov	lr, r5
 800c2ec:	f04f 0a00 	mov.w	sl, #0
 800c2f0:	f8bc b000 	ldrh.w	fp, [ip]
 800c2f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c2f8:	fb09 220b 	mla	r2, r9, fp, r2
 800c2fc:	4492      	add	sl, r2
 800c2fe:	b289      	uxth	r1, r1
 800c300:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c304:	f84e 1b04 	str.w	r1, [lr], #4
 800c308:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c30c:	f8be 1000 	ldrh.w	r1, [lr]
 800c310:	0c12      	lsrs	r2, r2, #16
 800c312:	fb09 1102 	mla	r1, r9, r2, r1
 800c316:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c31a:	4567      	cmp	r7, ip
 800c31c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c320:	d8e6      	bhi.n	800c2f0 <__multiply+0x10c>
 800c322:	9a01      	ldr	r2, [sp, #4]
 800c324:	50a9      	str	r1, [r5, r2]
 800c326:	3504      	adds	r5, #4
 800c328:	e79a      	b.n	800c260 <__multiply+0x7c>
 800c32a:	3e01      	subs	r6, #1
 800c32c:	e79c      	b.n	800c268 <__multiply+0x84>
 800c32e:	bf00      	nop
 800c330:	080261c7 	.word	0x080261c7
 800c334:	08026238 	.word	0x08026238

0800c338 <__pow5mult>:
 800c338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c33c:	4615      	mov	r5, r2
 800c33e:	f012 0203 	ands.w	r2, r2, #3
 800c342:	4606      	mov	r6, r0
 800c344:	460f      	mov	r7, r1
 800c346:	d007      	beq.n	800c358 <__pow5mult+0x20>
 800c348:	4c25      	ldr	r4, [pc, #148]	; (800c3e0 <__pow5mult+0xa8>)
 800c34a:	3a01      	subs	r2, #1
 800c34c:	2300      	movs	r3, #0
 800c34e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c352:	f7ff fe9b 	bl	800c08c <__multadd>
 800c356:	4607      	mov	r7, r0
 800c358:	10ad      	asrs	r5, r5, #2
 800c35a:	d03d      	beq.n	800c3d8 <__pow5mult+0xa0>
 800c35c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c35e:	b97c      	cbnz	r4, 800c380 <__pow5mult+0x48>
 800c360:	2010      	movs	r0, #16
 800c362:	f7fd fd0b 	bl	8009d7c <malloc>
 800c366:	4602      	mov	r2, r0
 800c368:	6270      	str	r0, [r6, #36]	; 0x24
 800c36a:	b928      	cbnz	r0, 800c378 <__pow5mult+0x40>
 800c36c:	4b1d      	ldr	r3, [pc, #116]	; (800c3e4 <__pow5mult+0xac>)
 800c36e:	481e      	ldr	r0, [pc, #120]	; (800c3e8 <__pow5mult+0xb0>)
 800c370:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c374:	f7fe fd5e 	bl	800ae34 <__assert_func>
 800c378:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c37c:	6004      	str	r4, [r0, #0]
 800c37e:	60c4      	str	r4, [r0, #12]
 800c380:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c384:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c388:	b94c      	cbnz	r4, 800c39e <__pow5mult+0x66>
 800c38a:	f240 2171 	movw	r1, #625	; 0x271
 800c38e:	4630      	mov	r0, r6
 800c390:	f7ff ff12 	bl	800c1b8 <__i2b>
 800c394:	2300      	movs	r3, #0
 800c396:	f8c8 0008 	str.w	r0, [r8, #8]
 800c39a:	4604      	mov	r4, r0
 800c39c:	6003      	str	r3, [r0, #0]
 800c39e:	f04f 0900 	mov.w	r9, #0
 800c3a2:	07eb      	lsls	r3, r5, #31
 800c3a4:	d50a      	bpl.n	800c3bc <__pow5mult+0x84>
 800c3a6:	4639      	mov	r1, r7
 800c3a8:	4622      	mov	r2, r4
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	f7ff ff1a 	bl	800c1e4 <__multiply>
 800c3b0:	4639      	mov	r1, r7
 800c3b2:	4680      	mov	r8, r0
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f7ff fe47 	bl	800c048 <_Bfree>
 800c3ba:	4647      	mov	r7, r8
 800c3bc:	106d      	asrs	r5, r5, #1
 800c3be:	d00b      	beq.n	800c3d8 <__pow5mult+0xa0>
 800c3c0:	6820      	ldr	r0, [r4, #0]
 800c3c2:	b938      	cbnz	r0, 800c3d4 <__pow5mult+0x9c>
 800c3c4:	4622      	mov	r2, r4
 800c3c6:	4621      	mov	r1, r4
 800c3c8:	4630      	mov	r0, r6
 800c3ca:	f7ff ff0b 	bl	800c1e4 <__multiply>
 800c3ce:	6020      	str	r0, [r4, #0]
 800c3d0:	f8c0 9000 	str.w	r9, [r0]
 800c3d4:	4604      	mov	r4, r0
 800c3d6:	e7e4      	b.n	800c3a2 <__pow5mult+0x6a>
 800c3d8:	4638      	mov	r0, r7
 800c3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3de:	bf00      	nop
 800c3e0:	08026388 	.word	0x08026388
 800c3e4:	08025f2c 	.word	0x08025f2c
 800c3e8:	08026238 	.word	0x08026238

0800c3ec <__lshift>:
 800c3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3f0:	460c      	mov	r4, r1
 800c3f2:	6849      	ldr	r1, [r1, #4]
 800c3f4:	6923      	ldr	r3, [r4, #16]
 800c3f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3fa:	68a3      	ldr	r3, [r4, #8]
 800c3fc:	4607      	mov	r7, r0
 800c3fe:	4691      	mov	r9, r2
 800c400:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c404:	f108 0601 	add.w	r6, r8, #1
 800c408:	42b3      	cmp	r3, r6
 800c40a:	db0b      	blt.n	800c424 <__lshift+0x38>
 800c40c:	4638      	mov	r0, r7
 800c40e:	f7ff fddb 	bl	800bfc8 <_Balloc>
 800c412:	4605      	mov	r5, r0
 800c414:	b948      	cbnz	r0, 800c42a <__lshift+0x3e>
 800c416:	4602      	mov	r2, r0
 800c418:	4b2a      	ldr	r3, [pc, #168]	; (800c4c4 <__lshift+0xd8>)
 800c41a:	482b      	ldr	r0, [pc, #172]	; (800c4c8 <__lshift+0xdc>)
 800c41c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c420:	f7fe fd08 	bl	800ae34 <__assert_func>
 800c424:	3101      	adds	r1, #1
 800c426:	005b      	lsls	r3, r3, #1
 800c428:	e7ee      	b.n	800c408 <__lshift+0x1c>
 800c42a:	2300      	movs	r3, #0
 800c42c:	f100 0114 	add.w	r1, r0, #20
 800c430:	f100 0210 	add.w	r2, r0, #16
 800c434:	4618      	mov	r0, r3
 800c436:	4553      	cmp	r3, sl
 800c438:	db37      	blt.n	800c4aa <__lshift+0xbe>
 800c43a:	6920      	ldr	r0, [r4, #16]
 800c43c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c440:	f104 0314 	add.w	r3, r4, #20
 800c444:	f019 091f 	ands.w	r9, r9, #31
 800c448:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c44c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c450:	d02f      	beq.n	800c4b2 <__lshift+0xc6>
 800c452:	f1c9 0e20 	rsb	lr, r9, #32
 800c456:	468a      	mov	sl, r1
 800c458:	f04f 0c00 	mov.w	ip, #0
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	fa02 f209 	lsl.w	r2, r2, r9
 800c462:	ea42 020c 	orr.w	r2, r2, ip
 800c466:	f84a 2b04 	str.w	r2, [sl], #4
 800c46a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c46e:	4298      	cmp	r0, r3
 800c470:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c474:	d8f2      	bhi.n	800c45c <__lshift+0x70>
 800c476:	1b03      	subs	r3, r0, r4
 800c478:	3b15      	subs	r3, #21
 800c47a:	f023 0303 	bic.w	r3, r3, #3
 800c47e:	3304      	adds	r3, #4
 800c480:	f104 0215 	add.w	r2, r4, #21
 800c484:	4290      	cmp	r0, r2
 800c486:	bf38      	it	cc
 800c488:	2304      	movcc	r3, #4
 800c48a:	f841 c003 	str.w	ip, [r1, r3]
 800c48e:	f1bc 0f00 	cmp.w	ip, #0
 800c492:	d001      	beq.n	800c498 <__lshift+0xac>
 800c494:	f108 0602 	add.w	r6, r8, #2
 800c498:	3e01      	subs	r6, #1
 800c49a:	4638      	mov	r0, r7
 800c49c:	612e      	str	r6, [r5, #16]
 800c49e:	4621      	mov	r1, r4
 800c4a0:	f7ff fdd2 	bl	800c048 <_Bfree>
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	e7c1      	b.n	800c436 <__lshift+0x4a>
 800c4b2:	3904      	subs	r1, #4
 800c4b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4bc:	4298      	cmp	r0, r3
 800c4be:	d8f9      	bhi.n	800c4b4 <__lshift+0xc8>
 800c4c0:	e7ea      	b.n	800c498 <__lshift+0xac>
 800c4c2:	bf00      	nop
 800c4c4:	080261c7 	.word	0x080261c7
 800c4c8:	08026238 	.word	0x08026238

0800c4cc <__mcmp>:
 800c4cc:	b530      	push	{r4, r5, lr}
 800c4ce:	6902      	ldr	r2, [r0, #16]
 800c4d0:	690c      	ldr	r4, [r1, #16]
 800c4d2:	1b12      	subs	r2, r2, r4
 800c4d4:	d10e      	bne.n	800c4f4 <__mcmp+0x28>
 800c4d6:	f100 0314 	add.w	r3, r0, #20
 800c4da:	3114      	adds	r1, #20
 800c4dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c4e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c4e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c4e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c4ec:	42a5      	cmp	r5, r4
 800c4ee:	d003      	beq.n	800c4f8 <__mcmp+0x2c>
 800c4f0:	d305      	bcc.n	800c4fe <__mcmp+0x32>
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	4610      	mov	r0, r2
 800c4f6:	bd30      	pop	{r4, r5, pc}
 800c4f8:	4283      	cmp	r3, r0
 800c4fa:	d3f3      	bcc.n	800c4e4 <__mcmp+0x18>
 800c4fc:	e7fa      	b.n	800c4f4 <__mcmp+0x28>
 800c4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c502:	e7f7      	b.n	800c4f4 <__mcmp+0x28>

0800c504 <__mdiff>:
 800c504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c508:	460c      	mov	r4, r1
 800c50a:	4606      	mov	r6, r0
 800c50c:	4611      	mov	r1, r2
 800c50e:	4620      	mov	r0, r4
 800c510:	4690      	mov	r8, r2
 800c512:	f7ff ffdb 	bl	800c4cc <__mcmp>
 800c516:	1e05      	subs	r5, r0, #0
 800c518:	d110      	bne.n	800c53c <__mdiff+0x38>
 800c51a:	4629      	mov	r1, r5
 800c51c:	4630      	mov	r0, r6
 800c51e:	f7ff fd53 	bl	800bfc8 <_Balloc>
 800c522:	b930      	cbnz	r0, 800c532 <__mdiff+0x2e>
 800c524:	4b3a      	ldr	r3, [pc, #232]	; (800c610 <__mdiff+0x10c>)
 800c526:	4602      	mov	r2, r0
 800c528:	f240 2132 	movw	r1, #562	; 0x232
 800c52c:	4839      	ldr	r0, [pc, #228]	; (800c614 <__mdiff+0x110>)
 800c52e:	f7fe fc81 	bl	800ae34 <__assert_func>
 800c532:	2301      	movs	r3, #1
 800c534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c53c:	bfa4      	itt	ge
 800c53e:	4643      	movge	r3, r8
 800c540:	46a0      	movge	r8, r4
 800c542:	4630      	mov	r0, r6
 800c544:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c548:	bfa6      	itte	ge
 800c54a:	461c      	movge	r4, r3
 800c54c:	2500      	movge	r5, #0
 800c54e:	2501      	movlt	r5, #1
 800c550:	f7ff fd3a 	bl	800bfc8 <_Balloc>
 800c554:	b920      	cbnz	r0, 800c560 <__mdiff+0x5c>
 800c556:	4b2e      	ldr	r3, [pc, #184]	; (800c610 <__mdiff+0x10c>)
 800c558:	4602      	mov	r2, r0
 800c55a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c55e:	e7e5      	b.n	800c52c <__mdiff+0x28>
 800c560:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c564:	6926      	ldr	r6, [r4, #16]
 800c566:	60c5      	str	r5, [r0, #12]
 800c568:	f104 0914 	add.w	r9, r4, #20
 800c56c:	f108 0514 	add.w	r5, r8, #20
 800c570:	f100 0e14 	add.w	lr, r0, #20
 800c574:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c578:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c57c:	f108 0210 	add.w	r2, r8, #16
 800c580:	46f2      	mov	sl, lr
 800c582:	2100      	movs	r1, #0
 800c584:	f859 3b04 	ldr.w	r3, [r9], #4
 800c588:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c58c:	fa1f f883 	uxth.w	r8, r3
 800c590:	fa11 f18b 	uxtah	r1, r1, fp
 800c594:	0c1b      	lsrs	r3, r3, #16
 800c596:	eba1 0808 	sub.w	r8, r1, r8
 800c59a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c59e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5a2:	fa1f f888 	uxth.w	r8, r8
 800c5a6:	1419      	asrs	r1, r3, #16
 800c5a8:	454e      	cmp	r6, r9
 800c5aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5ae:	f84a 3b04 	str.w	r3, [sl], #4
 800c5b2:	d8e7      	bhi.n	800c584 <__mdiff+0x80>
 800c5b4:	1b33      	subs	r3, r6, r4
 800c5b6:	3b15      	subs	r3, #21
 800c5b8:	f023 0303 	bic.w	r3, r3, #3
 800c5bc:	3304      	adds	r3, #4
 800c5be:	3415      	adds	r4, #21
 800c5c0:	42a6      	cmp	r6, r4
 800c5c2:	bf38      	it	cc
 800c5c4:	2304      	movcc	r3, #4
 800c5c6:	441d      	add	r5, r3
 800c5c8:	4473      	add	r3, lr
 800c5ca:	469e      	mov	lr, r3
 800c5cc:	462e      	mov	r6, r5
 800c5ce:	4566      	cmp	r6, ip
 800c5d0:	d30e      	bcc.n	800c5f0 <__mdiff+0xec>
 800c5d2:	f10c 0203 	add.w	r2, ip, #3
 800c5d6:	1b52      	subs	r2, r2, r5
 800c5d8:	f022 0203 	bic.w	r2, r2, #3
 800c5dc:	3d03      	subs	r5, #3
 800c5de:	45ac      	cmp	ip, r5
 800c5e0:	bf38      	it	cc
 800c5e2:	2200      	movcc	r2, #0
 800c5e4:	441a      	add	r2, r3
 800c5e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c5ea:	b17b      	cbz	r3, 800c60c <__mdiff+0x108>
 800c5ec:	6107      	str	r7, [r0, #16]
 800c5ee:	e7a3      	b.n	800c538 <__mdiff+0x34>
 800c5f0:	f856 8b04 	ldr.w	r8, [r6], #4
 800c5f4:	fa11 f288 	uxtah	r2, r1, r8
 800c5f8:	1414      	asrs	r4, r2, #16
 800c5fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c5fe:	b292      	uxth	r2, r2
 800c600:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c604:	f84e 2b04 	str.w	r2, [lr], #4
 800c608:	1421      	asrs	r1, r4, #16
 800c60a:	e7e0      	b.n	800c5ce <__mdiff+0xca>
 800c60c:	3f01      	subs	r7, #1
 800c60e:	e7ea      	b.n	800c5e6 <__mdiff+0xe2>
 800c610:	080261c7 	.word	0x080261c7
 800c614:	08026238 	.word	0x08026238

0800c618 <__d2b>:
 800c618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c61c:	4689      	mov	r9, r1
 800c61e:	2101      	movs	r1, #1
 800c620:	ec57 6b10 	vmov	r6, r7, d0
 800c624:	4690      	mov	r8, r2
 800c626:	f7ff fccf 	bl	800bfc8 <_Balloc>
 800c62a:	4604      	mov	r4, r0
 800c62c:	b930      	cbnz	r0, 800c63c <__d2b+0x24>
 800c62e:	4602      	mov	r2, r0
 800c630:	4b25      	ldr	r3, [pc, #148]	; (800c6c8 <__d2b+0xb0>)
 800c632:	4826      	ldr	r0, [pc, #152]	; (800c6cc <__d2b+0xb4>)
 800c634:	f240 310a 	movw	r1, #778	; 0x30a
 800c638:	f7fe fbfc 	bl	800ae34 <__assert_func>
 800c63c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c644:	bb35      	cbnz	r5, 800c694 <__d2b+0x7c>
 800c646:	2e00      	cmp	r6, #0
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	d028      	beq.n	800c69e <__d2b+0x86>
 800c64c:	4668      	mov	r0, sp
 800c64e:	9600      	str	r6, [sp, #0]
 800c650:	f7ff fd82 	bl	800c158 <__lo0bits>
 800c654:	9900      	ldr	r1, [sp, #0]
 800c656:	b300      	cbz	r0, 800c69a <__d2b+0x82>
 800c658:	9a01      	ldr	r2, [sp, #4]
 800c65a:	f1c0 0320 	rsb	r3, r0, #32
 800c65e:	fa02 f303 	lsl.w	r3, r2, r3
 800c662:	430b      	orrs	r3, r1
 800c664:	40c2      	lsrs	r2, r0
 800c666:	6163      	str	r3, [r4, #20]
 800c668:	9201      	str	r2, [sp, #4]
 800c66a:	9b01      	ldr	r3, [sp, #4]
 800c66c:	61a3      	str	r3, [r4, #24]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	bf14      	ite	ne
 800c672:	2202      	movne	r2, #2
 800c674:	2201      	moveq	r2, #1
 800c676:	6122      	str	r2, [r4, #16]
 800c678:	b1d5      	cbz	r5, 800c6b0 <__d2b+0x98>
 800c67a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c67e:	4405      	add	r5, r0
 800c680:	f8c9 5000 	str.w	r5, [r9]
 800c684:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c688:	f8c8 0000 	str.w	r0, [r8]
 800c68c:	4620      	mov	r0, r4
 800c68e:	b003      	add	sp, #12
 800c690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c698:	e7d5      	b.n	800c646 <__d2b+0x2e>
 800c69a:	6161      	str	r1, [r4, #20]
 800c69c:	e7e5      	b.n	800c66a <__d2b+0x52>
 800c69e:	a801      	add	r0, sp, #4
 800c6a0:	f7ff fd5a 	bl	800c158 <__lo0bits>
 800c6a4:	9b01      	ldr	r3, [sp, #4]
 800c6a6:	6163      	str	r3, [r4, #20]
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	6122      	str	r2, [r4, #16]
 800c6ac:	3020      	adds	r0, #32
 800c6ae:	e7e3      	b.n	800c678 <__d2b+0x60>
 800c6b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c6b8:	f8c9 0000 	str.w	r0, [r9]
 800c6bc:	6918      	ldr	r0, [r3, #16]
 800c6be:	f7ff fd2b 	bl	800c118 <__hi0bits>
 800c6c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6c6:	e7df      	b.n	800c688 <__d2b+0x70>
 800c6c8:	080261c7 	.word	0x080261c7
 800c6cc:	08026238 	.word	0x08026238

0800c6d0 <_calloc_r>:
 800c6d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6d2:	fba1 2402 	umull	r2, r4, r1, r2
 800c6d6:	b94c      	cbnz	r4, 800c6ec <_calloc_r+0x1c>
 800c6d8:	4611      	mov	r1, r2
 800c6da:	9201      	str	r2, [sp, #4]
 800c6dc:	f7fd fbd2 	bl	8009e84 <_malloc_r>
 800c6e0:	9a01      	ldr	r2, [sp, #4]
 800c6e2:	4605      	mov	r5, r0
 800c6e4:	b930      	cbnz	r0, 800c6f4 <_calloc_r+0x24>
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	b003      	add	sp, #12
 800c6ea:	bd30      	pop	{r4, r5, pc}
 800c6ec:	220c      	movs	r2, #12
 800c6ee:	6002      	str	r2, [r0, #0]
 800c6f0:	2500      	movs	r5, #0
 800c6f2:	e7f8      	b.n	800c6e6 <_calloc_r+0x16>
 800c6f4:	4621      	mov	r1, r4
 800c6f6:	f7fd fb51 	bl	8009d9c <memset>
 800c6fa:	e7f4      	b.n	800c6e6 <_calloc_r+0x16>

0800c6fc <__ssputs_r>:
 800c6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c700:	688e      	ldr	r6, [r1, #8]
 800c702:	429e      	cmp	r6, r3
 800c704:	4682      	mov	sl, r0
 800c706:	460c      	mov	r4, r1
 800c708:	4690      	mov	r8, r2
 800c70a:	461f      	mov	r7, r3
 800c70c:	d838      	bhi.n	800c780 <__ssputs_r+0x84>
 800c70e:	898a      	ldrh	r2, [r1, #12]
 800c710:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c714:	d032      	beq.n	800c77c <__ssputs_r+0x80>
 800c716:	6825      	ldr	r5, [r4, #0]
 800c718:	6909      	ldr	r1, [r1, #16]
 800c71a:	eba5 0901 	sub.w	r9, r5, r1
 800c71e:	6965      	ldr	r5, [r4, #20]
 800c720:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c728:	3301      	adds	r3, #1
 800c72a:	444b      	add	r3, r9
 800c72c:	106d      	asrs	r5, r5, #1
 800c72e:	429d      	cmp	r5, r3
 800c730:	bf38      	it	cc
 800c732:	461d      	movcc	r5, r3
 800c734:	0553      	lsls	r3, r2, #21
 800c736:	d531      	bpl.n	800c79c <__ssputs_r+0xa0>
 800c738:	4629      	mov	r1, r5
 800c73a:	f7fd fba3 	bl	8009e84 <_malloc_r>
 800c73e:	4606      	mov	r6, r0
 800c740:	b950      	cbnz	r0, 800c758 <__ssputs_r+0x5c>
 800c742:	230c      	movs	r3, #12
 800c744:	f8ca 3000 	str.w	r3, [sl]
 800c748:	89a3      	ldrh	r3, [r4, #12]
 800c74a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c74e:	81a3      	strh	r3, [r4, #12]
 800c750:	f04f 30ff 	mov.w	r0, #4294967295
 800c754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c758:	6921      	ldr	r1, [r4, #16]
 800c75a:	464a      	mov	r2, r9
 800c75c:	f7ff fc19 	bl	800bf92 <memcpy>
 800c760:	89a3      	ldrh	r3, [r4, #12]
 800c762:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c76a:	81a3      	strh	r3, [r4, #12]
 800c76c:	6126      	str	r6, [r4, #16]
 800c76e:	6165      	str	r5, [r4, #20]
 800c770:	444e      	add	r6, r9
 800c772:	eba5 0509 	sub.w	r5, r5, r9
 800c776:	6026      	str	r6, [r4, #0]
 800c778:	60a5      	str	r5, [r4, #8]
 800c77a:	463e      	mov	r6, r7
 800c77c:	42be      	cmp	r6, r7
 800c77e:	d900      	bls.n	800c782 <__ssputs_r+0x86>
 800c780:	463e      	mov	r6, r7
 800c782:	6820      	ldr	r0, [r4, #0]
 800c784:	4632      	mov	r2, r6
 800c786:	4641      	mov	r1, r8
 800c788:	f000 fddc 	bl	800d344 <memmove>
 800c78c:	68a3      	ldr	r3, [r4, #8]
 800c78e:	1b9b      	subs	r3, r3, r6
 800c790:	60a3      	str	r3, [r4, #8]
 800c792:	6823      	ldr	r3, [r4, #0]
 800c794:	4433      	add	r3, r6
 800c796:	6023      	str	r3, [r4, #0]
 800c798:	2000      	movs	r0, #0
 800c79a:	e7db      	b.n	800c754 <__ssputs_r+0x58>
 800c79c:	462a      	mov	r2, r5
 800c79e:	f000 fdeb 	bl	800d378 <_realloc_r>
 800c7a2:	4606      	mov	r6, r0
 800c7a4:	2800      	cmp	r0, #0
 800c7a6:	d1e1      	bne.n	800c76c <__ssputs_r+0x70>
 800c7a8:	6921      	ldr	r1, [r4, #16]
 800c7aa:	4650      	mov	r0, sl
 800c7ac:	f7fd fafe 	bl	8009dac <_free_r>
 800c7b0:	e7c7      	b.n	800c742 <__ssputs_r+0x46>
	...

0800c7b4 <_svfiprintf_r>:
 800c7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b8:	4698      	mov	r8, r3
 800c7ba:	898b      	ldrh	r3, [r1, #12]
 800c7bc:	061b      	lsls	r3, r3, #24
 800c7be:	b09d      	sub	sp, #116	; 0x74
 800c7c0:	4607      	mov	r7, r0
 800c7c2:	460d      	mov	r5, r1
 800c7c4:	4614      	mov	r4, r2
 800c7c6:	d50e      	bpl.n	800c7e6 <_svfiprintf_r+0x32>
 800c7c8:	690b      	ldr	r3, [r1, #16]
 800c7ca:	b963      	cbnz	r3, 800c7e6 <_svfiprintf_r+0x32>
 800c7cc:	2140      	movs	r1, #64	; 0x40
 800c7ce:	f7fd fb59 	bl	8009e84 <_malloc_r>
 800c7d2:	6028      	str	r0, [r5, #0]
 800c7d4:	6128      	str	r0, [r5, #16]
 800c7d6:	b920      	cbnz	r0, 800c7e2 <_svfiprintf_r+0x2e>
 800c7d8:	230c      	movs	r3, #12
 800c7da:	603b      	str	r3, [r7, #0]
 800c7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e0:	e0d1      	b.n	800c986 <_svfiprintf_r+0x1d2>
 800c7e2:	2340      	movs	r3, #64	; 0x40
 800c7e4:	616b      	str	r3, [r5, #20]
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c7ea:	2320      	movs	r3, #32
 800c7ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7f4:	2330      	movs	r3, #48	; 0x30
 800c7f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c9a0 <_svfiprintf_r+0x1ec>
 800c7fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7fe:	f04f 0901 	mov.w	r9, #1
 800c802:	4623      	mov	r3, r4
 800c804:	469a      	mov	sl, r3
 800c806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c80a:	b10a      	cbz	r2, 800c810 <_svfiprintf_r+0x5c>
 800c80c:	2a25      	cmp	r2, #37	; 0x25
 800c80e:	d1f9      	bne.n	800c804 <_svfiprintf_r+0x50>
 800c810:	ebba 0b04 	subs.w	fp, sl, r4
 800c814:	d00b      	beq.n	800c82e <_svfiprintf_r+0x7a>
 800c816:	465b      	mov	r3, fp
 800c818:	4622      	mov	r2, r4
 800c81a:	4629      	mov	r1, r5
 800c81c:	4638      	mov	r0, r7
 800c81e:	f7ff ff6d 	bl	800c6fc <__ssputs_r>
 800c822:	3001      	adds	r0, #1
 800c824:	f000 80aa 	beq.w	800c97c <_svfiprintf_r+0x1c8>
 800c828:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c82a:	445a      	add	r2, fp
 800c82c:	9209      	str	r2, [sp, #36]	; 0x24
 800c82e:	f89a 3000 	ldrb.w	r3, [sl]
 800c832:	2b00      	cmp	r3, #0
 800c834:	f000 80a2 	beq.w	800c97c <_svfiprintf_r+0x1c8>
 800c838:	2300      	movs	r3, #0
 800c83a:	f04f 32ff 	mov.w	r2, #4294967295
 800c83e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c842:	f10a 0a01 	add.w	sl, sl, #1
 800c846:	9304      	str	r3, [sp, #16]
 800c848:	9307      	str	r3, [sp, #28]
 800c84a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c84e:	931a      	str	r3, [sp, #104]	; 0x68
 800c850:	4654      	mov	r4, sl
 800c852:	2205      	movs	r2, #5
 800c854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c858:	4851      	ldr	r0, [pc, #324]	; (800c9a0 <_svfiprintf_r+0x1ec>)
 800c85a:	f7f3 fd31 	bl	80002c0 <memchr>
 800c85e:	9a04      	ldr	r2, [sp, #16]
 800c860:	b9d8      	cbnz	r0, 800c89a <_svfiprintf_r+0xe6>
 800c862:	06d0      	lsls	r0, r2, #27
 800c864:	bf44      	itt	mi
 800c866:	2320      	movmi	r3, #32
 800c868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c86c:	0711      	lsls	r1, r2, #28
 800c86e:	bf44      	itt	mi
 800c870:	232b      	movmi	r3, #43	; 0x2b
 800c872:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c876:	f89a 3000 	ldrb.w	r3, [sl]
 800c87a:	2b2a      	cmp	r3, #42	; 0x2a
 800c87c:	d015      	beq.n	800c8aa <_svfiprintf_r+0xf6>
 800c87e:	9a07      	ldr	r2, [sp, #28]
 800c880:	4654      	mov	r4, sl
 800c882:	2000      	movs	r0, #0
 800c884:	f04f 0c0a 	mov.w	ip, #10
 800c888:	4621      	mov	r1, r4
 800c88a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c88e:	3b30      	subs	r3, #48	; 0x30
 800c890:	2b09      	cmp	r3, #9
 800c892:	d94e      	bls.n	800c932 <_svfiprintf_r+0x17e>
 800c894:	b1b0      	cbz	r0, 800c8c4 <_svfiprintf_r+0x110>
 800c896:	9207      	str	r2, [sp, #28]
 800c898:	e014      	b.n	800c8c4 <_svfiprintf_r+0x110>
 800c89a:	eba0 0308 	sub.w	r3, r0, r8
 800c89e:	fa09 f303 	lsl.w	r3, r9, r3
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	46a2      	mov	sl, r4
 800c8a8:	e7d2      	b.n	800c850 <_svfiprintf_r+0x9c>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	1d19      	adds	r1, r3, #4
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	9103      	str	r1, [sp, #12]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	bfbb      	ittet	lt
 800c8b6:	425b      	neglt	r3, r3
 800c8b8:	f042 0202 	orrlt.w	r2, r2, #2
 800c8bc:	9307      	strge	r3, [sp, #28]
 800c8be:	9307      	strlt	r3, [sp, #28]
 800c8c0:	bfb8      	it	lt
 800c8c2:	9204      	strlt	r2, [sp, #16]
 800c8c4:	7823      	ldrb	r3, [r4, #0]
 800c8c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c8c8:	d10c      	bne.n	800c8e4 <_svfiprintf_r+0x130>
 800c8ca:	7863      	ldrb	r3, [r4, #1]
 800c8cc:	2b2a      	cmp	r3, #42	; 0x2a
 800c8ce:	d135      	bne.n	800c93c <_svfiprintf_r+0x188>
 800c8d0:	9b03      	ldr	r3, [sp, #12]
 800c8d2:	1d1a      	adds	r2, r3, #4
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	9203      	str	r2, [sp, #12]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	bfb8      	it	lt
 800c8dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8e0:	3402      	adds	r4, #2
 800c8e2:	9305      	str	r3, [sp, #20]
 800c8e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c9b0 <_svfiprintf_r+0x1fc>
 800c8e8:	7821      	ldrb	r1, [r4, #0]
 800c8ea:	2203      	movs	r2, #3
 800c8ec:	4650      	mov	r0, sl
 800c8ee:	f7f3 fce7 	bl	80002c0 <memchr>
 800c8f2:	b140      	cbz	r0, 800c906 <_svfiprintf_r+0x152>
 800c8f4:	2340      	movs	r3, #64	; 0x40
 800c8f6:	eba0 000a 	sub.w	r0, r0, sl
 800c8fa:	fa03 f000 	lsl.w	r0, r3, r0
 800c8fe:	9b04      	ldr	r3, [sp, #16]
 800c900:	4303      	orrs	r3, r0
 800c902:	3401      	adds	r4, #1
 800c904:	9304      	str	r3, [sp, #16]
 800c906:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c90a:	4826      	ldr	r0, [pc, #152]	; (800c9a4 <_svfiprintf_r+0x1f0>)
 800c90c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c910:	2206      	movs	r2, #6
 800c912:	f7f3 fcd5 	bl	80002c0 <memchr>
 800c916:	2800      	cmp	r0, #0
 800c918:	d038      	beq.n	800c98c <_svfiprintf_r+0x1d8>
 800c91a:	4b23      	ldr	r3, [pc, #140]	; (800c9a8 <_svfiprintf_r+0x1f4>)
 800c91c:	bb1b      	cbnz	r3, 800c966 <_svfiprintf_r+0x1b2>
 800c91e:	9b03      	ldr	r3, [sp, #12]
 800c920:	3307      	adds	r3, #7
 800c922:	f023 0307 	bic.w	r3, r3, #7
 800c926:	3308      	adds	r3, #8
 800c928:	9303      	str	r3, [sp, #12]
 800c92a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c92c:	4433      	add	r3, r6
 800c92e:	9309      	str	r3, [sp, #36]	; 0x24
 800c930:	e767      	b.n	800c802 <_svfiprintf_r+0x4e>
 800c932:	fb0c 3202 	mla	r2, ip, r2, r3
 800c936:	460c      	mov	r4, r1
 800c938:	2001      	movs	r0, #1
 800c93a:	e7a5      	b.n	800c888 <_svfiprintf_r+0xd4>
 800c93c:	2300      	movs	r3, #0
 800c93e:	3401      	adds	r4, #1
 800c940:	9305      	str	r3, [sp, #20]
 800c942:	4619      	mov	r1, r3
 800c944:	f04f 0c0a 	mov.w	ip, #10
 800c948:	4620      	mov	r0, r4
 800c94a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c94e:	3a30      	subs	r2, #48	; 0x30
 800c950:	2a09      	cmp	r2, #9
 800c952:	d903      	bls.n	800c95c <_svfiprintf_r+0x1a8>
 800c954:	2b00      	cmp	r3, #0
 800c956:	d0c5      	beq.n	800c8e4 <_svfiprintf_r+0x130>
 800c958:	9105      	str	r1, [sp, #20]
 800c95a:	e7c3      	b.n	800c8e4 <_svfiprintf_r+0x130>
 800c95c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c960:	4604      	mov	r4, r0
 800c962:	2301      	movs	r3, #1
 800c964:	e7f0      	b.n	800c948 <_svfiprintf_r+0x194>
 800c966:	ab03      	add	r3, sp, #12
 800c968:	9300      	str	r3, [sp, #0]
 800c96a:	462a      	mov	r2, r5
 800c96c:	4b0f      	ldr	r3, [pc, #60]	; (800c9ac <_svfiprintf_r+0x1f8>)
 800c96e:	a904      	add	r1, sp, #16
 800c970:	4638      	mov	r0, r7
 800c972:	f7fd fb9b 	bl	800a0ac <_printf_float>
 800c976:	1c42      	adds	r2, r0, #1
 800c978:	4606      	mov	r6, r0
 800c97a:	d1d6      	bne.n	800c92a <_svfiprintf_r+0x176>
 800c97c:	89ab      	ldrh	r3, [r5, #12]
 800c97e:	065b      	lsls	r3, r3, #25
 800c980:	f53f af2c 	bmi.w	800c7dc <_svfiprintf_r+0x28>
 800c984:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c986:	b01d      	add	sp, #116	; 0x74
 800c988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98c:	ab03      	add	r3, sp, #12
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	462a      	mov	r2, r5
 800c992:	4b06      	ldr	r3, [pc, #24]	; (800c9ac <_svfiprintf_r+0x1f8>)
 800c994:	a904      	add	r1, sp, #16
 800c996:	4638      	mov	r0, r7
 800c998:	f7fd fe2c 	bl	800a5f4 <_printf_i>
 800c99c:	e7eb      	b.n	800c976 <_svfiprintf_r+0x1c2>
 800c99e:	bf00      	nop
 800c9a0:	08026394 	.word	0x08026394
 800c9a4:	0802639e 	.word	0x0802639e
 800c9a8:	0800a0ad 	.word	0x0800a0ad
 800c9ac:	0800c6fd 	.word	0x0800c6fd
 800c9b0:	0802639a 	.word	0x0802639a

0800c9b4 <__sfputc_r>:
 800c9b4:	6893      	ldr	r3, [r2, #8]
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	b410      	push	{r4}
 800c9bc:	6093      	str	r3, [r2, #8]
 800c9be:	da08      	bge.n	800c9d2 <__sfputc_r+0x1e>
 800c9c0:	6994      	ldr	r4, [r2, #24]
 800c9c2:	42a3      	cmp	r3, r4
 800c9c4:	db01      	blt.n	800c9ca <__sfputc_r+0x16>
 800c9c6:	290a      	cmp	r1, #10
 800c9c8:	d103      	bne.n	800c9d2 <__sfputc_r+0x1e>
 800c9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9ce:	f000 ba77 	b.w	800cec0 <__swbuf_r>
 800c9d2:	6813      	ldr	r3, [r2, #0]
 800c9d4:	1c58      	adds	r0, r3, #1
 800c9d6:	6010      	str	r0, [r2, #0]
 800c9d8:	7019      	strb	r1, [r3, #0]
 800c9da:	4608      	mov	r0, r1
 800c9dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9e0:	4770      	bx	lr

0800c9e2 <__sfputs_r>:
 800c9e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9e4:	4606      	mov	r6, r0
 800c9e6:	460f      	mov	r7, r1
 800c9e8:	4614      	mov	r4, r2
 800c9ea:	18d5      	adds	r5, r2, r3
 800c9ec:	42ac      	cmp	r4, r5
 800c9ee:	d101      	bne.n	800c9f4 <__sfputs_r+0x12>
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	e007      	b.n	800ca04 <__sfputs_r+0x22>
 800c9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f8:	463a      	mov	r2, r7
 800c9fa:	4630      	mov	r0, r6
 800c9fc:	f7ff ffda 	bl	800c9b4 <__sfputc_r>
 800ca00:	1c43      	adds	r3, r0, #1
 800ca02:	d1f3      	bne.n	800c9ec <__sfputs_r+0xa>
 800ca04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca08 <_vfiprintf_r>:
 800ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0c:	460d      	mov	r5, r1
 800ca0e:	b09d      	sub	sp, #116	; 0x74
 800ca10:	4614      	mov	r4, r2
 800ca12:	4698      	mov	r8, r3
 800ca14:	4606      	mov	r6, r0
 800ca16:	b118      	cbz	r0, 800ca20 <_vfiprintf_r+0x18>
 800ca18:	6983      	ldr	r3, [r0, #24]
 800ca1a:	b90b      	cbnz	r3, 800ca20 <_vfiprintf_r+0x18>
 800ca1c:	f7ff f8fa 	bl	800bc14 <__sinit>
 800ca20:	4b89      	ldr	r3, [pc, #548]	; (800cc48 <_vfiprintf_r+0x240>)
 800ca22:	429d      	cmp	r5, r3
 800ca24:	d11b      	bne.n	800ca5e <_vfiprintf_r+0x56>
 800ca26:	6875      	ldr	r5, [r6, #4]
 800ca28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca2a:	07d9      	lsls	r1, r3, #31
 800ca2c:	d405      	bmi.n	800ca3a <_vfiprintf_r+0x32>
 800ca2e:	89ab      	ldrh	r3, [r5, #12]
 800ca30:	059a      	lsls	r2, r3, #22
 800ca32:	d402      	bmi.n	800ca3a <_vfiprintf_r+0x32>
 800ca34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca36:	f7ff faa9 	bl	800bf8c <__retarget_lock_acquire_recursive>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	071b      	lsls	r3, r3, #28
 800ca3e:	d501      	bpl.n	800ca44 <_vfiprintf_r+0x3c>
 800ca40:	692b      	ldr	r3, [r5, #16]
 800ca42:	b9eb      	cbnz	r3, 800ca80 <_vfiprintf_r+0x78>
 800ca44:	4629      	mov	r1, r5
 800ca46:	4630      	mov	r0, r6
 800ca48:	f000 fa9e 	bl	800cf88 <__swsetup_r>
 800ca4c:	b1c0      	cbz	r0, 800ca80 <_vfiprintf_r+0x78>
 800ca4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca50:	07dc      	lsls	r4, r3, #31
 800ca52:	d50e      	bpl.n	800ca72 <_vfiprintf_r+0x6a>
 800ca54:	f04f 30ff 	mov.w	r0, #4294967295
 800ca58:	b01d      	add	sp, #116	; 0x74
 800ca5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5e:	4b7b      	ldr	r3, [pc, #492]	; (800cc4c <_vfiprintf_r+0x244>)
 800ca60:	429d      	cmp	r5, r3
 800ca62:	d101      	bne.n	800ca68 <_vfiprintf_r+0x60>
 800ca64:	68b5      	ldr	r5, [r6, #8]
 800ca66:	e7df      	b.n	800ca28 <_vfiprintf_r+0x20>
 800ca68:	4b79      	ldr	r3, [pc, #484]	; (800cc50 <_vfiprintf_r+0x248>)
 800ca6a:	429d      	cmp	r5, r3
 800ca6c:	bf08      	it	eq
 800ca6e:	68f5      	ldreq	r5, [r6, #12]
 800ca70:	e7da      	b.n	800ca28 <_vfiprintf_r+0x20>
 800ca72:	89ab      	ldrh	r3, [r5, #12]
 800ca74:	0598      	lsls	r0, r3, #22
 800ca76:	d4ed      	bmi.n	800ca54 <_vfiprintf_r+0x4c>
 800ca78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca7a:	f7ff fa89 	bl	800bf90 <__retarget_lock_release_recursive>
 800ca7e:	e7e9      	b.n	800ca54 <_vfiprintf_r+0x4c>
 800ca80:	2300      	movs	r3, #0
 800ca82:	9309      	str	r3, [sp, #36]	; 0x24
 800ca84:	2320      	movs	r3, #32
 800ca86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca8e:	2330      	movs	r3, #48	; 0x30
 800ca90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc54 <_vfiprintf_r+0x24c>
 800ca94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca98:	f04f 0901 	mov.w	r9, #1
 800ca9c:	4623      	mov	r3, r4
 800ca9e:	469a      	mov	sl, r3
 800caa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caa4:	b10a      	cbz	r2, 800caaa <_vfiprintf_r+0xa2>
 800caa6:	2a25      	cmp	r2, #37	; 0x25
 800caa8:	d1f9      	bne.n	800ca9e <_vfiprintf_r+0x96>
 800caaa:	ebba 0b04 	subs.w	fp, sl, r4
 800caae:	d00b      	beq.n	800cac8 <_vfiprintf_r+0xc0>
 800cab0:	465b      	mov	r3, fp
 800cab2:	4622      	mov	r2, r4
 800cab4:	4629      	mov	r1, r5
 800cab6:	4630      	mov	r0, r6
 800cab8:	f7ff ff93 	bl	800c9e2 <__sfputs_r>
 800cabc:	3001      	adds	r0, #1
 800cabe:	f000 80aa 	beq.w	800cc16 <_vfiprintf_r+0x20e>
 800cac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cac4:	445a      	add	r2, fp
 800cac6:	9209      	str	r2, [sp, #36]	; 0x24
 800cac8:	f89a 3000 	ldrb.w	r3, [sl]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f000 80a2 	beq.w	800cc16 <_vfiprintf_r+0x20e>
 800cad2:	2300      	movs	r3, #0
 800cad4:	f04f 32ff 	mov.w	r2, #4294967295
 800cad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cadc:	f10a 0a01 	add.w	sl, sl, #1
 800cae0:	9304      	str	r3, [sp, #16]
 800cae2:	9307      	str	r3, [sp, #28]
 800cae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cae8:	931a      	str	r3, [sp, #104]	; 0x68
 800caea:	4654      	mov	r4, sl
 800caec:	2205      	movs	r2, #5
 800caee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf2:	4858      	ldr	r0, [pc, #352]	; (800cc54 <_vfiprintf_r+0x24c>)
 800caf4:	f7f3 fbe4 	bl	80002c0 <memchr>
 800caf8:	9a04      	ldr	r2, [sp, #16]
 800cafa:	b9d8      	cbnz	r0, 800cb34 <_vfiprintf_r+0x12c>
 800cafc:	06d1      	lsls	r1, r2, #27
 800cafe:	bf44      	itt	mi
 800cb00:	2320      	movmi	r3, #32
 800cb02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb06:	0713      	lsls	r3, r2, #28
 800cb08:	bf44      	itt	mi
 800cb0a:	232b      	movmi	r3, #43	; 0x2b
 800cb0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb10:	f89a 3000 	ldrb.w	r3, [sl]
 800cb14:	2b2a      	cmp	r3, #42	; 0x2a
 800cb16:	d015      	beq.n	800cb44 <_vfiprintf_r+0x13c>
 800cb18:	9a07      	ldr	r2, [sp, #28]
 800cb1a:	4654      	mov	r4, sl
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	f04f 0c0a 	mov.w	ip, #10
 800cb22:	4621      	mov	r1, r4
 800cb24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb28:	3b30      	subs	r3, #48	; 0x30
 800cb2a:	2b09      	cmp	r3, #9
 800cb2c:	d94e      	bls.n	800cbcc <_vfiprintf_r+0x1c4>
 800cb2e:	b1b0      	cbz	r0, 800cb5e <_vfiprintf_r+0x156>
 800cb30:	9207      	str	r2, [sp, #28]
 800cb32:	e014      	b.n	800cb5e <_vfiprintf_r+0x156>
 800cb34:	eba0 0308 	sub.w	r3, r0, r8
 800cb38:	fa09 f303 	lsl.w	r3, r9, r3
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	9304      	str	r3, [sp, #16]
 800cb40:	46a2      	mov	sl, r4
 800cb42:	e7d2      	b.n	800caea <_vfiprintf_r+0xe2>
 800cb44:	9b03      	ldr	r3, [sp, #12]
 800cb46:	1d19      	adds	r1, r3, #4
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	9103      	str	r1, [sp, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	bfbb      	ittet	lt
 800cb50:	425b      	neglt	r3, r3
 800cb52:	f042 0202 	orrlt.w	r2, r2, #2
 800cb56:	9307      	strge	r3, [sp, #28]
 800cb58:	9307      	strlt	r3, [sp, #28]
 800cb5a:	bfb8      	it	lt
 800cb5c:	9204      	strlt	r2, [sp, #16]
 800cb5e:	7823      	ldrb	r3, [r4, #0]
 800cb60:	2b2e      	cmp	r3, #46	; 0x2e
 800cb62:	d10c      	bne.n	800cb7e <_vfiprintf_r+0x176>
 800cb64:	7863      	ldrb	r3, [r4, #1]
 800cb66:	2b2a      	cmp	r3, #42	; 0x2a
 800cb68:	d135      	bne.n	800cbd6 <_vfiprintf_r+0x1ce>
 800cb6a:	9b03      	ldr	r3, [sp, #12]
 800cb6c:	1d1a      	adds	r2, r3, #4
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	9203      	str	r2, [sp, #12]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	bfb8      	it	lt
 800cb76:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb7a:	3402      	adds	r4, #2
 800cb7c:	9305      	str	r3, [sp, #20]
 800cb7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc64 <_vfiprintf_r+0x25c>
 800cb82:	7821      	ldrb	r1, [r4, #0]
 800cb84:	2203      	movs	r2, #3
 800cb86:	4650      	mov	r0, sl
 800cb88:	f7f3 fb9a 	bl	80002c0 <memchr>
 800cb8c:	b140      	cbz	r0, 800cba0 <_vfiprintf_r+0x198>
 800cb8e:	2340      	movs	r3, #64	; 0x40
 800cb90:	eba0 000a 	sub.w	r0, r0, sl
 800cb94:	fa03 f000 	lsl.w	r0, r3, r0
 800cb98:	9b04      	ldr	r3, [sp, #16]
 800cb9a:	4303      	orrs	r3, r0
 800cb9c:	3401      	adds	r4, #1
 800cb9e:	9304      	str	r3, [sp, #16]
 800cba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cba4:	482c      	ldr	r0, [pc, #176]	; (800cc58 <_vfiprintf_r+0x250>)
 800cba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbaa:	2206      	movs	r2, #6
 800cbac:	f7f3 fb88 	bl	80002c0 <memchr>
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d03f      	beq.n	800cc34 <_vfiprintf_r+0x22c>
 800cbb4:	4b29      	ldr	r3, [pc, #164]	; (800cc5c <_vfiprintf_r+0x254>)
 800cbb6:	bb1b      	cbnz	r3, 800cc00 <_vfiprintf_r+0x1f8>
 800cbb8:	9b03      	ldr	r3, [sp, #12]
 800cbba:	3307      	adds	r3, #7
 800cbbc:	f023 0307 	bic.w	r3, r3, #7
 800cbc0:	3308      	adds	r3, #8
 800cbc2:	9303      	str	r3, [sp, #12]
 800cbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc6:	443b      	add	r3, r7
 800cbc8:	9309      	str	r3, [sp, #36]	; 0x24
 800cbca:	e767      	b.n	800ca9c <_vfiprintf_r+0x94>
 800cbcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	2001      	movs	r0, #1
 800cbd4:	e7a5      	b.n	800cb22 <_vfiprintf_r+0x11a>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	3401      	adds	r4, #1
 800cbda:	9305      	str	r3, [sp, #20]
 800cbdc:	4619      	mov	r1, r3
 800cbde:	f04f 0c0a 	mov.w	ip, #10
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbe8:	3a30      	subs	r2, #48	; 0x30
 800cbea:	2a09      	cmp	r2, #9
 800cbec:	d903      	bls.n	800cbf6 <_vfiprintf_r+0x1ee>
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d0c5      	beq.n	800cb7e <_vfiprintf_r+0x176>
 800cbf2:	9105      	str	r1, [sp, #20]
 800cbf4:	e7c3      	b.n	800cb7e <_vfiprintf_r+0x176>
 800cbf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbfa:	4604      	mov	r4, r0
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e7f0      	b.n	800cbe2 <_vfiprintf_r+0x1da>
 800cc00:	ab03      	add	r3, sp, #12
 800cc02:	9300      	str	r3, [sp, #0]
 800cc04:	462a      	mov	r2, r5
 800cc06:	4b16      	ldr	r3, [pc, #88]	; (800cc60 <_vfiprintf_r+0x258>)
 800cc08:	a904      	add	r1, sp, #16
 800cc0a:	4630      	mov	r0, r6
 800cc0c:	f7fd fa4e 	bl	800a0ac <_printf_float>
 800cc10:	4607      	mov	r7, r0
 800cc12:	1c78      	adds	r0, r7, #1
 800cc14:	d1d6      	bne.n	800cbc4 <_vfiprintf_r+0x1bc>
 800cc16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc18:	07d9      	lsls	r1, r3, #31
 800cc1a:	d405      	bmi.n	800cc28 <_vfiprintf_r+0x220>
 800cc1c:	89ab      	ldrh	r3, [r5, #12]
 800cc1e:	059a      	lsls	r2, r3, #22
 800cc20:	d402      	bmi.n	800cc28 <_vfiprintf_r+0x220>
 800cc22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc24:	f7ff f9b4 	bl	800bf90 <__retarget_lock_release_recursive>
 800cc28:	89ab      	ldrh	r3, [r5, #12]
 800cc2a:	065b      	lsls	r3, r3, #25
 800cc2c:	f53f af12 	bmi.w	800ca54 <_vfiprintf_r+0x4c>
 800cc30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc32:	e711      	b.n	800ca58 <_vfiprintf_r+0x50>
 800cc34:	ab03      	add	r3, sp, #12
 800cc36:	9300      	str	r3, [sp, #0]
 800cc38:	462a      	mov	r2, r5
 800cc3a:	4b09      	ldr	r3, [pc, #36]	; (800cc60 <_vfiprintf_r+0x258>)
 800cc3c:	a904      	add	r1, sp, #16
 800cc3e:	4630      	mov	r0, r6
 800cc40:	f7fd fcd8 	bl	800a5f4 <_printf_i>
 800cc44:	e7e4      	b.n	800cc10 <_vfiprintf_r+0x208>
 800cc46:	bf00      	nop
 800cc48:	080261f8 	.word	0x080261f8
 800cc4c:	08026218 	.word	0x08026218
 800cc50:	080261d8 	.word	0x080261d8
 800cc54:	08026394 	.word	0x08026394
 800cc58:	0802639e 	.word	0x0802639e
 800cc5c:	0800a0ad 	.word	0x0800a0ad
 800cc60:	0800c9e3 	.word	0x0800c9e3
 800cc64:	0802639a 	.word	0x0802639a

0800cc68 <siprintf>:
 800cc68:	b40e      	push	{r1, r2, r3}
 800cc6a:	b500      	push	{lr}
 800cc6c:	b09c      	sub	sp, #112	; 0x70
 800cc6e:	ab1d      	add	r3, sp, #116	; 0x74
 800cc70:	9002      	str	r0, [sp, #8]
 800cc72:	9006      	str	r0, [sp, #24]
 800cc74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc78:	4809      	ldr	r0, [pc, #36]	; (800cca0 <siprintf+0x38>)
 800cc7a:	9107      	str	r1, [sp, #28]
 800cc7c:	9104      	str	r1, [sp, #16]
 800cc7e:	4909      	ldr	r1, [pc, #36]	; (800cca4 <siprintf+0x3c>)
 800cc80:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc84:	9105      	str	r1, [sp, #20]
 800cc86:	6800      	ldr	r0, [r0, #0]
 800cc88:	9301      	str	r3, [sp, #4]
 800cc8a:	a902      	add	r1, sp, #8
 800cc8c:	f7ff fd92 	bl	800c7b4 <_svfiprintf_r>
 800cc90:	9b02      	ldr	r3, [sp, #8]
 800cc92:	2200      	movs	r2, #0
 800cc94:	701a      	strb	r2, [r3, #0]
 800cc96:	b01c      	add	sp, #112	; 0x70
 800cc98:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc9c:	b003      	add	sp, #12
 800cc9e:	4770      	bx	lr
 800cca0:	200000cc 	.word	0x200000cc
 800cca4:	ffff0208 	.word	0xffff0208

0800cca8 <siscanf>:
 800cca8:	b40e      	push	{r1, r2, r3}
 800ccaa:	b510      	push	{r4, lr}
 800ccac:	b09f      	sub	sp, #124	; 0x7c
 800ccae:	ac21      	add	r4, sp, #132	; 0x84
 800ccb0:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ccb4:	f854 2b04 	ldr.w	r2, [r4], #4
 800ccb8:	9201      	str	r2, [sp, #4]
 800ccba:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ccbe:	9004      	str	r0, [sp, #16]
 800ccc0:	9008      	str	r0, [sp, #32]
 800ccc2:	f7f3 faf5 	bl	80002b0 <strlen>
 800ccc6:	4b0c      	ldr	r3, [pc, #48]	; (800ccf8 <siscanf+0x50>)
 800ccc8:	9005      	str	r0, [sp, #20]
 800ccca:	9009      	str	r0, [sp, #36]	; 0x24
 800cccc:	930d      	str	r3, [sp, #52]	; 0x34
 800ccce:	480b      	ldr	r0, [pc, #44]	; (800ccfc <siscanf+0x54>)
 800ccd0:	9a01      	ldr	r2, [sp, #4]
 800ccd2:	6800      	ldr	r0, [r0, #0]
 800ccd4:	9403      	str	r4, [sp, #12]
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	9311      	str	r3, [sp, #68]	; 0x44
 800ccda:	9316      	str	r3, [sp, #88]	; 0x58
 800ccdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cce0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cce4:	a904      	add	r1, sp, #16
 800cce6:	4623      	mov	r3, r4
 800cce8:	f000 fbd0 	bl	800d48c <__ssvfiscanf_r>
 800ccec:	b01f      	add	sp, #124	; 0x7c
 800ccee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccf2:	b003      	add	sp, #12
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	0800cd23 	.word	0x0800cd23
 800ccfc:	200000cc 	.word	0x200000cc

0800cd00 <__sread>:
 800cd00:	b510      	push	{r4, lr}
 800cd02:	460c      	mov	r4, r1
 800cd04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd08:	f000 fe8a 	bl	800da20 <_read_r>
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	bfab      	itete	ge
 800cd10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cd12:	89a3      	ldrhlt	r3, [r4, #12]
 800cd14:	181b      	addge	r3, r3, r0
 800cd16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cd1a:	bfac      	ite	ge
 800cd1c:	6563      	strge	r3, [r4, #84]	; 0x54
 800cd1e:	81a3      	strhlt	r3, [r4, #12]
 800cd20:	bd10      	pop	{r4, pc}

0800cd22 <__seofread>:
 800cd22:	2000      	movs	r0, #0
 800cd24:	4770      	bx	lr

0800cd26 <__swrite>:
 800cd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd2a:	461f      	mov	r7, r3
 800cd2c:	898b      	ldrh	r3, [r1, #12]
 800cd2e:	05db      	lsls	r3, r3, #23
 800cd30:	4605      	mov	r5, r0
 800cd32:	460c      	mov	r4, r1
 800cd34:	4616      	mov	r6, r2
 800cd36:	d505      	bpl.n	800cd44 <__swrite+0x1e>
 800cd38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd3c:	2302      	movs	r3, #2
 800cd3e:	2200      	movs	r2, #0
 800cd40:	f000 fa76 	bl	800d230 <_lseek_r>
 800cd44:	89a3      	ldrh	r3, [r4, #12]
 800cd46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd4e:	81a3      	strh	r3, [r4, #12]
 800cd50:	4632      	mov	r2, r6
 800cd52:	463b      	mov	r3, r7
 800cd54:	4628      	mov	r0, r5
 800cd56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5a:	f000 b903 	b.w	800cf64 <_write_r>

0800cd5e <__sseek>:
 800cd5e:	b510      	push	{r4, lr}
 800cd60:	460c      	mov	r4, r1
 800cd62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd66:	f000 fa63 	bl	800d230 <_lseek_r>
 800cd6a:	1c43      	adds	r3, r0, #1
 800cd6c:	89a3      	ldrh	r3, [r4, #12]
 800cd6e:	bf15      	itete	ne
 800cd70:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd7a:	81a3      	strheq	r3, [r4, #12]
 800cd7c:	bf18      	it	ne
 800cd7e:	81a3      	strhne	r3, [r4, #12]
 800cd80:	bd10      	pop	{r4, pc}

0800cd82 <__sclose>:
 800cd82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd86:	f000 b975 	b.w	800d074 <_close_r>

0800cd8a <strcpy>:
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd90:	f803 2b01 	strb.w	r2, [r3], #1
 800cd94:	2a00      	cmp	r2, #0
 800cd96:	d1f9      	bne.n	800cd8c <strcpy+0x2>
 800cd98:	4770      	bx	lr

0800cd9a <strncmp>:
 800cd9a:	b510      	push	{r4, lr}
 800cd9c:	b17a      	cbz	r2, 800cdbe <strncmp+0x24>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	3901      	subs	r1, #1
 800cda2:	1884      	adds	r4, r0, r2
 800cda4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800cda8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800cdac:	4290      	cmp	r0, r2
 800cdae:	d101      	bne.n	800cdb4 <strncmp+0x1a>
 800cdb0:	42a3      	cmp	r3, r4
 800cdb2:	d101      	bne.n	800cdb8 <strncmp+0x1e>
 800cdb4:	1a80      	subs	r0, r0, r2
 800cdb6:	bd10      	pop	{r4, pc}
 800cdb8:	2800      	cmp	r0, #0
 800cdba:	d1f3      	bne.n	800cda4 <strncmp+0xa>
 800cdbc:	e7fa      	b.n	800cdb4 <strncmp+0x1a>
 800cdbe:	4610      	mov	r0, r2
 800cdc0:	e7f9      	b.n	800cdb6 <strncmp+0x1c>
	...

0800cdc4 <_strtoul_l.constprop.0>:
 800cdc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cdc8:	4f36      	ldr	r7, [pc, #216]	; (800cea4 <_strtoul_l.constprop.0+0xe0>)
 800cdca:	4686      	mov	lr, r0
 800cdcc:	460d      	mov	r5, r1
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdd4:	5de6      	ldrb	r6, [r4, r7]
 800cdd6:	f016 0608 	ands.w	r6, r6, #8
 800cdda:	d1f8      	bne.n	800cdce <_strtoul_l.constprop.0+0xa>
 800cddc:	2c2d      	cmp	r4, #45	; 0x2d
 800cdde:	d12f      	bne.n	800ce40 <_strtoul_l.constprop.0+0x7c>
 800cde0:	782c      	ldrb	r4, [r5, #0]
 800cde2:	2601      	movs	r6, #1
 800cde4:	1c85      	adds	r5, r0, #2
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d057      	beq.n	800ce9a <_strtoul_l.constprop.0+0xd6>
 800cdea:	2b10      	cmp	r3, #16
 800cdec:	d109      	bne.n	800ce02 <_strtoul_l.constprop.0+0x3e>
 800cdee:	2c30      	cmp	r4, #48	; 0x30
 800cdf0:	d107      	bne.n	800ce02 <_strtoul_l.constprop.0+0x3e>
 800cdf2:	7828      	ldrb	r0, [r5, #0]
 800cdf4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cdf8:	2858      	cmp	r0, #88	; 0x58
 800cdfa:	d149      	bne.n	800ce90 <_strtoul_l.constprop.0+0xcc>
 800cdfc:	786c      	ldrb	r4, [r5, #1]
 800cdfe:	2310      	movs	r3, #16
 800ce00:	3502      	adds	r5, #2
 800ce02:	f04f 38ff 	mov.w	r8, #4294967295
 800ce06:	2700      	movs	r7, #0
 800ce08:	fbb8 f8f3 	udiv	r8, r8, r3
 800ce0c:	fb03 f908 	mul.w	r9, r3, r8
 800ce10:	ea6f 0909 	mvn.w	r9, r9
 800ce14:	4638      	mov	r0, r7
 800ce16:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ce1a:	f1bc 0f09 	cmp.w	ip, #9
 800ce1e:	d814      	bhi.n	800ce4a <_strtoul_l.constprop.0+0x86>
 800ce20:	4664      	mov	r4, ip
 800ce22:	42a3      	cmp	r3, r4
 800ce24:	dd22      	ble.n	800ce6c <_strtoul_l.constprop.0+0xa8>
 800ce26:	2f00      	cmp	r7, #0
 800ce28:	db1d      	blt.n	800ce66 <_strtoul_l.constprop.0+0xa2>
 800ce2a:	4580      	cmp	r8, r0
 800ce2c:	d31b      	bcc.n	800ce66 <_strtoul_l.constprop.0+0xa2>
 800ce2e:	d101      	bne.n	800ce34 <_strtoul_l.constprop.0+0x70>
 800ce30:	45a1      	cmp	r9, r4
 800ce32:	db18      	blt.n	800ce66 <_strtoul_l.constprop.0+0xa2>
 800ce34:	fb00 4003 	mla	r0, r0, r3, r4
 800ce38:	2701      	movs	r7, #1
 800ce3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce3e:	e7ea      	b.n	800ce16 <_strtoul_l.constprop.0+0x52>
 800ce40:	2c2b      	cmp	r4, #43	; 0x2b
 800ce42:	bf04      	itt	eq
 800ce44:	782c      	ldrbeq	r4, [r5, #0]
 800ce46:	1c85      	addeq	r5, r0, #2
 800ce48:	e7cd      	b.n	800cde6 <_strtoul_l.constprop.0+0x22>
 800ce4a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ce4e:	f1bc 0f19 	cmp.w	ip, #25
 800ce52:	d801      	bhi.n	800ce58 <_strtoul_l.constprop.0+0x94>
 800ce54:	3c37      	subs	r4, #55	; 0x37
 800ce56:	e7e4      	b.n	800ce22 <_strtoul_l.constprop.0+0x5e>
 800ce58:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ce5c:	f1bc 0f19 	cmp.w	ip, #25
 800ce60:	d804      	bhi.n	800ce6c <_strtoul_l.constprop.0+0xa8>
 800ce62:	3c57      	subs	r4, #87	; 0x57
 800ce64:	e7dd      	b.n	800ce22 <_strtoul_l.constprop.0+0x5e>
 800ce66:	f04f 37ff 	mov.w	r7, #4294967295
 800ce6a:	e7e6      	b.n	800ce3a <_strtoul_l.constprop.0+0x76>
 800ce6c:	2f00      	cmp	r7, #0
 800ce6e:	da07      	bge.n	800ce80 <_strtoul_l.constprop.0+0xbc>
 800ce70:	2322      	movs	r3, #34	; 0x22
 800ce72:	f8ce 3000 	str.w	r3, [lr]
 800ce76:	f04f 30ff 	mov.w	r0, #4294967295
 800ce7a:	b932      	cbnz	r2, 800ce8a <_strtoul_l.constprop.0+0xc6>
 800ce7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce80:	b106      	cbz	r6, 800ce84 <_strtoul_l.constprop.0+0xc0>
 800ce82:	4240      	negs	r0, r0
 800ce84:	2a00      	cmp	r2, #0
 800ce86:	d0f9      	beq.n	800ce7c <_strtoul_l.constprop.0+0xb8>
 800ce88:	b107      	cbz	r7, 800ce8c <_strtoul_l.constprop.0+0xc8>
 800ce8a:	1e69      	subs	r1, r5, #1
 800ce8c:	6011      	str	r1, [r2, #0]
 800ce8e:	e7f5      	b.n	800ce7c <_strtoul_l.constprop.0+0xb8>
 800ce90:	2430      	movs	r4, #48	; 0x30
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1b5      	bne.n	800ce02 <_strtoul_l.constprop.0+0x3e>
 800ce96:	2308      	movs	r3, #8
 800ce98:	e7b3      	b.n	800ce02 <_strtoul_l.constprop.0+0x3e>
 800ce9a:	2c30      	cmp	r4, #48	; 0x30
 800ce9c:	d0a9      	beq.n	800cdf2 <_strtoul_l.constprop.0+0x2e>
 800ce9e:	230a      	movs	r3, #10
 800cea0:	e7af      	b.n	800ce02 <_strtoul_l.constprop.0+0x3e>
 800cea2:	bf00      	nop
 800cea4:	080263a6 	.word	0x080263a6

0800cea8 <_strtoul_r>:
 800cea8:	f7ff bf8c 	b.w	800cdc4 <_strtoul_l.constprop.0>

0800ceac <strtoul>:
 800ceac:	4613      	mov	r3, r2
 800ceae:	460a      	mov	r2, r1
 800ceb0:	4601      	mov	r1, r0
 800ceb2:	4802      	ldr	r0, [pc, #8]	; (800cebc <strtoul+0x10>)
 800ceb4:	6800      	ldr	r0, [r0, #0]
 800ceb6:	f7ff bf85 	b.w	800cdc4 <_strtoul_l.constprop.0>
 800ceba:	bf00      	nop
 800cebc:	200000cc 	.word	0x200000cc

0800cec0 <__swbuf_r>:
 800cec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec2:	460e      	mov	r6, r1
 800cec4:	4614      	mov	r4, r2
 800cec6:	4605      	mov	r5, r0
 800cec8:	b118      	cbz	r0, 800ced2 <__swbuf_r+0x12>
 800ceca:	6983      	ldr	r3, [r0, #24]
 800cecc:	b90b      	cbnz	r3, 800ced2 <__swbuf_r+0x12>
 800cece:	f7fe fea1 	bl	800bc14 <__sinit>
 800ced2:	4b21      	ldr	r3, [pc, #132]	; (800cf58 <__swbuf_r+0x98>)
 800ced4:	429c      	cmp	r4, r3
 800ced6:	d12b      	bne.n	800cf30 <__swbuf_r+0x70>
 800ced8:	686c      	ldr	r4, [r5, #4]
 800ceda:	69a3      	ldr	r3, [r4, #24]
 800cedc:	60a3      	str	r3, [r4, #8]
 800cede:	89a3      	ldrh	r3, [r4, #12]
 800cee0:	071a      	lsls	r2, r3, #28
 800cee2:	d52f      	bpl.n	800cf44 <__swbuf_r+0x84>
 800cee4:	6923      	ldr	r3, [r4, #16]
 800cee6:	b36b      	cbz	r3, 800cf44 <__swbuf_r+0x84>
 800cee8:	6923      	ldr	r3, [r4, #16]
 800ceea:	6820      	ldr	r0, [r4, #0]
 800ceec:	1ac0      	subs	r0, r0, r3
 800ceee:	6963      	ldr	r3, [r4, #20]
 800cef0:	b2f6      	uxtb	r6, r6
 800cef2:	4283      	cmp	r3, r0
 800cef4:	4637      	mov	r7, r6
 800cef6:	dc04      	bgt.n	800cf02 <__swbuf_r+0x42>
 800cef8:	4621      	mov	r1, r4
 800cefa:	4628      	mov	r0, r5
 800cefc:	f000 f95c 	bl	800d1b8 <_fflush_r>
 800cf00:	bb30      	cbnz	r0, 800cf50 <__swbuf_r+0x90>
 800cf02:	68a3      	ldr	r3, [r4, #8]
 800cf04:	3b01      	subs	r3, #1
 800cf06:	60a3      	str	r3, [r4, #8]
 800cf08:	6823      	ldr	r3, [r4, #0]
 800cf0a:	1c5a      	adds	r2, r3, #1
 800cf0c:	6022      	str	r2, [r4, #0]
 800cf0e:	701e      	strb	r6, [r3, #0]
 800cf10:	6963      	ldr	r3, [r4, #20]
 800cf12:	3001      	adds	r0, #1
 800cf14:	4283      	cmp	r3, r0
 800cf16:	d004      	beq.n	800cf22 <__swbuf_r+0x62>
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	07db      	lsls	r3, r3, #31
 800cf1c:	d506      	bpl.n	800cf2c <__swbuf_r+0x6c>
 800cf1e:	2e0a      	cmp	r6, #10
 800cf20:	d104      	bne.n	800cf2c <__swbuf_r+0x6c>
 800cf22:	4621      	mov	r1, r4
 800cf24:	4628      	mov	r0, r5
 800cf26:	f000 f947 	bl	800d1b8 <_fflush_r>
 800cf2a:	b988      	cbnz	r0, 800cf50 <__swbuf_r+0x90>
 800cf2c:	4638      	mov	r0, r7
 800cf2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf30:	4b0a      	ldr	r3, [pc, #40]	; (800cf5c <__swbuf_r+0x9c>)
 800cf32:	429c      	cmp	r4, r3
 800cf34:	d101      	bne.n	800cf3a <__swbuf_r+0x7a>
 800cf36:	68ac      	ldr	r4, [r5, #8]
 800cf38:	e7cf      	b.n	800ceda <__swbuf_r+0x1a>
 800cf3a:	4b09      	ldr	r3, [pc, #36]	; (800cf60 <__swbuf_r+0xa0>)
 800cf3c:	429c      	cmp	r4, r3
 800cf3e:	bf08      	it	eq
 800cf40:	68ec      	ldreq	r4, [r5, #12]
 800cf42:	e7ca      	b.n	800ceda <__swbuf_r+0x1a>
 800cf44:	4621      	mov	r1, r4
 800cf46:	4628      	mov	r0, r5
 800cf48:	f000 f81e 	bl	800cf88 <__swsetup_r>
 800cf4c:	2800      	cmp	r0, #0
 800cf4e:	d0cb      	beq.n	800cee8 <__swbuf_r+0x28>
 800cf50:	f04f 37ff 	mov.w	r7, #4294967295
 800cf54:	e7ea      	b.n	800cf2c <__swbuf_r+0x6c>
 800cf56:	bf00      	nop
 800cf58:	080261f8 	.word	0x080261f8
 800cf5c:	08026218 	.word	0x08026218
 800cf60:	080261d8 	.word	0x080261d8

0800cf64 <_write_r>:
 800cf64:	b538      	push	{r3, r4, r5, lr}
 800cf66:	4d07      	ldr	r5, [pc, #28]	; (800cf84 <_write_r+0x20>)
 800cf68:	4604      	mov	r4, r0
 800cf6a:	4608      	mov	r0, r1
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	2200      	movs	r2, #0
 800cf70:	602a      	str	r2, [r5, #0]
 800cf72:	461a      	mov	r2, r3
 800cf74:	f000 ff72 	bl	800de5c <_write>
 800cf78:	1c43      	adds	r3, r0, #1
 800cf7a:	d102      	bne.n	800cf82 <_write_r+0x1e>
 800cf7c:	682b      	ldr	r3, [r5, #0]
 800cf7e:	b103      	cbz	r3, 800cf82 <_write_r+0x1e>
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	bd38      	pop	{r3, r4, r5, pc}
 800cf84:	20000b50 	.word	0x20000b50

0800cf88 <__swsetup_r>:
 800cf88:	4b32      	ldr	r3, [pc, #200]	; (800d054 <__swsetup_r+0xcc>)
 800cf8a:	b570      	push	{r4, r5, r6, lr}
 800cf8c:	681d      	ldr	r5, [r3, #0]
 800cf8e:	4606      	mov	r6, r0
 800cf90:	460c      	mov	r4, r1
 800cf92:	b125      	cbz	r5, 800cf9e <__swsetup_r+0x16>
 800cf94:	69ab      	ldr	r3, [r5, #24]
 800cf96:	b913      	cbnz	r3, 800cf9e <__swsetup_r+0x16>
 800cf98:	4628      	mov	r0, r5
 800cf9a:	f7fe fe3b 	bl	800bc14 <__sinit>
 800cf9e:	4b2e      	ldr	r3, [pc, #184]	; (800d058 <__swsetup_r+0xd0>)
 800cfa0:	429c      	cmp	r4, r3
 800cfa2:	d10f      	bne.n	800cfc4 <__swsetup_r+0x3c>
 800cfa4:	686c      	ldr	r4, [r5, #4]
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfac:	0719      	lsls	r1, r3, #28
 800cfae:	d42c      	bmi.n	800d00a <__swsetup_r+0x82>
 800cfb0:	06dd      	lsls	r5, r3, #27
 800cfb2:	d411      	bmi.n	800cfd8 <__swsetup_r+0x50>
 800cfb4:	2309      	movs	r3, #9
 800cfb6:	6033      	str	r3, [r6, #0]
 800cfb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfbc:	81a3      	strh	r3, [r4, #12]
 800cfbe:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc2:	e03e      	b.n	800d042 <__swsetup_r+0xba>
 800cfc4:	4b25      	ldr	r3, [pc, #148]	; (800d05c <__swsetup_r+0xd4>)
 800cfc6:	429c      	cmp	r4, r3
 800cfc8:	d101      	bne.n	800cfce <__swsetup_r+0x46>
 800cfca:	68ac      	ldr	r4, [r5, #8]
 800cfcc:	e7eb      	b.n	800cfa6 <__swsetup_r+0x1e>
 800cfce:	4b24      	ldr	r3, [pc, #144]	; (800d060 <__swsetup_r+0xd8>)
 800cfd0:	429c      	cmp	r4, r3
 800cfd2:	bf08      	it	eq
 800cfd4:	68ec      	ldreq	r4, [r5, #12]
 800cfd6:	e7e6      	b.n	800cfa6 <__swsetup_r+0x1e>
 800cfd8:	0758      	lsls	r0, r3, #29
 800cfda:	d512      	bpl.n	800d002 <__swsetup_r+0x7a>
 800cfdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfde:	b141      	cbz	r1, 800cff2 <__swsetup_r+0x6a>
 800cfe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfe4:	4299      	cmp	r1, r3
 800cfe6:	d002      	beq.n	800cfee <__swsetup_r+0x66>
 800cfe8:	4630      	mov	r0, r6
 800cfea:	f7fc fedf 	bl	8009dac <_free_r>
 800cfee:	2300      	movs	r3, #0
 800cff0:	6363      	str	r3, [r4, #52]	; 0x34
 800cff2:	89a3      	ldrh	r3, [r4, #12]
 800cff4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cff8:	81a3      	strh	r3, [r4, #12]
 800cffa:	2300      	movs	r3, #0
 800cffc:	6063      	str	r3, [r4, #4]
 800cffe:	6923      	ldr	r3, [r4, #16]
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	89a3      	ldrh	r3, [r4, #12]
 800d004:	f043 0308 	orr.w	r3, r3, #8
 800d008:	81a3      	strh	r3, [r4, #12]
 800d00a:	6923      	ldr	r3, [r4, #16]
 800d00c:	b94b      	cbnz	r3, 800d022 <__swsetup_r+0x9a>
 800d00e:	89a3      	ldrh	r3, [r4, #12]
 800d010:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d018:	d003      	beq.n	800d022 <__swsetup_r+0x9a>
 800d01a:	4621      	mov	r1, r4
 800d01c:	4630      	mov	r0, r6
 800d01e:	f000 f93f 	bl	800d2a0 <__smakebuf_r>
 800d022:	89a0      	ldrh	r0, [r4, #12]
 800d024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d028:	f010 0301 	ands.w	r3, r0, #1
 800d02c:	d00a      	beq.n	800d044 <__swsetup_r+0xbc>
 800d02e:	2300      	movs	r3, #0
 800d030:	60a3      	str	r3, [r4, #8]
 800d032:	6963      	ldr	r3, [r4, #20]
 800d034:	425b      	negs	r3, r3
 800d036:	61a3      	str	r3, [r4, #24]
 800d038:	6923      	ldr	r3, [r4, #16]
 800d03a:	b943      	cbnz	r3, 800d04e <__swsetup_r+0xc6>
 800d03c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d040:	d1ba      	bne.n	800cfb8 <__swsetup_r+0x30>
 800d042:	bd70      	pop	{r4, r5, r6, pc}
 800d044:	0781      	lsls	r1, r0, #30
 800d046:	bf58      	it	pl
 800d048:	6963      	ldrpl	r3, [r4, #20]
 800d04a:	60a3      	str	r3, [r4, #8]
 800d04c:	e7f4      	b.n	800d038 <__swsetup_r+0xb0>
 800d04e:	2000      	movs	r0, #0
 800d050:	e7f7      	b.n	800d042 <__swsetup_r+0xba>
 800d052:	bf00      	nop
 800d054:	200000cc 	.word	0x200000cc
 800d058:	080261f8 	.word	0x080261f8
 800d05c:	08026218 	.word	0x08026218
 800d060:	080261d8 	.word	0x080261d8

0800d064 <abort>:
 800d064:	b508      	push	{r3, lr}
 800d066:	2006      	movs	r0, #6
 800d068:	f000 fd4c 	bl	800db04 <raise>
 800d06c:	2001      	movs	r0, #1
 800d06e:	f000 fefd 	bl	800de6c <_exit>
	...

0800d074 <_close_r>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	4d06      	ldr	r5, [pc, #24]	; (800d090 <_close_r+0x1c>)
 800d078:	2300      	movs	r3, #0
 800d07a:	4604      	mov	r4, r0
 800d07c:	4608      	mov	r0, r1
 800d07e:	602b      	str	r3, [r5, #0]
 800d080:	f000 fe9e 	bl	800ddc0 <_close>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d102      	bne.n	800d08e <_close_r+0x1a>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	b103      	cbz	r3, 800d08e <_close_r+0x1a>
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	20000b50 	.word	0x20000b50

0800d094 <__env_lock>:
 800d094:	4801      	ldr	r0, [pc, #4]	; (800d09c <__env_lock+0x8>)
 800d096:	f7fe bf79 	b.w	800bf8c <__retarget_lock_acquire_recursive>
 800d09a:	bf00      	nop
 800d09c:	20000b48 	.word	0x20000b48

0800d0a0 <__env_unlock>:
 800d0a0:	4801      	ldr	r0, [pc, #4]	; (800d0a8 <__env_unlock+0x8>)
 800d0a2:	f7fe bf75 	b.w	800bf90 <__retarget_lock_release_recursive>
 800d0a6:	bf00      	nop
 800d0a8:	20000b48 	.word	0x20000b48

0800d0ac <__sflush_r>:
 800d0ac:	898a      	ldrh	r2, [r1, #12]
 800d0ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b2:	4605      	mov	r5, r0
 800d0b4:	0710      	lsls	r0, r2, #28
 800d0b6:	460c      	mov	r4, r1
 800d0b8:	d458      	bmi.n	800d16c <__sflush_r+0xc0>
 800d0ba:	684b      	ldr	r3, [r1, #4]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	dc05      	bgt.n	800d0cc <__sflush_r+0x20>
 800d0c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	dc02      	bgt.n	800d0cc <__sflush_r+0x20>
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0ce:	2e00      	cmp	r6, #0
 800d0d0:	d0f9      	beq.n	800d0c6 <__sflush_r+0x1a>
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0d8:	682f      	ldr	r7, [r5, #0]
 800d0da:	602b      	str	r3, [r5, #0]
 800d0dc:	d032      	beq.n	800d144 <__sflush_r+0x98>
 800d0de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0e0:	89a3      	ldrh	r3, [r4, #12]
 800d0e2:	075a      	lsls	r2, r3, #29
 800d0e4:	d505      	bpl.n	800d0f2 <__sflush_r+0x46>
 800d0e6:	6863      	ldr	r3, [r4, #4]
 800d0e8:	1ac0      	subs	r0, r0, r3
 800d0ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0ec:	b10b      	cbz	r3, 800d0f2 <__sflush_r+0x46>
 800d0ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0f0:	1ac0      	subs	r0, r0, r3
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0f8:	6a21      	ldr	r1, [r4, #32]
 800d0fa:	4628      	mov	r0, r5
 800d0fc:	47b0      	blx	r6
 800d0fe:	1c43      	adds	r3, r0, #1
 800d100:	89a3      	ldrh	r3, [r4, #12]
 800d102:	d106      	bne.n	800d112 <__sflush_r+0x66>
 800d104:	6829      	ldr	r1, [r5, #0]
 800d106:	291d      	cmp	r1, #29
 800d108:	d82c      	bhi.n	800d164 <__sflush_r+0xb8>
 800d10a:	4a2a      	ldr	r2, [pc, #168]	; (800d1b4 <__sflush_r+0x108>)
 800d10c:	40ca      	lsrs	r2, r1
 800d10e:	07d6      	lsls	r6, r2, #31
 800d110:	d528      	bpl.n	800d164 <__sflush_r+0xb8>
 800d112:	2200      	movs	r2, #0
 800d114:	6062      	str	r2, [r4, #4]
 800d116:	04d9      	lsls	r1, r3, #19
 800d118:	6922      	ldr	r2, [r4, #16]
 800d11a:	6022      	str	r2, [r4, #0]
 800d11c:	d504      	bpl.n	800d128 <__sflush_r+0x7c>
 800d11e:	1c42      	adds	r2, r0, #1
 800d120:	d101      	bne.n	800d126 <__sflush_r+0x7a>
 800d122:	682b      	ldr	r3, [r5, #0]
 800d124:	b903      	cbnz	r3, 800d128 <__sflush_r+0x7c>
 800d126:	6560      	str	r0, [r4, #84]	; 0x54
 800d128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d12a:	602f      	str	r7, [r5, #0]
 800d12c:	2900      	cmp	r1, #0
 800d12e:	d0ca      	beq.n	800d0c6 <__sflush_r+0x1a>
 800d130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d134:	4299      	cmp	r1, r3
 800d136:	d002      	beq.n	800d13e <__sflush_r+0x92>
 800d138:	4628      	mov	r0, r5
 800d13a:	f7fc fe37 	bl	8009dac <_free_r>
 800d13e:	2000      	movs	r0, #0
 800d140:	6360      	str	r0, [r4, #52]	; 0x34
 800d142:	e7c1      	b.n	800d0c8 <__sflush_r+0x1c>
 800d144:	6a21      	ldr	r1, [r4, #32]
 800d146:	2301      	movs	r3, #1
 800d148:	4628      	mov	r0, r5
 800d14a:	47b0      	blx	r6
 800d14c:	1c41      	adds	r1, r0, #1
 800d14e:	d1c7      	bne.n	800d0e0 <__sflush_r+0x34>
 800d150:	682b      	ldr	r3, [r5, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d0c4      	beq.n	800d0e0 <__sflush_r+0x34>
 800d156:	2b1d      	cmp	r3, #29
 800d158:	d001      	beq.n	800d15e <__sflush_r+0xb2>
 800d15a:	2b16      	cmp	r3, #22
 800d15c:	d101      	bne.n	800d162 <__sflush_r+0xb6>
 800d15e:	602f      	str	r7, [r5, #0]
 800d160:	e7b1      	b.n	800d0c6 <__sflush_r+0x1a>
 800d162:	89a3      	ldrh	r3, [r4, #12]
 800d164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d168:	81a3      	strh	r3, [r4, #12]
 800d16a:	e7ad      	b.n	800d0c8 <__sflush_r+0x1c>
 800d16c:	690f      	ldr	r7, [r1, #16]
 800d16e:	2f00      	cmp	r7, #0
 800d170:	d0a9      	beq.n	800d0c6 <__sflush_r+0x1a>
 800d172:	0793      	lsls	r3, r2, #30
 800d174:	680e      	ldr	r6, [r1, #0]
 800d176:	bf08      	it	eq
 800d178:	694b      	ldreq	r3, [r1, #20]
 800d17a:	600f      	str	r7, [r1, #0]
 800d17c:	bf18      	it	ne
 800d17e:	2300      	movne	r3, #0
 800d180:	eba6 0807 	sub.w	r8, r6, r7
 800d184:	608b      	str	r3, [r1, #8]
 800d186:	f1b8 0f00 	cmp.w	r8, #0
 800d18a:	dd9c      	ble.n	800d0c6 <__sflush_r+0x1a>
 800d18c:	6a21      	ldr	r1, [r4, #32]
 800d18e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d190:	4643      	mov	r3, r8
 800d192:	463a      	mov	r2, r7
 800d194:	4628      	mov	r0, r5
 800d196:	47b0      	blx	r6
 800d198:	2800      	cmp	r0, #0
 800d19a:	dc06      	bgt.n	800d1aa <__sflush_r+0xfe>
 800d19c:	89a3      	ldrh	r3, [r4, #12]
 800d19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1a2:	81a3      	strh	r3, [r4, #12]
 800d1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a8:	e78e      	b.n	800d0c8 <__sflush_r+0x1c>
 800d1aa:	4407      	add	r7, r0
 800d1ac:	eba8 0800 	sub.w	r8, r8, r0
 800d1b0:	e7e9      	b.n	800d186 <__sflush_r+0xda>
 800d1b2:	bf00      	nop
 800d1b4:	20400001 	.word	0x20400001

0800d1b8 <_fflush_r>:
 800d1b8:	b538      	push	{r3, r4, r5, lr}
 800d1ba:	690b      	ldr	r3, [r1, #16]
 800d1bc:	4605      	mov	r5, r0
 800d1be:	460c      	mov	r4, r1
 800d1c0:	b913      	cbnz	r3, 800d1c8 <_fflush_r+0x10>
 800d1c2:	2500      	movs	r5, #0
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	bd38      	pop	{r3, r4, r5, pc}
 800d1c8:	b118      	cbz	r0, 800d1d2 <_fflush_r+0x1a>
 800d1ca:	6983      	ldr	r3, [r0, #24]
 800d1cc:	b90b      	cbnz	r3, 800d1d2 <_fflush_r+0x1a>
 800d1ce:	f7fe fd21 	bl	800bc14 <__sinit>
 800d1d2:	4b14      	ldr	r3, [pc, #80]	; (800d224 <_fflush_r+0x6c>)
 800d1d4:	429c      	cmp	r4, r3
 800d1d6:	d11b      	bne.n	800d210 <_fflush_r+0x58>
 800d1d8:	686c      	ldr	r4, [r5, #4]
 800d1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d0ef      	beq.n	800d1c2 <_fflush_r+0xa>
 800d1e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1e4:	07d0      	lsls	r0, r2, #31
 800d1e6:	d404      	bmi.n	800d1f2 <_fflush_r+0x3a>
 800d1e8:	0599      	lsls	r1, r3, #22
 800d1ea:	d402      	bmi.n	800d1f2 <_fflush_r+0x3a>
 800d1ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1ee:	f7fe fecd 	bl	800bf8c <__retarget_lock_acquire_recursive>
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	4621      	mov	r1, r4
 800d1f6:	f7ff ff59 	bl	800d0ac <__sflush_r>
 800d1fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1fc:	07da      	lsls	r2, r3, #31
 800d1fe:	4605      	mov	r5, r0
 800d200:	d4e0      	bmi.n	800d1c4 <_fflush_r+0xc>
 800d202:	89a3      	ldrh	r3, [r4, #12]
 800d204:	059b      	lsls	r3, r3, #22
 800d206:	d4dd      	bmi.n	800d1c4 <_fflush_r+0xc>
 800d208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d20a:	f7fe fec1 	bl	800bf90 <__retarget_lock_release_recursive>
 800d20e:	e7d9      	b.n	800d1c4 <_fflush_r+0xc>
 800d210:	4b05      	ldr	r3, [pc, #20]	; (800d228 <_fflush_r+0x70>)
 800d212:	429c      	cmp	r4, r3
 800d214:	d101      	bne.n	800d21a <_fflush_r+0x62>
 800d216:	68ac      	ldr	r4, [r5, #8]
 800d218:	e7df      	b.n	800d1da <_fflush_r+0x22>
 800d21a:	4b04      	ldr	r3, [pc, #16]	; (800d22c <_fflush_r+0x74>)
 800d21c:	429c      	cmp	r4, r3
 800d21e:	bf08      	it	eq
 800d220:	68ec      	ldreq	r4, [r5, #12]
 800d222:	e7da      	b.n	800d1da <_fflush_r+0x22>
 800d224:	080261f8 	.word	0x080261f8
 800d228:	08026218 	.word	0x08026218
 800d22c:	080261d8 	.word	0x080261d8

0800d230 <_lseek_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4d07      	ldr	r5, [pc, #28]	; (800d250 <_lseek_r+0x20>)
 800d234:	4604      	mov	r4, r0
 800d236:	4608      	mov	r0, r1
 800d238:	4611      	mov	r1, r2
 800d23a:	2200      	movs	r2, #0
 800d23c:	602a      	str	r2, [r5, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	f000 fdee 	bl	800de20 <_lseek>
 800d244:	1c43      	adds	r3, r0, #1
 800d246:	d102      	bne.n	800d24e <_lseek_r+0x1e>
 800d248:	682b      	ldr	r3, [r5, #0]
 800d24a:	b103      	cbz	r3, 800d24e <_lseek_r+0x1e>
 800d24c:	6023      	str	r3, [r4, #0]
 800d24e:	bd38      	pop	{r3, r4, r5, pc}
 800d250:	20000b50 	.word	0x20000b50

0800d254 <__swhatbuf_r>:
 800d254:	b570      	push	{r4, r5, r6, lr}
 800d256:	460e      	mov	r6, r1
 800d258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d25c:	2900      	cmp	r1, #0
 800d25e:	b096      	sub	sp, #88	; 0x58
 800d260:	4614      	mov	r4, r2
 800d262:	461d      	mov	r5, r3
 800d264:	da08      	bge.n	800d278 <__swhatbuf_r+0x24>
 800d266:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d26a:	2200      	movs	r2, #0
 800d26c:	602a      	str	r2, [r5, #0]
 800d26e:	061a      	lsls	r2, r3, #24
 800d270:	d410      	bmi.n	800d294 <__swhatbuf_r+0x40>
 800d272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d276:	e00e      	b.n	800d296 <__swhatbuf_r+0x42>
 800d278:	466a      	mov	r2, sp
 800d27a:	f000 fd31 	bl	800dce0 <_fstat_r>
 800d27e:	2800      	cmp	r0, #0
 800d280:	dbf1      	blt.n	800d266 <__swhatbuf_r+0x12>
 800d282:	9a01      	ldr	r2, [sp, #4]
 800d284:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d288:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d28c:	425a      	negs	r2, r3
 800d28e:	415a      	adcs	r2, r3
 800d290:	602a      	str	r2, [r5, #0]
 800d292:	e7ee      	b.n	800d272 <__swhatbuf_r+0x1e>
 800d294:	2340      	movs	r3, #64	; 0x40
 800d296:	2000      	movs	r0, #0
 800d298:	6023      	str	r3, [r4, #0]
 800d29a:	b016      	add	sp, #88	; 0x58
 800d29c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d2a0 <__smakebuf_r>:
 800d2a0:	898b      	ldrh	r3, [r1, #12]
 800d2a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d2a4:	079d      	lsls	r5, r3, #30
 800d2a6:	4606      	mov	r6, r0
 800d2a8:	460c      	mov	r4, r1
 800d2aa:	d507      	bpl.n	800d2bc <__smakebuf_r+0x1c>
 800d2ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	6123      	str	r3, [r4, #16]
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	6163      	str	r3, [r4, #20]
 800d2b8:	b002      	add	sp, #8
 800d2ba:	bd70      	pop	{r4, r5, r6, pc}
 800d2bc:	ab01      	add	r3, sp, #4
 800d2be:	466a      	mov	r2, sp
 800d2c0:	f7ff ffc8 	bl	800d254 <__swhatbuf_r>
 800d2c4:	9900      	ldr	r1, [sp, #0]
 800d2c6:	4605      	mov	r5, r0
 800d2c8:	4630      	mov	r0, r6
 800d2ca:	f7fc fddb 	bl	8009e84 <_malloc_r>
 800d2ce:	b948      	cbnz	r0, 800d2e4 <__smakebuf_r+0x44>
 800d2d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2d4:	059a      	lsls	r2, r3, #22
 800d2d6:	d4ef      	bmi.n	800d2b8 <__smakebuf_r+0x18>
 800d2d8:	f023 0303 	bic.w	r3, r3, #3
 800d2dc:	f043 0302 	orr.w	r3, r3, #2
 800d2e0:	81a3      	strh	r3, [r4, #12]
 800d2e2:	e7e3      	b.n	800d2ac <__smakebuf_r+0xc>
 800d2e4:	4b0d      	ldr	r3, [pc, #52]	; (800d31c <__smakebuf_r+0x7c>)
 800d2e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d2e8:	89a3      	ldrh	r3, [r4, #12]
 800d2ea:	6020      	str	r0, [r4, #0]
 800d2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2f0:	81a3      	strh	r3, [r4, #12]
 800d2f2:	9b00      	ldr	r3, [sp, #0]
 800d2f4:	6163      	str	r3, [r4, #20]
 800d2f6:	9b01      	ldr	r3, [sp, #4]
 800d2f8:	6120      	str	r0, [r4, #16]
 800d2fa:	b15b      	cbz	r3, 800d314 <__smakebuf_r+0x74>
 800d2fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d300:	4630      	mov	r0, r6
 800d302:	f000 fcff 	bl	800dd04 <_isatty_r>
 800d306:	b128      	cbz	r0, 800d314 <__smakebuf_r+0x74>
 800d308:	89a3      	ldrh	r3, [r4, #12]
 800d30a:	f023 0303 	bic.w	r3, r3, #3
 800d30e:	f043 0301 	orr.w	r3, r3, #1
 800d312:	81a3      	strh	r3, [r4, #12]
 800d314:	89a0      	ldrh	r0, [r4, #12]
 800d316:	4305      	orrs	r5, r0
 800d318:	81a5      	strh	r5, [r4, #12]
 800d31a:	e7cd      	b.n	800d2b8 <__smakebuf_r+0x18>
 800d31c:	0800bbad 	.word	0x0800bbad

0800d320 <__ascii_mbtowc>:
 800d320:	b082      	sub	sp, #8
 800d322:	b901      	cbnz	r1, 800d326 <__ascii_mbtowc+0x6>
 800d324:	a901      	add	r1, sp, #4
 800d326:	b142      	cbz	r2, 800d33a <__ascii_mbtowc+0x1a>
 800d328:	b14b      	cbz	r3, 800d33e <__ascii_mbtowc+0x1e>
 800d32a:	7813      	ldrb	r3, [r2, #0]
 800d32c:	600b      	str	r3, [r1, #0]
 800d32e:	7812      	ldrb	r2, [r2, #0]
 800d330:	1e10      	subs	r0, r2, #0
 800d332:	bf18      	it	ne
 800d334:	2001      	movne	r0, #1
 800d336:	b002      	add	sp, #8
 800d338:	4770      	bx	lr
 800d33a:	4610      	mov	r0, r2
 800d33c:	e7fb      	b.n	800d336 <__ascii_mbtowc+0x16>
 800d33e:	f06f 0001 	mvn.w	r0, #1
 800d342:	e7f8      	b.n	800d336 <__ascii_mbtowc+0x16>

0800d344 <memmove>:
 800d344:	4288      	cmp	r0, r1
 800d346:	b510      	push	{r4, lr}
 800d348:	eb01 0402 	add.w	r4, r1, r2
 800d34c:	d902      	bls.n	800d354 <memmove+0x10>
 800d34e:	4284      	cmp	r4, r0
 800d350:	4623      	mov	r3, r4
 800d352:	d807      	bhi.n	800d364 <memmove+0x20>
 800d354:	1e43      	subs	r3, r0, #1
 800d356:	42a1      	cmp	r1, r4
 800d358:	d008      	beq.n	800d36c <memmove+0x28>
 800d35a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d362:	e7f8      	b.n	800d356 <memmove+0x12>
 800d364:	4402      	add	r2, r0
 800d366:	4601      	mov	r1, r0
 800d368:	428a      	cmp	r2, r1
 800d36a:	d100      	bne.n	800d36e <memmove+0x2a>
 800d36c:	bd10      	pop	{r4, pc}
 800d36e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d372:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d376:	e7f7      	b.n	800d368 <memmove+0x24>

0800d378 <_realloc_r>:
 800d378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d37c:	4680      	mov	r8, r0
 800d37e:	4614      	mov	r4, r2
 800d380:	460e      	mov	r6, r1
 800d382:	b921      	cbnz	r1, 800d38e <_realloc_r+0x16>
 800d384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d388:	4611      	mov	r1, r2
 800d38a:	f7fc bd7b 	b.w	8009e84 <_malloc_r>
 800d38e:	b92a      	cbnz	r2, 800d39c <_realloc_r+0x24>
 800d390:	f7fc fd0c 	bl	8009dac <_free_r>
 800d394:	4625      	mov	r5, r4
 800d396:	4628      	mov	r0, r5
 800d398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d39c:	f000 fcc2 	bl	800dd24 <_malloc_usable_size_r>
 800d3a0:	4284      	cmp	r4, r0
 800d3a2:	4607      	mov	r7, r0
 800d3a4:	d802      	bhi.n	800d3ac <_realloc_r+0x34>
 800d3a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d3aa:	d812      	bhi.n	800d3d2 <_realloc_r+0x5a>
 800d3ac:	4621      	mov	r1, r4
 800d3ae:	4640      	mov	r0, r8
 800d3b0:	f7fc fd68 	bl	8009e84 <_malloc_r>
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	2800      	cmp	r0, #0
 800d3b8:	d0ed      	beq.n	800d396 <_realloc_r+0x1e>
 800d3ba:	42bc      	cmp	r4, r7
 800d3bc:	4622      	mov	r2, r4
 800d3be:	4631      	mov	r1, r6
 800d3c0:	bf28      	it	cs
 800d3c2:	463a      	movcs	r2, r7
 800d3c4:	f7fe fde5 	bl	800bf92 <memcpy>
 800d3c8:	4631      	mov	r1, r6
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	f7fc fcee 	bl	8009dac <_free_r>
 800d3d0:	e7e1      	b.n	800d396 <_realloc_r+0x1e>
 800d3d2:	4635      	mov	r5, r6
 800d3d4:	e7df      	b.n	800d396 <_realloc_r+0x1e>

0800d3d6 <_sungetc_r>:
 800d3d6:	b538      	push	{r3, r4, r5, lr}
 800d3d8:	1c4b      	adds	r3, r1, #1
 800d3da:	4614      	mov	r4, r2
 800d3dc:	d103      	bne.n	800d3e6 <_sungetc_r+0x10>
 800d3de:	f04f 35ff 	mov.w	r5, #4294967295
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	bd38      	pop	{r3, r4, r5, pc}
 800d3e6:	8993      	ldrh	r3, [r2, #12]
 800d3e8:	f023 0320 	bic.w	r3, r3, #32
 800d3ec:	8193      	strh	r3, [r2, #12]
 800d3ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3f0:	6852      	ldr	r2, [r2, #4]
 800d3f2:	b2cd      	uxtb	r5, r1
 800d3f4:	b18b      	cbz	r3, 800d41a <_sungetc_r+0x44>
 800d3f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d3f8:	4293      	cmp	r3, r2
 800d3fa:	dd08      	ble.n	800d40e <_sungetc_r+0x38>
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	1e5a      	subs	r2, r3, #1
 800d400:	6022      	str	r2, [r4, #0]
 800d402:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d406:	6863      	ldr	r3, [r4, #4]
 800d408:	3301      	adds	r3, #1
 800d40a:	6063      	str	r3, [r4, #4]
 800d40c:	e7e9      	b.n	800d3e2 <_sungetc_r+0xc>
 800d40e:	4621      	mov	r1, r4
 800d410:	f000 fc18 	bl	800dc44 <__submore>
 800d414:	2800      	cmp	r0, #0
 800d416:	d0f1      	beq.n	800d3fc <_sungetc_r+0x26>
 800d418:	e7e1      	b.n	800d3de <_sungetc_r+0x8>
 800d41a:	6921      	ldr	r1, [r4, #16]
 800d41c:	6823      	ldr	r3, [r4, #0]
 800d41e:	b151      	cbz	r1, 800d436 <_sungetc_r+0x60>
 800d420:	4299      	cmp	r1, r3
 800d422:	d208      	bcs.n	800d436 <_sungetc_r+0x60>
 800d424:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d428:	42a9      	cmp	r1, r5
 800d42a:	d104      	bne.n	800d436 <_sungetc_r+0x60>
 800d42c:	3b01      	subs	r3, #1
 800d42e:	3201      	adds	r2, #1
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	6062      	str	r2, [r4, #4]
 800d434:	e7d5      	b.n	800d3e2 <_sungetc_r+0xc>
 800d436:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d43a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d43e:	6363      	str	r3, [r4, #52]	; 0x34
 800d440:	2303      	movs	r3, #3
 800d442:	63a3      	str	r3, [r4, #56]	; 0x38
 800d444:	4623      	mov	r3, r4
 800d446:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d44a:	6023      	str	r3, [r4, #0]
 800d44c:	2301      	movs	r3, #1
 800d44e:	e7dc      	b.n	800d40a <_sungetc_r+0x34>

0800d450 <__ssrefill_r>:
 800d450:	b510      	push	{r4, lr}
 800d452:	460c      	mov	r4, r1
 800d454:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d456:	b169      	cbz	r1, 800d474 <__ssrefill_r+0x24>
 800d458:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d45c:	4299      	cmp	r1, r3
 800d45e:	d001      	beq.n	800d464 <__ssrefill_r+0x14>
 800d460:	f7fc fca4 	bl	8009dac <_free_r>
 800d464:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d466:	6063      	str	r3, [r4, #4]
 800d468:	2000      	movs	r0, #0
 800d46a:	6360      	str	r0, [r4, #52]	; 0x34
 800d46c:	b113      	cbz	r3, 800d474 <__ssrefill_r+0x24>
 800d46e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d470:	6023      	str	r3, [r4, #0]
 800d472:	bd10      	pop	{r4, pc}
 800d474:	6923      	ldr	r3, [r4, #16]
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	2300      	movs	r3, #0
 800d47a:	6063      	str	r3, [r4, #4]
 800d47c:	89a3      	ldrh	r3, [r4, #12]
 800d47e:	f043 0320 	orr.w	r3, r3, #32
 800d482:	81a3      	strh	r3, [r4, #12]
 800d484:	f04f 30ff 	mov.w	r0, #4294967295
 800d488:	e7f3      	b.n	800d472 <__ssrefill_r+0x22>
	...

0800d48c <__ssvfiscanf_r>:
 800d48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d490:	460c      	mov	r4, r1
 800d492:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d496:	2100      	movs	r1, #0
 800d498:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d49c:	49a6      	ldr	r1, [pc, #664]	; (800d738 <__ssvfiscanf_r+0x2ac>)
 800d49e:	91a0      	str	r1, [sp, #640]	; 0x280
 800d4a0:	f10d 0804 	add.w	r8, sp, #4
 800d4a4:	49a5      	ldr	r1, [pc, #660]	; (800d73c <__ssvfiscanf_r+0x2b0>)
 800d4a6:	4fa6      	ldr	r7, [pc, #664]	; (800d740 <__ssvfiscanf_r+0x2b4>)
 800d4a8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d744 <__ssvfiscanf_r+0x2b8>
 800d4ac:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d4b0:	4606      	mov	r6, r0
 800d4b2:	91a1      	str	r1, [sp, #644]	; 0x284
 800d4b4:	9300      	str	r3, [sp, #0]
 800d4b6:	7813      	ldrb	r3, [r2, #0]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	f000 815a 	beq.w	800d772 <__ssvfiscanf_r+0x2e6>
 800d4be:	5dd9      	ldrb	r1, [r3, r7]
 800d4c0:	f011 0108 	ands.w	r1, r1, #8
 800d4c4:	f102 0501 	add.w	r5, r2, #1
 800d4c8:	d019      	beq.n	800d4fe <__ssvfiscanf_r+0x72>
 800d4ca:	6863      	ldr	r3, [r4, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	dd0f      	ble.n	800d4f0 <__ssvfiscanf_r+0x64>
 800d4d0:	6823      	ldr	r3, [r4, #0]
 800d4d2:	781a      	ldrb	r2, [r3, #0]
 800d4d4:	5cba      	ldrb	r2, [r7, r2]
 800d4d6:	0712      	lsls	r2, r2, #28
 800d4d8:	d401      	bmi.n	800d4de <__ssvfiscanf_r+0x52>
 800d4da:	462a      	mov	r2, r5
 800d4dc:	e7eb      	b.n	800d4b6 <__ssvfiscanf_r+0x2a>
 800d4de:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d4e0:	3201      	adds	r2, #1
 800d4e2:	9245      	str	r2, [sp, #276]	; 0x114
 800d4e4:	6862      	ldr	r2, [r4, #4]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	3a01      	subs	r2, #1
 800d4ea:	6062      	str	r2, [r4, #4]
 800d4ec:	6023      	str	r3, [r4, #0]
 800d4ee:	e7ec      	b.n	800d4ca <__ssvfiscanf_r+0x3e>
 800d4f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	4798      	blx	r3
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	d0e9      	beq.n	800d4d0 <__ssvfiscanf_r+0x44>
 800d4fc:	e7ed      	b.n	800d4da <__ssvfiscanf_r+0x4e>
 800d4fe:	2b25      	cmp	r3, #37	; 0x25
 800d500:	d012      	beq.n	800d528 <__ssvfiscanf_r+0x9c>
 800d502:	469a      	mov	sl, r3
 800d504:	6863      	ldr	r3, [r4, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	f340 8091 	ble.w	800d62e <__ssvfiscanf_r+0x1a2>
 800d50c:	6822      	ldr	r2, [r4, #0]
 800d50e:	7813      	ldrb	r3, [r2, #0]
 800d510:	4553      	cmp	r3, sl
 800d512:	f040 812e 	bne.w	800d772 <__ssvfiscanf_r+0x2e6>
 800d516:	6863      	ldr	r3, [r4, #4]
 800d518:	3b01      	subs	r3, #1
 800d51a:	6063      	str	r3, [r4, #4]
 800d51c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d51e:	3201      	adds	r2, #1
 800d520:	3301      	adds	r3, #1
 800d522:	6022      	str	r2, [r4, #0]
 800d524:	9345      	str	r3, [sp, #276]	; 0x114
 800d526:	e7d8      	b.n	800d4da <__ssvfiscanf_r+0x4e>
 800d528:	9141      	str	r1, [sp, #260]	; 0x104
 800d52a:	9143      	str	r1, [sp, #268]	; 0x10c
 800d52c:	7853      	ldrb	r3, [r2, #1]
 800d52e:	2b2a      	cmp	r3, #42	; 0x2a
 800d530:	bf02      	ittt	eq
 800d532:	2310      	moveq	r3, #16
 800d534:	1c95      	addeq	r5, r2, #2
 800d536:	9341      	streq	r3, [sp, #260]	; 0x104
 800d538:	220a      	movs	r2, #10
 800d53a:	46aa      	mov	sl, r5
 800d53c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d540:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d544:	2b09      	cmp	r3, #9
 800d546:	d91d      	bls.n	800d584 <__ssvfiscanf_r+0xf8>
 800d548:	487e      	ldr	r0, [pc, #504]	; (800d744 <__ssvfiscanf_r+0x2b8>)
 800d54a:	2203      	movs	r2, #3
 800d54c:	f7f2 feb8 	bl	80002c0 <memchr>
 800d550:	b140      	cbz	r0, 800d564 <__ssvfiscanf_r+0xd8>
 800d552:	2301      	movs	r3, #1
 800d554:	eba0 0009 	sub.w	r0, r0, r9
 800d558:	fa03 f000 	lsl.w	r0, r3, r0
 800d55c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d55e:	4318      	orrs	r0, r3
 800d560:	9041      	str	r0, [sp, #260]	; 0x104
 800d562:	4655      	mov	r5, sl
 800d564:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d568:	2b78      	cmp	r3, #120	; 0x78
 800d56a:	d806      	bhi.n	800d57a <__ssvfiscanf_r+0xee>
 800d56c:	2b57      	cmp	r3, #87	; 0x57
 800d56e:	d810      	bhi.n	800d592 <__ssvfiscanf_r+0x106>
 800d570:	2b25      	cmp	r3, #37	; 0x25
 800d572:	d0c6      	beq.n	800d502 <__ssvfiscanf_r+0x76>
 800d574:	d856      	bhi.n	800d624 <__ssvfiscanf_r+0x198>
 800d576:	2b00      	cmp	r3, #0
 800d578:	d064      	beq.n	800d644 <__ssvfiscanf_r+0x1b8>
 800d57a:	2303      	movs	r3, #3
 800d57c:	9347      	str	r3, [sp, #284]	; 0x11c
 800d57e:	230a      	movs	r3, #10
 800d580:	9342      	str	r3, [sp, #264]	; 0x108
 800d582:	e071      	b.n	800d668 <__ssvfiscanf_r+0x1dc>
 800d584:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d586:	fb02 1103 	mla	r1, r2, r3, r1
 800d58a:	3930      	subs	r1, #48	; 0x30
 800d58c:	9143      	str	r1, [sp, #268]	; 0x10c
 800d58e:	4655      	mov	r5, sl
 800d590:	e7d3      	b.n	800d53a <__ssvfiscanf_r+0xae>
 800d592:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d596:	2a20      	cmp	r2, #32
 800d598:	d8ef      	bhi.n	800d57a <__ssvfiscanf_r+0xee>
 800d59a:	a101      	add	r1, pc, #4	; (adr r1, 800d5a0 <__ssvfiscanf_r+0x114>)
 800d59c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d5a0:	0800d653 	.word	0x0800d653
 800d5a4:	0800d57b 	.word	0x0800d57b
 800d5a8:	0800d57b 	.word	0x0800d57b
 800d5ac:	0800d6b1 	.word	0x0800d6b1
 800d5b0:	0800d57b 	.word	0x0800d57b
 800d5b4:	0800d57b 	.word	0x0800d57b
 800d5b8:	0800d57b 	.word	0x0800d57b
 800d5bc:	0800d57b 	.word	0x0800d57b
 800d5c0:	0800d57b 	.word	0x0800d57b
 800d5c4:	0800d57b 	.word	0x0800d57b
 800d5c8:	0800d57b 	.word	0x0800d57b
 800d5cc:	0800d6c7 	.word	0x0800d6c7
 800d5d0:	0800d69d 	.word	0x0800d69d
 800d5d4:	0800d62b 	.word	0x0800d62b
 800d5d8:	0800d62b 	.word	0x0800d62b
 800d5dc:	0800d62b 	.word	0x0800d62b
 800d5e0:	0800d57b 	.word	0x0800d57b
 800d5e4:	0800d6a1 	.word	0x0800d6a1
 800d5e8:	0800d57b 	.word	0x0800d57b
 800d5ec:	0800d57b 	.word	0x0800d57b
 800d5f0:	0800d57b 	.word	0x0800d57b
 800d5f4:	0800d57b 	.word	0x0800d57b
 800d5f8:	0800d6d7 	.word	0x0800d6d7
 800d5fc:	0800d6a9 	.word	0x0800d6a9
 800d600:	0800d64b 	.word	0x0800d64b
 800d604:	0800d57b 	.word	0x0800d57b
 800d608:	0800d57b 	.word	0x0800d57b
 800d60c:	0800d6d3 	.word	0x0800d6d3
 800d610:	0800d57b 	.word	0x0800d57b
 800d614:	0800d69d 	.word	0x0800d69d
 800d618:	0800d57b 	.word	0x0800d57b
 800d61c:	0800d57b 	.word	0x0800d57b
 800d620:	0800d653 	.word	0x0800d653
 800d624:	3b45      	subs	r3, #69	; 0x45
 800d626:	2b02      	cmp	r3, #2
 800d628:	d8a7      	bhi.n	800d57a <__ssvfiscanf_r+0xee>
 800d62a:	2305      	movs	r3, #5
 800d62c:	e01b      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d62e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d630:	4621      	mov	r1, r4
 800d632:	4630      	mov	r0, r6
 800d634:	4798      	blx	r3
 800d636:	2800      	cmp	r0, #0
 800d638:	f43f af68 	beq.w	800d50c <__ssvfiscanf_r+0x80>
 800d63c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d63e:	2800      	cmp	r0, #0
 800d640:	f040 808d 	bne.w	800d75e <__ssvfiscanf_r+0x2d2>
 800d644:	f04f 30ff 	mov.w	r0, #4294967295
 800d648:	e08f      	b.n	800d76a <__ssvfiscanf_r+0x2de>
 800d64a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d64c:	f042 0220 	orr.w	r2, r2, #32
 800d650:	9241      	str	r2, [sp, #260]	; 0x104
 800d652:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d658:	9241      	str	r2, [sp, #260]	; 0x104
 800d65a:	2210      	movs	r2, #16
 800d65c:	2b6f      	cmp	r3, #111	; 0x6f
 800d65e:	9242      	str	r2, [sp, #264]	; 0x108
 800d660:	bf34      	ite	cc
 800d662:	2303      	movcc	r3, #3
 800d664:	2304      	movcs	r3, #4
 800d666:	9347      	str	r3, [sp, #284]	; 0x11c
 800d668:	6863      	ldr	r3, [r4, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	dd42      	ble.n	800d6f4 <__ssvfiscanf_r+0x268>
 800d66e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d670:	0659      	lsls	r1, r3, #25
 800d672:	d404      	bmi.n	800d67e <__ssvfiscanf_r+0x1f2>
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	781a      	ldrb	r2, [r3, #0]
 800d678:	5cba      	ldrb	r2, [r7, r2]
 800d67a:	0712      	lsls	r2, r2, #28
 800d67c:	d441      	bmi.n	800d702 <__ssvfiscanf_r+0x276>
 800d67e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d680:	2b02      	cmp	r3, #2
 800d682:	dc50      	bgt.n	800d726 <__ssvfiscanf_r+0x29a>
 800d684:	466b      	mov	r3, sp
 800d686:	4622      	mov	r2, r4
 800d688:	a941      	add	r1, sp, #260	; 0x104
 800d68a:	4630      	mov	r0, r6
 800d68c:	f000 f876 	bl	800d77c <_scanf_chars>
 800d690:	2801      	cmp	r0, #1
 800d692:	d06e      	beq.n	800d772 <__ssvfiscanf_r+0x2e6>
 800d694:	2802      	cmp	r0, #2
 800d696:	f47f af20 	bne.w	800d4da <__ssvfiscanf_r+0x4e>
 800d69a:	e7cf      	b.n	800d63c <__ssvfiscanf_r+0x1b0>
 800d69c:	220a      	movs	r2, #10
 800d69e:	e7dd      	b.n	800d65c <__ssvfiscanf_r+0x1d0>
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	9342      	str	r3, [sp, #264]	; 0x108
 800d6a4:	2303      	movs	r3, #3
 800d6a6:	e7de      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d6a8:	2308      	movs	r3, #8
 800d6aa:	9342      	str	r3, [sp, #264]	; 0x108
 800d6ac:	2304      	movs	r3, #4
 800d6ae:	e7da      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	4640      	mov	r0, r8
 800d6b4:	f000 f9c6 	bl	800da44 <__sccl>
 800d6b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6be:	9341      	str	r3, [sp, #260]	; 0x104
 800d6c0:	4605      	mov	r5, r0
 800d6c2:	2301      	movs	r3, #1
 800d6c4:	e7cf      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d6c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6cc:	9341      	str	r3, [sp, #260]	; 0x104
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	e7c9      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	e7c7      	b.n	800d666 <__ssvfiscanf_r+0x1da>
 800d6d6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d6d8:	06c3      	lsls	r3, r0, #27
 800d6da:	f53f aefe 	bmi.w	800d4da <__ssvfiscanf_r+0x4e>
 800d6de:	9b00      	ldr	r3, [sp, #0]
 800d6e0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d6e2:	1d19      	adds	r1, r3, #4
 800d6e4:	9100      	str	r1, [sp, #0]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f010 0f01 	tst.w	r0, #1
 800d6ec:	bf14      	ite	ne
 800d6ee:	801a      	strhne	r2, [r3, #0]
 800d6f0:	601a      	streq	r2, [r3, #0]
 800d6f2:	e6f2      	b.n	800d4da <__ssvfiscanf_r+0x4e>
 800d6f4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d6f6:	4621      	mov	r1, r4
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	4798      	blx	r3
 800d6fc:	2800      	cmp	r0, #0
 800d6fe:	d0b6      	beq.n	800d66e <__ssvfiscanf_r+0x1e2>
 800d700:	e79c      	b.n	800d63c <__ssvfiscanf_r+0x1b0>
 800d702:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d704:	3201      	adds	r2, #1
 800d706:	9245      	str	r2, [sp, #276]	; 0x114
 800d708:	6862      	ldr	r2, [r4, #4]
 800d70a:	3a01      	subs	r2, #1
 800d70c:	2a00      	cmp	r2, #0
 800d70e:	6062      	str	r2, [r4, #4]
 800d710:	dd02      	ble.n	800d718 <__ssvfiscanf_r+0x28c>
 800d712:	3301      	adds	r3, #1
 800d714:	6023      	str	r3, [r4, #0]
 800d716:	e7ad      	b.n	800d674 <__ssvfiscanf_r+0x1e8>
 800d718:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d71a:	4621      	mov	r1, r4
 800d71c:	4630      	mov	r0, r6
 800d71e:	4798      	blx	r3
 800d720:	2800      	cmp	r0, #0
 800d722:	d0a7      	beq.n	800d674 <__ssvfiscanf_r+0x1e8>
 800d724:	e78a      	b.n	800d63c <__ssvfiscanf_r+0x1b0>
 800d726:	2b04      	cmp	r3, #4
 800d728:	dc0e      	bgt.n	800d748 <__ssvfiscanf_r+0x2bc>
 800d72a:	466b      	mov	r3, sp
 800d72c:	4622      	mov	r2, r4
 800d72e:	a941      	add	r1, sp, #260	; 0x104
 800d730:	4630      	mov	r0, r6
 800d732:	f000 f87d 	bl	800d830 <_scanf_i>
 800d736:	e7ab      	b.n	800d690 <__ssvfiscanf_r+0x204>
 800d738:	0800d3d7 	.word	0x0800d3d7
 800d73c:	0800d451 	.word	0x0800d451
 800d740:	080263a6 	.word	0x080263a6
 800d744:	0802639a 	.word	0x0802639a
 800d748:	4b0b      	ldr	r3, [pc, #44]	; (800d778 <__ssvfiscanf_r+0x2ec>)
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	f43f aec5 	beq.w	800d4da <__ssvfiscanf_r+0x4e>
 800d750:	466b      	mov	r3, sp
 800d752:	4622      	mov	r2, r4
 800d754:	a941      	add	r1, sp, #260	; 0x104
 800d756:	4630      	mov	r0, r6
 800d758:	f3af 8000 	nop.w
 800d75c:	e798      	b.n	800d690 <__ssvfiscanf_r+0x204>
 800d75e:	89a3      	ldrh	r3, [r4, #12]
 800d760:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d764:	bf18      	it	ne
 800d766:	f04f 30ff 	movne.w	r0, #4294967295
 800d76a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d772:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d774:	e7f9      	b.n	800d76a <__ssvfiscanf_r+0x2de>
 800d776:	bf00      	nop
 800d778:	00000000 	.word	0x00000000

0800d77c <_scanf_chars>:
 800d77c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d780:	4615      	mov	r5, r2
 800d782:	688a      	ldr	r2, [r1, #8]
 800d784:	4680      	mov	r8, r0
 800d786:	460c      	mov	r4, r1
 800d788:	b932      	cbnz	r2, 800d798 <_scanf_chars+0x1c>
 800d78a:	698a      	ldr	r2, [r1, #24]
 800d78c:	2a00      	cmp	r2, #0
 800d78e:	bf0c      	ite	eq
 800d790:	2201      	moveq	r2, #1
 800d792:	f04f 32ff 	movne.w	r2, #4294967295
 800d796:	608a      	str	r2, [r1, #8]
 800d798:	6822      	ldr	r2, [r4, #0]
 800d79a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d82c <_scanf_chars+0xb0>
 800d79e:	06d1      	lsls	r1, r2, #27
 800d7a0:	bf5f      	itttt	pl
 800d7a2:	681a      	ldrpl	r2, [r3, #0]
 800d7a4:	1d11      	addpl	r1, r2, #4
 800d7a6:	6019      	strpl	r1, [r3, #0]
 800d7a8:	6816      	ldrpl	r6, [r2, #0]
 800d7aa:	2700      	movs	r7, #0
 800d7ac:	69a0      	ldr	r0, [r4, #24]
 800d7ae:	b188      	cbz	r0, 800d7d4 <_scanf_chars+0x58>
 800d7b0:	2801      	cmp	r0, #1
 800d7b2:	d107      	bne.n	800d7c4 <_scanf_chars+0x48>
 800d7b4:	682a      	ldr	r2, [r5, #0]
 800d7b6:	7811      	ldrb	r1, [r2, #0]
 800d7b8:	6962      	ldr	r2, [r4, #20]
 800d7ba:	5c52      	ldrb	r2, [r2, r1]
 800d7bc:	b952      	cbnz	r2, 800d7d4 <_scanf_chars+0x58>
 800d7be:	2f00      	cmp	r7, #0
 800d7c0:	d031      	beq.n	800d826 <_scanf_chars+0xaa>
 800d7c2:	e022      	b.n	800d80a <_scanf_chars+0x8e>
 800d7c4:	2802      	cmp	r0, #2
 800d7c6:	d120      	bne.n	800d80a <_scanf_chars+0x8e>
 800d7c8:	682b      	ldr	r3, [r5, #0]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d7d0:	071b      	lsls	r3, r3, #28
 800d7d2:	d41a      	bmi.n	800d80a <_scanf_chars+0x8e>
 800d7d4:	6823      	ldr	r3, [r4, #0]
 800d7d6:	06da      	lsls	r2, r3, #27
 800d7d8:	bf5e      	ittt	pl
 800d7da:	682b      	ldrpl	r3, [r5, #0]
 800d7dc:	781b      	ldrbpl	r3, [r3, #0]
 800d7de:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d7e2:	682a      	ldr	r2, [r5, #0]
 800d7e4:	686b      	ldr	r3, [r5, #4]
 800d7e6:	3201      	adds	r2, #1
 800d7e8:	602a      	str	r2, [r5, #0]
 800d7ea:	68a2      	ldr	r2, [r4, #8]
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	3a01      	subs	r2, #1
 800d7f0:	606b      	str	r3, [r5, #4]
 800d7f2:	3701      	adds	r7, #1
 800d7f4:	60a2      	str	r2, [r4, #8]
 800d7f6:	b142      	cbz	r2, 800d80a <_scanf_chars+0x8e>
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	dcd7      	bgt.n	800d7ac <_scanf_chars+0x30>
 800d7fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d800:	4629      	mov	r1, r5
 800d802:	4640      	mov	r0, r8
 800d804:	4798      	blx	r3
 800d806:	2800      	cmp	r0, #0
 800d808:	d0d0      	beq.n	800d7ac <_scanf_chars+0x30>
 800d80a:	6823      	ldr	r3, [r4, #0]
 800d80c:	f013 0310 	ands.w	r3, r3, #16
 800d810:	d105      	bne.n	800d81e <_scanf_chars+0xa2>
 800d812:	68e2      	ldr	r2, [r4, #12]
 800d814:	3201      	adds	r2, #1
 800d816:	60e2      	str	r2, [r4, #12]
 800d818:	69a2      	ldr	r2, [r4, #24]
 800d81a:	b102      	cbz	r2, 800d81e <_scanf_chars+0xa2>
 800d81c:	7033      	strb	r3, [r6, #0]
 800d81e:	6923      	ldr	r3, [r4, #16]
 800d820:	443b      	add	r3, r7
 800d822:	6123      	str	r3, [r4, #16]
 800d824:	2000      	movs	r0, #0
 800d826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d82a:	bf00      	nop
 800d82c:	080263a6 	.word	0x080263a6

0800d830 <_scanf_i>:
 800d830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d834:	4698      	mov	r8, r3
 800d836:	4b76      	ldr	r3, [pc, #472]	; (800da10 <_scanf_i+0x1e0>)
 800d838:	460c      	mov	r4, r1
 800d83a:	4682      	mov	sl, r0
 800d83c:	4616      	mov	r6, r2
 800d83e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d842:	b087      	sub	sp, #28
 800d844:	ab03      	add	r3, sp, #12
 800d846:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d84a:	4b72      	ldr	r3, [pc, #456]	; (800da14 <_scanf_i+0x1e4>)
 800d84c:	69a1      	ldr	r1, [r4, #24]
 800d84e:	4a72      	ldr	r2, [pc, #456]	; (800da18 <_scanf_i+0x1e8>)
 800d850:	2903      	cmp	r1, #3
 800d852:	bf18      	it	ne
 800d854:	461a      	movne	r2, r3
 800d856:	68a3      	ldr	r3, [r4, #8]
 800d858:	9201      	str	r2, [sp, #4]
 800d85a:	1e5a      	subs	r2, r3, #1
 800d85c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d860:	bf88      	it	hi
 800d862:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d866:	4627      	mov	r7, r4
 800d868:	bf82      	ittt	hi
 800d86a:	eb03 0905 	addhi.w	r9, r3, r5
 800d86e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d872:	60a3      	strhi	r3, [r4, #8]
 800d874:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d878:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d87c:	bf98      	it	ls
 800d87e:	f04f 0900 	movls.w	r9, #0
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	463d      	mov	r5, r7
 800d886:	f04f 0b00 	mov.w	fp, #0
 800d88a:	6831      	ldr	r1, [r6, #0]
 800d88c:	ab03      	add	r3, sp, #12
 800d88e:	7809      	ldrb	r1, [r1, #0]
 800d890:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d894:	2202      	movs	r2, #2
 800d896:	f7f2 fd13 	bl	80002c0 <memchr>
 800d89a:	b328      	cbz	r0, 800d8e8 <_scanf_i+0xb8>
 800d89c:	f1bb 0f01 	cmp.w	fp, #1
 800d8a0:	d159      	bne.n	800d956 <_scanf_i+0x126>
 800d8a2:	6862      	ldr	r2, [r4, #4]
 800d8a4:	b92a      	cbnz	r2, 800d8b2 <_scanf_i+0x82>
 800d8a6:	6822      	ldr	r2, [r4, #0]
 800d8a8:	2308      	movs	r3, #8
 800d8aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8ae:	6063      	str	r3, [r4, #4]
 800d8b0:	6022      	str	r2, [r4, #0]
 800d8b2:	6822      	ldr	r2, [r4, #0]
 800d8b4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d8b8:	6022      	str	r2, [r4, #0]
 800d8ba:	68a2      	ldr	r2, [r4, #8]
 800d8bc:	1e51      	subs	r1, r2, #1
 800d8be:	60a1      	str	r1, [r4, #8]
 800d8c0:	b192      	cbz	r2, 800d8e8 <_scanf_i+0xb8>
 800d8c2:	6832      	ldr	r2, [r6, #0]
 800d8c4:	1c51      	adds	r1, r2, #1
 800d8c6:	6031      	str	r1, [r6, #0]
 800d8c8:	7812      	ldrb	r2, [r2, #0]
 800d8ca:	f805 2b01 	strb.w	r2, [r5], #1
 800d8ce:	6872      	ldr	r2, [r6, #4]
 800d8d0:	3a01      	subs	r2, #1
 800d8d2:	2a00      	cmp	r2, #0
 800d8d4:	6072      	str	r2, [r6, #4]
 800d8d6:	dc07      	bgt.n	800d8e8 <_scanf_i+0xb8>
 800d8d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d8dc:	4631      	mov	r1, r6
 800d8de:	4650      	mov	r0, sl
 800d8e0:	4790      	blx	r2
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f040 8085 	bne.w	800d9f2 <_scanf_i+0x1c2>
 800d8e8:	f10b 0b01 	add.w	fp, fp, #1
 800d8ec:	f1bb 0f03 	cmp.w	fp, #3
 800d8f0:	d1cb      	bne.n	800d88a <_scanf_i+0x5a>
 800d8f2:	6863      	ldr	r3, [r4, #4]
 800d8f4:	b90b      	cbnz	r3, 800d8fa <_scanf_i+0xca>
 800d8f6:	230a      	movs	r3, #10
 800d8f8:	6063      	str	r3, [r4, #4]
 800d8fa:	6863      	ldr	r3, [r4, #4]
 800d8fc:	4947      	ldr	r1, [pc, #284]	; (800da1c <_scanf_i+0x1ec>)
 800d8fe:	6960      	ldr	r0, [r4, #20]
 800d900:	1ac9      	subs	r1, r1, r3
 800d902:	f000 f89f 	bl	800da44 <__sccl>
 800d906:	f04f 0b00 	mov.w	fp, #0
 800d90a:	68a3      	ldr	r3, [r4, #8]
 800d90c:	6822      	ldr	r2, [r4, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d03d      	beq.n	800d98e <_scanf_i+0x15e>
 800d912:	6831      	ldr	r1, [r6, #0]
 800d914:	6960      	ldr	r0, [r4, #20]
 800d916:	f891 c000 	ldrb.w	ip, [r1]
 800d91a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d91e:	2800      	cmp	r0, #0
 800d920:	d035      	beq.n	800d98e <_scanf_i+0x15e>
 800d922:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d926:	d124      	bne.n	800d972 <_scanf_i+0x142>
 800d928:	0510      	lsls	r0, r2, #20
 800d92a:	d522      	bpl.n	800d972 <_scanf_i+0x142>
 800d92c:	f10b 0b01 	add.w	fp, fp, #1
 800d930:	f1b9 0f00 	cmp.w	r9, #0
 800d934:	d003      	beq.n	800d93e <_scanf_i+0x10e>
 800d936:	3301      	adds	r3, #1
 800d938:	f109 39ff 	add.w	r9, r9, #4294967295
 800d93c:	60a3      	str	r3, [r4, #8]
 800d93e:	6873      	ldr	r3, [r6, #4]
 800d940:	3b01      	subs	r3, #1
 800d942:	2b00      	cmp	r3, #0
 800d944:	6073      	str	r3, [r6, #4]
 800d946:	dd1b      	ble.n	800d980 <_scanf_i+0x150>
 800d948:	6833      	ldr	r3, [r6, #0]
 800d94a:	3301      	adds	r3, #1
 800d94c:	6033      	str	r3, [r6, #0]
 800d94e:	68a3      	ldr	r3, [r4, #8]
 800d950:	3b01      	subs	r3, #1
 800d952:	60a3      	str	r3, [r4, #8]
 800d954:	e7d9      	b.n	800d90a <_scanf_i+0xda>
 800d956:	f1bb 0f02 	cmp.w	fp, #2
 800d95a:	d1ae      	bne.n	800d8ba <_scanf_i+0x8a>
 800d95c:	6822      	ldr	r2, [r4, #0]
 800d95e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800d962:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d966:	d1bf      	bne.n	800d8e8 <_scanf_i+0xb8>
 800d968:	2310      	movs	r3, #16
 800d96a:	6063      	str	r3, [r4, #4]
 800d96c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d970:	e7a2      	b.n	800d8b8 <_scanf_i+0x88>
 800d972:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800d976:	6022      	str	r2, [r4, #0]
 800d978:	780b      	ldrb	r3, [r1, #0]
 800d97a:	f805 3b01 	strb.w	r3, [r5], #1
 800d97e:	e7de      	b.n	800d93e <_scanf_i+0x10e>
 800d980:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d984:	4631      	mov	r1, r6
 800d986:	4650      	mov	r0, sl
 800d988:	4798      	blx	r3
 800d98a:	2800      	cmp	r0, #0
 800d98c:	d0df      	beq.n	800d94e <_scanf_i+0x11e>
 800d98e:	6823      	ldr	r3, [r4, #0]
 800d990:	05db      	lsls	r3, r3, #23
 800d992:	d50d      	bpl.n	800d9b0 <_scanf_i+0x180>
 800d994:	42bd      	cmp	r5, r7
 800d996:	d909      	bls.n	800d9ac <_scanf_i+0x17c>
 800d998:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d99c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d9a0:	4632      	mov	r2, r6
 800d9a2:	4650      	mov	r0, sl
 800d9a4:	4798      	blx	r3
 800d9a6:	f105 39ff 	add.w	r9, r5, #4294967295
 800d9aa:	464d      	mov	r5, r9
 800d9ac:	42bd      	cmp	r5, r7
 800d9ae:	d02d      	beq.n	800da0c <_scanf_i+0x1dc>
 800d9b0:	6822      	ldr	r2, [r4, #0]
 800d9b2:	f012 0210 	ands.w	r2, r2, #16
 800d9b6:	d113      	bne.n	800d9e0 <_scanf_i+0x1b0>
 800d9b8:	702a      	strb	r2, [r5, #0]
 800d9ba:	6863      	ldr	r3, [r4, #4]
 800d9bc:	9e01      	ldr	r6, [sp, #4]
 800d9be:	4639      	mov	r1, r7
 800d9c0:	4650      	mov	r0, sl
 800d9c2:	47b0      	blx	r6
 800d9c4:	6821      	ldr	r1, [r4, #0]
 800d9c6:	f8d8 3000 	ldr.w	r3, [r8]
 800d9ca:	f011 0f20 	tst.w	r1, #32
 800d9ce:	d013      	beq.n	800d9f8 <_scanf_i+0x1c8>
 800d9d0:	1d1a      	adds	r2, r3, #4
 800d9d2:	f8c8 2000 	str.w	r2, [r8]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6018      	str	r0, [r3, #0]
 800d9da:	68e3      	ldr	r3, [r4, #12]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	60e3      	str	r3, [r4, #12]
 800d9e0:	1bed      	subs	r5, r5, r7
 800d9e2:	44ab      	add	fp, r5
 800d9e4:	6925      	ldr	r5, [r4, #16]
 800d9e6:	445d      	add	r5, fp
 800d9e8:	6125      	str	r5, [r4, #16]
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	b007      	add	sp, #28
 800d9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f2:	f04f 0b00 	mov.w	fp, #0
 800d9f6:	e7ca      	b.n	800d98e <_scanf_i+0x15e>
 800d9f8:	1d1a      	adds	r2, r3, #4
 800d9fa:	f8c8 2000 	str.w	r2, [r8]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f011 0f01 	tst.w	r1, #1
 800da04:	bf14      	ite	ne
 800da06:	8018      	strhne	r0, [r3, #0]
 800da08:	6018      	streq	r0, [r3, #0]
 800da0a:	e7e6      	b.n	800d9da <_scanf_i+0x1aa>
 800da0c:	2001      	movs	r0, #1
 800da0e:	e7ed      	b.n	800d9ec <_scanf_i+0x1bc>
 800da10:	0800df04 	.word	0x0800df04
 800da14:	0800cea9 	.word	0x0800cea9
 800da18:	0800dc41 	.word	0x0800dc41
 800da1c:	080264c9 	.word	0x080264c9

0800da20 <_read_r>:
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	4d07      	ldr	r5, [pc, #28]	; (800da40 <_read_r+0x20>)
 800da24:	4604      	mov	r4, r0
 800da26:	4608      	mov	r0, r1
 800da28:	4611      	mov	r1, r2
 800da2a:	2200      	movs	r2, #0
 800da2c:	602a      	str	r2, [r5, #0]
 800da2e:	461a      	mov	r2, r3
 800da30:	f000 f9fe 	bl	800de30 <_read>
 800da34:	1c43      	adds	r3, r0, #1
 800da36:	d102      	bne.n	800da3e <_read_r+0x1e>
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	b103      	cbz	r3, 800da3e <_read_r+0x1e>
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	bd38      	pop	{r3, r4, r5, pc}
 800da40:	20000b50 	.word	0x20000b50

0800da44 <__sccl>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	780b      	ldrb	r3, [r1, #0]
 800da48:	4604      	mov	r4, r0
 800da4a:	2b5e      	cmp	r3, #94	; 0x5e
 800da4c:	bf0b      	itete	eq
 800da4e:	784b      	ldrbeq	r3, [r1, #1]
 800da50:	1c48      	addne	r0, r1, #1
 800da52:	1c88      	addeq	r0, r1, #2
 800da54:	2200      	movne	r2, #0
 800da56:	bf08      	it	eq
 800da58:	2201      	moveq	r2, #1
 800da5a:	1e61      	subs	r1, r4, #1
 800da5c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800da60:	f801 2f01 	strb.w	r2, [r1, #1]!
 800da64:	42a9      	cmp	r1, r5
 800da66:	d1fb      	bne.n	800da60 <__sccl+0x1c>
 800da68:	b90b      	cbnz	r3, 800da6e <__sccl+0x2a>
 800da6a:	3801      	subs	r0, #1
 800da6c:	bd70      	pop	{r4, r5, r6, pc}
 800da6e:	f082 0201 	eor.w	r2, r2, #1
 800da72:	54e2      	strb	r2, [r4, r3]
 800da74:	4605      	mov	r5, r0
 800da76:	4628      	mov	r0, r5
 800da78:	f810 1b01 	ldrb.w	r1, [r0], #1
 800da7c:	292d      	cmp	r1, #45	; 0x2d
 800da7e:	d006      	beq.n	800da8e <__sccl+0x4a>
 800da80:	295d      	cmp	r1, #93	; 0x5d
 800da82:	d0f3      	beq.n	800da6c <__sccl+0x28>
 800da84:	b909      	cbnz	r1, 800da8a <__sccl+0x46>
 800da86:	4628      	mov	r0, r5
 800da88:	e7f0      	b.n	800da6c <__sccl+0x28>
 800da8a:	460b      	mov	r3, r1
 800da8c:	e7f1      	b.n	800da72 <__sccl+0x2e>
 800da8e:	786e      	ldrb	r6, [r5, #1]
 800da90:	2e5d      	cmp	r6, #93	; 0x5d
 800da92:	d0fa      	beq.n	800da8a <__sccl+0x46>
 800da94:	42b3      	cmp	r3, r6
 800da96:	dcf8      	bgt.n	800da8a <__sccl+0x46>
 800da98:	3502      	adds	r5, #2
 800da9a:	4619      	mov	r1, r3
 800da9c:	3101      	adds	r1, #1
 800da9e:	428e      	cmp	r6, r1
 800daa0:	5462      	strb	r2, [r4, r1]
 800daa2:	dcfb      	bgt.n	800da9c <__sccl+0x58>
 800daa4:	1af1      	subs	r1, r6, r3
 800daa6:	3901      	subs	r1, #1
 800daa8:	1c58      	adds	r0, r3, #1
 800daaa:	42b3      	cmp	r3, r6
 800daac:	bfa8      	it	ge
 800daae:	2100      	movge	r1, #0
 800dab0:	1843      	adds	r3, r0, r1
 800dab2:	e7e0      	b.n	800da76 <__sccl+0x32>

0800dab4 <_raise_r>:
 800dab4:	291f      	cmp	r1, #31
 800dab6:	b538      	push	{r3, r4, r5, lr}
 800dab8:	4604      	mov	r4, r0
 800daba:	460d      	mov	r5, r1
 800dabc:	d904      	bls.n	800dac8 <_raise_r+0x14>
 800dabe:	2316      	movs	r3, #22
 800dac0:	6003      	str	r3, [r0, #0]
 800dac2:	f04f 30ff 	mov.w	r0, #4294967295
 800dac6:	bd38      	pop	{r3, r4, r5, pc}
 800dac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800daca:	b112      	cbz	r2, 800dad2 <_raise_r+0x1e>
 800dacc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dad0:	b94b      	cbnz	r3, 800dae6 <_raise_r+0x32>
 800dad2:	4620      	mov	r0, r4
 800dad4:	f000 f830 	bl	800db38 <_getpid_r>
 800dad8:	462a      	mov	r2, r5
 800dada:	4601      	mov	r1, r0
 800dadc:	4620      	mov	r0, r4
 800dade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dae2:	f000 b817 	b.w	800db14 <_kill_r>
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d00a      	beq.n	800db00 <_raise_r+0x4c>
 800daea:	1c59      	adds	r1, r3, #1
 800daec:	d103      	bne.n	800daf6 <_raise_r+0x42>
 800daee:	2316      	movs	r3, #22
 800daf0:	6003      	str	r3, [r0, #0]
 800daf2:	2001      	movs	r0, #1
 800daf4:	e7e7      	b.n	800dac6 <_raise_r+0x12>
 800daf6:	2400      	movs	r4, #0
 800daf8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dafc:	4628      	mov	r0, r5
 800dafe:	4798      	blx	r3
 800db00:	2000      	movs	r0, #0
 800db02:	e7e0      	b.n	800dac6 <_raise_r+0x12>

0800db04 <raise>:
 800db04:	4b02      	ldr	r3, [pc, #8]	; (800db10 <raise+0xc>)
 800db06:	4601      	mov	r1, r0
 800db08:	6818      	ldr	r0, [r3, #0]
 800db0a:	f7ff bfd3 	b.w	800dab4 <_raise_r>
 800db0e:	bf00      	nop
 800db10:	200000cc 	.word	0x200000cc

0800db14 <_kill_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	4d07      	ldr	r5, [pc, #28]	; (800db34 <_kill_r+0x20>)
 800db18:	2300      	movs	r3, #0
 800db1a:	4604      	mov	r4, r0
 800db1c:	4608      	mov	r0, r1
 800db1e:	4611      	mov	r1, r2
 800db20:	602b      	str	r3, [r5, #0]
 800db22:	f000 f975 	bl	800de10 <_kill>
 800db26:	1c43      	adds	r3, r0, #1
 800db28:	d102      	bne.n	800db30 <_kill_r+0x1c>
 800db2a:	682b      	ldr	r3, [r5, #0]
 800db2c:	b103      	cbz	r3, 800db30 <_kill_r+0x1c>
 800db2e:	6023      	str	r3, [r4, #0]
 800db30:	bd38      	pop	{r3, r4, r5, pc}
 800db32:	bf00      	nop
 800db34:	20000b50 	.word	0x20000b50

0800db38 <_getpid_r>:
 800db38:	f000 b952 	b.w	800dde0 <_getpid>

0800db3c <_strtol_l.constprop.0>:
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db42:	d001      	beq.n	800db48 <_strtol_l.constprop.0+0xc>
 800db44:	2b24      	cmp	r3, #36	; 0x24
 800db46:	d906      	bls.n	800db56 <_strtol_l.constprop.0+0x1a>
 800db48:	f000 f8c4 	bl	800dcd4 <__errno>
 800db4c:	2316      	movs	r3, #22
 800db4e:	6003      	str	r3, [r0, #0]
 800db50:	2000      	movs	r0, #0
 800db52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db56:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dc3c <_strtol_l.constprop.0+0x100>
 800db5a:	460d      	mov	r5, r1
 800db5c:	462e      	mov	r6, r5
 800db5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800db62:	f814 700c 	ldrb.w	r7, [r4, ip]
 800db66:	f017 0708 	ands.w	r7, r7, #8
 800db6a:	d1f7      	bne.n	800db5c <_strtol_l.constprop.0+0x20>
 800db6c:	2c2d      	cmp	r4, #45	; 0x2d
 800db6e:	d132      	bne.n	800dbd6 <_strtol_l.constprop.0+0x9a>
 800db70:	782c      	ldrb	r4, [r5, #0]
 800db72:	2701      	movs	r7, #1
 800db74:	1cb5      	adds	r5, r6, #2
 800db76:	2b00      	cmp	r3, #0
 800db78:	d05b      	beq.n	800dc32 <_strtol_l.constprop.0+0xf6>
 800db7a:	2b10      	cmp	r3, #16
 800db7c:	d109      	bne.n	800db92 <_strtol_l.constprop.0+0x56>
 800db7e:	2c30      	cmp	r4, #48	; 0x30
 800db80:	d107      	bne.n	800db92 <_strtol_l.constprop.0+0x56>
 800db82:	782c      	ldrb	r4, [r5, #0]
 800db84:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800db88:	2c58      	cmp	r4, #88	; 0x58
 800db8a:	d14d      	bne.n	800dc28 <_strtol_l.constprop.0+0xec>
 800db8c:	786c      	ldrb	r4, [r5, #1]
 800db8e:	2310      	movs	r3, #16
 800db90:	3502      	adds	r5, #2
 800db92:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800db96:	f108 38ff 	add.w	r8, r8, #4294967295
 800db9a:	f04f 0c00 	mov.w	ip, #0
 800db9e:	fbb8 f9f3 	udiv	r9, r8, r3
 800dba2:	4666      	mov	r6, ip
 800dba4:	fb03 8a19 	mls	sl, r3, r9, r8
 800dba8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dbac:	f1be 0f09 	cmp.w	lr, #9
 800dbb0:	d816      	bhi.n	800dbe0 <_strtol_l.constprop.0+0xa4>
 800dbb2:	4674      	mov	r4, lr
 800dbb4:	42a3      	cmp	r3, r4
 800dbb6:	dd24      	ble.n	800dc02 <_strtol_l.constprop.0+0xc6>
 800dbb8:	f1bc 0f00 	cmp.w	ip, #0
 800dbbc:	db1e      	blt.n	800dbfc <_strtol_l.constprop.0+0xc0>
 800dbbe:	45b1      	cmp	r9, r6
 800dbc0:	d31c      	bcc.n	800dbfc <_strtol_l.constprop.0+0xc0>
 800dbc2:	d101      	bne.n	800dbc8 <_strtol_l.constprop.0+0x8c>
 800dbc4:	45a2      	cmp	sl, r4
 800dbc6:	db19      	blt.n	800dbfc <_strtol_l.constprop.0+0xc0>
 800dbc8:	fb06 4603 	mla	r6, r6, r3, r4
 800dbcc:	f04f 0c01 	mov.w	ip, #1
 800dbd0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbd4:	e7e8      	b.n	800dba8 <_strtol_l.constprop.0+0x6c>
 800dbd6:	2c2b      	cmp	r4, #43	; 0x2b
 800dbd8:	bf04      	itt	eq
 800dbda:	782c      	ldrbeq	r4, [r5, #0]
 800dbdc:	1cb5      	addeq	r5, r6, #2
 800dbde:	e7ca      	b.n	800db76 <_strtol_l.constprop.0+0x3a>
 800dbe0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dbe4:	f1be 0f19 	cmp.w	lr, #25
 800dbe8:	d801      	bhi.n	800dbee <_strtol_l.constprop.0+0xb2>
 800dbea:	3c37      	subs	r4, #55	; 0x37
 800dbec:	e7e2      	b.n	800dbb4 <_strtol_l.constprop.0+0x78>
 800dbee:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dbf2:	f1be 0f19 	cmp.w	lr, #25
 800dbf6:	d804      	bhi.n	800dc02 <_strtol_l.constprop.0+0xc6>
 800dbf8:	3c57      	subs	r4, #87	; 0x57
 800dbfa:	e7db      	b.n	800dbb4 <_strtol_l.constprop.0+0x78>
 800dbfc:	f04f 3cff 	mov.w	ip, #4294967295
 800dc00:	e7e6      	b.n	800dbd0 <_strtol_l.constprop.0+0x94>
 800dc02:	f1bc 0f00 	cmp.w	ip, #0
 800dc06:	da05      	bge.n	800dc14 <_strtol_l.constprop.0+0xd8>
 800dc08:	2322      	movs	r3, #34	; 0x22
 800dc0a:	6003      	str	r3, [r0, #0]
 800dc0c:	4646      	mov	r6, r8
 800dc0e:	b942      	cbnz	r2, 800dc22 <_strtol_l.constprop.0+0xe6>
 800dc10:	4630      	mov	r0, r6
 800dc12:	e79e      	b.n	800db52 <_strtol_l.constprop.0+0x16>
 800dc14:	b107      	cbz	r7, 800dc18 <_strtol_l.constprop.0+0xdc>
 800dc16:	4276      	negs	r6, r6
 800dc18:	2a00      	cmp	r2, #0
 800dc1a:	d0f9      	beq.n	800dc10 <_strtol_l.constprop.0+0xd4>
 800dc1c:	f1bc 0f00 	cmp.w	ip, #0
 800dc20:	d000      	beq.n	800dc24 <_strtol_l.constprop.0+0xe8>
 800dc22:	1e69      	subs	r1, r5, #1
 800dc24:	6011      	str	r1, [r2, #0]
 800dc26:	e7f3      	b.n	800dc10 <_strtol_l.constprop.0+0xd4>
 800dc28:	2430      	movs	r4, #48	; 0x30
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d1b1      	bne.n	800db92 <_strtol_l.constprop.0+0x56>
 800dc2e:	2308      	movs	r3, #8
 800dc30:	e7af      	b.n	800db92 <_strtol_l.constprop.0+0x56>
 800dc32:	2c30      	cmp	r4, #48	; 0x30
 800dc34:	d0a5      	beq.n	800db82 <_strtol_l.constprop.0+0x46>
 800dc36:	230a      	movs	r3, #10
 800dc38:	e7ab      	b.n	800db92 <_strtol_l.constprop.0+0x56>
 800dc3a:	bf00      	nop
 800dc3c:	080263a6 	.word	0x080263a6

0800dc40 <_strtol_r>:
 800dc40:	f7ff bf7c 	b.w	800db3c <_strtol_l.constprop.0>

0800dc44 <__submore>:
 800dc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc48:	460c      	mov	r4, r1
 800dc4a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dc4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc50:	4299      	cmp	r1, r3
 800dc52:	d11d      	bne.n	800dc90 <__submore+0x4c>
 800dc54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dc58:	f7fc f914 	bl	8009e84 <_malloc_r>
 800dc5c:	b918      	cbnz	r0, 800dc66 <__submore+0x22>
 800dc5e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc6a:	63a3      	str	r3, [r4, #56]	; 0x38
 800dc6c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dc70:	6360      	str	r0, [r4, #52]	; 0x34
 800dc72:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dc76:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dc7a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dc7e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dc82:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dc86:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dc8a:	6020      	str	r0, [r4, #0]
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	e7e8      	b.n	800dc62 <__submore+0x1e>
 800dc90:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dc92:	0077      	lsls	r7, r6, #1
 800dc94:	463a      	mov	r2, r7
 800dc96:	f7ff fb6f 	bl	800d378 <_realloc_r>
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d0de      	beq.n	800dc5e <__submore+0x1a>
 800dca0:	eb00 0806 	add.w	r8, r0, r6
 800dca4:	4601      	mov	r1, r0
 800dca6:	4632      	mov	r2, r6
 800dca8:	4640      	mov	r0, r8
 800dcaa:	f7fe f972 	bl	800bf92 <memcpy>
 800dcae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dcb2:	f8c4 8000 	str.w	r8, [r4]
 800dcb6:	e7e9      	b.n	800dc8c <__submore+0x48>

0800dcb8 <__ascii_wctomb>:
 800dcb8:	b149      	cbz	r1, 800dcce <__ascii_wctomb+0x16>
 800dcba:	2aff      	cmp	r2, #255	; 0xff
 800dcbc:	bf85      	ittet	hi
 800dcbe:	238a      	movhi	r3, #138	; 0x8a
 800dcc0:	6003      	strhi	r3, [r0, #0]
 800dcc2:	700a      	strbls	r2, [r1, #0]
 800dcc4:	f04f 30ff 	movhi.w	r0, #4294967295
 800dcc8:	bf98      	it	ls
 800dcca:	2001      	movls	r0, #1
 800dccc:	4770      	bx	lr
 800dcce:	4608      	mov	r0, r1
 800dcd0:	4770      	bx	lr
	...

0800dcd4 <__errno>:
 800dcd4:	4b01      	ldr	r3, [pc, #4]	; (800dcdc <__errno+0x8>)
 800dcd6:	6818      	ldr	r0, [r3, #0]
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	200000cc 	.word	0x200000cc

0800dce0 <_fstat_r>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	4d07      	ldr	r5, [pc, #28]	; (800dd00 <_fstat_r+0x20>)
 800dce4:	2300      	movs	r3, #0
 800dce6:	4604      	mov	r4, r0
 800dce8:	4608      	mov	r0, r1
 800dcea:	4611      	mov	r1, r2
 800dcec:	602b      	str	r3, [r5, #0]
 800dcee:	f000 f86f 	bl	800ddd0 <_fstat>
 800dcf2:	1c43      	adds	r3, r0, #1
 800dcf4:	d102      	bne.n	800dcfc <_fstat_r+0x1c>
 800dcf6:	682b      	ldr	r3, [r5, #0]
 800dcf8:	b103      	cbz	r3, 800dcfc <_fstat_r+0x1c>
 800dcfa:	6023      	str	r3, [r4, #0]
 800dcfc:	bd38      	pop	{r3, r4, r5, pc}
 800dcfe:	bf00      	nop
 800dd00:	20000b50 	.word	0x20000b50

0800dd04 <_isatty_r>:
 800dd04:	b538      	push	{r3, r4, r5, lr}
 800dd06:	4d06      	ldr	r5, [pc, #24]	; (800dd20 <_isatty_r+0x1c>)
 800dd08:	2300      	movs	r3, #0
 800dd0a:	4604      	mov	r4, r0
 800dd0c:	4608      	mov	r0, r1
 800dd0e:	602b      	str	r3, [r5, #0]
 800dd10:	f000 f876 	bl	800de00 <_isatty>
 800dd14:	1c43      	adds	r3, r0, #1
 800dd16:	d102      	bne.n	800dd1e <_isatty_r+0x1a>
 800dd18:	682b      	ldr	r3, [r5, #0]
 800dd1a:	b103      	cbz	r3, 800dd1e <_isatty_r+0x1a>
 800dd1c:	6023      	str	r3, [r4, #0]
 800dd1e:	bd38      	pop	{r3, r4, r5, pc}
 800dd20:	20000b50 	.word	0x20000b50

0800dd24 <_malloc_usable_size_r>:
 800dd24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd28:	1f18      	subs	r0, r3, #4
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	bfbc      	itt	lt
 800dd2e:	580b      	ldrlt	r3, [r1, r0]
 800dd30:	18c0      	addlt	r0, r0, r3
 800dd32:	4770      	bx	lr

0800dd34 <roundf>:
 800dd34:	ee10 0a10 	vmov	r0, s0
 800dd38:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800dd3c:	3a7f      	subs	r2, #127	; 0x7f
 800dd3e:	2a16      	cmp	r2, #22
 800dd40:	dc15      	bgt.n	800dd6e <roundf+0x3a>
 800dd42:	2a00      	cmp	r2, #0
 800dd44:	da08      	bge.n	800dd58 <roundf+0x24>
 800dd46:	3201      	adds	r2, #1
 800dd48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800dd4c:	d101      	bne.n	800dd52 <roundf+0x1e>
 800dd4e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800dd52:	ee00 3a10 	vmov	s0, r3
 800dd56:	4770      	bx	lr
 800dd58:	4907      	ldr	r1, [pc, #28]	; (800dd78 <roundf+0x44>)
 800dd5a:	4111      	asrs	r1, r2
 800dd5c:	4208      	tst	r0, r1
 800dd5e:	d0fa      	beq.n	800dd56 <roundf+0x22>
 800dd60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800dd64:	4113      	asrs	r3, r2
 800dd66:	4403      	add	r3, r0
 800dd68:	ea23 0301 	bic.w	r3, r3, r1
 800dd6c:	e7f1      	b.n	800dd52 <roundf+0x1e>
 800dd6e:	2a80      	cmp	r2, #128	; 0x80
 800dd70:	d1f1      	bne.n	800dd56 <roundf+0x22>
 800dd72:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dd76:	4770      	bx	lr
 800dd78:	007fffff 	.word	0x007fffff

0800dd7c <sqrtf>:
 800dd7c:	b508      	push	{r3, lr}
 800dd7e:	ed2d 8b02 	vpush	{d8}
 800dd82:	eeb0 8a40 	vmov.f32	s16, s0
 800dd86:	f000 f817 	bl	800ddb8 <__ieee754_sqrtf>
 800dd8a:	eeb4 8a48 	vcmp.f32	s16, s16
 800dd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd92:	d60c      	bvs.n	800ddae <sqrtf+0x32>
 800dd94:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ddb4 <sqrtf+0x38>
 800dd98:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800dd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda0:	d505      	bpl.n	800ddae <sqrtf+0x32>
 800dda2:	f7ff ff97 	bl	800dcd4 <__errno>
 800dda6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ddaa:	2321      	movs	r3, #33	; 0x21
 800ddac:	6003      	str	r3, [r0, #0]
 800ddae:	ecbd 8b02 	vpop	{d8}
 800ddb2:	bd08      	pop	{r3, pc}
 800ddb4:	00000000 	.word	0x00000000

0800ddb8 <__ieee754_sqrtf>:
 800ddb8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ddbc:	4770      	bx	lr
	...

0800ddc0 <_close>:
 800ddc0:	4b02      	ldr	r3, [pc, #8]	; (800ddcc <_close+0xc>)
 800ddc2:	2258      	movs	r2, #88	; 0x58
 800ddc4:	601a      	str	r2, [r3, #0]
 800ddc6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddca:	4770      	bx	lr
 800ddcc:	20000b50 	.word	0x20000b50

0800ddd0 <_fstat>:
 800ddd0:	4b02      	ldr	r3, [pc, #8]	; (800dddc <_fstat+0xc>)
 800ddd2:	2258      	movs	r2, #88	; 0x58
 800ddd4:	601a      	str	r2, [r3, #0]
 800ddd6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddda:	4770      	bx	lr
 800dddc:	20000b50 	.word	0x20000b50

0800dde0 <_getpid>:
 800dde0:	4b02      	ldr	r3, [pc, #8]	; (800ddec <_getpid+0xc>)
 800dde2:	2258      	movs	r2, #88	; 0x58
 800dde4:	601a      	str	r2, [r3, #0]
 800dde6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddea:	4770      	bx	lr
 800ddec:	20000b50 	.word	0x20000b50

0800ddf0 <_gettimeofday>:
 800ddf0:	4b02      	ldr	r3, [pc, #8]	; (800ddfc <_gettimeofday+0xc>)
 800ddf2:	2258      	movs	r2, #88	; 0x58
 800ddf4:	601a      	str	r2, [r3, #0]
 800ddf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ddfa:	4770      	bx	lr
 800ddfc:	20000b50 	.word	0x20000b50

0800de00 <_isatty>:
 800de00:	4b02      	ldr	r3, [pc, #8]	; (800de0c <_isatty+0xc>)
 800de02:	2258      	movs	r2, #88	; 0x58
 800de04:	601a      	str	r2, [r3, #0]
 800de06:	2000      	movs	r0, #0
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	20000b50 	.word	0x20000b50

0800de10 <_kill>:
 800de10:	4b02      	ldr	r3, [pc, #8]	; (800de1c <_kill+0xc>)
 800de12:	2258      	movs	r2, #88	; 0x58
 800de14:	601a      	str	r2, [r3, #0]
 800de16:	f04f 30ff 	mov.w	r0, #4294967295
 800de1a:	4770      	bx	lr
 800de1c:	20000b50 	.word	0x20000b50

0800de20 <_lseek>:
 800de20:	4b02      	ldr	r3, [pc, #8]	; (800de2c <_lseek+0xc>)
 800de22:	2258      	movs	r2, #88	; 0x58
 800de24:	601a      	str	r2, [r3, #0]
 800de26:	f04f 30ff 	mov.w	r0, #4294967295
 800de2a:	4770      	bx	lr
 800de2c:	20000b50 	.word	0x20000b50

0800de30 <_read>:
 800de30:	4b02      	ldr	r3, [pc, #8]	; (800de3c <_read+0xc>)
 800de32:	2258      	movs	r2, #88	; 0x58
 800de34:	601a      	str	r2, [r3, #0]
 800de36:	f04f 30ff 	mov.w	r0, #4294967295
 800de3a:	4770      	bx	lr
 800de3c:	20000b50 	.word	0x20000b50

0800de40 <_sbrk>:
 800de40:	4a04      	ldr	r2, [pc, #16]	; (800de54 <_sbrk+0x14>)
 800de42:	6811      	ldr	r1, [r2, #0]
 800de44:	4603      	mov	r3, r0
 800de46:	b909      	cbnz	r1, 800de4c <_sbrk+0xc>
 800de48:	4903      	ldr	r1, [pc, #12]	; (800de58 <_sbrk+0x18>)
 800de4a:	6011      	str	r1, [r2, #0]
 800de4c:	6810      	ldr	r0, [r2, #0]
 800de4e:	4403      	add	r3, r0
 800de50:	6013      	str	r3, [r2, #0]
 800de52:	4770      	bx	lr
 800de54:	20000b58 	.word	0x20000b58
 800de58:	20000b60 	.word	0x20000b60

0800de5c <_write>:
 800de5c:	4b02      	ldr	r3, [pc, #8]	; (800de68 <_write+0xc>)
 800de5e:	2258      	movs	r2, #88	; 0x58
 800de60:	601a      	str	r2, [r3, #0]
 800de62:	f04f 30ff 	mov.w	r0, #4294967295
 800de66:	4770      	bx	lr
 800de68:	20000b50 	.word	0x20000b50

0800de6c <_exit>:
 800de6c:	e7fe      	b.n	800de6c <_exit>
	...

0800de70 <_init>:
 800de70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de72:	bf00      	nop
 800de74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de76:	bc08      	pop	{r3}
 800de78:	469e      	mov	lr, r3
 800de7a:	4770      	bx	lr

0800de7c <_fini>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	bf00      	nop
 800de80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de82:	bc08      	pop	{r3}
 800de84:	469e      	mov	lr, r3
 800de86:	4770      	bx	lr
