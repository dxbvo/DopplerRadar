
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd80  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018674  0800df30  0800df30  0001df30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080265a4  080265a4  00040300  2**0
                  CONTENTS
  4 .ARM          00000008  080265a4  080265a4  000365a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080265ac  080265ac  00040300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080265ac  080265ac  000365ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080265b0  080265b0  000365b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  080265b4  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000300  080268b4  00040300  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b60  080268b4  00040b60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040300  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178df  00000000  00000000  00040330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b85  00000000  00000000  00057c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001518  00000000  00000000  0005b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013c0  00000000  00000000  0005ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000279c7  00000000  00000000  0005e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198c9  00000000  00000000  00085a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e196c  00000000  00000000  0009f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  00180c6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070fc  00000000  00000000  00180d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002178  00000000  00000000  00187e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000e4  00000000  00000000  00189fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001fd  00000000  00000000  0018a084  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000300 	.word	0x20000300
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800df18 	.word	0x0800df18

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000304 	.word	0x20000304
 80001ec:	0800df18 	.word	0x0800df18

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <strcmp>:
 8000360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000368:	2a01      	cmp	r2, #1
 800036a:	bf28      	it	cs
 800036c:	429a      	cmpcs	r2, r3
 800036e:	d0f7      	beq.n	8000360 <strcmp>
 8000370:	1ad0      	subs	r0, r2, r3
 8000372:	4770      	bx	lr

08000374 <__aeabi_drsub>:
 8000374:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000378:	e002      	b.n	8000380 <__adddf3>
 800037a:	bf00      	nop

0800037c <__aeabi_dsub>:
 800037c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000380 <__adddf3>:
 8000380:	b530      	push	{r4, r5, lr}
 8000382:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000386:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800038a:	ea94 0f05 	teq	r4, r5
 800038e:	bf08      	it	eq
 8000390:	ea90 0f02 	teqeq	r0, r2
 8000394:	bf1f      	itttt	ne
 8000396:	ea54 0c00 	orrsne.w	ip, r4, r0
 800039a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a6:	f000 80e2 	beq.w	800056e <__adddf3+0x1ee>
 80003aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003b2:	bfb8      	it	lt
 80003b4:	426d      	neglt	r5, r5
 80003b6:	dd0c      	ble.n	80003d2 <__adddf3+0x52>
 80003b8:	442c      	add	r4, r5
 80003ba:	ea80 0202 	eor.w	r2, r0, r2
 80003be:	ea81 0303 	eor.w	r3, r1, r3
 80003c2:	ea82 0000 	eor.w	r0, r2, r0
 80003c6:	ea83 0101 	eor.w	r1, r3, r1
 80003ca:	ea80 0202 	eor.w	r2, r0, r2
 80003ce:	ea81 0303 	eor.w	r3, r1, r3
 80003d2:	2d36      	cmp	r5, #54	; 0x36
 80003d4:	bf88      	it	hi
 80003d6:	bd30      	pophi	{r4, r5, pc}
 80003d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x70>
 80003ea:	4240      	negs	r0, r0
 80003ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003fc:	d002      	beq.n	8000404 <__adddf3+0x84>
 80003fe:	4252      	negs	r2, r2
 8000400:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000404:	ea94 0f05 	teq	r4, r5
 8000408:	f000 80a7 	beq.w	800055a <__adddf3+0x1da>
 800040c:	f1a4 0401 	sub.w	r4, r4, #1
 8000410:	f1d5 0e20 	rsbs	lr, r5, #32
 8000414:	db0d      	blt.n	8000432 <__adddf3+0xb2>
 8000416:	fa02 fc0e 	lsl.w	ip, r2, lr
 800041a:	fa22 f205 	lsr.w	r2, r2, r5
 800041e:	1880      	adds	r0, r0, r2
 8000420:	f141 0100 	adc.w	r1, r1, #0
 8000424:	fa03 f20e 	lsl.w	r2, r3, lr
 8000428:	1880      	adds	r0, r0, r2
 800042a:	fa43 f305 	asr.w	r3, r3, r5
 800042e:	4159      	adcs	r1, r3
 8000430:	e00e      	b.n	8000450 <__adddf3+0xd0>
 8000432:	f1a5 0520 	sub.w	r5, r5, #32
 8000436:	f10e 0e20 	add.w	lr, lr, #32
 800043a:	2a01      	cmp	r2, #1
 800043c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000440:	bf28      	it	cs
 8000442:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	18c0      	adds	r0, r0, r3
 800044c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	d507      	bpl.n	8000466 <__adddf3+0xe6>
 8000456:	f04f 0e00 	mov.w	lr, #0
 800045a:	f1dc 0c00 	rsbs	ip, ip, #0
 800045e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000462:	eb6e 0101 	sbc.w	r1, lr, r1
 8000466:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800046a:	d31b      	bcc.n	80004a4 <__adddf3+0x124>
 800046c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000470:	d30c      	bcc.n	800048c <__adddf3+0x10c>
 8000472:	0849      	lsrs	r1, r1, #1
 8000474:	ea5f 0030 	movs.w	r0, r0, rrx
 8000478:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800047c:	f104 0401 	add.w	r4, r4, #1
 8000480:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000484:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000488:	f080 809a 	bcs.w	80005c0 <__adddf3+0x240>
 800048c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000490:	bf08      	it	eq
 8000492:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000496:	f150 0000 	adcs.w	r0, r0, #0
 800049a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049e:	ea41 0105 	orr.w	r1, r1, r5
 80004a2:	bd30      	pop	{r4, r5, pc}
 80004a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a8:	4140      	adcs	r0, r0
 80004aa:	eb41 0101 	adc.w	r1, r1, r1
 80004ae:	3c01      	subs	r4, #1
 80004b0:	bf28      	it	cs
 80004b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b6:	d2e9      	bcs.n	800048c <__adddf3+0x10c>
 80004b8:	f091 0f00 	teq	r1, #0
 80004bc:	bf04      	itt	eq
 80004be:	4601      	moveq	r1, r0
 80004c0:	2000      	moveq	r0, #0
 80004c2:	fab1 f381 	clz	r3, r1
 80004c6:	bf08      	it	eq
 80004c8:	3320      	addeq	r3, #32
 80004ca:	f1a3 030b 	sub.w	r3, r3, #11
 80004ce:	f1b3 0220 	subs.w	r2, r3, #32
 80004d2:	da0c      	bge.n	80004ee <__adddf3+0x16e>
 80004d4:	320c      	adds	r2, #12
 80004d6:	dd08      	ble.n	80004ea <__adddf3+0x16a>
 80004d8:	f102 0c14 	add.w	ip, r2, #20
 80004dc:	f1c2 020c 	rsb	r2, r2, #12
 80004e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e4:	fa21 f102 	lsr.w	r1, r1, r2
 80004e8:	e00c      	b.n	8000504 <__adddf3+0x184>
 80004ea:	f102 0214 	add.w	r2, r2, #20
 80004ee:	bfd8      	it	le
 80004f0:	f1c2 0c20 	rsble	ip, r2, #32
 80004f4:	fa01 f102 	lsl.w	r1, r1, r2
 80004f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004fc:	bfdc      	itt	le
 80004fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000502:	4090      	lslle	r0, r2
 8000504:	1ae4      	subs	r4, r4, r3
 8000506:	bfa2      	ittt	ge
 8000508:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800050c:	4329      	orrge	r1, r5
 800050e:	bd30      	popge	{r4, r5, pc}
 8000510:	ea6f 0404 	mvn.w	r4, r4
 8000514:	3c1f      	subs	r4, #31
 8000516:	da1c      	bge.n	8000552 <__adddf3+0x1d2>
 8000518:	340c      	adds	r4, #12
 800051a:	dc0e      	bgt.n	800053a <__adddf3+0x1ba>
 800051c:	f104 0414 	add.w	r4, r4, #20
 8000520:	f1c4 0220 	rsb	r2, r4, #32
 8000524:	fa20 f004 	lsr.w	r0, r0, r4
 8000528:	fa01 f302 	lsl.w	r3, r1, r2
 800052c:	ea40 0003 	orr.w	r0, r0, r3
 8000530:	fa21 f304 	lsr.w	r3, r1, r4
 8000534:	ea45 0103 	orr.w	r1, r5, r3
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	f1c4 040c 	rsb	r4, r4, #12
 800053e:	f1c4 0220 	rsb	r2, r4, #32
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 f304 	lsl.w	r3, r1, r4
 800054a:	ea40 0003 	orr.w	r0, r0, r3
 800054e:	4629      	mov	r1, r5
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	fa21 f004 	lsr.w	r0, r1, r4
 8000556:	4629      	mov	r1, r5
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	f094 0f00 	teq	r4, #0
 800055e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000562:	bf06      	itte	eq
 8000564:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000568:	3401      	addeq	r4, #1
 800056a:	3d01      	subne	r5, #1
 800056c:	e74e      	b.n	800040c <__adddf3+0x8c>
 800056e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000572:	bf18      	it	ne
 8000574:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000578:	d029      	beq.n	80005ce <__adddf3+0x24e>
 800057a:	ea94 0f05 	teq	r4, r5
 800057e:	bf08      	it	eq
 8000580:	ea90 0f02 	teqeq	r0, r2
 8000584:	d005      	beq.n	8000592 <__adddf3+0x212>
 8000586:	ea54 0c00 	orrs.w	ip, r4, r0
 800058a:	bf04      	itt	eq
 800058c:	4619      	moveq	r1, r3
 800058e:	4610      	moveq	r0, r2
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	ea91 0f03 	teq	r1, r3
 8000596:	bf1e      	ittt	ne
 8000598:	2100      	movne	r1, #0
 800059a:	2000      	movne	r0, #0
 800059c:	bd30      	popne	{r4, r5, pc}
 800059e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005a2:	d105      	bne.n	80005b0 <__adddf3+0x230>
 80005a4:	0040      	lsls	r0, r0, #1
 80005a6:	4149      	adcs	r1, r1
 80005a8:	bf28      	it	cs
 80005aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd30      	pop	{r4, r5, pc}
 80005b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b4:	bf3c      	itt	cc
 80005b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ba:	bd30      	popcc	{r4, r5, pc}
 80005bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c8:	f04f 0000 	mov.w	r0, #0
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf1a      	itte	ne
 80005d4:	4619      	movne	r1, r3
 80005d6:	4610      	movne	r0, r2
 80005d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005dc:	bf1c      	itt	ne
 80005de:	460b      	movne	r3, r1
 80005e0:	4602      	movne	r2, r0
 80005e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e6:	bf06      	itte	eq
 80005e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005ec:	ea91 0f03 	teqeq	r1, r3
 80005f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f4:	bd30      	pop	{r4, r5, pc}
 80005f6:	bf00      	nop

080005f8 <__aeabi_ui2d>:
 80005f8:	f090 0f00 	teq	r0, #0
 80005fc:	bf04      	itt	eq
 80005fe:	2100      	moveq	r1, #0
 8000600:	4770      	bxeq	lr
 8000602:	b530      	push	{r4, r5, lr}
 8000604:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000608:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060c:	f04f 0500 	mov.w	r5, #0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e750      	b.n	80004b8 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_i2d>:
 8000618:	f090 0f00 	teq	r0, #0
 800061c:	bf04      	itt	eq
 800061e:	2100      	moveq	r1, #0
 8000620:	4770      	bxeq	lr
 8000622:	b530      	push	{r4, r5, lr}
 8000624:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000628:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000630:	bf48      	it	mi
 8000632:	4240      	negmi	r0, r0
 8000634:	f04f 0100 	mov.w	r1, #0
 8000638:	e73e      	b.n	80004b8 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_f2d>:
 800063c:	0042      	lsls	r2, r0, #1
 800063e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000642:	ea4f 0131 	mov.w	r1, r1, rrx
 8000646:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800064a:	bf1f      	itttt	ne
 800064c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000650:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000654:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000658:	4770      	bxne	lr
 800065a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065e:	bf08      	it	eq
 8000660:	4770      	bxeq	lr
 8000662:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000666:	bf04      	itt	eq
 8000668:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	e71c      	b.n	80004b8 <__adddf3+0x138>
 800067e:	bf00      	nop

08000680 <__aeabi_ul2d>:
 8000680:	ea50 0201 	orrs.w	r2, r0, r1
 8000684:	bf08      	it	eq
 8000686:	4770      	bxeq	lr
 8000688:	b530      	push	{r4, r5, lr}
 800068a:	f04f 0500 	mov.w	r5, #0
 800068e:	e00a      	b.n	80006a6 <__aeabi_l2d+0x16>

08000690 <__aeabi_l2d>:
 8000690:	ea50 0201 	orrs.w	r2, r0, r1
 8000694:	bf08      	it	eq
 8000696:	4770      	bxeq	lr
 8000698:	b530      	push	{r4, r5, lr}
 800069a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069e:	d502      	bpl.n	80006a6 <__aeabi_l2d+0x16>
 80006a0:	4240      	negs	r0, r0
 80006a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006b2:	f43f aed8 	beq.w	8000466 <__adddf3+0xe6>
 80006b6:	f04f 0203 	mov.w	r2, #3
 80006ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006be:	bf18      	it	ne
 80006c0:	3203      	addne	r2, #3
 80006c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c6:	bf18      	it	ne
 80006c8:	3203      	addne	r2, #3
 80006ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ce:	f1c2 0320 	rsb	r3, r2, #32
 80006d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d6:	fa20 f002 	lsr.w	r0, r0, r2
 80006da:	fa01 fe03 	lsl.w	lr, r1, r3
 80006de:	ea40 000e 	orr.w	r0, r0, lr
 80006e2:	fa21 f102 	lsr.w	r1, r1, r2
 80006e6:	4414      	add	r4, r2
 80006e8:	e6bd      	b.n	8000466 <__adddf3+0xe6>
 80006ea:	bf00      	nop

080006ec <__aeabi_dmul>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006fa:	bf1d      	ittte	ne
 80006fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000700:	ea94 0f0c 	teqne	r4, ip
 8000704:	ea95 0f0c 	teqne	r5, ip
 8000708:	f000 f8de 	bleq	80008c8 <__aeabi_dmul+0x1dc>
 800070c:	442c      	add	r4, r5
 800070e:	ea81 0603 	eor.w	r6, r1, r3
 8000712:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000716:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800071a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071e:	bf18      	it	ne
 8000720:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800072c:	d038      	beq.n	80007a0 <__aeabi_dmul+0xb4>
 800072e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	fbe1 e502 	umlal	lr, r5, r1, r2
 800073a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000742:	f04f 0600 	mov.w	r6, #0
 8000746:	fbe1 5603 	umlal	r5, r6, r1, r3
 800074a:	f09c 0f00 	teq	ip, #0
 800074e:	bf18      	it	ne
 8000750:	f04e 0e01 	orrne.w	lr, lr, #1
 8000754:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000758:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800075c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000760:	d204      	bcs.n	800076c <__aeabi_dmul+0x80>
 8000762:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000766:	416d      	adcs	r5, r5
 8000768:	eb46 0606 	adc.w	r6, r6, r6
 800076c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000770:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000774:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000778:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800077c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000780:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000784:	bf88      	it	hi
 8000786:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800078a:	d81e      	bhi.n	80007ca <__aeabi_dmul+0xde>
 800078c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000790:	bf08      	it	eq
 8000792:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000796:	f150 0000 	adcs.w	r0, r0, #0
 800079a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a4:	ea46 0101 	orr.w	r1, r6, r1
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b4:	bfc2      	ittt	gt
 80007b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007be:	bd70      	popgt	{r4, r5, r6, pc}
 80007c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c4:	f04f 0e00 	mov.w	lr, #0
 80007c8:	3c01      	subs	r4, #1
 80007ca:	f300 80ab 	bgt.w	8000924 <__aeabi_dmul+0x238>
 80007ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007d2:	bfde      	ittt	le
 80007d4:	2000      	movle	r0, #0
 80007d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007da:	bd70      	pople	{r4, r5, r6, pc}
 80007dc:	f1c4 0400 	rsb	r4, r4, #0
 80007e0:	3c20      	subs	r4, #32
 80007e2:	da35      	bge.n	8000850 <__aeabi_dmul+0x164>
 80007e4:	340c      	adds	r4, #12
 80007e6:	dc1b      	bgt.n	8000820 <__aeabi_dmul+0x134>
 80007e8:	f104 0414 	add.w	r4, r4, #20
 80007ec:	f1c4 0520 	rsb	r5, r4, #32
 80007f0:	fa00 f305 	lsl.w	r3, r0, r5
 80007f4:	fa20 f004 	lsr.w	r0, r0, r4
 80007f8:	fa01 f205 	lsl.w	r2, r1, r5
 80007fc:	ea40 0002 	orr.w	r0, r0, r2
 8000800:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000804:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	fa21 f604 	lsr.w	r6, r1, r4
 8000810:	eb42 0106 	adc.w	r1, r2, r6
 8000814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000818:	bf08      	it	eq
 800081a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f1c4 040c 	rsb	r4, r4, #12
 8000824:	f1c4 0520 	rsb	r5, r4, #32
 8000828:	fa00 f304 	lsl.w	r3, r0, r4
 800082c:	fa20 f005 	lsr.w	r0, r0, r5
 8000830:	fa01 f204 	lsl.w	r2, r1, r4
 8000834:	ea40 0002 	orr.w	r0, r0, r2
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000840:	f141 0100 	adc.w	r1, r1, #0
 8000844:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000848:	bf08      	it	eq
 800084a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084e:	bd70      	pop	{r4, r5, r6, pc}
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f205 	lsl.w	r2, r0, r5
 8000858:	ea4e 0e02 	orr.w	lr, lr, r2
 800085c:	fa20 f304 	lsr.w	r3, r0, r4
 8000860:	fa01 f205 	lsl.w	r2, r1, r5
 8000864:	ea43 0302 	orr.w	r3, r3, r2
 8000868:	fa21 f004 	lsr.w	r0, r1, r4
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	fa21 f204 	lsr.w	r2, r1, r4
 8000874:	ea20 0002 	bic.w	r0, r0, r2
 8000878:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800087c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000880:	bf08      	it	eq
 8000882:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f094 0f00 	teq	r4, #0
 800088c:	d10f      	bne.n	80008ae <__aeabi_dmul+0x1c2>
 800088e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000892:	0040      	lsls	r0, r0, #1
 8000894:	eb41 0101 	adc.w	r1, r1, r1
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	bf08      	it	eq
 800089e:	3c01      	subeq	r4, #1
 80008a0:	d0f7      	beq.n	8000892 <__aeabi_dmul+0x1a6>
 80008a2:	ea41 0106 	orr.w	r1, r1, r6
 80008a6:	f095 0f00 	teq	r5, #0
 80008aa:	bf18      	it	ne
 80008ac:	4770      	bxne	lr
 80008ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008b2:	0052      	lsls	r2, r2, #1
 80008b4:	eb43 0303 	adc.w	r3, r3, r3
 80008b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008bc:	bf08      	it	eq
 80008be:	3d01      	subeq	r5, #1
 80008c0:	d0f7      	beq.n	80008b2 <__aeabi_dmul+0x1c6>
 80008c2:	ea43 0306 	orr.w	r3, r3, r6
 80008c6:	4770      	bx	lr
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d0:	bf18      	it	ne
 80008d2:	ea95 0f0c 	teqne	r5, ip
 80008d6:	d00c      	beq.n	80008f2 <__aeabi_dmul+0x206>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	d1d1      	bne.n	8000888 <__aeabi_dmul+0x19c>
 80008e4:	ea81 0103 	eor.w	r1, r1, r3
 80008e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f6:	bf06      	itte	eq
 80008f8:	4610      	moveq	r0, r2
 80008fa:	4619      	moveq	r1, r3
 80008fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000900:	d019      	beq.n	8000936 <__aeabi_dmul+0x24a>
 8000902:	ea94 0f0c 	teq	r4, ip
 8000906:	d102      	bne.n	800090e <__aeabi_dmul+0x222>
 8000908:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800090c:	d113      	bne.n	8000936 <__aeabi_dmul+0x24a>
 800090e:	ea95 0f0c 	teq	r5, ip
 8000912:	d105      	bne.n	8000920 <__aeabi_dmul+0x234>
 8000914:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000918:	bf1c      	itt	ne
 800091a:	4610      	movne	r0, r2
 800091c:	4619      	movne	r1, r3
 800091e:	d10a      	bne.n	8000936 <__aeabi_dmul+0x24a>
 8000920:	ea81 0103 	eor.w	r1, r1, r3
 8000924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000928:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800092c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	bd70      	pop	{r4, r5, r6, pc}
 8000936:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800093a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093e:	bd70      	pop	{r4, r5, r6, pc}

08000940 <__aeabi_ddiv>:
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000946:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800094a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094e:	bf1d      	ittte	ne
 8000950:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000954:	ea94 0f0c 	teqne	r4, ip
 8000958:	ea95 0f0c 	teqne	r5, ip
 800095c:	f000 f8a7 	bleq	8000aae <__aeabi_ddiv+0x16e>
 8000960:	eba4 0405 	sub.w	r4, r4, r5
 8000964:	ea81 0e03 	eor.w	lr, r1, r3
 8000968:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000970:	f000 8088 	beq.w	8000a84 <__aeabi_ddiv+0x144>
 8000974:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000978:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800097c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000980:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000984:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000988:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800098c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000990:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000994:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000998:	429d      	cmp	r5, r3
 800099a:	bf08      	it	eq
 800099c:	4296      	cmpeq	r6, r2
 800099e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a6:	d202      	bcs.n	80009ae <__aeabi_ddiv+0x6e>
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	1ab6      	subs	r6, r6, r2
 80009b0:	eb65 0503 	sbc.w	r5, r5, r3
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ca:	bf22      	ittt	cs
 80009cc:	1ab6      	subcs	r6, r6, r2
 80009ce:	4675      	movcs	r5, lr
 80009d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	ebb6 0e02 	subs.w	lr, r6, r2
 80009de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e2:	bf22      	ittt	cs
 80009e4:	1ab6      	subcs	r6, r6, r2
 80009e6:	4675      	movcs	r5, lr
 80009e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fa:	bf22      	ittt	cs
 80009fc:	1ab6      	subcs	r6, r6, r2
 80009fe:	4675      	movcs	r5, lr
 8000a00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a04:	085b      	lsrs	r3, r3, #1
 8000a06:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a12:	bf22      	ittt	cs
 8000a14:	1ab6      	subcs	r6, r6, r2
 8000a16:	4675      	movcs	r5, lr
 8000a18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a1c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a20:	d018      	beq.n	8000a54 <__aeabi_ddiv+0x114>
 8000a22:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3e:	d1c0      	bne.n	80009c2 <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	d10b      	bne.n	8000a5e <__aeabi_ddiv+0x11e>
 8000a46:	ea41 0100 	orr.w	r1, r1, r0
 8000a4a:	f04f 0000 	mov.w	r0, #0
 8000a4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a52:	e7b6      	b.n	80009c2 <__aeabi_ddiv+0x82>
 8000a54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a58:	bf04      	itt	eq
 8000a5a:	4301      	orreq	r1, r0
 8000a5c:	2000      	moveq	r0, #0
 8000a5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a62:	bf88      	it	hi
 8000a64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a68:	f63f aeaf 	bhi.w	80007ca <__aeabi_dmul+0xde>
 8000a6c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a70:	bf04      	itt	eq
 8000a72:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a7a:	f150 0000 	adcs.w	r0, r0, #0
 8000a7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a90:	bfc2      	ittt	gt
 8000a92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a9a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa0:	f04f 0e00 	mov.w	lr, #0
 8000aa4:	3c01      	subs	r4, #1
 8000aa6:	e690      	b.n	80007ca <__aeabi_dmul+0xde>
 8000aa8:	ea45 0e06 	orr.w	lr, r5, r6
 8000aac:	e68d      	b.n	80007ca <__aeabi_dmul+0xde>
 8000aae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ab2:	ea94 0f0c 	teq	r4, ip
 8000ab6:	bf08      	it	eq
 8000ab8:	ea95 0f0c 	teqeq	r5, ip
 8000abc:	f43f af3b 	beq.w	8000936 <__aeabi_dmul+0x24a>
 8000ac0:	ea94 0f0c 	teq	r4, ip
 8000ac4:	d10a      	bne.n	8000adc <__aeabi_ddiv+0x19c>
 8000ac6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aca:	f47f af34 	bne.w	8000936 <__aeabi_dmul+0x24a>
 8000ace:	ea95 0f0c 	teq	r5, ip
 8000ad2:	f47f af25 	bne.w	8000920 <__aeabi_dmul+0x234>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e72c      	b.n	8000936 <__aeabi_dmul+0x24a>
 8000adc:	ea95 0f0c 	teq	r5, ip
 8000ae0:	d106      	bne.n	8000af0 <__aeabi_ddiv+0x1b0>
 8000ae2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae6:	f43f aefd 	beq.w	80008e4 <__aeabi_dmul+0x1f8>
 8000aea:	4610      	mov	r0, r2
 8000aec:	4619      	mov	r1, r3
 8000aee:	e722      	b.n	8000936 <__aeabi_dmul+0x24a>
 8000af0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af4:	bf18      	it	ne
 8000af6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000afa:	f47f aec5 	bne.w	8000888 <__aeabi_dmul+0x19c>
 8000afe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b02:	f47f af0d 	bne.w	8000920 <__aeabi_dmul+0x234>
 8000b06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b0a:	f47f aeeb 	bne.w	80008e4 <__aeabi_dmul+0x1f8>
 8000b0e:	e712      	b.n	8000936 <__aeabi_dmul+0x24a>

08000b10 <__gedf2>:
 8000b10:	f04f 3cff 	mov.w	ip, #4294967295
 8000b14:	e006      	b.n	8000b24 <__cmpdf2+0x4>
 8000b16:	bf00      	nop

08000b18 <__ledf2>:
 8000b18:	f04f 0c01 	mov.w	ip, #1
 8000b1c:	e002      	b.n	8000b24 <__cmpdf2+0x4>
 8000b1e:	bf00      	nop

08000b20 <__cmpdf2>:
 8000b20:	f04f 0c01 	mov.w	ip, #1
 8000b24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	bf18      	it	ne
 8000b36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b3a:	d01b      	beq.n	8000b74 <__cmpdf2+0x54>
 8000b3c:	b001      	add	sp, #4
 8000b3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b42:	bf0c      	ite	eq
 8000b44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b48:	ea91 0f03 	teqne	r1, r3
 8000b4c:	bf02      	ittt	eq
 8000b4e:	ea90 0f02 	teqeq	r0, r2
 8000b52:	2000      	moveq	r0, #0
 8000b54:	4770      	bxeq	lr
 8000b56:	f110 0f00 	cmn.w	r0, #0
 8000b5a:	ea91 0f03 	teq	r1, r3
 8000b5e:	bf58      	it	pl
 8000b60:	4299      	cmppl	r1, r3
 8000b62:	bf08      	it	eq
 8000b64:	4290      	cmpeq	r0, r2
 8000b66:	bf2c      	ite	cs
 8000b68:	17d8      	asrcs	r0, r3, #31
 8000b6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6e:	f040 0001 	orr.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__cmpdf2+0x64>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d107      	bne.n	8000b94 <__cmpdf2+0x74>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d1d6      	bne.n	8000b3c <__cmpdf2+0x1c>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d0d3      	beq.n	8000b3c <__cmpdf2+0x1c>
 8000b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_cdrcmple>:
 8000b9c:	4684      	mov	ip, r0
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4662      	mov	r2, ip
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	e000      	b.n	8000bac <__aeabi_cdcmpeq>
 8000baa:	bf00      	nop

08000bac <__aeabi_cdcmpeq>:
 8000bac:	b501      	push	{r0, lr}
 8000bae:	f7ff ffb7 	bl	8000b20 <__cmpdf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd01      	pop	{r0, pc}

08000bbc <__aeabi_dcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cdcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cdcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cdcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffce 	bl	8000b9c <__aeabi_cdrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc4 	bl	8000b9c <__aeabi_cdrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_dcmpun>:
 8000c20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c28:	d102      	bne.n	8000c30 <__aeabi_dcmpun+0x10>
 8000c2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2e:	d10a      	bne.n	8000c46 <__aeabi_dcmpun+0x26>
 8000c30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c38:	d102      	bne.n	8000c40 <__aeabi_dcmpun+0x20>
 8000c3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_dcmpun+0x26>
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0001 	mov.w	r0, #1
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2iz>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c54:	d215      	bcs.n	8000c82 <__aeabi_d2iz+0x36>
 8000c56:	d511      	bpl.n	8000c7c <__aeabi_d2iz+0x30>
 8000c58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c60:	d912      	bls.n	8000c88 <__aeabi_d2iz+0x3c>
 8000c62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c72:	fa23 f002 	lsr.w	r0, r3, r2
 8000c76:	bf18      	it	ne
 8000c78:	4240      	negne	r0, r0
 8000c7a:	4770      	bx	lr
 8000c7c:	f04f 0000 	mov.w	r0, #0
 8000c80:	4770      	bx	lr
 8000c82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c86:	d105      	bne.n	8000c94 <__aeabi_d2iz+0x48>
 8000c88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c92:	4770      	bx	lr
 8000c94:	f04f 0000 	mov.w	r0, #0
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2f>:
 8000c9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ca0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ca4:	bf24      	itt	cs
 8000ca6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000caa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cae:	d90d      	bls.n	8000ccc <__aeabi_d2f+0x30>
 8000cb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cc4:	bf08      	it	eq
 8000cc6:	f020 0001 	biceq.w	r0, r0, #1
 8000cca:	4770      	bx	lr
 8000ccc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cd0:	d121      	bne.n	8000d16 <__aeabi_d2f+0x7a>
 8000cd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cd6:	bfbc      	itt	lt
 8000cd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	4770      	bxlt	lr
 8000cde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ce2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ce6:	f1c2 0218 	rsb	r2, r2, #24
 8000cea:	f1c2 0c20 	rsb	ip, r2, #32
 8000cee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000cf6:	bf18      	it	ne
 8000cf8:	f040 0001 	orrne.w	r0, r0, #1
 8000cfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d08:	ea40 000c 	orr.w	r0, r0, ip
 8000d0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000d10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d14:	e7cc      	b.n	8000cb0 <__aeabi_d2f+0x14>
 8000d16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d1a:	d107      	bne.n	8000d2c <__aeabi_d2f+0x90>
 8000d1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d20:	bf1e      	ittt	ne
 8000d22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d2a:	4770      	bxne	lr
 8000d2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <__aeabi_ldivmod>:
 8000d3c:	b97b      	cbnz	r3, 8000d5e <__aeabi_ldivmod+0x22>
 8000d3e:	b972      	cbnz	r2, 8000d5e <__aeabi_ldivmod+0x22>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bfbe      	ittt	lt
 8000d44:	2000      	movlt	r0, #0
 8000d46:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000d4a:	e006      	blt.n	8000d5a <__aeabi_ldivmod+0x1e>
 8000d4c:	bf08      	it	eq
 8000d4e:	2800      	cmpeq	r0, #0
 8000d50:	bf1c      	itt	ne
 8000d52:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d56:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5a:	f000 b9bf 	b.w	80010dc <__aeabi_idiv0>
 8000d5e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d62:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d66:	2900      	cmp	r1, #0
 8000d68:	db09      	blt.n	8000d7e <__aeabi_ldivmod+0x42>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db1a      	blt.n	8000da4 <__aeabi_ldivmod+0x68>
 8000d6e:	f000 f84d 	bl	8000e0c <__udivmoddi4>
 8000d72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7a:	b004      	add	sp, #16
 8000d7c:	4770      	bx	lr
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db1b      	blt.n	8000dc0 <__aeabi_ldivmod+0x84>
 8000d88:	f000 f840 	bl	8000e0c <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	4252      	negs	r2, r2
 8000d9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000da2:	4770      	bx	lr
 8000da4:	4252      	negs	r2, r2
 8000da6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000daa:	f000 f82f 	bl	8000e0c <__udivmoddi4>
 8000dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db6:	b004      	add	sp, #16
 8000db8:	4240      	negs	r0, r0
 8000dba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dbe:	4770      	bx	lr
 8000dc0:	4252      	negs	r2, r2
 8000dc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dc6:	f000 f821 	bl	8000e0c <__udivmoddi4>
 8000dca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd2:	b004      	add	sp, #16
 8000dd4:	4252      	negs	r2, r2
 8000dd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dda:	4770      	bx	lr

08000ddc <__aeabi_uldivmod>:
 8000ddc:	b953      	cbnz	r3, 8000df4 <__aeabi_uldivmod+0x18>
 8000dde:	b94a      	cbnz	r2, 8000df4 <__aeabi_uldivmod+0x18>
 8000de0:	2900      	cmp	r1, #0
 8000de2:	bf08      	it	eq
 8000de4:	2800      	cmpeq	r0, #0
 8000de6:	bf1c      	itt	ne
 8000de8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dec:	f04f 30ff 	movne.w	r0, #4294967295
 8000df0:	f000 b974 	b.w	80010dc <__aeabi_idiv0>
 8000df4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000df8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dfc:	f000 f806 	bl	8000e0c <__udivmoddi4>
 8000e00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e08:	b004      	add	sp, #16
 8000e0a:	4770      	bx	lr

08000e0c <__udivmoddi4>:
 8000e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e10:	9d08      	ldr	r5, [sp, #32]
 8000e12:	4604      	mov	r4, r0
 8000e14:	468e      	mov	lr, r1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d14d      	bne.n	8000eb6 <__udivmoddi4+0xaa>
 8000e1a:	428a      	cmp	r2, r1
 8000e1c:	4694      	mov	ip, r2
 8000e1e:	d969      	bls.n	8000ef4 <__udivmoddi4+0xe8>
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	b152      	cbz	r2, 8000e3c <__udivmoddi4+0x30>
 8000e26:	fa01 f302 	lsl.w	r3, r1, r2
 8000e2a:	f1c2 0120 	rsb	r1, r2, #32
 8000e2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000e32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e36:	ea41 0e03 	orr.w	lr, r1, r3
 8000e3a:	4094      	lsls	r4, r2
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	0c21      	lsrs	r1, r4, #16
 8000e42:	fbbe f6f8 	udiv	r6, lr, r8
 8000e46:	fa1f f78c 	uxth.w	r7, ip
 8000e4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e52:	fb06 f107 	mul.w	r1, r6, r7
 8000e56:	4299      	cmp	r1, r3
 8000e58:	d90a      	bls.n	8000e70 <__udivmoddi4+0x64>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e62:	f080 811f 	bcs.w	80010a4 <__udivmoddi4+0x298>
 8000e66:	4299      	cmp	r1, r3
 8000e68:	f240 811c 	bls.w	80010a4 <__udivmoddi4+0x298>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3310 	mls	r3, r8, r0, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb00 f707 	mul.w	r7, r0, r7
 8000e84:	42a7      	cmp	r7, r4
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x92>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e90:	f080 810a 	bcs.w	80010a8 <__udivmoddi4+0x29c>
 8000e94:	42a7      	cmp	r7, r4
 8000e96:	f240 8107 	bls.w	80010a8 <__udivmoddi4+0x29c>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	1be4      	subs	r4, r4, r7
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	b11d      	cbz	r5, 8000eb0 <__udivmoddi4+0xa4>
 8000ea8:	40d4      	lsrs	r4, r2
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d909      	bls.n	8000ece <__udivmoddi4+0xc2>
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	f000 80ef 	beq.w	800109e <__udivmoddi4+0x292>
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	fab3 f683 	clz	r6, r3
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d14a      	bne.n	8000f6c <__udivmoddi4+0x160>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d302      	bcc.n	8000ee0 <__udivmoddi4+0xd4>
 8000eda:	4282      	cmp	r2, r0
 8000edc:	f200 80f9 	bhi.w	80010d2 <__udivmoddi4+0x2c6>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	469e      	mov	lr, r3
 8000eea:	2d00      	cmp	r5, #0
 8000eec:	d0e0      	beq.n	8000eb0 <__udivmoddi4+0xa4>
 8000eee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ef2:	e7dd      	b.n	8000eb0 <__udivmoddi4+0xa4>
 8000ef4:	b902      	cbnz	r2, 8000ef8 <__udivmoddi4+0xec>
 8000ef6:	deff      	udf	#255	; 0xff
 8000ef8:	fab2 f282 	clz	r2, r2
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	f040 8092 	bne.w	8001026 <__udivmoddi4+0x21a>
 8000f02:	eba1 010c 	sub.w	r1, r1, ip
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2601      	movs	r6, #1
 8000f10:	0c20      	lsrs	r0, r4, #16
 8000f12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f16:	fb07 1113 	mls	r1, r7, r3, r1
 8000f1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f1e:	fb0e f003 	mul.w	r0, lr, r3
 8000f22:	4288      	cmp	r0, r1
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x12c>
 8000f26:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x12a>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2c0>
 8000f36:	4643      	mov	r3, r8
 8000f38:	1a09      	subs	r1, r1, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f40:	fb07 1110 	mls	r1, r7, r0, r1
 8000f44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x156>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x154>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2ca>
 8000f60:	4608      	mov	r0, r1
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f6a:	e79c      	b.n	8000ea6 <__udivmoddi4+0x9a>
 8000f6c:	f1c6 0720 	rsb	r7, r6, #32
 8000f70:	40b3      	lsls	r3, r6
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f82:	431c      	orrs	r4, r3
 8000f84:	40f9      	lsrs	r1, r7
 8000f86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f92:	0c20      	lsrs	r0, r4, #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fb09 1118 	mls	r1, r9, r8, r1
 8000f9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fa0:	fb08 f00e 	mul.w	r0, r8, lr
 8000fa4:	4288      	cmp	r0, r1
 8000fa6:	fa02 f206 	lsl.w	r2, r2, r6
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b8>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2bc>
 8000fb8:	4288      	cmp	r0, r1
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2bc>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4461      	add	r1, ip
 8000fc4:	1a09      	subs	r1, r1, r0
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000fd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd8:	458e      	cmp	lr, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1e2>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2b4>
 8000fe6:	458e      	cmp	lr, r1
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2b4>
 8000fea:	3802      	subs	r0, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ff2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ff6:	eba1 010e 	sub.w	r1, r1, lr
 8000ffa:	42a1      	cmp	r1, r4
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46a6      	mov	lr, r4
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x2a4>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x2a0>
 8001004:	b15d      	cbz	r5, 800101e <__udivmoddi4+0x212>
 8001006:	ebb3 0208 	subs.w	r2, r3, r8
 800100a:	eb61 010e 	sbc.w	r1, r1, lr
 800100e:	fa01 f707 	lsl.w	r7, r1, r7
 8001012:	fa22 f306 	lsr.w	r3, r2, r6
 8001016:	40f1      	lsrs	r1, r6
 8001018:	431f      	orrs	r7, r3
 800101a:	e9c5 7100 	strd	r7, r1, [r5]
 800101e:	2600      	movs	r6, #0
 8001020:	4631      	mov	r1, r6
 8001022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001026:	f1c2 0320 	rsb	r3, r2, #32
 800102a:	40d8      	lsrs	r0, r3
 800102c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001030:	fa21 f303 	lsr.w	r3, r1, r3
 8001034:	4091      	lsls	r1, r2
 8001036:	4301      	orrs	r1, r0
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb3 f0f7 	udiv	r0, r3, r7
 8001044:	fb07 3610 	mls	r6, r7, r0, r3
 8001048:	0c0b      	lsrs	r3, r1, #16
 800104a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800104e:	fb00 f60e 	mul.w	r6, r0, lr
 8001052:	429e      	cmp	r6, r3
 8001054:	fa04 f402 	lsl.w	r4, r4, r2
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x260>
 800105a:	eb1c 0303 	adds.w	r3, ip, r3
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b8>
 8001064:	429e      	cmp	r6, r3
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b8>
 8001068:	3802      	subs	r0, #2
 800106a:	4463      	add	r3, ip
 800106c:	1b9b      	subs	r3, r3, r6
 800106e:	b289      	uxth	r1, r1
 8001070:	fbb3 f6f7 	udiv	r6, r3, r7
 8001074:	fb07 3316 	mls	r3, r7, r6, r3
 8001078:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800107c:	fb06 f30e 	mul.w	r3, r6, lr
 8001080:	428b      	cmp	r3, r1
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x28a>
 8001084:	eb1c 0101 	adds.w	r1, ip, r1
 8001088:	f106 38ff 	add.w	r8, r6, #4294967295
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2b0>
 800108e:	428b      	cmp	r3, r1
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2b0>
 8001092:	3e02      	subs	r6, #2
 8001094:	4461      	add	r1, ip
 8001096:	1ac9      	subs	r1, r1, r3
 8001098:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0x104>
 800109e:	462e      	mov	r6, r5
 80010a0:	4628      	mov	r0, r5
 80010a2:	e705      	b.n	8000eb0 <__udivmoddi4+0xa4>
 80010a4:	4606      	mov	r6, r0
 80010a6:	e6e3      	b.n	8000e70 <__udivmoddi4+0x64>
 80010a8:	4618      	mov	r0, r3
 80010aa:	e6f8      	b.n	8000e9e <__udivmoddi4+0x92>
 80010ac:	454b      	cmp	r3, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f8>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010b8:	3801      	subs	r0, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f8>
 80010bc:	4646      	mov	r6, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x28a>
 80010c0:	4620      	mov	r0, r4
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1e2>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x260>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b8>
 80010cc:	3b02      	subs	r3, #2
 80010ce:	4461      	add	r1, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x12c>
 80010d2:	4630      	mov	r0, r6
 80010d4:	e709      	b.n	8000eea <__udivmoddi4+0xde>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x156>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001104:	d02c      	beq.n	8001160 <arm_cfft_init_f32+0x80>
 8001106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800110a:	f300 809e 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 800110e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001112:	d032      	beq.n	800117a <arm_cfft_init_f32+0x9a>
 8001114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001118:	f300 8097 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 800111c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001120:	d038      	beq.n	8001194 <arm_cfft_init_f32+0xb4>
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001126:	f300 8090 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 800112a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800112e:	d03e      	beq.n	80011ae <arm_cfft_init_f32+0xce>
 8001130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001134:	f300 8089 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 8001138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800113c:	d044      	beq.n	80011c8 <arm_cfft_init_f32+0xe8>
 800113e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001142:	f300 8082 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 8001146:	2b80      	cmp	r3, #128	; 0x80
 8001148:	d04b      	beq.n	80011e2 <arm_cfft_init_f32+0x102>
 800114a:	2b80      	cmp	r3, #128	; 0x80
 800114c:	dc7d      	bgt.n	800124a <arm_cfft_init_f32+0x16a>
 800114e:	2b40      	cmp	r3, #64	; 0x40
 8001150:	d054      	beq.n	80011fc <arm_cfft_init_f32+0x11c>
 8001152:	2b40      	cmp	r3, #64	; 0x40
 8001154:	dc79      	bgt.n	800124a <arm_cfft_init_f32+0x16a>
 8001156:	2b10      	cmp	r3, #16
 8001158:	d06a      	beq.n	8001230 <arm_cfft_init_f32+0x150>
 800115a:	2b20      	cmp	r3, #32
 800115c:	d05b      	beq.n	8001216 <arm_cfft_init_f32+0x136>
 800115e:	e074      	b.n	800124a <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <arm_cfft_init_f32+0x180>)
 8001162:	899a      	ldrh	r2, [r3, #12]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	819a      	strh	r2, [r3, #12]
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <arm_cfft_init_f32+0x180>)
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <arm_cfft_init_f32+0x180>)
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	605a      	str	r2, [r3, #4]
            break;
 8001178:	e06a      	b.n	8001250 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 800117a:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <arm_cfft_init_f32+0x184>)
 800117c:	899a      	ldrh	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	819a      	strh	r2, [r3, #12]
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <arm_cfft_init_f32+0x184>)
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <arm_cfft_init_f32+0x184>)
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	605a      	str	r2, [r3, #4]

            break;
 8001192:	e05d      	b.n	8001250 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <arm_cfft_init_f32+0x188>)
 8001196:	899a      	ldrh	r2, [r3, #12]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	819a      	strh	r2, [r3, #12]
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <arm_cfft_init_f32+0x188>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <arm_cfft_init_f32+0x188>)
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	605a      	str	r2, [r3, #4]

            break;
 80011ac:	e050      	b.n	8001250 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <arm_cfft_init_f32+0x18c>)
 80011b0:	899a      	ldrh	r2, [r3, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	819a      	strh	r2, [r3, #12]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <arm_cfft_init_f32+0x18c>)
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <arm_cfft_init_f32+0x18c>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	605a      	str	r2, [r3, #4]
            break;
 80011c6:	e043      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <arm_cfft_init_f32+0x190>)
 80011ca:	899a      	ldrh	r2, [r3, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	819a      	strh	r2, [r3, #12]
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <arm_cfft_init_f32+0x190>)
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <arm_cfft_init_f32+0x190>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	605a      	str	r2, [r3, #4]
            break;
 80011e0:	e036      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <arm_cfft_init_f32+0x194>)
 80011e4:	899a      	ldrh	r2, [r3, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	819a      	strh	r2, [r3, #12]
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <arm_cfft_init_f32+0x194>)
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <arm_cfft_init_f32+0x194>)
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	605a      	str	r2, [r3, #4]
            break;
 80011fa:	e029      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <arm_cfft_init_f32+0x198>)
 80011fe:	899a      	ldrh	r2, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	819a      	strh	r2, [r3, #12]
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <arm_cfft_init_f32+0x198>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <arm_cfft_init_f32+0x198>)
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	605a      	str	r2, [r3, #4]
            break;
 8001214:	e01c      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <arm_cfft_init_f32+0x19c>)
 8001218:	899a      	ldrh	r2, [r3, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	819a      	strh	r2, [r3, #12]
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <arm_cfft_init_f32+0x19c>)
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <arm_cfft_init_f32+0x19c>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	605a      	str	r2, [r3, #4]
            break;
 800122e:	e00f      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <arm_cfft_init_f32+0x1a0>)
 8001232:	899a      	ldrh	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	819a      	strh	r2, [r3, #12]
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <arm_cfft_init_f32+0x1a0>)
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <arm_cfft_init_f32+0x1a0>)
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	605a      	str	r2, [r3, #4]
            break;
 8001248:	e002      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 800124a:	23ff      	movs	r3, #255	; 0xff
 800124c:	73fb      	strb	r3, [r7, #15]
            break;
 800124e:	bf00      	nop
        }


        return (status);
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	08010b48 	.word	0x08010b48
 8001264:	08010b78 	.word	0x08010b78
 8001268:	08010b18 	.word	0x08010b18
 800126c:	08010b58 	.word	0x08010b58
 8001270:	08010b88 	.word	0x08010b88
 8001274:	08010b38 	.word	0x08010b38
 8001278:	08010b28 	.word	0x08010b28
 800127c:	08010b98 	.word	0x08010b98
 8001280:	08010b68 	.word	0x08010b68

08001284 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 800128a:	f003 fb21 	bl	80048d0 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 800128e:	f000 f8f3 	bl	8001478 <SystemClock_Config>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 8001292:	f002 fa73 	bl	800377c <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8001296:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800129a:	2001      	movs	r0, #1
 800129c:	f002 fafc 	bl	8003898 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f002 fb5d 	bl	8003960 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80012a6:	f002 fe27 	bl	8003ef8 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012aa:	f04f 30ff 	mov.w	r0, #4294967295
 80012ae:	f002 fbb3 	bl	8003a18 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80012b2:	f002 fad9 	bl	8003868 <BSP_LCD_GetXSize>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29c      	uxth	r4, r3
 80012ba:	f002 fae1 	bl	8003880 <BSP_LCD_GetYSize>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f003 f9ff 	bl	80046c8 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 80012ca:	f000 ffd1 	bl	8002270 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 80012ce:	f000 ffef 	bl	80022b0 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 80012d2:	2000      	movs	r0, #0
 80012d4:	f001 fe3a 	bl	8002f4c <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 80012d8:	2001      	movs	r0, #1
 80012da:	f001 fe37 	bl	8002f4c <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 80012de:	f000 fe37 	bl	8001f50 <MENU_draw>
	MENU_hint();						// Show hint at startup
 80012e2:	f000 febf 	bl	8002064 <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 80012e6:	f000 f945 	bl	8001574 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 80012ea:	f000 fa1f 	bl	800172c <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 80012ee:	f000 fadd 	bl	80018ac <MEAS_timer_init>

    // Timer configuration
    int timer_duration = 20; // in seconds
 80012f2:	2314      	movs	r3, #20
 80012f4:	61fb      	str	r3, [r7, #28]
    time_t start_time = time(NULL);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f009 fb52 	bl	800a9a0 <time>
 80012fc:	e9c7 0104 	strd	r0, r1, [r7, #16]
    time_t current_time = start_time;
 8001300:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001304:	e9c7 2300 	strd	r2, r3, [r7]
    char* time_string = ctime(&current_time);
 8001308:	463b      	mov	r3, r7
 800130a:	4618      	mov	r0, r3
 800130c:	f008 fc44 	bl	8009b98 <ctime>
 8001310:	60f8      	str	r0, [r7, #12]

	/* Infinite while loop */
	while (difftime(current_time, start_time) < timer_duration) {							// Infinitely loop in main function
 8001312:	e083      	b.n	800141c <main+0x198>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8001314:	2000      	movs	r0, #0
 8001316:	f001 fea1 	bl	800305c <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 800131a:	4b4f      	ldr	r3, [pc, #316]	; (8001458 <main+0x1d4>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d02b      	beq.n	800137a <main+0xf6>
			MEAS_data_ready = false;
 8001322:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <main+0x1d4>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

			complex_fft(cfft_inout);
 8001328:	484c      	ldr	r0, [pc, #304]	; (800145c <main+0x1d8>)
 800132a:	f001 f81f 	bl	800236c <complex_fft>

			// Output stored in array testOutput
			get_magnitude();
 800132e:	f001 f833 	bl	8002398 <get_magnitude>

			max_index_pass = get_max_index(testOutput);
 8001332:	484b      	ldr	r0, [pc, #300]	; (8001460 <main+0x1dc>)
 8001334:	f001 f86c 	bl	8002410 <get_max_index>
 8001338:	4603      	mov	r3, r0
 800133a:	4a4a      	ldr	r2, [pc, #296]	; (8001464 <main+0x1e0>)
 800133c:	6013      	str	r3, [r2, #0]

		    dopplerFrequency = get_doppler_frequency(max_index_pass);
 800133e:	4b49      	ldr	r3, [pc, #292]	; (8001464 <main+0x1e0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f001 f878 	bl	8002438 <get_doppler_frequency>
 8001348:	eef0 7a40 	vmov.f32	s15, s0
 800134c:	4b46      	ldr	r3, [pc, #280]	; (8001468 <main+0x1e4>)
 800134e:	edc3 7a00 	vstr	s15, [r3]

		    velocity = calculate_speed(dopplerFrequency);
 8001352:	4b45      	ldr	r3, [pc, #276]	; (8001468 <main+0x1e4>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	f001 f8c4 	bl	80024e8 <calculate_speed>
 8001360:	eef0 7a40 	vmov.f32	s15, s0
 8001364:	4b41      	ldr	r3, [pc, #260]	; (800146c <main+0x1e8>)
 8001366:	edc3 7a00 	vstr	s15, [r3]

		    MEAS_show_data();
 800136a:	f000 fc87 	bl	8001c7c <MEAS_show_data>

		    // start measurement again
			ADC1_IN13_ADC2_IN11_dual_init(); // ADC initialize
 800136e:	f000 fad3 	bl	8001918 <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN11_dual_start(); // start sampling
 8001372:	f000 fb7b 	bl	8001a6c <ADC1_IN13_ADC2_IN11_dual_start>
			DMA2_Stream4_IRQHandler(); // write samples in ADC_samples
 8001376:	f000 fbeb 	bl	8001b50 <DMA2_Stream4_IRQHandler>

		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 800137a:	f000 ffcb 	bl	8002314 <PB_pressed>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d01d      	beq.n	80013c0 <main+0x13c>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <main+0x1ec>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	bf14      	ite	ne
 800138c:	2301      	movne	r3, #1
 800138e:	2300      	moveq	r3, #0
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f083 0301 	eor.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	b2da      	uxtb	r2, r3
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <main+0x1ec>)
 80013a0:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 80013a2:	4b33      	ldr	r3, [pc, #204]	; (8001470 <main+0x1ec>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d005      	beq.n	80013b6 <main+0x132>
				DAC_init();
 80013aa:	f000 fa23 	bl	80017f4 <DAC_init>
				BSP_LED_On(LED4);
 80013ae:	2001      	movs	r0, #1
 80013b0:	f001 fe20 	bl	8002ff4 <BSP_LED_On>
 80013b4:	e004      	b.n	80013c0 <main+0x13c>
			} else {
				DAC_reset();
 80013b6:	f000 fa07 	bl	80017c8 <DAC_reset>
				BSP_LED_Off(LED4);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f001 fe34 	bl	8003028 <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 80013c0:	f000 fe90 	bl	80020e4 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 80013c4:	f000 fe7c 	bl	80020c0 <MENU_get_transition>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d817      	bhi.n	80013fe <main+0x17a>
 80013ce:	a201      	add	r2, pc, #4	; (adr r2, 80013d4 <main+0x150>)
 80013d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d4:	080013f1 	.word	0x080013f1
 80013d8:	080013ff 	.word	0x080013ff
 80013dc:	080013ff 	.word	0x080013ff
 80013e0:	080013ff 	.word	0x080013ff
 80013e4:	080013ff 	.word	0x080013ff
 80013e8:	080013ff 	.word	0x080013ff
 80013ec:	080013ff 	.word	0x080013ff
		case MENU_NONE:					// No transition => do nothing
			break;
		case MENU_ZERO:
			ADC1_IN13_ADC2_IN11_dual_init(); // ADC initialize
 80013f0:	f000 fa92 	bl	8001918 <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN11_dual_start(); // star sampling
 80013f4:	f000 fb3a 	bl	8001a6c <ADC1_IN13_ADC2_IN11_dual_start>
			DMA2_Stream4_IRQHandler(); // write samples in ADC_samples
 80013f8:	f000 fbaa 	bl	8001b50 <DMA2_Stream4_IRQHandler>
			break;
 80013fc:	e000      	b.n	8001400 <main+0x17c>
		case MENU_FOUR:
			break;
		case MENU_FIVE:
			break;
		default:						// Should never occur
			break;
 80013fe:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 8001400:	20c8      	movs	r0, #200	; 0xc8
 8001402:	f003 fadf 	bl	80049c4 <HAL_Delay>

		// Update the current time
	    printf("The current time is %s", time_string);
 8001406:	68f9      	ldr	r1, [r7, #12]
 8001408:	481a      	ldr	r0, [pc, #104]	; (8001474 <main+0x1f0>)
 800140a:	f009 fa6d 	bl	800a8e8 <iprintf>
		current_time = time(NULL);
 800140e:	2000      	movs	r0, #0
 8001410:	f009 fac6 	bl	800a9a0 <time>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	e9c7 2300 	strd	r2, r3, [r7]
	while (difftime(current_time, start_time) < timer_duration) {							// Infinitely loop in main function
 800141c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001420:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001424:	f008 fbbf 	bl	8009ba6 <difftime>
 8001428:	ec55 4b10 	vmov	r4, r5, d0
 800142c:	69f8      	ldr	r0, [r7, #28]
 800142e:	f7ff f8f3 	bl	8000618 <__aeabi_i2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7ff fbc9 	bl	8000bd0 <__aeabi_dcmplt>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	f47f af67 	bne.w	8001314 <main+0x90>
	}
	BSP_LED_Toggle(LED4);			// Visual feedback when running
 8001446:	2001      	movs	r0, #1
 8001448:	f001 fe08 	bl	800305c <BSP_LED_Toggle>
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bdb0      	pop	{r4, r5, r7, pc}
 8001456:	bf00      	nop
 8001458:	20000424 	.word	0x20000424
 800145c:	20000630 	.word	0x20000630
 8001460:	20000320 	.word	0x20000320
 8001464:	20000420 	.word	0x20000420
 8001468:	2000083c 	.word	0x2000083c
 800146c:	2000031c 	.word	0x2000031c
 8001470:	20000425 	.word	0x20000425
 8001474:	0800df30 	.word	0x0800df30

08001478 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8001478:	b580      	push	{r7, lr}
 800147a:	b0a0      	sub	sp, #128	; 0x80
 800147c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001482:	2230      	movs	r2, #48	; 0x30
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f008 fcdc 	bl	8009e44 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2230      	movs	r2, #48	; 0x30
 80014a2:	2100      	movs	r1, #0
 80014a4:	4618      	mov	r0, r3
 80014a6:	f008 fccd 	bl	8009e44 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <SystemClock_Config+0xf0>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a2d      	ldr	r2, [pc, #180]	; (8001568 <SystemClock_Config+0xf0>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b2b      	ldr	r3, [pc, #172]	; (8001568 <SystemClock_Config+0xf0>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b28      	ldr	r3, [pc, #160]	; (800156c <SystemClock_Config+0xf4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a27      	ldr	r2, [pc, #156]	; (800156c <SystemClock_Config+0xf4>)
 80014d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <SystemClock_Config+0xf4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ea:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ec:	2302      	movs	r3, #2
 80014ee:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014f4:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80014f6:	2308      	movs	r3, #8
 80014f8:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 80014fa:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80014fe:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001500:	2302      	movs	r3, #2
 8001502:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001504:	2307      	movs	r3, #7
 8001506:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001508:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800150c:	4618      	mov	r0, r3
 800150e:	f005 fcab 	bl	8006e68 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001512:	230f      	movs	r3, #15
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001516:	2302      	movs	r3, #2
 8001518:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800151e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001522:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001528:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800152a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800152e:	2105      	movs	r1, #5
 8001530:	4618      	mov	r0, r3
 8001532:	f005 ff07 	bl	8007344 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001536:	2308      	movs	r3, #8
 8001538:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800153a:	23c0      	movs	r3, #192	; 0xc0
 800153c:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800153e:	2304      	movs	r3, #4
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001542:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4618      	mov	r0, r3
 800154e:	f006 f905 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <SystemClock_Config+0xf8>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4a06      	ldr	r2, [pc, #24]	; (8001570 <SystemClock_Config+0xf8>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6053      	str	r3, [r2, #4]
}
 800155e:	bf00      	nop
 8001560:	3780      	adds	r7, #128	; 0x80
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40023800 	.word	0x40023800
 800156c:	40007000 	.word	0x40007000
 8001570:	40012300 	.word	0x40012300

08001574 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <gyro_disable+0xb4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a29      	ldr	r2, [pc, #164]	; (8001628 <gyro_disable+0xb4>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b27      	ldr	r3, [pc, #156]	; (8001628 <gyro_disable+0xb4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8001596:	4b25      	ldr	r3, [pc, #148]	; (800162c <gyro_disable+0xb8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a24      	ldr	r2, [pc, #144]	; (800162c <gyro_disable+0xb8>)
 800159c:	f023 030c 	bic.w	r3, r3, #12
 80015a0:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 80015a2:	4b22      	ldr	r3, [pc, #136]	; (800162c <gyro_disable+0xb8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a21      	ldr	r2, [pc, #132]	; (800162c <gyro_disable+0xb8>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 80015ae:	4b1f      	ldr	r3, [pc, #124]	; (800162c <gyro_disable+0xb8>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	4a1e      	ldr	r2, [pc, #120]	; (800162c <gyro_disable+0xb8>)
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 80015ba:	200a      	movs	r0, #10
 80015bc:	f003 fa02 	bl	80049c4 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <gyro_disable+0xb8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <gyro_disable+0xb8>)
 80015c6:	f043 030c 	orr.w	r3, r3, #12
 80015ca:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <gyro_disable+0xb4>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	4a14      	ldr	r2, [pc, #80]	; (8001628 <gyro_disable+0xb4>)
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <gyro_disable+0xb4>)
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e0:	f003 0320 	and.w	r3, r3, #32
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <gyro_disable+0xbc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a10      	ldr	r2, [pc, #64]	; (8001630 <gyro_disable+0xbc>)
 80015ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015f2:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <gyro_disable+0xbc>)
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <gyro_disable+0xbc>)
 80015fa:	f023 030f 	bic.w	r3, r3, #15
 80015fe:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <gyro_disable+0xbc>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <gyro_disable+0xbc>)
 8001606:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800160a:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 800160c:	200a      	movs	r0, #10
 800160e:	f003 f9d9 	bl	80049c4 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <gyro_disable+0xbc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <gyro_disable+0xbc>)
 8001618:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800161c:	6013      	str	r3, [r2, #0]
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40020800 	.word	0x40020800
 8001630:	40021400 	.word	0x40021400

08001634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	2b00      	cmp	r3, #0
 8001644:	db0b      	blt.n	800165e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	f003 021f 	and.w	r2, r3, #31
 800164c:	4907      	ldr	r1, [pc, #28]	; (800166c <__NVIC_EnableIRQ+0x38>)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	2001      	movs	r0, #1
 8001656:	fa00 f202 	lsl.w	r2, r0, r2
 800165a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db12      	blt.n	80016a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	490a      	ldr	r1, [pc, #40]	; (80016b4 <__NVIC_DisableIRQ+0x44>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	3320      	adds	r3, #32
 8001698:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800169c:	f3bf 8f4f 	dsb	sy
}
 80016a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016a2:	f3bf 8f6f 	isb	sy
}
 80016a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0c      	blt.n	80016e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <__NVIC_ClearPendingIRQ+0x38>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	3360      	adds	r3, #96	; 0x60
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <roundToAccuracy>:

/******************************************************************************
 * Functions
 *****************************************************************************/

float32_t roundToAccuracy(float32_t num) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	ed87 0a01 	vstr	s0, [r7, #4]
    return roundf(num / 0.3f) * 0.3f;
 80016fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001702:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001728 <roundToAccuracy+0x34>
 8001706:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800170a:	eeb0 0a47 	vmov.f32	s0, s14
 800170e:	f00c fb65 	bl	800dddc <roundf>
 8001712:	eef0 7a40 	vmov.f32	s15, s0
 8001716:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001728 <roundToAccuracy+0x34>
 800171a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800171e:	eeb0 0a67 	vmov.f32	s0, s15
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	3e99999a 	.word	0x3e99999a

0800172c <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	4a1f      	ldr	r2, [pc, #124]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	6313      	str	r3, [r2, #48]	; 0x30
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MEAS_GPIO_analog_init+0x90>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1a      	ldr	r2, [pc, #104]	; (80017bc <MEAS_GPIO_analog_init+0x90>)
 8001754:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001758:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a15      	ldr	r2, [pc, #84]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MEAS_GPIO_analog_init+0x94>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a11      	ldr	r2, [pc, #68]	; (80017c0 <MEAS_GPIO_analog_init+0x94>)
 800177c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001780:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MEAS_GPIO_analog_init+0x8c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MEAS_GPIO_analog_init+0x98>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <MEAS_GPIO_analog_init+0x98>)
 80017a4:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80017a8:	6013      	str	r3, [r2, #0]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40021400 	.word	0x40021400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020000 	.word	0x40020000

080017c8 <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <DAC_reset+0x28>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <DAC_reset+0x28>)
 80017d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017d6:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <DAC_reset+0x28>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <DAC_reset+0x28>)
 80017de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80017e2:	6213      	str	r3, [r2, #32]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <DAC_init+0x3c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <DAC_init+0x3c>)
 8001804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <DAC_init+0x3c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <DAC_init+0x40>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a06      	ldr	r2, [pc, #24]	; (8001834 <DAC_init+0x40>)
 800181c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001820:	6013      	str	r3, [r2, #0]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40007400 	.word	0x40007400

08001838 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <DAC_increment+0x30>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	3314      	adds	r3, #20
 8001842:	4a09      	ldr	r2, [pc, #36]	; (8001868 <DAC_increment+0x30>)
 8001844:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <DAC_increment+0x30>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800184e:	d302      	bcc.n	8001856 <DAC_increment+0x1e>
 8001850:	4b05      	ldr	r3, [pc, #20]	; (8001868 <DAC_increment+0x30>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8001856:	4a05      	ldr	r2, [pc, #20]	; (800186c <DAC_increment+0x34>)
 8001858:	4b03      	ldr	r3, [pc, #12]	; (8001868 <DAC_increment+0x30>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6153      	str	r3, [r2, #20]
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	2000062c 	.word	0x2000062c
 800186c:	40007400 	.word	0x40007400

08001870 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <ADC_reset+0x38>)
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <ADC_reset+0x38>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <ADC_reset+0x38>)
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <ADC_reset+0x38>)
 8001886:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800188a:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 800188c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MEAS_timer_init+0x68>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a16      	ldr	r2, [pc, #88]	; (8001914 <MEAS_timer_init+0x68>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MEAS_timer_init+0x68>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 80018ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018d2:	2237      	movs	r2, #55	; 0x37
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 80018d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018da:	2231      	movs	r2, #49	; 0x31
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 80018de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e8:	f043 0320 	orr.w	r3, r3, #32
 80018ec:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 80018ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 80018fe:	201c      	movs	r0, #28
 8001900:	f7ff feda 	bl	80016b8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8001904:	201c      	movs	r0, #28
 8001906:	f7ff fe95 	bl	8001634 <__NVIC_EnableIRQ>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <ADC1_IN13_ADC2_IN11_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN11 = GPIO PC1
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_init(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// Only 1 input is converted
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <ADC1_IN13_ADC2_IN11_dual_init+0x130>)
 8001920:	2202      	movs	r2, #2
 8001922:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	4b48      	ldr	r3, [pc, #288]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	4a47      	ldr	r2, [pc, #284]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800192e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001932:	6453      	str	r3, [r2, #68]	; 0x44
 8001934:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	4b41      	ldr	r3, [pc, #260]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001948:	4a40      	ldr	r2, [pc, #256]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800194a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194e:	6453      	str	r3, [r2, #68]	; 0x44
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 800195c:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a3b      	ldr	r2, [pc, #236]	; (8001a50 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8001962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001966:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4a38      	ldr	r2, [pc, #224]	; (8001a50 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 800196e:	f043 0306 	orr.w	r3, r3, #6
 8001972:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001974:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4a36      	ldr	r2, [pc, #216]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 800197a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800197e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8001986:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 800198a:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (11UL << ADC_SQR3_SQ1_Pos);	// Input 11 = first conversion
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	4a30      	ldr	r2, [pc, #192]	; (8001a54 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8001992:	f043 030b 	orr.w	r3, r3, #11
 8001996:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8001998:	4b2f      	ldr	r3, [pc, #188]	; (8001a58 <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	4a2e      	ldr	r2, [pc, #184]	; (8001a58 <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 800199e:	f043 030d 	orr.w	r3, r3, #13
 80019a2:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80019ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019b2:	6313      	str	r3, [r2, #48]	; 0x30
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 80019c0:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80019cc:	bf00      	nop
 80019ce:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <ADC1_IN13_ADC2_IN11_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 80019e0:	f043 0320 	orr.w	r3, r3, #32
 80019e4:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019e8:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 80019ee:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1a      	ldr	r2, [pc, #104]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f8:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a10:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a1c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8001a2a:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8001a30:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a32:	4a0c      	ldr	r2, [pc, #48]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x14c>)
 8001a34:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a38:	4a0b      	ldr	r2, [pc, #44]	; (8001a68 <ADC1_IN13_ADC2_IN11_dual_init+0x150>)
 8001a3a:	60da      	str	r2, [r3, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	20000000 	.word	0x20000000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40012300 	.word	0x40012300
 8001a54:	40012000 	.word	0x40012000
 8001a58:	40012100 	.word	0x40012100
 8001a5c:	40026470 	.word	0x40026470
 8001a60:	40026400 	.word	0x40026400
 8001a64:	40012308 	.word	0x40012308
 8001a68:	2000042c 	.word	0x2000042c

08001a6c <ADC1_IN13_ADC2_IN11_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_start(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <ADC1_IN13_ADC2_IN11_dual_start+0x48>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0f      	ldr	r2, [pc, #60]	; (8001ab4 <ADC1_IN13_ADC2_IN11_dual_start+0x48>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 8001a7c:	203c      	movs	r0, #60	; 0x3c
 8001a7e:	f7ff fe1b 	bl	80016b8 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 8001a82:	203c      	movs	r0, #60	; 0x3c
 8001a84:	f7ff fdd6 	bl	8001634 <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <ADC1_IN13_ADC2_IN11_dual_start+0x4c>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <ADC1_IN13_ADC2_IN11_dual_start+0x4c>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <ADC1_IN13_ADC2_IN11_dual_start+0x50>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a08      	ldr	r2, [pc, #32]	; (8001abc <ADC1_IN13_ADC2_IN11_dual_start+0x50>)
 8001a9a:	f043 0301 	orr.w	r3, r3, #1
 8001a9e:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aaa:	f043 0301 	orr.w	r3, r3, #1
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40026470 	.word	0x40026470
 8001ab8:	40012000 	.word	0x40012000
 8001abc:	40012100 	.word	0x40012100

08001ac0 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <TIM2_IRQHandler+0x24>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001adc:	f7ff feac 	bl	8001838 <DAC_increment>
	}
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000425 	.word	0x20000425

08001ae8 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <ADC_IRQHandler+0x58>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d020      	beq.n	8001b3a <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001af8:	4911      	ldr	r1, [pc, #68]	; (8001b40 <ADC_IRQHandler+0x58>)
 8001afa:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <ADC_IRQHandler+0x5c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	4810      	ldr	r0, [pc, #64]	; (8001b44 <ADC_IRQHandler+0x5c>)
 8001b02:	6002      	str	r2, [r0, #0]
 8001b04:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001b06:	4910      	ldr	r1, [pc, #64]	; (8001b48 <ADC_IRQHandler+0x60>)
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001b0c:	4b0d      	ldr	r3, [pc, #52]	; (8001b44 <ADC_IRQHandler+0x5c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2b3f      	cmp	r3, #63	; 0x3f
 8001b12:	d912      	bls.n	8001b3a <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <ADC_IRQHandler+0x58>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4a05      	ldr	r2, [pc, #20]	; (8001b40 <ADC_IRQHandler+0x58>)
 8001b2a:	f023 0301 	bic.w	r3, r3, #1
 8001b2e:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001b30:	f7ff fe9e 	bl	8001870 <ADC_reset>
			MEAS_data_ready = true;
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <ADC_IRQHandler+0x64>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40012200 	.word	0x40012200
 8001b44:	20000428 	.word	0x20000428
 8001b48:	2000042c 	.word	0x2000042c
 8001b4c:	20000424 	.word	0x20000424

08001b50 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <DMA2_Stream4_IRQHandler+0x10c>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f003 0320 	and.w	r3, r3, #32
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d077      	beq.n	8001c52 <DMA2_Stream4_IRQHandler+0x102>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8001b62:	203c      	movs	r0, #60	; 0x3c
 8001b64:	f7ff fd84 	bl	8001670 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8001b68:	203c      	movs	r0, #60	; 0x3c
 8001b6a:	f7ff fda5 	bl	80016b8 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <DMA2_Stream4_IRQHandler+0x110>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a3b      	ldr	r2, [pc, #236]	; (8001c60 <DMA2_Stream4_IRQHandler+0x110>)
 8001b74:	f023 0301 	bic.w	r3, r3, #1
 8001b78:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001b7a:	bf00      	nop
 8001b7c:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <DMA2_Stream4_IRQHandler+0x110>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f9      	bne.n	8001b7c <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8001b88:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <DMA2_Stream4_IRQHandler+0x10c>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	4a33      	ldr	r2, [pc, #204]	; (8001c5c <DMA2_Stream4_IRQHandler+0x10c>)
 8001b8e:	f043 0320 	orr.w	r3, r3, #32
 8001b92:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <DMA2_Stream4_IRQHandler+0x114>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a2e      	ldr	r2, [pc, #184]	; (8001c64 <DMA2_Stream4_IRQHandler+0x114>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001bb0:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <DMA2_Stream4_IRQHandler+0x118>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	4a2c      	ldr	r2, [pc, #176]	; (8001c68 <DMA2_Stream4_IRQHandler+0x118>)
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <DMA2_Stream4_IRQHandler+0x11c>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a2a      	ldr	r2, [pc, #168]	; (8001c6c <DMA2_Stream4_IRQHandler+0x11c>)
 8001bc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001bc6:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--) {
 8001bc8:	233f      	movs	r3, #63	; 0x3f
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	e039      	b.n	8001c42 <DMA2_Stream4_IRQHandler+0xf2>
		    ADC_samples[2*i+1] = (ADC_samples[i] >> 16);         // (*(int32_t*)& cast für ADC_samples
 8001bce:	4a28      	ldr	r2, [pc, #160]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	3301      	adds	r3, #1
 8001bdc:	0c12      	lsrs	r2, r2, #16
 8001bde:	4924      	ldr	r1, [pc, #144]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	b292      	uxth	r2, r2
 8001bf2:	491f      	ldr	r1, [pc, #124]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			cfft_inout[2*i+1] = ADC_samples[2*i+1];
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	4a1c      	ldr	r2, [pc, #112]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001c00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	3301      	adds	r3, #1
 8001c0a:	ee07 2a90 	vmov	s15, r2
 8001c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c12:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <DMA2_Stream4_IRQHandler+0x124>)
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4413      	add	r3, r2
 8001c18:	edc3 7a00 	vstr	s15, [r3]
			cfft_inout[2*i]   = ADC_samples[2*i];          // (*(int32_t*)&
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <DMA2_Stream4_IRQHandler+0x120>)
 8001c22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	ee07 2a90 	vmov	s15, r2
 8001c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c32:	4a10      	ldr	r2, [pc, #64]	; (8001c74 <DMA2_Stream4_IRQHandler+0x124>)
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	edc3 7a00 	vstr	s15, [r3]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--) {
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	dac2      	bge.n	8001bce <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8001c48:	f7ff fe12 	bl	8001870 <ADC_reset>
		MEAS_data_ready = true;
 8001c4c:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <DMA2_Stream4_IRQHandler+0x128>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	701a      	strb	r2, [r3, #0]
	}
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40026400 	.word	0x40026400
 8001c60:	40026470 	.word	0x40026470
 8001c64:	40012000 	.word	0x40012000
 8001c68:	40012100 	.word	0x40012100
 8001c6c:	40012300 	.word	0x40012300
 8001c70:	2000042c 	.word	0x2000042c
 8001c74:	20000630 	.word	0x20000630
 8001c78:	20000424 	.word	0x20000424

08001c7c <MEAS_show_data>:
 * of signals and results.
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void) {
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b099      	sub	sp, #100	; 0x64
 8001c80:	af02      	add	r7, sp, #8

	float32_t v = velocity;
 8001c82:	4ba7      	ldr	r3, [pc, #668]	; (8001f20 <MEAS_show_data+0x2a4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	647b      	str	r3, [r7, #68]	; 0x44
	extern float32_t HighVelocity;
	const uint32_t Y_OFFSET = 260;
 8001c88:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001c8c:	643b      	str	r3, [r7, #64]	; 0x40
	const uint32_t X_SIZE = 240;
 8001c8e:	23f0      	movs	r3, #240	; 0xf0
 8001c90:	63fb      	str	r3, [r7, #60]	; 0x3c

	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 8001c92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t data;
	uint32_t data_last;

	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f001 fe6c 	bl	8003980 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8001ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f002 f8a2 	bl	8003e00 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font16);
 8001cbc:	4899      	ldr	r0, [pc, #612]	; (8001f24 <MEAS_show_data+0x2a8>)
 8001cbe:	f001 fe91 	bl	80039e4 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc6:	f001 fe73 	bl	80039b0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001cca:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001cce:	f001 fe57 	bl	8003980 <BSP_LCD_SetTextColor>
	char text[50];
	snprintf(text, 50, "Velocity: %.1f km/h", v);
 8001cd2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001cd4:	f7fe fcb2 	bl	800063c <__aeabi_f2d>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4638      	mov	r0, r7
 8001cde:	e9cd 2300 	strd	r2, r3, [sp]
 8001ce2:	4a91      	ldr	r2, [pc, #580]	; (8001f28 <MEAS_show_data+0x2ac>)
 8001ce4:	2132      	movs	r1, #50	; 0x32
 8001ce6:	f008 fe27 	bl	800a938 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 20, (uint8_t *)text, CENTER_MODE);
 8001cea:	463a      	mov	r2, r7
 8001cec:	2301      	movs	r3, #1
 8001cee:	2114      	movs	r1, #20
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f001 fefd 	bl	8003af0 <BSP_LCD_DisplayStringAt>

	// show HighScore
	snprintf(text, 50, "HighScore: %.1f km/h", HighVelocity);
 8001cf6:	4b8d      	ldr	r3, [pc, #564]	; (8001f2c <MEAS_show_data+0x2b0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc9e 	bl	800063c <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4638      	mov	r0, r7
 8001d06:	e9cd 2300 	strd	r2, r3, [sp]
 8001d0a:	4a89      	ldr	r2, [pc, #548]	; (8001f30 <MEAS_show_data+0x2b4>)
 8001d0c:	2132      	movs	r1, #50	; 0x32
 8001d0e:	f008 fe13 	bl	800a938 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, CENTER_MODE);
 8001d12:	463a      	mov	r2, r7
 8001d14:	2301      	movs	r3, #1
 8001d16:	2132      	movs	r1, #50	; 0x32
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f001 fee9 	bl	8003af0 <BSP_LCD_DisplayStringAt>


	snprintf(text, 50, "I: blue, Q: red");
 8001d1e:	463b      	mov	r3, r7
 8001d20:	4a84      	ldr	r2, [pc, #528]	; (8001f34 <MEAS_show_data+0x2b8>)
 8001d22:	2132      	movs	r1, #50	; 0x32
 8001d24:	4618      	mov	r0, r3
 8001d26:	f008 fe07 	bl	800a938 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)text, CENTER_MODE);
 8001d2a:	463a      	mov	r2, r7
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2196      	movs	r1, #150	; 0x96
 8001d30:	2000      	movs	r0, #0
 8001d32:	f001 fedd 	bl	8003af0 <BSP_LCD_DisplayStringAt>

	snprintf(text, 50, "FFT Magnitude: green");
 8001d36:	463b      	mov	r3, r7
 8001d38:	4a7f      	ldr	r2, [pc, #508]	; (8001f38 <MEAS_show_data+0x2bc>)
 8001d3a:	2132      	movs	r1, #50	; 0x32
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f008 fdfb 	bl	800a938 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 200, (uint8_t *)text, CENTER_MODE);
 8001d42:	463a      	mov	r2, r7
 8001d44:	2301      	movs	r3, #1
 8001d46:	21c8      	movs	r1, #200	; 0xc8
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f001 fed1 	bl	8003af0 <BSP_LCD_DisplayStringAt>


	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d4e:	487b      	ldr	r0, [pc, #492]	; (8001f3c <MEAS_show_data+0x2c0>)
 8001d50:	f001 fe16 	bl	8003980 <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_input_count*0] / f;
 8001d54:	4b7a      	ldr	r3, [pc, #488]	; (8001f40 <MEAS_show_data+0x2c4>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	657b      	str	r3, [r7, #84]	; 0x54
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001d60:	2301      	movs	r3, #1
 8001d62:	653b      	str	r3, [r7, #80]	; 0x50
 8001d64:	e033      	b.n	8001dce <MEAS_show_data+0x152>
		data_last = data;
 8001d66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
		data = (ADC_samples[MEAS_input_count*i]) / f;
 8001d6a:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <MEAS_show_data+0x2c8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d70:	fb02 f303 	mul.w	r3, r2, r3
 8001d74:	4a72      	ldr	r2, [pc, #456]	; (8001f40 <MEAS_show_data+0x2c4>)
 8001d76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d80:	657b      	str	r3, [r7, #84]	; 0x54
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001d82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d901      	bls.n	8001d8e <MEAS_show_data+0x112>
 8001d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d8c:	657b      	str	r3, [r7, #84]	; 0x54
		BSP_LCD_DrawLine(3*(i-1), Y_OFFSET-data_last, 3*i, Y_OFFSET-data);
 8001d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	461a      	mov	r2, r3
 8001d94:	0052      	lsls	r2, r2, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	3b03      	subs	r3, #3
 8001d9c:	b298      	uxth	r0, r3
 8001d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	b299      	uxth	r1, r3
 8001daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	0052      	lsls	r2, r2, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	b29c      	uxth	r4, r3
 8001db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	4622      	mov	r2, r4
 8001dc4:	f001 ff52 	bl	8003c6c <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dca:	3301      	adds	r3, #1
 8001dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8001dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd0:	2b3f      	cmp	r3, #63	; 0x3f
 8001dd2:	d9c8      	bls.n	8001d66 <MEAS_show_data+0xea>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_input_count == 2) {
 8001dd4:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <MEAS_show_data+0x2c8>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d143      	bne.n	8001e64 <MEAS_show_data+0x1e8>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001ddc:	485a      	ldr	r0, [pc, #360]	; (8001f48 <MEAS_show_data+0x2cc>)
 8001dde:	f001 fdcf 	bl	8003980 <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 8001de2:	4b57      	ldr	r3, [pc, #348]	; (8001f40 <MEAS_show_data+0x2c4>)
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dec:	657b      	str	r3, [r7, #84]	; 0x54
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001dee:	2301      	movs	r3, #1
 8001df0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001df2:	e034      	b.n	8001e5e <MEAS_show_data+0x1e2>
			data_last = data;
 8001df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001df6:	637b      	str	r3, [r7, #52]	; 0x34
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 8001df8:	4b52      	ldr	r3, [pc, #328]	; (8001f44 <MEAS_show_data+0x2c8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001dfe:	fb02 f303 	mul.w	r3, r2, r3
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a4e      	ldr	r2, [pc, #312]	; (8001f40 <MEAS_show_data+0x2c4>)
 8001e06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	657b      	str	r3, [r7, #84]	; 0x54
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001e12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d901      	bls.n	8001e1e <MEAS_show_data+0x1a2>
 8001e1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e1c:	657b      	str	r3, [r7, #84]	; 0x54
			BSP_LCD_DrawLine(3*(i-1), Y_OFFSET-data_last, 3*i, Y_OFFSET-data);
 8001e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	0052      	lsls	r2, r2, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	3b03      	subs	r3, #3
 8001e2c:	b298      	uxth	r0, r3
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b299      	uxth	r1, r3
 8001e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	461a      	mov	r2, r3
 8001e40:	0052      	lsls	r2, r2, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	b29c      	uxth	r4, r3
 8001e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4622      	mov	r2, r4
 8001e54:	f001 ff0a 	bl	8003c6c <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e60:	2b3f      	cmp	r3, #63	; 0x3f
 8001e62:	d9c7      	bls.n	8001df4 <MEAS_show_data+0x178>
		}
	}

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001e64:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001e68:	f001 fd8a 	bl	8003980 <BSP_LCD_SetTextColor>
	data = testOutput[0] / (f*9);
 8001e6c:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <MEAS_show_data+0x2d0>)
 8001e6e:	edd3 6a00 	vldr	s13, [r3]
 8001e72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	ee07 3a90 	vmov	s15, r3
 8001e7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e8a:	ee17 3a90 	vmov	r3, s15
 8001e8e:	657b      	str	r3, [r7, #84]	; 0x54
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001e90:	2301      	movs	r3, #1
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e94:	e03c      	b.n	8001f10 <MEAS_show_data+0x294>
		data_last = data;
 8001e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
		data = (testOutput[i]) / (f*9);
 8001e9a:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <MEAS_show_data+0x2d0>)
 8001e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	edd3 6a00 	vldr	s13, [r3]
 8001ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	ee07 3a90 	vmov	s15, r3
 8001eb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ebe:	ee17 3a90 	vmov	r3, s15
 8001ec2:	657b      	str	r3, [r7, #84]	; 0x54
		if (data > Y_OFFSET) { data = Y_OFFSET; } // Limit value, prevent crash
 8001ec4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d901      	bls.n	8001ed0 <MEAS_show_data+0x254>
 8001ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ece:	657b      	str	r3, [r7, #84]	; 0x54
		BSP_LCD_DrawLine(3*(i-1), Y_OFFSET-data_last, 3*i, Y_OFFSET-data);
 8001ed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	0052      	lsls	r2, r2, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b03      	subs	r3, #3
 8001ede:	b298      	uxth	r0, r3
 8001ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	b299      	uxth	r1, r3
 8001eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	0052      	lsls	r2, r2, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b29c      	uxth	r4, r3
 8001ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	4622      	mov	r2, r4
 8001f06:	f001 feb1 	bl	8003c6c <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f12:	2b3f      	cmp	r3, #63	; 0x3f
 8001f14:	d9bf      	bls.n	8001e96 <MEAS_show_data+0x21a>
	}



}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	375c      	adds	r7, #92	; 0x5c
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}
 8001f20:	2000031c 	.word	0x2000031c
 8001f24:	200000b0 	.word	0x200000b0
 8001f28:	0800df48 	.word	0x0800df48
 8001f2c:	20000858 	.word	0x20000858
 8001f30:	0800df5c 	.word	0x0800df5c
 8001f34:	0800df74 	.word	0x0800df74
 8001f38:	0800df84 	.word	0x0800df84
 8001f3c:	ff0000ff 	.word	0xff0000ff
 8001f40:	2000042c 	.word	0x2000042c
 8001f44:	20000000 	.word	0x20000000
 8001f48:	ffff0000 	.word	0xffff0000
 8001f4c:	20000320 	.word	0x20000320

08001f50 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8001f56:	4841      	ldr	r0, [pc, #260]	; (800205c <MENU_draw+0x10c>)
 8001f58:	f001 fd44 	bl	80039e4 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8001f5c:	f001 fc90 	bl	8003880 <BSP_LCD_GetYSize>
 8001f60:	4603      	mov	r3, r0
 8001f62:	3b28      	subs	r3, #40	; 0x28
 8001f64:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8001f66:	2304      	movs	r3, #4
 8001f68:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8001f6a:	f001 fc7d 	bl	8003868 <BSP_LCD_GetXSize>
 8001f6e:	60b8      	str	r0, [r7, #8]
	h = MENU_HEIGHT;
 8001f70:	2328      	movs	r3, #40	; 0x28
 8001f72:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	e068      	b.n	800204c <MENU_draw+0xfc>
		x = i*w;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	68ba      	ldr	r2, [r7, #8]
 8001f7e:	fb02 f303 	mul.w	r3, r2, r3
 8001f82:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8001f84:	4936      	ldr	r1, [pc, #216]	; (8002060 <MENU_draw+0x110>)
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	440b      	add	r3, r1
 8001f92:	3324      	adds	r3, #36	; 0x24
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 fcf2 	bl	8003980 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b298      	uxth	r0, r3
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b299      	uxth	r1, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	b29c      	uxth	r4, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	f001 ff13 	bl	8003e00 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 8001fda:	4921      	ldr	r1, [pc, #132]	; (8002060 <MENU_draw+0x110>)
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3324      	adds	r3, #36	; 0x24
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f001 fcdf 	bl	80039b0 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8001ff2:	491b      	ldr	r1, [pc, #108]	; (8002060 <MENU_draw+0x110>)
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	3320      	adds	r3, #32
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f001 fcbb 	bl	8003980 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,(uint8_t *)MENU_entry[i].line1, CENTER_MODE);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	b29b      	uxth	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	0052      	lsls	r2, r2, #1
 8002012:	4413      	add	r3, r2
 8002014:	b29a      	uxth	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	b29b      	uxth	r3, r3
 800201a:	4413      	add	r3, r2
 800201c:	b298      	uxth	r0, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	0052      	lsls	r2, r2, #1
 8002026:	4413      	add	r3, r2
 8002028:	b29a      	uxth	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	b29b      	uxth	r3, r3
 800202e:	4413      	add	r3, r2
 8002030:	b299      	uxth	r1, r3
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4a08      	ldr	r2, [pc, #32]	; (8002060 <MENU_draw+0x110>)
 800203e:	441a      	add	r2, r3
 8002040:	2301      	movs	r3, #1
 8002042:	f001 fd55 	bl	8003af0 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	3301      	adds	r3, #1
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d093      	beq.n	8001f7a <MENU_draw+0x2a>
//		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
	}
}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	bd90      	pop	{r4, r7, pc}
 800205c:	200000b8 	.word	0x200000b8
 8002060:	20000008 	.word	0x20000008

08002064 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f001 fca0 	bl	80039b0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002070:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002074:	f001 fc84 	bl	8003980 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8002078:	480c      	ldr	r0, [pc, #48]	; (80020ac <MENU_hint+0x48>)
 800207a:	f001 fcb3 	bl	80039e4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Doppler Radar", CENTER_MODE);
 800207e:	2301      	movs	r3, #1
 8002080:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <MENU_hint+0x4c>)
 8002082:	210a      	movs	r1, #10
 8002084:	2005      	movs	r0, #5
 8002086:	f001 fd33 	bl	8003af0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 800208a:	480a      	ldr	r0, [pc, #40]	; (80020b4 <MENU_hint+0x50>)
 800208c:	f001 fcaa 	bl	80039e4 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Press \"start\" button", LEFT_MODE);
 8002090:	2303      	movs	r3, #3
 8002092:	4a09      	ldr	r2, [pc, #36]	; (80020b8 <MENU_hint+0x54>)
 8002094:	213c      	movs	r1, #60	; 0x3c
 8002096:	2005      	movs	r0, #5
 8002098:	f001 fd2a 	bl	8003af0 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start measurement", LEFT_MODE);
 800209c:	2303      	movs	r3, #3
 800209e:	4a07      	ldr	r2, [pc, #28]	; (80020bc <MENU_hint+0x58>)
 80020a0:	2150      	movs	r1, #80	; 0x50
 80020a2:	2005      	movs	r0, #5
 80020a4:	f001 fd24 	bl	8003af0 <BSP_LCD_DisplayStringAt>
//	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
//	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
//	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
//	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200000a8 	.word	0x200000a8
 80020b0:	0800df9c 	.word	0x0800df9c
 80020b4:	200000b0 	.word	0x200000b0
 80020b8:	0800dfac 	.word	0x0800dfac
 80020bc:	0800dfc4 	.word	0x0800dfc4

080020c0 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <MENU_get_transition+0x20>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <MENU_get_transition+0x20>)
 80020ce:	2206      	movs	r2, #6
 80020d0:	701a      	strb	r2, [r3, #0]
	return item;
 80020d2:	79fb      	ldrb	r3, [r7, #7]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	20000004 	.word	0x20000004

080020e4 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 80020e4:	b598      	push	{r3, r4, r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 80020e8:	482e      	ldr	r0, [pc, #184]	; (80021a4 <MENU_check_transition+0xc0>)
 80020ea:	f002 fb33 	bl	8004754 <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 80020ee:	f001 fbc7 	bl	8003880 <BSP_LCD_GetYSize>
 80020f2:	4603      	mov	r3, r0
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <MENU_check_transition+0xc0>)
 80020f8:	889b      	ldrh	r3, [r3, #4]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	4b29      	ldr	r3, [pc, #164]	; (80021a4 <MENU_check_transition+0xc0>)
 8002100:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 8002102:	f001 fbb1 	bl	8003868 <BSP_LCD_GetXSize>
 8002106:	4603      	mov	r3, r0
 8002108:	b29a      	uxth	r2, r3
 800210a:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <MENU_check_transition+0xc0>)
 800210c:	885b      	ldrh	r3, [r3, #2]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	b29a      	uxth	r2, r3
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <MENU_check_transition+0xc0>)
 8002114:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8002116:	f001 fbb3 	bl	8003880 <BSP_LCD_GetYSize>
 800211a:	4603      	mov	r3, r0
 800211c:	b29a      	uxth	r2, r3
 800211e:	4b21      	ldr	r3, [pc, #132]	; (80021a4 <MENU_check_transition+0xc0>)
 8002120:	889b      	ldrh	r3, [r3, #4]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	b29a      	uxth	r2, r3
 8002126:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <MENU_check_transition+0xc0>)
 8002128:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 800212a:	4b1e      	ldr	r3, [pc, #120]	; (80021a4 <MENU_check_transition+0xc0>)
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d035      	beq.n	800219e <MENU_check_transition+0xba>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <MENU_check_transition+0xc4>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b06      	cmp	r3, #6
 8002138:	d131      	bne.n	800219e <MENU_check_transition+0xba>
			item_old = item_new;		// Store old item
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <MENU_check_transition+0xc8>)
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <MENU_check_transition+0xcc>)
 8002140:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8002142:	f001 fb9d 	bl	8003880 <BSP_LCD_GetYSize>
 8002146:	4603      	mov	r3, r0
 8002148:	3b28      	subs	r3, #40	; 0x28
 800214a:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <MENU_check_transition+0xc0>)
 800214c:	8892      	ldrh	r2, [r2, #4]
 800214e:	4293      	cmp	r3, r2
 8002150:	d225      	bcs.n	800219e <MENU_check_transition+0xba>
 8002152:	f001 fb95 	bl	8003880 <BSP_LCD_GetYSize>
 8002156:	4603      	mov	r3, r0
 8002158:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <MENU_check_transition+0xc0>)
 800215a:	8892      	ldrh	r2, [r2, #4]
 800215c:	4293      	cmp	r3, r2
 800215e:	d91e      	bls.n	800219e <MENU_check_transition+0xba>
				item_new = TS_State.X	// Calculate new item
 8002160:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <MENU_check_transition+0xc0>)
 8002162:	885b      	ldrh	r3, [r3, #2]
 8002164:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8002166:	f001 fb7f 	bl	8003868 <BSP_LCD_GetXSize>
 800216a:	4603      	mov	r3, r0
 800216c:	fbb4 f3f3 	udiv	r3, r4, r3
 8002170:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <MENU_check_transition+0xc8>)
 8002174:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <MENU_check_transition+0xc8>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <MENU_check_transition+0xa0>
					item_new = MENU_NONE;	// Out of bounds
 800217e:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <MENU_check_transition+0xc8>)
 8002180:	2206      	movs	r2, #6
 8002182:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <MENU_check_transition+0xc8>)
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <MENU_check_transition+0xcc>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d106      	bne.n	800219e <MENU_check_transition+0xba>
					item_new = MENU_NONE;
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <MENU_check_transition+0xc8>)
 8002192:	2206      	movs	r2, #6
 8002194:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <MENU_check_transition+0xcc>)
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <MENU_check_transition+0xc4>)
 800219c:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 800219e:	bf00      	nop
 80021a0:	bd98      	pop	{r3, r4, r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000830 	.word	0x20000830
 80021a8:	20000004 	.word	0x20000004
 80021ac:	20000030 	.word	0x20000030
 80021b0:	20000031 	.word	0x20000031

080021b4 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <EXTI15_10_IRQHandler+0x40>)
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d014      	beq.n	80021ee <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <EXTI15_10_IRQHandler+0x40>)
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	4a0a      	ldr	r2, [pc, #40]	; (80021f4 <EXTI15_10_IRQHandler+0x40>)
 80021ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ce:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 80021d0:	f002 fab4 	bl	800473c <BSP_TS_ITGetStatus>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 80021da:	f002 fb6d 	bl	80048b8 <BSP_TS_ITClear>
			MENU_check_transition();
 80021de:	f7ff ff81 	bl	80020e4 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <EXTI15_10_IRQHandler+0x40>)
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	4a03      	ldr	r2, [pc, #12]	; (80021f4 <EXTI15_10_IRQHandler+0x40>)
 80021e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021ec:	6153      	str	r3, [r2, #20]
	}
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40013c00 	.word	0x40013c00

080021f8 <__NVIC_EnableIRQ>:
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	2b00      	cmp	r3, #0
 8002208:	db0b      	blt.n	8002222 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	f003 021f 	and.w	r2, r3, #31
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <__NVIC_EnableIRQ+0x38>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2001      	movs	r0, #1
 800221a:	fa00 f202 	lsl.w	r2, r0, r2
 800221e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000e100 	.word	0xe000e100

08002234 <__NVIC_ClearPendingIRQ>:
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	2b00      	cmp	r3, #0
 8002244:	db0c      	blt.n	8002260 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	f003 021f 	and.w	r2, r3, #31
 800224c:	4907      	ldr	r1, [pc, #28]	; (800226c <__NVIC_ClearPendingIRQ+0x38>)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	095b      	lsrs	r3, r3, #5
 8002254:	2001      	movs	r0, #1
 8002256:	fa00 f202 	lsl.w	r2, r0, r2
 800225a:	3360      	adds	r3, #96	; 0x60
 800225c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100

08002270 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <PB_init+0x38>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a0a      	ldr	r2, [pc, #40]	; (80022a8 <PB_init+0x38>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <PB_init+0x38>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8002292:	4b06      	ldr	r3, [pc, #24]	; (80022ac <PB_init+0x3c>)
 8002294:	4a05      	ldr	r2, [pc, #20]	; (80022ac <PB_init+0x3c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6013      	str	r3, [r2, #0]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020000 	.word	0x40020000

080022b0 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4b13      	ldr	r3, [pc, #76]	; (8002308 <PB_enableIRQ+0x58>)
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <PB_enableIRQ+0x58>)
 80022c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c4:	6453      	str	r3, [r2, #68]	; 0x44
 80022c6:	4b10      	ldr	r3, [pc, #64]	; (8002308 <PB_enableIRQ+0x58>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 80022d2:	4b0e      	ldr	r3, [pc, #56]	; (800230c <PB_enableIRQ+0x5c>)
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <PB_enableIRQ+0x5c>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 80022da:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <PB_enableIRQ+0x60>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <PB_enableIRQ+0x60>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <PB_enableIRQ+0x60>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <PB_enableIRQ+0x60>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 80022f2:	2006      	movs	r0, #6
 80022f4:	f7ff ff9e 	bl	8002234 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 80022f8:	2006      	movs	r0, #6
 80022fa:	f7ff ff7d 	bl	80021f8 <__NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800
 800230c:	40013800 	.word	0x40013800
 8002310:	40013c00 	.word	0x40013c00

08002314 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 800231a:	4b06      	ldr	r3, [pc, #24]	; (8002334 <PB_pressed+0x20>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <PB_pressed+0x20>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
	return pressed;
 8002326:	79fb      	ldrb	r3, [r7, #7]
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	20000838 	.word	0x20000838

08002338 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <EXTI0_IRQHandler+0x2c>)
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	2b00      	cmp	r3, #0
 8002346:	d008      	beq.n	800235a <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <EXTI0_IRQHandler+0x2c>)
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	4a05      	ldr	r2, [pc, #20]	; (8002364 <EXTI0_IRQHandler+0x2c>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <EXTI0_IRQHandler+0x30>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
	}
}
 800235a:	bf00      	nop
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40013c00 	.word	0x40013c00
 8002368:	20000838 	.word	0x20000838

0800236c <complex_fft>:
float32_t max_value;
uint32_t max_index; // index at max value
extern float32_t HighVelocity = 0.0; // stores the highest Velocity

// Functions
void complex_fft(float32_t fft_input[]) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]

    // Initialize the FFT instance
    arm_cfft_init_f32(&fftInstance, FFT_SIZE);
 8002374:	2140      	movs	r1, #64	; 0x40
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <complex_fft+0x24>)
 8002378:	f7fe feb2 	bl	80010e0 <arm_cfft_init_f32>

    // Perform the FFT, 0 indicates forward FFT, 1 enables bit reversal of output
    arm_cfft_f32(&fftInstance, cfft_inout, 0, 1);
 800237c:	2301      	movs	r3, #1
 800237e:	2200      	movs	r2, #0
 8002380:	4904      	ldr	r1, [pc, #16]	; (8002394 <complex_fft+0x28>)
 8002382:	4803      	ldr	r0, [pc, #12]	; (8002390 <complex_fft+0x24>)
 8002384:	f006 ffb4 	bl	80092f0 <arm_cfft_f32>

}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	20000840 	.word	0x20000840
 8002394:	20000630 	.word	0x20000630

08002398 <get_magnitude>:

void get_magnitude(void) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0

    // magnitude calculation
    arm_cmplx_mag_f32(cfft_inout, testOutput, FFT_SIZE);
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	4919      	ldr	r1, [pc, #100]	; (8002408 <get_magnitude+0x70>)
 80023a2:	481a      	ldr	r0, [pc, #104]	; (800240c <get_magnitude+0x74>)
 80023a4:	f007 f81e 	bl	80093e4 <arm_cmplx_mag_f32>

    // set DC value to 0 because we have an offset of 1.4V
    testOutput[0] = 0;
 80023a8:	4b17      	ldr	r3, [pc, #92]	; (8002408 <get_magnitude+0x70>)
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
    testOutput[1] = 0;
 80023b0:	4b15      	ldr	r3, [pc, #84]	; (8002408 <get_magnitude+0x70>)
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	605a      	str	r2, [r3, #4]
    testOutput[2] = 0;
 80023b8:	4b13      	ldr	r3, [pc, #76]	; (8002408 <get_magnitude+0x70>)
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
    testOutput[63] = 0;
 80023c0:	4b11      	ldr	r3, [pc, #68]	; (8002408 <get_magnitude+0x70>)
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    int size = 64;
 80023ca:	2340      	movs	r3, #64	; 0x40
 80023cc:	60bb      	str	r3, [r7, #8]
    int mean = meanOfArray(testOutput, size);
 80023ce:	68b9      	ldr	r1, [r7, #8]
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <get_magnitude+0x70>)
 80023d2:	f000 f8d5 	bl	8002580 <meanOfArray>
 80023d6:	6078      	str	r0, [r7, #4]

    if(mean < THRESHOLD) {
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b3b      	cmp	r3, #59	; 0x3b
 80023dc:	dc10      	bgt.n	8002400 <get_magnitude+0x68>

    	for(int i = 0; i < size; i++) {
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e009      	b.n	80023f8 <get_magnitude+0x60>
    		testOutput[i] = (float32_t) 0.0;
 80023e4:	4a08      	ldr	r2, [pc, #32]	; (8002408 <get_magnitude+0x70>)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
    	for(int i = 0; i < size; i++) {
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3301      	adds	r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fa      	ldr	r2, [r7, #12]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	dbf1      	blt.n	80023e4 <get_magnitude+0x4c>
    	}
    }
}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000320 	.word	0x20000320
 800240c:	20000630 	.word	0x20000630

08002410 <get_max_index>:

uint32_t get_max_index(float32_t testOutput[]) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]

    // get max value and corresponding index
    arm_max_f32(testOutput, FFT_SIZE, &max_value, &max_index);
 8002418:	4b05      	ldr	r3, [pc, #20]	; (8002430 <get_max_index+0x20>)
 800241a:	4a06      	ldr	r2, [pc, #24]	; (8002434 <get_max_index+0x24>)
 800241c:	2140      	movs	r1, #64	; 0x40
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f006 fbd0 	bl	8008bc4 <arm_max_f32>

    return max_index;
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <get_max_index+0x20>)
 8002426:	681b      	ldr	r3, [r3, #0]

}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000854 	.word	0x20000854
 8002434:	20000850 	.word	0x20000850

08002438 <get_doppler_frequency>:

float32_t get_doppler_frequency(uint32_t max_index) {
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

    // calculate Doppler frequency by multiplying max_index by frequency resolution
    dopplerFrequency = (float32_t)max_index * ADC_FS / FFT_SIZE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80024a0 <get_doppler_frequency+0x68>
 800244e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002452:	eddf 6a14 	vldr	s13, [pc, #80]	; 80024a4 <get_doppler_frequency+0x6c>
 8002456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <get_doppler_frequency+0x70>)
 800245c:	edc3 7a00 	vstr	s15, [r3]

    // check if dopplerFrequency is in the second Nyquist zone -> > fs/2
    if (dopplerFrequency > (ADC_FS / 2)) {
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <get_doppler_frequency+0x70>)
 8002462:	edd3 7a00 	vldr	s15, [r3]
 8002466:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80024ac <get_doppler_frequency+0x74>
 800246a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800246e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002472:	dd09      	ble.n	8002488 <get_doppler_frequency+0x50>
    	dopplerFrequency = dopplerFrequency - ADC_FS;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <get_doppler_frequency+0x70>)
 8002476:	edd3 7a00 	vldr	s15, [r3]
 800247a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80024a0 <get_doppler_frequency+0x68>
 800247e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002482:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <get_doppler_frequency+0x70>)
 8002484:	edc3 7a00 	vstr	s15, [r3]
    }

    return dopplerFrequency;
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <get_doppler_frequency+0x70>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	ee07 3a90 	vmov	s15, r3

}
 8002490:	eeb0 0a67 	vmov.f32	s0, s15
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	46ea6000 	.word	0x46ea6000
 80024a4:	42800000 	.word	0x42800000
 80024a8:	2000083c 	.word	0x2000083c
 80024ac:	466a6000 	.word	0x466a6000

080024b0 <update_high_velocity>:

void update_high_velocity(float32_t velocity) {
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity > HighVelocity) {
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <update_high_velocity+0x34>)
 80024bc:	edd3 7a00 	vldr	s15, [r3]
 80024c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80024c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024cc:	dc00      	bgt.n	80024d0 <update_high_velocity+0x20>
		HighVelocity = velocity;
	}
}
 80024ce:	e002      	b.n	80024d6 <update_high_velocity+0x26>
		HighVelocity = velocity;
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <update_high_velocity+0x34>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000858 	.word	0x20000858

080024e8 <calculate_speed>:


float32_t calculate_speed(float32_t dopplerFrequency) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	ed87 0a01 	vstr	s0, [r7, #4]

    // Calculate velocity in m/s
    float32_t lambda = SPEED_OF_LIGHT / TRANSMIT_FREQUENCY;
 80024f2:	4b21      	ldr	r3, [pc, #132]	; (8002578 <calculate_speed+0x90>)
 80024f4:	60fb      	str	r3, [r7, #12]
    velocity = (dopplerFrequency*lambda) / 2.0f;
 80024f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80024fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80024fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002502:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800250a:	4b1c      	ldr	r3, [pc, #112]	; (800257c <calculate_speed+0x94>)
 800250c:	edc3 7a00 	vstr	s15, [r3]

    // convert to m/s to km/h and round to accuracy +/- 0.3
    velocity = velocity*3.6;
 8002510:	4b1a      	ldr	r3, [pc, #104]	; (800257c <calculate_speed+0x94>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe f891 	bl	800063c <__aeabi_f2d>
 800251a:	a315      	add	r3, pc, #84	; (adr r3, 8002570 <calculate_speed+0x88>)
 800251c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002520:	f7fe f8e4 	bl	80006ec <__aeabi_dmul>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	f7fe fbb6 	bl	8000c9c <__aeabi_d2f>
 8002530:	4603      	mov	r3, r0
 8002532:	4a12      	ldr	r2, [pc, #72]	; (800257c <calculate_speed+0x94>)
 8002534:	6013      	str	r3, [r2, #0]
    velocity = roundToAccuracy(velocity);
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <calculate_speed+0x94>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	f7ff f8d8 	bl	80016f4 <roundToAccuracy>
 8002544:	eef0 7a40 	vmov.f32	s15, s0
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <calculate_speed+0x94>)
 800254a:	edc3 7a00 	vstr	s15, [r3]

    // Update the high velocity
    update_high_velocity(velocity);
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <calculate_speed+0x94>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eeb0 0a67 	vmov.f32	s0, s15
 8002558:	f7ff ffaa 	bl	80024b0 <update_high_velocity>

    return velocity;
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <calculate_speed+0x94>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	ee07 3a90 	vmov	s15, r3

}
 8002564:	eeb0 0a67 	vmov.f32	s0, s15
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	cccccccd 	.word	0xcccccccd
 8002574:	400ccccc 	.word	0x400ccccc
 8002578:	3c4ca888 	.word	0x3c4ca888
 800257c:	2000031c 	.word	0x2000031c

08002580 <meanOfArray>:

int meanOfArray(float32_t testOutput[], int size) {
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]

	int sum = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
	int average = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]

	for(int i = 1; i < size ; i++) {
 8002592:	2301      	movs	r3, #1
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e014      	b.n	80025c2 <meanOfArray+0x42>
		sum += testOutput[i];
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	edd3 7a00 	vldr	s15, [r3]
 80025ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025b6:	ee17 3a90 	vmov	r3, s15
 80025ba:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < size ; i++) {
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	3301      	adds	r3, #1
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	dbe6      	blt.n	8002598 <meanOfArray+0x18>
	}

	average = sum / size;
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80025d2:	60fb      	str	r3, [r7, #12]

	return average;
 80025d4:	68fb      	ldr	r3, [r7, #12]

}
 80025d6:	4618      	mov	r0, r3
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr

080025e2 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 80025e2:	b480      	push	{r7}
 80025e4:	af00      	add	r7, sp, #0
}
 80025e6:	bf00      	nop
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 80025f4:	e7fe      	b.n	80025f4 <HardFault_Handler+0x4>

080025f6 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 80025fa:	e7fe      	b.n	80025fa <MemManage_Handler+0x4>

080025fc <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002600:	e7fe      	b.n	8002600 <BusFault_Handler+0x4>

08002602 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 8002606:	e7fe      	b.n	8002606 <UsageFault_Handler+0x4>

08002608 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8002636:	f002 f9a5 	bl	8004984 <HAL_IncTick>
}
 800263a:	bf00      	nop
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <SystemInit+0x60>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <SystemInit+0x60>)
 800264c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <SystemInit+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <SystemInit+0x64>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <SystemInit+0x64>)
 8002662:	2200      	movs	r2, #0
 8002664:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <SystemInit+0x64>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <SystemInit+0x64>)
 800266c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002674:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <SystemInit+0x64>)
 8002678:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <SystemInit+0x68>)
 800267a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800267c:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <SystemInit+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <SystemInit+0x64>)
 8002682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002686:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <SystemInit+0x64>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800268e:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <SystemInit+0x60>)
 8002690:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002694:	609a      	str	r2, [r3, #8]
#endif
}
 8002696:	bf00      	nop
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00
 80026a4:	40023800 	.word	0x40023800
 80026a8:	24003010 	.word	0x24003010

080026ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80026ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026e4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80026b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80026b2:	e003      	b.n	80026bc <LoopCopyDataInit>

080026b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80026b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80026b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80026ba:	3104      	adds	r1, #4

080026bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80026bc:	480b      	ldr	r0, [pc, #44]	; (80026ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80026be:	4b0c      	ldr	r3, [pc, #48]	; (80026f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80026c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80026c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80026c4:	d3f6      	bcc.n	80026b4 <CopyDataInit>
  ldr  r2, =_sbss
 80026c6:	4a0b      	ldr	r2, [pc, #44]	; (80026f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80026c8:	e002      	b.n	80026d0 <LoopFillZerobss>

080026ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80026ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80026cc:	f842 3b04 	str.w	r3, [r2], #4

080026d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80026d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80026d4:	d3f9      	bcc.n	80026ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026d6:	f7ff ffb3 	bl	8002640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026da:	f007 fa6d 	bl	8009bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026de:	f7fe fdd1 	bl	8001284 <main>
  bx  lr    
 80026e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80026e4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80026e8:	080265b4 	.word	0x080265b4
  ldr  r0, =_sdata
 80026ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80026f0:	20000300 	.word	0x20000300
  ldr  r2, =_sbss
 80026f4:	20000300 	.word	0x20000300
  ldr  r3, = _ebss
 80026f8:	20000b60 	.word	0x20000b60

080026fc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026fc:	e7fe      	b.n	80026fc <CAN1_RX0_IRQHandler>

080026fe <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002702:	f000 feed 	bl	80034e0 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8002706:	20ca      	movs	r0, #202	; 0xca
 8002708:	f000 f95d 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 800270c:	20c3      	movs	r0, #195	; 0xc3
 800270e:	f000 f967 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002712:	2008      	movs	r0, #8
 8002714:	f000 f964 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8002718:	2050      	movs	r0, #80	; 0x50
 800271a:	f000 f961 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800271e:	20cf      	movs	r0, #207	; 0xcf
 8002720:	f000 f951 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002724:	2000      	movs	r0, #0
 8002726:	f000 f95b 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800272a:	20c1      	movs	r0, #193	; 0xc1
 800272c:	f000 f958 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002730:	2030      	movs	r0, #48	; 0x30
 8002732:	f000 f955 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8002736:	20ed      	movs	r0, #237	; 0xed
 8002738:	f000 f945 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 800273c:	2064      	movs	r0, #100	; 0x64
 800273e:	f000 f94f 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002742:	2003      	movs	r0, #3
 8002744:	f000 f94c 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8002748:	2012      	movs	r0, #18
 800274a:	f000 f949 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800274e:	2081      	movs	r0, #129	; 0x81
 8002750:	f000 f946 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002754:	20e8      	movs	r0, #232	; 0xe8
 8002756:	f000 f936 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800275a:	2085      	movs	r0, #133	; 0x85
 800275c:	f000 f940 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002760:	2000      	movs	r0, #0
 8002762:	f000 f93d 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8002766:	2078      	movs	r0, #120	; 0x78
 8002768:	f000 f93a 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800276c:	20cb      	movs	r0, #203	; 0xcb
 800276e:	f000 f92a 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002772:	2039      	movs	r0, #57	; 0x39
 8002774:	f000 f934 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002778:	202c      	movs	r0, #44	; 0x2c
 800277a:	f000 f931 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800277e:	2000      	movs	r0, #0
 8002780:	f000 f92e 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002784:	2034      	movs	r0, #52	; 0x34
 8002786:	f000 f92b 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800278a:	2002      	movs	r0, #2
 800278c:	f000 f928 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002790:	20f7      	movs	r0, #247	; 0xf7
 8002792:	f000 f918 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8002796:	2020      	movs	r0, #32
 8002798:	f000 f922 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800279c:	20ea      	movs	r0, #234	; 0xea
 800279e:	f000 f912 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027a2:	2000      	movs	r0, #0
 80027a4:	f000 f91c 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f000 f919 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80027ae:	20b1      	movs	r0, #177	; 0xb1
 80027b0:	f000 f909 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f000 f913 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80027ba:	201b      	movs	r0, #27
 80027bc:	f000 f910 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80027c0:	20b6      	movs	r0, #182	; 0xb6
 80027c2:	f000 f900 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80027c6:	200a      	movs	r0, #10
 80027c8:	f000 f90a 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80027cc:	20a2      	movs	r0, #162	; 0xa2
 80027ce:	f000 f907 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80027d2:	20c0      	movs	r0, #192	; 0xc0
 80027d4:	f000 f8f7 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80027d8:	2010      	movs	r0, #16
 80027da:	f000 f901 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80027de:	20c1      	movs	r0, #193	; 0xc1
 80027e0:	f000 f8f1 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80027e4:	2010      	movs	r0, #16
 80027e6:	f000 f8fb 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80027ea:	20c5      	movs	r0, #197	; 0xc5
 80027ec:	f000 f8eb 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80027f0:	2045      	movs	r0, #69	; 0x45
 80027f2:	f000 f8f5 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80027f6:	2015      	movs	r0, #21
 80027f8:	f000 f8f2 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80027fc:	20c7      	movs	r0, #199	; 0xc7
 80027fe:	f000 f8e2 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002802:	2090      	movs	r0, #144	; 0x90
 8002804:	f000 f8ec 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8002808:	2036      	movs	r0, #54	; 0x36
 800280a:	f000 f8dc 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800280e:	20c8      	movs	r0, #200	; 0xc8
 8002810:	f000 f8e6 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002814:	20f2      	movs	r0, #242	; 0xf2
 8002816:	f000 f8d6 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800281a:	2000      	movs	r0, #0
 800281c:	f000 f8e0 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002820:	20b0      	movs	r0, #176	; 0xb0
 8002822:	f000 f8d0 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8002826:	20c2      	movs	r0, #194	; 0xc2
 8002828:	f000 f8da 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800282c:	20b6      	movs	r0, #182	; 0xb6
 800282e:	f000 f8ca 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002832:	200a      	movs	r0, #10
 8002834:	f000 f8d4 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8002838:	20a7      	movs	r0, #167	; 0xa7
 800283a:	f000 f8d1 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800283e:	2027      	movs	r0, #39	; 0x27
 8002840:	f000 f8ce 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002844:	2004      	movs	r0, #4
 8002846:	f000 f8cb 	bl	80029e0 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800284a:	202a      	movs	r0, #42	; 0x2a
 800284c:	f000 f8bb 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002850:	2000      	movs	r0, #0
 8002852:	f000 f8c5 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002856:	2000      	movs	r0, #0
 8002858:	f000 f8c2 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800285c:	2000      	movs	r0, #0
 800285e:	f000 f8bf 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002862:	20ef      	movs	r0, #239	; 0xef
 8002864:	f000 f8bc 	bl	80029e0 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002868:	202b      	movs	r0, #43	; 0x2b
 800286a:	f000 f8ac 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800286e:	2000      	movs	r0, #0
 8002870:	f000 f8b6 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f000 f8b3 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800287a:	2001      	movs	r0, #1
 800287c:	f000 f8b0 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002880:	203f      	movs	r0, #63	; 0x3f
 8002882:	f000 f8ad 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8002886:	20f6      	movs	r0, #246	; 0xf6
 8002888:	f000 f89d 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800288c:	2001      	movs	r0, #1
 800288e:	f000 f8a7 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002892:	2000      	movs	r0, #0
 8002894:	f000 f8a4 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002898:	2006      	movs	r0, #6
 800289a:	f000 f8a1 	bl	80029e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800289e:	202c      	movs	r0, #44	; 0x2c
 80028a0:	f000 f891 	bl	80029c6 <ili9341_WriteReg>
  LCD_Delay(200);
 80028a4:	20c8      	movs	r0, #200	; 0xc8
 80028a6:	f000 ff09 	bl	80036bc <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80028aa:	2026      	movs	r0, #38	; 0x26
 80028ac:	f000 f88b 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80028b0:	2001      	movs	r0, #1
 80028b2:	f000 f895 	bl	80029e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80028b6:	20e0      	movs	r0, #224	; 0xe0
 80028b8:	f000 f885 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80028bc:	200f      	movs	r0, #15
 80028be:	f000 f88f 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80028c2:	2029      	movs	r0, #41	; 0x29
 80028c4:	f000 f88c 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80028c8:	2024      	movs	r0, #36	; 0x24
 80028ca:	f000 f889 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80028ce:	200c      	movs	r0, #12
 80028d0:	f000 f886 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80028d4:	200e      	movs	r0, #14
 80028d6:	f000 f883 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80028da:	2009      	movs	r0, #9
 80028dc:	f000 f880 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80028e0:	204e      	movs	r0, #78	; 0x4e
 80028e2:	f000 f87d 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80028e6:	2078      	movs	r0, #120	; 0x78
 80028e8:	f000 f87a 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80028ec:	203c      	movs	r0, #60	; 0x3c
 80028ee:	f000 f877 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80028f2:	2009      	movs	r0, #9
 80028f4:	f000 f874 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80028f8:	2013      	movs	r0, #19
 80028fa:	f000 f871 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80028fe:	2005      	movs	r0, #5
 8002900:	f000 f86e 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002904:	2017      	movs	r0, #23
 8002906:	f000 f86b 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800290a:	2011      	movs	r0, #17
 800290c:	f000 f868 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002910:	2000      	movs	r0, #0
 8002912:	f000 f865 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002916:	20e1      	movs	r0, #225	; 0xe1
 8002918:	f000 f855 	bl	80029c6 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800291c:	2000      	movs	r0, #0
 800291e:	f000 f85f 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002922:	2016      	movs	r0, #22
 8002924:	f000 f85c 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002928:	201b      	movs	r0, #27
 800292a:	f000 f859 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800292e:	2004      	movs	r0, #4
 8002930:	f000 f856 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002934:	2011      	movs	r0, #17
 8002936:	f000 f853 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800293a:	2007      	movs	r0, #7
 800293c:	f000 f850 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002940:	2031      	movs	r0, #49	; 0x31
 8002942:	f000 f84d 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002946:	2033      	movs	r0, #51	; 0x33
 8002948:	f000 f84a 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 800294c:	2042      	movs	r0, #66	; 0x42
 800294e:	f000 f847 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002952:	2005      	movs	r0, #5
 8002954:	f000 f844 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002958:	200c      	movs	r0, #12
 800295a:	f000 f841 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800295e:	200a      	movs	r0, #10
 8002960:	f000 f83e 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002964:	2028      	movs	r0, #40	; 0x28
 8002966:	f000 f83b 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800296a:	202f      	movs	r0, #47	; 0x2f
 800296c:	f000 f838 	bl	80029e0 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002970:	200f      	movs	r0, #15
 8002972:	f000 f835 	bl	80029e0 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002976:	2011      	movs	r0, #17
 8002978:	f000 f825 	bl	80029c6 <ili9341_WriteReg>
  LCD_Delay(200);
 800297c:	20c8      	movs	r0, #200	; 0xc8
 800297e:	f000 fe9d 	bl	80036bc <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002982:	2029      	movs	r0, #41	; 0x29
 8002984:	f000 f81f 	bl	80029c6 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002988:	202c      	movs	r0, #44	; 0x2c
 800298a:	f000 f81c 	bl	80029c6 <ili9341_WriteReg>
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}

08002992 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002996:	f000 fda3 	bl	80034e0 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800299a:	2103      	movs	r1, #3
 800299c:	20d3      	movs	r0, #211	; 0xd3
 800299e:	f000 f82c 	bl	80029fa <ili9341_ReadData>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b29b      	uxth	r3, r3
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	bd80      	pop	{r7, pc}

080029aa <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80029ae:	2029      	movs	r0, #41	; 0x29
 80029b0:	f000 f809 	bl	80029c6 <ili9341_WriteReg>
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80029bc:	2028      	movs	r0, #40	; 0x28
 80029be:	f000 f802 	bl	80029c6 <ili9341_WriteReg>
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fe1e 	bl	8003614 <LCD_IO_WriteReg>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fdef 	bl	80035d0 <LCD_IO_WriteData>
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	460a      	mov	r2, r1
 8002a04:	80fb      	strh	r3, [r7, #6]
 8002a06:	4613      	mov	r3, r2
 8002a08:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002a0a:	797a      	ldrb	r2, [r7, #5]
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fe21 	bl	8003658 <LCD_IO_ReadData>
 8002a16:	4603      	mov	r3, r0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002a24:	23f0      	movs	r3, #240	; 0xf0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002a34:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fa59 	bl	8002f08 <stmpe811_GetInstance>
 8002a56:	4603      	mov	r3, r0
 8002a58:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002a5a:	7bfb      	ldrb	r3, [r7, #15]
 8002a5c:	2bff      	cmp	r3, #255	; 0xff
 8002a5e:	d112      	bne.n	8002a86 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f000 fa51 	bl	8002f08 <stmpe811_GetInstance>
 8002a66:	4603      	mov	r3, r0
 8002a68:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002a6a:	7bbb      	ldrb	r3, [r7, #14]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d80a      	bhi.n	8002a86 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002a70:	7bbb      	ldrb	r3, [r7, #14]
 8002a72:	88fa      	ldrh	r2, [r7, #6]
 8002a74:	b2d1      	uxtb	r1, r2
 8002a76:	4a06      	ldr	r2, [pc, #24]	; (8002a90 <stmpe811_Init+0x4c>)
 8002a78:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002a7a:	f000 fe2a 	bl	80036d2 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f000 f807 	bl	8002a94 <stmpe811_Reset>
    }
  }
}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2000085c 	.word	0x2000085c

08002a94 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	2103      	movs	r1, #3
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fe1f 	bl	80036ea <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002aac:	200a      	movs	r0, #10
 8002aae:	f000 fe59 	bl	8003764 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2103      	movs	r1, #3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fe15 	bl	80036ea <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	f000 fe4f 	bl	8003764 <IOE_Delay>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002ace:	b590      	push	{r4, r7, lr}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002ad8:	f000 fdfb 	bl	80036d2 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fe14 	bl	8003710 <IOE_Read>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2101      	movs	r1, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fe0b 	bl	8003710 <IOE_Read>
 8002afa:	4603      	mov	r3, r0
 8002afc:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002afe:	4323      	orrs	r3, r4
 8002b00:	b21b      	sxth	r3, r3
 8002b02:	b29b      	uxth	r3, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd90      	pop	{r4, r7, pc}

08002b0c <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2109      	movs	r1, #9
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fdf5 	bl	8003710 <IOE_Read>
 8002b26:	4603      	mov	r3, r0
 8002b28:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	7bfa      	ldrb	r2, [r7, #15]
 8002b38:	2109      	movs	r1, #9
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fdd5 	bl	80036ea <IOE_Write>
}
 8002b40:	bf00      	nop
 8002b42:	3710      	adds	r7, #16
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2109      	movs	r1, #9
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fdd7 	bl	8003710 <IOE_Read>
 8002b62:	4603      	mov	r3, r0
 8002b64:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	2109      	movs	r1, #9
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fdb7 	bl	80036ea <IOE_Write>
    
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460a      	mov	r2, r1
 8002b8e:	80fb      	strh	r3, [r7, #6]
 8002b90:	4613      	mov	r3, r2
 8002b92:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	210a      	movs	r1, #10
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fdb6 	bl	8003710 <IOE_Read>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	797b      	ldrb	r3, [r7, #5]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	210a      	movs	r1, #10
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f000 fd96 	bl	80036ea <IOE_Write>
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b084      	sub	sp, #16
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	4603      	mov	r3, r0
 8002bce:	460a      	mov	r2, r1
 8002bd0:	80fb      	strh	r3, [r7, #6]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002bda:	88fb      	ldrh	r3, [r7, #6]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	210a      	movs	r1, #10
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fd95 	bl	8003710 <IOE_Read>
 8002be6:	4603      	mov	r3, r0
 8002be8:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002bea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	b25a      	sxtb	r2, r3
 8002bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	210a      	movs	r1, #10
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fd70 	bl	80036ea <IOE_Write>
}
 8002c0a:	bf00      	nop
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	4603      	mov	r3, r0
 8002c1a:	460a      	mov	r2, r1
 8002c1c:	80fb      	strh	r3, [r7, #6]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	210b      	movs	r1, #11
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f000 fd71 	bl	8003710 <IOE_Read>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461a      	mov	r2, r3
 8002c32:	797b      	ldrb	r3, [r7, #5]
 8002c34:	4013      	ands	r3, r2
 8002c36:	b2db      	uxtb	r3, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	460a      	mov	r2, r1
 8002c4a:	80fb      	strh	r3, [r7, #6]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	797a      	ldrb	r2, [r7, #5]
 8002c56:	210b      	movs	r1, #11
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f000 fd46 	bl	80036ea <IOE_Write>
}
 8002c5e:	bf00      	nop
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	6039      	str	r1, [r7, #0]
 8002c70:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002c76:	88fb      	ldrh	r3, [r7, #6]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2117      	movs	r1, #23
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f000 fd47 	bl	8003710 <IOE_Read>
 8002c82:	4603      	mov	r3, r0
 8002c84:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	b25a      	sxtb	r2, r3
 8002c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c92:	4013      	ands	r3, r2
 8002c94:	b25b      	sxtb	r3, r3
 8002c96:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	2117      	movs	r1, #23
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fd22 	bl	80036ea <IOE_Write>
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2104      	movs	r1, #4
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 fd26 	bl	8003710 <IOE_Read>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	f023 0304 	bic.w	r3, r3, #4
 8002cce:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002cd0:	88fb      	ldrh	r3, [r7, #6]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	2104      	movs	r1, #4
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fd06 	bl	80036ea <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	21f0      	movs	r1, #240	; 0xf0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ffbf 	bl	8002c66 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	2104      	movs	r1, #4
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fcf6 	bl	80036ea <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2249      	movs	r2, #73	; 0x49
 8002d04:	2120      	movs	r1, #32
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fcef 	bl	80036ea <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002d0c:	2002      	movs	r0, #2
 8002d0e:	f000 fd29 	bl	8003764 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002d12:	88fb      	ldrh	r3, [r7, #6]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2201      	movs	r2, #1
 8002d18:	2121      	movs	r1, #33	; 0x21
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fce5 	bl	80036ea <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002d20:	88fb      	ldrh	r3, [r7, #6]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	229a      	movs	r2, #154	; 0x9a
 8002d26:	2141      	movs	r1, #65	; 0x41
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fcde 	bl	80036ea <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2201      	movs	r2, #1
 8002d34:	214a      	movs	r1, #74	; 0x4a
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fcd7 	bl	80036ea <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002d3c:	88fb      	ldrh	r3, [r7, #6]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2201      	movs	r2, #1
 8002d42:	214b      	movs	r1, #75	; 0x4b
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fcd0 	bl	80036ea <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002d4a:	88fb      	ldrh	r3, [r7, #6]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2200      	movs	r2, #0
 8002d50:	214b      	movs	r1, #75	; 0x4b
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 fcc9 	bl	80036ea <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	2156      	movs	r1, #86	; 0x56
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fcc2 	bl	80036ea <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	2158      	movs	r1, #88	; 0x58
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f000 fcbb 	bl	80036ea <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2201      	movs	r2, #1
 8002d7a:	2140      	movs	r1, #64	; 0x40
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fcb4 	bl	80036ea <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	22ff      	movs	r2, #255	; 0xff
 8002d88:	210b      	movs	r1, #11
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fcad 	bl	80036ea <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002d90:	2002      	movs	r0, #2
 8002d92:	f000 fce7 	bl	8003764 <IOE_Delay>
}
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4603      	mov	r3, r0
 8002da6:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2140      	movs	r1, #64	; 0x40
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 fcac 	bl	8003710 <IOE_Read>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbe:	2b80      	cmp	r3, #128	; 0x80
 8002dc0:	bf0c      	ite	eq
 8002dc2:	2301      	moveq	r3, #1
 8002dc4:	2300      	movne	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002dca:	7bbb      	ldrb	r3, [r7, #14]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d00b      	beq.n	8002de8 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	214c      	movs	r1, #76	; 0x4c
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fc9a 	bl	8003710 <IOE_Read>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d010      	beq.n	8002e04 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
 8002de6:	e00d      	b.n	8002e04 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2201      	movs	r2, #1
 8002dee:	214b      	movs	r1, #75	; 0x4b
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fc7a 	bl	80036ea <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002df6:	88fb      	ldrh	r3, [r7, #6]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	214b      	movs	r1, #75	; 0x4b
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fc73 	bl	80036ea <IOE_Write>
  }
  
  return ret;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	4603      	mov	r3, r0
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002e1c:	89fb      	ldrh	r3, [r7, #14]
 8002e1e:	b2d8      	uxtb	r0, r3
 8002e20:	f107 0210 	add.w	r2, r7, #16
 8002e24:	2304      	movs	r3, #4
 8002e26:	21d7      	movs	r1, #215	; 0xd7
 8002e28:	f000 fc85 	bl	8003736 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002e2c:	7c3b      	ldrb	r3, [r7, #16]
 8002e2e:	061a      	lsls	r2, r3, #24
 8002e30:	7c7b      	ldrb	r3, [r7, #17]
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	431a      	orrs	r2, r3
 8002e36:	7cbb      	ldrb	r3, [r7, #18]
 8002e38:	021b      	lsls	r3, r3, #8
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	7cfa      	ldrb	r2, [r7, #19]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	0d1b      	lsrs	r3, r3, #20
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002e5c:	89fb      	ldrh	r3, [r7, #14]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2201      	movs	r2, #1
 8002e62:	214b      	movs	r1, #75	; 0x4b
 8002e64:	4618      	mov	r0, r3
 8002e66:	f000 fc40 	bl	80036ea <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002e6a:	89fb      	ldrh	r3, [r7, #14]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2200      	movs	r2, #0
 8002e70:	214b      	movs	r1, #75	; 0x4b
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fc39 	bl	80036ea <IOE_Write>
}
 8002e78:	bf00      	nop
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002e8a:	f000 fc28 	bl	80036de <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	211f      	movs	r1, #31
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fe76 	bl	8002b84 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fe36 	bl	8002b0c <stmpe811_EnableGlobalIT>
}
 8002ea0:	bf00      	nop
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fe47 	bl	8002b48 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002eba:	88fb      	ldrh	r3, [r7, #6]
 8002ebc:	211f      	movs	r1, #31
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fe81 	bl	8002bc6 <stmpe811_DisableITSource>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002ed6:	88fb      	ldrh	r3, [r7, #6]
 8002ed8:	211f      	movs	r1, #31
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fe99 	bl	8002c12 <stmpe811_ReadGITStatus>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	211f      	movs	r1, #31
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff fea1 	bl	8002c40 <stmpe811_ClearGlobalIT>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
	...

08002f08 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
 8002f1a:	e00b      	b.n	8002f34 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	4a0a      	ldr	r2, [pc, #40]	; (8002f48 <stmpe811_GetInstance+0x40>)
 8002f20:	5cd3      	ldrb	r3, [r2, r3]
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	88fa      	ldrh	r2, [r7, #6]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d101      	bne.n	8002f2e <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	e006      	b.n	8002f3c <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	3301      	adds	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d9f0      	bls.n	8002f1c <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002f3a:	23ff      	movs	r3, #255	; 0xff
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	2000085c 	.word	0x2000085c

08002f4c <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	; 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10e      	bne.n	8002f7a <BSP_LED_Init+0x2e>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	4b21      	ldr	r3, [pc, #132]	; (8002fe8 <BSP_LED_Init+0x9c>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	4a20      	ldr	r2, [pc, #128]	; (8002fe8 <BSP_LED_Init+0x9c>)
 8002f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6c:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <BSP_LED_Init+0x9c>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	e010      	b.n	8002f9c <BSP_LED_Init+0x50>
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d10d      	bne.n	8002f9c <BSP_LED_Init+0x50>
 8002f80:	2300      	movs	r3, #0
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <BSP_LED_Init+0x9c>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	4a17      	ldr	r2, [pc, #92]	; (8002fe8 <BSP_LED_Init+0x9c>)
 8002f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <BSP_LED_Init+0x9c>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	4a13      	ldr	r2, [pc, #76]	; (8002fec <BSP_LED_Init+0xa0>)
 8002fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4a0e      	ldr	r2, [pc, #56]	; (8002ff0 <BSP_LED_Init+0xa4>)
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fba:	f107 0214 	add.w	r2, r7, #20
 8002fbe:	4611      	mov	r1, r2
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f002 fa89 	bl	80054d8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002fc6:	79fb      	ldrb	r3, [r7, #7]
 8002fc8:	4a09      	ldr	r2, [pc, #36]	; (8002ff0 <BSP_LED_Init+0xa4>)
 8002fca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	4a06      	ldr	r2, [pc, #24]	; (8002fec <BSP_LED_Init+0xa0>)
 8002fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f002 fc29 	bl	8005830 <HAL_GPIO_WritePin>
}
 8002fde:	bf00      	nop
 8002fe0:	3728      	adds	r7, #40	; 0x28
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	0800e000 	.word	0x0800e000
 8002ff0:	20000098 	.word	0x20000098

08002ff4 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002ffe:	79fb      	ldrb	r3, [r7, #7]
 8003000:	4a07      	ldr	r2, [pc, #28]	; (8003020 <BSP_LED_On+0x2c>)
 8003002:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	4a06      	ldr	r2, [pc, #24]	; (8003024 <BSP_LED_On+0x30>)
 800300a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800300e:	2201      	movs	r2, #1
 8003010:	4619      	mov	r1, r3
 8003012:	f002 fc0d 	bl	8005830 <HAL_GPIO_WritePin>
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000098 	.word	0x20000098
 8003024:	0800e000 	.word	0x0800e000

08003028 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	4a07      	ldr	r2, [pc, #28]	; (8003054 <BSP_LED_Off+0x2c>)
 8003036:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	4a06      	ldr	r2, [pc, #24]	; (8003058 <BSP_LED_Off+0x30>)
 800303e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003042:	2200      	movs	r2, #0
 8003044:	4619      	mov	r1, r3
 8003046:	f002 fbf3 	bl	8005830 <HAL_GPIO_WritePin>
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000098 	.word	0x20000098
 8003058:	0800e000 	.word	0x0800e000

0800305c <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	4603      	mov	r3, r0
 8003064:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	4a07      	ldr	r2, [pc, #28]	; (8003088 <BSP_LED_Toggle+0x2c>)
 800306a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800306e:	79fb      	ldrb	r3, [r7, #7]
 8003070:	4906      	ldr	r1, [pc, #24]	; (800308c <BSP_LED_Toggle+0x30>)
 8003072:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003076:	4619      	mov	r1, r3
 8003078:	4610      	mov	r0, r2
 800307a:	f002 fbf2 	bl	8005862 <HAL_GPIO_TogglePin>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000098 	.word	0x20000098
 800308c:	0800e000 	.word	0x0800e000

08003090 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08a      	sub	sp, #40	; 0x28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a33      	ldr	r2, [pc, #204]	; (800316c <I2Cx_MspInit+0xdc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d15f      	bne.n	8003162 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	4b32      	ldr	r3, [pc, #200]	; (8003170 <I2Cx_MspInit+0xe0>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a31      	ldr	r2, [pc, #196]	; (8003170 <I2Cx_MspInit+0xe0>)
 80030ac:	f043 0304 	orr.w	r3, r3, #4
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b2f      	ldr	r3, [pc, #188]	; (8003170 <I2Cx_MspInit+0xe0>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <I2Cx_MspInit+0xe0>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c6:	4a2a      	ldr	r2, [pc, #168]	; (8003170 <I2Cx_MspInit+0xe0>)
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b28      	ldr	r3, [pc, #160]	; (8003170 <I2Cx_MspInit+0xe0>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80030da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80030e0:	2312      	movs	r3, #18
 80030e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80030e8:	2302      	movs	r3, #2
 80030ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80030ec:	2304      	movs	r3, #4
 80030ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	4619      	mov	r1, r3
 80030f6:	481f      	ldr	r0, [pc, #124]	; (8003174 <I2Cx_MspInit+0xe4>)
 80030f8:	f002 f9ee 	bl	80054d8 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80030fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003100:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003102:	f107 0314 	add.w	r3, r7, #20
 8003106:	4619      	mov	r1, r3
 8003108:	481b      	ldr	r0, [pc, #108]	; (8003178 <I2Cx_MspInit+0xe8>)
 800310a:	f002 f9e5 	bl	80054d8 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <I2Cx_MspInit+0xe0>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	4a16      	ldr	r2, [pc, #88]	; (8003170 <I2Cx_MspInit+0xe0>)
 8003118:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800311c:	6413      	str	r3, [r2, #64]	; 0x40
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <I2Cx_MspInit+0xe0>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <I2Cx_MspInit+0xe0>)
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4a10      	ldr	r2, [pc, #64]	; (8003170 <I2Cx_MspInit+0xe0>)
 8003130:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003134:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <I2Cx_MspInit+0xe0>)
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	4a0d      	ldr	r2, [pc, #52]	; (8003170 <I2Cx_MspInit+0xe0>)
 800313c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003140:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	210f      	movs	r1, #15
 8003146:	2048      	movs	r0, #72	; 0x48
 8003148:	f001 fd3b 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800314c:	2048      	movs	r0, #72	; 0x48
 800314e:	f001 fd54 	bl	8004bfa <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	210f      	movs	r1, #15
 8003156:	2049      	movs	r0, #73	; 0x49
 8003158:	f001 fd33 	bl	8004bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 800315c:	2049      	movs	r0, #73	; 0x49
 800315e:	f001 fd4c 	bl	8004bfa <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003162:	bf00      	nop
 8003164:	3728      	adds	r7, #40	; 0x28
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40005c00 	.word	0x40005c00
 8003170:	40023800 	.word	0x40023800
 8003174:	40020000 	.word	0x40020000
 8003178:	40020800 	.word	0x40020800

0800317c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003180:	4814      	ldr	r0, [pc, #80]	; (80031d4 <I2Cx_Init+0x58>)
 8003182:	f003 f831 	bl	80061e8 <HAL_I2C_GetState>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d121      	bne.n	80031d0 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <I2Cx_Init+0x58>)
 800318e:	4a12      	ldr	r2, [pc, #72]	; (80031d8 <I2Cx_Init+0x5c>)
 8003190:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <I2Cx_Init+0x58>)
 8003194:	4a11      	ldr	r2, [pc, #68]	; (80031dc <I2Cx_Init+0x60>)
 8003196:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003198:	4b0e      	ldr	r3, [pc, #56]	; (80031d4 <I2Cx_Init+0x58>)
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <I2Cx_Init+0x58>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80031a4:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <I2Cx_Init+0x58>)
 80031a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031aa:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <I2Cx_Init+0x58>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <I2Cx_Init+0x58>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80031b8:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <I2Cx_Init+0x58>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80031be:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <I2Cx_Init+0x58>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80031c4:	4803      	ldr	r0, [pc, #12]	; (80031d4 <I2Cx_Init+0x58>)
 80031c6:	f7ff ff63 	bl	8003090 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80031ca:	4802      	ldr	r0, [pc, #8]	; (80031d4 <I2Cx_Init+0x58>)
 80031cc:	f002 fb64 	bl	8005898 <HAL_I2C_Init>
  }
}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000860 	.word	0x20000860
 80031d8:	40005c00 	.word	0x40005c00
 80031dc:	000186a0 	.word	0x000186a0

080031e0 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	603b      	str	r3, [r7, #0]
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <I2Cx_ITConfig+0x58>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <I2Cx_ITConfig+0x58>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <I2Cx_ITConfig+0x58>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003206:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003208:	2301      	movs	r3, #1
 800320a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <I2Cx_ITConfig+0x5c>)
 8003212:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	4619      	mov	r1, r3
 8003218:	4809      	ldr	r0, [pc, #36]	; (8003240 <I2Cx_ITConfig+0x60>)
 800321a:	f002 f95d 	bl	80054d8 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800321e:	2200      	movs	r2, #0
 8003220:	210f      	movs	r1, #15
 8003222:	2028      	movs	r0, #40	; 0x28
 8003224:	f001 fccd 	bl	8004bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003228:	2028      	movs	r0, #40	; 0x28
 800322a:	f001 fce6 	bl	8004bfa <HAL_NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	10210000 	.word	0x10210000
 8003240:	40020000 	.word	0x40020000

08003244 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af04      	add	r7, sp, #16
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
 800324e:	460b      	mov	r3, r1
 8003250:	71bb      	strb	r3, [r7, #6]
 8003252:	4613      	mov	r3, r2
 8003254:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	b299      	uxth	r1, r3
 800325e:	79bb      	ldrb	r3, [r7, #6]
 8003260:	b29a      	uxth	r2, r3
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <I2Cx_WriteData+0x4c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	9302      	str	r3, [sp, #8]
 8003268:	2301      	movs	r3, #1
 800326a:	9301      	str	r3, [sp, #4]
 800326c:	1d7b      	adds	r3, r7, #5
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2301      	movs	r3, #1
 8003272:	4808      	ldr	r0, [pc, #32]	; (8003294 <I2Cx_WriteData+0x50>)
 8003274:	f002 fc98 	bl	8005ba8 <HAL_I2C_Mem_Write>
 8003278:	4603      	mov	r3, r0
 800327a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800327c:	7bfb      	ldrb	r3, [r7, #15]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003282:	f000 f863 	bl	800334c <I2Cx_Error>
  }        
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200000a0 	.word	0x200000a0
 8003294:	20000860 	.word	0x20000860

08003298 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af04      	add	r7, sp, #16
 800329e:	4603      	mov	r3, r0
 80032a0:	460a      	mov	r2, r1
 80032a2:	71fb      	strb	r3, [r7, #7]
 80032a4:	4613      	mov	r3, r2
 80032a6:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	b299      	uxth	r1, r3
 80032b4:	79bb      	ldrb	r3, [r7, #6]
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <I2Cx_ReadData+0x50>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	9302      	str	r3, [sp, #8]
 80032be:	2301      	movs	r3, #1
 80032c0:	9301      	str	r3, [sp, #4]
 80032c2:	f107 030e 	add.w	r3, r7, #14
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	2301      	movs	r3, #1
 80032ca:	4808      	ldr	r0, [pc, #32]	; (80032ec <I2Cx_ReadData+0x54>)
 80032cc:	f002 fd66 	bl	8005d9c <HAL_I2C_Mem_Read>
 80032d0:	4603      	mov	r3, r0
 80032d2:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80032da:	f000 f837 	bl	800334c <I2Cx_Error>
  
  }
  return value;
 80032de:	7bbb      	ldrb	r3, [r7, #14]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3710      	adds	r7, #16
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	200000a0 	.word	0x200000a0
 80032ec:	20000860 	.word	0x20000860

080032f0 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af04      	add	r7, sp, #16
 80032f6:	603a      	str	r2, [r7, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
 80032fe:	460b      	mov	r3, r1
 8003300:	71bb      	strb	r3, [r7, #6]
 8003302:	4613      	mov	r3, r2
 8003304:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003306:	2300      	movs	r3, #0
 8003308:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	b299      	uxth	r1, r3
 800330e:	79bb      	ldrb	r3, [r7, #6]
 8003310:	b29a      	uxth	r2, r3
 8003312:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <I2Cx_ReadBuffer+0x54>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	9302      	str	r3, [sp, #8]
 8003318:	88bb      	ldrh	r3, [r7, #4]
 800331a:	9301      	str	r3, [sp, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	2301      	movs	r3, #1
 8003322:	4809      	ldr	r0, [pc, #36]	; (8003348 <I2Cx_ReadBuffer+0x58>)
 8003324:	f002 fd3a 	bl	8005d9c <HAL_I2C_Mem_Read>
 8003328:	4603      	mov	r3, r0
 800332a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003332:	2300      	movs	r3, #0
 8003334:	e002      	b.n	800333c <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003336:	f000 f809 	bl	800334c <I2Cx_Error>

    return 1;
 800333a:	2301      	movs	r3, #1
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	200000a0 	.word	0x200000a0
 8003348:	20000860 	.word	0x20000860

0800334c <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003350:	4803      	ldr	r0, [pc, #12]	; (8003360 <I2Cx_Error+0x14>)
 8003352:	f002 fbe5 	bl	8005b20 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8003356:	f7ff ff11 	bl	800317c <I2Cx_Init>
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000860 	.word	0x20000860

08003364 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8003368:	4819      	ldr	r0, [pc, #100]	; (80033d0 <SPIx_Init+0x6c>)
 800336a:	f005 f9ca 	bl	8008702 <HAL_SPI_GetState>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d12b      	bne.n	80033cc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003374:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <SPIx_Init+0x6c>)
 8003376:	4a17      	ldr	r2, [pc, #92]	; (80033d4 <SPIx_Init+0x70>)
 8003378:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <SPIx_Init+0x6c>)
 800337c:	2218      	movs	r2, #24
 800337e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <SPIx_Init+0x6c>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003386:	4b12      	ldr	r3, [pc, #72]	; (80033d0 <SPIx_Init+0x6c>)
 8003388:	2200      	movs	r2, #0
 800338a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 800338c:	4b10      	ldr	r3, [pc, #64]	; (80033d0 <SPIx_Init+0x6c>)
 800338e:	2200      	movs	r2, #0
 8003390:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8003392:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <SPIx_Init+0x6c>)
 8003394:	2200      	movs	r2, #0
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8003398:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <SPIx_Init+0x6c>)
 800339a:	2207      	movs	r2, #7
 800339c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <SPIx_Init+0x6c>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80033a4:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <SPIx_Init+0x6c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80033aa:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <SPIx_Init+0x6c>)
 80033ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80033b2:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <SPIx_Init+0x6c>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <SPIx_Init+0x6c>)
 80033ba:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033be:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80033c0:	4803      	ldr	r0, [pc, #12]	; (80033d0 <SPIx_Init+0x6c>)
 80033c2:	f000 f853 	bl	800346c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80033c6:	4802      	ldr	r0, [pc, #8]	; (80033d0 <SPIx_Init+0x6c>)
 80033c8:	f004 fc11 	bl	8007bee <HAL_SPI_Init>
  } 
}
 80033cc:	bf00      	nop
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	200008b4 	.word	0x200008b4
 80033d4:	40015000 	.word	0x40015000

080033d8 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <SPIx_Read+0x38>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f107 0108 	add.w	r1, r7, #8
 80033f2:	4808      	ldr	r0, [pc, #32]	; (8003414 <SPIx_Read+0x3c>)
 80033f4:	f004 fdf8 	bl	8007fe8 <HAL_SPI_Receive>
 80033f8:	4603      	mov	r3, r0
 80033fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003402:	f000 f827 	bl	8003454 <SPIx_Error>
  }
  
  return readvalue;
 8003406:	68bb      	ldr	r3, [r7, #8]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	200000a4 	.word	0x200000a4
 8003414:	200008b4 	.word	0x200008b4

08003418 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003426:	4b09      	ldr	r3, [pc, #36]	; (800344c <SPIx_Write+0x34>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	1db9      	adds	r1, r7, #6
 800342c:	2201      	movs	r2, #1
 800342e:	4808      	ldr	r0, [pc, #32]	; (8003450 <SPIx_Write+0x38>)
 8003430:	f004 fc84 	bl	8007d3c <HAL_SPI_Transmit>
 8003434:	4603      	mov	r3, r0
 8003436:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800343e:	f000 f809 	bl	8003454 <SPIx_Error>
  }
}
 8003442:	bf00      	nop
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	200000a4 	.word	0x200000a4
 8003450:	200008b4 	.word	0x200008b4

08003454 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003458:	4803      	ldr	r0, [pc, #12]	; (8003468 <SPIx_Error+0x14>)
 800345a:	f004 fc33 	bl	8007cc4 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800345e:	f7ff ff81 	bl	8003364 <SPIx_Init>
}
 8003462:	bf00      	nop
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	200008b4 	.word	0x200008b4

0800346c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	; 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003474:	2300      	movs	r3, #0
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <SPIx_MspInit+0x6c>)
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	4a16      	ldr	r2, [pc, #88]	; (80034d8 <SPIx_MspInit+0x6c>)
 800347e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003482:	6453      	str	r3, [r2, #68]	; 0x44
 8003484:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <SPIx_MspInit+0x6c>)
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003490:	2300      	movs	r3, #0
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <SPIx_MspInit+0x6c>)
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	4a0f      	ldr	r2, [pc, #60]	; (80034d8 <SPIx_MspInit+0x6c>)
 800349a:	f043 0320 	orr.w	r3, r3, #32
 800349e:	6313      	str	r3, [r2, #48]	; 0x30
 80034a0:	4b0d      	ldr	r3, [pc, #52]	; (80034d8 <SPIx_MspInit+0x6c>)
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80034ac:	f44f 7360 	mov.w	r3, #896	; 0x380
 80034b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80034b2:	2302      	movs	r3, #2
 80034b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80034b6:	2302      	movs	r3, #2
 80034b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80034ba:	2301      	movs	r3, #1
 80034bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80034be:	2305      	movs	r3, #5
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80034c2:	f107 0314 	add.w	r3, r7, #20
 80034c6:	4619      	mov	r1, r3
 80034c8:	4804      	ldr	r0, [pc, #16]	; (80034dc <SPIx_MspInit+0x70>)
 80034ca:	f002 f805 	bl	80054d8 <HAL_GPIO_Init>
}
 80034ce:	bf00      	nop
 80034d0:	3728      	adds	r7, #40	; 0x28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40021400 	.word	0x40021400

080034e0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80034e6:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <LCD_IO_Init+0xe0>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d164      	bne.n	80035b8 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80034ee:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <LCD_IO_Init+0xe0>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]
 80034f8:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <LCD_IO_Init+0xe4>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	4a31      	ldr	r2, [pc, #196]	; (80035c4 <LCD_IO_Init+0xe4>)
 80034fe:	f043 0308 	orr.w	r3, r3, #8
 8003502:	6313      	str	r3, [r2, #48]	; 0x30
 8003504:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <LCD_IO_Init+0xe4>)
 8003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	60bb      	str	r3, [r7, #8]
 800350e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003516:	2301      	movs	r3, #1
 8003518:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800351e:	2302      	movs	r3, #2
 8003520:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003522:	f107 030c 	add.w	r3, r7, #12
 8003526:	4619      	mov	r1, r3
 8003528:	4827      	ldr	r0, [pc, #156]	; (80035c8 <LCD_IO_Init+0xe8>)
 800352a:	f001 ffd5 	bl	80054d8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <LCD_IO_Init+0xe4>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	4a23      	ldr	r2, [pc, #140]	; (80035c4 <LCD_IO_Init+0xe4>)
 8003538:	f043 0308 	orr.w	r3, r3, #8
 800353c:	6313      	str	r3, [r2, #48]	; 0x30
 800353e:	4b21      	ldr	r3, [pc, #132]	; (80035c4 <LCD_IO_Init+0xe4>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	f003 0308 	and.w	r3, r3, #8
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800354a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800354e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003550:	2301      	movs	r3, #1
 8003552:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003558:	2302      	movs	r3, #2
 800355a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 800355c:	f107 030c 	add.w	r3, r7, #12
 8003560:	4619      	mov	r1, r3
 8003562:	4819      	ldr	r0, [pc, #100]	; (80035c8 <LCD_IO_Init+0xe8>)
 8003564:	f001 ffb8 	bl	80054d8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003568:	2300      	movs	r3, #0
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <LCD_IO_Init+0xe4>)
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <LCD_IO_Init+0xe4>)
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	6313      	str	r3, [r2, #48]	; 0x30
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <LCD_IO_Init+0xe4>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003584:	2304      	movs	r3, #4
 8003586:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003588:	2301      	movs	r3, #1
 800358a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003590:	2302      	movs	r3, #2
 8003592:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	4619      	mov	r1, r3
 800359a:	480c      	ldr	r0, [pc, #48]	; (80035cc <LCD_IO_Init+0xec>)
 800359c:	f001 ff9c 	bl	80054d8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80035a0:	2200      	movs	r2, #0
 80035a2:	2104      	movs	r1, #4
 80035a4:	4809      	ldr	r0, [pc, #36]	; (80035cc <LCD_IO_Init+0xec>)
 80035a6:	f002 f943 	bl	8005830 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80035aa:	2201      	movs	r2, #1
 80035ac:	2104      	movs	r1, #4
 80035ae:	4807      	ldr	r0, [pc, #28]	; (80035cc <LCD_IO_Init+0xec>)
 80035b0:	f002 f93e 	bl	8005830 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80035b4:	f7ff fed6 	bl	8003364 <SPIx_Init>
  }
}
 80035b8:	bf00      	nop
 80035ba:	3720      	adds	r7, #32
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	2000090c 	.word	0x2000090c
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40020c00 	.word	0x40020c00
 80035cc:	40020800 	.word	0x40020800

080035d0 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80035da:	2201      	movs	r2, #1
 80035dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035e0:	480a      	ldr	r0, [pc, #40]	; (800360c <LCD_IO_WriteData+0x3c>)
 80035e2:	f002 f925 	bl	8005830 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80035e6:	2200      	movs	r2, #0
 80035e8:	2104      	movs	r1, #4
 80035ea:	4809      	ldr	r0, [pc, #36]	; (8003610 <LCD_IO_WriteData+0x40>)
 80035ec:	f002 f920 	bl	8005830 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80035f0:	88fb      	ldrh	r3, [r7, #6]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ff10 	bl	8003418 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80035f8:	2201      	movs	r2, #1
 80035fa:	2104      	movs	r1, #4
 80035fc:	4804      	ldr	r0, [pc, #16]	; (8003610 <LCD_IO_WriteData+0x40>)
 80035fe:	f002 f917 	bl	8005830 <HAL_GPIO_WritePin>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40020c00 	.word	0x40020c00
 8003610:	40020800 	.word	0x40020800

08003614 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800361e:	2200      	movs	r2, #0
 8003620:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003624:	480a      	ldr	r0, [pc, #40]	; (8003650 <LCD_IO_WriteReg+0x3c>)
 8003626:	f002 f903 	bl	8005830 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800362a:	2200      	movs	r2, #0
 800362c:	2104      	movs	r1, #4
 800362e:	4809      	ldr	r0, [pc, #36]	; (8003654 <LCD_IO_WriteReg+0x40>)
 8003630:	f002 f8fe 	bl	8005830 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	b29b      	uxth	r3, r3
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff feed 	bl	8003418 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800363e:	2201      	movs	r2, #1
 8003640:	2104      	movs	r1, #4
 8003642:	4804      	ldr	r0, [pc, #16]	; (8003654 <LCD_IO_WriteReg+0x40>)
 8003644:	f002 f8f4 	bl	8005830 <HAL_GPIO_WritePin>
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40020c00 	.word	0x40020c00
 8003654:	40020800 	.word	0x40020800

08003658 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	460a      	mov	r2, r1
 8003662:	80fb      	strh	r3, [r7, #6]
 8003664:	4613      	mov	r3, r2
 8003666:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800366c:	2200      	movs	r2, #0
 800366e:	2104      	movs	r1, #4
 8003670:	4810      	ldr	r0, [pc, #64]	; (80036b4 <LCD_IO_ReadData+0x5c>)
 8003672:	f002 f8dd 	bl	8005830 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003676:	2200      	movs	r2, #0
 8003678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800367c:	480e      	ldr	r0, [pc, #56]	; (80036b8 <LCD_IO_ReadData+0x60>)
 800367e:	f002 f8d7 	bl	8005830 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fec7 	bl	8003418 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800368a:	797b      	ldrb	r3, [r7, #5]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fea3 	bl	80033d8 <SPIx_Read>
 8003692:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003694:	2201      	movs	r2, #1
 8003696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800369a:	4807      	ldr	r0, [pc, #28]	; (80036b8 <LCD_IO_ReadData+0x60>)
 800369c:	f002 f8c8 	bl	8005830 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80036a0:	2201      	movs	r2, #1
 80036a2:	2104      	movs	r1, #4
 80036a4:	4803      	ldr	r0, [pc, #12]	; (80036b4 <LCD_IO_ReadData+0x5c>)
 80036a6:	f002 f8c3 	bl	8005830 <HAL_GPIO_WritePin>
  
  return readvalue;
 80036aa:	68fb      	ldr	r3, [r7, #12]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3710      	adds	r7, #16
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40020800 	.word	0x40020800
 80036b8:	40020c00 	.word	0x40020c00

080036bc <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f001 f97d 	bl	80049c4 <HAL_Delay>
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80036d6:	f7ff fd51 	bl	800317c <I2Cx_Init>
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}

080036de <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80036e2:	f7ff fd7d 	bl	80031e0 <I2Cx_ITConfig>
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}

080036ea <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	4603      	mov	r3, r0
 80036f2:	71fb      	strb	r3, [r7, #7]
 80036f4:	460b      	mov	r3, r1
 80036f6:	71bb      	strb	r3, [r7, #6]
 80036f8:	4613      	mov	r3, r2
 80036fa:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80036fc:	797a      	ldrb	r2, [r7, #5]
 80036fe:	79b9      	ldrb	r1, [r7, #6]
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fd9e 	bl	8003244 <I2Cx_WriteData>
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	460a      	mov	r2, r1
 800371a:	71fb      	strb	r3, [r7, #7]
 800371c:	4613      	mov	r3, r2
 800371e:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003720:	79ba      	ldrb	r2, [r7, #6]
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fdb6 	bl	8003298 <I2Cx_ReadData>
 800372c:	4603      	mov	r3, r0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b082      	sub	sp, #8
 800373a:	af00      	add	r7, sp, #0
 800373c:	603a      	str	r2, [r7, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	4603      	mov	r3, r0
 8003742:	71fb      	strb	r3, [r7, #7]
 8003744:	460b      	mov	r3, r1
 8003746:	71bb      	strb	r3, [r7, #6]
 8003748:	4613      	mov	r3, r2
 800374a:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 800374c:	88bb      	ldrh	r3, [r7, #4]
 800374e:	79b9      	ldrb	r1, [r7, #6]
 8003750:	79f8      	ldrb	r0, [r7, #7]
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	f7ff fdcc 	bl	80032f0 <I2Cx_ReadBuffer>
 8003758:	4603      	mov	r3, r0
 800375a:	b29b      	uxth	r3, r3
}
 800375c:	4618      	mov	r0, r3
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f001 f929 	bl	80049c4 <HAL_Delay>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <BSP_LCD_Init_Flipped+0x14>)
 8003782:	2201      	movs	r2, #1
 8003784:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 8003786:	f000 f805 	bl	8003794 <BSP_LCD_Init>
 800378a:	4603      	mov	r3, r0
}
 800378c:	4618      	mov	r0, r3
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000a48 	.word	0x20000a48

08003794 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003798:	4b2d      	ldr	r3, [pc, #180]	; (8003850 <BSP_LCD_Init+0xbc>)
 800379a:	4a2e      	ldr	r2, [pc, #184]	; (8003854 <BSP_LCD_Init+0xc0>)
 800379c:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800379e:	4b2c      	ldr	r3, [pc, #176]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037a0:	2209      	movs	r2, #9
 80037a2:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80037a4:	4b2a      	ldr	r3, [pc, #168]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80037aa:	4b29      	ldr	r3, [pc, #164]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037ac:	221d      	movs	r2, #29
 80037ae:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037b2:	2203      	movs	r2, #3
 80037b4:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80037b6:	4b26      	ldr	r3, [pc, #152]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037b8:	f240 120d 	movw	r2, #269	; 0x10d
 80037bc:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037c0:	f240 1243 	movw	r2, #323	; 0x143
 80037c4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037c8:	f240 1217 	movw	r2, #279	; 0x117
 80037cc:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037d0:	f240 1247 	movw	r2, #327	; 0x147
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80037d6:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80037e6:	4b1a      	ldr	r3, [pc, #104]	; (8003850 <BSP_LCD_Init+0xbc>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80037ee:	4b1a      	ldr	r3, [pc, #104]	; (8003858 <BSP_LCD_Init+0xc4>)
 80037f0:	2208      	movs	r2, #8
 80037f2:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <BSP_LCD_Init+0xc4>)
 80037f6:	22c0      	movs	r2, #192	; 0xc0
 80037f8:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80037fa:	4b17      	ldr	r3, [pc, #92]	; (8003858 <BSP_LCD_Init+0xc4>)
 80037fc:	2204      	movs	r2, #4
 80037fe:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003800:	4b15      	ldr	r3, [pc, #84]	; (8003858 <BSP_LCD_Init+0xc4>)
 8003802:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8003808:	4813      	ldr	r0, [pc, #76]	; (8003858 <BSP_LCD_Init+0xc4>)
 800380a:	f003 ffa7 	bl	800775c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800380e:	4b10      	ldr	r3, [pc, #64]	; (8003850 <BSP_LCD_Init+0xbc>)
 8003810:	2200      	movs	r2, #0
 8003812:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003814:	4b0e      	ldr	r3, [pc, #56]	; (8003850 <BSP_LCD_Init+0xbc>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800381a:	4b0d      	ldr	r3, [pc, #52]	; (8003850 <BSP_LCD_Init+0xbc>)
 800381c:	2200      	movs	r2, #0
 800381e:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003820:	4b0b      	ldr	r3, [pc, #44]	; (8003850 <BSP_LCD_Init+0xbc>)
 8003822:	2200      	movs	r2, #0
 8003824:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8003826:	f000 fb77 	bl	8003f18 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800382a:	4809      	ldr	r0, [pc, #36]	; (8003850 <BSP_LCD_Init+0xbc>)
 800382c:	f003 f842 	bl	80068b4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003830:	4b0a      	ldr	r3, [pc, #40]	; (800385c <BSP_LCD_Init+0xc8>)
 8003832:	4a0b      	ldr	r2, [pc, #44]	; (8003860 <BSP_LCD_Init+0xcc>)
 8003834:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <BSP_LCD_Init+0xc8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800383e:	f000 fd79 	bl	8004334 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003842:	4808      	ldr	r0, [pc, #32]	; (8003864 <BSP_LCD_Init+0xd0>)
 8003844:	f000 f8ce 	bl	80039e4 <BSP_LCD_SetFont>

  return LCD_OK;
 8003848:	2300      	movs	r3, #0
}  
 800384a:	4618      	mov	r0, r3
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000910 	.word	0x20000910
 8003854:	40016800 	.word	0x40016800
 8003858:	200009f8 	.word	0x200009f8
 800385c:	20000a44 	.word	0x20000a44
 8003860:	20000038 	.word	0x20000038
 8003864:	200000a8 	.word	0x200000a8

08003868 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <BSP_LCD_GetXSize+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	4798      	blx	r3
 8003874:	4603      	mov	r3, r0
}
 8003876:	4618      	mov	r0, r3
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000a44 	.word	0x20000a44

08003880 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <BSP_LCD_GetYSize+0x14>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	4798      	blx	r3
 800388c:	4603      	mov	r3, r0
}
 800388e:	4618      	mov	r0, r3
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000a44 	.word	0x20000a44

08003898 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003898:	b580      	push	{r7, lr}
 800389a:	b090      	sub	sp, #64	; 0x40
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80038a8:	f7ff ffde 	bl	8003868 <BSP_LCD_GetXSize>
 80038ac:	4603      	mov	r3, r0
 80038ae:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80038b4:	f7ff ffe4 	bl	8003880 <BSP_LCD_GetYSize>
 80038b8:	4603      	mov	r3, r0
 80038ba:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80038bc:	2300      	movs	r3, #0
 80038be:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80038c4:	23ff      	movs	r3, #255	; 0xff
 80038c6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80038de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80038e2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80038e4:	2307      	movs	r3, #7
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80038e8:	f7ff ffbe 	bl	8003868 <BSP_LCD_GetXSize>
 80038ec:	4603      	mov	r3, r0
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80038f0:	f7ff ffc6 	bl	8003880 <BSP_LCD_GetYSize>
 80038f4:	4603      	mov	r3, r0
 80038f6:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80038f8:	88fa      	ldrh	r2, [r7, #6]
 80038fa:	f107 030c 	add.w	r3, r7, #12
 80038fe:	4619      	mov	r1, r3
 8003900:	4814      	ldr	r0, [pc, #80]	; (8003954 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003902:	f003 f8b1 	bl	8006a68 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	4913      	ldr	r1, [pc, #76]	; (8003958 <BSP_LCD_LayerDefaultInit+0xc0>)
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	3304      	adds	r3, #4
 8003916:	f04f 32ff 	mov.w	r2, #4294967295
 800391a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800391c:	88fa      	ldrh	r2, [r7, #6]
 800391e:	490e      	ldr	r1, [pc, #56]	; (8003958 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003920:	4613      	mov	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	3308      	adds	r3, #8
 800392c:	4a0b      	ldr	r2, [pc, #44]	; (800395c <BSP_LCD_LayerDefaultInit+0xc4>)
 800392e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003930:	88fa      	ldrh	r2, [r7, #6]
 8003932:	4909      	ldr	r1, [pc, #36]	; (8003958 <BSP_LCD_LayerDefaultInit+0xc0>)
 8003934:	4613      	mov	r3, r2
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	4413      	add	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003942:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003944:	4803      	ldr	r0, [pc, #12]	; (8003954 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003946:	f003 f8cd 	bl	8006ae4 <HAL_LTDC_EnableDither>
}
 800394a:	bf00      	nop
 800394c:	3740      	adds	r7, #64	; 0x40
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000910 	.word	0x20000910
 8003958:	20000a2c 	.word	0x20000a2c
 800395c:	200000a8 	.word	0x200000a8

08003960 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003968:	4a04      	ldr	r2, [pc, #16]	; (800397c <BSP_LCD_SelectLayer+0x1c>)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6013      	str	r3, [r2, #0]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000a28 	.word	0x20000a28

08003980 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003988:	4b07      	ldr	r3, [pc, #28]	; (80039a8 <BSP_LCD_SetTextColor+0x28>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4907      	ldr	r1, [pc, #28]	; (80039ac <BSP_LCD_SetTextColor+0x2c>)
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	601a      	str	r2, [r3, #0]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	20000a28 	.word	0x20000a28
 80039ac:	20000a2c 	.word	0x20000a2c

080039b0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80039b8:	4b08      	ldr	r3, [pc, #32]	; (80039dc <BSP_LCD_SetBackColor+0x2c>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4908      	ldr	r1, [pc, #32]	; (80039e0 <BSP_LCD_SetBackColor+0x30>)
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3304      	adds	r3, #4
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	601a      	str	r2, [r3, #0]
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000a28 	.word	0x20000a28
 80039e0:	20000a2c 	.word	0x20000a2c

080039e4 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <BSP_LCD_SetFont+0x2c>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4908      	ldr	r1, [pc, #32]	; (8003a14 <BSP_LCD_SetFont+0x30>)
 80039f2:	4613      	mov	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	3308      	adds	r3, #8
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	601a      	str	r2, [r3, #0]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000a28 	.word	0x20000a28
 8003a14:	20000a2c 	.word	0x20000a2c

08003a18 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003a20:	4b0f      	ldr	r3, [pc, #60]	; (8003a60 <BSP_LCD_Clear+0x48>)
 8003a22:	681c      	ldr	r4, [r3, #0]
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <BSP_LCD_Clear+0x48>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a0e      	ldr	r2, [pc, #56]	; (8003a64 <BSP_LCD_Clear+0x4c>)
 8003a2a:	2134      	movs	r1, #52	; 0x34
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	335c      	adds	r3, #92	; 0x5c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461e      	mov	r6, r3
 8003a38:	f7ff ff16 	bl	8003868 <BSP_LCD_GetXSize>
 8003a3c:	4605      	mov	r5, r0
 8003a3e:	f7ff ff1f 	bl	8003880 <BSP_LCD_GetYSize>
 8003a42:	4602      	mov	r2, r0
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	462a      	mov	r2, r5
 8003a50:	4631      	mov	r1, r6
 8003a52:	4620      	mov	r0, r4
 8003a54:	f000 fc36 	bl	80042c4 <FillBuffer>
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a60:	20000a28 	.word	0x20000a28
 8003a64:	20000910 	.word	0x20000910

08003a68 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	80fb      	strh	r3, [r7, #6]
 8003a72:	460b      	mov	r3, r1
 8003a74:	80bb      	strh	r3, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <BSP_LCD_DisplayChar+0x80>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	491b      	ldr	r1, [pc, #108]	; (8003aec <BSP_LCD_DisplayChar+0x84>)
 8003a80:	4613      	mov	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6819      	ldr	r1, [r3, #0]
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003a96:	4b14      	ldr	r3, [pc, #80]	; (8003ae8 <BSP_LCD_DisplayChar+0x80>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	4c14      	ldr	r4, [pc, #80]	; (8003aec <BSP_LCD_DisplayChar+0x84>)
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4423      	add	r3, r4
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003aac:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <BSP_LCD_DisplayChar+0x80>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4c0d      	ldr	r4, [pc, #52]	; (8003aec <BSP_LCD_DisplayChar+0x84>)
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	4423      	add	r3, r4
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	889b      	ldrh	r3, [r3, #4]
 8003ac6:	3307      	adds	r3, #7
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	da00      	bge.n	8003ace <BSP_LCD_DisplayChar+0x66>
 8003acc:	3307      	adds	r3, #7
 8003ace:	10db      	asrs	r3, r3, #3
 8003ad0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003ad4:	18ca      	adds	r2, r1, r3
 8003ad6:	88b9      	ldrh	r1, [r7, #4]
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fb38 	bl	8004150 <DrawChar>
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd90      	pop	{r4, r7, pc}
 8003ae8:	20000a28 	.word	0x20000a28
 8003aec:	20000a2c 	.word	0x20000a2c

08003af0 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003af0:	b5b0      	push	{r4, r5, r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60ba      	str	r2, [r7, #8]
 8003af8:	461a      	mov	r2, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	81fb      	strh	r3, [r7, #14]
 8003afe:	460b      	mov	r3, r1
 8003b00:	81bb      	strh	r3, [r7, #12]
 8003b02:	4613      	mov	r3, r2
 8003b04:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003b06:	2301      	movs	r3, #1
 8003b08:	83fb      	strh	r3, [r7, #30]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003b0e:	2300      	movs	r3, #0
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003b1a:	e002      	b.n	8003b22 <BSP_LCD_DisplayStringAt+0x32>
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	61bb      	str	r3, [r7, #24]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	617a      	str	r2, [r7, #20]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f6      	bne.n	8003b1c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003b2e:	f7ff fe9b 	bl	8003868 <BSP_LCD_GetXSize>
 8003b32:	4601      	mov	r1, r0
 8003b34:	4b4b      	ldr	r3, [pc, #300]	; (8003c64 <BSP_LCD_DisplayStringAt+0x174>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	484b      	ldr	r0, [pc, #300]	; (8003c68 <BSP_LCD_DisplayStringAt+0x178>)
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4403      	add	r3, r0
 8003b44:	3308      	adds	r3, #8
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	889b      	ldrh	r3, [r3, #4]
 8003b4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b4e:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d01c      	beq.n	8003b90 <BSP_LCD_DisplayStringAt+0xa0>
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	dc33      	bgt.n	8003bc2 <BSP_LCD_DisplayStringAt+0xd2>
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d002      	beq.n	8003b64 <BSP_LCD_DisplayStringAt+0x74>
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d019      	beq.n	8003b96 <BSP_LCD_DisplayStringAt+0xa6>
 8003b62:	e02e      	b.n	8003bc2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	1ad1      	subs	r1, r2, r3
 8003b6a:	4b3e      	ldr	r3, [pc, #248]	; (8003c64 <BSP_LCD_DisplayStringAt+0x174>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	483e      	ldr	r0, [pc, #248]	; (8003c68 <BSP_LCD_DisplayStringAt+0x178>)
 8003b70:	4613      	mov	r3, r2
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4403      	add	r3, r0
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	889b      	ldrh	r3, [r3, #4]
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	89fb      	ldrh	r3, [r7, #14]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	83fb      	strh	r3, [r7, #30]
      break;
 8003b8e:	e01b      	b.n	8003bc8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003b90:	89fb      	ldrh	r3, [r7, #14]
 8003b92:	83fb      	strh	r3, [r7, #30]
      break;
 8003b94:	e018      	b.n	8003bc8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	b299      	uxth	r1, r3
 8003b9e:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <BSP_LCD_DisplayStringAt+0x174>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4831      	ldr	r0, [pc, #196]	; (8003c68 <BSP_LCD_DisplayStringAt+0x178>)
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4413      	add	r3, r2
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4403      	add	r3, r0
 8003bae:	3308      	adds	r3, #8
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	889b      	ldrh	r3, [r3, #4]
 8003bb4:	fb11 f303 	smulbb	r3, r1, r3
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	89fb      	ldrh	r3, [r7, #14]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	83fb      	strh	r3, [r7, #30]
      break;
 8003bc0:	e002      	b.n	8003bc8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003bc2:	89fb      	ldrh	r3, [r7, #14]
 8003bc4:	83fb      	strh	r3, [r7, #30]
      break;
 8003bc6:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003bc8:	e01a      	b.n	8003c00 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	89b9      	ldrh	r1, [r7, #12]
 8003bd0:	8bfb      	ldrh	r3, [r7, #30]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff ff48 	bl	8003a68 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003bd8:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <BSP_LCD_DisplayStringAt+0x174>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	4922      	ldr	r1, [pc, #136]	; (8003c68 <BSP_LCD_DisplayStringAt+0x178>)
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	3308      	adds	r3, #8
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	889a      	ldrh	r2, [r3, #4]
 8003bee:	8bfb      	ldrh	r3, [r7, #30]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	60bb      	str	r3, [r7, #8]
    i++;
 8003bfa:	8bbb      	ldrh	r3, [r7, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2dc      	uxtb	r4, r3
 8003c0e:	f7ff fe2b 	bl	8003868 <BSP_LCD_GetXSize>
 8003c12:	8bb9      	ldrh	r1, [r7, #28]
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <BSP_LCD_DisplayStringAt+0x174>)
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4d13      	ldr	r5, [pc, #76]	; (8003c68 <BSP_LCD_DisplayStringAt+0x178>)
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	442b      	add	r3, r5
 8003c24:	3308      	adds	r3, #8
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	889b      	ldrh	r3, [r3, #4]
 8003c2a:	fb01 f303 	mul.w	r3, r1, r3
 8003c2e:	1ac3      	subs	r3, r0, r3
 8003c30:	b299      	uxth	r1, r3
 8003c32:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <BSP_LCD_DisplayStringAt+0x174>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	480c      	ldr	r0, [pc, #48]	; (8003c68 <BSP_LCD_DisplayStringAt+0x178>)
 8003c38:	4613      	mov	r3, r2
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4403      	add	r3, r0
 8003c42:	3308      	adds	r3, #8
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	889b      	ldrh	r3, [r3, #4]
 8003c48:	4299      	cmp	r1, r3
 8003c4a:	bf2c      	ite	cs
 8003c4c:	2301      	movcs	r3, #1
 8003c4e:	2300      	movcc	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	4023      	ands	r3, r4
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1b7      	bne.n	8003bca <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003c5a:	bf00      	nop
 8003c5c:	bf00      	nop
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bdb0      	pop	{r4, r5, r7, pc}
 8003c64:	20000a28 	.word	0x20000a28
 8003c68:	20000a2c 	.word	0x20000a2c

08003c6c <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b08b      	sub	sp, #44	; 0x2c
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4604      	mov	r4, r0
 8003c74:	4608      	mov	r0, r1
 8003c76:	4611      	mov	r1, r2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	80fb      	strh	r3, [r7, #6]
 8003c7e:	4603      	mov	r3, r0
 8003c80:	80bb      	strh	r3, [r7, #4]
 8003c82:	460b      	mov	r3, r1
 8003c84:	807b      	strh	r3, [r7, #2]
 8003c86:	4613      	mov	r3, r2
 8003c88:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	823b      	strh	r3, [r7, #16]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	81fb      	strh	r3, [r7, #14]
 8003c92:	2300      	movs	r3, #0
 8003c94:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c96:	2300      	movs	r3, #0
 8003c98:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	83fb      	strh	r3, [r7, #30]
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	83bb      	strh	r3, [r7, #28]
 8003caa:	2300      	movs	r3, #0
 8003cac:	837b      	strh	r3, [r7, #26]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	833b      	strh	r3, [r7, #24]
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	82fb      	strh	r3, [r7, #22]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003cbe:	887a      	ldrh	r2, [r7, #2]
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bfb8      	it	lt
 8003cc8:	425b      	neglt	r3, r3
 8003cca:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003ccc:	883a      	ldrh	r2, [r7, #0]
 8003cce:	88bb      	ldrh	r3, [r7, #4]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	bfb8      	it	lt
 8003cd6:	425b      	neglt	r3, r3
 8003cd8:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003cde:	88bb      	ldrh	r3, [r7, #4]
 8003ce0:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d304      	bcc.n	8003cf4 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003cea:	2301      	movs	r3, #1
 8003cec:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	843b      	strh	r3, [r7, #32]
 8003cf2:	e005      	b.n	8003d00 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cf8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cfe:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003d00:	883a      	ldrh	r2, [r7, #0]
 8003d02:	88bb      	ldrh	r3, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d304      	bcc.n	8003d12 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	83bb      	strh	r3, [r7, #28]
 8003d10:	e005      	b.n	8003d1e <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d16:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d1c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003d1e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003d22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	db10      	blt.n	8003d4c <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003d2e:	2300      	movs	r3, #0
 8003d30:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003d32:	8a3b      	ldrh	r3, [r7, #16]
 8003d34:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003d36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003d3a:	0fda      	lsrs	r2, r3, #31
 8003d3c:	4413      	add	r3, r2
 8003d3e:	105b      	asrs	r3, r3, #1
 8003d40:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003d42:	89fb      	ldrh	r3, [r7, #14]
 8003d44:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003d46:	8a3b      	ldrh	r3, [r7, #16]
 8003d48:	82bb      	strh	r3, [r7, #20]
 8003d4a:	e00f      	b.n	8003d6c <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003d50:	2300      	movs	r3, #0
 8003d52:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003d54:	89fb      	ldrh	r3, [r7, #14]
 8003d56:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003d58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d5c:	0fda      	lsrs	r2, r3, #31
 8003d5e:	4413      	add	r3, r2
 8003d60:	105b      	asrs	r3, r3, #1
 8003d62:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003d64:	8a3b      	ldrh	r3, [r7, #16]
 8003d66:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003d68:	89fb      	ldrh	r3, [r7, #14]
 8003d6a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	827b      	strh	r3, [r7, #18]
 8003d70:	e037      	b.n	8003de2 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003d72:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003d74:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <BSP_LCD_DrawLine+0x18c>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4c20      	ldr	r4, [pc, #128]	; (8003dfc <BSP_LCD_DrawLine+0x190>)
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4423      	add	r3, r4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f000 f99b 	bl	80040c4 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003d8e:	8b3a      	ldrh	r2, [r7, #24]
 8003d90:	8afb      	ldrh	r3, [r7, #22]
 8003d92:	4413      	add	r3, r2
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003d98:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003d9c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	db0e      	blt.n	8003dc2 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003da4:	8b3a      	ldrh	r2, [r7, #24]
 8003da6:	8b7b      	ldrh	r3, [r7, #26]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003dae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003db0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003db2:	4413      	add	r3, r2
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003db8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dba:	8bfb      	ldrh	r3, [r7, #30]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003dc2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003dc4:	8c3b      	ldrh	r3, [r7, #32]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003dcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003dce:	8bbb      	ldrh	r3, [r7, #28]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003dd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3301      	adds	r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	827b      	strh	r3, [r7, #18]
 8003de2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003de6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	ddc1      	ble.n	8003d72 <BSP_LCD_DrawLine+0x106>
  }
}
 8003dee:	bf00      	nop
 8003df0:	bf00      	nop
 8003df2:	372c      	adds	r7, #44	; 0x2c
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd90      	pop	{r4, r7, pc}
 8003df8:	20000a28 	.word	0x20000a28
 8003dfc:	20000a2c 	.word	0x20000a2c

08003e00 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e04:	b086      	sub	sp, #24
 8003e06:	af02      	add	r7, sp, #8
 8003e08:	4604      	mov	r4, r0
 8003e0a:	4608      	mov	r0, r1
 8003e0c:	4611      	mov	r1, r2
 8003e0e:	461a      	mov	r2, r3
 8003e10:	4623      	mov	r3, r4
 8003e12:	80fb      	strh	r3, [r7, #6]
 8003e14:	4603      	mov	r3, r0
 8003e16:	80bb      	strh	r3, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	807b      	strh	r3, [r7, #2]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003e20:	2300      	movs	r3, #0
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003e24:	4b30      	ldr	r3, [pc, #192]	; (8003ee8 <BSP_LCD_FillRect+0xe8>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4930      	ldr	r1, [pc, #192]	; (8003eec <BSP_LCD_FillRect+0xec>)
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fda2 	bl	8003980 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8003e3c:	4b2c      	ldr	r3, [pc, #176]	; (8003ef0 <BSP_LCD_FillRect+0xf0>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01b      	beq.n	8003e7c <BSP_LCD_FillRect+0x7c>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +76800); //Rotate by 180°
 8003e44:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <BSP_LCD_FillRect+0xe8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2a      	ldr	r2, [pc, #168]	; (8003ef4 <BSP_LCD_FillRect+0xf4>)
 8003e4a:	2134      	movs	r1, #52	; 0x34
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	335c      	adds	r3, #92	; 0x5c
 8003e54:	681c      	ldr	r4, [r3, #0]
 8003e56:	f7ff fd07 	bl	8003868 <BSP_LCD_GetXSize>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	425b      	negs	r3, r3
 8003e5e:	88b9      	ldrh	r1, [r7, #4]
 8003e60:	883a      	ldrh	r2, [r7, #0]
 8003e62:	440a      	add	r2, r1
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	88f9      	ldrh	r1, [r7, #6]
 8003e6a:	887a      	ldrh	r2, [r7, #2]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4423      	add	r3, r4
 8003e78:	60fb      	str	r3, [r7, #12]
 8003e7a:	e013      	b.n	8003ea4 <BSP_LCD_FillRect+0xa4>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <BSP_LCD_FillRect+0xe8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <BSP_LCD_FillRect+0xf4>)
 8003e82:	2134      	movs	r1, #52	; 0x34
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	335c      	adds	r3, #92	; 0x5c
 8003e8c:	681c      	ldr	r4, [r3, #0]
 8003e8e:	f7ff fceb 	bl	8003868 <BSP_LCD_GetXSize>
 8003e92:	4602      	mov	r2, r0
 8003e94:	88bb      	ldrh	r3, [r7, #4]
 8003e96:	fb03 f202 	mul.w	r2, r3, r2
 8003e9a:	88fb      	ldrh	r3, [r7, #6]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4423      	add	r3, r4
 8003ea2:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003ea4:	4b10      	ldr	r3, [pc, #64]	; (8003ee8 <BSP_LCD_FillRect+0xe8>)
 8003ea6:	681c      	ldr	r4, [r3, #0]
 8003ea8:	68fd      	ldr	r5, [r7, #12]
 8003eaa:	887e      	ldrh	r6, [r7, #2]
 8003eac:	f8b7 8000 	ldrh.w	r8, [r7]
 8003eb0:	f7ff fcda 	bl	8003868 <BSP_LCD_GetXSize>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	1ad1      	subs	r1, r2, r3
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <BSP_LCD_FillRect+0xe8>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	480b      	ldr	r0, [pc, #44]	; (8003eec <BSP_LCD_FillRect+0xec>)
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4403      	add	r3, r0
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	9100      	str	r1, [sp, #0]
 8003ed0:	4643      	mov	r3, r8
 8003ed2:	4632      	mov	r2, r6
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f000 f9f4 	bl	80042c4 <FillBuffer>
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000a28 	.word	0x20000a28
 8003eec:	20000a2c 	.word	0x20000a2c
 8003ef0:	20000a48 	.word	0x20000a48
 8003ef4:	20000910 	.word	0x20000910

08003ef8 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <BSP_LCD_DisplayOn+0x1c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d003      	beq.n	8003f0e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003f06:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <BSP_LCD_DisplayOn+0x1c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	4798      	blx	r3
  }
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000a44 	.word	0x20000a44

08003f18 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08e      	sub	sp, #56	; 0x38
 8003f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	623b      	str	r3, [r7, #32]
 8003f22:	4b61      	ldr	r3, [pc, #388]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	4a60      	ldr	r2, [pc, #384]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f2e:	4b5e      	ldr	r3, [pc, #376]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f36:	623b      	str	r3, [r7, #32]
 8003f38:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	4b5a      	ldr	r3, [pc, #360]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f42:	4a59      	ldr	r2, [pc, #356]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f48:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4a:	4b57      	ldr	r3, [pc, #348]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	4a52      	ldr	r2, [pc, #328]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	6313      	str	r3, [r2, #48]	; 0x30
 8003f66:	4b50      	ldr	r3, [pc, #320]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	4b4c      	ldr	r3, [pc, #304]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a4b      	ldr	r2, [pc, #300]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	6313      	str	r3, [r2, #48]	; 0x30
 8003f82:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	613b      	str	r3, [r7, #16]
 8003f92:	4b45      	ldr	r3, [pc, #276]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a44      	ldr	r2, [pc, #272]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003f98:	f043 0304 	orr.w	r3, r3, #4
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	613b      	str	r3, [r7, #16]
 8003fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	4b3e      	ldr	r3, [pc, #248]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb2:	4a3d      	ldr	r2, [pc, #244]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003fb4:	f043 0308 	orr.w	r3, r3, #8
 8003fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fba:	4b3b      	ldr	r3, [pc, #236]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	60fb      	str	r3, [r7, #12]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]
 8003fca:	4b37      	ldr	r3, [pc, #220]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	4a36      	ldr	r2, [pc, #216]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003fd0:	f043 0320 	orr.w	r3, r3, #32
 8003fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd6:	4b34      	ldr	r3, [pc, #208]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f003 0320 	and.w	r3, r3, #32
 8003fde:	60bb      	str	r3, [r7, #8]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	607b      	str	r3, [r7, #4]
 8003fe6:	4b30      	ldr	r3, [pc, #192]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fea:	4a2f      	ldr	r2, [pc, #188]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff2:	4b2d      	ldr	r3, [pc, #180]	; (80040a8 <BSP_LCD_MspInit+0x190>)
 8003ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	607b      	str	r3, [r7, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003ffe:	f641 0358 	movw	r3, #6232	; 0x1858
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004004:	2302      	movs	r3, #2
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004008:	2300      	movs	r3, #0
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800400c:	2302      	movs	r3, #2
 800400e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004010:	230e      	movs	r3, #14
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004018:	4619      	mov	r1, r3
 800401a:	4824      	ldr	r0, [pc, #144]	; (80040ac <BSP_LCD_MspInit+0x194>)
 800401c:	f001 fa5c 	bl	80054d8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004020:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004024:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800402a:	4619      	mov	r1, r3
 800402c:	4820      	ldr	r0, [pc, #128]	; (80040b0 <BSP_LCD_MspInit+0x198>)
 800402e:	f001 fa53 	bl	80054d8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004032:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004038:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800403c:	4619      	mov	r1, r3
 800403e:	481d      	ldr	r0, [pc, #116]	; (80040b4 <BSP_LCD_MspInit+0x19c>)
 8004040:	f001 fa4a 	bl	80054d8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004044:	2348      	movs	r3, #72	; 0x48
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800404c:	4619      	mov	r1, r3
 800404e:	481a      	ldr	r0, [pc, #104]	; (80040b8 <BSP_LCD_MspInit+0x1a0>)
 8004050:	f001 fa42 	bl	80054d8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800405a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800405e:	4619      	mov	r1, r3
 8004060:	4816      	ldr	r0, [pc, #88]	; (80040bc <BSP_LCD_MspInit+0x1a4>)
 8004062:	f001 fa39 	bl	80054d8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8004066:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800406c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004070:	4619      	mov	r1, r3
 8004072:	4813      	ldr	r0, [pc, #76]	; (80040c0 <BSP_LCD_MspInit+0x1a8>)
 8004074:	f001 fa30 	bl	80054d8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8004078:	2303      	movs	r3, #3
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800407c:	2309      	movs	r3, #9
 800407e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004084:	4619      	mov	r1, r3
 8004086:	480a      	ldr	r0, [pc, #40]	; (80040b0 <BSP_LCD_MspInit+0x198>)
 8004088:	f001 fa26 	bl	80054d8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800408c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004096:	4619      	mov	r1, r3
 8004098:	4809      	ldr	r0, [pc, #36]	; (80040c0 <BSP_LCD_MspInit+0x1a8>)
 800409a:	f001 fa1d 	bl	80054d8 <HAL_GPIO_Init>
}
 800409e:	bf00      	nop
 80040a0:	3738      	adds	r7, #56	; 0x38
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40020000 	.word	0x40020000
 80040b0:	40020400 	.word	0x40020400
 80040b4:	40020800 	.word	0x40020800
 80040b8:	40020c00 	.word	0x40020c00
 80040bc:	40021400 	.word	0x40021400
 80040c0:	40021800 	.word	0x40021800

080040c4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80040c4:	b5b0      	push	{r4, r5, r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	4603      	mov	r3, r0
 80040cc:	603a      	str	r2, [r7, #0]
 80040ce:	80fb      	strh	r3, [r7, #6]
 80040d0:	460b      	mov	r3, r1
 80040d2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <BSP_LCD_DrawPixel+0x80>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d018      	beq.n	800410e <BSP_LCD_DrawPixel+0x4a>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (76800 - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80040dc:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <BSP_LCD_DrawPixel+0x84>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1a      	ldr	r2, [pc, #104]	; (800414c <BSP_LCD_DrawPixel+0x88>)
 80040e2:	2134      	movs	r1, #52	; 0x34
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	4413      	add	r3, r2
 80040ea:	335c      	adds	r3, #92	; 0x5c
 80040ec:	681c      	ldr	r4, [r3, #0]
 80040ee:	88fd      	ldrh	r5, [r7, #6]
 80040f0:	f7ff fbba 	bl	8003868 <BSP_LCD_GetXSize>
 80040f4:	4602      	mov	r2, r0
 80040f6:	88bb      	ldrh	r3, [r7, #4]
 80040f8:	fb02 f303 	mul.w	r3, r2, r3
 80040fc:	442b      	add	r3, r5
 80040fe:	f5c3 3396 	rsb	r3, r3, #76800	; 0x12c00
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4423      	add	r3, r4
 8004106:	461a      	mov	r2, r3
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800410c:	e015      	b.n	800413a <BSP_LCD_DrawPixel+0x76>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <BSP_LCD_DrawPixel+0x84>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a0e      	ldr	r2, [pc, #56]	; (800414c <BSP_LCD_DrawPixel+0x88>)
 8004114:	2134      	movs	r1, #52	; 0x34
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	335c      	adds	r3, #92	; 0x5c
 800411e:	681c      	ldr	r4, [r3, #0]
 8004120:	88bd      	ldrh	r5, [r7, #4]
 8004122:	f7ff fba1 	bl	8003868 <BSP_LCD_GetXSize>
 8004126:	4603      	mov	r3, r0
 8004128:	fb03 f205 	mul.w	r2, r3, r5
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4423      	add	r3, r4
 8004134:	461a      	mov	r2, r3
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6013      	str	r3, [r2, #0]
}
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bdb0      	pop	{r4, r5, r7, pc}
 8004142:	bf00      	nop
 8004144:	20000a48 	.word	0x20000a48
 8004148:	20000a28 	.word	0x20000a28
 800414c:	20000910 	.word	0x20000910

08004150 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	603a      	str	r2, [r7, #0]
 800415a:	80fb      	strh	r3, [r7, #6]
 800415c:	460b      	mov	r3, r1
 800415e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	61fb      	str	r3, [r7, #28]
 8004164:	2300      	movs	r3, #0
 8004166:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 800416c:	4b53      	ldr	r3, [pc, #332]	; (80042bc <DrawChar+0x16c>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4953      	ldr	r1, [pc, #332]	; (80042c0 <DrawChar+0x170>)
 8004172:	4613      	mov	r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	3308      	adds	r3, #8
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	88db      	ldrh	r3, [r3, #6]
 8004182:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004184:	4b4d      	ldr	r3, [pc, #308]	; (80042bc <DrawChar+0x16c>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	494d      	ldr	r1, [pc, #308]	; (80042c0 <DrawChar+0x170>)
 800418a:	4613      	mov	r3, r2
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	3308      	adds	r3, #8
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	889b      	ldrh	r3, [r3, #4]
 800419a:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 800419c:	8a3b      	ldrh	r3, [r7, #16]
 800419e:	3307      	adds	r3, #7
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	da00      	bge.n	80041a6 <DrawChar+0x56>
 80041a4:	3307      	adds	r3, #7
 80041a6:	10db      	asrs	r3, r3, #3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	8a3b      	ldrh	r3, [r7, #16]
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e076      	b.n	80042aa <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80041bc:	8a3b      	ldrh	r3, [r7, #16]
 80041be:	3307      	adds	r3, #7
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	da00      	bge.n	80041c6 <DrawChar+0x76>
 80041c4:	3307      	adds	r3, #7
 80041c6:	10db      	asrs	r3, r3, #3
 80041c8:	461a      	mov	r2, r3
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	4413      	add	r3, r2
 80041d4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80041d6:	8a3b      	ldrh	r3, [r7, #16]
 80041d8:	3307      	adds	r3, #7
 80041da:	2b00      	cmp	r3, #0
 80041dc:	da00      	bge.n	80041e0 <DrawChar+0x90>
 80041de:	3307      	adds	r3, #7
 80041e0:	10db      	asrs	r3, r3, #3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d002      	beq.n	80041ec <DrawChar+0x9c>
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d004      	beq.n	80041f4 <DrawChar+0xa4>
 80041ea:	e00c      	b.n	8004206 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	617b      	str	r3, [r7, #20]
      break;
 80041f2:	e016      	b.n	8004222 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	3201      	adds	r2, #1
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
      break;
 8004204:	e00d      	b.n	8004222 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	041a      	lsls	r2, r3, #16
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	3301      	adds	r3, #1
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	4313      	orrs	r3, r2
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	3202      	adds	r2, #2
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
      break;
 8004220:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004222:	2300      	movs	r3, #0
 8004224:	61bb      	str	r3, [r7, #24]
 8004226:	e036      	b.n	8004296 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004228:	8a3a      	ldrh	r2, [r7, #16]
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	1ad2      	subs	r2, r2, r3
 800422e:	7bfb      	ldrb	r3, [r7, #15]
 8004230:	4413      	add	r3, r2
 8004232:	3b01      	subs	r3, #1
 8004234:	2201      	movs	r2, #1
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	461a      	mov	r2, r3
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	4013      	ands	r3, r2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d012      	beq.n	800426a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	b29a      	uxth	r2, r3
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	4413      	add	r3, r2
 800424c:	b298      	uxth	r0, r3
 800424e:	4b1b      	ldr	r3, [pc, #108]	; (80042bc <DrawChar+0x16c>)
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	491b      	ldr	r1, [pc, #108]	; (80042c0 <DrawChar+0x170>)
 8004254:	4613      	mov	r3, r2
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	88bb      	ldrh	r3, [r7, #4]
 8004262:	4619      	mov	r1, r3
 8004264:	f7ff ff2e 	bl	80040c4 <BSP_LCD_DrawPixel>
 8004268:	e012      	b.n	8004290 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	b29a      	uxth	r2, r3
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	4413      	add	r3, r2
 8004272:	b298      	uxth	r0, r3
 8004274:	4b11      	ldr	r3, [pc, #68]	; (80042bc <DrawChar+0x16c>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4911      	ldr	r1, [pc, #68]	; (80042c0 <DrawChar+0x170>)
 800427a:	4613      	mov	r3, r2
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	440b      	add	r3, r1
 8004284:	3304      	adds	r3, #4
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	88bb      	ldrh	r3, [r7, #4]
 800428a:	4619      	mov	r1, r3
 800428c:	f7ff ff1a 	bl	80040c4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	3301      	adds	r3, #1
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	8a3b      	ldrh	r3, [r7, #16]
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	429a      	cmp	r2, r3
 800429c:	d3c4      	bcc.n	8004228 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 800429e:	88bb      	ldrh	r3, [r7, #4]
 80042a0:	3301      	adds	r3, #1
 80042a2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	3301      	adds	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	8a7b      	ldrh	r3, [r7, #18]
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d384      	bcc.n	80041bc <DrawChar+0x6c>
  }
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000a28 	.word	0x20000a28
 80042c0:	20000a2c 	.word	0x20000a2c

080042c4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80042d2:	4b16      	ldr	r3, [pc, #88]	; (800432c <FillBuffer+0x68>)
 80042d4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80042d8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80042da:	4b14      	ldr	r3, [pc, #80]	; (800432c <FillBuffer+0x68>)
 80042dc:	2200      	movs	r2, #0
 80042de:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80042e0:	4a12      	ldr	r2, [pc, #72]	; (800432c <FillBuffer+0x68>)
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80042e6:	4b11      	ldr	r3, [pc, #68]	; (800432c <FillBuffer+0x68>)
 80042e8:	4a11      	ldr	r2, [pc, #68]	; (8004330 <FillBuffer+0x6c>)
 80042ea:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80042ec:	480f      	ldr	r0, [pc, #60]	; (800432c <FillBuffer+0x68>)
 80042ee:	f000 fe5d 	bl	8004fac <HAL_DMA2D_Init>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d115      	bne.n	8004324 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	480c      	ldr	r0, [pc, #48]	; (800432c <FillBuffer+0x68>)
 80042fc:	f000 ffbe 	bl	800527c <HAL_DMA2D_ConfigLayer>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10e      	bne.n	8004324 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69f9      	ldr	r1, [r7, #28]
 8004310:	4806      	ldr	r0, [pc, #24]	; (800432c <FillBuffer+0x68>)
 8004312:	f000 fe9e 	bl	8005052 <HAL_DMA2D_Start>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d103      	bne.n	8004324 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800431c:	210a      	movs	r1, #10
 800431e:	4803      	ldr	r0, [pc, #12]	; (800432c <FillBuffer+0x68>)
 8004320:	f000 fec2 	bl	80050a8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	200009b8 	.word	0x200009b8
 8004330:	4002b000 	.word	0x4002b000

08004334 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004338:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 800433a:	4a2a      	ldr	r2, [pc, #168]	; (80043e4 <BSP_SDRAM_Init+0xb0>)
 800433c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800433e:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <BSP_SDRAM_Init+0xb4>)
 8004340:	2202      	movs	r2, #2
 8004342:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <BSP_SDRAM_Init+0xb4>)
 8004346:	2207      	movs	r2, #7
 8004348:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800434a:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <BSP_SDRAM_Init+0xb4>)
 800434c:	2204      	movs	r2, #4
 800434e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <BSP_SDRAM_Init+0xb4>)
 8004352:	2207      	movs	r2, #7
 8004354:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8004356:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <BSP_SDRAM_Init+0xb4>)
 8004358:	2202      	movs	r2, #2
 800435a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <BSP_SDRAM_Init+0xb4>)
 800435e:	2202      	movs	r2, #2
 8004360:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004362:	4b21      	ldr	r3, [pc, #132]	; (80043e8 <BSP_SDRAM_Init+0xb4>)
 8004364:	2202      	movs	r2, #2
 8004366:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 800436a:	2201      	movs	r2, #1
 800436c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800436e:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 8004370:	2200      	movs	r2, #0
 8004372:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 8004376:	2204      	movs	r2, #4
 8004378:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800437a:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 800437c:	2210      	movs	r2, #16
 800437e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 8004382:	2240      	movs	r2, #64	; 0x40
 8004384:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 8004388:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800438c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800438e:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 8004390:	2200      	movs	r2, #0
 8004392:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004394:	4b12      	ldr	r3, [pc, #72]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 8004396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800439a:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 800439e:	2200      	movs	r2, #0
 80043a0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80043a2:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 80043a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043a8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80043aa:	2100      	movs	r1, #0
 80043ac:	480c      	ldr	r0, [pc, #48]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 80043ae:	f000 f87f 	bl	80044b0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80043b2:	490d      	ldr	r1, [pc, #52]	; (80043e8 <BSP_SDRAM_Init+0xb4>)
 80043b4:	480a      	ldr	r0, [pc, #40]	; (80043e0 <BSP_SDRAM_Init+0xac>)
 80043b6:	f003 fb91 	bl	8007adc <HAL_SDRAM_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	; (80043ec <BSP_SDRAM_Init+0xb8>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e002      	b.n	80043ce <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80043c8:	4b08      	ldr	r3, [pc, #32]	; (80043ec <BSP_SDRAM_Init+0xb8>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80043ce:	f240 506a 	movw	r0, #1386	; 0x56a
 80043d2:	f000 f80d 	bl	80043f0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <BSP_SDRAM_Init+0xb8>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	20000a4c 	.word	0x20000a4c
 80043e4:	a0000140 	.word	0xa0000140
 80043e8:	20000a80 	.word	0x20000a80
 80043ec:	200000c0 	.word	0x200000c0

080043f0 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80043fc:	4b2a      	ldr	r3, [pc, #168]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80043fe:	2201      	movs	r2, #1
 8004400:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004402:	4b29      	ldr	r3, [pc, #164]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004404:	2208      	movs	r2, #8
 8004406:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004408:	4b27      	ldr	r3, [pc, #156]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800440a:	2201      	movs	r2, #1
 800440c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800440e:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004410:	2200      	movs	r2, #0
 8004412:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004418:	4923      	ldr	r1, [pc, #140]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800441a:	4824      	ldr	r0, [pc, #144]	; (80044ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800441c:	f003 fb9c 	bl	8007b58 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004420:	2001      	movs	r0, #1
 8004422:	f000 facf 	bl	80049c4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8004426:	4b20      	ldr	r3, [pc, #128]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004428:	2202      	movs	r2, #2
 800442a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800442c:	4b1e      	ldr	r3, [pc, #120]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800442e:	2208      	movs	r2, #8
 8004430:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004432:	4b1d      	ldr	r3, [pc, #116]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004434:	2201      	movs	r2, #1
 8004436:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004438:	4b1b      	ldr	r3, [pc, #108]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800443a:	2200      	movs	r2, #0
 800443c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800443e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004442:	4919      	ldr	r1, [pc, #100]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004444:	4819      	ldr	r0, [pc, #100]	; (80044ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004446:	f003 fb87 	bl	8007b58 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800444a:	4b17      	ldr	r3, [pc, #92]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800444c:	2203      	movs	r2, #3
 800444e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004450:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004452:	2208      	movs	r2, #8
 8004454:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8004456:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004458:	2204      	movs	r2, #4
 800445a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800445c:	4b12      	ldr	r3, [pc, #72]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800445e:	2200      	movs	r2, #0
 8004460:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004462:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004466:	4910      	ldr	r1, [pc, #64]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004468:	4810      	ldr	r0, [pc, #64]	; (80044ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800446a:	f003 fb75 	bl	8007b58 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800446e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004472:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004474:	4b0c      	ldr	r3, [pc, #48]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004476:	2204      	movs	r2, #4
 8004478:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800447c:	2208      	movs	r2, #8
 800447e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004482:	2201      	movs	r2, #1
 8004484:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4a07      	ldr	r2, [pc, #28]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800448a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800448c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004490:	4905      	ldr	r1, [pc, #20]	; (80044a8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004492:	4806      	ldr	r0, [pc, #24]	; (80044ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004494:	f003 fb60 	bl	8007b58 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4804      	ldr	r0, [pc, #16]	; (80044ac <BSP_SDRAM_Initialization_sequence+0xbc>)
 800449c:	f003 fb87 	bl	8007bae <HAL_SDRAM_ProgramRefreshRate>
}
 80044a0:	bf00      	nop
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	20000a9c 	.word	0x20000a9c
 80044ac:	20000a4c 	.word	0x20000a4c

080044b0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b090      	sub	sp, #64	; 0x40
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f000 80ec 	beq.w	800469a <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044c6:	4b77      	ldr	r3, [pc, #476]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	4a76      	ldr	r2, [pc, #472]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6393      	str	r3, [r2, #56]	; 0x38
 80044d2:	4b74      	ldr	r3, [pc, #464]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
 80044e2:	4b70      	ldr	r3, [pc, #448]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a6f      	ldr	r2, [pc, #444]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 80044e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044ec:	6313      	str	r3, [r2, #48]	; 0x30
 80044ee:	4b6d      	ldr	r3, [pc, #436]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	623b      	str	r3, [r7, #32]
 80044fe:	4b69      	ldr	r3, [pc, #420]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	4a68      	ldr	r2, [pc, #416]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004504:	f043 0302 	orr.w	r3, r3, #2
 8004508:	6313      	str	r3, [r2, #48]	; 0x30
 800450a:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
 800451a:	4b62      	ldr	r3, [pc, #392]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	4a61      	ldr	r2, [pc, #388]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	6313      	str	r3, [r2, #48]	; 0x30
 8004526:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	4b5b      	ldr	r3, [pc, #364]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	4a5a      	ldr	r2, [pc, #360]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 800453c:	f043 0308 	orr.w	r3, r3, #8
 8004540:	6313      	str	r3, [r2, #48]	; 0x30
 8004542:	4b58      	ldr	r3, [pc, #352]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	4b54      	ldr	r3, [pc, #336]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004556:	4a53      	ldr	r2, [pc, #332]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004558:	f043 0310 	orr.w	r3, r3, #16
 800455c:	6313      	str	r3, [r2, #48]	; 0x30
 800455e:	4b51      	ldr	r3, [pc, #324]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004562:	f003 0310 	and.w	r3, r3, #16
 8004566:	617b      	str	r3, [r7, #20]
 8004568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	4b4d      	ldr	r3, [pc, #308]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	4a4c      	ldr	r2, [pc, #304]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004574:	f043 0320 	orr.w	r3, r3, #32
 8004578:	6313      	str	r3, [r2, #48]	; 0x30
 800457a:	4b4a      	ldr	r3, [pc, #296]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	f003 0320 	and.w	r3, r3, #32
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	4b46      	ldr	r3, [pc, #280]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	4a45      	ldr	r2, [pc, #276]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004594:	6313      	str	r3, [r2, #48]	; 0x30
 8004596:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <BSP_SDRAM_MspInit+0x1f4>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80045a2:	2302      	movs	r3, #2
 80045a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80045a6:	2302      	movs	r3, #2
 80045a8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80045ae:	230c      	movs	r3, #12
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80045b2:	2360      	movs	r3, #96	; 0x60
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80045b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ba:	4619      	mov	r1, r3
 80045bc:	483a      	ldr	r0, [pc, #232]	; (80046a8 <BSP_SDRAM_MspInit+0x1f8>)
 80045be:	f000 ff8b 	bl	80054d8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80045c2:	2301      	movs	r3, #1
 80045c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80045c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ca:	4619      	mov	r1, r3
 80045cc:	4837      	ldr	r0, [pc, #220]	; (80046ac <BSP_SDRAM_MspInit+0x1fc>)
 80045ce:	f000 ff83 	bl	80054d8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80045d2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80045d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045dc:	4619      	mov	r1, r3
 80045de:	4834      	ldr	r0, [pc, #208]	; (80046b0 <BSP_SDRAM_MspInit+0x200>)
 80045e0:	f000 ff7a 	bl	80054d8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80045e4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80045ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045ee:	4619      	mov	r1, r3
 80045f0:	4830      	ldr	r0, [pc, #192]	; (80046b4 <BSP_SDRAM_MspInit+0x204>)
 80045f2:	f000 ff71 	bl	80054d8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80045f6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80045fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004600:	4619      	mov	r1, r3
 8004602:	482d      	ldr	r0, [pc, #180]	; (80046b8 <BSP_SDRAM_MspInit+0x208>)
 8004604:	f000 ff68 	bl	80054d8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8004608:	f248 1333 	movw	r3, #33075	; 0x8133
 800460c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800460e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004612:	4619      	mov	r1, r3
 8004614:	4829      	ldr	r0, [pc, #164]	; (80046bc <BSP_SDRAM_MspInit+0x20c>)
 8004616:	f000 ff5f 	bl	80054d8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800461a:	4b29      	ldr	r3, [pc, #164]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 800461c:	2200      	movs	r2, #0
 800461e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004620:	4b27      	ldr	r3, [pc, #156]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004626:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004628:	f44f 7200 	mov.w	r2, #512	; 0x200
 800462c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004634:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004636:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800463c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800463e:	4b20      	ldr	r3, [pc, #128]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004640:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004644:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004646:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004648:	2200      	movs	r2, #0
 800464a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800464c:	4b1c      	ldr	r3, [pc, #112]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 800464e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004652:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004654:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004656:	2200      	movs	r2, #0
 8004658:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800465a:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 800465c:	2203      	movs	r2, #3
 800465e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004660:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004662:	2200      	movs	r2, #0
 8004664:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004666:	4b16      	ldr	r3, [pc, #88]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 800466e:	4a15      	ldr	r2, [pc, #84]	; (80046c4 <BSP_SDRAM_MspInit+0x214>)
 8004670:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a12      	ldr	r2, [pc, #72]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
 8004678:	4a11      	ldr	r2, [pc, #68]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800467e:	4810      	ldr	r0, [pc, #64]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004680:	f000 fb84 	bl	8004d8c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004684:	480e      	ldr	r0, [pc, #56]	; (80046c0 <BSP_SDRAM_MspInit+0x210>)
 8004686:	f000 fad3 	bl	8004c30 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800468a:	2200      	movs	r2, #0
 800468c:	210f      	movs	r1, #15
 800468e:	2038      	movs	r0, #56	; 0x38
 8004690:	f000 fa97 	bl	8004bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004694:	2038      	movs	r0, #56	; 0x38
 8004696:	f000 fab0 	bl	8004bfa <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800469a:	bf00      	nop
 800469c:	3740      	adds	r7, #64	; 0x40
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800
 80046a8:	40020400 	.word	0x40020400
 80046ac:	40020800 	.word	0x40020800
 80046b0:	40020c00 	.word	0x40020c00
 80046b4:	40021000 	.word	0x40021000
 80046b8:	40021400 	.word	0x40021400
 80046bc:	40021800 	.word	0x40021800
 80046c0:	20000aac 	.word	0x20000aac
 80046c4:	40026410 	.word	0x40026410

080046c8 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	460a      	mov	r2, r1
 80046d2:	80fb      	strh	r3, [r7, #6]
 80046d4:	4613      	mov	r3, r2
 80046d6:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80046dc:	4a13      	ldr	r2, [pc, #76]	; (800472c <BSP_TS_Init+0x64>)
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80046e2:	4a13      	ldr	r2, [pc, #76]	; (8004730 <BSP_TS_Init+0x68>)
 80046e4:	88bb      	ldrh	r3, [r7, #4]
 80046e6:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80046e8:	4b12      	ldr	r3, [pc, #72]	; (8004734 <BSP_TS_Init+0x6c>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2082      	movs	r0, #130	; 0x82
 80046ee:	4798      	blx	r3
 80046f0:	4603      	mov	r3, r0
 80046f2:	461a      	mov	r2, r3
 80046f4:	f640 0311 	movw	r3, #2065	; 0x811
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d104      	bne.n	8004706 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <BSP_TS_Init+0x70>)
 80046fe:	4a0d      	ldr	r2, [pc, #52]	; (8004734 <BSP_TS_Init+0x6c>)
 8004700:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8004706:	7bfb      	ldrb	r3, [r7, #15]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <BSP_TS_Init+0x70>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2082      	movs	r0, #130	; 0x82
 8004714:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <BSP_TS_Init+0x70>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	2082      	movs	r0, #130	; 0x82
 800471e:	4798      	blx	r3
  }

  return ret;
 8004720:	7bfb      	ldrb	r3, [r7, #15]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000b10 	.word	0x20000b10
 8004730:	20000b12 	.word	0x20000b12
 8004734:	20000070 	.word	0x20000070
 8004738:	20000b0c 	.word	0x20000b0c

0800473c <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004740:	4b03      	ldr	r3, [pc, #12]	; (8004750 <BSP_TS_ITGetStatus+0x14>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	2082      	movs	r0, #130	; 0x82
 8004748:	4798      	blx	r3
 800474a:	4603      	mov	r3, r0
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	20000b0c 	.word	0x20000b0c

08004754 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800475c:	4b4f      	ldr	r3, [pc, #316]	; (800489c <BSP_TS_GetState+0x148>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2082      	movs	r0, #130	; 0x82
 8004764:	4798      	blx	r3
 8004766:	4603      	mov	r3, r0
 8004768:	b29a      	uxth	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	f000 808d 	beq.w	8004892 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004778:	4b48      	ldr	r3, [pc, #288]	; (800489c <BSP_TS_GetState+0x148>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f107 020c 	add.w	r2, r7, #12
 8004782:	f107 010e 	add.w	r1, r7, #14
 8004786:	2082      	movs	r0, #130	; 0x82
 8004788:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800478a:	89bb      	ldrh	r3, [r7, #12]
 800478c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004790:	b29b      	uxth	r3, r3
 8004792:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8004794:	89bb      	ldrh	r3, [r7, #12]
 8004796:	4a42      	ldr	r2, [pc, #264]	; (80048a0 <BSP_TS_GetState+0x14c>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	08db      	lsrs	r3, r3, #3
 800479e:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80047a0:	8abb      	ldrh	r3, [r7, #20]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	82bb      	strh	r3, [r7, #20]
 80047aa:	e008      	b.n	80047be <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80047ac:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <BSP_TS_GetState+0x150>)
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	8aba      	ldrh	r2, [r7, #20]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d903      	bls.n	80047be <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80047b6:	4b3b      	ldr	r3, [pc, #236]	; (80048a4 <BSP_TS_GetState+0x150>)
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80047be:	8abb      	ldrh	r3, [r7, #20]
 80047c0:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80047c2:	89fb      	ldrh	r3, [r7, #14]
 80047c4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d806      	bhi.n	80047da <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80047cc:	89fb      	ldrh	r3, [r7, #14]
 80047ce:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80047d2:	330e      	adds	r3, #14
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	81fb      	strh	r3, [r7, #14]
 80047d8:	e005      	b.n	80047e6 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80047da:	89fb      	ldrh	r3, [r7, #14]
 80047dc:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80047e0:	3308      	adds	r3, #8
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80047e6:	89fb      	ldrh	r3, [r7, #14]
 80047e8:	4a2f      	ldr	r2, [pc, #188]	; (80048a8 <BSP_TS_GetState+0x154>)
 80047ea:	fba2 2303 	umull	r2, r3, r2, r3
 80047ee:	08db      	lsrs	r3, r3, #3
 80047f0:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80047f2:	8afb      	ldrh	r3, [r7, #22]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d102      	bne.n	80047fe <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80047f8:	2300      	movs	r3, #0
 80047fa:	82fb      	strh	r3, [r7, #22]
 80047fc:	e008      	b.n	8004810 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80047fe:	4b2b      	ldr	r3, [pc, #172]	; (80048ac <BSP_TS_GetState+0x158>)
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	8afa      	ldrh	r2, [r7, #22]
 8004804:	429a      	cmp	r2, r3
 8004806:	d903      	bls.n	8004810 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004808:	4b28      	ldr	r3, [pc, #160]	; (80048ac <BSP_TS_GetState+0x158>)
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	3b01      	subs	r3, #1
 800480e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004810:	8afb      	ldrh	r3, [r7, #22]
 8004812:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004814:	89fb      	ldrh	r3, [r7, #14]
 8004816:	461a      	mov	r2, r3
 8004818:	4b25      	ldr	r3, [pc, #148]	; (80048b0 <BSP_TS_GetState+0x15c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d906      	bls.n	800482e <BSP_TS_GetState+0xda>
 8004820:	89fa      	ldrh	r2, [r7, #14]
 8004822:	4b23      	ldr	r3, [pc, #140]	; (80048b0 <BSP_TS_GetState+0x15c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	b29b      	uxth	r3, r3
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	b29b      	uxth	r3, r3
 800482c:	e005      	b.n	800483a <BSP_TS_GetState+0xe6>
 800482e:	4b20      	ldr	r3, [pc, #128]	; (80048b0 <BSP_TS_GetState+0x15c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	b29a      	uxth	r2, r3
 8004834:	89fb      	ldrh	r3, [r7, #14]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	b29b      	uxth	r3, r3
 800483a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800483c:	89bb      	ldrh	r3, [r7, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <BSP_TS_GetState+0x160>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d906      	bls.n	8004856 <BSP_TS_GetState+0x102>
 8004848:	89ba      	ldrh	r2, [r7, #12]
 800484a:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <BSP_TS_GetState+0x160>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	b29b      	uxth	r3, r3
 8004854:	e005      	b.n	8004862 <BSP_TS_GetState+0x10e>
 8004856:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <BSP_TS_GetState+0x160>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	b29a      	uxth	r2, r3
 800485c:	89bb      	ldrh	r3, [r7, #12]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	b29b      	uxth	r3, r3
 8004862:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004864:	8a7a      	ldrh	r2, [r7, #18]
 8004866:	8a3b      	ldrh	r3, [r7, #16]
 8004868:	4413      	add	r3, r2
 800486a:	2b05      	cmp	r3, #5
 800486c:	dd07      	ble.n	800487e <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800486e:	89fb      	ldrh	r3, [r7, #14]
 8004870:	461a      	mov	r2, r3
 8004872:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <BSP_TS_GetState+0x15c>)
 8004874:	601a      	str	r2, [r3, #0]
      _y = y; 
 8004876:	89bb      	ldrh	r3, [r7, #12]
 8004878:	461a      	mov	r2, r3
 800487a:	4b0e      	ldr	r3, [pc, #56]	; (80048b4 <BSP_TS_GetState+0x160>)
 800487c:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 800487e:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <BSP_TS_GetState+0x15c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <BSP_TS_GetState+0x160>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	809a      	strh	r2, [r3, #4]
  }
}
 8004892:	bf00      	nop
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	20000b0c 	.word	0x20000b0c
 80048a0:	ba2e8ba3 	.word	0xba2e8ba3
 80048a4:	20000b12 	.word	0x20000b12
 80048a8:	88888889 	.word	0x88888889
 80048ac:	20000b10 	.word	0x20000b10
 80048b0:	20000b14 	.word	0x20000b14
 80048b4:	20000b18 	.word	0x20000b18

080048b8 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80048bc:	4b03      	ldr	r3, [pc, #12]	; (80048cc <BSP_TS_ITClear+0x14>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	2082      	movs	r0, #130	; 0x82
 80048c4:	4798      	blx	r3
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000b0c 	.word	0x20000b0c

080048d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80048d4:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <HAL_Init+0x40>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a0d      	ldr	r2, [pc, #52]	; (8004910 <HAL_Init+0x40>)
 80048da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80048e0:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_Init+0x40>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a0a      	ldr	r2, [pc, #40]	; (8004910 <HAL_Init+0x40>)
 80048e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048ec:	4b08      	ldr	r3, [pc, #32]	; (8004910 <HAL_Init+0x40>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a07      	ldr	r2, [pc, #28]	; (8004910 <HAL_Init+0x40>)
 80048f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048f8:	2003      	movs	r0, #3
 80048fa:	f000 f957 	bl	8004bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048fe:	200f      	movs	r0, #15
 8004900:	f000 f810 	bl	8004924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004904:	f000 f806 	bl	8004914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40023c00 	.word	0x40023c00

08004914 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
	...

08004924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800492c:	4b12      	ldr	r3, [pc, #72]	; (8004978 <HAL_InitTick+0x54>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <HAL_InitTick+0x58>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	4619      	mov	r1, r3
 8004936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800493a:	fbb3 f3f1 	udiv	r3, r3, r1
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f967 	bl	8004c16 <HAL_SYSTICK_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e00e      	b.n	8004970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b0f      	cmp	r3, #15
 8004956:	d80a      	bhi.n	800496e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004958:	2200      	movs	r2, #0
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	f000 f92f 	bl	8004bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004964:	4a06      	ldr	r2, [pc, #24]	; (8004980 <HAL_InitTick+0x5c>)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	e000      	b.n	8004970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000034 	.word	0x20000034
 800497c:	200000c8 	.word	0x200000c8
 8004980:	200000c4 	.word	0x200000c4

08004984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004988:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_IncTick+0x20>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <HAL_IncTick+0x24>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4413      	add	r3, r2
 8004994:	4a04      	ldr	r2, [pc, #16]	; (80049a8 <HAL_IncTick+0x24>)
 8004996:	6013      	str	r3, [r2, #0]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	200000c8 	.word	0x200000c8
 80049a8:	20000b1c 	.word	0x20000b1c

080049ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
  return uwTick;
 80049b0:	4b03      	ldr	r3, [pc, #12]	; (80049c0 <HAL_GetTick+0x14>)
 80049b2:	681b      	ldr	r3, [r3, #0]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000b1c 	.word	0x20000b1c

080049c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049cc:	f7ff ffee 	bl	80049ac <HAL_GetTick>
 80049d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d005      	beq.n	80049ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049de:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_Delay+0x44>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4413      	add	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049ea:	bf00      	nop
 80049ec:	f7ff ffde 	bl	80049ac <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d8f7      	bhi.n	80049ec <HAL_Delay+0x28>
  {
  }
}
 80049fc:	bf00      	nop
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	200000c8 	.word	0x200000c8

08004a0c <__NVIC_SetPriorityGrouping>:
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <__NVIC_SetPriorityGrouping+0x44>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a22:	68ba      	ldr	r2, [r7, #8]
 8004a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a28:	4013      	ands	r3, r2
 8004a2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a3e:	4a04      	ldr	r2, [pc, #16]	; (8004a50 <__NVIC_SetPriorityGrouping+0x44>)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	60d3      	str	r3, [r2, #12]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <__NVIC_GetPriorityGrouping>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <__NVIC_GetPriorityGrouping+0x18>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	0a1b      	lsrs	r3, r3, #8
 8004a5e:	f003 0307 	and.w	r3, r3, #7
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	e000ed00 	.word	0xe000ed00

08004a70 <__NVIC_EnableIRQ>:
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	4603      	mov	r3, r0
 8004a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	db0b      	blt.n	8004a9a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	f003 021f 	and.w	r2, r3, #31
 8004a88:	4907      	ldr	r1, [pc, #28]	; (8004aa8 <__NVIC_EnableIRQ+0x38>)
 8004a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8e:	095b      	lsrs	r3, r3, #5
 8004a90:	2001      	movs	r0, #1
 8004a92:	fa00 f202 	lsl.w	r2, r0, r2
 8004a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	e000e100 	.word	0xe000e100

08004aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	6039      	str	r1, [r7, #0]
 8004ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	db0a      	blt.n	8004ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	490c      	ldr	r1, [pc, #48]	; (8004af8 <__NVIC_SetPriority+0x4c>)
 8004ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aca:	0112      	lsls	r2, r2, #4
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ad4:	e00a      	b.n	8004aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	4908      	ldr	r1, [pc, #32]	; (8004afc <__NVIC_SetPriority+0x50>)
 8004adc:	79fb      	ldrb	r3, [r7, #7]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	3b04      	subs	r3, #4
 8004ae4:	0112      	lsls	r2, r2, #4
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	440b      	add	r3, r1
 8004aea:	761a      	strb	r2, [r3, #24]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000e100 	.word	0xe000e100
 8004afc:	e000ed00 	.word	0xe000ed00

08004b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b089      	sub	sp, #36	; 0x24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f1c3 0307 	rsb	r3, r3, #7
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	bf28      	it	cs
 8004b1e:	2304      	movcs	r3, #4
 8004b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	3304      	adds	r3, #4
 8004b26:	2b06      	cmp	r3, #6
 8004b28:	d902      	bls.n	8004b30 <NVIC_EncodePriority+0x30>
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	3b03      	subs	r3, #3
 8004b2e:	e000      	b.n	8004b32 <NVIC_EncodePriority+0x32>
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b34:	f04f 32ff 	mov.w	r2, #4294967295
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3e:	43da      	mvns	r2, r3
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	401a      	ands	r2, r3
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b48:	f04f 31ff 	mov.w	r1, #4294967295
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	43d9      	mvns	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b58:	4313      	orrs	r3, r2
         );
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3724      	adds	r7, #36	; 0x24
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
	...

08004b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b78:	d301      	bcc.n	8004b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e00f      	b.n	8004b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <SysTick_Config+0x40>)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b86:	210f      	movs	r1, #15
 8004b88:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8c:	f7ff ff8e 	bl	8004aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <SysTick_Config+0x40>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <SysTick_Config+0x40>)
 8004b98:	2207      	movs	r2, #7
 8004b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	e000e010 	.word	0xe000e010

08004bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7ff ff29 	bl	8004a0c <__NVIC_SetPriorityGrouping>
}
 8004bba:	bf00      	nop
 8004bbc:	3708      	adds	r7, #8
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	4603      	mov	r3, r0
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bd4:	f7ff ff3e 	bl	8004a54 <__NVIC_GetPriorityGrouping>
 8004bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	6978      	ldr	r0, [r7, #20]
 8004be0:	f7ff ff8e 	bl	8004b00 <NVIC_EncodePriority>
 8004be4:	4602      	mov	r2, r0
 8004be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff5d 	bl	8004aac <__NVIC_SetPriority>
}
 8004bf2:	bf00      	nop
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	4603      	mov	r3, r0
 8004c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff ff31 	bl	8004a70 <__NVIC_EnableIRQ>
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ffa2 	bl	8004b68 <SysTick_Config>
 8004c24:	4603      	mov	r3, r0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c3c:	f7ff feb6 	bl	80049ac <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e099      	b.n	8004d80 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0201 	bic.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c6c:	e00f      	b.n	8004c8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c6e:	f7ff fe9d 	bl	80049ac <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b05      	cmp	r3, #5
 8004c7a:	d908      	bls.n	8004c8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2203      	movs	r2, #3
 8004c86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e078      	b.n	8004d80 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e8      	bne.n	8004c6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	4b38      	ldr	r3, [pc, #224]	; (8004d88 <HAL_DMA_Init+0x158>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d107      	bne.n	8004cf8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d117      	bne.n	8004d52 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f8bd 	bl	8004eb4 <DMA_CheckFifoParam>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2240      	movs	r2, #64	; 0x40
 8004d44:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e016      	b.n	8004d80 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f874 	bl	8004e48 <DMA_CalcBaseAndBitshift>
 8004d60:	4603      	mov	r3, r0
 8004d62:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	223f      	movs	r2, #63	; 0x3f
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	f010803f 	.word	0xf010803f

08004d8c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e050      	b.n	8004e40 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d101      	bne.n	8004dae <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004daa:	2302      	movs	r3, #2
 8004dac:	e048      	b.n	8004e40 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2200      	movs	r2, #0
 8004de4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2221      	movs	r2, #33	; 0x21
 8004dec:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f82a 	bl	8004e48 <DMA_CalcBaseAndBitshift>
 8004df4:	4603      	mov	r3, r0
 8004df6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e20:	223f      	movs	r2, #63	; 0x3f
 8004e22:	409a      	lsls	r2, r3
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	3b10      	subs	r3, #16
 8004e58:	4a14      	ldr	r2, [pc, #80]	; (8004eac <DMA_CalcBaseAndBitshift+0x64>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	091b      	lsrs	r3, r3, #4
 8004e60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e62:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <DMA_CalcBaseAndBitshift+0x68>)
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d909      	bls.n	8004e8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e7e:	f023 0303 	bic.w	r3, r3, #3
 8004e82:	1d1a      	adds	r2, r3, #4
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	659a      	str	r2, [r3, #88]	; 0x58
 8004e88:	e007      	b.n	8004e9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e92:	f023 0303 	bic.w	r3, r3, #3
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	aaaaaaab 	.word	0xaaaaaaab
 8004eb0:	08010b10 	.word	0x08010b10

08004eb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d11f      	bne.n	8004f0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d856      	bhi.n	8004f82 <DMA_CheckFifoParam+0xce>
 8004ed4:	a201      	add	r2, pc, #4	; (adr r2, 8004edc <DMA_CheckFifoParam+0x28>)
 8004ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eda:	bf00      	nop
 8004edc:	08004eed 	.word	0x08004eed
 8004ee0:	08004eff 	.word	0x08004eff
 8004ee4:	08004eed 	.word	0x08004eed
 8004ee8:	08004f83 	.word	0x08004f83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d046      	beq.n	8004f86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004efc:	e043      	b.n	8004f86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f06:	d140      	bne.n	8004f8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0c:	e03d      	b.n	8004f8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f16:	d121      	bne.n	8004f5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	2b03      	cmp	r3, #3
 8004f1c:	d837      	bhi.n	8004f8e <DMA_CheckFifoParam+0xda>
 8004f1e:	a201      	add	r2, pc, #4	; (adr r2, 8004f24 <DMA_CheckFifoParam+0x70>)
 8004f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f24:	08004f35 	.word	0x08004f35
 8004f28:	08004f3b 	.word	0x08004f3b
 8004f2c:	08004f35 	.word	0x08004f35
 8004f30:	08004f4d 	.word	0x08004f4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	73fb      	strb	r3, [r7, #15]
      break;
 8004f38:	e030      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d025      	beq.n	8004f92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f4a:	e022      	b.n	8004f92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f54:	d11f      	bne.n	8004f96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f5a:	e01c      	b.n	8004f96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d903      	bls.n	8004f6a <DMA_CheckFifoParam+0xb6>
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d003      	beq.n	8004f70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f68:	e018      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6e:	e015      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00e      	beq.n	8004f9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f80:	e00b      	b.n	8004f9a <DMA_CheckFifoParam+0xe6>
      break;
 8004f82:	bf00      	nop
 8004f84:	e00a      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f86:	bf00      	nop
 8004f88:	e008      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e006      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f8e:	bf00      	nop
 8004f90:	e004      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f92:	bf00      	nop
 8004f94:	e002      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;   
 8004f96:	bf00      	nop
 8004f98:	e000      	b.n	8004f9c <DMA_CheckFifoParam+0xe8>
      break;
 8004f9a:	bf00      	nop
    }
  } 
  
  return status; 
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop

08004fac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e03b      	b.n	8005036 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d106      	bne.n	8004fd8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f833 	bl	800503e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffc:	f023 0107 	bic.w	r1, r3, #7
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005016:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68d1      	ldr	r1, [r2, #12]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	430b      	orrs	r3, r1
 8005024:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b086      	sub	sp, #24
 8005056:	af02      	add	r7, sp, #8
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_DMA2D_Start+0x1c>
 800506a:	2302      	movs	r3, #2
 800506c:	e018      	b.n	80050a0 <HAL_DMA2D_Start+0x4e>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	68b9      	ldr	r1, [r7, #8]
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f989 	bl	80053a0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80050b2:	2300      	movs	r3, #0
 80050b4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d056      	beq.n	8005172 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80050c4:	f7ff fc72 	bl	80049ac <HAL_GetTick>
 80050c8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80050ca:	e04b      	b.n	8005164 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d023      	beq.n	8005126 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ec:	f043 0202 	orr.w	r2, r3, #2
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005102:	f043 0201 	orr.w	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2221      	movs	r2, #33	; 0x21
 8005110:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2204      	movs	r2, #4
 8005116:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e0a5      	b.n	8005272 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d01a      	beq.n	8005164 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800512e:	f7ff fc3d 	bl	80049ac <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <HAL_DMA2D_PollForTransfer+0x9c>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10f      	bne.n	8005164 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	f043 0220 	orr.w	r2, r3, #32
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2203      	movs	r2, #3
 8005154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e086      	b.n	8005272 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d0ac      	beq.n	80050cc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d061      	beq.n	8005258 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005194:	f7ff fc0a 	bl	80049ac <HAL_GetTick>
 8005198:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800519a:	e056      	b.n	800524a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d02e      	beq.n	800520c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051bc:	f043 0204 	orr.w	r2, r3, #4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d005      	beq.n	80051da <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d2:	f043 0202 	orr.w	r2, r3, #2
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d005      	beq.n	80051f0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e8:	f043 0201 	orr.w	r2, r3, #1
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2229      	movs	r2, #41	; 0x29
 80051f6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2204      	movs	r2, #4
 80051fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e032      	b.n	8005272 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005212:	d01a      	beq.n	800524a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005214:	f7ff fbca 	bl	80049ac <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d302      	bcc.n	800522a <HAL_DMA2D_PollForTransfer+0x182>
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10f      	bne.n	800524a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	f043 0220 	orr.w	r2, r3, #32
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2203      	movs	r2, #3
 800523a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e013      	b.n	8005272 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0a1      	beq.n	800519c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2212      	movs	r2, #18
 800525e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_DMA2D_ConfigLayer+0x20>
 8005298:	2302      	movs	r3, #2
 800529a:	e079      	b.n	8005390 <HAL_DMA2D_ConfigLayer+0x114>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	3318      	adds	r3, #24
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	4413      	add	r3, r2
 80052b6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80052c6:	4b35      	ldr	r3, [pc, #212]	; (800539c <HAL_DMA2D_ConfigLayer+0x120>)
 80052c8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b0a      	cmp	r3, #10
 80052d0:	d003      	beq.n	80052da <HAL_DMA2D_ConfigLayer+0x5e>
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b09      	cmp	r3, #9
 80052d8:	d107      	bne.n	80052ea <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e005      	b.n	80052f6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	061b      	lsls	r3, r3, #24
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d120      	bne.n	800533e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	43db      	mvns	r3, r3
 8005306:	ea02 0103 	and.w	r1, r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	430a      	orrs	r2, r1
 8005312:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b0a      	cmp	r3, #10
 8005324:	d003      	beq.n	800532e <HAL_DMA2D_ConfigLayer+0xb2>
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b09      	cmp	r3, #9
 800532c:	d127      	bne.n	800537e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	68da      	ldr	r2, [r3, #12]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800533a:	629a      	str	r2, [r3, #40]	; 0x28
 800533c:	e01f      	b.n	800537e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	43db      	mvns	r3, r3
 8005348:	ea02 0103 	and.w	r1, r2, r3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	430a      	orrs	r2, r1
 8005354:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	2b0a      	cmp	r3, #10
 8005366:	d003      	beq.n	8005370 <HAL_DMA2D_ConfigLayer+0xf4>
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b09      	cmp	r3, #9
 800536e:	d106      	bne.n	800537e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800537c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	4618      	mov	r0, r3
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	ff03000f 	.word	0xff03000f

080053a0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b08b      	sub	sp, #44	; 0x2c
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	041a      	lsls	r2, r3, #16
 80053bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053be:	431a      	orrs	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053d8:	d174      	bne.n	80054c4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053e0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80053e8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80053f0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d108      	bne.n	8005412 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	431a      	orrs	r2, r3
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	4313      	orrs	r3, r2
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	4313      	orrs	r3, r2
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
 8005410:	e053      	b.n	80054ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d106      	bne.n	8005428 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4313      	orrs	r3, r2
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
 8005426:	e048      	b.n	80054ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d111      	bne.n	8005454 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	0cdb      	lsrs	r3, r3, #19
 8005434:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	0a9b      	lsrs	r3, r3, #10
 800543a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	08db      	lsrs	r3, r3, #3
 8005440:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	02db      	lsls	r3, r3, #11
 800544a:	4313      	orrs	r3, r2
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	4313      	orrs	r3, r2
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
 8005452:	e032      	b.n	80054ba <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d117      	bne.n	800548c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	0fdb      	lsrs	r3, r3, #31
 8005460:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	0cdb      	lsrs	r3, r3, #19
 8005466:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	0adb      	lsrs	r3, r3, #11
 800546c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	08db      	lsrs	r3, r3, #3
 8005472:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	029b      	lsls	r3, r3, #10
 800547c:	431a      	orrs	r2, r3
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	03db      	lsls	r3, r3, #15
 8005482:	4313      	orrs	r3, r2
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	4313      	orrs	r3, r2
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
 800548a:	e016      	b.n	80054ba <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	0f1b      	lsrs	r3, r3, #28
 8005490:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	0d1b      	lsrs	r3, r3, #20
 8005496:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	0b1b      	lsrs	r3, r3, #12
 800549c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	011a      	lsls	r2, r3, #4
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	021b      	lsls	r3, r3, #8
 80054ac:	431a      	orrs	r2, r3
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	031b      	lsls	r3, r3, #12
 80054b2:	4313      	orrs	r3, r2
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054c0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80054c2:	e003      	b.n	80054cc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	60da      	str	r2, [r3, #12]
}
 80054cc:	bf00      	nop
 80054ce:	372c      	adds	r7, #44	; 0x2c
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054d8:	b480      	push	{r7}
 80054da:	b089      	sub	sp, #36	; 0x24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e177      	b.n	80057e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054f4:	2201      	movs	r2, #1
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	697a      	ldr	r2, [r7, #20]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	429a      	cmp	r2, r3
 800550e:	f040 8166 	bne.w	80057de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d00b      	beq.n	8005532 <HAL_GPIO_Init+0x5a>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b02      	cmp	r3, #2
 8005520:	d007      	beq.n	8005532 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005526:	2b11      	cmp	r3, #17
 8005528:	d003      	beq.n	8005532 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b12      	cmp	r3, #18
 8005530:	d130      	bne.n	8005594 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	2203      	movs	r2, #3
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68da      	ldr	r2, [r3, #12]
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	fa02 f303 	lsl.w	r3, r2, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4313      	orrs	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005568:	2201      	movs	r2, #1
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	4013      	ands	r3, r2
 8005576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 0201 	and.w	r2, r3, #1
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	fa02 f303 	lsl.w	r3, r2, r3
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	4313      	orrs	r3, r2
 800558c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	2203      	movs	r2, #3
 80055a0:	fa02 f303 	lsl.w	r3, r2, r3
 80055a4:	43db      	mvns	r3, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689a      	ldr	r2, [r3, #8]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	005b      	lsls	r3, r3, #1
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d003      	beq.n	80055d4 <HAL_GPIO_Init+0xfc>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	2b12      	cmp	r3, #18
 80055d2:	d123      	bne.n	800561c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	08da      	lsrs	r2, r3, #3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3208      	adds	r2, #8
 80055dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	220f      	movs	r2, #15
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43db      	mvns	r3, r3
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	4013      	ands	r3, r2
 80055f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4313      	orrs	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	08da      	lsrs	r2, r3, #3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	3208      	adds	r2, #8
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	2203      	movs	r2, #3
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	69ba      	ldr	r2, [r7, #24]
 8005630:	4013      	ands	r3, r2
 8005632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f003 0203 	and.w	r2, r3, #3
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4313      	orrs	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	f000 80c0 	beq.w	80057de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800565e:	2300      	movs	r3, #0
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	4b66      	ldr	r3, [pc, #408]	; (80057fc <HAL_GPIO_Init+0x324>)
 8005664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005666:	4a65      	ldr	r2, [pc, #404]	; (80057fc <HAL_GPIO_Init+0x324>)
 8005668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800566c:	6453      	str	r3, [r2, #68]	; 0x44
 800566e:	4b63      	ldr	r3, [pc, #396]	; (80057fc <HAL_GPIO_Init+0x324>)
 8005670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800567a:	4a61      	ldr	r2, [pc, #388]	; (8005800 <HAL_GPIO_Init+0x328>)
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	089b      	lsrs	r3, r3, #2
 8005680:	3302      	adds	r3, #2
 8005682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	220f      	movs	r2, #15
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	43db      	mvns	r3, r3
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	4013      	ands	r3, r2
 800569c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a58      	ldr	r2, [pc, #352]	; (8005804 <HAL_GPIO_Init+0x32c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d037      	beq.n	8005716 <HAL_GPIO_Init+0x23e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a57      	ldr	r2, [pc, #348]	; (8005808 <HAL_GPIO_Init+0x330>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d031      	beq.n	8005712 <HAL_GPIO_Init+0x23a>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a56      	ldr	r2, [pc, #344]	; (800580c <HAL_GPIO_Init+0x334>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d02b      	beq.n	800570e <HAL_GPIO_Init+0x236>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a55      	ldr	r2, [pc, #340]	; (8005810 <HAL_GPIO_Init+0x338>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d025      	beq.n	800570a <HAL_GPIO_Init+0x232>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a54      	ldr	r2, [pc, #336]	; (8005814 <HAL_GPIO_Init+0x33c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01f      	beq.n	8005706 <HAL_GPIO_Init+0x22e>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a53      	ldr	r2, [pc, #332]	; (8005818 <HAL_GPIO_Init+0x340>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d019      	beq.n	8005702 <HAL_GPIO_Init+0x22a>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a52      	ldr	r2, [pc, #328]	; (800581c <HAL_GPIO_Init+0x344>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d013      	beq.n	80056fe <HAL_GPIO_Init+0x226>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a51      	ldr	r2, [pc, #324]	; (8005820 <HAL_GPIO_Init+0x348>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00d      	beq.n	80056fa <HAL_GPIO_Init+0x222>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a50      	ldr	r2, [pc, #320]	; (8005824 <HAL_GPIO_Init+0x34c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <HAL_GPIO_Init+0x21e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a4f      	ldr	r2, [pc, #316]	; (8005828 <HAL_GPIO_Init+0x350>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d101      	bne.n	80056f2 <HAL_GPIO_Init+0x21a>
 80056ee:	2309      	movs	r3, #9
 80056f0:	e012      	b.n	8005718 <HAL_GPIO_Init+0x240>
 80056f2:	230a      	movs	r3, #10
 80056f4:	e010      	b.n	8005718 <HAL_GPIO_Init+0x240>
 80056f6:	2308      	movs	r3, #8
 80056f8:	e00e      	b.n	8005718 <HAL_GPIO_Init+0x240>
 80056fa:	2307      	movs	r3, #7
 80056fc:	e00c      	b.n	8005718 <HAL_GPIO_Init+0x240>
 80056fe:	2306      	movs	r3, #6
 8005700:	e00a      	b.n	8005718 <HAL_GPIO_Init+0x240>
 8005702:	2305      	movs	r3, #5
 8005704:	e008      	b.n	8005718 <HAL_GPIO_Init+0x240>
 8005706:	2304      	movs	r3, #4
 8005708:	e006      	b.n	8005718 <HAL_GPIO_Init+0x240>
 800570a:	2303      	movs	r3, #3
 800570c:	e004      	b.n	8005718 <HAL_GPIO_Init+0x240>
 800570e:	2302      	movs	r3, #2
 8005710:	e002      	b.n	8005718 <HAL_GPIO_Init+0x240>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <HAL_GPIO_Init+0x240>
 8005716:	2300      	movs	r3, #0
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	f002 0203 	and.w	r2, r2, #3
 800571e:	0092      	lsls	r2, r2, #2
 8005720:	4093      	lsls	r3, r2
 8005722:	69ba      	ldr	r2, [r7, #24]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005728:	4935      	ldr	r1, [pc, #212]	; (8005800 <HAL_GPIO_Init+0x328>)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	089b      	lsrs	r3, r3, #2
 800572e:	3302      	adds	r3, #2
 8005730:	69ba      	ldr	r2, [r7, #24]
 8005732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005736:	4b3d      	ldr	r3, [pc, #244]	; (800582c <HAL_GPIO_Init+0x354>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800575a:	4a34      	ldr	r2, [pc, #208]	; (800582c <HAL_GPIO_Init+0x354>)
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005760:	4b32      	ldr	r3, [pc, #200]	; (800582c <HAL_GPIO_Init+0x354>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	43db      	mvns	r3, r3
 800576a:	69ba      	ldr	r2, [r7, #24]
 800576c:	4013      	ands	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005784:	4a29      	ldr	r2, [pc, #164]	; (800582c <HAL_GPIO_Init+0x354>)
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800578a:	4b28      	ldr	r3, [pc, #160]	; (800582c <HAL_GPIO_Init+0x354>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	43db      	mvns	r3, r3
 8005794:	69ba      	ldr	r2, [r7, #24]
 8005796:	4013      	ands	r3, r2
 8005798:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4313      	orrs	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80057ae:	4a1f      	ldr	r2, [pc, #124]	; (800582c <HAL_GPIO_Init+0x354>)
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80057b4:	4b1d      	ldr	r3, [pc, #116]	; (800582c <HAL_GPIO_Init+0x354>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	43db      	mvns	r3, r3
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	4013      	ands	r3, r2
 80057c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80057d8:	4a14      	ldr	r2, [pc, #80]	; (800582c <HAL_GPIO_Init+0x354>)
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61fb      	str	r3, [r7, #28]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b0f      	cmp	r3, #15
 80057e8:	f67f ae84 	bls.w	80054f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3724      	adds	r7, #36	; 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	40023800 	.word	0x40023800
 8005800:	40013800 	.word	0x40013800
 8005804:	40020000 	.word	0x40020000
 8005808:	40020400 	.word	0x40020400
 800580c:	40020800 	.word	0x40020800
 8005810:	40020c00 	.word	0x40020c00
 8005814:	40021000 	.word	0x40021000
 8005818:	40021400 	.word	0x40021400
 800581c:	40021800 	.word	0x40021800
 8005820:	40021c00 	.word	0x40021c00
 8005824:	40022000 	.word	0x40022000
 8005828:	40022400 	.word	0x40022400
 800582c:	40013c00 	.word	0x40013c00

08005830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005840:	787b      	ldrb	r3, [r7, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800584c:	e003      	b.n	8005856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800584e:	887b      	ldrh	r3, [r7, #2]
 8005850:	041a      	lsls	r2, r3, #16
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	619a      	str	r2, [r3, #24]
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	460b      	mov	r3, r1
 800586c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	887b      	ldrh	r3, [r7, #2]
 8005874:	401a      	ands	r2, r3
 8005876:	887b      	ldrh	r3, [r7, #2]
 8005878:	429a      	cmp	r2, r3
 800587a:	d104      	bne.n	8005886 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800587c:	887b      	ldrh	r3, [r7, #2]
 800587e:	041a      	lsls	r2, r3, #16
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005884:	e002      	b.n	800588c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005886:	887a      	ldrh	r2, [r7, #2]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	619a      	str	r2, [r3, #24]
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e12b      	b.n	8005b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f95d 	bl	8005b7e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2224      	movs	r2, #36	; 0x24
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0201 	bic.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058fc:	f001 ff1a 	bl	8007734 <HAL_RCC_GetPCLK1Freq>
 8005900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4a81      	ldr	r2, [pc, #516]	; (8005b0c <HAL_I2C_Init+0x274>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d807      	bhi.n	800591c <HAL_I2C_Init+0x84>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4a80      	ldr	r2, [pc, #512]	; (8005b10 <HAL_I2C_Init+0x278>)
 8005910:	4293      	cmp	r3, r2
 8005912:	bf94      	ite	ls
 8005914:	2301      	movls	r3, #1
 8005916:	2300      	movhi	r3, #0
 8005918:	b2db      	uxtb	r3, r3
 800591a:	e006      	b.n	800592a <HAL_I2C_Init+0x92>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4a7d      	ldr	r2, [pc, #500]	; (8005b14 <HAL_I2C_Init+0x27c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	bf94      	ite	ls
 8005924:	2301      	movls	r3, #1
 8005926:	2300      	movhi	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e0e7      	b.n	8005b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	4a78      	ldr	r2, [pc, #480]	; (8005b18 <HAL_I2C_Init+0x280>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	0c9b      	lsrs	r3, r3, #18
 800593c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	430a      	orrs	r2, r1
 8005950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	4a6a      	ldr	r2, [pc, #424]	; (8005b0c <HAL_I2C_Init+0x274>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d802      	bhi.n	800596c <HAL_I2C_Init+0xd4>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	3301      	adds	r3, #1
 800596a:	e009      	b.n	8005980 <HAL_I2C_Init+0xe8>
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	4a69      	ldr	r2, [pc, #420]	; (8005b1c <HAL_I2C_Init+0x284>)
 8005978:	fba2 2303 	umull	r2, r3, r2, r3
 800597c:	099b      	lsrs	r3, r3, #6
 800597e:	3301      	adds	r3, #1
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6812      	ldr	r2, [r2, #0]
 8005984:	430b      	orrs	r3, r1
 8005986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	495c      	ldr	r1, [pc, #368]	; (8005b0c <HAL_I2C_Init+0x274>)
 800599c:	428b      	cmp	r3, r1
 800599e:	d819      	bhi.n	80059d4 <HAL_I2C_Init+0x13c>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	1e59      	subs	r1, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80059ae:	1c59      	adds	r1, r3, #1
 80059b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80059b4:	400b      	ands	r3, r1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_I2C_Init+0x138>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1e59      	subs	r1, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80059c8:	3301      	adds	r3, #1
 80059ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ce:	e051      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 80059d0:	2304      	movs	r3, #4
 80059d2:	e04f      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d111      	bne.n	8005a00 <HAL_I2C_Init+0x168>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	1e58      	subs	r0, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6859      	ldr	r1, [r3, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	440b      	add	r3, r1
 80059ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80059ee:	3301      	adds	r3, #1
 80059f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	e012      	b.n	8005a26 <HAL_I2C_Init+0x18e>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1e58      	subs	r0, r3, #1
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6859      	ldr	r1, [r3, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	0099      	lsls	r1, r3, #2
 8005a10:	440b      	add	r3, r1
 8005a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a16:	3301      	adds	r3, #1
 8005a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d001      	beq.n	8005a2e <HAL_I2C_Init+0x196>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e022      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d10e      	bne.n	8005a54 <HAL_I2C_Init+0x1bc>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1e58      	subs	r0, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6859      	ldr	r1, [r3, #4]
 8005a3e:	460b      	mov	r3, r1
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	440b      	add	r3, r1
 8005a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a48:	3301      	adds	r3, #1
 8005a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a52:	e00f      	b.n	8005a74 <HAL_I2C_Init+0x1dc>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	1e58      	subs	r0, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6859      	ldr	r1, [r3, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	0099      	lsls	r1, r3, #2
 8005a64:	440b      	add	r3, r1
 8005a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	6809      	ldr	r1, [r1, #0]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69da      	ldr	r2, [r3, #28]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6911      	ldr	r1, [r2, #16]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68d2      	ldr	r2, [r2, #12]
 8005aae:	4311      	orrs	r1, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	430b      	orrs	r3, r1
 8005ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	695a      	ldr	r2, [r3, #20]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0201 	orr.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	000186a0 	.word	0x000186a0
 8005b10:	001e847f 	.word	0x001e847f
 8005b14:	003d08ff 	.word	0x003d08ff
 8005b18:	431bde83 	.word	0x431bde83
 8005b1c:	10624dd3 	.word	0x10624dd3

08005b20 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e021      	b.n	8005b76 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2224      	movs	r2, #36	; 0x24
 8005b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f022 0201 	bic.w	r2, r2, #1
 8005b48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f821 	bl	8005b92 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
	...

08005ba8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	4608      	mov	r0, r1
 8005bb2:	4611      	mov	r1, r2
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	817b      	strh	r3, [r7, #10]
 8005bba:	460b      	mov	r3, r1
 8005bbc:	813b      	strh	r3, [r7, #8]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005bc2:	f7fe fef3 	bl	80049ac <HAL_GetTick>
 8005bc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b20      	cmp	r3, #32
 8005bd2:	f040 80d9 	bne.w	8005d88 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	2319      	movs	r3, #25
 8005bdc:	2201      	movs	r2, #1
 8005bde:	496d      	ldr	r1, [pc, #436]	; (8005d94 <HAL_I2C_Mem_Write+0x1ec>)
 8005be0:	68f8      	ldr	r0, [r7, #12]
 8005be2:	f000 fc89 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005bec:	2302      	movs	r3, #2
 8005bee:	e0cc      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_I2C_Mem_Write+0x56>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0c5      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d007      	beq.n	8005c24 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0201 	orr.w	r2, r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2221      	movs	r2, #33	; 0x21
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2240      	movs	r2, #64	; 0x40
 8005c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4a4d      	ldr	r2, [pc, #308]	; (8005d98 <HAL_I2C_Mem_Write+0x1f0>)
 8005c64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c66:	88f8      	ldrh	r0, [r7, #6]
 8005c68:	893a      	ldrh	r2, [r7, #8]
 8005c6a:	8979      	ldrh	r1, [r7, #10]
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	9301      	str	r3, [sp, #4]
 8005c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	4603      	mov	r3, r0
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 fac4 	bl	8006204 <I2C_RequestMemoryWrite>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d052      	beq.n	8005d28 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e081      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fd0a 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00d      	beq.n	8005cb2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d107      	bne.n	8005cae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e06b      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb6:	781a      	ldrb	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc2:	1c5a      	adds	r2, r3, #1
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d11b      	bne.n	8005d28 <HAL_I2C_Mem_Write+0x180>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d017      	beq.n	8005d28 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	781a      	ldrb	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	1c5a      	adds	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	3b01      	subs	r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1aa      	bne.n	8005c86 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fcf6 	bl	8006726 <I2C_WaitOnBTFFlagUntilTimeout>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00d      	beq.n	8005d5c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d107      	bne.n	8005d58 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d56:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e016      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	e000      	b.n	8005d8a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3718      	adds	r7, #24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	00100002 	.word	0x00100002
 8005d98:	ffff0000 	.word	0xffff0000

08005d9c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08c      	sub	sp, #48	; 0x30
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	4608      	mov	r0, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	817b      	strh	r3, [r7, #10]
 8005dae:	460b      	mov	r3, r1
 8005db0:	813b      	strh	r3, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005db6:	f7fe fdf9 	bl	80049ac <HAL_GetTick>
 8005dba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	f040 8208 	bne.w	80061da <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	2319      	movs	r3, #25
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	497b      	ldr	r1, [pc, #492]	; (8005fc0 <HAL_I2C_Mem_Read+0x224>)
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fb8f 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005de0:	2302      	movs	r3, #2
 8005de2:	e1fb      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_I2C_Mem_Read+0x56>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e1f4      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d007      	beq.n	8005e18 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e26:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2222      	movs	r2, #34	; 0x22
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2240      	movs	r2, #64	; 0x40
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a5b      	ldr	r2, [pc, #364]	; (8005fc4 <HAL_I2C_Mem_Read+0x228>)
 8005e58:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e5a:	88f8      	ldrh	r0, [r7, #6]
 8005e5c:	893a      	ldrh	r2, [r7, #8]
 8005e5e:	8979      	ldrh	r1, [r7, #10]
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	4603      	mov	r3, r0
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fa5e 	bl	800632c <I2C_RequestMemoryRead>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e1b0      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d113      	bne.n	8005eaa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e82:	2300      	movs	r3, #0
 8005e84:	623b      	str	r3, [r7, #32]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	623b      	str	r3, [r7, #32]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	623b      	str	r3, [r7, #32]
 8005e96:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ea6:	601a      	str	r2, [r3, #0]
 8005ea8:	e184      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d11b      	bne.n	8005eea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	61fb      	str	r3, [r7, #28]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	61fb      	str	r3, [r7, #28]
 8005ed6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	e164      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d11b      	bne.n	8005f2a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f00:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f12:	2300      	movs	r3, #0
 8005f14:	61bb      	str	r3, [r7, #24]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	61bb      	str	r3, [r7, #24]
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	e144      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	617b      	str	r3, [r7, #20]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	617b      	str	r3, [r7, #20]
 8005f3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f40:	e138      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f46:	2b03      	cmp	r3, #3
 8005f48:	f200 80f1 	bhi.w	800612e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d123      	bne.n	8005f9c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 fc25 	bl	80067a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d001      	beq.n	8005f68 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e139      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	b2d2      	uxtb	r2, r2
 8005f74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7a:	1c5a      	adds	r2, r3, #1
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f84:	3b01      	subs	r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f9a:	e10b      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d14e      	bne.n	8006042 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	2200      	movs	r2, #0
 8005fac:	4906      	ldr	r1, [pc, #24]	; (8005fc8 <HAL_I2C_Mem_Read+0x22c>)
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 faa2 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d008      	beq.n	8005fcc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e10e      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
 8005fbe:	bf00      	nop
 8005fc0:	00100002 	.word	0x00100002
 8005fc4:	ffff0000 	.word	0xffff0000
 8005fc8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691a      	ldr	r2, [r3, #16]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe6:	b2d2      	uxtb	r2, r2
 8005fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	1c5a      	adds	r2, r3, #1
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	b29a      	uxth	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006040:	e0b8      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006048:	2200      	movs	r2, #0
 800604a:	4966      	ldr	r1, [pc, #408]	; (80061e4 <HAL_I2C_Mem_Read+0x448>)
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f000 fa53 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0bf      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006088:	3b01      	subs	r3, #1
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b01      	subs	r3, #1
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	2200      	movs	r2, #0
 80060a6:	494f      	ldr	r1, [pc, #316]	; (80061e4 <HAL_I2C_Mem_Read+0x448>)
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fa25 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e091      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e4:	3b01      	subs	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	691a      	ldr	r2, [r3, #16]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610c:	1c5a      	adds	r2, r3, #1
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800612c:	e042      	b.n	80061b4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800612e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006130:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 fb38 	bl	80067a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e04c      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691a      	ldr	r2, [r3, #16]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	1c5a      	adds	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800615e:	3b01      	subs	r3, #1
 8006160:	b29a      	uxth	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616a:	b29b      	uxth	r3, r3
 800616c:	3b01      	subs	r3, #1
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f003 0304 	and.w	r3, r3, #4
 800617e:	2b04      	cmp	r3, #4
 8006180:	d118      	bne.n	80061b4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691a      	ldr	r2, [r3, #16]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	3b01      	subs	r3, #1
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f47f aec2 	bne.w	8005f42 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e000      	b.n	80061dc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3728      	adds	r7, #40	; 0x28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	00010004 	.word	0x00010004

080061e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f6:	b2db      	uxtb	r3, r3
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af02      	add	r7, sp, #8
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	4608      	mov	r0, r1
 800620e:	4611      	mov	r1, r2
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	817b      	strh	r3, [r7, #10]
 8006216:	460b      	mov	r3, r1
 8006218:	813b      	strh	r3, [r7, #8]
 800621a:	4613      	mov	r3, r2
 800621c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800622c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800622e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	2200      	movs	r2, #0
 8006236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f95c 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00c      	beq.n	8006260 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800625a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e05f      	b.n	8006320 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006260:	897b      	ldrh	r3, [r7, #10]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800626e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	492c      	ldr	r1, [pc, #176]	; (8006328 <I2C_RequestMemoryWrite+0x124>)
 8006276:	68f8      	ldr	r0, [r7, #12]
 8006278:	f000 f995 	bl	80065a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e04c      	b.n	8006320 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006286:	2300      	movs	r3, #0
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800629c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629e:	6a39      	ldr	r1, [r7, #32]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f9ff 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00d      	beq.n	80062c8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	2b04      	cmp	r3, #4
 80062b2:	d107      	bne.n	80062c4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e02b      	b.n	8006320 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d105      	bne.n	80062da <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	611a      	str	r2, [r3, #16]
 80062d8:	e021      	b.n	800631e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	0a1b      	lsrs	r3, r3, #8
 80062de:	b29b      	uxth	r3, r3
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ea:	6a39      	ldr	r1, [r7, #32]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f000 f9d9 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d00d      	beq.n	8006314 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d107      	bne.n	8006310 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800630e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e005      	b.n	8006320 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006314:	893b      	ldrh	r3, [r7, #8]
 8006316:	b2da      	uxtb	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3718      	adds	r7, #24
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	00010002 	.word	0x00010002

0800632c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b088      	sub	sp, #32
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	4608      	mov	r0, r1
 8006336:	4611      	mov	r1, r2
 8006338:	461a      	mov	r2, r3
 800633a:	4603      	mov	r3, r0
 800633c:	817b      	strh	r3, [r7, #10]
 800633e:	460b      	mov	r3, r1
 8006340:	813b      	strh	r3, [r7, #8]
 8006342:	4613      	mov	r3, r2
 8006344:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006354:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006364:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	2200      	movs	r2, #0
 800636e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 f8c0 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d00c      	beq.n	8006398 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006392:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e0a9      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006398:	897b      	ldrh	r3, [r7, #10]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80063a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	6a3a      	ldr	r2, [r7, #32]
 80063ac:	4951      	ldr	r1, [pc, #324]	; (80064f4 <I2C_RequestMemoryRead+0x1c8>)
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f8f9 	bl	80065a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e096      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	699b      	ldr	r3, [r3, #24]
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063d6:	6a39      	ldr	r1, [r7, #32]
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f963 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00d      	beq.n	8006400 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d107      	bne.n	80063fc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e075      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006400:	88fb      	ldrh	r3, [r7, #6]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d105      	bne.n	8006412 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006406:	893b      	ldrh	r3, [r7, #8]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	611a      	str	r2, [r3, #16]
 8006410:	e021      	b.n	8006456 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006412:	893b      	ldrh	r3, [r7, #8]
 8006414:	0a1b      	lsrs	r3, r3, #8
 8006416:	b29b      	uxth	r3, r3
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006422:	6a39      	ldr	r1, [r7, #32]
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f000 f93d 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00d      	beq.n	800644c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	2b04      	cmp	r3, #4
 8006436:	d107      	bne.n	8006448 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006446:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e04f      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800644c:	893b      	ldrh	r3, [r7, #8]
 800644e:	b2da      	uxtb	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006458:	6a39      	ldr	r1, [r7, #32]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f922 	bl	80066a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00d      	beq.n	8006482 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	2b04      	cmp	r3, #4
 800646c:	d107      	bne.n	800647e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800647c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e034      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006490:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	2200      	movs	r2, #0
 800649a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 f82a 	bl	80064f8 <I2C_WaitOnFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00c      	beq.n	80064c4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e013      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80064c4:	897b      	ldrh	r3, [r7, #10]
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	f043 0301 	orr.w	r3, r3, #1
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	6a3a      	ldr	r2, [r7, #32]
 80064d8:	4906      	ldr	r1, [pc, #24]	; (80064f4 <I2C_RequestMemoryRead+0x1c8>)
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 f863 	bl	80065a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	00010002 	.word	0x00010002

080064f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	4613      	mov	r3, r2
 8006506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006508:	e025      	b.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006510:	d021      	beq.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fe fa4b 	bl	80049ac <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	683a      	ldr	r2, [r7, #0]
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d116      	bne.n	8006556 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f043 0220 	orr.w	r2, r3, #32
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e023      	b.n	800659e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	0c1b      	lsrs	r3, r3, #16
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	d10d      	bne.n	800657c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	43da      	mvns	r2, r3
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	b29b      	uxth	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	bf0c      	ite	eq
 8006572:	2301      	moveq	r3, #1
 8006574:	2300      	movne	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	e00c      	b.n	8006596 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	43da      	mvns	r2, r3
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4013      	ands	r3, r2
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	bf0c      	ite	eq
 800658e:	2301      	moveq	r3, #1
 8006590:	2300      	movne	r3, #0
 8006592:	b2db      	uxtb	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	79fb      	ldrb	r3, [r7, #7]
 8006598:	429a      	cmp	r2, r3
 800659a:	d0b6      	beq.n	800650a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065b4:	e051      	b.n	800665a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c4:	d123      	bne.n	800660e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f043 0204 	orr.w	r2, r3, #4
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e046      	b.n	800669c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d021      	beq.n	800665a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006616:	f7fe f9c9 	bl	80049ac <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	429a      	cmp	r2, r3
 8006624:	d302      	bcc.n	800662c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d116      	bne.n	800665a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2220      	movs	r2, #32
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	f043 0220 	orr.w	r2, r3, #32
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e020      	b.n	800669c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	0c1b      	lsrs	r3, r3, #16
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b01      	cmp	r3, #1
 8006662:	d10c      	bne.n	800667e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	43da      	mvns	r2, r3
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	4013      	ands	r3, r2
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	bf14      	ite	ne
 8006676:	2301      	movne	r3, #1
 8006678:	2300      	moveq	r3, #0
 800667a:	b2db      	uxtb	r3, r3
 800667c:	e00b      	b.n	8006696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	43da      	mvns	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	4013      	ands	r3, r2
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	bf14      	ite	ne
 8006690:	2301      	movne	r3, #1
 8006692:	2300      	moveq	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d18d      	bne.n	80065b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066b0:	e02d      	b.n	800670e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 f8ce 	bl	8006854 <I2C_IsAcknowledgeFailed>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e02d      	b.n	800671e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c8:	d021      	beq.n	800670e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ca:	f7fe f96f 	bl	80049ac <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d302      	bcc.n	80066e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d116      	bne.n	800670e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fa:	f043 0220 	orr.w	r2, r3, #32
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e007      	b.n	800671e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006718:	2b80      	cmp	r3, #128	; 0x80
 800671a:	d1ca      	bne.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006732:	e02d      	b.n	8006790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f88d 	bl	8006854 <I2C_IsAcknowledgeFailed>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e02d      	b.n	80067a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674a:	d021      	beq.n	8006790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674c:	f7fe f92e 	bl	80049ac <HAL_GetTick>
 8006750:	4602      	mov	r2, r0
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	429a      	cmp	r2, r3
 800675a:	d302      	bcc.n	8006762 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d116      	bne.n	8006790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	f043 0220 	orr.w	r2, r3, #32
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e007      	b.n	80067a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b04      	cmp	r3, #4
 800679c:	d1ca      	bne.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067b4:	e042      	b.n	800683c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	f003 0310 	and.w	r3, r3, #16
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d119      	bne.n	80067f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f06f 0210 	mvn.w	r2, #16
 80067cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	e029      	b.n	800684c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067f8:	f7fe f8d8 	bl	80049ac <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	429a      	cmp	r2, r3
 8006806:	d302      	bcc.n	800680e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d116      	bne.n	800683c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006828:	f043 0220 	orr.w	r2, r3, #32
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e007      	b.n	800684c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006846:	2b40      	cmp	r3, #64	; 0x40
 8006848:	d1b5      	bne.n	80067b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686a:	d11b      	bne.n	80068a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006874:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	f043 0204 	orr.w	r2, r3, #4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e0bf      	b.n	8006a46 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d106      	bne.n	80068e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f8ba 	bl	8006a54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80068f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6999      	ldr	r1, [r3, #24]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800690c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	430a      	orrs	r2, r1
 800691a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6899      	ldr	r1, [r3, #8]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b4a      	ldr	r3, [pc, #296]	; (8006a50 <HAL_LTDC_Init+0x19c>)
 8006928:	400b      	ands	r3, r1
 800692a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	041b      	lsls	r3, r3, #16
 8006932:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6899      	ldr	r1, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699a      	ldr	r2, [r3, #24]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	431a      	orrs	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68d9      	ldr	r1, [r3, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	4b3e      	ldr	r3, [pc, #248]	; (8006a50 <HAL_LTDC_Init+0x19c>)
 8006956:	400b      	ands	r3, r1
 8006958:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	041b      	lsls	r3, r3, #16
 8006960:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68d9      	ldr	r1, [r3, #12]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a1a      	ldr	r2, [r3, #32]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	431a      	orrs	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6919      	ldr	r1, [r3, #16]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	4b33      	ldr	r3, [pc, #204]	; (8006a50 <HAL_LTDC_Init+0x19c>)
 8006984:	400b      	ands	r3, r1
 8006986:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	041b      	lsls	r3, r3, #16
 800698e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6919      	ldr	r1, [r3, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	430a      	orrs	r2, r1
 80069a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6959      	ldr	r1, [r3, #20]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	4b27      	ldr	r3, [pc, #156]	; (8006a50 <HAL_LTDC_Init+0x19c>)
 80069b2:	400b      	ands	r3, r1
 80069b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6959      	ldr	r1, [r3, #20]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	430a      	orrs	r2, r1
 80069d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80069f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006a0a:	431a      	orrs	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0206 	orr.w	r2, r2, #6
 8006a22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	699a      	ldr	r2, [r3, #24]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0201 	orr.w	r2, r2, #1
 8006a32:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	f000f800 	.word	0xf000f800

08006a54 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006a68:	b5b0      	push	{r4, r5, r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_LTDC_ConfigLayer+0x1a>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e02c      	b.n	8006adc <HAL_LTDC_ConfigLayer+0x74>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2134      	movs	r1, #52	; 0x34
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	461d      	mov	r5, r3
 8006aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	68b9      	ldr	r1, [r7, #8]
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f000 f83b 	bl	8006b38 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bdb0      	pop	{r4, r5, r7, pc}

08006ae4 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d101      	bne.n	8006afa <HAL_LTDC_EnableDither+0x16>
 8006af6:	2302      	movs	r3, #2
 8006af8:	e016      	b.n	8006b28 <HAL_LTDC_EnableDither+0x44>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <HAL_LTDC_EnableDither+0x50>)
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	4a09      	ldr	r2, [pc, #36]	; (8006b34 <HAL_LTDC_EnableDither+0x50>)
 8006b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b14:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	40016800 	.word	0x40016800

08006b38 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b089      	sub	sp, #36	; 0x24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	0c1b      	lsrs	r3, r3, #16
 8006b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b54:	4413      	add	r3, r2
 8006b56:	041b      	lsls	r3, r3, #16
 8006b58:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	461a      	mov	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	01db      	lsls	r3, r3, #7
 8006b64:	4413      	add	r3, r2
 8006b66:	3384      	adds	r3, #132	; 0x84
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	6812      	ldr	r2, [r2, #0]
 8006b6e:	4611      	mov	r1, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	01d2      	lsls	r2, r2, #7
 8006b74:	440a      	add	r2, r1
 8006b76:	3284      	adds	r2, #132	; 0x84
 8006b78:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006b7c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	0c1b      	lsrs	r3, r3, #16
 8006b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b8e:	4413      	add	r3, r2
 8006b90:	1c5a      	adds	r2, r3, #1
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4619      	mov	r1, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	01db      	lsls	r3, r3, #7
 8006b9c:	440b      	add	r3, r1
 8006b9e:	3384      	adds	r3, #132	; 0x84
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bb6:	4413      	add	r3, r2
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	01db      	lsls	r3, r3, #7
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3384      	adds	r3, #132	; 0x84
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	01d2      	lsls	r2, r2, #7
 8006bd6:	440a      	add	r2, r1
 8006bd8:	3284      	adds	r2, #132	; 0x84
 8006bda:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006bde:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	689a      	ldr	r2, [r3, #8]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bee:	4413      	add	r3, r2
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	01db      	lsls	r3, r3, #7
 8006bfc:	440b      	add	r3, r1
 8006bfe:	3384      	adds	r3, #132	; 0x84
 8006c00:	4619      	mov	r1, r3
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	01db      	lsls	r3, r3, #7
 8006c12:	4413      	add	r3, r2
 8006c14:	3384      	adds	r3, #132	; 0x84
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	6812      	ldr	r2, [r2, #0]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	01d2      	lsls	r2, r2, #7
 8006c22:	440a      	add	r2, r1
 8006c24:	3284      	adds	r2, #132	; 0x84
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	01db      	lsls	r3, r3, #7
 8006c36:	4413      	add	r3, r2
 8006c38:	3384      	adds	r3, #132	; 0x84
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006c48:	021b      	lsls	r3, r3, #8
 8006c4a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006c52:	041b      	lsls	r3, r3, #16
 8006c54:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	061b      	lsls	r3, r3, #24
 8006c5c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	01db      	lsls	r3, r3, #7
 8006c68:	4413      	add	r3, r2
 8006c6a:	3384      	adds	r3, #132	; 0x84
 8006c6c:	699b      	ldr	r3, [r3, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	01db      	lsls	r3, r3, #7
 8006c78:	4413      	add	r3, r2
 8006c7a:	3384      	adds	r3, #132	; 0x84
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	2300      	movs	r3, #0
 8006c80:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c88:	461a      	mov	r2, r3
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4619      	mov	r1, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	01db      	lsls	r3, r3, #7
 8006c9c:	440b      	add	r3, r1
 8006c9e:	3384      	adds	r3, #132	; 0x84
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	01db      	lsls	r3, r3, #7
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3384      	adds	r3, #132	; 0x84
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	6812      	ldr	r2, [r2, #0]
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	01d2      	lsls	r2, r2, #7
 8006cc2:	440a      	add	r2, r1
 8006cc4:	3284      	adds	r2, #132	; 0x84
 8006cc6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006cca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	01db      	lsls	r3, r3, #7
 8006cd6:	4413      	add	r3, r2
 8006cd8:	3384      	adds	r3, #132	; 0x84
 8006cda:	461a      	mov	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	695b      	ldr	r3, [r3, #20]
 8006ce0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	01db      	lsls	r3, r3, #7
 8006cec:	4413      	add	r3, r2
 8006cee:	3384      	adds	r3, #132	; 0x84
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	6812      	ldr	r2, [r2, #0]
 8006cf6:	4611      	mov	r1, r2
 8006cf8:	687a      	ldr	r2, [r7, #4]
 8006cfa:	01d2      	lsls	r2, r2, #7
 8006cfc:	440a      	add	r2, r1
 8006cfe:	3284      	adds	r2, #132	; 0x84
 8006d00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006d04:	f023 0307 	bic.w	r3, r3, #7
 8006d08:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	69da      	ldr	r2, [r3, #28]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	68f9      	ldr	r1, [r7, #12]
 8006d14:	6809      	ldr	r1, [r1, #0]
 8006d16:	4608      	mov	r0, r1
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	01c9      	lsls	r1, r1, #7
 8006d1c:	4401      	add	r1, r0
 8006d1e:	3184      	adds	r1, #132	; 0x84
 8006d20:	4313      	orrs	r3, r2
 8006d22:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	01db      	lsls	r3, r3, #7
 8006d2e:	4413      	add	r3, r2
 8006d30:	3384      	adds	r3, #132	; 0x84
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	01db      	lsls	r3, r3, #7
 8006d3e:	4413      	add	r3, r2
 8006d40:	3384      	adds	r3, #132	; 0x84
 8006d42:	461a      	mov	r2, r3
 8006d44:	2300      	movs	r3, #0
 8006d46:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	01db      	lsls	r3, r3, #7
 8006d52:	4413      	add	r3, r2
 8006d54:	3384      	adds	r3, #132	; 0x84
 8006d56:	461a      	mov	r2, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d102      	bne.n	8006d6c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006d66:	2304      	movs	r3, #4
 8006d68:	61fb      	str	r3, [r7, #28]
 8006d6a:	e01b      	b.n	8006da4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d102      	bne.n	8006d7a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006d74:	2303      	movs	r3, #3
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	e014      	b.n	8006da4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d00b      	beq.n	8006d9a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d007      	beq.n	8006d9a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006d8e:	2b03      	cmp	r3, #3
 8006d90:	d003      	beq.n	8006d9a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006d96:	2b07      	cmp	r3, #7
 8006d98:	d102      	bne.n	8006da0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	61fb      	str	r3, [r7, #28]
 8006d9e:	e001      	b.n	8006da4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006da0:	2301      	movs	r3, #1
 8006da2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	01db      	lsls	r3, r3, #7
 8006dae:	4413      	add	r3, r2
 8006db0:	3384      	adds	r3, #132	; 0x84
 8006db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	4611      	mov	r1, r2
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	01d2      	lsls	r2, r2, #7
 8006dbe:	440a      	add	r2, r1
 8006dc0:	3284      	adds	r2, #132	; 0x84
 8006dc2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	fb02 f303 	mul.w	r3, r2, r3
 8006dd2:	041a      	lsls	r2, r3, #16
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	6859      	ldr	r1, [r3, #4]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	1acb      	subs	r3, r1, r3
 8006dde:	69f9      	ldr	r1, [r7, #28]
 8006de0:	fb01 f303 	mul.w	r3, r1, r3
 8006de4:	3303      	adds	r3, #3
 8006de6:	68f9      	ldr	r1, [r7, #12]
 8006de8:	6809      	ldr	r1, [r1, #0]
 8006dea:	4608      	mov	r0, r1
 8006dec:	6879      	ldr	r1, [r7, #4]
 8006dee:	01c9      	lsls	r1, r1, #7
 8006df0:	4401      	add	r1, r0
 8006df2:	3184      	adds	r1, #132	; 0x84
 8006df4:	4313      	orrs	r3, r2
 8006df6:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	01db      	lsls	r3, r3, #7
 8006e02:	4413      	add	r3, r2
 8006e04:	3384      	adds	r3, #132	; 0x84
 8006e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	6812      	ldr	r2, [r2, #0]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	01d2      	lsls	r2, r2, #7
 8006e12:	440a      	add	r2, r1
 8006e14:	3284      	adds	r2, #132	; 0x84
 8006e16:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	461a      	mov	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	01db      	lsls	r3, r3, #7
 8006e2a:	4413      	add	r3, r2
 8006e2c:	3384      	adds	r3, #132	; 0x84
 8006e2e:	461a      	mov	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e34:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	01db      	lsls	r3, r3, #7
 8006e40:	4413      	add	r3, r2
 8006e42:	3384      	adds	r3, #132	; 0x84
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	6812      	ldr	r2, [r2, #0]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	01d2      	lsls	r2, r2, #7
 8006e50:	440a      	add	r2, r1
 8006e52:	3284      	adds	r2, #132	; 0x84
 8006e54:	f043 0301 	orr.w	r3, r3, #1
 8006e58:	6013      	str	r3, [r2, #0]
}
 8006e5a:	bf00      	nop
 8006e5c:	3724      	adds	r7, #36	; 0x24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
	...

08006e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e25e      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d075      	beq.n	8006f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e86:	4b88      	ldr	r3, [pc, #544]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 030c 	and.w	r3, r3, #12
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d00c      	beq.n	8006eac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e92:	4b85      	ldr	r3, [pc, #532]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e9a:	2b08      	cmp	r3, #8
 8006e9c:	d112      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e9e:	4b82      	ldr	r3, [pc, #520]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eaa:	d10b      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eac:	4b7e      	ldr	r3, [pc, #504]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d05b      	beq.n	8006f70 <HAL_RCC_OscConfig+0x108>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d157      	bne.n	8006f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e239      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ecc:	d106      	bne.n	8006edc <HAL_RCC_OscConfig+0x74>
 8006ece:	4b76      	ldr	r3, [pc, #472]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a75      	ldr	r2, [pc, #468]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	e01d      	b.n	8006f18 <HAL_RCC_OscConfig+0xb0>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ee4:	d10c      	bne.n	8006f00 <HAL_RCC_OscConfig+0x98>
 8006ee6:	4b70      	ldr	r3, [pc, #448]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a6f      	ldr	r2, [pc, #444]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	4b6d      	ldr	r3, [pc, #436]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a6c      	ldr	r2, [pc, #432]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	e00b      	b.n	8006f18 <HAL_RCC_OscConfig+0xb0>
 8006f00:	4b69      	ldr	r3, [pc, #420]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a68      	ldr	r2, [pc, #416]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	4b66      	ldr	r3, [pc, #408]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a65      	ldr	r2, [pc, #404]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d013      	beq.n	8006f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f20:	f7fd fd44 	bl	80049ac <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f28:	f7fd fd40 	bl	80049ac <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b64      	cmp	r3, #100	; 0x64
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e1fe      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f3a:	4b5b      	ldr	r3, [pc, #364]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0f0      	beq.n	8006f28 <HAL_RCC_OscConfig+0xc0>
 8006f46:	e014      	b.n	8006f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f48:	f7fd fd30 	bl	80049ac <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f50:	f7fd fd2c 	bl	80049ac <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b64      	cmp	r3, #100	; 0x64
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e1ea      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f62:	4b51      	ldr	r3, [pc, #324]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f0      	bne.n	8006f50 <HAL_RCC_OscConfig+0xe8>
 8006f6e:	e000      	b.n	8006f72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d063      	beq.n	8007046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f7e:	4b4a      	ldr	r3, [pc, #296]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 030c 	and.w	r3, r3, #12
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00b      	beq.n	8006fa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f8a:	4b47      	ldr	r3, [pc, #284]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f92:	2b08      	cmp	r3, #8
 8006f94:	d11c      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f96:	4b44      	ldr	r3, [pc, #272]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d116      	bne.n	8006fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fa2:	4b41      	ldr	r3, [pc, #260]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0302 	and.w	r3, r3, #2
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <HAL_RCC_OscConfig+0x152>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d001      	beq.n	8006fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e1be      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fba:	4b3b      	ldr	r3, [pc, #236]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	4937      	ldr	r1, [pc, #220]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fce:	e03a      	b.n	8007046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d020      	beq.n	800701a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fd8:	4b34      	ldr	r3, [pc, #208]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fde:	f7fd fce5 	bl	80049ac <HAL_GetTick>
 8006fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fe4:	e008      	b.n	8006ff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fe6:	f7fd fce1 	bl	80049ac <HAL_GetTick>
 8006fea:	4602      	mov	r2, r0
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	1ad3      	subs	r3, r2, r3
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	d901      	bls.n	8006ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e19f      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ff8:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d0f0      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007004:	4b28      	ldr	r3, [pc, #160]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	00db      	lsls	r3, r3, #3
 8007012:	4925      	ldr	r1, [pc, #148]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 8007014:	4313      	orrs	r3, r2
 8007016:	600b      	str	r3, [r1, #0]
 8007018:	e015      	b.n	8007046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800701a:	4b24      	ldr	r3, [pc, #144]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007020:	f7fd fcc4 	bl	80049ac <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007028:	f7fd fcc0 	bl	80049ac <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e17e      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800703a:	4b1b      	ldr	r3, [pc, #108]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f0      	bne.n	8007028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b00      	cmp	r3, #0
 8007050:	d036      	beq.n	80070c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d016      	beq.n	8007088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800705a:	4b15      	ldr	r3, [pc, #84]	; (80070b0 <HAL_RCC_OscConfig+0x248>)
 800705c:	2201      	movs	r2, #1
 800705e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007060:	f7fd fca4 	bl	80049ac <HAL_GetTick>
 8007064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007066:	e008      	b.n	800707a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007068:	f7fd fca0 	bl	80049ac <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	2b02      	cmp	r3, #2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e15e      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800707a:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <HAL_RCC_OscConfig+0x240>)
 800707c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0f0      	beq.n	8007068 <HAL_RCC_OscConfig+0x200>
 8007086:	e01b      	b.n	80070c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007088:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <HAL_RCC_OscConfig+0x248>)
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800708e:	f7fd fc8d 	bl	80049ac <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007094:	e00e      	b.n	80070b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007096:	f7fd fc89 	bl	80049ac <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d907      	bls.n	80070b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e147      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
 80070a8:	40023800 	.word	0x40023800
 80070ac:	42470000 	.word	0x42470000
 80070b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80070b4:	4b88      	ldr	r3, [pc, #544]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 80070b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070b8:	f003 0302 	and.w	r3, r3, #2
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1ea      	bne.n	8007096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f000 8097 	beq.w	80071fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070d2:	4b81      	ldr	r3, [pc, #516]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d10f      	bne.n	80070fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070de:	2300      	movs	r3, #0
 80070e0:	60bb      	str	r3, [r7, #8]
 80070e2:	4b7d      	ldr	r3, [pc, #500]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	4a7c      	ldr	r2, [pc, #496]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 80070e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ec:	6413      	str	r3, [r2, #64]	; 0x40
 80070ee:	4b7a      	ldr	r3, [pc, #488]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070f6:	60bb      	str	r3, [r7, #8]
 80070f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070fa:	2301      	movs	r3, #1
 80070fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fe:	4b77      	ldr	r3, [pc, #476]	; (80072dc <HAL_RCC_OscConfig+0x474>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007106:	2b00      	cmp	r3, #0
 8007108:	d118      	bne.n	800713c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800710a:	4b74      	ldr	r3, [pc, #464]	; (80072dc <HAL_RCC_OscConfig+0x474>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a73      	ldr	r2, [pc, #460]	; (80072dc <HAL_RCC_OscConfig+0x474>)
 8007110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007116:	f7fd fc49 	bl	80049ac <HAL_GetTick>
 800711a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800711c:	e008      	b.n	8007130 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800711e:	f7fd fc45 	bl	80049ac <HAL_GetTick>
 8007122:	4602      	mov	r2, r0
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	2b02      	cmp	r3, #2
 800712a:	d901      	bls.n	8007130 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800712c:	2303      	movs	r3, #3
 800712e:	e103      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007130:	4b6a      	ldr	r3, [pc, #424]	; (80072dc <HAL_RCC_OscConfig+0x474>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007138:	2b00      	cmp	r3, #0
 800713a:	d0f0      	beq.n	800711e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d106      	bne.n	8007152 <HAL_RCC_OscConfig+0x2ea>
 8007144:	4b64      	ldr	r3, [pc, #400]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 8007146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007148:	4a63      	ldr	r2, [pc, #396]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 800714a:	f043 0301 	orr.w	r3, r3, #1
 800714e:	6713      	str	r3, [r2, #112]	; 0x70
 8007150:	e01c      	b.n	800718c <HAL_RCC_OscConfig+0x324>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	2b05      	cmp	r3, #5
 8007158:	d10c      	bne.n	8007174 <HAL_RCC_OscConfig+0x30c>
 800715a:	4b5f      	ldr	r3, [pc, #380]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 800715c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715e:	4a5e      	ldr	r2, [pc, #376]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 8007160:	f043 0304 	orr.w	r3, r3, #4
 8007164:	6713      	str	r3, [r2, #112]	; 0x70
 8007166:	4b5c      	ldr	r3, [pc, #368]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 8007168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716a:	4a5b      	ldr	r2, [pc, #364]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	6713      	str	r3, [r2, #112]	; 0x70
 8007172:	e00b      	b.n	800718c <HAL_RCC_OscConfig+0x324>
 8007174:	4b58      	ldr	r3, [pc, #352]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 8007176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007178:	4a57      	ldr	r2, [pc, #348]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 800717a:	f023 0301 	bic.w	r3, r3, #1
 800717e:	6713      	str	r3, [r2, #112]	; 0x70
 8007180:	4b55      	ldr	r3, [pc, #340]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007184:	4a54      	ldr	r2, [pc, #336]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 8007186:	f023 0304 	bic.w	r3, r3, #4
 800718a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d015      	beq.n	80071c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007194:	f7fd fc0a 	bl	80049ac <HAL_GetTick>
 8007198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800719a:	e00a      	b.n	80071b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800719c:	f7fd fc06 	bl	80049ac <HAL_GetTick>
 80071a0:	4602      	mov	r2, r0
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e0c2      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071b2:	4b49      	ldr	r3, [pc, #292]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 80071b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d0ee      	beq.n	800719c <HAL_RCC_OscConfig+0x334>
 80071be:	e014      	b.n	80071ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071c0:	f7fd fbf4 	bl	80049ac <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071c6:	e00a      	b.n	80071de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071c8:	f7fd fbf0 	bl	80049ac <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d901      	bls.n	80071de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e0ac      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071de:	4b3e      	ldr	r3, [pc, #248]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 80071e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e2:	f003 0302 	and.w	r3, r3, #2
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1ee      	bne.n	80071c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d105      	bne.n	80071fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071f0:	4b39      	ldr	r3, [pc, #228]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 80071f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f4:	4a38      	ldr	r2, [pc, #224]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 80071f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	699b      	ldr	r3, [r3, #24]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8098 	beq.w	8007336 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007206:	4b34      	ldr	r3, [pc, #208]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f003 030c 	and.w	r3, r3, #12
 800720e:	2b08      	cmp	r3, #8
 8007210:	d05c      	beq.n	80072cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	2b02      	cmp	r3, #2
 8007218:	d141      	bne.n	800729e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800721a:	4b31      	ldr	r3, [pc, #196]	; (80072e0 <HAL_RCC_OscConfig+0x478>)
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007220:	f7fd fbc4 	bl	80049ac <HAL_GetTick>
 8007224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007226:	e008      	b.n	800723a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007228:	f7fd fbc0 	bl	80049ac <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b02      	cmp	r3, #2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e07e      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800723a:	4b27      	ldr	r3, [pc, #156]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1f0      	bne.n	8007228 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	69da      	ldr	r2, [r3, #28]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	431a      	orrs	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007254:	019b      	lsls	r3, r3, #6
 8007256:	431a      	orrs	r2, r3
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725c:	085b      	lsrs	r3, r3, #1
 800725e:	3b01      	subs	r3, #1
 8007260:	041b      	lsls	r3, r3, #16
 8007262:	431a      	orrs	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007268:	061b      	lsls	r3, r3, #24
 800726a:	491b      	ldr	r1, [pc, #108]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 800726c:	4313      	orrs	r3, r2
 800726e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <HAL_RCC_OscConfig+0x478>)
 8007272:	2201      	movs	r2, #1
 8007274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007276:	f7fd fb99 	bl	80049ac <HAL_GetTick>
 800727a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800727c:	e008      	b.n	8007290 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800727e:	f7fd fb95 	bl	80049ac <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	2b02      	cmp	r3, #2
 800728a:	d901      	bls.n	8007290 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e053      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007290:	4b11      	ldr	r3, [pc, #68]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0f0      	beq.n	800727e <HAL_RCC_OscConfig+0x416>
 800729c:	e04b      	b.n	8007336 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800729e:	4b10      	ldr	r3, [pc, #64]	; (80072e0 <HAL_RCC_OscConfig+0x478>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072a4:	f7fd fb82 	bl	80049ac <HAL_GetTick>
 80072a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072aa:	e008      	b.n	80072be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072ac:	f7fd fb7e 	bl	80049ac <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d901      	bls.n	80072be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80072ba:	2303      	movs	r3, #3
 80072bc:	e03c      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072be:	4b06      	ldr	r3, [pc, #24]	; (80072d8 <HAL_RCC_OscConfig+0x470>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d1f0      	bne.n	80072ac <HAL_RCC_OscConfig+0x444>
 80072ca:	e034      	b.n	8007336 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d107      	bne.n	80072e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e02f      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
 80072d8:	40023800 	.word	0x40023800
 80072dc:	40007000 	.word	0x40007000
 80072e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072e4:	4b16      	ldr	r3, [pc, #88]	; (8007340 <HAL_RCC_OscConfig+0x4d8>)
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d11c      	bne.n	8007332 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007302:	429a      	cmp	r2, r3
 8007304:	d115      	bne.n	8007332 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800730c:	4013      	ands	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007312:	4293      	cmp	r3, r2
 8007314:	d10d      	bne.n	8007332 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007320:	429a      	cmp	r2, r3
 8007322:	d106      	bne.n	8007332 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800732e:	429a      	cmp	r2, r3
 8007330:	d001      	beq.n	8007336 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	40023800 	.word	0x40023800

08007344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e0cc      	b.n	80074f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007358:	4b68      	ldr	r3, [pc, #416]	; (80074fc <HAL_RCC_ClockConfig+0x1b8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 030f 	and.w	r3, r3, #15
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d90c      	bls.n	8007380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007366:	4b65      	ldr	r3, [pc, #404]	; (80074fc <HAL_RCC_ClockConfig+0x1b8>)
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800736e:	4b63      	ldr	r3, [pc, #396]	; (80074fc <HAL_RCC_ClockConfig+0x1b8>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d001      	beq.n	8007380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800737c:	2301      	movs	r3, #1
 800737e:	e0b8      	b.n	80074f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d020      	beq.n	80073ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007398:	4b59      	ldr	r3, [pc, #356]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	4a58      	ldr	r2, [pc, #352]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 800739e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073b0:	4b53      	ldr	r3, [pc, #332]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	4a52      	ldr	r2, [pc, #328]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 80073b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073bc:	4b50      	ldr	r3, [pc, #320]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	494d      	ldr	r1, [pc, #308]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d044      	beq.n	8007464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d107      	bne.n	80073f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e2:	4b47      	ldr	r3, [pc, #284]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d119      	bne.n	8007422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e07f      	b.n	80074f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	d003      	beq.n	8007402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073fe:	2b03      	cmp	r3, #3
 8007400:	d107      	bne.n	8007412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007402:	4b3f      	ldr	r3, [pc, #252]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e06f      	b.n	80074f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007412:	4b3b      	ldr	r3, [pc, #236]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e067      	b.n	80074f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007422:	4b37      	ldr	r3, [pc, #220]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f023 0203 	bic.w	r2, r3, #3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	4934      	ldr	r1, [pc, #208]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 8007430:	4313      	orrs	r3, r2
 8007432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007434:	f7fd faba 	bl	80049ac <HAL_GetTick>
 8007438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743a:	e00a      	b.n	8007452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800743c:	f7fd fab6 	bl	80049ac <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f241 3288 	movw	r2, #5000	; 0x1388
 800744a:	4293      	cmp	r3, r2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e04f      	b.n	80074f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007452:	4b2b      	ldr	r3, [pc, #172]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 020c 	and.w	r2, r3, #12
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	429a      	cmp	r2, r3
 8007462:	d1eb      	bne.n	800743c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007464:	4b25      	ldr	r3, [pc, #148]	; (80074fc <HAL_RCC_ClockConfig+0x1b8>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 030f 	and.w	r3, r3, #15
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d20c      	bcs.n	800748c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007472:	4b22      	ldr	r3, [pc, #136]	; (80074fc <HAL_RCC_ClockConfig+0x1b8>)
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	b2d2      	uxtb	r2, r2
 8007478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800747a:	4b20      	ldr	r3, [pc, #128]	; (80074fc <HAL_RCC_ClockConfig+0x1b8>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 030f 	and.w	r3, r3, #15
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	429a      	cmp	r2, r3
 8007486:	d001      	beq.n	800748c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e032      	b.n	80074f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	2b00      	cmp	r3, #0
 8007496:	d008      	beq.n	80074aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007498:	4b19      	ldr	r3, [pc, #100]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	4916      	ldr	r1, [pc, #88]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0308 	and.w	r3, r3, #8
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d009      	beq.n	80074ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074b6:	4b12      	ldr	r3, [pc, #72]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	490e      	ldr	r1, [pc, #56]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074ca:	f000 f821 	bl	8007510 <HAL_RCC_GetSysClockFreq>
 80074ce:	4602      	mov	r2, r0
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <HAL_RCC_ClockConfig+0x1bc>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	091b      	lsrs	r3, r3, #4
 80074d6:	f003 030f 	and.w	r3, r3, #15
 80074da:	490a      	ldr	r1, [pc, #40]	; (8007504 <HAL_RCC_ClockConfig+0x1c0>)
 80074dc:	5ccb      	ldrb	r3, [r1, r3]
 80074de:	fa22 f303 	lsr.w	r3, r2, r3
 80074e2:	4a09      	ldr	r2, [pc, #36]	; (8007508 <HAL_RCC_ClockConfig+0x1c4>)
 80074e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074e6:	4b09      	ldr	r3, [pc, #36]	; (800750c <HAL_RCC_ClockConfig+0x1c8>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fd fa1a 	bl	8004924 <HAL_InitTick>

  return HAL_OK;
 80074f0:	2300      	movs	r3, #0
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	40023c00 	.word	0x40023c00
 8007500:	40023800 	.word	0x40023800
 8007504:	0800dfe8 	.word	0x0800dfe8
 8007508:	20000034 	.word	0x20000034
 800750c:	200000c4 	.word	0x200000c4

08007510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007514:	b094      	sub	sp, #80	; 0x50
 8007516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	647b      	str	r3, [r7, #68]	; 0x44
 800751c:	2300      	movs	r3, #0
 800751e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007520:	2300      	movs	r3, #0
 8007522:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007528:	4b79      	ldr	r3, [pc, #484]	; (8007710 <HAL_RCC_GetSysClockFreq+0x200>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 030c 	and.w	r3, r3, #12
 8007530:	2b08      	cmp	r3, #8
 8007532:	d00d      	beq.n	8007550 <HAL_RCC_GetSysClockFreq+0x40>
 8007534:	2b08      	cmp	r3, #8
 8007536:	f200 80e1 	bhi.w	80076fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_RCC_GetSysClockFreq+0x34>
 800753e:	2b04      	cmp	r3, #4
 8007540:	d003      	beq.n	800754a <HAL_RCC_GetSysClockFreq+0x3a>
 8007542:	e0db      	b.n	80076fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007544:	4b73      	ldr	r3, [pc, #460]	; (8007714 <HAL_RCC_GetSysClockFreq+0x204>)
 8007546:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007548:	e0db      	b.n	8007702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800754a:	4b73      	ldr	r3, [pc, #460]	; (8007718 <HAL_RCC_GetSysClockFreq+0x208>)
 800754c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800754e:	e0d8      	b.n	8007702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007550:	4b6f      	ldr	r3, [pc, #444]	; (8007710 <HAL_RCC_GetSysClockFreq+0x200>)
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007558:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800755a:	4b6d      	ldr	r3, [pc, #436]	; (8007710 <HAL_RCC_GetSysClockFreq+0x200>)
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d063      	beq.n	800762e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007566:	4b6a      	ldr	r3, [pc, #424]	; (8007710 <HAL_RCC_GetSysClockFreq+0x200>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	099b      	lsrs	r3, r3, #6
 800756c:	2200      	movs	r2, #0
 800756e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007570:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007578:	633b      	str	r3, [r7, #48]	; 0x30
 800757a:	2300      	movs	r3, #0
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
 800757e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007582:	4622      	mov	r2, r4
 8007584:	462b      	mov	r3, r5
 8007586:	f04f 0000 	mov.w	r0, #0
 800758a:	f04f 0100 	mov.w	r1, #0
 800758e:	0159      	lsls	r1, r3, #5
 8007590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007594:	0150      	lsls	r0, r2, #5
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4621      	mov	r1, r4
 800759c:	1a51      	subs	r1, r2, r1
 800759e:	6139      	str	r1, [r7, #16]
 80075a0:	4629      	mov	r1, r5
 80075a2:	eb63 0301 	sbc.w	r3, r3, r1
 80075a6:	617b      	str	r3, [r7, #20]
 80075a8:	f04f 0200 	mov.w	r2, #0
 80075ac:	f04f 0300 	mov.w	r3, #0
 80075b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075b4:	4659      	mov	r1, fp
 80075b6:	018b      	lsls	r3, r1, #6
 80075b8:	4651      	mov	r1, sl
 80075ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80075be:	4651      	mov	r1, sl
 80075c0:	018a      	lsls	r2, r1, #6
 80075c2:	4651      	mov	r1, sl
 80075c4:	ebb2 0801 	subs.w	r8, r2, r1
 80075c8:	4659      	mov	r1, fp
 80075ca:	eb63 0901 	sbc.w	r9, r3, r1
 80075ce:	f04f 0200 	mov.w	r2, #0
 80075d2:	f04f 0300 	mov.w	r3, #0
 80075d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075e2:	4690      	mov	r8, r2
 80075e4:	4699      	mov	r9, r3
 80075e6:	4623      	mov	r3, r4
 80075e8:	eb18 0303 	adds.w	r3, r8, r3
 80075ec:	60bb      	str	r3, [r7, #8]
 80075ee:	462b      	mov	r3, r5
 80075f0:	eb49 0303 	adc.w	r3, r9, r3
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	f04f 0200 	mov.w	r2, #0
 80075fa:	f04f 0300 	mov.w	r3, #0
 80075fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007602:	4629      	mov	r1, r5
 8007604:	024b      	lsls	r3, r1, #9
 8007606:	4621      	mov	r1, r4
 8007608:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800760c:	4621      	mov	r1, r4
 800760e:	024a      	lsls	r2, r1, #9
 8007610:	4610      	mov	r0, r2
 8007612:	4619      	mov	r1, r3
 8007614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007616:	2200      	movs	r2, #0
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28
 800761a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800761c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007620:	f7f9 fbdc 	bl	8000ddc <__aeabi_uldivmod>
 8007624:	4602      	mov	r2, r0
 8007626:	460b      	mov	r3, r1
 8007628:	4613      	mov	r3, r2
 800762a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800762c:	e058      	b.n	80076e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800762e:	4b38      	ldr	r3, [pc, #224]	; (8007710 <HAL_RCC_GetSysClockFreq+0x200>)
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	099b      	lsrs	r3, r3, #6
 8007634:	2200      	movs	r2, #0
 8007636:	4618      	mov	r0, r3
 8007638:	4611      	mov	r1, r2
 800763a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800763e:	623b      	str	r3, [r7, #32]
 8007640:	2300      	movs	r3, #0
 8007642:	627b      	str	r3, [r7, #36]	; 0x24
 8007644:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	f04f 0000 	mov.w	r0, #0
 8007650:	f04f 0100 	mov.w	r1, #0
 8007654:	0159      	lsls	r1, r3, #5
 8007656:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800765a:	0150      	lsls	r0, r2, #5
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4641      	mov	r1, r8
 8007662:	ebb2 0a01 	subs.w	sl, r2, r1
 8007666:	4649      	mov	r1, r9
 8007668:	eb63 0b01 	sbc.w	fp, r3, r1
 800766c:	f04f 0200 	mov.w	r2, #0
 8007670:	f04f 0300 	mov.w	r3, #0
 8007674:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007678:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800767c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007680:	ebb2 040a 	subs.w	r4, r2, sl
 8007684:	eb63 050b 	sbc.w	r5, r3, fp
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	f04f 0300 	mov.w	r3, #0
 8007690:	00eb      	lsls	r3, r5, #3
 8007692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007696:	00e2      	lsls	r2, r4, #3
 8007698:	4614      	mov	r4, r2
 800769a:	461d      	mov	r5, r3
 800769c:	4643      	mov	r3, r8
 800769e:	18e3      	adds	r3, r4, r3
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	464b      	mov	r3, r9
 80076a4:	eb45 0303 	adc.w	r3, r5, r3
 80076a8:	607b      	str	r3, [r7, #4]
 80076aa:	f04f 0200 	mov.w	r2, #0
 80076ae:	f04f 0300 	mov.w	r3, #0
 80076b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80076b6:	4629      	mov	r1, r5
 80076b8:	028b      	lsls	r3, r1, #10
 80076ba:	4621      	mov	r1, r4
 80076bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80076c0:	4621      	mov	r1, r4
 80076c2:	028a      	lsls	r2, r1, #10
 80076c4:	4610      	mov	r0, r2
 80076c6:	4619      	mov	r1, r3
 80076c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076ca:	2200      	movs	r2, #0
 80076cc:	61bb      	str	r3, [r7, #24]
 80076ce:	61fa      	str	r2, [r7, #28]
 80076d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076d4:	f7f9 fb82 	bl	8000ddc <__aeabi_uldivmod>
 80076d8:	4602      	mov	r2, r0
 80076da:	460b      	mov	r3, r1
 80076dc:	4613      	mov	r3, r2
 80076de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80076e0:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <HAL_RCC_GetSysClockFreq+0x200>)
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	0c1b      	lsrs	r3, r3, #16
 80076e6:	f003 0303 	and.w	r3, r3, #3
 80076ea:	3301      	adds	r3, #1
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80076f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076fa:	e002      	b.n	8007702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80076fc:	4b05      	ldr	r3, [pc, #20]	; (8007714 <HAL_RCC_GetSysClockFreq+0x204>)
 80076fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007704:	4618      	mov	r0, r3
 8007706:	3750      	adds	r7, #80	; 0x50
 8007708:	46bd      	mov	sp, r7
 800770a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800770e:	bf00      	nop
 8007710:	40023800 	.word	0x40023800
 8007714:	00f42400 	.word	0x00f42400
 8007718:	007a1200 	.word	0x007a1200

0800771c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007720:	4b03      	ldr	r3, [pc, #12]	; (8007730 <HAL_RCC_GetHCLKFreq+0x14>)
 8007722:	681b      	ldr	r3, [r3, #0]
}
 8007724:	4618      	mov	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000034 	.word	0x20000034

08007734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007738:	f7ff fff0 	bl	800771c <HAL_RCC_GetHCLKFreq>
 800773c:	4602      	mov	r2, r0
 800773e:	4b05      	ldr	r3, [pc, #20]	; (8007754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	0a9b      	lsrs	r3, r3, #10
 8007744:	f003 0307 	and.w	r3, r3, #7
 8007748:	4903      	ldr	r1, [pc, #12]	; (8007758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800774a:	5ccb      	ldrb	r3, [r1, r3]
 800774c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007750:	4618      	mov	r0, r3
 8007752:	bd80      	pop	{r7, pc}
 8007754:	40023800 	.word	0x40023800
 8007758:	0800dff8 	.word	0x0800dff8

0800775c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007768:	2300      	movs	r3, #0
 800776a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007780:	2b00      	cmp	r3, #0
 8007782:	d105      	bne.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800778c:	2b00      	cmp	r3, #0
 800778e:	d075      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007790:	4b91      	ldr	r3, [pc, #580]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007792:	2200      	movs	r2, #0
 8007794:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007796:	f7fd f909 	bl	80049ac <HAL_GetTick>
 800779a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800779c:	e008      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800779e:	f7fd f905 	bl	80049ac <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d901      	bls.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e189      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077b0:	4b8a      	ldr	r3, [pc, #552]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1f0      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d009      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	019a      	lsls	r2, r3, #6
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	071b      	lsls	r3, r3, #28
 80077d4:	4981      	ldr	r1, [pc, #516]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077d6:	4313      	orrs	r3, r2
 80077d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d01f      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80077e8:	4b7c      	ldr	r3, [pc, #496]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80077ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077ee:	0f1b      	lsrs	r3, r3, #28
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	019a      	lsls	r2, r3, #6
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	061b      	lsls	r3, r3, #24
 8007802:	431a      	orrs	r2, r3
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	071b      	lsls	r3, r3, #28
 8007808:	4974      	ldr	r1, [pc, #464]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800780a:	4313      	orrs	r3, r2
 800780c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007810:	4b72      	ldr	r3, [pc, #456]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007816:	f023 021f 	bic.w	r2, r3, #31
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	3b01      	subs	r3, #1
 8007820:	496e      	ldr	r1, [pc, #440]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007822:	4313      	orrs	r3, r2
 8007824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00d      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	019a      	lsls	r2, r3, #6
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	061b      	lsls	r3, r3, #24
 8007840:	431a      	orrs	r2, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	071b      	lsls	r3, r3, #28
 8007848:	4964      	ldr	r1, [pc, #400]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800784a:	4313      	orrs	r3, r2
 800784c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007850:	4b61      	ldr	r3, [pc, #388]	; (80079d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007852:	2201      	movs	r2, #1
 8007854:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007856:	f7fd f8a9 	bl	80049ac <HAL_GetTick>
 800785a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800785c:	e008      	b.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800785e:	f7fd f8a5 	bl	80049ac <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d901      	bls.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e129      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007870:	4b5a      	ldr	r3, [pc, #360]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0f0      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0304 	and.w	r3, r3, #4
 8007884:	2b00      	cmp	r3, #0
 8007886:	d105      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007890:	2b00      	cmp	r3, #0
 8007892:	d079      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007894:	4b52      	ldr	r3, [pc, #328]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007896:	2200      	movs	r2, #0
 8007898:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800789a:	f7fd f887 	bl	80049ac <HAL_GetTick>
 800789e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078a0:	e008      	b.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80078a2:	f7fd f883 	bl	80049ac <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e107      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80078b4:	4b49      	ldr	r3, [pc, #292]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078c0:	d0ef      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0304 	and.w	r3, r3, #4
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d020      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80078ce:	4b43      	ldr	r3, [pc, #268]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d4:	0f1b      	lsrs	r3, r3, #28
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	019a      	lsls	r2, r3, #6
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	061b      	lsls	r3, r3, #24
 80078e8:	431a      	orrs	r2, r3
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	071b      	lsls	r3, r3, #28
 80078ee:	493b      	ldr	r1, [pc, #236]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078f0:	4313      	orrs	r3, r2
 80078f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80078f6:	4b39      	ldr	r3, [pc, #228]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	3b01      	subs	r3, #1
 8007906:	021b      	lsls	r3, r3, #8
 8007908:	4934      	ldr	r1, [pc, #208]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0308 	and.w	r3, r3, #8
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01e      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800791c:	4b2f      	ldr	r3, [pc, #188]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800791e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007922:	0e1b      	lsrs	r3, r3, #24
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	019a      	lsls	r2, r3, #6
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	061b      	lsls	r3, r3, #24
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	071b      	lsls	r3, r3, #28
 800793c:	4927      	ldr	r1, [pc, #156]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800793e:	4313      	orrs	r3, r2
 8007940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007944:	4b25      	ldr	r3, [pc, #148]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800794a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	4922      	ldr	r1, [pc, #136]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007954:	4313      	orrs	r3, r2
 8007956:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800795a:	4b21      	ldr	r3, [pc, #132]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800795c:	2201      	movs	r2, #1
 800795e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007960:	f7fd f824 	bl	80049ac <HAL_GetTick>
 8007964:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007966:	e008      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007968:	f7fd f820 	bl	80049ac <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d901      	bls.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	e0a4      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800797a:	4b18      	ldr	r3, [pc, #96]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007986:	d1ef      	bne.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 808b 	beq.w	8007aac <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
 800799a:	4b10      	ldr	r3, [pc, #64]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	4a0f      	ldr	r2, [pc, #60]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a4:	6413      	str	r3, [r2, #64]	; 0x40
 80079a6:	4b0d      	ldr	r3, [pc, #52]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80079b2:	4b0c      	ldr	r3, [pc, #48]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a0b      	ldr	r2, [pc, #44]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80079b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079be:	f7fc fff5 	bl	80049ac <HAL_GetTick>
 80079c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80079c4:	e010      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80079c6:	f7fc fff1 	bl	80049ac <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	2b02      	cmp	r3, #2
 80079d2:	d909      	bls.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e075      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80079d8:	42470068 	.word	0x42470068
 80079dc:	40023800 	.word	0x40023800
 80079e0:	42470070 	.word	0x42470070
 80079e4:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80079e8:	4b38      	ldr	r3, [pc, #224]	; (8007acc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0e8      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079f4:	4b36      	ldr	r3, [pc, #216]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80079f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079fc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d02f      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d028      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007a12:	4b2f      	ldr	r3, [pc, #188]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a1a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007a1c:	4b2d      	ldr	r3, [pc, #180]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a22:	4b2c      	ldr	r3, [pc, #176]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007a28:	4a29      	ldr	r2, [pc, #164]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a2e:	4b28      	ldr	r3, [pc, #160]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d114      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007a3a:	f7fc ffb7 	bl	80049ac <HAL_GetTick>
 8007a3e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a40:	e00a      	b.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a42:	f7fc ffb3 	bl	80049ac <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d901      	bls.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e035      	b.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a58:	4b1d      	ldr	r3, [pc, #116]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5c:	f003 0302 	and.w	r3, r3, #2
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d0ee      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a70:	d10d      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007a72:	4b17      	ldr	r3, [pc, #92]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a86:	4912      	ldr	r1, [pc, #72]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	608b      	str	r3, [r1, #8]
 8007a8c:	e005      	b.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007a8e:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	4a0f      	ldr	r2, [pc, #60]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a98:	6093      	str	r3, [r2, #8]
 8007a9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007aa6:	490a      	ldr	r1, [pc, #40]	; (8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0310 	and.w	r3, r3, #16
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007abe:	4b06      	ldr	r3, [pc, #24]	; (8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007ac0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3718      	adds	r7, #24
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	40007000 	.word	0x40007000
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	42470e40 	.word	0x42470e40
 8007ad8:	424711e0 	.word	0x424711e0

08007adc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d101      	bne.n	8007af0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e025      	b.n	8007b3c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d106      	bne.n	8007b0a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 f81d 	bl	8007b44 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2202      	movs	r2, #2
 8007b0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f000 ff0f 	bl	8008940 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	f000 ff7a 	bl	8008a26 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b084      	sub	sp, #16
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d101      	bne.n	8007b74 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007b70:	2302      	movs	r3, #2
 8007b72:	e018      	b.n	8007ba6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	68b9      	ldr	r1, [r7, #8]
 8007b84:	4618      	mov	r0, r3
 8007b86:	f000 ffcd 	bl	8008b24 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d104      	bne.n	8007b9c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2205      	movs	r2, #5
 8007b96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007b9a:	e003      	b.n	8007ba4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007ba4:	2300      	movs	r3, #0
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d101      	bne.n	8007bc8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	e00e      	b.n	8007be6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f000 ffe0 	bl	8008b9c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}

08007bee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b082      	sub	sp, #8
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e05d      	b.n	8007cbc <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f87d 	bl	8007d14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685a      	ldr	r2, [r3, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	431a      	orrs	r2, r3
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	431a      	orrs	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a1b      	ldr	r3, [r3, #32]
 8007c62:	ea42 0103 	orr.w	r1, r2, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	0c1b      	lsrs	r3, r3, #16
 8007c78:	f003 0104 	and.w	r1, r3, #4
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c90:	d104      	bne.n	8007c9c <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007c9a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	69da      	ldr	r2, [r3, #28]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007caa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3708      	adds	r7, #8
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e01a      	b.n	8007d0c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cec:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f000 f81a 	bl	8007d28 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3708      	adds	r7, #8
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_SPI_Transmit+0x22>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e140      	b.n	8007fe0 <HAL_SPI_Transmit+0x2a4>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d66:	f7fc fe21 	bl	80049ac <HAL_GetTick>
 8007d6a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d002      	beq.n	8007d82 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d80:	e125      	b.n	8007fce <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <HAL_SPI_Transmit+0x52>
 8007d88:	88fb      	ldrh	r3, [r7, #6]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d102      	bne.n	8007d94 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007d92:	e11c      	b.n	8007fce <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2203      	movs	r2, #3
 8007d98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	88fa      	ldrh	r2, [r7, #6]
 8007dac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	88fa      	ldrh	r2, [r7, #6]
 8007db2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dda:	d107      	bne.n	8007dec <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dea:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007df4:	d10f      	bne.n	8007e16 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e14:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e20:	2b40      	cmp	r3, #64	; 0x40
 8007e22:	d007      	beq.n	8007e34 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e3c:	d14b      	bne.n	8007ed6 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <HAL_SPI_Transmit+0x110>
 8007e46:	8afb      	ldrh	r3, [r7, #22]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d13e      	bne.n	8007eca <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e50:	881a      	ldrh	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	1c9a      	adds	r2, r3, #2
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	b29a      	uxth	r2, r3
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007e70:	e02b      	b.n	8007eca <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d112      	bne.n	8007ea6 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e84:	881a      	ldrh	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	1c9a      	adds	r2, r3, #2
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ea4:	e011      	b.n	8007eca <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ea6:	f7fc fd81 	bl	80049ac <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d803      	bhi.n	8007ebe <HAL_SPI_Transmit+0x182>
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ebc:	d102      	bne.n	8007ec4 <HAL_SPI_Transmit+0x188>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d102      	bne.n	8007eca <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007ec8:	e081      	b.n	8007fce <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1ce      	bne.n	8007e72 <HAL_SPI_Transmit+0x136>
 8007ed4:	e04c      	b.n	8007f70 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d002      	beq.n	8007ee4 <HAL_SPI_Transmit+0x1a8>
 8007ede:	8afb      	ldrh	r3, [r7, #22]
 8007ee0:	2b01      	cmp	r3, #1
 8007ee2:	d140      	bne.n	8007f66 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	330c      	adds	r3, #12
 8007eee:	7812      	ldrb	r2, [r2, #0]
 8007ef0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef6:	1c5a      	adds	r2, r3, #1
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	3b01      	subs	r3, #1
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f0a:	e02c      	b.n	8007f66 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d113      	bne.n	8007f42 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	330c      	adds	r3, #12
 8007f24:	7812      	ldrb	r2, [r2, #0]
 8007f26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	b29a      	uxth	r2, r3
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f40:	e011      	b.n	8007f66 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f42:	f7fc fd33 	bl	80049ac <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	683a      	ldr	r2, [r7, #0]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d803      	bhi.n	8007f5a <HAL_SPI_Transmit+0x21e>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f58:	d102      	bne.n	8007f60 <HAL_SPI_Transmit+0x224>
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d102      	bne.n	8007f66 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f64:	e033      	b.n	8007fce <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1cd      	bne.n	8007f0c <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f78:	d107      	bne.n	8007f8a <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f88:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f000 fc94 	bl	80088bc <SPI_EndRxTxTransaction>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d10a      	bne.n	8007fbe <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fa8:	2300      	movs	r3, #0
 8007faa:	613b      	str	r3, [r7, #16]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	613b      	str	r3, [r7, #16]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	613b      	str	r3, [r7, #16]
 8007fbc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d002      	beq.n	8007fcc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	77fb      	strb	r3, [r7, #31]
 8007fca:	e000      	b.n	8007fce <HAL_SPI_Transmit+0x292>
  }

error:
 8007fcc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fde:	7ffb      	ldrb	r3, [r7, #31]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3720      	adds	r7, #32
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b088      	sub	sp, #32
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008004:	d112      	bne.n	800802c <HAL_SPI_Receive+0x44>
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10e      	bne.n	800802c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2204      	movs	r2, #4
 8008012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008016:	88fa      	ldrh	r2, [r7, #6]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	4613      	mov	r3, r2
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 f95f 	bl	80082e6 <HAL_SPI_TransmitReceive>
 8008028:	4603      	mov	r3, r0
 800802a:	e158      	b.n	80082de <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008032:	2b01      	cmp	r3, #1
 8008034:	d101      	bne.n	800803a <HAL_SPI_Receive+0x52>
 8008036:	2302      	movs	r3, #2
 8008038:	e151      	b.n	80082de <HAL_SPI_Receive+0x2f6>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008042:	f7fc fcb3 	bl	80049ac <HAL_GetTick>
 8008046:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b01      	cmp	r3, #1
 8008052:	d002      	beq.n	800805a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008054:	2302      	movs	r3, #2
 8008056:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008058:	e138      	b.n	80082cc <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <HAL_SPI_Receive+0x7e>
 8008060:	88fb      	ldrh	r3, [r7, #6]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d102      	bne.n	800806c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	75fb      	strb	r3, [r7, #23]
    goto error;
 800806a:	e12f      	b.n	80082cc <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2204      	movs	r2, #4
 8008070:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	88fa      	ldrh	r2, [r7, #6]
 8008084:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	88fa      	ldrh	r2, [r7, #6]
 800808a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2200      	movs	r2, #0
 800809c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2200      	movs	r2, #0
 80080a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080b2:	d116      	bne.n	80080e2 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080c2:	601a      	str	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080d2:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ea:	d107      	bne.n	80080fc <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008106:	2b40      	cmp	r3, #64	; 0x40
 8008108:	d007      	beq.n	800811a <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008118:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d162      	bne.n	80081e8 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008122:	e02e      	b.n	8008182 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b01      	cmp	r3, #1
 8008130:	d115      	bne.n	800815e <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f103 020c 	add.w	r2, r3, #12
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	7812      	ldrb	r2, [r2, #0]
 8008140:	b2d2      	uxtb	r2, r2
 8008142:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008152:	b29b      	uxth	r3, r3
 8008154:	3b01      	subs	r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800815c:	e011      	b.n	8008182 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800815e:	f7fc fc25 	bl	80049ac <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	683a      	ldr	r2, [r7, #0]
 800816a:	429a      	cmp	r2, r3
 800816c:	d803      	bhi.n	8008176 <HAL_SPI_Receive+0x18e>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008174:	d102      	bne.n	800817c <HAL_SPI_Receive+0x194>
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d102      	bne.n	8008182 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008180:	e0a4      	b.n	80082cc <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1cb      	bne.n	8008124 <HAL_SPI_Receive+0x13c>
 800818c:	e031      	b.n	80081f2 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	2b01      	cmp	r3, #1
 800819a:	d113      	bne.n	80081c4 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68da      	ldr	r2, [r3, #12]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a6:	b292      	uxth	r2, r2
 80081a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ae:	1c9a      	adds	r2, r3, #2
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081c2:	e011      	b.n	80081e8 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081c4:	f7fc fbf2 	bl	80049ac <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d803      	bhi.n	80081dc <HAL_SPI_Receive+0x1f4>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081da:	d102      	bne.n	80081e2 <HAL_SPI_Receive+0x1fa>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d102      	bne.n	80081e8 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80081e6:	e071      	b.n	80082cc <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1cd      	bne.n	800818e <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081fa:	d142      	bne.n	8008282 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800820a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	9300      	str	r3, [sp, #0]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	2201      	movs	r2, #1
 8008214:	2101      	movs	r1, #1
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fa81 	bl	800871e <SPI_WaitFlagStateUntilTimeout>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008226:	e051      	b.n	80082cc <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008230:	d107      	bne.n	8008242 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68da      	ldr	r2, [r3, #12]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	b292      	uxth	r2, r2
 800823e:	801a      	strh	r2, [r3, #0]
 8008240:	e008      	b.n	8008254 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f103 020c 	add.w	r2, r3, #12
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824e:	7812      	ldrb	r2, [r2, #0]
 8008250:	b2d2      	uxtb	r2, r2
 8008252:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2201      	movs	r2, #1
 800825c:	2101      	movs	r1, #1
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 fa5d 	bl	800871e <SPI_WaitFlagStateUntilTimeout>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d008      	beq.n	800827c <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800826e:	f043 0202 	orr.w	r2, r3, #2
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	75fb      	strb	r3, [r7, #23]
      goto error;
 800827a:	e027      	b.n	80082cc <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008282:	693a      	ldr	r2, [r7, #16]
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f000 fab3 	bl	80087f2 <SPI_EndRxTransaction>
 800828c:	4603      	mov	r3, r0
 800828e:	2b00      	cmp	r3, #0
 8008290:	d002      	beq.n	8008298 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2220      	movs	r2, #32
 8008296:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f003 0310 	and.w	r3, r3, #16
 80082a2:	2b10      	cmp	r3, #16
 80082a4:	d10a      	bne.n	80082bc <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082aa:	f043 0202 	orr.w	r2, r3, #2
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80082ba:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d002      	beq.n	80082ca <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	75fb      	strb	r3, [r7, #23]
 80082c8:	e000      	b.n	80082cc <HAL_SPI_Receive+0x2e4>
  }

error :
 80082ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2201      	movs	r2, #1
 80082d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3718      	adds	r7, #24
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b08e      	sub	sp, #56	; 0x38
 80082ea:	af02      	add	r7, sp, #8
 80082ec:	60f8      	str	r0, [r7, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	607a      	str	r2, [r7, #4]
 80082f2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80082f4:	2301      	movs	r3, #1
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_SPI_TransmitReceive+0x26>
 8008308:	2302      	movs	r3, #2
 800830a:	e1f6      	b.n	80086fa <HAL_SPI_TransmitReceive+0x414>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008314:	f7fc fb4a 	bl	80049ac <HAL_GetTick>
 8008318:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800832a:	887b      	ldrh	r3, [r7, #2]
 800832c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800832e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008332:	2b01      	cmp	r3, #1
 8008334:	d00f      	beq.n	8008356 <HAL_SPI_TransmitReceive+0x70>
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800833c:	d107      	bne.n	800834e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d103      	bne.n	800834e <HAL_SPI_TransmitReceive+0x68>
 8008346:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800834a:	2b04      	cmp	r3, #4
 800834c:	d003      	beq.n	8008356 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800834e:	2302      	movs	r3, #2
 8008350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008354:	e1c7      	b.n	80086e6 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d005      	beq.n	8008368 <HAL_SPI_TransmitReceive+0x82>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d002      	beq.n	8008368 <HAL_SPI_TransmitReceive+0x82>
 8008362:	887b      	ldrh	r3, [r7, #2]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d103      	bne.n	8008370 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800836e:	e1ba      	b.n	80086e6 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b04      	cmp	r3, #4
 800837a:	d003      	beq.n	8008384 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2205      	movs	r2, #5
 8008380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	887a      	ldrh	r2, [r7, #2]
 8008394:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	887a      	ldrh	r2, [r7, #2]
 800839a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	887a      	ldrh	r2, [r7, #2]
 80083a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	887a      	ldrh	r2, [r7, #2]
 80083ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2200      	movs	r2, #0
 80083b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083c2:	d10f      	bne.n	80083e4 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083e2:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ee:	2b40      	cmp	r3, #64	; 0x40
 80083f0:	d007      	beq.n	8008402 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008400:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800840a:	f040 808b 	bne.w	8008524 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <HAL_SPI_TransmitReceive+0x136>
 8008416:	8b7b      	ldrh	r3, [r7, #26]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d178      	bne.n	800850e <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008420:	881a      	ldrh	r2, [r3, #0]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842c:	1c9a      	adds	r2, r3, #2
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008436:	b29b      	uxth	r3, r3
 8008438:	3b01      	subs	r3, #1
 800843a:	b29a      	uxth	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008440:	e065      	b.n	800850e <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b02      	cmp	r3, #2
 800844e:	d12d      	bne.n	80084ac <HAL_SPI_TransmitReceive+0x1c6>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008454:	b29b      	uxth	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d028      	beq.n	80084ac <HAL_SPI_TransmitReceive+0x1c6>
 800845a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845c:	2b01      	cmp	r3, #1
 800845e:	d125      	bne.n	80084ac <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	881a      	ldrh	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	1c9a      	adds	r2, r3, #2
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800847a:	b29b      	uxth	r3, r3
 800847c:	3b01      	subs	r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10c      	bne.n	80084ac <HAL_SPI_TransmitReceive+0x1c6>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800849a:	d107      	bne.n	80084ac <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80084aa:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d119      	bne.n	80084ee <HAL_SPI_TransmitReceive+0x208>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084be:	b29b      	uxth	r3, r3
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d014      	beq.n	80084ee <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68da      	ldr	r2, [r3, #12]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	b292      	uxth	r2, r2
 80084d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d6:	1c9a      	adds	r2, r3, #2
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084e0:	b29b      	uxth	r3, r3
 80084e2:	3b01      	subs	r3, #1
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084ea:	2301      	movs	r3, #1
 80084ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80084ee:	f7fc fa5d 	bl	80049ac <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d807      	bhi.n	800850e <HAL_SPI_TransmitReceive+0x228>
 80084fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008504:	d003      	beq.n	800850e <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800850c:	e0eb      	b.n	80086e6 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008512:	b29b      	uxth	r3, r3
 8008514:	2b00      	cmp	r3, #0
 8008516:	d194      	bne.n	8008442 <HAL_SPI_TransmitReceive+0x15c>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800851c:	b29b      	uxth	r3, r3
 800851e:	2b00      	cmp	r3, #0
 8008520:	d18f      	bne.n	8008442 <HAL_SPI_TransmitReceive+0x15c>
 8008522:	e08e      	b.n	8008642 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <HAL_SPI_TransmitReceive+0x24c>
 800852c:	8b7b      	ldrh	r3, [r7, #26]
 800852e:	2b01      	cmp	r3, #1
 8008530:	d17d      	bne.n	800862e <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	330c      	adds	r3, #12
 800853c:	7812      	ldrb	r2, [r2, #0]
 800853e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008558:	e069      	b.n	800862e <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f003 0302 	and.w	r3, r3, #2
 8008564:	2b02      	cmp	r3, #2
 8008566:	d12e      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x2e0>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800856c:	b29b      	uxth	r3, r3
 800856e:	2b00      	cmp	r3, #0
 8008570:	d029      	beq.n	80085c6 <HAL_SPI_TransmitReceive+0x2e0>
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	2b01      	cmp	r3, #1
 8008576:	d126      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	330c      	adds	r3, #12
 8008582:	7812      	ldrb	r2, [r2, #0]
 8008584:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858a:	1c5a      	adds	r2, r3, #1
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008594:	b29b      	uxth	r3, r3
 8008596:	3b01      	subs	r3, #1
 8008598:	b29a      	uxth	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800859e:	2300      	movs	r3, #0
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10c      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x2e0>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b4:	d107      	bne.n	80085c6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085c4:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d119      	bne.n	8008608 <HAL_SPI_TransmitReceive+0x322>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085d8:	b29b      	uxth	r3, r3
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d014      	beq.n	8008608 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68da      	ldr	r2, [r3, #12]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	b2d2      	uxtb	r2, r2
 80085ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	3b01      	subs	r3, #1
 80085fe:	b29a      	uxth	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008604:	2301      	movs	r3, #1
 8008606:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008608:	f7fc f9d0 	bl	80049ac <HAL_GetTick>
 800860c:	4602      	mov	r2, r0
 800860e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008610:	1ad3      	subs	r3, r2, r3
 8008612:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008614:	429a      	cmp	r2, r3
 8008616:	d803      	bhi.n	8008620 <HAL_SPI_TransmitReceive+0x33a>
 8008618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861e:	d102      	bne.n	8008626 <HAL_SPI_TransmitReceive+0x340>
 8008620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008622:	2b00      	cmp	r3, #0
 8008624:	d103      	bne.n	800862e <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8008626:	2303      	movs	r3, #3
 8008628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800862c:	e05b      	b.n	80086e6 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d190      	bne.n	800855a <HAL_SPI_TransmitReceive+0x274>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800863c:	b29b      	uxth	r3, r3
 800863e:	2b00      	cmp	r3, #0
 8008640:	d18b      	bne.n	800855a <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800864a:	d117      	bne.n	800867c <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	2201      	movs	r2, #1
 8008654:	2101      	movs	r1, #1
 8008656:	68f8      	ldr	r0, [r7, #12]
 8008658:	f000 f861 	bl	800871e <SPI_WaitFlagStateUntilTimeout>
 800865c:	4603      	mov	r3, r0
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008666:	f043 0202 	orr.w	r2, r3, #2
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8008674:	e037      	b.n	80086e6 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f003 0310 	and.w	r3, r3, #16
 8008686:	2b10      	cmp	r3, #16
 8008688:	d10d      	bne.n	80086a6 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868e:	f043 0202 	orr.w	r2, r3, #2
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800869e:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f000 f906 	bl	80088bc <SPI_EndRxTxTransaction>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d006      	beq.n	80086c4 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2220      	movs	r2, #32
 80086c0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80086c2:	e010      	b.n	80086e6 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10b      	bne.n	80086e4 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	617b      	str	r3, [r7, #20]
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	617b      	str	r3, [r7, #20]
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	e000      	b.n	80086e6 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 80086e4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3730      	adds	r7, #48	; 0x30
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008710:	b2db      	uxtb	r3, r3
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	603b      	str	r3, [r7, #0]
 800872a:	4613      	mov	r3, r2
 800872c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800872e:	e04c      	b.n	80087ca <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008736:	d048      	beq.n	80087ca <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008738:	f7fc f938 	bl	80049ac <HAL_GetTick>
 800873c:	4602      	mov	r2, r0
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	429a      	cmp	r2, r3
 8008746:	d902      	bls.n	800874e <SPI_WaitFlagStateUntilTimeout+0x30>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d13d      	bne.n	80087ca <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	685a      	ldr	r2, [r3, #4]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800875c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008766:	d111      	bne.n	800878c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008770:	d004      	beq.n	800877c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800877a:	d107      	bne.n	800878c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800878a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008794:	d10f      	bne.n	80087b6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e00f      	b.n	80087ea <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4013      	ands	r3, r2
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	bf0c      	ite	eq
 80087da:	2301      	moveq	r3, #1
 80087dc:	2300      	movne	r3, #0
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	461a      	mov	r2, r3
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d1a3      	bne.n	8008730 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3710      	adds	r7, #16
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087f2:	b580      	push	{r7, lr}
 80087f4:	b086      	sub	sp, #24
 80087f6:	af02      	add	r7, sp, #8
 80087f8:	60f8      	str	r0, [r7, #12]
 80087fa:	60b9      	str	r1, [r7, #8]
 80087fc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008806:	d111      	bne.n	800882c <SPI_EndRxTransaction+0x3a>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008810:	d004      	beq.n	800881c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800881a:	d107      	bne.n	800882c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800882a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008834:	d12a      	bne.n	800888c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800883e:	d012      	beq.n	8008866 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	9300      	str	r3, [sp, #0]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2200      	movs	r2, #0
 8008848:	2180      	movs	r1, #128	; 0x80
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff ff67 	bl	800871e <SPI_WaitFlagStateUntilTimeout>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d02d      	beq.n	80088b2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885a:	f043 0220 	orr.w	r2, r3, #32
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008862:	2303      	movs	r3, #3
 8008864:	e026      	b.n	80088b4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	2200      	movs	r2, #0
 800886e:	2101      	movs	r1, #1
 8008870:	68f8      	ldr	r0, [r7, #12]
 8008872:	f7ff ff54 	bl	800871e <SPI_WaitFlagStateUntilTimeout>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d01a      	beq.n	80088b2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008880:	f043 0220 	orr.w	r2, r3, #32
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e013      	b.n	80088b4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2200      	movs	r2, #0
 8008894:	2101      	movs	r1, #1
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f7ff ff41 	bl	800871e <SPI_WaitFlagStateUntilTimeout>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d007      	beq.n	80088b2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a6:	f043 0220 	orr.w	r2, r3, #32
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e000      	b.n	80088b4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80088c8:	4b1b      	ldr	r3, [pc, #108]	; (8008938 <SPI_EndRxTxTransaction+0x7c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1b      	ldr	r2, [pc, #108]	; (800893c <SPI_EndRxTxTransaction+0x80>)
 80088ce:	fba2 2303 	umull	r2, r3, r2, r3
 80088d2:	0d5b      	lsrs	r3, r3, #21
 80088d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80088d8:	fb02 f303 	mul.w	r3, r2, r3
 80088dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088e6:	d112      	bne.n	800890e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2200      	movs	r2, #0
 80088f0:	2180      	movs	r1, #128	; 0x80
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f7ff ff13 	bl	800871e <SPI_WaitFlagStateUntilTimeout>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d016      	beq.n	800892c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008902:	f043 0220 	orr.w	r2, r3, #32
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e00f      	b.n	800892e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	3b01      	subs	r3, #1
 8008918:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008924:	2b80      	cmp	r3, #128	; 0x80
 8008926:	d0f2      	beq.n	800890e <SPI_EndRxTxTransaction+0x52>
 8008928:	e000      	b.n	800892c <SPI_EndRxTxTransaction+0x70>
        break;
 800892a:	bf00      	nop
  }

  return HAL_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3718      	adds	r7, #24
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
 8008936:	bf00      	nop
 8008938:	20000034 	.word	0x20000034
 800893c:	165e9f81 	.word	0x165e9f81

08008940 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008940:	b480      	push	{r7}
 8008942:	b085      	sub	sp, #20
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800894e:	2300      	movs	r3, #0
 8008950:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d029      	beq.n	80089ae <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008966:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800896a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008974:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 800897a:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008980:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8008986:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 800898c:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8008992:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008998:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800899e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089a0:	68fa      	ldr	r2, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68fa      	ldr	r2, [r7, #12]
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	e034      	b.n	8008a18 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089ba:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80089c4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80089ca:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80089de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089e2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80089ec:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80089f2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80089f8:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80089fe:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008a04:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b087      	sub	sp, #28
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	60f8      	str	r0, [r7, #12]
 8008a2e:	60b9      	str	r1, [r7, #8]
 8008a30:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008a36:	2300      	movs	r3, #0
 8008a38:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d02e      	beq.n	8008a9e <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008a4c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008a5c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	3b01      	subs	r3, #1
 8008a64:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008a66:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008a70:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008a7a:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	695b      	ldr	r3, [r3, #20]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8008a84:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	699b      	ldr	r3, [r3, #24]
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	697a      	ldr	r2, [r7, #20]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	609a      	str	r2, [r3, #8]
 8008a9c:	e03b      	b.n	8008b16 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008aaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008aae:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	695b      	ldr	r3, [r3, #20]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008ad4:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008ae4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	3b01      	subs	r3, #1
 8008aec:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008aee:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008af8:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	3b01      	subs	r3, #1
 8008b00:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008b02:	4313      	orrs	r3, r2
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	697a      	ldr	r2, [r7, #20]
 8008b0e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	693a      	ldr	r2, [r7, #16]
 8008b14:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	371c      	adds	r7, #28
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b086      	sub	sp, #24
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008b30:	2300      	movs	r3, #0
 8008b32:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008b34:	2300      	movs	r3, #0
 8008b36:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b40:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8008b4a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008b52:	4313      	orrs	r3, r2
 8008b54:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008b5c:	f7fb ff26 	bl	80049ac <HAL_GetTick>
 8008b60:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008b62:	e010      	b.n	8008b86 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6a:	d00c      	beq.n	8008b86 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d007      	beq.n	8008b82 <FMC_SDRAM_SendCommand+0x5e>
 8008b72:	f7fb ff1b 	bl	80049ac <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d201      	bcs.n	8008b86 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e006      	b.n	8008b94 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	d0e8      	beq.n	8008b64 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	695a      	ldr	r2, [r3, #20]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
	...

08008bc4 <arm_max_f32>:
 8008bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc8:	1e4f      	subs	r7, r1, #1
 8008bca:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8008bce:	f100 0e04 	add.w	lr, r0, #4
 8008bd2:	edd0 7a00 	vldr	s15, [r0]
 8008bd6:	d058      	beq.n	8008c8a <arm_max_f32+0xc6>
 8008bd8:	3014      	adds	r0, #20
 8008bda:	46c4      	mov	ip, r8
 8008bdc:	2604      	movs	r6, #4
 8008bde:	2400      	movs	r4, #0
 8008be0:	ed10 6a04 	vldr	s12, [r0, #-16]
 8008be4:	ed50 6a03 	vldr	s13, [r0, #-12]
 8008be8:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008bec:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008bf0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf8:	bfc8      	it	gt
 8008bfa:	eef0 7a46 	vmovgt.f32	s15, s12
 8008bfe:	f1a6 0503 	sub.w	r5, r6, #3
 8008c02:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008c06:	bfc8      	it	gt
 8008c08:	462c      	movgt	r4, r5
 8008c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c0e:	bf48      	it	mi
 8008c10:	eef0 7a66 	vmovmi.f32	s15, s13
 8008c14:	f1a6 0502 	sub.w	r5, r6, #2
 8008c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c1c:	bf48      	it	mi
 8008c1e:	462c      	movmi	r4, r5
 8008c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c24:	bf48      	it	mi
 8008c26:	eef0 7a47 	vmovmi.f32	s15, s14
 8008c2a:	f106 35ff 	add.w	r5, r6, #4294967295
 8008c2e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008c32:	bf48      	it	mi
 8008c34:	462c      	movmi	r4, r5
 8008c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c3a:	bf48      	it	mi
 8008c3c:	4634      	movmi	r4, r6
 8008c3e:	bf48      	it	mi
 8008c40:	eef0 7a65 	vmovmi.f32	s15, s11
 8008c44:	f1bc 0c01 	subs.w	ip, ip, #1
 8008c48:	f100 0010 	add.w	r0, r0, #16
 8008c4c:	f106 0604 	add.w	r6, r6, #4
 8008c50:	d1c6      	bne.n	8008be0 <arm_max_f32+0x1c>
 8008c52:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8008c56:	f017 0003 	ands.w	r0, r7, #3
 8008c5a:	d018      	beq.n	8008c8e <arm_max_f32+0xca>
 8008c5c:	1a08      	subs	r0, r1, r0
 8008c5e:	ecbe 7a01 	vldmia	lr!, {s14}
 8008c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6a:	bfc8      	it	gt
 8008c6c:	4604      	movgt	r4, r0
 8008c6e:	f100 0001 	add.w	r0, r0, #1
 8008c72:	bfd8      	it	le
 8008c74:	eeb0 7a67 	vmovle.f32	s14, s15
 8008c78:	4281      	cmp	r1, r0
 8008c7a:	eef0 7a47 	vmov.f32	s15, s14
 8008c7e:	d1ee      	bne.n	8008c5e <arm_max_f32+0x9a>
 8008c80:	ed82 7a00 	vstr	s14, [r2]
 8008c84:	601c      	str	r4, [r3, #0]
 8008c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c8a:	4644      	mov	r4, r8
 8008c8c:	e7e3      	b.n	8008c56 <arm_max_f32+0x92>
 8008c8e:	eeb0 7a67 	vmov.f32	s14, s15
 8008c92:	e7f5      	b.n	8008c80 <arm_max_f32+0xbc>

08008c94 <arm_cfft_radix8by2_f32>:
 8008c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c98:	ed2d 8b08 	vpush	{d8-d11}
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	f8b7 e000 	ldrh.w	lr, [r7]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8008caa:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8008cae:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8008cb2:	f000 80b0 	beq.w	8008e16 <arm_cfft_radix8by2_f32+0x182>
 8008cb6:	008b      	lsls	r3, r1, #2
 8008cb8:	3310      	adds	r3, #16
 8008cba:	18c6      	adds	r6, r0, r3
 8008cbc:	3210      	adds	r2, #16
 8008cbe:	4443      	add	r3, r8
 8008cc0:	f100 0510 	add.w	r5, r0, #16
 8008cc4:	f108 0410 	add.w	r4, r8, #16
 8008cc8:	ed54 1a04 	vldr	s3, [r4, #-16]
 8008ccc:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008cd0:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008cd4:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008cd8:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008cdc:	ed13 5a01 	vldr	s10, [r3, #-4]
 8008ce0:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008ce4:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008ce8:	ed16 2a04 	vldr	s4, [r6, #-16]
 8008cec:	ed56 2a03 	vldr	s5, [r6, #-12]
 8008cf0:	ed15 6a03 	vldr	s12, [r5, #-12]
 8008cf4:	ed15 7a01 	vldr	s14, [r5, #-4]
 8008cf8:	ed15 3a04 	vldr	s6, [r5, #-16]
 8008cfc:	ed56 0a02 	vldr	s1, [r6, #-8]
 8008d00:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008d04:	ed55 4a02 	vldr	s9, [r5, #-8]
 8008d08:	ee73 ba21 	vadd.f32	s23, s6, s3
 8008d0c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8008d10:	ee37 aa27 	vadd.f32	s20, s14, s15
 8008d14:	ee72 9a04 	vadd.f32	s19, s4, s8
 8008d18:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8008d1c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008d20:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008d24:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8008d28:	ed45 ba04 	vstr	s23, [r5, #-16]
 8008d2c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008d30:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008d34:	ed05 aa01 	vstr	s20, [r5, #-4]
 8008d38:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008d3c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008d40:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008d44:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008d48:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008d4c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008d50:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008d54:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008d58:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008d5c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008d60:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008d64:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008d68:	ee63 1a22 	vmul.f32	s3, s6, s5
 8008d6c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008d70:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008d74:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8008d78:	ee23 6a86 	vmul.f32	s12, s7, s12
 8008d7c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008d80:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008d84:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008d88:	ee72 3a63 	vsub.f32	s7, s4, s7
 8008d8c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8008d90:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008d94:	ed44 2a04 	vstr	s5, [r4, #-16]
 8008d98:	ed43 3a04 	vstr	s7, [r3, #-16]
 8008d9c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8008da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008da4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8008da8:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008dac:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008db0:	ee35 6a41 	vsub.f32	s12, s10, s2
 8008db4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008db8:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008dbc:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008dc0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8008dc4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008dc8:	ee64 4a87 	vmul.f32	s9, s9, s14
 8008dcc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008dd0:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008dd4:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008dd8:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008ddc:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008de0:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008de4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008de8:	f1be 0e01 	subs.w	lr, lr, #1
 8008dec:	ed44 5a02 	vstr	s11, [r4, #-8]
 8008df0:	f105 0510 	add.w	r5, r5, #16
 8008df4:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008df8:	f106 0610 	add.w	r6, r6, #16
 8008dfc:	ed03 6a02 	vstr	s12, [r3, #-8]
 8008e00:	ed03 7a01 	vstr	s14, [r3, #-4]
 8008e04:	f102 0210 	add.w	r2, r2, #16
 8008e08:	f104 0410 	add.w	r4, r4, #16
 8008e0c:	f103 0310 	add.w	r3, r3, #16
 8008e10:	f47f af5a 	bne.w	8008cc8 <arm_cfft_radix8by2_f32+0x34>
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	b28c      	uxth	r4, r1
 8008e18:	4621      	mov	r1, r4
 8008e1a:	2302      	movs	r3, #2
 8008e1c:	f000 fbca 	bl	80095b4 <arm_radix8_butterfly_f32>
 8008e20:	ecbd 8b08 	vpop	{d8-d11}
 8008e24:	4621      	mov	r1, r4
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	4640      	mov	r0, r8
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e30:	f000 bbc0 	b.w	80095b4 <arm_radix8_butterfly_f32>

08008e34 <arm_cfft_radix8by4_f32>:
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	ed2d 8b0a 	vpush	{d8-d12}
 8008e3c:	8802      	ldrh	r2, [r0, #0]
 8008e3e:	ed91 6a00 	vldr	s12, [r1]
 8008e42:	b08f      	sub	sp, #60	; 0x3c
 8008e44:	460f      	mov	r7, r1
 8008e46:	0852      	lsrs	r2, r2, #1
 8008e48:	6841      	ldr	r1, [r0, #4]
 8008e4a:	900c      	str	r0, [sp, #48]	; 0x30
 8008e4c:	0093      	lsls	r3, r2, #2
 8008e4e:	4638      	mov	r0, r7
 8008e50:	4418      	add	r0, r3
 8008e52:	4606      	mov	r6, r0
 8008e54:	9009      	str	r0, [sp, #36]	; 0x24
 8008e56:	4418      	add	r0, r3
 8008e58:	edd0 6a00 	vldr	s13, [r0]
 8008e5c:	ed96 4a00 	vldr	s8, [r6]
 8008e60:	edd6 2a01 	vldr	s5, [r6, #4]
 8008e64:	edd0 7a01 	vldr	s15, [r0, #4]
 8008e68:	900a      	str	r0, [sp, #40]	; 0x28
 8008e6a:	ee76 5a26 	vadd.f32	s11, s12, s13
 8008e6e:	4604      	mov	r4, r0
 8008e70:	4625      	mov	r5, r4
 8008e72:	441c      	add	r4, r3
 8008e74:	edd4 4a00 	vldr	s9, [r4]
 8008e78:	ed97 7a01 	vldr	s14, [r7, #4]
 8008e7c:	ed94 3a01 	vldr	s6, [r4, #4]
 8008e80:	9401      	str	r4, [sp, #4]
 8008e82:	ee35 5a84 	vadd.f32	s10, s11, s8
 8008e86:	4630      	mov	r0, r6
 8008e88:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008e8c:	463e      	mov	r6, r7
 8008e8e:	ee15 ea10 	vmov	lr, s10
 8008e92:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008e96:	f846 eb08 	str.w	lr, [r6], #8
 8008e9a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008e9e:	ed90 5a01 	vldr	s10, [r0, #4]
 8008ea2:	9605      	str	r6, [sp, #20]
 8008ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ea8:	9e01      	ldr	r6, [sp, #4]
 8008eaa:	9707      	str	r7, [sp, #28]
 8008eac:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8008eb0:	ed96 2a01 	vldr	s4, [r6, #4]
 8008eb4:	ee36 7a05 	vadd.f32	s14, s12, s10
 8008eb8:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8008ebc:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8008ec0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008ec4:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8008ec8:	4604      	mov	r4, r0
 8008eca:	46a3      	mov	fp, r4
 8008ecc:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008ed0:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008ed4:	ee14 8a10 	vmov	r8, s8
 8008ed8:	46a4      	mov	ip, r4
 8008eda:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8008ede:	ed87 7a01 	vstr	s14, [r7, #4]
 8008ee2:	f84b 8b08 	str.w	r8, [fp], #8
 8008ee6:	f1ac 0704 	sub.w	r7, ip, #4
 8008eea:	ed8c 5a01 	vstr	s10, [ip, #4]
 8008eee:	f101 0c08 	add.w	ip, r1, #8
 8008ef2:	462c      	mov	r4, r5
 8008ef4:	f8cd c010 	str.w	ip, [sp, #16]
 8008ef8:	ee15 ca90 	vmov	ip, s11
 8008efc:	ee36 6a62 	vsub.f32	s12, s12, s5
 8008f00:	f844 cb08 	str.w	ip, [r4], #8
 8008f04:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008f08:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008f0c:	9406      	str	r4, [sp, #24]
 8008f0e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008f12:	f101 0410 	add.w	r4, r1, #16
 8008f16:	0852      	lsrs	r2, r2, #1
 8008f18:	9402      	str	r4, [sp, #8]
 8008f1a:	ed85 6a01 	vstr	s12, [r5, #4]
 8008f1e:	462c      	mov	r4, r5
 8008f20:	f101 0518 	add.w	r5, r1, #24
 8008f24:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f26:	46b2      	mov	sl, r6
 8008f28:	9503      	str	r5, [sp, #12]
 8008f2a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008f2e:	3a02      	subs	r2, #2
 8008f30:	ee16 5a90 	vmov	r5, s13
 8008f34:	46b6      	mov	lr, r6
 8008f36:	4630      	mov	r0, r6
 8008f38:	0852      	lsrs	r2, r2, #1
 8008f3a:	f84a 5b08 	str.w	r5, [sl], #8
 8008f3e:	f1a0 0604 	sub.w	r6, r0, #4
 8008f42:	edce 7a01 	vstr	s15, [lr, #4]
 8008f46:	9208      	str	r2, [sp, #32]
 8008f48:	f000 8130 	beq.w	80091ac <arm_cfft_radix8by4_f32+0x378>
 8008f4c:	4691      	mov	r9, r2
 8008f4e:	9a07      	ldr	r2, [sp, #28]
 8008f50:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008f54:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008f58:	3b08      	subs	r3, #8
 8008f5a:	f102 0510 	add.w	r5, r2, #16
 8008f5e:	f101 0c20 	add.w	ip, r1, #32
 8008f62:	f1a4 020c 	sub.w	r2, r4, #12
 8008f66:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8008f6a:	4433      	add	r3, r6
 8008f6c:	3410      	adds	r4, #16
 8008f6e:	4650      	mov	r0, sl
 8008f70:	4659      	mov	r1, fp
 8008f72:	ed55 3a02 	vldr	s7, [r5, #-8]
 8008f76:	ed14 5a02 	vldr	s10, [r4, #-8]
 8008f7a:	ed91 7a00 	vldr	s14, [r1]
 8008f7e:	edd0 7a00 	vldr	s15, [r0]
 8008f82:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008f86:	ed15 4a01 	vldr	s8, [r5, #-4]
 8008f8a:	edd0 6a01 	vldr	s13, [r0, #4]
 8008f8e:	ed91 6a01 	vldr	s12, [r1, #4]
 8008f92:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008f96:	ee34 0a25 	vadd.f32	s0, s8, s11
 8008f9a:	ee78 4a07 	vadd.f32	s9, s16, s14
 8008f9e:	ee74 5a65 	vsub.f32	s11, s8, s11
 8008fa2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8008fa6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8008faa:	ed45 4a02 	vstr	s9, [r5, #-8]
 8008fae:	edd1 4a01 	vldr	s9, [r1, #4]
 8008fb2:	ed90 4a01 	vldr	s8, [r0, #4]
 8008fb6:	ee70 4a24 	vadd.f32	s9, s0, s9
 8008fba:	ee75 aa06 	vadd.f32	s21, s10, s12
 8008fbe:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008fc2:	ee35 aac7 	vsub.f32	s20, s11, s14
 8008fc6:	ed45 4a01 	vstr	s9, [r5, #-4]
 8008fca:	edd6 1a00 	vldr	s3, [r6]
 8008fce:	edd7 0a00 	vldr	s1, [r7]
 8008fd2:	ed92 4a02 	vldr	s8, [r2, #8]
 8008fd6:	edd3 3a02 	vldr	s7, [r3, #8]
 8008fda:	ed93 2a01 	vldr	s4, [r3, #4]
 8008fde:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008fe2:	edd2 2a01 	vldr	s5, [r2, #4]
 8008fe6:	ed57 9a01 	vldr	s19, [r7, #-4]
 8008fea:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8008fee:	ee39 3a81 	vadd.f32	s6, s19, s2
 8008ff2:	ee74 8a84 	vadd.f32	s17, s9, s8
 8008ff6:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8008ffa:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8008ffe:	ee7a aae6 	vsub.f32	s21, s21, s13
 8009002:	ee18 aa90 	vmov	sl, s17
 8009006:	f847 a908 	str.w	sl, [r7], #-8
 800900a:	edd2 8a01 	vldr	s17, [r2, #4]
 800900e:	ed93 9a01 	vldr	s18, [r3, #4]
 8009012:	ee73 8a28 	vadd.f32	s17, s6, s17
 8009016:	ee3a aa27 	vadd.f32	s20, s20, s15
 800901a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800901e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8009022:	edc7 8a01 	vstr	s17, [r7, #4]
 8009026:	ed18 ba02 	vldr	s22, [r8, #-8]
 800902a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800902e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8009032:	ee6a ba28 	vmul.f32	s23, s20, s17
 8009036:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800903a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800903e:	ee31 9a20 	vadd.f32	s18, s2, s1
 8009042:	ee79 9a82 	vadd.f32	s19, s19, s4
 8009046:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800904a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800904e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8009052:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8009056:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800905a:	ee69 8a28 	vmul.f32	s17, s18, s17
 800905e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8009062:	ee1c aa10 	vmov	sl, s24
 8009066:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800906a:	f841 ab08 	str.w	sl, [r1], #8
 800906e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8009072:	ee3b bacb 	vsub.f32	s22, s23, s22
 8009076:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800907a:	ee33 3a62 	vsub.f32	s6, s6, s5
 800907e:	ed01 aa01 	vstr	s20, [r1, #-4]
 8009082:	edc2 8a01 	vstr	s17, [r2, #4]
 8009086:	ed82 ba02 	vstr	s22, [r2, #8]
 800908a:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800908e:	ee74 3a63 	vsub.f32	s7, s8, s7
 8009092:	ee38 8a47 	vsub.f32	s16, s16, s14
 8009096:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800909a:	ee30 0a46 	vsub.f32	s0, s0, s12
 800909e:	ee33 3a42 	vsub.f32	s6, s6, s4
 80090a2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80090a6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80090aa:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80090ae:	ee63 8a04 	vmul.f32	s17, s6, s8
 80090b2:	ee28 aa24 	vmul.f32	s20, s16, s9
 80090b6:	ee60 9a04 	vmul.f32	s19, s0, s8
 80090ba:	ee28 8a04 	vmul.f32	s16, s16, s8
 80090be:	ee20 0a24 	vmul.f32	s0, s0, s9
 80090c2:	ee63 3a84 	vmul.f32	s7, s7, s8
 80090c6:	ee39 4a68 	vsub.f32	s8, s18, s17
 80090ca:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80090ce:	ee14 aa10 	vmov	sl, s8
 80090d2:	ee30 0a48 	vsub.f32	s0, s0, s16
 80090d6:	ee63 4a24 	vmul.f32	s9, s6, s9
 80090da:	ed44 9a02 	vstr	s19, [r4, #-8]
 80090de:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80090e2:	ed04 0a01 	vstr	s0, [r4, #-4]
 80090e6:	f846 a908 	str.w	sl, [r6], #-8
 80090ea:	ee35 6a46 	vsub.f32	s12, s10, s12
 80090ee:	ee35 7a87 	vadd.f32	s14, s11, s14
 80090f2:	edc6 3a01 	vstr	s7, [r6, #4]
 80090f6:	ee76 6a26 	vadd.f32	s13, s12, s13
 80090fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090fe:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8009102:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8009106:	ee67 5a86 	vmul.f32	s11, s15, s12
 800910a:	ee26 5a87 	vmul.f32	s10, s13, s14
 800910e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8009112:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8009116:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800911a:	ee75 5a25 	vadd.f32	s11, s10, s11
 800911e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8009122:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800912a:	ee21 6a06 	vmul.f32	s12, s2, s12
 800912e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8009132:	ee21 1a07 	vmul.f32	s2, s2, s14
 8009136:	ee15 aa90 	vmov	sl, s11
 800913a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800913e:	f840 ab08 	str.w	sl, [r0], #8
 8009142:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8009146:	ee76 2a22 	vadd.f32	s5, s12, s5
 800914a:	f1b9 0901 	subs.w	r9, r9, #1
 800914e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8009152:	f105 0508 	add.w	r5, r5, #8
 8009156:	ed83 1a02 	vstr	s2, [r3, #8]
 800915a:	edc3 2a01 	vstr	s5, [r3, #4]
 800915e:	f108 0808 	add.w	r8, r8, #8
 8009162:	f1a2 0208 	sub.w	r2, r2, #8
 8009166:	f10c 0c10 	add.w	ip, ip, #16
 800916a:	f104 0408 	add.w	r4, r4, #8
 800916e:	f10e 0e18 	add.w	lr, lr, #24
 8009172:	f1a3 0308 	sub.w	r3, r3, #8
 8009176:	f47f aefc 	bne.w	8008f72 <arm_cfft_radix8by4_f32+0x13e>
 800917a:	9908      	ldr	r1, [sp, #32]
 800917c:	9802      	ldr	r0, [sp, #8]
 800917e:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8009182:	00cb      	lsls	r3, r1, #3
 8009184:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009188:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800918c:	9102      	str	r1, [sp, #8]
 800918e:	9905      	ldr	r1, [sp, #20]
 8009190:	4419      	add	r1, r3
 8009192:	9105      	str	r1, [sp, #20]
 8009194:	9904      	ldr	r1, [sp, #16]
 8009196:	4419      	add	r1, r3
 8009198:	9104      	str	r1, [sp, #16]
 800919a:	9906      	ldr	r1, [sp, #24]
 800919c:	449b      	add	fp, r3
 800919e:	4419      	add	r1, r3
 80091a0:	449a      	add	sl, r3
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	9106      	str	r1, [sp, #24]
 80091a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091aa:	9303      	str	r3, [sp, #12]
 80091ac:	9a05      	ldr	r2, [sp, #20]
 80091ae:	9806      	ldr	r0, [sp, #24]
 80091b0:	ed92 4a00 	vldr	s8, [r2]
 80091b4:	ed90 7a00 	vldr	s14, [r0]
 80091b8:	ed9b 3a00 	vldr	s6, [fp]
 80091bc:	edda 3a00 	vldr	s7, [sl]
 80091c0:	edd2 4a01 	vldr	s9, [r2, #4]
 80091c4:	edd0 6a01 	vldr	s13, [r0, #4]
 80091c8:	ed9a 2a01 	vldr	s4, [sl, #4]
 80091cc:	eddb 7a01 	vldr	s15, [fp, #4]
 80091d0:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80091d4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80091d6:	ee34 6a07 	vadd.f32	s12, s8, s14
 80091da:	ee74 5aa6 	vadd.f32	s11, s9, s13
 80091de:	ee36 5a03 	vadd.f32	s10, s12, s6
 80091e2:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80091e6:	ee35 5a23 	vadd.f32	s10, s10, s7
 80091ea:	ee34 7a47 	vsub.f32	s14, s8, s14
 80091ee:	ed82 5a00 	vstr	s10, [r2]
 80091f2:	ed9b 5a01 	vldr	s10, [fp, #4]
 80091f6:	edda 4a01 	vldr	s9, [sl, #4]
 80091fa:	ee35 5a85 	vadd.f32	s10, s11, s10
 80091fe:	ee37 4a27 	vadd.f32	s8, s14, s15
 8009202:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009206:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800920a:	ed82 5a01 	vstr	s10, [r2, #4]
 800920e:	9a04      	ldr	r2, [sp, #16]
 8009210:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8009214:	edd2 1a00 	vldr	s3, [r2]
 8009218:	edd2 2a01 	vldr	s5, [r2, #4]
 800921c:	9a02      	ldr	r2, [sp, #8]
 800921e:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009222:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009226:	ee64 4a21 	vmul.f32	s9, s8, s3
 800922a:	ee24 4a22 	vmul.f32	s8, s8, s5
 800922e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8009232:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009236:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800923a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800923e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009242:	edcb 2a00 	vstr	s5, [fp]
 8009246:	ed8b 5a01 	vstr	s10, [fp, #4]
 800924a:	ed92 4a01 	vldr	s8, [r2, #4]
 800924e:	ed92 5a00 	vldr	s10, [r2]
 8009252:	9a03      	ldr	r2, [sp, #12]
 8009254:	ee36 6a63 	vsub.f32	s12, s12, s7
 8009258:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800925c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009260:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009264:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009268:	ee65 5a84 	vmul.f32	s11, s11, s8
 800926c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009270:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009274:	ee76 6a83 	vadd.f32	s13, s13, s6
 8009278:	ee37 7a67 	vsub.f32	s14, s14, s15
 800927c:	ed80 6a01 	vstr	s12, [r0, #4]
 8009280:	edc0 5a00 	vstr	s11, [r0]
 8009284:	edd2 5a01 	vldr	s11, [r2, #4]
 8009288:	9807      	ldr	r0, [sp, #28]
 800928a:	ee77 7a02 	vadd.f32	s15, s14, s4
 800928e:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8009292:	edd2 6a00 	vldr	s13, [r2]
 8009296:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800929a:	ee67 6a26 	vmul.f32	s13, s14, s13
 800929e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80092a2:	ee27 7a25 	vmul.f32	s14, s14, s11
 80092a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80092aa:	ee36 7a07 	vadd.f32	s14, s12, s14
 80092ae:	edca 7a01 	vstr	s15, [sl, #4]
 80092b2:	ed8a 7a00 	vstr	s14, [sl]
 80092b6:	6872      	ldr	r2, [r6, #4]
 80092b8:	4621      	mov	r1, r4
 80092ba:	2304      	movs	r3, #4
 80092bc:	f000 f97a 	bl	80095b4 <arm_radix8_butterfly_f32>
 80092c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092c2:	6872      	ldr	r2, [r6, #4]
 80092c4:	4621      	mov	r1, r4
 80092c6:	2304      	movs	r3, #4
 80092c8:	f000 f974 	bl	80095b4 <arm_radix8_butterfly_f32>
 80092cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80092ce:	6872      	ldr	r2, [r6, #4]
 80092d0:	4621      	mov	r1, r4
 80092d2:	2304      	movs	r3, #4
 80092d4:	f000 f96e 	bl	80095b4 <arm_radix8_butterfly_f32>
 80092d8:	6872      	ldr	r2, [r6, #4]
 80092da:	9801      	ldr	r0, [sp, #4]
 80092dc:	4621      	mov	r1, r4
 80092de:	2304      	movs	r3, #4
 80092e0:	b00f      	add	sp, #60	; 0x3c
 80092e2:	ecbd 8b0a 	vpop	{d8-d12}
 80092e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ea:	f000 b963 	b.w	80095b4 <arm_radix8_butterfly_f32>
 80092ee:	bf00      	nop

080092f0 <arm_cfft_f32>:
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	2a01      	cmp	r2, #1
 80092f6:	4606      	mov	r6, r0
 80092f8:	4617      	mov	r7, r2
 80092fa:	460c      	mov	r4, r1
 80092fc:	4698      	mov	r8, r3
 80092fe:	8805      	ldrh	r5, [r0, #0]
 8009300:	d054      	beq.n	80093ac <arm_cfft_f32+0xbc>
 8009302:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009306:	d04c      	beq.n	80093a2 <arm_cfft_f32+0xb2>
 8009308:	d916      	bls.n	8009338 <arm_cfft_f32+0x48>
 800930a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800930e:	d01a      	beq.n	8009346 <arm_cfft_f32+0x56>
 8009310:	d95c      	bls.n	80093cc <arm_cfft_f32+0xdc>
 8009312:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8009316:	d044      	beq.n	80093a2 <arm_cfft_f32+0xb2>
 8009318:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800931c:	d105      	bne.n	800932a <arm_cfft_f32+0x3a>
 800931e:	2301      	movs	r3, #1
 8009320:	6872      	ldr	r2, [r6, #4]
 8009322:	4629      	mov	r1, r5
 8009324:	4620      	mov	r0, r4
 8009326:	f000 f945 	bl	80095b4 <arm_radix8_butterfly_f32>
 800932a:	f1b8 0f00 	cmp.w	r8, #0
 800932e:	d111      	bne.n	8009354 <arm_cfft_f32+0x64>
 8009330:	2f01      	cmp	r7, #1
 8009332:	d016      	beq.n	8009362 <arm_cfft_f32+0x72>
 8009334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009338:	2d20      	cmp	r5, #32
 800933a:	d032      	beq.n	80093a2 <arm_cfft_f32+0xb2>
 800933c:	d94a      	bls.n	80093d4 <arm_cfft_f32+0xe4>
 800933e:	2d40      	cmp	r5, #64	; 0x40
 8009340:	d0ed      	beq.n	800931e <arm_cfft_f32+0x2e>
 8009342:	2d80      	cmp	r5, #128	; 0x80
 8009344:	d1f1      	bne.n	800932a <arm_cfft_f32+0x3a>
 8009346:	4621      	mov	r1, r4
 8009348:	4630      	mov	r0, r6
 800934a:	f7ff fca3 	bl	8008c94 <arm_cfft_radix8by2_f32>
 800934e:	f1b8 0f00 	cmp.w	r8, #0
 8009352:	d0ed      	beq.n	8009330 <arm_cfft_f32+0x40>
 8009354:	68b2      	ldr	r2, [r6, #8]
 8009356:	89b1      	ldrh	r1, [r6, #12]
 8009358:	4620      	mov	r0, r4
 800935a:	f7f6 ff49 	bl	80001f0 <arm_bitreversal_32>
 800935e:	2f01      	cmp	r7, #1
 8009360:	d1e8      	bne.n	8009334 <arm_cfft_f32+0x44>
 8009362:	ee07 5a90 	vmov	s15, r5
 8009366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800936a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800936e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009372:	2d00      	cmp	r5, #0
 8009374:	d0de      	beq.n	8009334 <arm_cfft_f32+0x44>
 8009376:	f104 0108 	add.w	r1, r4, #8
 800937a:	2300      	movs	r3, #0
 800937c:	3301      	adds	r3, #1
 800937e:	429d      	cmp	r5, r3
 8009380:	f101 0108 	add.w	r1, r1, #8
 8009384:	ed11 7a04 	vldr	s14, [r1, #-16]
 8009388:	ed51 7a03 	vldr	s15, [r1, #-12]
 800938c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009390:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009394:	ed01 7a04 	vstr	s14, [r1, #-16]
 8009398:	ed41 7a03 	vstr	s15, [r1, #-12]
 800939c:	d1ee      	bne.n	800937c <arm_cfft_f32+0x8c>
 800939e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093a2:	4621      	mov	r1, r4
 80093a4:	4630      	mov	r0, r6
 80093a6:	f7ff fd45 	bl	8008e34 <arm_cfft_radix8by4_f32>
 80093aa:	e7be      	b.n	800932a <arm_cfft_f32+0x3a>
 80093ac:	b1ad      	cbz	r5, 80093da <arm_cfft_f32+0xea>
 80093ae:	f101 030c 	add.w	r3, r1, #12
 80093b2:	2200      	movs	r2, #0
 80093b4:	ed53 7a02 	vldr	s15, [r3, #-8]
 80093b8:	3201      	adds	r2, #1
 80093ba:	eef1 7a67 	vneg.f32	s15, s15
 80093be:	4295      	cmp	r5, r2
 80093c0:	ed43 7a02 	vstr	s15, [r3, #-8]
 80093c4:	f103 0308 	add.w	r3, r3, #8
 80093c8:	d1f4      	bne.n	80093b4 <arm_cfft_f32+0xc4>
 80093ca:	e79a      	b.n	8009302 <arm_cfft_f32+0x12>
 80093cc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80093d0:	d0a5      	beq.n	800931e <arm_cfft_f32+0x2e>
 80093d2:	e7aa      	b.n	800932a <arm_cfft_f32+0x3a>
 80093d4:	2d10      	cmp	r5, #16
 80093d6:	d0b6      	beq.n	8009346 <arm_cfft_f32+0x56>
 80093d8:	e7a7      	b.n	800932a <arm_cfft_f32+0x3a>
 80093da:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80093de:	d894      	bhi.n	800930a <arm_cfft_f32+0x1a>
 80093e0:	e7aa      	b.n	8009338 <arm_cfft_f32+0x48>
 80093e2:	bf00      	nop

080093e4 <arm_cmplx_mag_f32>:
 80093e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80093ec:	b084      	sub	sp, #16
 80093ee:	d07f      	beq.n	80094f0 <arm_cmplx_mag_f32+0x10c>
 80093f0:	2700      	movs	r7, #0
 80093f2:	f100 0420 	add.w	r4, r0, #32
 80093f6:	f101 0510 	add.w	r5, r1, #16
 80093fa:	4646      	mov	r6, r8
 80093fc:	e05a      	b.n	80094b4 <arm_cmplx_mag_f32+0xd0>
 80093fe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8009402:	eeb4 0a40 	vcmp.f32	s0, s0
 8009406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800940a:	f040 80a4 	bne.w	8009556 <arm_cmplx_mag_f32+0x172>
 800940e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8009412:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8009416:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800941a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800941e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009422:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009426:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800942a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800942e:	f2c0 808f 	blt.w	8009550 <arm_cmplx_mag_f32+0x16c>
 8009432:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8009436:	eeb4 0a40 	vcmp.f32	s0, s0
 800943a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800943e:	f040 80af 	bne.w	80095a0 <arm_cmplx_mag_f32+0x1bc>
 8009442:	ed05 0a03 	vstr	s0, [r5, #-12]
 8009446:	ed54 7a04 	vldr	s15, [r4, #-16]
 800944a:	ed14 0a03 	vldr	s0, [r4, #-12]
 800944e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009452:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009456:	ee77 7a80 	vadd.f32	s15, s15, s0
 800945a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800945e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009462:	db72      	blt.n	800954a <arm_cmplx_mag_f32+0x166>
 8009464:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8009468:	eeb4 0a40 	vcmp.f32	s0, s0
 800946c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009470:	f040 808c 	bne.w	800958c <arm_cmplx_mag_f32+0x1a8>
 8009474:	ed05 0a02 	vstr	s0, [r5, #-8]
 8009478:	ed54 7a02 	vldr	s15, [r4, #-8]
 800947c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8009480:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009484:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009488:	ee77 7a80 	vadd.f32	s15, s15, s0
 800948c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009494:	db20      	blt.n	80094d8 <arm_cmplx_mag_f32+0xf4>
 8009496:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800949a:	eeb4 0a40 	vcmp.f32	s0, s0
 800949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a2:	d169      	bne.n	8009578 <arm_cmplx_mag_f32+0x194>
 80094a4:	3e01      	subs	r6, #1
 80094a6:	ed05 0a01 	vstr	s0, [r5, #-4]
 80094aa:	f104 0420 	add.w	r4, r4, #32
 80094ae:	f105 0510 	add.w	r5, r5, #16
 80094b2:	d019      	beq.n	80094e8 <arm_cmplx_mag_f32+0x104>
 80094b4:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80094b8:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80094bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80094c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80094c4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80094c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80094cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d0:	da95      	bge.n	80093fe <arm_cmplx_mag_f32+0x1a>
 80094d2:	f845 7c10 	str.w	r7, [r5, #-16]
 80094d6:	e79c      	b.n	8009412 <arm_cmplx_mag_f32+0x2e>
 80094d8:	3e01      	subs	r6, #1
 80094da:	f845 7c04 	str.w	r7, [r5, #-4]
 80094de:	f104 0420 	add.w	r4, r4, #32
 80094e2:	f105 0510 	add.w	r5, r5, #16
 80094e6:	d1e5      	bne.n	80094b4 <arm_cmplx_mag_f32+0xd0>
 80094e8:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80094ec:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80094f0:	f012 0503 	ands.w	r5, r2, #3
 80094f4:	d026      	beq.n	8009544 <arm_cmplx_mag_f32+0x160>
 80094f6:	2600      	movs	r6, #0
 80094f8:	f100 0408 	add.w	r4, r0, #8
 80094fc:	e00c      	b.n	8009518 <arm_cmplx_mag_f32+0x134>
 80094fe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8009502:	eeb4 0a40 	vcmp.f32	s0, s0
 8009506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950a:	d12e      	bne.n	800956a <arm_cmplx_mag_f32+0x186>
 800950c:	3d01      	subs	r5, #1
 800950e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8009512:	f104 0408 	add.w	r4, r4, #8
 8009516:	d015      	beq.n	8009544 <arm_cmplx_mag_f32+0x160>
 8009518:	ed54 7a02 	vldr	s15, [r4, #-8]
 800951c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8009520:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009524:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009528:	3104      	adds	r1, #4
 800952a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800952e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009536:	dae2      	bge.n	80094fe <arm_cmplx_mag_f32+0x11a>
 8009538:	3d01      	subs	r5, #1
 800953a:	f841 6c04 	str.w	r6, [r1, #-4]
 800953e:	f104 0408 	add.w	r4, r4, #8
 8009542:	d1e9      	bne.n	8009518 <arm_cmplx_mag_f32+0x134>
 8009544:	b004      	add	sp, #16
 8009546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800954a:	f845 7c08 	str.w	r7, [r5, #-8]
 800954e:	e793      	b.n	8009478 <arm_cmplx_mag_f32+0x94>
 8009550:	f845 7c0c 	str.w	r7, [r5, #-12]
 8009554:	e777      	b.n	8009446 <arm_cmplx_mag_f32+0x62>
 8009556:	eeb0 0a67 	vmov.f32	s0, s15
 800955a:	9203      	str	r2, [sp, #12]
 800955c:	9102      	str	r1, [sp, #8]
 800955e:	9001      	str	r0, [sp, #4]
 8009560:	f004 fc60 	bl	800de24 <sqrtf>
 8009564:	a801      	add	r0, sp, #4
 8009566:	c807      	ldmia	r0, {r0, r1, r2}
 8009568:	e751      	b.n	800940e <arm_cmplx_mag_f32+0x2a>
 800956a:	eeb0 0a67 	vmov.f32	s0, s15
 800956e:	9101      	str	r1, [sp, #4]
 8009570:	f004 fc58 	bl	800de24 <sqrtf>
 8009574:	9901      	ldr	r1, [sp, #4]
 8009576:	e7c9      	b.n	800950c <arm_cmplx_mag_f32+0x128>
 8009578:	eeb0 0a67 	vmov.f32	s0, s15
 800957c:	9203      	str	r2, [sp, #12]
 800957e:	9102      	str	r1, [sp, #8]
 8009580:	9001      	str	r0, [sp, #4]
 8009582:	f004 fc4f 	bl	800de24 <sqrtf>
 8009586:	a801      	add	r0, sp, #4
 8009588:	c807      	ldmia	r0, {r0, r1, r2}
 800958a:	e78b      	b.n	80094a4 <arm_cmplx_mag_f32+0xc0>
 800958c:	eeb0 0a67 	vmov.f32	s0, s15
 8009590:	9203      	str	r2, [sp, #12]
 8009592:	9102      	str	r1, [sp, #8]
 8009594:	9001      	str	r0, [sp, #4]
 8009596:	f004 fc45 	bl	800de24 <sqrtf>
 800959a:	a801      	add	r0, sp, #4
 800959c:	c807      	ldmia	r0, {r0, r1, r2}
 800959e:	e769      	b.n	8009474 <arm_cmplx_mag_f32+0x90>
 80095a0:	eeb0 0a67 	vmov.f32	s0, s15
 80095a4:	9203      	str	r2, [sp, #12]
 80095a6:	9102      	str	r1, [sp, #8]
 80095a8:	9001      	str	r0, [sp, #4]
 80095aa:	f004 fc3b 	bl	800de24 <sqrtf>
 80095ae:	a801      	add	r0, sp, #4
 80095b0:	c807      	ldmia	r0, {r0, r1, r2}
 80095b2:	e746      	b.n	8009442 <arm_cmplx_mag_f32+0x5e>

080095b4 <arm_radix8_butterfly_f32>:
 80095b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095b8:	ed2d 8b10 	vpush	{d8-d15}
 80095bc:	461c      	mov	r4, r3
 80095be:	b09d      	sub	sp, #116	; 0x74
 80095c0:	4603      	mov	r3, r0
 80095c2:	3304      	adds	r3, #4
 80095c4:	ed9f bac4 	vldr	s22, [pc, #784]	; 80098d8 <arm_radix8_butterfly_f32+0x324>
 80095c8:	9019      	str	r0, [sp, #100]	; 0x64
 80095ca:	921a      	str	r2, [sp, #104]	; 0x68
 80095cc:	468b      	mov	fp, r1
 80095ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80095d0:	468a      	mov	sl, r1
 80095d2:	46a1      	mov	r9, r4
 80095d4:	4607      	mov	r7, r0
 80095d6:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80095da:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80095de:	eb03 0508 	add.w	r5, r3, r8
 80095e2:	195c      	adds	r4, r3, r5
 80095e4:	00de      	lsls	r6, r3, #3
 80095e6:	191a      	adds	r2, r3, r4
 80095e8:	9600      	str	r6, [sp, #0]
 80095ea:	1898      	adds	r0, r3, r2
 80095ec:	4619      	mov	r1, r3
 80095ee:	9e00      	ldr	r6, [sp, #0]
 80095f0:	9311      	str	r3, [sp, #68]	; 0x44
 80095f2:	4401      	add	r1, r0
 80095f4:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80095f8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80095fc:	19be      	adds	r6, r7, r6
 80095fe:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8009602:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8009606:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800960a:	9f00      	ldr	r7, [sp, #0]
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	eb06 0e07 	add.w	lr, r6, r7
 8009612:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009614:	9302      	str	r3, [sp, #8]
 8009616:	3204      	adds	r2, #4
 8009618:	3104      	adds	r1, #4
 800961a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800961e:	f04f 0c00 	mov.w	ip, #0
 8009622:	edde 7a00 	vldr	s15, [lr]
 8009626:	edd6 6a00 	vldr	s13, [r6]
 800962a:	ed95 2a00 	vldr	s4, [r5]
 800962e:	ed17 aa01 	vldr	s20, [r7, #-4]
 8009632:	edd4 4a00 	vldr	s9, [r4]
 8009636:	ed90 5a00 	vldr	s10, [r0]
 800963a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800963e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8009642:	ee77 8a85 	vadd.f32	s17, s15, s10
 8009646:	ee76 3a87 	vadd.f32	s7, s13, s14
 800964a:	ee32 4a20 	vadd.f32	s8, s4, s1
 800964e:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8009652:	ee33 6a84 	vadd.f32	s12, s7, s8
 8009656:	ee73 5a28 	vadd.f32	s11, s6, s17
 800965a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800965e:	ee75 6a86 	vadd.f32	s13, s11, s12
 8009662:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8009666:	ed47 6a01 	vstr	s13, [r7, #-4]
 800966a:	edc4 5a00 	vstr	s11, [r4]
 800966e:	ed92 9a00 	vldr	s18, [r2]
 8009672:	ed95 1a01 	vldr	s2, [r5, #4]
 8009676:	edd6 5a01 	vldr	s11, [r6, #4]
 800967a:	ed91 6a00 	vldr	s12, [r1]
 800967e:	edd7 2a00 	vldr	s5, [r7]
 8009682:	edd4 1a01 	vldr	s3, [r4, #4]
 8009686:	edde 6a01 	vldr	s13, [lr, #4]
 800968a:	edd0 9a01 	vldr	s19, [r0, #4]
 800968e:	ee72 0a60 	vsub.f32	s1, s4, s1
 8009692:	ee71 aa46 	vsub.f32	s21, s2, s12
 8009696:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800969a:	ee37 0a60 	vsub.f32	s0, s14, s1
 800969e:	ee32 8a2a 	vadd.f32	s16, s4, s21
 80096a2:	ee37 7a20 	vadd.f32	s14, s14, s1
 80096a6:	ee32 2a6a 	vsub.f32	s4, s4, s21
 80096aa:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80096ae:	ee75 5a89 	vadd.f32	s11, s11, s18
 80096b2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80096b6:	ee7a 4a64 	vsub.f32	s9, s20, s9
 80096ba:	ee31 6a06 	vadd.f32	s12, s2, s12
 80096be:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80096c2:	ee32 1aa1 	vadd.f32	s2, s5, s3
 80096c6:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80096ca:	ee72 1ae1 	vsub.f32	s3, s5, s3
 80096ce:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80096d2:	ee62 2a0b 	vmul.f32	s5, s4, s22
 80096d6:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80096da:	ee33 3a68 	vsub.f32	s6, s6, s17
 80096de:	ee36 0a88 	vadd.f32	s0, s13, s16
 80096e2:	ee75 8a86 	vadd.f32	s17, s11, s12
 80096e6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80096ea:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80096ee:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80096f2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80096f6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80096fa:	ee75 4a27 	vadd.f32	s9, s10, s15
 80096fe:	ee71 5a49 	vsub.f32	s11, s2, s18
 8009702:	ee31 2a09 	vadd.f32	s4, s2, s18
 8009706:	ee75 7a67 	vsub.f32	s15, s10, s15
 800970a:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800970e:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8009712:	ee73 0a06 	vadd.f32	s1, s6, s12
 8009716:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800971a:	ee36 5a87 	vadd.f32	s10, s13, s14
 800971e:	ee32 8a28 	vadd.f32	s16, s4, s17
 8009722:	ee33 6a46 	vsub.f32	s12, s6, s12
 8009726:	ee34 4a25 	vadd.f32	s8, s8, s11
 800972a:	ee33 3a80 	vadd.f32	s6, s7, s0
 800972e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009732:	ee71 5a64 	vsub.f32	s11, s2, s9
 8009736:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800973a:	ee32 2a68 	vsub.f32	s4, s4, s17
 800973e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8009742:	ee74 4a81 	vadd.f32	s9, s9, s2
 8009746:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800974a:	44dc      	add	ip, fp
 800974c:	45e2      	cmp	sl, ip
 800974e:	ed87 8a00 	vstr	s16, [r7]
 8009752:	ed84 2a01 	vstr	s4, [r4, #4]
 8009756:	441f      	add	r7, r3
 8009758:	edce 0a00 	vstr	s1, [lr]
 800975c:	441c      	add	r4, r3
 800975e:	ed80 6a00 	vstr	s12, [r0]
 8009762:	edce 1a01 	vstr	s3, [lr, #4]
 8009766:	ed80 4a01 	vstr	s8, [r0, #4]
 800976a:	449e      	add	lr, r3
 800976c:	ed86 3a00 	vstr	s6, [r6]
 8009770:	4418      	add	r0, r3
 8009772:	ed41 3a01 	vstr	s7, [r1, #-4]
 8009776:	ed02 5a01 	vstr	s10, [r2, #-4]
 800977a:	ed85 7a00 	vstr	s14, [r5]
 800977e:	edc6 5a01 	vstr	s11, [r6, #4]
 8009782:	edc1 4a00 	vstr	s9, [r1]
 8009786:	441e      	add	r6, r3
 8009788:	edc2 6a00 	vstr	s13, [r2]
 800978c:	4419      	add	r1, r3
 800978e:	edc5 7a01 	vstr	s15, [r5, #4]
 8009792:	441a      	add	r2, r3
 8009794:	441d      	add	r5, r3
 8009796:	f63f af44 	bhi.w	8009622 <arm_radix8_butterfly_f32+0x6e>
 800979a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800979c:	2a07      	cmp	r2, #7
 800979e:	f240 81f5 	bls.w	8009b8c <arm_radix8_butterfly_f32+0x5d8>
 80097a2:	f108 0101 	add.w	r1, r8, #1
 80097a6:	188f      	adds	r7, r1, r2
 80097a8:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 80097ac:	19d6      	adds	r6, r2, r7
 80097ae:	eb08 0c09 	add.w	ip, r8, r9
 80097b2:	1994      	adds	r4, r2, r6
 80097b4:	eb0c 0e09 	add.w	lr, ip, r9
 80097b8:	4610      	mov	r0, r2
 80097ba:	9701      	str	r7, [sp, #4]
 80097bc:	4420      	add	r0, r4
 80097be:	eb0e 0709 	add.w	r7, lr, r9
 80097c2:	1815      	adds	r5, r2, r0
 80097c4:	eb07 0209 	add.w	r2, r7, r9
 80097c8:	9203      	str	r2, [sp, #12]
 80097ca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80097cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097d0:	9117      	str	r1, [sp, #92]	; 0x5c
 80097d2:	440a      	add	r2, r1
 80097d4:	9900      	ldr	r1, [sp, #0]
 80097d6:	3108      	adds	r1, #8
 80097d8:	9100      	str	r1, [sp, #0]
 80097da:	9902      	ldr	r1, [sp, #8]
 80097dc:	3108      	adds	r1, #8
 80097de:	9102      	str	r1, [sp, #8]
 80097e0:	9919      	ldr	r1, [sp, #100]	; 0x64
 80097e2:	00ff      	lsls	r7, r7, #3
 80097e4:	9715      	str	r7, [sp, #84]	; 0x54
 80097e6:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80097ea:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80097ee:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80097f2:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80097f4:	9903      	ldr	r1, [sp, #12]
 80097f6:	19d7      	adds	r7, r2, r7
 80097f8:	00c9      	lsls	r1, r1, #3
 80097fa:	9114      	str	r1, [sp, #80]	; 0x50
 80097fc:	9710      	str	r7, [sp, #64]	; 0x40
 80097fe:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009800:	9f00      	ldr	r7, [sp, #0]
 8009802:	19cf      	adds	r7, r1, r7
 8009804:	970d      	str	r7, [sp, #52]	; 0x34
 8009806:	9f02      	ldr	r7, [sp, #8]
 8009808:	19cf      	adds	r7, r1, r7
 800980a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800980e:	970c      	str	r7, [sp, #48]	; 0x30
 8009810:	9f01      	ldr	r7, [sp, #4]
 8009812:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8009816:	3504      	adds	r5, #4
 8009818:	3004      	adds	r0, #4
 800981a:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800981e:	9508      	str	r5, [sp, #32]
 8009820:	9009      	str	r0, [sp, #36]	; 0x24
 8009822:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8009824:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009826:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800982a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800982e:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8009832:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009834:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8009838:	1945      	adds	r5, r0, r5
 800983a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800983e:	460f      	mov	r7, r1
 8009840:	3404      	adds	r4, #4
 8009842:	4641      	mov	r1, r8
 8009844:	1841      	adds	r1, r0, r1
 8009846:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800984a:	940a      	str	r4, [sp, #40]	; 0x28
 800984c:	eb00 0c06 	add.w	ip, r0, r6
 8009850:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009854:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009856:	9506      	str	r5, [sp, #24]
 8009858:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800985a:	9105      	str	r1, [sp, #20]
 800985c:	4639      	mov	r1, r7
 800985e:	1905      	adds	r5, r0, r4
 8009860:	3108      	adds	r1, #8
 8009862:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009864:	9507      	str	r5, [sp, #28]
 8009866:	910f      	str	r1, [sp, #60]	; 0x3c
 8009868:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800986c:	2101      	movs	r1, #1
 800986e:	eb00 0e06 	add.w	lr, r0, r6
 8009872:	9518      	str	r5, [sp, #96]	; 0x60
 8009874:	9404      	str	r4, [sp, #16]
 8009876:	9103      	str	r1, [sp, #12]
 8009878:	4620      	mov	r0, r4
 800987a:	4689      	mov	r9, r1
 800987c:	9e06      	ldr	r6, [sp, #24]
 800987e:	ed90 fa00 	vldr	s30, [r0]
 8009882:	edd6 7a01 	vldr	s15, [r6, #4]
 8009886:	edd0 ba01 	vldr	s23, [r0, #4]
 800988a:	edcd 7a00 	vstr	s15, [sp]
 800988e:	a80d      	add	r0, sp, #52	; 0x34
 8009890:	edde 7a01 	vldr	s15, [lr, #4]
 8009894:	9c05      	ldr	r4, [sp, #20]
 8009896:	9d07      	ldr	r5, [sp, #28]
 8009898:	edd2 fa00 	vldr	s31, [r2]
 800989c:	ed92 ca01 	vldr	s24, [r2, #4]
 80098a0:	edcd 7a01 	vstr	s15, [sp, #4]
 80098a4:	c807      	ldmia	r0, {r0, r1, r2}
 80098a6:	eddc 7a01 	vldr	s15, [ip, #4]
 80098aa:	edd4 ea00 	vldr	s29, [r4]
 80098ae:	ed95 ea00 	vldr	s28, [r5]
 80098b2:	edd6 da00 	vldr	s27, [r6]
 80098b6:	edd4 aa01 	vldr	s21, [r4, #4]
 80098ba:	ed95 aa01 	vldr	s20, [r5, #4]
 80098be:	ed9e da00 	vldr	s26, [lr]
 80098c2:	eddc ca00 	vldr	s25, [ip]
 80098c6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80098cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80098ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80098d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80098d2:	edcd 7a02 	vstr	s15, [sp, #8]
 80098d6:	e001      	b.n	80098dc <arm_radix8_butterfly_f32+0x328>
 80098d8:	3f3504f3 	.word	0x3f3504f3
 80098dc:	ed16 6a01 	vldr	s12, [r6, #-4]
 80098e0:	ed91 5a00 	vldr	s10, [r1]
 80098e4:	ed57 9a01 	vldr	s19, [r7, #-4]
 80098e8:	edd5 7a00 	vldr	s15, [r5]
 80098ec:	ed18 7a01 	vldr	s14, [r8, #-4]
 80098f0:	edd2 3a00 	vldr	s7, [r2]
 80098f4:	ed94 3a00 	vldr	s6, [r4]
 80098f8:	ed90 2a00 	vldr	s4, [r0]
 80098fc:	ed92 0a01 	vldr	s0, [r2, #4]
 8009900:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009904:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009908:	ee33 4a29 	vadd.f32	s8, s6, s19
 800990c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009910:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009914:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009918:	ee32 2a46 	vsub.f32	s4, s4, s12
 800991c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009920:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009924:	ed82 6a00 	vstr	s12, [r2]
 8009928:	edd5 8a01 	vldr	s17, [r5, #4]
 800992c:	ed90 9a01 	vldr	s18, [r0, #4]
 8009930:	edd6 2a00 	vldr	s5, [r6]
 8009934:	ed98 7a00 	vldr	s14, [r8]
 8009938:	edd4 0a01 	vldr	s1, [r4, #4]
 800993c:	ed91 6a01 	vldr	s12, [r1, #4]
 8009940:	edd7 5a00 	vldr	s11, [r7]
 8009944:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009948:	ee33 3a69 	vsub.f32	s6, s6, s19
 800994c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009950:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8009954:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009958:	ee38 7a87 	vadd.f32	s14, s17, s14
 800995c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009960:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009964:	ee75 8a69 	vsub.f32	s17, s10, s19
 8009968:	ee32 9a27 	vadd.f32	s18, s4, s15
 800996c:	ee35 5a29 	vadd.f32	s10, s10, s19
 8009970:	ee72 7a67 	vsub.f32	s15, s4, s15
 8009974:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009978:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800997c:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009980:	ee32 9a08 	vadd.f32	s18, s4, s16
 8009984:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009988:	ee32 2a48 	vsub.f32	s4, s4, s16
 800998c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009990:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009994:	ee32 1a87 	vadd.f32	s2, s5, s14
 8009998:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800999c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80099a0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80099a4:	ee73 0a29 	vadd.f32	s1, s6, s19
 80099a8:	ee36 0a28 	vadd.f32	s0, s12, s17
 80099ac:	ee33 3a69 	vsub.f32	s6, s6, s19
 80099b0:	ee32 7a64 	vsub.f32	s14, s4, s9
 80099b4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80099b8:	ee36 6a68 	vsub.f32	s12, s12, s17
 80099bc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80099c0:	ee75 8a85 	vadd.f32	s17, s11, s10
 80099c4:	ee74 3a22 	vadd.f32	s7, s8, s5
 80099c8:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80099cc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80099d0:	ee79 1a41 	vsub.f32	s3, s18, s2
 80099d4:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80099d8:	ee76 5a43 	vsub.f32	s11, s12, s6
 80099dc:	ee74 2a62 	vsub.f32	s5, s8, s5
 80099e0:	ee74 4a82 	vadd.f32	s9, s9, s4
 80099e4:	ee30 4a60 	vsub.f32	s8, s0, s1
 80099e8:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80099ec:	ee30 0a80 	vadd.f32	s0, s1, s0
 80099f0:	ee77 9a85 	vadd.f32	s19, s15, s10
 80099f4:	ee33 6a06 	vadd.f32	s12, s6, s12
 80099f8:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80099fc:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8009a00:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8009a04:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8009a08:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8009a0c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8009a10:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8009a14:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8009a18:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8009a1c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8009a20:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8009a24:	ee35 3a03 	vadd.f32	s6, s10, s6
 8009a28:	ee72 6a66 	vsub.f32	s13, s4, s13
 8009a2c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8009a30:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8009a34:	ed9d 4a02 	vldr	s8, [sp, #8]
 8009a38:	ed82 1a01 	vstr	s2, [r2, #4]
 8009a3c:	ee77 3a63 	vsub.f32	s7, s14, s7
 8009a40:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009a44:	ed9d 7a01 	vldr	s14, [sp, #4]
 8009a48:	ed81 3a00 	vstr	s6, [r1]
 8009a4c:	ee30 9a89 	vadd.f32	s18, s1, s18
 8009a50:	ee32 2a05 	vadd.f32	s4, s4, s10
 8009a54:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8009a58:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8009a5c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8009a60:	ee64 1a00 	vmul.f32	s3, s8, s0
 8009a64:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009a68:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8009a6c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8009a70:	ee64 8a28 	vmul.f32	s17, s8, s17
 8009a74:	ed9d 4a00 	vldr	s8, [sp]
 8009a78:	edc1 6a01 	vstr	s13, [r1, #4]
 8009a7c:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009a80:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8009a84:	ee64 9a29 	vmul.f32	s19, s8, s19
 8009a88:	ee24 4a25 	vmul.f32	s8, s8, s11
 8009a8c:	ee30 7a87 	vadd.f32	s14, s1, s14
 8009a90:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009a94:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8009a98:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8009a9c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8009aa0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8009aa4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8009aa8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8009aac:	ee75 1a21 	vadd.f32	s3, s10, s3
 8009ab0:	ee30 0a68 	vsub.f32	s0, s0, s17
 8009ab4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8009ab8:	ee70 0a84 	vadd.f32	s1, s1, s8
 8009abc:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009ac0:	44d9      	add	r9, fp
 8009ac2:	45ca      	cmp	sl, r9
 8009ac4:	ed84 9a00 	vstr	s18, [r4]
 8009ac8:	edc4 3a01 	vstr	s7, [r4, #4]
 8009acc:	441a      	add	r2, r3
 8009ace:	ed07 7a01 	vstr	s14, [r7, #-4]
 8009ad2:	edc7 2a00 	vstr	s5, [r7]
 8009ad6:	4419      	add	r1, r3
 8009ad8:	ed80 2a00 	vstr	s4, [r0]
 8009adc:	ed80 8a01 	vstr	s16, [r0, #4]
 8009ae0:	441c      	add	r4, r3
 8009ae2:	ed48 1a01 	vstr	s3, [r8, #-4]
 8009ae6:	ed88 0a00 	vstr	s0, [r8]
 8009aea:	441f      	add	r7, r3
 8009aec:	ed46 4a01 	vstr	s9, [r6, #-4]
 8009af0:	4418      	add	r0, r3
 8009af2:	edc6 9a00 	vstr	s19, [r6]
 8009af6:	4498      	add	r8, r3
 8009af8:	edc5 0a00 	vstr	s1, [r5]
 8009afc:	ed85 6a01 	vstr	s12, [r5, #4]
 8009b00:	441e      	add	r6, r3
 8009b02:	441d      	add	r5, r3
 8009b04:	f63f aeea 	bhi.w	80098dc <arm_radix8_butterfly_f32+0x328>
 8009b08:	9a03      	ldr	r2, [sp, #12]
 8009b0a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009b0c:	3201      	adds	r2, #1
 8009b0e:	4611      	mov	r1, r2
 8009b10:	9203      	str	r2, [sp, #12]
 8009b12:	9a04      	ldr	r2, [sp, #16]
 8009b14:	4402      	add	r2, r0
 8009b16:	9204      	str	r2, [sp, #16]
 8009b18:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009b1a:	9a05      	ldr	r2, [sp, #20]
 8009b1c:	4402      	add	r2, r0
 8009b1e:	9205      	str	r2, [sp, #20]
 8009b20:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	4402      	add	r2, r0
 8009b26:	9207      	str	r2, [sp, #28]
 8009b28:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009b2a:	9a06      	ldr	r2, [sp, #24]
 8009b2c:	4402      	add	r2, r0
 8009b2e:	9206      	str	r2, [sp, #24]
 8009b30:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009b32:	4496      	add	lr, r2
 8009b34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009b36:	4494      	add	ip, r2
 8009b38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b3a:	3208      	adds	r2, #8
 8009b3c:	920f      	str	r2, [sp, #60]	; 0x3c
 8009b3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b40:	3208      	adds	r2, #8
 8009b42:	920e      	str	r2, [sp, #56]	; 0x38
 8009b44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009b46:	3208      	adds	r2, #8
 8009b48:	920d      	str	r2, [sp, #52]	; 0x34
 8009b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b4c:	3208      	adds	r2, #8
 8009b4e:	920c      	str	r2, [sp, #48]	; 0x30
 8009b50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b52:	3208      	adds	r2, #8
 8009b54:	920b      	str	r2, [sp, #44]	; 0x2c
 8009b56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b58:	3208      	adds	r2, #8
 8009b5a:	920a      	str	r2, [sp, #40]	; 0x28
 8009b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b5e:	3208      	adds	r2, #8
 8009b60:	9209      	str	r2, [sp, #36]	; 0x24
 8009b62:	9a08      	ldr	r2, [sp, #32]
 8009b64:	3208      	adds	r2, #8
 8009b66:	9208      	str	r2, [sp, #32]
 8009b68:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009b6a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009b6c:	4288      	cmp	r0, r1
 8009b6e:	4622      	mov	r2, r4
 8009b70:	d007      	beq.n	8009b82 <arm_radix8_butterfly_f32+0x5ce>
 8009b72:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009b74:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4401      	add	r1, r0
 8009b7c:	9110      	str	r1, [sp, #64]	; 0x40
 8009b7e:	9804      	ldr	r0, [sp, #16]
 8009b80:	e67c      	b.n	800987c <arm_radix8_butterfly_f32+0x2c8>
 8009b82:	4683      	mov	fp, r0
 8009b84:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8009b88:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009b8a:	e524      	b.n	80095d6 <arm_radix8_butterfly_f32+0x22>
 8009b8c:	b01d      	add	sp, #116	; 0x74
 8009b8e:	ecbd 8b10 	vpop	{d8-d15}
 8009b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b96:	bf00      	nop

08009b98 <ctime>:
 8009b98:	b508      	push	{r3, lr}
 8009b9a:	f000 f831 	bl	8009c00 <localtime>
 8009b9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009ba2:	f001 b953 	b.w	800ae4c <asctime>

08009ba6 <difftime>:
 8009ba6:	1a80      	subs	r0, r0, r2
 8009ba8:	b508      	push	{r3, lr}
 8009baa:	eb61 0103 	sbc.w	r1, r1, r3
 8009bae:	f7f6 fd6f 	bl	8000690 <__aeabi_l2d>
 8009bb2:	ec41 0b10 	vmov	d0, r0, r1
 8009bb6:	bd08      	pop	{r3, pc}

08009bb8 <__libc_init_array>:
 8009bb8:	b570      	push	{r4, r5, r6, lr}
 8009bba:	4d0d      	ldr	r5, [pc, #52]	; (8009bf0 <__libc_init_array+0x38>)
 8009bbc:	4c0d      	ldr	r4, [pc, #52]	; (8009bf4 <__libc_init_array+0x3c>)
 8009bbe:	1b64      	subs	r4, r4, r5
 8009bc0:	10a4      	asrs	r4, r4, #2
 8009bc2:	2600      	movs	r6, #0
 8009bc4:	42a6      	cmp	r6, r4
 8009bc6:	d109      	bne.n	8009bdc <__libc_init_array+0x24>
 8009bc8:	4d0b      	ldr	r5, [pc, #44]	; (8009bf8 <__libc_init_array+0x40>)
 8009bca:	4c0c      	ldr	r4, [pc, #48]	; (8009bfc <__libc_init_array+0x44>)
 8009bcc:	f004 f9a4 	bl	800df18 <_init>
 8009bd0:	1b64      	subs	r4, r4, r5
 8009bd2:	10a4      	asrs	r4, r4, #2
 8009bd4:	2600      	movs	r6, #0
 8009bd6:	42a6      	cmp	r6, r4
 8009bd8:	d105      	bne.n	8009be6 <__libc_init_array+0x2e>
 8009bda:	bd70      	pop	{r4, r5, r6, pc}
 8009bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009be0:	4798      	blx	r3
 8009be2:	3601      	adds	r6, #1
 8009be4:	e7ee      	b.n	8009bc4 <__libc_init_array+0xc>
 8009be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bea:	4798      	blx	r3
 8009bec:	3601      	adds	r6, #1
 8009bee:	e7f2      	b.n	8009bd6 <__libc_init_array+0x1e>
 8009bf0:	080265ac 	.word	0x080265ac
 8009bf4:	080265ac 	.word	0x080265ac
 8009bf8:	080265ac 	.word	0x080265ac
 8009bfc:	080265b0 	.word	0x080265b0

08009c00 <localtime>:
 8009c00:	b538      	push	{r3, r4, r5, lr}
 8009c02:	4b0b      	ldr	r3, [pc, #44]	; (8009c30 <localtime+0x30>)
 8009c04:	681d      	ldr	r5, [r3, #0]
 8009c06:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8009c08:	4604      	mov	r4, r0
 8009c0a:	b953      	cbnz	r3, 8009c22 <localtime+0x22>
 8009c0c:	2024      	movs	r0, #36	; 0x24
 8009c0e:	f000 f909 	bl	8009e24 <malloc>
 8009c12:	4602      	mov	r2, r0
 8009c14:	63e8      	str	r0, [r5, #60]	; 0x3c
 8009c16:	b920      	cbnz	r0, 8009c22 <localtime+0x22>
 8009c18:	4b06      	ldr	r3, [pc, #24]	; (8009c34 <localtime+0x34>)
 8009c1a:	4807      	ldr	r0, [pc, #28]	; (8009c38 <localtime+0x38>)
 8009c1c:	2132      	movs	r1, #50	; 0x32
 8009c1e:	f001 f95d 	bl	800aedc <__assert_func>
 8009c22:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8009c24:	4620      	mov	r0, r4
 8009c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c2a:	f000 b807 	b.w	8009c3c <localtime_r>
 8009c2e:	bf00      	nop
 8009c30:	200000cc 	.word	0x200000cc
 8009c34:	08026004 	.word	0x08026004
 8009c38:	0802601b 	.word	0x0802601b

08009c3c <localtime_r>:
 8009c3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c40:	4680      	mov	r8, r0
 8009c42:	9101      	str	r1, [sp, #4]
 8009c44:	f002 f940 	bl	800bec8 <__gettzinfo>
 8009c48:	9901      	ldr	r1, [sp, #4]
 8009c4a:	4605      	mov	r5, r0
 8009c4c:	4640      	mov	r0, r8
 8009c4e:	f002 f93f 	bl	800bed0 <gmtime_r>
 8009c52:	6943      	ldr	r3, [r0, #20]
 8009c54:	0799      	lsls	r1, r3, #30
 8009c56:	4604      	mov	r4, r0
 8009c58:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8009c5c:	d105      	bne.n	8009c6a <localtime_r+0x2e>
 8009c5e:	2264      	movs	r2, #100	; 0x64
 8009c60:	fb97 f3f2 	sdiv	r3, r7, r2
 8009c64:	fb02 7313 	mls	r3, r2, r3, r7
 8009c68:	bb73      	cbnz	r3, 8009cc8 <localtime_r+0x8c>
 8009c6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009c6e:	fb97 f6f3 	sdiv	r6, r7, r3
 8009c72:	fb03 7616 	mls	r6, r3, r6, r7
 8009c76:	fab6 f386 	clz	r3, r6
 8009c7a:	095b      	lsrs	r3, r3, #5
 8009c7c:	4e67      	ldr	r6, [pc, #412]	; (8009e1c <localtime_r+0x1e0>)
 8009c7e:	2230      	movs	r2, #48	; 0x30
 8009c80:	fb02 6603 	mla	r6, r2, r3, r6
 8009c84:	f000 ff50 	bl	800ab28 <__tz_lock>
 8009c88:	f000 ff5a 	bl	800ab40 <_tzset_unlocked>
 8009c8c:	4b64      	ldr	r3, [pc, #400]	; (8009e20 <localtime_r+0x1e4>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	b34b      	cbz	r3, 8009ce6 <localtime_r+0xaa>
 8009c92:	686b      	ldr	r3, [r5, #4]
 8009c94:	42bb      	cmp	r3, r7
 8009c96:	d119      	bne.n	8009ccc <localtime_r+0x90>
 8009c98:	682f      	ldr	r7, [r5, #0]
 8009c9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009c9e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8009ca2:	b9df      	cbnz	r7, 8009cdc <localtime_r+0xa0>
 8009ca4:	4282      	cmp	r2, r0
 8009ca6:	eb73 0101 	sbcs.w	r1, r3, r1
 8009caa:	da23      	bge.n	8009cf4 <localtime_r+0xb8>
 8009cac:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009cb0:	4282      	cmp	r2, r0
 8009cb2:	eb73 0701 	sbcs.w	r7, r3, r1
 8009cb6:	bfb4      	ite	lt
 8009cb8:	2701      	movlt	r7, #1
 8009cba:	2700      	movge	r7, #0
 8009cbc:	4282      	cmp	r2, r0
 8009cbe:	418b      	sbcs	r3, r1
 8009cc0:	6227      	str	r7, [r4, #32]
 8009cc2:	db19      	blt.n	8009cf8 <localtime_r+0xbc>
 8009cc4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009cc6:	e018      	b.n	8009cfa <localtime_r+0xbe>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e7d7      	b.n	8009c7c <localtime_r+0x40>
 8009ccc:	4638      	mov	r0, r7
 8009cce:	f000 fe81 	bl	800a9d4 <__tzcalc_limits>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d1e0      	bne.n	8009c98 <localtime_r+0x5c>
 8009cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cda:	e004      	b.n	8009ce6 <localtime_r+0xaa>
 8009cdc:	4282      	cmp	r2, r0
 8009cde:	eb73 0101 	sbcs.w	r1, r3, r1
 8009ce2:	da02      	bge.n	8009cea <localtime_r+0xae>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	6223      	str	r3, [r4, #32]
 8009ce8:	e7ec      	b.n	8009cc4 <localtime_r+0x88>
 8009cea:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009cee:	4282      	cmp	r2, r0
 8009cf0:	418b      	sbcs	r3, r1
 8009cf2:	daf7      	bge.n	8009ce4 <localtime_r+0xa8>
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	6223      	str	r3, [r4, #32]
 8009cf8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009cfa:	6861      	ldr	r1, [r4, #4]
 8009cfc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8009d00:	203c      	movs	r0, #60	; 0x3c
 8009d02:	fb93 f5f2 	sdiv	r5, r3, r2
 8009d06:	fb02 3315 	mls	r3, r2, r5, r3
 8009d0a:	fb93 f2f0 	sdiv	r2, r3, r0
 8009d0e:	fb00 3012 	mls	r0, r0, r2, r3
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	1a89      	subs	r1, r1, r2
 8009d16:	68a2      	ldr	r2, [r4, #8]
 8009d18:	6061      	str	r1, [r4, #4]
 8009d1a:	1a1b      	subs	r3, r3, r0
 8009d1c:	1b52      	subs	r2, r2, r5
 8009d1e:	2b3b      	cmp	r3, #59	; 0x3b
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	60a2      	str	r2, [r4, #8]
 8009d24:	dd35      	ble.n	8009d92 <localtime_r+0x156>
 8009d26:	3101      	adds	r1, #1
 8009d28:	6061      	str	r1, [r4, #4]
 8009d2a:	3b3c      	subs	r3, #60	; 0x3c
 8009d2c:	6023      	str	r3, [r4, #0]
 8009d2e:	6863      	ldr	r3, [r4, #4]
 8009d30:	2b3b      	cmp	r3, #59	; 0x3b
 8009d32:	dd34      	ble.n	8009d9e <localtime_r+0x162>
 8009d34:	3201      	adds	r2, #1
 8009d36:	60a2      	str	r2, [r4, #8]
 8009d38:	3b3c      	subs	r3, #60	; 0x3c
 8009d3a:	6063      	str	r3, [r4, #4]
 8009d3c:	68a3      	ldr	r3, [r4, #8]
 8009d3e:	2b17      	cmp	r3, #23
 8009d40:	dd33      	ble.n	8009daa <localtime_r+0x16e>
 8009d42:	69e2      	ldr	r2, [r4, #28]
 8009d44:	3201      	adds	r2, #1
 8009d46:	61e2      	str	r2, [r4, #28]
 8009d48:	69a2      	ldr	r2, [r4, #24]
 8009d4a:	3201      	adds	r2, #1
 8009d4c:	2a06      	cmp	r2, #6
 8009d4e:	bfc8      	it	gt
 8009d50:	2200      	movgt	r2, #0
 8009d52:	61a2      	str	r2, [r4, #24]
 8009d54:	68e2      	ldr	r2, [r4, #12]
 8009d56:	3b18      	subs	r3, #24
 8009d58:	3201      	adds	r2, #1
 8009d5a:	60a3      	str	r3, [r4, #8]
 8009d5c:	6923      	ldr	r3, [r4, #16]
 8009d5e:	60e2      	str	r2, [r4, #12]
 8009d60:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8009d64:	428a      	cmp	r2, r1
 8009d66:	dd0e      	ble.n	8009d86 <localtime_r+0x14a>
 8009d68:	2b0b      	cmp	r3, #11
 8009d6a:	eba2 0201 	sub.w	r2, r2, r1
 8009d6e:	60e2      	str	r2, [r4, #12]
 8009d70:	f103 0201 	add.w	r2, r3, #1
 8009d74:	bf09      	itett	eq
 8009d76:	6963      	ldreq	r3, [r4, #20]
 8009d78:	6122      	strne	r2, [r4, #16]
 8009d7a:	2200      	moveq	r2, #0
 8009d7c:	3301      	addeq	r3, #1
 8009d7e:	bf02      	ittt	eq
 8009d80:	6122      	streq	r2, [r4, #16]
 8009d82:	6163      	streq	r3, [r4, #20]
 8009d84:	61e2      	streq	r2, [r4, #28]
 8009d86:	f000 fed5 	bl	800ab34 <__tz_unlock>
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	b002      	add	sp, #8
 8009d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dacb      	bge.n	8009d2e <localtime_r+0xf2>
 8009d96:	3901      	subs	r1, #1
 8009d98:	6061      	str	r1, [r4, #4]
 8009d9a:	333c      	adds	r3, #60	; 0x3c
 8009d9c:	e7c6      	b.n	8009d2c <localtime_r+0xf0>
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	dacc      	bge.n	8009d3c <localtime_r+0x100>
 8009da2:	3a01      	subs	r2, #1
 8009da4:	60a2      	str	r2, [r4, #8]
 8009da6:	333c      	adds	r3, #60	; 0x3c
 8009da8:	e7c7      	b.n	8009d3a <localtime_r+0xfe>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	daeb      	bge.n	8009d86 <localtime_r+0x14a>
 8009dae:	69e2      	ldr	r2, [r4, #28]
 8009db0:	3a01      	subs	r2, #1
 8009db2:	61e2      	str	r2, [r4, #28]
 8009db4:	69a2      	ldr	r2, [r4, #24]
 8009db6:	3a01      	subs	r2, #1
 8009db8:	bf48      	it	mi
 8009dba:	2206      	movmi	r2, #6
 8009dbc:	61a2      	str	r2, [r4, #24]
 8009dbe:	68e2      	ldr	r2, [r4, #12]
 8009dc0:	3318      	adds	r3, #24
 8009dc2:	3a01      	subs	r2, #1
 8009dc4:	60e2      	str	r2, [r4, #12]
 8009dc6:	60a3      	str	r3, [r4, #8]
 8009dc8:	2a00      	cmp	r2, #0
 8009dca:	d1dc      	bne.n	8009d86 <localtime_r+0x14a>
 8009dcc:	6923      	ldr	r3, [r4, #16]
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	d405      	bmi.n	8009dde <localtime_r+0x1a2>
 8009dd2:	6123      	str	r3, [r4, #16]
 8009dd4:	6923      	ldr	r3, [r4, #16]
 8009dd6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009dda:	60e3      	str	r3, [r4, #12]
 8009ddc:	e7d3      	b.n	8009d86 <localtime_r+0x14a>
 8009dde:	230b      	movs	r3, #11
 8009de0:	6123      	str	r3, [r4, #16]
 8009de2:	6963      	ldr	r3, [r4, #20]
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8009dea:	6162      	str	r2, [r4, #20]
 8009dec:	079a      	lsls	r2, r3, #30
 8009dee:	d105      	bne.n	8009dfc <localtime_r+0x1c0>
 8009df0:	2164      	movs	r1, #100	; 0x64
 8009df2:	fb93 f2f1 	sdiv	r2, r3, r1
 8009df6:	fb01 3212 	mls	r2, r1, r2, r3
 8009dfa:	b962      	cbnz	r2, 8009e16 <localtime_r+0x1da>
 8009dfc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009e00:	fb93 f1f2 	sdiv	r1, r3, r2
 8009e04:	fb02 3311 	mls	r3, r2, r1, r3
 8009e08:	fab3 f383 	clz	r3, r3
 8009e0c:	095b      	lsrs	r3, r3, #5
 8009e0e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8009e12:	61e3      	str	r3, [r4, #28]
 8009e14:	e7de      	b.n	8009dd4 <localtime_r+0x198>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e7f9      	b.n	8009e0e <localtime_r+0x1d2>
 8009e1a:	bf00      	nop
 8009e1c:	08026078 	.word	0x08026078
 8009e20:	20000b44 	.word	0x20000b44

08009e24 <malloc>:
 8009e24:	4b02      	ldr	r3, [pc, #8]	; (8009e30 <malloc+0xc>)
 8009e26:	4601      	mov	r1, r0
 8009e28:	6818      	ldr	r0, [r3, #0]
 8009e2a:	f000 b87f 	b.w	8009f2c <_malloc_r>
 8009e2e:	bf00      	nop
 8009e30:	200000cc 	.word	0x200000cc

08009e34 <free>:
 8009e34:	4b02      	ldr	r3, [pc, #8]	; (8009e40 <free+0xc>)
 8009e36:	4601      	mov	r1, r0
 8009e38:	6818      	ldr	r0, [r3, #0]
 8009e3a:	f000 b80b 	b.w	8009e54 <_free_r>
 8009e3e:	bf00      	nop
 8009e40:	200000cc 	.word	0x200000cc

08009e44 <memset>:
 8009e44:	4402      	add	r2, r0
 8009e46:	4603      	mov	r3, r0
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d100      	bne.n	8009e4e <memset+0xa>
 8009e4c:	4770      	bx	lr
 8009e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009e52:	e7f9      	b.n	8009e48 <memset+0x4>

08009e54 <_free_r>:
 8009e54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e56:	2900      	cmp	r1, #0
 8009e58:	d044      	beq.n	8009ee4 <_free_r+0x90>
 8009e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e5e:	9001      	str	r0, [sp, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f1a1 0404 	sub.w	r4, r1, #4
 8009e66:	bfb8      	it	lt
 8009e68:	18e4      	addlt	r4, r4, r3
 8009e6a:	f002 f8f5 	bl	800c058 <__malloc_lock>
 8009e6e:	4a1e      	ldr	r2, [pc, #120]	; (8009ee8 <_free_r+0x94>)
 8009e70:	9801      	ldr	r0, [sp, #4]
 8009e72:	6813      	ldr	r3, [r2, #0]
 8009e74:	b933      	cbnz	r3, 8009e84 <_free_r+0x30>
 8009e76:	6063      	str	r3, [r4, #4]
 8009e78:	6014      	str	r4, [r2, #0]
 8009e7a:	b003      	add	sp, #12
 8009e7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e80:	f002 b8f0 	b.w	800c064 <__malloc_unlock>
 8009e84:	42a3      	cmp	r3, r4
 8009e86:	d908      	bls.n	8009e9a <_free_r+0x46>
 8009e88:	6825      	ldr	r5, [r4, #0]
 8009e8a:	1961      	adds	r1, r4, r5
 8009e8c:	428b      	cmp	r3, r1
 8009e8e:	bf01      	itttt	eq
 8009e90:	6819      	ldreq	r1, [r3, #0]
 8009e92:	685b      	ldreq	r3, [r3, #4]
 8009e94:	1949      	addeq	r1, r1, r5
 8009e96:	6021      	streq	r1, [r4, #0]
 8009e98:	e7ed      	b.n	8009e76 <_free_r+0x22>
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	b10b      	cbz	r3, 8009ea4 <_free_r+0x50>
 8009ea0:	42a3      	cmp	r3, r4
 8009ea2:	d9fa      	bls.n	8009e9a <_free_r+0x46>
 8009ea4:	6811      	ldr	r1, [r2, #0]
 8009ea6:	1855      	adds	r5, r2, r1
 8009ea8:	42a5      	cmp	r5, r4
 8009eaa:	d10b      	bne.n	8009ec4 <_free_r+0x70>
 8009eac:	6824      	ldr	r4, [r4, #0]
 8009eae:	4421      	add	r1, r4
 8009eb0:	1854      	adds	r4, r2, r1
 8009eb2:	42a3      	cmp	r3, r4
 8009eb4:	6011      	str	r1, [r2, #0]
 8009eb6:	d1e0      	bne.n	8009e7a <_free_r+0x26>
 8009eb8:	681c      	ldr	r4, [r3, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	6053      	str	r3, [r2, #4]
 8009ebe:	4421      	add	r1, r4
 8009ec0:	6011      	str	r1, [r2, #0]
 8009ec2:	e7da      	b.n	8009e7a <_free_r+0x26>
 8009ec4:	d902      	bls.n	8009ecc <_free_r+0x78>
 8009ec6:	230c      	movs	r3, #12
 8009ec8:	6003      	str	r3, [r0, #0]
 8009eca:	e7d6      	b.n	8009e7a <_free_r+0x26>
 8009ecc:	6825      	ldr	r5, [r4, #0]
 8009ece:	1961      	adds	r1, r4, r5
 8009ed0:	428b      	cmp	r3, r1
 8009ed2:	bf04      	itt	eq
 8009ed4:	6819      	ldreq	r1, [r3, #0]
 8009ed6:	685b      	ldreq	r3, [r3, #4]
 8009ed8:	6063      	str	r3, [r4, #4]
 8009eda:	bf04      	itt	eq
 8009edc:	1949      	addeq	r1, r1, r5
 8009ede:	6021      	streq	r1, [r4, #0]
 8009ee0:	6054      	str	r4, [r2, #4]
 8009ee2:	e7ca      	b.n	8009e7a <_free_r+0x26>
 8009ee4:	b003      	add	sp, #12
 8009ee6:	bd30      	pop	{r4, r5, pc}
 8009ee8:	20000b20 	.word	0x20000b20

08009eec <sbrk_aligned>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	4e0e      	ldr	r6, [pc, #56]	; (8009f28 <sbrk_aligned+0x3c>)
 8009ef0:	460c      	mov	r4, r1
 8009ef2:	6831      	ldr	r1, [r6, #0]
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	b911      	cbnz	r1, 8009efe <sbrk_aligned+0x12>
 8009ef8:	f000 fd0e 	bl	800a918 <_sbrk_r>
 8009efc:	6030      	str	r0, [r6, #0]
 8009efe:	4621      	mov	r1, r4
 8009f00:	4628      	mov	r0, r5
 8009f02:	f000 fd09 	bl	800a918 <_sbrk_r>
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	d00a      	beq.n	8009f20 <sbrk_aligned+0x34>
 8009f0a:	1cc4      	adds	r4, r0, #3
 8009f0c:	f024 0403 	bic.w	r4, r4, #3
 8009f10:	42a0      	cmp	r0, r4
 8009f12:	d007      	beq.n	8009f24 <sbrk_aligned+0x38>
 8009f14:	1a21      	subs	r1, r4, r0
 8009f16:	4628      	mov	r0, r5
 8009f18:	f000 fcfe 	bl	800a918 <_sbrk_r>
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d101      	bne.n	8009f24 <sbrk_aligned+0x38>
 8009f20:	f04f 34ff 	mov.w	r4, #4294967295
 8009f24:	4620      	mov	r0, r4
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	20000b24 	.word	0x20000b24

08009f2c <_malloc_r>:
 8009f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f30:	1ccd      	adds	r5, r1, #3
 8009f32:	f025 0503 	bic.w	r5, r5, #3
 8009f36:	3508      	adds	r5, #8
 8009f38:	2d0c      	cmp	r5, #12
 8009f3a:	bf38      	it	cc
 8009f3c:	250c      	movcc	r5, #12
 8009f3e:	2d00      	cmp	r5, #0
 8009f40:	4607      	mov	r7, r0
 8009f42:	db01      	blt.n	8009f48 <_malloc_r+0x1c>
 8009f44:	42a9      	cmp	r1, r5
 8009f46:	d905      	bls.n	8009f54 <_malloc_r+0x28>
 8009f48:	230c      	movs	r3, #12
 8009f4a:	603b      	str	r3, [r7, #0]
 8009f4c:	2600      	movs	r6, #0
 8009f4e:	4630      	mov	r0, r6
 8009f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f54:	4e2e      	ldr	r6, [pc, #184]	; (800a010 <_malloc_r+0xe4>)
 8009f56:	f002 f87f 	bl	800c058 <__malloc_lock>
 8009f5a:	6833      	ldr	r3, [r6, #0]
 8009f5c:	461c      	mov	r4, r3
 8009f5e:	bb34      	cbnz	r4, 8009fae <_malloc_r+0x82>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4638      	mov	r0, r7
 8009f64:	f7ff ffc2 	bl	8009eec <sbrk_aligned>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	d14d      	bne.n	800a00a <_malloc_r+0xde>
 8009f6e:	6834      	ldr	r4, [r6, #0]
 8009f70:	4626      	mov	r6, r4
 8009f72:	2e00      	cmp	r6, #0
 8009f74:	d140      	bne.n	8009ff8 <_malloc_r+0xcc>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	eb04 0803 	add.w	r8, r4, r3
 8009f80:	f000 fcca 	bl	800a918 <_sbrk_r>
 8009f84:	4580      	cmp	r8, r0
 8009f86:	d13a      	bne.n	8009ffe <_malloc_r+0xd2>
 8009f88:	6821      	ldr	r1, [r4, #0]
 8009f8a:	3503      	adds	r5, #3
 8009f8c:	1a6d      	subs	r5, r5, r1
 8009f8e:	f025 0503 	bic.w	r5, r5, #3
 8009f92:	3508      	adds	r5, #8
 8009f94:	2d0c      	cmp	r5, #12
 8009f96:	bf38      	it	cc
 8009f98:	250c      	movcc	r5, #12
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f7ff ffa5 	bl	8009eec <sbrk_aligned>
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	d02b      	beq.n	8009ffe <_malloc_r+0xd2>
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	442b      	add	r3, r5
 8009faa:	6023      	str	r3, [r4, #0]
 8009fac:	e00e      	b.n	8009fcc <_malloc_r+0xa0>
 8009fae:	6822      	ldr	r2, [r4, #0]
 8009fb0:	1b52      	subs	r2, r2, r5
 8009fb2:	d41e      	bmi.n	8009ff2 <_malloc_r+0xc6>
 8009fb4:	2a0b      	cmp	r2, #11
 8009fb6:	d916      	bls.n	8009fe6 <_malloc_r+0xba>
 8009fb8:	1961      	adds	r1, r4, r5
 8009fba:	42a3      	cmp	r3, r4
 8009fbc:	6025      	str	r5, [r4, #0]
 8009fbe:	bf18      	it	ne
 8009fc0:	6059      	strne	r1, [r3, #4]
 8009fc2:	6863      	ldr	r3, [r4, #4]
 8009fc4:	bf08      	it	eq
 8009fc6:	6031      	streq	r1, [r6, #0]
 8009fc8:	5162      	str	r2, [r4, r5]
 8009fca:	604b      	str	r3, [r1, #4]
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f104 060b 	add.w	r6, r4, #11
 8009fd2:	f002 f847 	bl	800c064 <__malloc_unlock>
 8009fd6:	f026 0607 	bic.w	r6, r6, #7
 8009fda:	1d23      	adds	r3, r4, #4
 8009fdc:	1af2      	subs	r2, r6, r3
 8009fde:	d0b6      	beq.n	8009f4e <_malloc_r+0x22>
 8009fe0:	1b9b      	subs	r3, r3, r6
 8009fe2:	50a3      	str	r3, [r4, r2]
 8009fe4:	e7b3      	b.n	8009f4e <_malloc_r+0x22>
 8009fe6:	6862      	ldr	r2, [r4, #4]
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	bf0c      	ite	eq
 8009fec:	6032      	streq	r2, [r6, #0]
 8009fee:	605a      	strne	r2, [r3, #4]
 8009ff0:	e7ec      	b.n	8009fcc <_malloc_r+0xa0>
 8009ff2:	4623      	mov	r3, r4
 8009ff4:	6864      	ldr	r4, [r4, #4]
 8009ff6:	e7b2      	b.n	8009f5e <_malloc_r+0x32>
 8009ff8:	4634      	mov	r4, r6
 8009ffa:	6876      	ldr	r6, [r6, #4]
 8009ffc:	e7b9      	b.n	8009f72 <_malloc_r+0x46>
 8009ffe:	230c      	movs	r3, #12
 800a000:	603b      	str	r3, [r7, #0]
 800a002:	4638      	mov	r0, r7
 800a004:	f002 f82e 	bl	800c064 <__malloc_unlock>
 800a008:	e7a1      	b.n	8009f4e <_malloc_r+0x22>
 800a00a:	6025      	str	r5, [r4, #0]
 800a00c:	e7de      	b.n	8009fcc <_malloc_r+0xa0>
 800a00e:	bf00      	nop
 800a010:	20000b20 	.word	0x20000b20

0800a014 <__cvt>:
 800a014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	ec55 4b10 	vmov	r4, r5, d0
 800a01c:	2d00      	cmp	r5, #0
 800a01e:	460e      	mov	r6, r1
 800a020:	4619      	mov	r1, r3
 800a022:	462b      	mov	r3, r5
 800a024:	bfbb      	ittet	lt
 800a026:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a02a:	461d      	movlt	r5, r3
 800a02c:	2300      	movge	r3, #0
 800a02e:	232d      	movlt	r3, #45	; 0x2d
 800a030:	700b      	strb	r3, [r1, #0]
 800a032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a034:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a038:	4691      	mov	r9, r2
 800a03a:	f023 0820 	bic.w	r8, r3, #32
 800a03e:	bfbc      	itt	lt
 800a040:	4622      	movlt	r2, r4
 800a042:	4614      	movlt	r4, r2
 800a044:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a048:	d005      	beq.n	800a056 <__cvt+0x42>
 800a04a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a04e:	d100      	bne.n	800a052 <__cvt+0x3e>
 800a050:	3601      	adds	r6, #1
 800a052:	2102      	movs	r1, #2
 800a054:	e000      	b.n	800a058 <__cvt+0x44>
 800a056:	2103      	movs	r1, #3
 800a058:	ab03      	add	r3, sp, #12
 800a05a:	9301      	str	r3, [sp, #4]
 800a05c:	ab02      	add	r3, sp, #8
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	ec45 4b10 	vmov	d0, r4, r5
 800a064:	4653      	mov	r3, sl
 800a066:	4632      	mov	r2, r6
 800a068:	f000 ffe2 	bl	800b030 <_dtoa_r>
 800a06c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a070:	4607      	mov	r7, r0
 800a072:	d102      	bne.n	800a07a <__cvt+0x66>
 800a074:	f019 0f01 	tst.w	r9, #1
 800a078:	d022      	beq.n	800a0c0 <__cvt+0xac>
 800a07a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a07e:	eb07 0906 	add.w	r9, r7, r6
 800a082:	d110      	bne.n	800a0a6 <__cvt+0x92>
 800a084:	783b      	ldrb	r3, [r7, #0]
 800a086:	2b30      	cmp	r3, #48	; 0x30
 800a088:	d10a      	bne.n	800a0a0 <__cvt+0x8c>
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	4620      	mov	r0, r4
 800a090:	4629      	mov	r1, r5
 800a092:	f7f6 fd93 	bl	8000bbc <__aeabi_dcmpeq>
 800a096:	b918      	cbnz	r0, 800a0a0 <__cvt+0x8c>
 800a098:	f1c6 0601 	rsb	r6, r6, #1
 800a09c:	f8ca 6000 	str.w	r6, [sl]
 800a0a0:	f8da 3000 	ldr.w	r3, [sl]
 800a0a4:	4499      	add	r9, r3
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	f7f6 fd85 	bl	8000bbc <__aeabi_dcmpeq>
 800a0b2:	b108      	cbz	r0, 800a0b8 <__cvt+0xa4>
 800a0b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a0b8:	2230      	movs	r2, #48	; 0x30
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	454b      	cmp	r3, r9
 800a0be:	d307      	bcc.n	800a0d0 <__cvt+0xbc>
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0c4:	1bdb      	subs	r3, r3, r7
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	b004      	add	sp, #16
 800a0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d0:	1c59      	adds	r1, r3, #1
 800a0d2:	9103      	str	r1, [sp, #12]
 800a0d4:	701a      	strb	r2, [r3, #0]
 800a0d6:	e7f0      	b.n	800a0ba <__cvt+0xa6>

0800a0d8 <__exponent>:
 800a0d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2900      	cmp	r1, #0
 800a0de:	bfb8      	it	lt
 800a0e0:	4249      	neglt	r1, r1
 800a0e2:	f803 2b02 	strb.w	r2, [r3], #2
 800a0e6:	bfb4      	ite	lt
 800a0e8:	222d      	movlt	r2, #45	; 0x2d
 800a0ea:	222b      	movge	r2, #43	; 0x2b
 800a0ec:	2909      	cmp	r1, #9
 800a0ee:	7042      	strb	r2, [r0, #1]
 800a0f0:	dd2a      	ble.n	800a148 <__exponent+0x70>
 800a0f2:	f10d 0407 	add.w	r4, sp, #7
 800a0f6:	46a4      	mov	ip, r4
 800a0f8:	270a      	movs	r7, #10
 800a0fa:	46a6      	mov	lr, r4
 800a0fc:	460a      	mov	r2, r1
 800a0fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800a102:	fb07 1516 	mls	r5, r7, r6, r1
 800a106:	3530      	adds	r5, #48	; 0x30
 800a108:	2a63      	cmp	r2, #99	; 0x63
 800a10a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a10e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a112:	4631      	mov	r1, r6
 800a114:	dcf1      	bgt.n	800a0fa <__exponent+0x22>
 800a116:	3130      	adds	r1, #48	; 0x30
 800a118:	f1ae 0502 	sub.w	r5, lr, #2
 800a11c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a120:	1c44      	adds	r4, r0, #1
 800a122:	4629      	mov	r1, r5
 800a124:	4561      	cmp	r1, ip
 800a126:	d30a      	bcc.n	800a13e <__exponent+0x66>
 800a128:	f10d 0209 	add.w	r2, sp, #9
 800a12c:	eba2 020e 	sub.w	r2, r2, lr
 800a130:	4565      	cmp	r5, ip
 800a132:	bf88      	it	hi
 800a134:	2200      	movhi	r2, #0
 800a136:	4413      	add	r3, r2
 800a138:	1a18      	subs	r0, r3, r0
 800a13a:	b003      	add	sp, #12
 800a13c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a13e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a142:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a146:	e7ed      	b.n	800a124 <__exponent+0x4c>
 800a148:	2330      	movs	r3, #48	; 0x30
 800a14a:	3130      	adds	r1, #48	; 0x30
 800a14c:	7083      	strb	r3, [r0, #2]
 800a14e:	70c1      	strb	r1, [r0, #3]
 800a150:	1d03      	adds	r3, r0, #4
 800a152:	e7f1      	b.n	800a138 <__exponent+0x60>

0800a154 <_printf_float>:
 800a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	ed2d 8b02 	vpush	{d8}
 800a15c:	b08d      	sub	sp, #52	; 0x34
 800a15e:	460c      	mov	r4, r1
 800a160:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a164:	4616      	mov	r6, r2
 800a166:	461f      	mov	r7, r3
 800a168:	4605      	mov	r5, r0
 800a16a:	f001 ff5d 	bl	800c028 <_localeconv_r>
 800a16e:	f8d0 a000 	ldr.w	sl, [r0]
 800a172:	4650      	mov	r0, sl
 800a174:	f7f6 f89c 	bl	80002b0 <strlen>
 800a178:	2300      	movs	r3, #0
 800a17a:	930a      	str	r3, [sp, #40]	; 0x28
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	9305      	str	r3, [sp, #20]
 800a180:	f8d8 3000 	ldr.w	r3, [r8]
 800a184:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a188:	3307      	adds	r3, #7
 800a18a:	f023 0307 	bic.w	r3, r3, #7
 800a18e:	f103 0208 	add.w	r2, r3, #8
 800a192:	f8c8 2000 	str.w	r2, [r8]
 800a196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a19e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a1a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1a6:	9307      	str	r3, [sp, #28]
 800a1a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a1ac:	ee08 0a10 	vmov	s16, r0
 800a1b0:	4b9f      	ldr	r3, [pc, #636]	; (800a430 <_printf_float+0x2dc>)
 800a1b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ba:	f7f6 fd31 	bl	8000c20 <__aeabi_dcmpun>
 800a1be:	bb88      	cbnz	r0, 800a224 <_printf_float+0xd0>
 800a1c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a1c4:	4b9a      	ldr	r3, [pc, #616]	; (800a430 <_printf_float+0x2dc>)
 800a1c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ca:	f7f6 fd0b 	bl	8000be4 <__aeabi_dcmple>
 800a1ce:	bb48      	cbnz	r0, 800a224 <_printf_float+0xd0>
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	f7f6 fcfa 	bl	8000bd0 <__aeabi_dcmplt>
 800a1dc:	b110      	cbz	r0, 800a1e4 <_printf_float+0x90>
 800a1de:	232d      	movs	r3, #45	; 0x2d
 800a1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1e4:	4b93      	ldr	r3, [pc, #588]	; (800a434 <_printf_float+0x2e0>)
 800a1e6:	4894      	ldr	r0, [pc, #592]	; (800a438 <_printf_float+0x2e4>)
 800a1e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a1ec:	bf94      	ite	ls
 800a1ee:	4698      	movls	r8, r3
 800a1f0:	4680      	movhi	r8, r0
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	6123      	str	r3, [r4, #16]
 800a1f6:	9b05      	ldr	r3, [sp, #20]
 800a1f8:	f023 0204 	bic.w	r2, r3, #4
 800a1fc:	6022      	str	r2, [r4, #0]
 800a1fe:	f04f 0900 	mov.w	r9, #0
 800a202:	9700      	str	r7, [sp, #0]
 800a204:	4633      	mov	r3, r6
 800a206:	aa0b      	add	r2, sp, #44	; 0x2c
 800a208:	4621      	mov	r1, r4
 800a20a:	4628      	mov	r0, r5
 800a20c:	f000 f9d8 	bl	800a5c0 <_printf_common>
 800a210:	3001      	adds	r0, #1
 800a212:	f040 8090 	bne.w	800a336 <_printf_float+0x1e2>
 800a216:	f04f 30ff 	mov.w	r0, #4294967295
 800a21a:	b00d      	add	sp, #52	; 0x34
 800a21c:	ecbd 8b02 	vpop	{d8}
 800a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a224:	4642      	mov	r2, r8
 800a226:	464b      	mov	r3, r9
 800a228:	4640      	mov	r0, r8
 800a22a:	4649      	mov	r1, r9
 800a22c:	f7f6 fcf8 	bl	8000c20 <__aeabi_dcmpun>
 800a230:	b140      	cbz	r0, 800a244 <_printf_float+0xf0>
 800a232:	464b      	mov	r3, r9
 800a234:	2b00      	cmp	r3, #0
 800a236:	bfbc      	itt	lt
 800a238:	232d      	movlt	r3, #45	; 0x2d
 800a23a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a23e:	487f      	ldr	r0, [pc, #508]	; (800a43c <_printf_float+0x2e8>)
 800a240:	4b7f      	ldr	r3, [pc, #508]	; (800a440 <_printf_float+0x2ec>)
 800a242:	e7d1      	b.n	800a1e8 <_printf_float+0x94>
 800a244:	6863      	ldr	r3, [r4, #4]
 800a246:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a24a:	9206      	str	r2, [sp, #24]
 800a24c:	1c5a      	adds	r2, r3, #1
 800a24e:	d13f      	bne.n	800a2d0 <_printf_float+0x17c>
 800a250:	2306      	movs	r3, #6
 800a252:	6063      	str	r3, [r4, #4]
 800a254:	9b05      	ldr	r3, [sp, #20]
 800a256:	6861      	ldr	r1, [r4, #4]
 800a258:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a25c:	2300      	movs	r3, #0
 800a25e:	9303      	str	r3, [sp, #12]
 800a260:	ab0a      	add	r3, sp, #40	; 0x28
 800a262:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a266:	ab09      	add	r3, sp, #36	; 0x24
 800a268:	ec49 8b10 	vmov	d0, r8, r9
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	6022      	str	r2, [r4, #0]
 800a270:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a274:	4628      	mov	r0, r5
 800a276:	f7ff fecd 	bl	800a014 <__cvt>
 800a27a:	9b06      	ldr	r3, [sp, #24]
 800a27c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a27e:	2b47      	cmp	r3, #71	; 0x47
 800a280:	4680      	mov	r8, r0
 800a282:	d108      	bne.n	800a296 <_printf_float+0x142>
 800a284:	1cc8      	adds	r0, r1, #3
 800a286:	db02      	blt.n	800a28e <_printf_float+0x13a>
 800a288:	6863      	ldr	r3, [r4, #4]
 800a28a:	4299      	cmp	r1, r3
 800a28c:	dd41      	ble.n	800a312 <_printf_float+0x1be>
 800a28e:	f1ab 0b02 	sub.w	fp, fp, #2
 800a292:	fa5f fb8b 	uxtb.w	fp, fp
 800a296:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a29a:	d820      	bhi.n	800a2de <_printf_float+0x18a>
 800a29c:	3901      	subs	r1, #1
 800a29e:	465a      	mov	r2, fp
 800a2a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a2a4:	9109      	str	r1, [sp, #36]	; 0x24
 800a2a6:	f7ff ff17 	bl	800a0d8 <__exponent>
 800a2aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2ac:	1813      	adds	r3, r2, r0
 800a2ae:	2a01      	cmp	r2, #1
 800a2b0:	4681      	mov	r9, r0
 800a2b2:	6123      	str	r3, [r4, #16]
 800a2b4:	dc02      	bgt.n	800a2bc <_printf_float+0x168>
 800a2b6:	6822      	ldr	r2, [r4, #0]
 800a2b8:	07d2      	lsls	r2, r2, #31
 800a2ba:	d501      	bpl.n	800a2c0 <_printf_float+0x16c>
 800a2bc:	3301      	adds	r3, #1
 800a2be:	6123      	str	r3, [r4, #16]
 800a2c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d09c      	beq.n	800a202 <_printf_float+0xae>
 800a2c8:	232d      	movs	r3, #45	; 0x2d
 800a2ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2ce:	e798      	b.n	800a202 <_printf_float+0xae>
 800a2d0:	9a06      	ldr	r2, [sp, #24]
 800a2d2:	2a47      	cmp	r2, #71	; 0x47
 800a2d4:	d1be      	bne.n	800a254 <_printf_float+0x100>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1bc      	bne.n	800a254 <_printf_float+0x100>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e7b9      	b.n	800a252 <_printf_float+0xfe>
 800a2de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a2e2:	d118      	bne.n	800a316 <_printf_float+0x1c2>
 800a2e4:	2900      	cmp	r1, #0
 800a2e6:	6863      	ldr	r3, [r4, #4]
 800a2e8:	dd0b      	ble.n	800a302 <_printf_float+0x1ae>
 800a2ea:	6121      	str	r1, [r4, #16]
 800a2ec:	b913      	cbnz	r3, 800a2f4 <_printf_float+0x1a0>
 800a2ee:	6822      	ldr	r2, [r4, #0]
 800a2f0:	07d0      	lsls	r0, r2, #31
 800a2f2:	d502      	bpl.n	800a2fa <_printf_float+0x1a6>
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	440b      	add	r3, r1
 800a2f8:	6123      	str	r3, [r4, #16]
 800a2fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800a2fc:	f04f 0900 	mov.w	r9, #0
 800a300:	e7de      	b.n	800a2c0 <_printf_float+0x16c>
 800a302:	b913      	cbnz	r3, 800a30a <_printf_float+0x1b6>
 800a304:	6822      	ldr	r2, [r4, #0]
 800a306:	07d2      	lsls	r2, r2, #31
 800a308:	d501      	bpl.n	800a30e <_printf_float+0x1ba>
 800a30a:	3302      	adds	r3, #2
 800a30c:	e7f4      	b.n	800a2f8 <_printf_float+0x1a4>
 800a30e:	2301      	movs	r3, #1
 800a310:	e7f2      	b.n	800a2f8 <_printf_float+0x1a4>
 800a312:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a318:	4299      	cmp	r1, r3
 800a31a:	db05      	blt.n	800a328 <_printf_float+0x1d4>
 800a31c:	6823      	ldr	r3, [r4, #0]
 800a31e:	6121      	str	r1, [r4, #16]
 800a320:	07d8      	lsls	r0, r3, #31
 800a322:	d5ea      	bpl.n	800a2fa <_printf_float+0x1a6>
 800a324:	1c4b      	adds	r3, r1, #1
 800a326:	e7e7      	b.n	800a2f8 <_printf_float+0x1a4>
 800a328:	2900      	cmp	r1, #0
 800a32a:	bfd4      	ite	le
 800a32c:	f1c1 0202 	rsble	r2, r1, #2
 800a330:	2201      	movgt	r2, #1
 800a332:	4413      	add	r3, r2
 800a334:	e7e0      	b.n	800a2f8 <_printf_float+0x1a4>
 800a336:	6823      	ldr	r3, [r4, #0]
 800a338:	055a      	lsls	r2, r3, #21
 800a33a:	d407      	bmi.n	800a34c <_printf_float+0x1f8>
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	4642      	mov	r2, r8
 800a340:	4631      	mov	r1, r6
 800a342:	4628      	mov	r0, r5
 800a344:	47b8      	blx	r7
 800a346:	3001      	adds	r0, #1
 800a348:	d12c      	bne.n	800a3a4 <_printf_float+0x250>
 800a34a:	e764      	b.n	800a216 <_printf_float+0xc2>
 800a34c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a350:	f240 80e0 	bls.w	800a514 <_printf_float+0x3c0>
 800a354:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a358:	2200      	movs	r2, #0
 800a35a:	2300      	movs	r3, #0
 800a35c:	f7f6 fc2e 	bl	8000bbc <__aeabi_dcmpeq>
 800a360:	2800      	cmp	r0, #0
 800a362:	d034      	beq.n	800a3ce <_printf_float+0x27a>
 800a364:	4a37      	ldr	r2, [pc, #220]	; (800a444 <_printf_float+0x2f0>)
 800a366:	2301      	movs	r3, #1
 800a368:	4631      	mov	r1, r6
 800a36a:	4628      	mov	r0, r5
 800a36c:	47b8      	blx	r7
 800a36e:	3001      	adds	r0, #1
 800a370:	f43f af51 	beq.w	800a216 <_printf_float+0xc2>
 800a374:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a378:	429a      	cmp	r2, r3
 800a37a:	db02      	blt.n	800a382 <_printf_float+0x22e>
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	07d8      	lsls	r0, r3, #31
 800a380:	d510      	bpl.n	800a3a4 <_printf_float+0x250>
 800a382:	ee18 3a10 	vmov	r3, s16
 800a386:	4652      	mov	r2, sl
 800a388:	4631      	mov	r1, r6
 800a38a:	4628      	mov	r0, r5
 800a38c:	47b8      	blx	r7
 800a38e:	3001      	adds	r0, #1
 800a390:	f43f af41 	beq.w	800a216 <_printf_float+0xc2>
 800a394:	f04f 0800 	mov.w	r8, #0
 800a398:	f104 091a 	add.w	r9, r4, #26
 800a39c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	4543      	cmp	r3, r8
 800a3a2:	dc09      	bgt.n	800a3b8 <_printf_float+0x264>
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	079b      	lsls	r3, r3, #30
 800a3a8:	f100 8105 	bmi.w	800a5b6 <_printf_float+0x462>
 800a3ac:	68e0      	ldr	r0, [r4, #12]
 800a3ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3b0:	4298      	cmp	r0, r3
 800a3b2:	bfb8      	it	lt
 800a3b4:	4618      	movlt	r0, r3
 800a3b6:	e730      	b.n	800a21a <_printf_float+0xc6>
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	464a      	mov	r2, r9
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4628      	mov	r0, r5
 800a3c0:	47b8      	blx	r7
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f43f af27 	beq.w	800a216 <_printf_float+0xc2>
 800a3c8:	f108 0801 	add.w	r8, r8, #1
 800a3cc:	e7e6      	b.n	800a39c <_printf_float+0x248>
 800a3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	dc39      	bgt.n	800a448 <_printf_float+0x2f4>
 800a3d4:	4a1b      	ldr	r2, [pc, #108]	; (800a444 <_printf_float+0x2f0>)
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	4631      	mov	r1, r6
 800a3da:	4628      	mov	r0, r5
 800a3dc:	47b8      	blx	r7
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f43f af19 	beq.w	800a216 <_printf_float+0xc2>
 800a3e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	d102      	bne.n	800a3f2 <_printf_float+0x29e>
 800a3ec:	6823      	ldr	r3, [r4, #0]
 800a3ee:	07d9      	lsls	r1, r3, #31
 800a3f0:	d5d8      	bpl.n	800a3a4 <_printf_float+0x250>
 800a3f2:	ee18 3a10 	vmov	r3, s16
 800a3f6:	4652      	mov	r2, sl
 800a3f8:	4631      	mov	r1, r6
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	47b8      	blx	r7
 800a3fe:	3001      	adds	r0, #1
 800a400:	f43f af09 	beq.w	800a216 <_printf_float+0xc2>
 800a404:	f04f 0900 	mov.w	r9, #0
 800a408:	f104 0a1a 	add.w	sl, r4, #26
 800a40c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40e:	425b      	negs	r3, r3
 800a410:	454b      	cmp	r3, r9
 800a412:	dc01      	bgt.n	800a418 <_printf_float+0x2c4>
 800a414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a416:	e792      	b.n	800a33e <_printf_float+0x1ea>
 800a418:	2301      	movs	r3, #1
 800a41a:	4652      	mov	r2, sl
 800a41c:	4631      	mov	r1, r6
 800a41e:	4628      	mov	r0, r5
 800a420:	47b8      	blx	r7
 800a422:	3001      	adds	r0, #1
 800a424:	f43f aef7 	beq.w	800a216 <_printf_float+0xc2>
 800a428:	f109 0901 	add.w	r9, r9, #1
 800a42c:	e7ee      	b.n	800a40c <_printf_float+0x2b8>
 800a42e:	bf00      	nop
 800a430:	7fefffff 	.word	0x7fefffff
 800a434:	080260d8 	.word	0x080260d8
 800a438:	080260dc 	.word	0x080260dc
 800a43c:	080260e4 	.word	0x080260e4
 800a440:	080260e0 	.word	0x080260e0
 800a444:	0802658c 	.word	0x0802658c
 800a448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a44a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a44c:	429a      	cmp	r2, r3
 800a44e:	bfa8      	it	ge
 800a450:	461a      	movge	r2, r3
 800a452:	2a00      	cmp	r2, #0
 800a454:	4691      	mov	r9, r2
 800a456:	dc37      	bgt.n	800a4c8 <_printf_float+0x374>
 800a458:	f04f 0b00 	mov.w	fp, #0
 800a45c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a460:	f104 021a 	add.w	r2, r4, #26
 800a464:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a466:	9305      	str	r3, [sp, #20]
 800a468:	eba3 0309 	sub.w	r3, r3, r9
 800a46c:	455b      	cmp	r3, fp
 800a46e:	dc33      	bgt.n	800a4d8 <_printf_float+0x384>
 800a470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a474:	429a      	cmp	r2, r3
 800a476:	db3b      	blt.n	800a4f0 <_printf_float+0x39c>
 800a478:	6823      	ldr	r3, [r4, #0]
 800a47a:	07da      	lsls	r2, r3, #31
 800a47c:	d438      	bmi.n	800a4f0 <_printf_float+0x39c>
 800a47e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a480:	9a05      	ldr	r2, [sp, #20]
 800a482:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a484:	1a9a      	subs	r2, r3, r2
 800a486:	eba3 0901 	sub.w	r9, r3, r1
 800a48a:	4591      	cmp	r9, r2
 800a48c:	bfa8      	it	ge
 800a48e:	4691      	movge	r9, r2
 800a490:	f1b9 0f00 	cmp.w	r9, #0
 800a494:	dc35      	bgt.n	800a502 <_printf_float+0x3ae>
 800a496:	f04f 0800 	mov.w	r8, #0
 800a49a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a49e:	f104 0a1a 	add.w	sl, r4, #26
 800a4a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4a6:	1a9b      	subs	r3, r3, r2
 800a4a8:	eba3 0309 	sub.w	r3, r3, r9
 800a4ac:	4543      	cmp	r3, r8
 800a4ae:	f77f af79 	ble.w	800a3a4 <_printf_float+0x250>
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	4652      	mov	r2, sl
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	47b8      	blx	r7
 800a4bc:	3001      	adds	r0, #1
 800a4be:	f43f aeaa 	beq.w	800a216 <_printf_float+0xc2>
 800a4c2:	f108 0801 	add.w	r8, r8, #1
 800a4c6:	e7ec      	b.n	800a4a2 <_printf_float+0x34e>
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4642      	mov	r2, r8
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	47b8      	blx	r7
 800a4d2:	3001      	adds	r0, #1
 800a4d4:	d1c0      	bne.n	800a458 <_printf_float+0x304>
 800a4d6:	e69e      	b.n	800a216 <_printf_float+0xc2>
 800a4d8:	2301      	movs	r3, #1
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4628      	mov	r0, r5
 800a4de:	9205      	str	r2, [sp, #20]
 800a4e0:	47b8      	blx	r7
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	f43f ae97 	beq.w	800a216 <_printf_float+0xc2>
 800a4e8:	9a05      	ldr	r2, [sp, #20]
 800a4ea:	f10b 0b01 	add.w	fp, fp, #1
 800a4ee:	e7b9      	b.n	800a464 <_printf_float+0x310>
 800a4f0:	ee18 3a10 	vmov	r3, s16
 800a4f4:	4652      	mov	r2, sl
 800a4f6:	4631      	mov	r1, r6
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	47b8      	blx	r7
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	d1be      	bne.n	800a47e <_printf_float+0x32a>
 800a500:	e689      	b.n	800a216 <_printf_float+0xc2>
 800a502:	9a05      	ldr	r2, [sp, #20]
 800a504:	464b      	mov	r3, r9
 800a506:	4442      	add	r2, r8
 800a508:	4631      	mov	r1, r6
 800a50a:	4628      	mov	r0, r5
 800a50c:	47b8      	blx	r7
 800a50e:	3001      	adds	r0, #1
 800a510:	d1c1      	bne.n	800a496 <_printf_float+0x342>
 800a512:	e680      	b.n	800a216 <_printf_float+0xc2>
 800a514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a516:	2a01      	cmp	r2, #1
 800a518:	dc01      	bgt.n	800a51e <_printf_float+0x3ca>
 800a51a:	07db      	lsls	r3, r3, #31
 800a51c:	d538      	bpl.n	800a590 <_printf_float+0x43c>
 800a51e:	2301      	movs	r3, #1
 800a520:	4642      	mov	r2, r8
 800a522:	4631      	mov	r1, r6
 800a524:	4628      	mov	r0, r5
 800a526:	47b8      	blx	r7
 800a528:	3001      	adds	r0, #1
 800a52a:	f43f ae74 	beq.w	800a216 <_printf_float+0xc2>
 800a52e:	ee18 3a10 	vmov	r3, s16
 800a532:	4652      	mov	r2, sl
 800a534:	4631      	mov	r1, r6
 800a536:	4628      	mov	r0, r5
 800a538:	47b8      	blx	r7
 800a53a:	3001      	adds	r0, #1
 800a53c:	f43f ae6b 	beq.w	800a216 <_printf_float+0xc2>
 800a540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a544:	2200      	movs	r2, #0
 800a546:	2300      	movs	r3, #0
 800a548:	f7f6 fb38 	bl	8000bbc <__aeabi_dcmpeq>
 800a54c:	b9d8      	cbnz	r0, 800a586 <_printf_float+0x432>
 800a54e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a550:	f108 0201 	add.w	r2, r8, #1
 800a554:	3b01      	subs	r3, #1
 800a556:	4631      	mov	r1, r6
 800a558:	4628      	mov	r0, r5
 800a55a:	47b8      	blx	r7
 800a55c:	3001      	adds	r0, #1
 800a55e:	d10e      	bne.n	800a57e <_printf_float+0x42a>
 800a560:	e659      	b.n	800a216 <_printf_float+0xc2>
 800a562:	2301      	movs	r3, #1
 800a564:	4652      	mov	r2, sl
 800a566:	4631      	mov	r1, r6
 800a568:	4628      	mov	r0, r5
 800a56a:	47b8      	blx	r7
 800a56c:	3001      	adds	r0, #1
 800a56e:	f43f ae52 	beq.w	800a216 <_printf_float+0xc2>
 800a572:	f108 0801 	add.w	r8, r8, #1
 800a576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a578:	3b01      	subs	r3, #1
 800a57a:	4543      	cmp	r3, r8
 800a57c:	dcf1      	bgt.n	800a562 <_printf_float+0x40e>
 800a57e:	464b      	mov	r3, r9
 800a580:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a584:	e6dc      	b.n	800a340 <_printf_float+0x1ec>
 800a586:	f04f 0800 	mov.w	r8, #0
 800a58a:	f104 0a1a 	add.w	sl, r4, #26
 800a58e:	e7f2      	b.n	800a576 <_printf_float+0x422>
 800a590:	2301      	movs	r3, #1
 800a592:	4642      	mov	r2, r8
 800a594:	e7df      	b.n	800a556 <_printf_float+0x402>
 800a596:	2301      	movs	r3, #1
 800a598:	464a      	mov	r2, r9
 800a59a:	4631      	mov	r1, r6
 800a59c:	4628      	mov	r0, r5
 800a59e:	47b8      	blx	r7
 800a5a0:	3001      	adds	r0, #1
 800a5a2:	f43f ae38 	beq.w	800a216 <_printf_float+0xc2>
 800a5a6:	f108 0801 	add.w	r8, r8, #1
 800a5aa:	68e3      	ldr	r3, [r4, #12]
 800a5ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5ae:	1a5b      	subs	r3, r3, r1
 800a5b0:	4543      	cmp	r3, r8
 800a5b2:	dcf0      	bgt.n	800a596 <_printf_float+0x442>
 800a5b4:	e6fa      	b.n	800a3ac <_printf_float+0x258>
 800a5b6:	f04f 0800 	mov.w	r8, #0
 800a5ba:	f104 0919 	add.w	r9, r4, #25
 800a5be:	e7f4      	b.n	800a5aa <_printf_float+0x456>

0800a5c0 <_printf_common>:
 800a5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	4699      	mov	r9, r3
 800a5c8:	688a      	ldr	r2, [r1, #8]
 800a5ca:	690b      	ldr	r3, [r1, #16]
 800a5cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	bfb8      	it	lt
 800a5d4:	4613      	movlt	r3, r2
 800a5d6:	6033      	str	r3, [r6, #0]
 800a5d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5dc:	4607      	mov	r7, r0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	b10a      	cbz	r2, 800a5e6 <_printf_common+0x26>
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	6033      	str	r3, [r6, #0]
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	0699      	lsls	r1, r3, #26
 800a5ea:	bf42      	ittt	mi
 800a5ec:	6833      	ldrmi	r3, [r6, #0]
 800a5ee:	3302      	addmi	r3, #2
 800a5f0:	6033      	strmi	r3, [r6, #0]
 800a5f2:	6825      	ldr	r5, [r4, #0]
 800a5f4:	f015 0506 	ands.w	r5, r5, #6
 800a5f8:	d106      	bne.n	800a608 <_printf_common+0x48>
 800a5fa:	f104 0a19 	add.w	sl, r4, #25
 800a5fe:	68e3      	ldr	r3, [r4, #12]
 800a600:	6832      	ldr	r2, [r6, #0]
 800a602:	1a9b      	subs	r3, r3, r2
 800a604:	42ab      	cmp	r3, r5
 800a606:	dc26      	bgt.n	800a656 <_printf_common+0x96>
 800a608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a60c:	1e13      	subs	r3, r2, #0
 800a60e:	6822      	ldr	r2, [r4, #0]
 800a610:	bf18      	it	ne
 800a612:	2301      	movne	r3, #1
 800a614:	0692      	lsls	r2, r2, #26
 800a616:	d42b      	bmi.n	800a670 <_printf_common+0xb0>
 800a618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a61c:	4649      	mov	r1, r9
 800a61e:	4638      	mov	r0, r7
 800a620:	47c0      	blx	r8
 800a622:	3001      	adds	r0, #1
 800a624:	d01e      	beq.n	800a664 <_printf_common+0xa4>
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	68e5      	ldr	r5, [r4, #12]
 800a62a:	6832      	ldr	r2, [r6, #0]
 800a62c:	f003 0306 	and.w	r3, r3, #6
 800a630:	2b04      	cmp	r3, #4
 800a632:	bf08      	it	eq
 800a634:	1aad      	subeq	r5, r5, r2
 800a636:	68a3      	ldr	r3, [r4, #8]
 800a638:	6922      	ldr	r2, [r4, #16]
 800a63a:	bf0c      	ite	eq
 800a63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a640:	2500      	movne	r5, #0
 800a642:	4293      	cmp	r3, r2
 800a644:	bfc4      	itt	gt
 800a646:	1a9b      	subgt	r3, r3, r2
 800a648:	18ed      	addgt	r5, r5, r3
 800a64a:	2600      	movs	r6, #0
 800a64c:	341a      	adds	r4, #26
 800a64e:	42b5      	cmp	r5, r6
 800a650:	d11a      	bne.n	800a688 <_printf_common+0xc8>
 800a652:	2000      	movs	r0, #0
 800a654:	e008      	b.n	800a668 <_printf_common+0xa8>
 800a656:	2301      	movs	r3, #1
 800a658:	4652      	mov	r2, sl
 800a65a:	4649      	mov	r1, r9
 800a65c:	4638      	mov	r0, r7
 800a65e:	47c0      	blx	r8
 800a660:	3001      	adds	r0, #1
 800a662:	d103      	bne.n	800a66c <_printf_common+0xac>
 800a664:	f04f 30ff 	mov.w	r0, #4294967295
 800a668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66c:	3501      	adds	r5, #1
 800a66e:	e7c6      	b.n	800a5fe <_printf_common+0x3e>
 800a670:	18e1      	adds	r1, r4, r3
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	2030      	movs	r0, #48	; 0x30
 800a676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a67a:	4422      	add	r2, r4
 800a67c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a684:	3302      	adds	r3, #2
 800a686:	e7c7      	b.n	800a618 <_printf_common+0x58>
 800a688:	2301      	movs	r3, #1
 800a68a:	4622      	mov	r2, r4
 800a68c:	4649      	mov	r1, r9
 800a68e:	4638      	mov	r0, r7
 800a690:	47c0      	blx	r8
 800a692:	3001      	adds	r0, #1
 800a694:	d0e6      	beq.n	800a664 <_printf_common+0xa4>
 800a696:	3601      	adds	r6, #1
 800a698:	e7d9      	b.n	800a64e <_printf_common+0x8e>
	...

0800a69c <_printf_i>:
 800a69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a0:	7e0f      	ldrb	r7, [r1, #24]
 800a6a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6a4:	2f78      	cmp	r7, #120	; 0x78
 800a6a6:	4691      	mov	r9, r2
 800a6a8:	4680      	mov	r8, r0
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	469a      	mov	sl, r3
 800a6ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6b2:	d807      	bhi.n	800a6c4 <_printf_i+0x28>
 800a6b4:	2f62      	cmp	r7, #98	; 0x62
 800a6b6:	d80a      	bhi.n	800a6ce <_printf_i+0x32>
 800a6b8:	2f00      	cmp	r7, #0
 800a6ba:	f000 80d8 	beq.w	800a86e <_printf_i+0x1d2>
 800a6be:	2f58      	cmp	r7, #88	; 0x58
 800a6c0:	f000 80a3 	beq.w	800a80a <_printf_i+0x16e>
 800a6c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6cc:	e03a      	b.n	800a744 <_printf_i+0xa8>
 800a6ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6d2:	2b15      	cmp	r3, #21
 800a6d4:	d8f6      	bhi.n	800a6c4 <_printf_i+0x28>
 800a6d6:	a101      	add	r1, pc, #4	; (adr r1, 800a6dc <_printf_i+0x40>)
 800a6d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6dc:	0800a735 	.word	0x0800a735
 800a6e0:	0800a749 	.word	0x0800a749
 800a6e4:	0800a6c5 	.word	0x0800a6c5
 800a6e8:	0800a6c5 	.word	0x0800a6c5
 800a6ec:	0800a6c5 	.word	0x0800a6c5
 800a6f0:	0800a6c5 	.word	0x0800a6c5
 800a6f4:	0800a749 	.word	0x0800a749
 800a6f8:	0800a6c5 	.word	0x0800a6c5
 800a6fc:	0800a6c5 	.word	0x0800a6c5
 800a700:	0800a6c5 	.word	0x0800a6c5
 800a704:	0800a6c5 	.word	0x0800a6c5
 800a708:	0800a855 	.word	0x0800a855
 800a70c:	0800a779 	.word	0x0800a779
 800a710:	0800a837 	.word	0x0800a837
 800a714:	0800a6c5 	.word	0x0800a6c5
 800a718:	0800a6c5 	.word	0x0800a6c5
 800a71c:	0800a877 	.word	0x0800a877
 800a720:	0800a6c5 	.word	0x0800a6c5
 800a724:	0800a779 	.word	0x0800a779
 800a728:	0800a6c5 	.word	0x0800a6c5
 800a72c:	0800a6c5 	.word	0x0800a6c5
 800a730:	0800a83f 	.word	0x0800a83f
 800a734:	682b      	ldr	r3, [r5, #0]
 800a736:	1d1a      	adds	r2, r3, #4
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	602a      	str	r2, [r5, #0]
 800a73c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a744:	2301      	movs	r3, #1
 800a746:	e0a3      	b.n	800a890 <_printf_i+0x1f4>
 800a748:	6820      	ldr	r0, [r4, #0]
 800a74a:	6829      	ldr	r1, [r5, #0]
 800a74c:	0606      	lsls	r6, r0, #24
 800a74e:	f101 0304 	add.w	r3, r1, #4
 800a752:	d50a      	bpl.n	800a76a <_printf_i+0xce>
 800a754:	680e      	ldr	r6, [r1, #0]
 800a756:	602b      	str	r3, [r5, #0]
 800a758:	2e00      	cmp	r6, #0
 800a75a:	da03      	bge.n	800a764 <_printf_i+0xc8>
 800a75c:	232d      	movs	r3, #45	; 0x2d
 800a75e:	4276      	negs	r6, r6
 800a760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a764:	485e      	ldr	r0, [pc, #376]	; (800a8e0 <_printf_i+0x244>)
 800a766:	230a      	movs	r3, #10
 800a768:	e019      	b.n	800a79e <_printf_i+0x102>
 800a76a:	680e      	ldr	r6, [r1, #0]
 800a76c:	602b      	str	r3, [r5, #0]
 800a76e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a772:	bf18      	it	ne
 800a774:	b236      	sxthne	r6, r6
 800a776:	e7ef      	b.n	800a758 <_printf_i+0xbc>
 800a778:	682b      	ldr	r3, [r5, #0]
 800a77a:	6820      	ldr	r0, [r4, #0]
 800a77c:	1d19      	adds	r1, r3, #4
 800a77e:	6029      	str	r1, [r5, #0]
 800a780:	0601      	lsls	r1, r0, #24
 800a782:	d501      	bpl.n	800a788 <_printf_i+0xec>
 800a784:	681e      	ldr	r6, [r3, #0]
 800a786:	e002      	b.n	800a78e <_printf_i+0xf2>
 800a788:	0646      	lsls	r6, r0, #25
 800a78a:	d5fb      	bpl.n	800a784 <_printf_i+0xe8>
 800a78c:	881e      	ldrh	r6, [r3, #0]
 800a78e:	4854      	ldr	r0, [pc, #336]	; (800a8e0 <_printf_i+0x244>)
 800a790:	2f6f      	cmp	r7, #111	; 0x6f
 800a792:	bf0c      	ite	eq
 800a794:	2308      	moveq	r3, #8
 800a796:	230a      	movne	r3, #10
 800a798:	2100      	movs	r1, #0
 800a79a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a79e:	6865      	ldr	r5, [r4, #4]
 800a7a0:	60a5      	str	r5, [r4, #8]
 800a7a2:	2d00      	cmp	r5, #0
 800a7a4:	bfa2      	ittt	ge
 800a7a6:	6821      	ldrge	r1, [r4, #0]
 800a7a8:	f021 0104 	bicge.w	r1, r1, #4
 800a7ac:	6021      	strge	r1, [r4, #0]
 800a7ae:	b90e      	cbnz	r6, 800a7b4 <_printf_i+0x118>
 800a7b0:	2d00      	cmp	r5, #0
 800a7b2:	d04d      	beq.n	800a850 <_printf_i+0x1b4>
 800a7b4:	4615      	mov	r5, r2
 800a7b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7ba:	fb03 6711 	mls	r7, r3, r1, r6
 800a7be:	5dc7      	ldrb	r7, [r0, r7]
 800a7c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7c4:	4637      	mov	r7, r6
 800a7c6:	42bb      	cmp	r3, r7
 800a7c8:	460e      	mov	r6, r1
 800a7ca:	d9f4      	bls.n	800a7b6 <_printf_i+0x11a>
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	d10b      	bne.n	800a7e8 <_printf_i+0x14c>
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	07de      	lsls	r6, r3, #31
 800a7d4:	d508      	bpl.n	800a7e8 <_printf_i+0x14c>
 800a7d6:	6923      	ldr	r3, [r4, #16]
 800a7d8:	6861      	ldr	r1, [r4, #4]
 800a7da:	4299      	cmp	r1, r3
 800a7dc:	bfde      	ittt	le
 800a7de:	2330      	movle	r3, #48	; 0x30
 800a7e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a7e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a7e8:	1b52      	subs	r2, r2, r5
 800a7ea:	6122      	str	r2, [r4, #16]
 800a7ec:	f8cd a000 	str.w	sl, [sp]
 800a7f0:	464b      	mov	r3, r9
 800a7f2:	aa03      	add	r2, sp, #12
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	f7ff fee2 	bl	800a5c0 <_printf_common>
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d14c      	bne.n	800a89a <_printf_i+0x1fe>
 800a800:	f04f 30ff 	mov.w	r0, #4294967295
 800a804:	b004      	add	sp, #16
 800a806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80a:	4835      	ldr	r0, [pc, #212]	; (800a8e0 <_printf_i+0x244>)
 800a80c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a810:	6829      	ldr	r1, [r5, #0]
 800a812:	6823      	ldr	r3, [r4, #0]
 800a814:	f851 6b04 	ldr.w	r6, [r1], #4
 800a818:	6029      	str	r1, [r5, #0]
 800a81a:	061d      	lsls	r5, r3, #24
 800a81c:	d514      	bpl.n	800a848 <_printf_i+0x1ac>
 800a81e:	07df      	lsls	r7, r3, #31
 800a820:	bf44      	itt	mi
 800a822:	f043 0320 	orrmi.w	r3, r3, #32
 800a826:	6023      	strmi	r3, [r4, #0]
 800a828:	b91e      	cbnz	r6, 800a832 <_printf_i+0x196>
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	f023 0320 	bic.w	r3, r3, #32
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	2310      	movs	r3, #16
 800a834:	e7b0      	b.n	800a798 <_printf_i+0xfc>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	f043 0320 	orr.w	r3, r3, #32
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	2378      	movs	r3, #120	; 0x78
 800a840:	4828      	ldr	r0, [pc, #160]	; (800a8e4 <_printf_i+0x248>)
 800a842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a846:	e7e3      	b.n	800a810 <_printf_i+0x174>
 800a848:	0659      	lsls	r1, r3, #25
 800a84a:	bf48      	it	mi
 800a84c:	b2b6      	uxthmi	r6, r6
 800a84e:	e7e6      	b.n	800a81e <_printf_i+0x182>
 800a850:	4615      	mov	r5, r2
 800a852:	e7bb      	b.n	800a7cc <_printf_i+0x130>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	6826      	ldr	r6, [r4, #0]
 800a858:	6961      	ldr	r1, [r4, #20]
 800a85a:	1d18      	adds	r0, r3, #4
 800a85c:	6028      	str	r0, [r5, #0]
 800a85e:	0635      	lsls	r5, r6, #24
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	d501      	bpl.n	800a868 <_printf_i+0x1cc>
 800a864:	6019      	str	r1, [r3, #0]
 800a866:	e002      	b.n	800a86e <_printf_i+0x1d2>
 800a868:	0670      	lsls	r0, r6, #25
 800a86a:	d5fb      	bpl.n	800a864 <_printf_i+0x1c8>
 800a86c:	8019      	strh	r1, [r3, #0]
 800a86e:	2300      	movs	r3, #0
 800a870:	6123      	str	r3, [r4, #16]
 800a872:	4615      	mov	r5, r2
 800a874:	e7ba      	b.n	800a7ec <_printf_i+0x150>
 800a876:	682b      	ldr	r3, [r5, #0]
 800a878:	1d1a      	adds	r2, r3, #4
 800a87a:	602a      	str	r2, [r5, #0]
 800a87c:	681d      	ldr	r5, [r3, #0]
 800a87e:	6862      	ldr	r2, [r4, #4]
 800a880:	2100      	movs	r1, #0
 800a882:	4628      	mov	r0, r5
 800a884:	f7f5 fd1c 	bl	80002c0 <memchr>
 800a888:	b108      	cbz	r0, 800a88e <_printf_i+0x1f2>
 800a88a:	1b40      	subs	r0, r0, r5
 800a88c:	6060      	str	r0, [r4, #4]
 800a88e:	6863      	ldr	r3, [r4, #4]
 800a890:	6123      	str	r3, [r4, #16]
 800a892:	2300      	movs	r3, #0
 800a894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a898:	e7a8      	b.n	800a7ec <_printf_i+0x150>
 800a89a:	6923      	ldr	r3, [r4, #16]
 800a89c:	462a      	mov	r2, r5
 800a89e:	4649      	mov	r1, r9
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	47d0      	blx	sl
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d0ab      	beq.n	800a800 <_printf_i+0x164>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	079b      	lsls	r3, r3, #30
 800a8ac:	d413      	bmi.n	800a8d6 <_printf_i+0x23a>
 800a8ae:	68e0      	ldr	r0, [r4, #12]
 800a8b0:	9b03      	ldr	r3, [sp, #12]
 800a8b2:	4298      	cmp	r0, r3
 800a8b4:	bfb8      	it	lt
 800a8b6:	4618      	movlt	r0, r3
 800a8b8:	e7a4      	b.n	800a804 <_printf_i+0x168>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	4632      	mov	r2, r6
 800a8be:	4649      	mov	r1, r9
 800a8c0:	4640      	mov	r0, r8
 800a8c2:	47d0      	blx	sl
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	d09b      	beq.n	800a800 <_printf_i+0x164>
 800a8c8:	3501      	adds	r5, #1
 800a8ca:	68e3      	ldr	r3, [r4, #12]
 800a8cc:	9903      	ldr	r1, [sp, #12]
 800a8ce:	1a5b      	subs	r3, r3, r1
 800a8d0:	42ab      	cmp	r3, r5
 800a8d2:	dcf2      	bgt.n	800a8ba <_printf_i+0x21e>
 800a8d4:	e7eb      	b.n	800a8ae <_printf_i+0x212>
 800a8d6:	2500      	movs	r5, #0
 800a8d8:	f104 0619 	add.w	r6, r4, #25
 800a8dc:	e7f5      	b.n	800a8ca <_printf_i+0x22e>
 800a8de:	bf00      	nop
 800a8e0:	080260e8 	.word	0x080260e8
 800a8e4:	080260f9 	.word	0x080260f9

0800a8e8 <iprintf>:
 800a8e8:	b40f      	push	{r0, r1, r2, r3}
 800a8ea:	4b0a      	ldr	r3, [pc, #40]	; (800a914 <iprintf+0x2c>)
 800a8ec:	b513      	push	{r0, r1, r4, lr}
 800a8ee:	681c      	ldr	r4, [r3, #0]
 800a8f0:	b124      	cbz	r4, 800a8fc <iprintf+0x14>
 800a8f2:	69a3      	ldr	r3, [r4, #24]
 800a8f4:	b913      	cbnz	r3, 800a8fc <iprintf+0x14>
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f001 f9e0 	bl	800bcbc <__sinit>
 800a8fc:	ab05      	add	r3, sp, #20
 800a8fe:	9a04      	ldr	r2, [sp, #16]
 800a900:	68a1      	ldr	r1, [r4, #8]
 800a902:	9301      	str	r3, [sp, #4]
 800a904:	4620      	mov	r0, r4
 800a906:	f002 f8d3 	bl	800cab0 <_vfiprintf_r>
 800a90a:	b002      	add	sp, #8
 800a90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a910:	b004      	add	sp, #16
 800a912:	4770      	bx	lr
 800a914:	200000cc 	.word	0x200000cc

0800a918 <_sbrk_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d06      	ldr	r5, [pc, #24]	; (800a934 <_sbrk_r+0x1c>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f003 fae0 	bl	800dee8 <_sbrk>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_sbrk_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_sbrk_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	20000b54 	.word	0x20000b54

0800a938 <sniprintf>:
 800a938:	b40c      	push	{r2, r3}
 800a93a:	b530      	push	{r4, r5, lr}
 800a93c:	4b17      	ldr	r3, [pc, #92]	; (800a99c <sniprintf+0x64>)
 800a93e:	1e0c      	subs	r4, r1, #0
 800a940:	681d      	ldr	r5, [r3, #0]
 800a942:	b09d      	sub	sp, #116	; 0x74
 800a944:	da08      	bge.n	800a958 <sniprintf+0x20>
 800a946:	238b      	movs	r3, #139	; 0x8b
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	f04f 30ff 	mov.w	r0, #4294967295
 800a94e:	b01d      	add	sp, #116	; 0x74
 800a950:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a954:	b002      	add	sp, #8
 800a956:	4770      	bx	lr
 800a958:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a95c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a960:	bf14      	ite	ne
 800a962:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a966:	4623      	moveq	r3, r4
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	9307      	str	r3, [sp, #28]
 800a96c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a970:	9002      	str	r0, [sp, #8]
 800a972:	9006      	str	r0, [sp, #24]
 800a974:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a978:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a97a:	ab21      	add	r3, sp, #132	; 0x84
 800a97c:	a902      	add	r1, sp, #8
 800a97e:	4628      	mov	r0, r5
 800a980:	9301      	str	r3, [sp, #4]
 800a982:	f001 ff6b 	bl	800c85c <_svfiprintf_r>
 800a986:	1c43      	adds	r3, r0, #1
 800a988:	bfbc      	itt	lt
 800a98a:	238b      	movlt	r3, #139	; 0x8b
 800a98c:	602b      	strlt	r3, [r5, #0]
 800a98e:	2c00      	cmp	r4, #0
 800a990:	d0dd      	beq.n	800a94e <sniprintf+0x16>
 800a992:	9b02      	ldr	r3, [sp, #8]
 800a994:	2200      	movs	r2, #0
 800a996:	701a      	strb	r2, [r3, #0]
 800a998:	e7d9      	b.n	800a94e <sniprintf+0x16>
 800a99a:	bf00      	nop
 800a99c:	200000cc 	.word	0x200000cc

0800a9a0 <time>:
 800a9a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a9a2:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <time+0x30>)
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	4669      	mov	r1, sp
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	6818      	ldr	r0, [r3, #0]
 800a9ac:	f001 fa7a 	bl	800bea4 <_gettimeofday_r>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	bfbe      	ittt	lt
 800a9b4:	f04f 32ff 	movlt.w	r2, #4294967295
 800a9b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9bc:	e9cd 2300 	strdlt	r2, r3, [sp]
 800a9c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9c4:	b10c      	cbz	r4, 800a9ca <time+0x2a>
 800a9c6:	e9c4 0100 	strd	r0, r1, [r4]
 800a9ca:	b004      	add	sp, #16
 800a9cc:	bd10      	pop	{r4, pc}
 800a9ce:	bf00      	nop
 800a9d0:	200000cc 	.word	0x200000cc

0800a9d4 <__tzcalc_limits>:
 800a9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d8:	4605      	mov	r5, r0
 800a9da:	f001 fa75 	bl	800bec8 <__gettzinfo>
 800a9de:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800a9e2:	429d      	cmp	r5, r3
 800a9e4:	f340 8099 	ble.w	800ab1a <__tzcalc_limits+0x146>
 800a9e8:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800a9ec:	18ac      	adds	r4, r5, r2
 800a9ee:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800a9f2:	f240 126d 	movw	r2, #365	; 0x16d
 800a9f6:	10a4      	asrs	r4, r4, #2
 800a9f8:	fb02 4403 	mla	r4, r2, r3, r4
 800a9fc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800aa00:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800aa04:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa08:	441c      	add	r4, r3
 800aa0a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800aa0e:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800aa12:	fb95 fcf3 	sdiv	ip, r5, r3
 800aa16:	fb03 5c1c 	mls	ip, r3, ip, r5
 800aa1a:	186a      	adds	r2, r5, r1
 800aa1c:	fabc f68c 	clz	r6, ip
 800aa20:	fbb2 f2f3 	udiv	r2, r2, r3
 800aa24:	f005 0303 	and.w	r3, r5, #3
 800aa28:	4414      	add	r4, r2
 800aa2a:	2264      	movs	r2, #100	; 0x64
 800aa2c:	6045      	str	r5, [r0, #4]
 800aa2e:	fb95 f7f2 	sdiv	r7, r5, r2
 800aa32:	0976      	lsrs	r6, r6, #5
 800aa34:	fb02 5717 	mls	r7, r2, r7, r5
 800aa38:	4601      	mov	r1, r0
 800aa3a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	f04f 0a07 	mov.w	sl, #7
 800aa44:	7a0d      	ldrb	r5, [r1, #8]
 800aa46:	694b      	ldr	r3, [r1, #20]
 800aa48:	2d4a      	cmp	r5, #74	; 0x4a
 800aa4a:	d12d      	bne.n	800aaa8 <__tzcalc_limits+0xd4>
 800aa4c:	9a00      	ldr	r2, [sp, #0]
 800aa4e:	eb04 0e03 	add.w	lr, r4, r3
 800aa52:	b902      	cbnz	r2, 800aa56 <__tzcalc_limits+0x82>
 800aa54:	b917      	cbnz	r7, 800aa5c <__tzcalc_limits+0x88>
 800aa56:	f1bc 0f00 	cmp.w	ip, #0
 800aa5a:	d123      	bne.n	800aaa4 <__tzcalc_limits+0xd0>
 800aa5c:	2b3b      	cmp	r3, #59	; 0x3b
 800aa5e:	bfd4      	ite	le
 800aa60:	2300      	movle	r3, #0
 800aa62:	2301      	movgt	r3, #1
 800aa64:	4473      	add	r3, lr
 800aa66:	3b01      	subs	r3, #1
 800aa68:	698d      	ldr	r5, [r1, #24]
 800aa6a:	4a2d      	ldr	r2, [pc, #180]	; (800ab20 <__tzcalc_limits+0x14c>)
 800aa6c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800aa70:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800aa74:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800aa76:	18ed      	adds	r5, r5, r3
 800aa78:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800aa7c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800aa80:	3128      	adds	r1, #40	; 0x28
 800aa82:	458b      	cmp	fp, r1
 800aa84:	d1de      	bne.n	800aa44 <__tzcalc_limits+0x70>
 800aa86:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800aa8a:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800aa8e:	428c      	cmp	r4, r1
 800aa90:	eb72 0303 	sbcs.w	r3, r2, r3
 800aa94:	bfb4      	ite	lt
 800aa96:	2301      	movlt	r3, #1
 800aa98:	2300      	movge	r3, #0
 800aa9a:	6003      	str	r3, [r0, #0]
 800aa9c:	2001      	movs	r0, #1
 800aa9e:	b003      	add	sp, #12
 800aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e7dd      	b.n	800aa64 <__tzcalc_limits+0x90>
 800aaa8:	2d44      	cmp	r5, #68	; 0x44
 800aaaa:	d101      	bne.n	800aab0 <__tzcalc_limits+0xdc>
 800aaac:	4423      	add	r3, r4
 800aaae:	e7db      	b.n	800aa68 <__tzcalc_limits+0x94>
 800aab0:	9a00      	ldr	r2, [sp, #0]
 800aab2:	bb62      	cbnz	r2, 800ab0e <__tzcalc_limits+0x13a>
 800aab4:	2f00      	cmp	r7, #0
 800aab6:	bf0c      	ite	eq
 800aab8:	4635      	moveq	r5, r6
 800aaba:	2501      	movne	r5, #1
 800aabc:	68ca      	ldr	r2, [r1, #12]
 800aabe:	9201      	str	r2, [sp, #4]
 800aac0:	4a18      	ldr	r2, [pc, #96]	; (800ab24 <__tzcalc_limits+0x150>)
 800aac2:	f04f 0930 	mov.w	r9, #48	; 0x30
 800aac6:	fb09 2505 	mla	r5, r9, r5, r2
 800aaca:	46a6      	mov	lr, r4
 800aacc:	f04f 0800 	mov.w	r8, #0
 800aad0:	3d04      	subs	r5, #4
 800aad2:	9a01      	ldr	r2, [sp, #4]
 800aad4:	f108 0801 	add.w	r8, r8, #1
 800aad8:	4542      	cmp	r2, r8
 800aada:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800aade:	dc18      	bgt.n	800ab12 <__tzcalc_limits+0x13e>
 800aae0:	f10e 0504 	add.w	r5, lr, #4
 800aae4:	fb95 f8fa 	sdiv	r8, r5, sl
 800aae8:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800aaec:	eba5 0808 	sub.w	r8, r5, r8
 800aaf0:	ebb3 0808 	subs.w	r8, r3, r8
 800aaf4:	690b      	ldr	r3, [r1, #16]
 800aaf6:	f103 33ff 	add.w	r3, r3, #4294967295
 800aafa:	bf48      	it	mi
 800aafc:	f108 0807 	addmi.w	r8, r8, #7
 800ab00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ab04:	4443      	add	r3, r8
 800ab06:	454b      	cmp	r3, r9
 800ab08:	da05      	bge.n	800ab16 <__tzcalc_limits+0x142>
 800ab0a:	4473      	add	r3, lr
 800ab0c:	e7ac      	b.n	800aa68 <__tzcalc_limits+0x94>
 800ab0e:	4635      	mov	r5, r6
 800ab10:	e7d4      	b.n	800aabc <__tzcalc_limits+0xe8>
 800ab12:	44ce      	add	lr, r9
 800ab14:	e7dd      	b.n	800aad2 <__tzcalc_limits+0xfe>
 800ab16:	3b07      	subs	r3, #7
 800ab18:	e7f5      	b.n	800ab06 <__tzcalc_limits+0x132>
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	e7bf      	b.n	800aa9e <__tzcalc_limits+0xca>
 800ab1e:	bf00      	nop
 800ab20:	00015180 	.word	0x00015180
 800ab24:	08026078 	.word	0x08026078

0800ab28 <__tz_lock>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__tz_lock+0x8>)
 800ab2a:	f001 ba82 	b.w	800c032 <__retarget_lock_acquire>
 800ab2e:	bf00      	nop
 800ab30:	20000b50 	.word	0x20000b50

0800ab34 <__tz_unlock>:
 800ab34:	4801      	ldr	r0, [pc, #4]	; (800ab3c <__tz_unlock+0x8>)
 800ab36:	f001 ba7e 	b.w	800c036 <__retarget_lock_release>
 800ab3a:	bf00      	nop
 800ab3c:	20000b50 	.word	0x20000b50

0800ab40 <_tzset_unlocked>:
 800ab40:	4b01      	ldr	r3, [pc, #4]	; (800ab48 <_tzset_unlocked+0x8>)
 800ab42:	6818      	ldr	r0, [r3, #0]
 800ab44:	f000 b802 	b.w	800ab4c <_tzset_unlocked_r>
 800ab48:	200000cc 	.word	0x200000cc

0800ab4c <_tzset_unlocked_r>:
 800ab4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab50:	b08d      	sub	sp, #52	; 0x34
 800ab52:	4607      	mov	r7, r0
 800ab54:	f001 f9b8 	bl	800bec8 <__gettzinfo>
 800ab58:	49b0      	ldr	r1, [pc, #704]	; (800ae1c <_tzset_unlocked_r+0x2d0>)
 800ab5a:	4eb1      	ldr	r6, [pc, #708]	; (800ae20 <_tzset_unlocked_r+0x2d4>)
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f001 f998 	bl	800be94 <_getenv_r>
 800ab64:	4604      	mov	r4, r0
 800ab66:	b970      	cbnz	r0, 800ab86 <_tzset_unlocked_r+0x3a>
 800ab68:	4bae      	ldr	r3, [pc, #696]	; (800ae24 <_tzset_unlocked_r+0x2d8>)
 800ab6a:	4aaf      	ldr	r2, [pc, #700]	; (800ae28 <_tzset_unlocked_r+0x2dc>)
 800ab6c:	6018      	str	r0, [r3, #0]
 800ab6e:	4baf      	ldr	r3, [pc, #700]	; (800ae2c <_tzset_unlocked_r+0x2e0>)
 800ab70:	6018      	str	r0, [r3, #0]
 800ab72:	4baf      	ldr	r3, [pc, #700]	; (800ae30 <_tzset_unlocked_r+0x2e4>)
 800ab74:	6830      	ldr	r0, [r6, #0]
 800ab76:	e9c3 2200 	strd	r2, r2, [r3]
 800ab7a:	f7ff f95b 	bl	8009e34 <free>
 800ab7e:	6034      	str	r4, [r6, #0]
 800ab80:	b00d      	add	sp, #52	; 0x34
 800ab82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab86:	6831      	ldr	r1, [r6, #0]
 800ab88:	2900      	cmp	r1, #0
 800ab8a:	d162      	bne.n	800ac52 <_tzset_unlocked_r+0x106>
 800ab8c:	6830      	ldr	r0, [r6, #0]
 800ab8e:	f7ff f951 	bl	8009e34 <free>
 800ab92:	4620      	mov	r0, r4
 800ab94:	f7f5 fb8c 	bl	80002b0 <strlen>
 800ab98:	1c41      	adds	r1, r0, #1
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	f7ff f9c6 	bl	8009f2c <_malloc_r>
 800aba0:	6030      	str	r0, [r6, #0]
 800aba2:	2800      	cmp	r0, #0
 800aba4:	d15a      	bne.n	800ac5c <_tzset_unlocked_r+0x110>
 800aba6:	7823      	ldrb	r3, [r4, #0]
 800aba8:	4aa2      	ldr	r2, [pc, #648]	; (800ae34 <_tzset_unlocked_r+0x2e8>)
 800abaa:	49a3      	ldr	r1, [pc, #652]	; (800ae38 <_tzset_unlocked_r+0x2ec>)
 800abac:	2b3a      	cmp	r3, #58	; 0x3a
 800abae:	bf08      	it	eq
 800abb0:	3401      	addeq	r4, #1
 800abb2:	ae0a      	add	r6, sp, #40	; 0x28
 800abb4:	4633      	mov	r3, r6
 800abb6:	4620      	mov	r0, r4
 800abb8:	f002 f8ca 	bl	800cd50 <siscanf>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	dddf      	ble.n	800ab80 <_tzset_unlocked_r+0x34>
 800abc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc2:	18e7      	adds	r7, r4, r3
 800abc4:	5ce3      	ldrb	r3, [r4, r3]
 800abc6:	2b2d      	cmp	r3, #45	; 0x2d
 800abc8:	d14c      	bne.n	800ac64 <_tzset_unlocked_r+0x118>
 800abca:	3701      	adds	r7, #1
 800abcc:	f04f 38ff 	mov.w	r8, #4294967295
 800abd0:	f10d 0a20 	add.w	sl, sp, #32
 800abd4:	f10d 0b1e 	add.w	fp, sp, #30
 800abd8:	2400      	movs	r4, #0
 800abda:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800abde:	4997      	ldr	r1, [pc, #604]	; (800ae3c <_tzset_unlocked_r+0x2f0>)
 800abe0:	9603      	str	r6, [sp, #12]
 800abe2:	f8cd b000 	str.w	fp, [sp]
 800abe6:	4633      	mov	r3, r6
 800abe8:	aa07      	add	r2, sp, #28
 800abea:	4638      	mov	r0, r7
 800abec:	f8ad 401e 	strh.w	r4, [sp, #30]
 800abf0:	f8ad 4020 	strh.w	r4, [sp, #32]
 800abf4:	f002 f8ac 	bl	800cd50 <siscanf>
 800abf8:	42a0      	cmp	r0, r4
 800abfa:	ddc1      	ble.n	800ab80 <_tzset_unlocked_r+0x34>
 800abfc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ac00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ac04:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800ae48 <_tzset_unlocked_r+0x2fc>
 800ac08:	213c      	movs	r1, #60	; 0x3c
 800ac0a:	fb01 3302 	mla	r3, r1, r2, r3
 800ac0e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ac12:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ac16:	fb01 3302 	mla	r3, r1, r2, r3
 800ac1a:	fb08 f303 	mul.w	r3, r8, r3
 800ac1e:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800ae30 <_tzset_unlocked_r+0x2e4>
 800ac22:	62ab      	str	r3, [r5, #40]	; 0x28
 800ac24:	4b83      	ldr	r3, [pc, #524]	; (800ae34 <_tzset_unlocked_r+0x2e8>)
 800ac26:	f8c8 3000 	str.w	r3, [r8]
 800ac2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac2c:	4982      	ldr	r1, [pc, #520]	; (800ae38 <_tzset_unlocked_r+0x2ec>)
 800ac2e:	441f      	add	r7, r3
 800ac30:	464a      	mov	r2, r9
 800ac32:	4633      	mov	r3, r6
 800ac34:	4638      	mov	r0, r7
 800ac36:	f002 f88b 	bl	800cd50 <siscanf>
 800ac3a:	42a0      	cmp	r0, r4
 800ac3c:	dc18      	bgt.n	800ac70 <_tzset_unlocked_r+0x124>
 800ac3e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac42:	f8c8 3004 	str.w	r3, [r8, #4]
 800ac46:	4b77      	ldr	r3, [pc, #476]	; (800ae24 <_tzset_unlocked_r+0x2d8>)
 800ac48:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ac4a:	601a      	str	r2, [r3, #0]
 800ac4c:	4b77      	ldr	r3, [pc, #476]	; (800ae2c <_tzset_unlocked_r+0x2e0>)
 800ac4e:	601c      	str	r4, [r3, #0]
 800ac50:	e796      	b.n	800ab80 <_tzset_unlocked_r+0x34>
 800ac52:	f7f5 fb85 	bl	8000360 <strcmp>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d198      	bne.n	800ab8c <_tzset_unlocked_r+0x40>
 800ac5a:	e791      	b.n	800ab80 <_tzset_unlocked_r+0x34>
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	f002 f8e8 	bl	800ce32 <strcpy>
 800ac62:	e7a0      	b.n	800aba6 <_tzset_unlocked_r+0x5a>
 800ac64:	2b2b      	cmp	r3, #43	; 0x2b
 800ac66:	bf08      	it	eq
 800ac68:	3701      	addeq	r7, #1
 800ac6a:	f04f 0801 	mov.w	r8, #1
 800ac6e:	e7af      	b.n	800abd0 <_tzset_unlocked_r+0x84>
 800ac70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac72:	f8c8 9004 	str.w	r9, [r8, #4]
 800ac76:	18fc      	adds	r4, r7, r3
 800ac78:	5cfb      	ldrb	r3, [r7, r3]
 800ac7a:	2b2d      	cmp	r3, #45	; 0x2d
 800ac7c:	f040 808b 	bne.w	800ad96 <_tzset_unlocked_r+0x24a>
 800ac80:	3401      	adds	r4, #1
 800ac82:	f04f 37ff 	mov.w	r7, #4294967295
 800ac86:	2300      	movs	r3, #0
 800ac88:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ac8c:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ac90:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ac94:	930a      	str	r3, [sp, #40]	; 0x28
 800ac96:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ac9a:	e9cd b600 	strd	fp, r6, [sp]
 800ac9e:	4967      	ldr	r1, [pc, #412]	; (800ae3c <_tzset_unlocked_r+0x2f0>)
 800aca0:	4633      	mov	r3, r6
 800aca2:	aa07      	add	r2, sp, #28
 800aca4:	4620      	mov	r0, r4
 800aca6:	f002 f853 	bl	800cd50 <siscanf>
 800acaa:	2800      	cmp	r0, #0
 800acac:	dc78      	bgt.n	800ada0 <_tzset_unlocked_r+0x254>
 800acae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800acb0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800acb4:	652b      	str	r3, [r5, #80]	; 0x50
 800acb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acb8:	462f      	mov	r7, r5
 800acba:	441c      	add	r4, r3
 800acbc:	f04f 0900 	mov.w	r9, #0
 800acc0:	7823      	ldrb	r3, [r4, #0]
 800acc2:	2b2c      	cmp	r3, #44	; 0x2c
 800acc4:	bf08      	it	eq
 800acc6:	3401      	addeq	r4, #1
 800acc8:	f894 8000 	ldrb.w	r8, [r4]
 800accc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800acd0:	d178      	bne.n	800adc4 <_tzset_unlocked_r+0x278>
 800acd2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800acd6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800acda:	ab09      	add	r3, sp, #36	; 0x24
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	4958      	ldr	r1, [pc, #352]	; (800ae40 <_tzset_unlocked_r+0x2f4>)
 800ace0:	9603      	str	r6, [sp, #12]
 800ace2:	4633      	mov	r3, r6
 800ace4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ace8:	4620      	mov	r0, r4
 800acea:	f002 f831 	bl	800cd50 <siscanf>
 800acee:	2803      	cmp	r0, #3
 800acf0:	f47f af46 	bne.w	800ab80 <_tzset_unlocked_r+0x34>
 800acf4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800acf8:	1e4b      	subs	r3, r1, #1
 800acfa:	2b0b      	cmp	r3, #11
 800acfc:	f63f af40 	bhi.w	800ab80 <_tzset_unlocked_r+0x34>
 800ad00:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ad04:	1e53      	subs	r3, r2, #1
 800ad06:	2b04      	cmp	r3, #4
 800ad08:	f63f af3a 	bhi.w	800ab80 <_tzset_unlocked_r+0x34>
 800ad0c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ad10:	2b06      	cmp	r3, #6
 800ad12:	f63f af35 	bhi.w	800ab80 <_tzset_unlocked_r+0x34>
 800ad16:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ad1a:	f887 8008 	strb.w	r8, [r7, #8]
 800ad1e:	617b      	str	r3, [r7, #20]
 800ad20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad22:	eb04 0803 	add.w	r8, r4, r3
 800ad26:	2302      	movs	r3, #2
 800ad28:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ad32:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ad36:	930a      	str	r3, [sp, #40]	; 0x28
 800ad38:	f898 3000 	ldrb.w	r3, [r8]
 800ad3c:	2b2f      	cmp	r3, #47	; 0x2f
 800ad3e:	d109      	bne.n	800ad54 <_tzset_unlocked_r+0x208>
 800ad40:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ad44:	e9cd b600 	strd	fp, r6, [sp]
 800ad48:	493e      	ldr	r1, [pc, #248]	; (800ae44 <_tzset_unlocked_r+0x2f8>)
 800ad4a:	4633      	mov	r3, r6
 800ad4c:	aa07      	add	r2, sp, #28
 800ad4e:	4640      	mov	r0, r8
 800ad50:	f001 fffe 	bl	800cd50 <siscanf>
 800ad54:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ad58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ad5c:	213c      	movs	r1, #60	; 0x3c
 800ad5e:	fb01 3302 	mla	r3, r1, r2, r3
 800ad62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ad66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800ad6a:	fb01 3302 	mla	r3, r1, r2, r3
 800ad6e:	61bb      	str	r3, [r7, #24]
 800ad70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ad72:	3728      	adds	r7, #40	; 0x28
 800ad74:	4444      	add	r4, r8
 800ad76:	f1b9 0f00 	cmp.w	r9, #0
 800ad7a:	d020      	beq.n	800adbe <_tzset_unlocked_r+0x272>
 800ad7c:	6868      	ldr	r0, [r5, #4]
 800ad7e:	f7ff fe29 	bl	800a9d4 <__tzcalc_limits>
 800ad82:	4b28      	ldr	r3, [pc, #160]	; (800ae24 <_tzset_unlocked_r+0x2d8>)
 800ad84:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ad86:	601a      	str	r2, [r3, #0]
 800ad88:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800ad8a:	1a9b      	subs	r3, r3, r2
 800ad8c:	4a27      	ldr	r2, [pc, #156]	; (800ae2c <_tzset_unlocked_r+0x2e0>)
 800ad8e:	bf18      	it	ne
 800ad90:	2301      	movne	r3, #1
 800ad92:	6013      	str	r3, [r2, #0]
 800ad94:	e6f4      	b.n	800ab80 <_tzset_unlocked_r+0x34>
 800ad96:	2b2b      	cmp	r3, #43	; 0x2b
 800ad98:	bf08      	it	eq
 800ad9a:	3401      	addeq	r4, #1
 800ad9c:	2701      	movs	r7, #1
 800ad9e:	e772      	b.n	800ac86 <_tzset_unlocked_r+0x13a>
 800ada0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ada4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ada8:	213c      	movs	r1, #60	; 0x3c
 800adaa:	fb01 3302 	mla	r3, r1, r2, r3
 800adae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800adb2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800adb6:	fb01 3302 	mla	r3, r1, r2, r3
 800adba:	437b      	muls	r3, r7
 800adbc:	e77a      	b.n	800acb4 <_tzset_unlocked_r+0x168>
 800adbe:	f04f 0901 	mov.w	r9, #1
 800adc2:	e77d      	b.n	800acc0 <_tzset_unlocked_r+0x174>
 800adc4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800adc8:	bf06      	itte	eq
 800adca:	3401      	addeq	r4, #1
 800adcc:	4643      	moveq	r3, r8
 800adce:	2344      	movne	r3, #68	; 0x44
 800add0:	220a      	movs	r2, #10
 800add2:	a90b      	add	r1, sp, #44	; 0x2c
 800add4:	4620      	mov	r0, r4
 800add6:	9305      	str	r3, [sp, #20]
 800add8:	f002 f8bc 	bl	800cf54 <strtoul>
 800addc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ade0:	9b05      	ldr	r3, [sp, #20]
 800ade2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800ade6:	45a0      	cmp	r8, r4
 800ade8:	d114      	bne.n	800ae14 <_tzset_unlocked_r+0x2c8>
 800adea:	234d      	movs	r3, #77	; 0x4d
 800adec:	f1b9 0f00 	cmp.w	r9, #0
 800adf0:	d107      	bne.n	800ae02 <_tzset_unlocked_r+0x2b6>
 800adf2:	722b      	strb	r3, [r5, #8]
 800adf4:	2103      	movs	r1, #3
 800adf6:	2302      	movs	r3, #2
 800adf8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800adfc:	f8c5 9014 	str.w	r9, [r5, #20]
 800ae00:	e791      	b.n	800ad26 <_tzset_unlocked_r+0x1da>
 800ae02:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800ae06:	220b      	movs	r2, #11
 800ae08:	2301      	movs	r3, #1
 800ae0a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800ae0e:	2300      	movs	r3, #0
 800ae10:	63eb      	str	r3, [r5, #60]	; 0x3c
 800ae12:	e788      	b.n	800ad26 <_tzset_unlocked_r+0x1da>
 800ae14:	b280      	uxth	r0, r0
 800ae16:	723b      	strb	r3, [r7, #8]
 800ae18:	6178      	str	r0, [r7, #20]
 800ae1a:	e784      	b.n	800ad26 <_tzset_unlocked_r+0x1da>
 800ae1c:	0802610a 	.word	0x0802610a
 800ae20:	20000b40 	.word	0x20000b40
 800ae24:	20000b48 	.word	0x20000b48
 800ae28:	0802610d 	.word	0x0802610d
 800ae2c:	20000b44 	.word	0x20000b44
 800ae30:	20000130 	.word	0x20000130
 800ae34:	20000b33 	.word	0x20000b33
 800ae38:	08026111 	.word	0x08026111
 800ae3c:	08026134 	.word	0x08026134
 800ae40:	08026120 	.word	0x08026120
 800ae44:	08026133 	.word	0x08026133
 800ae48:	20000b28 	.word	0x20000b28

0800ae4c <asctime>:
 800ae4c:	4b0d      	ldr	r3, [pc, #52]	; (800ae84 <asctime+0x38>)
 800ae4e:	b570      	push	{r4, r5, r6, lr}
 800ae50:	681d      	ldr	r5, [r3, #0]
 800ae52:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800ae54:	4604      	mov	r4, r0
 800ae56:	b976      	cbnz	r6, 800ae76 <asctime+0x2a>
 800ae58:	201a      	movs	r0, #26
 800ae5a:	f7fe ffe3 	bl	8009e24 <malloc>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	6428      	str	r0, [r5, #64]	; 0x40
 800ae62:	b920      	cbnz	r0, 800ae6e <asctime+0x22>
 800ae64:	4b08      	ldr	r3, [pc, #32]	; (800ae88 <asctime+0x3c>)
 800ae66:	4809      	ldr	r0, [pc, #36]	; (800ae8c <asctime+0x40>)
 800ae68:	2137      	movs	r1, #55	; 0x37
 800ae6a:	f000 f837 	bl	800aedc <__assert_func>
 800ae6e:	221a      	movs	r2, #26
 800ae70:	4631      	mov	r1, r6
 800ae72:	f7fe ffe7 	bl	8009e44 <memset>
 800ae76:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800ae78:	4620      	mov	r0, r4
 800ae7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae7e:	f000 b807 	b.w	800ae90 <asctime_r>
 800ae82:	bf00      	nop
 800ae84:	200000cc 	.word	0x200000cc
 800ae88:	08026004 	.word	0x08026004
 800ae8c:	08026146 	.word	0x08026146

0800ae90 <asctime_r>:
 800ae90:	b510      	push	{r4, lr}
 800ae92:	460c      	mov	r4, r1
 800ae94:	6941      	ldr	r1, [r0, #20]
 800ae96:	6903      	ldr	r3, [r0, #16]
 800ae98:	6982      	ldr	r2, [r0, #24]
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800aea0:	9104      	str	r1, [sp, #16]
 800aea2:	6801      	ldr	r1, [r0, #0]
 800aea4:	9103      	str	r1, [sp, #12]
 800aea6:	6841      	ldr	r1, [r0, #4]
 800aea8:	9102      	str	r1, [sp, #8]
 800aeaa:	6881      	ldr	r1, [r0, #8]
 800aeac:	9101      	str	r1, [sp, #4]
 800aeae:	68c1      	ldr	r1, [r0, #12]
 800aeb0:	9100      	str	r1, [sp, #0]
 800aeb2:	4907      	ldr	r1, [pc, #28]	; (800aed0 <asctime_r+0x40>)
 800aeb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aeb8:	440b      	add	r3, r1
 800aeba:	4906      	ldr	r1, [pc, #24]	; (800aed4 <asctime_r+0x44>)
 800aebc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800aec0:	440a      	add	r2, r1
 800aec2:	4620      	mov	r0, r4
 800aec4:	4904      	ldr	r1, [pc, #16]	; (800aed8 <asctime_r+0x48>)
 800aec6:	f001 ff23 	bl	800cd10 <siprintf>
 800aeca:	4620      	mov	r0, r4
 800aecc:	b006      	add	sp, #24
 800aece:	bd10      	pop	{r4, pc}
 800aed0:	080261d7 	.word	0x080261d7
 800aed4:	080261c2 	.word	0x080261c2
 800aed8:	080261a2 	.word	0x080261a2

0800aedc <__assert_func>:
 800aedc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aede:	4614      	mov	r4, r2
 800aee0:	461a      	mov	r2, r3
 800aee2:	4b09      	ldr	r3, [pc, #36]	; (800af08 <__assert_func+0x2c>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4605      	mov	r5, r0
 800aee8:	68d8      	ldr	r0, [r3, #12]
 800aeea:	b14c      	cbz	r4, 800af00 <__assert_func+0x24>
 800aeec:	4b07      	ldr	r3, [pc, #28]	; (800af0c <__assert_func+0x30>)
 800aeee:	9100      	str	r1, [sp, #0]
 800aef0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aef4:	4906      	ldr	r1, [pc, #24]	; (800af10 <__assert_func+0x34>)
 800aef6:	462b      	mov	r3, r5
 800aef8:	f000 ff5e 	bl	800bdb8 <fiprintf>
 800aefc:	f002 f906 	bl	800d10c <abort>
 800af00:	4b04      	ldr	r3, [pc, #16]	; (800af14 <__assert_func+0x38>)
 800af02:	461c      	mov	r4, r3
 800af04:	e7f3      	b.n	800aeee <__assert_func+0x12>
 800af06:	bf00      	nop
 800af08:	200000cc 	.word	0x200000cc
 800af0c:	080261fb 	.word	0x080261fb
 800af10:	08026208 	.word	0x08026208
 800af14:	080261c1 	.word	0x080261c1

0800af18 <quorem>:
 800af18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1c:	6903      	ldr	r3, [r0, #16]
 800af1e:	690c      	ldr	r4, [r1, #16]
 800af20:	42a3      	cmp	r3, r4
 800af22:	4607      	mov	r7, r0
 800af24:	f2c0 8081 	blt.w	800b02a <quorem+0x112>
 800af28:	3c01      	subs	r4, #1
 800af2a:	f101 0814 	add.w	r8, r1, #20
 800af2e:	f100 0514 	add.w	r5, r0, #20
 800af32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af36:	9301      	str	r3, [sp, #4]
 800af38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af40:	3301      	adds	r3, #1
 800af42:	429a      	cmp	r2, r3
 800af44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af4c:	fbb2 f6f3 	udiv	r6, r2, r3
 800af50:	d331      	bcc.n	800afb6 <quorem+0x9e>
 800af52:	f04f 0e00 	mov.w	lr, #0
 800af56:	4640      	mov	r0, r8
 800af58:	46ac      	mov	ip, r5
 800af5a:	46f2      	mov	sl, lr
 800af5c:	f850 2b04 	ldr.w	r2, [r0], #4
 800af60:	b293      	uxth	r3, r2
 800af62:	fb06 e303 	mla	r3, r6, r3, lr
 800af66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	ebaa 0303 	sub.w	r3, sl, r3
 800af70:	f8dc a000 	ldr.w	sl, [ip]
 800af74:	0c12      	lsrs	r2, r2, #16
 800af76:	fa13 f38a 	uxtah	r3, r3, sl
 800af7a:	fb06 e202 	mla	r2, r6, r2, lr
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	9b00      	ldr	r3, [sp, #0]
 800af82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af86:	b292      	uxth	r2, r2
 800af88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af90:	f8bd 3000 	ldrh.w	r3, [sp]
 800af94:	4581      	cmp	r9, r0
 800af96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af9a:	f84c 3b04 	str.w	r3, [ip], #4
 800af9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800afa2:	d2db      	bcs.n	800af5c <quorem+0x44>
 800afa4:	f855 300b 	ldr.w	r3, [r5, fp]
 800afa8:	b92b      	cbnz	r3, 800afb6 <quorem+0x9e>
 800afaa:	9b01      	ldr	r3, [sp, #4]
 800afac:	3b04      	subs	r3, #4
 800afae:	429d      	cmp	r5, r3
 800afb0:	461a      	mov	r2, r3
 800afb2:	d32e      	bcc.n	800b012 <quorem+0xfa>
 800afb4:	613c      	str	r4, [r7, #16]
 800afb6:	4638      	mov	r0, r7
 800afb8:	f001 fadc 	bl	800c574 <__mcmp>
 800afbc:	2800      	cmp	r0, #0
 800afbe:	db24      	blt.n	800b00a <quorem+0xf2>
 800afc0:	3601      	adds	r6, #1
 800afc2:	4628      	mov	r0, r5
 800afc4:	f04f 0c00 	mov.w	ip, #0
 800afc8:	f858 2b04 	ldr.w	r2, [r8], #4
 800afcc:	f8d0 e000 	ldr.w	lr, [r0]
 800afd0:	b293      	uxth	r3, r2
 800afd2:	ebac 0303 	sub.w	r3, ip, r3
 800afd6:	0c12      	lsrs	r2, r2, #16
 800afd8:	fa13 f38e 	uxtah	r3, r3, lr
 800afdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800afe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afea:	45c1      	cmp	r9, r8
 800afec:	f840 3b04 	str.w	r3, [r0], #4
 800aff0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aff4:	d2e8      	bcs.n	800afc8 <quorem+0xb0>
 800aff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800affa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800affe:	b922      	cbnz	r2, 800b00a <quorem+0xf2>
 800b000:	3b04      	subs	r3, #4
 800b002:	429d      	cmp	r5, r3
 800b004:	461a      	mov	r2, r3
 800b006:	d30a      	bcc.n	800b01e <quorem+0x106>
 800b008:	613c      	str	r4, [r7, #16]
 800b00a:	4630      	mov	r0, r6
 800b00c:	b003      	add	sp, #12
 800b00e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b012:	6812      	ldr	r2, [r2, #0]
 800b014:	3b04      	subs	r3, #4
 800b016:	2a00      	cmp	r2, #0
 800b018:	d1cc      	bne.n	800afb4 <quorem+0x9c>
 800b01a:	3c01      	subs	r4, #1
 800b01c:	e7c7      	b.n	800afae <quorem+0x96>
 800b01e:	6812      	ldr	r2, [r2, #0]
 800b020:	3b04      	subs	r3, #4
 800b022:	2a00      	cmp	r2, #0
 800b024:	d1f0      	bne.n	800b008 <quorem+0xf0>
 800b026:	3c01      	subs	r4, #1
 800b028:	e7eb      	b.n	800b002 <quorem+0xea>
 800b02a:	2000      	movs	r0, #0
 800b02c:	e7ee      	b.n	800b00c <quorem+0xf4>
	...

0800b030 <_dtoa_r>:
 800b030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b034:	ed2d 8b04 	vpush	{d8-d9}
 800b038:	ec57 6b10 	vmov	r6, r7, d0
 800b03c:	b093      	sub	sp, #76	; 0x4c
 800b03e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b040:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b044:	9106      	str	r1, [sp, #24]
 800b046:	ee10 aa10 	vmov	sl, s0
 800b04a:	4604      	mov	r4, r0
 800b04c:	9209      	str	r2, [sp, #36]	; 0x24
 800b04e:	930c      	str	r3, [sp, #48]	; 0x30
 800b050:	46bb      	mov	fp, r7
 800b052:	b975      	cbnz	r5, 800b072 <_dtoa_r+0x42>
 800b054:	2010      	movs	r0, #16
 800b056:	f7fe fee5 	bl	8009e24 <malloc>
 800b05a:	4602      	mov	r2, r0
 800b05c:	6260      	str	r0, [r4, #36]	; 0x24
 800b05e:	b920      	cbnz	r0, 800b06a <_dtoa_r+0x3a>
 800b060:	4ba7      	ldr	r3, [pc, #668]	; (800b300 <_dtoa_r+0x2d0>)
 800b062:	21ea      	movs	r1, #234	; 0xea
 800b064:	48a7      	ldr	r0, [pc, #668]	; (800b304 <_dtoa_r+0x2d4>)
 800b066:	f7ff ff39 	bl	800aedc <__assert_func>
 800b06a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b06e:	6005      	str	r5, [r0, #0]
 800b070:	60c5      	str	r5, [r0, #12]
 800b072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b074:	6819      	ldr	r1, [r3, #0]
 800b076:	b151      	cbz	r1, 800b08e <_dtoa_r+0x5e>
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	604a      	str	r2, [r1, #4]
 800b07c:	2301      	movs	r3, #1
 800b07e:	4093      	lsls	r3, r2
 800b080:	608b      	str	r3, [r1, #8]
 800b082:	4620      	mov	r0, r4
 800b084:	f001 f834 	bl	800c0f0 <_Bfree>
 800b088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b08a:	2200      	movs	r2, #0
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	1e3b      	subs	r3, r7, #0
 800b090:	bfaa      	itet	ge
 800b092:	2300      	movge	r3, #0
 800b094:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b098:	f8c8 3000 	strge.w	r3, [r8]
 800b09c:	4b9a      	ldr	r3, [pc, #616]	; (800b308 <_dtoa_r+0x2d8>)
 800b09e:	bfbc      	itt	lt
 800b0a0:	2201      	movlt	r2, #1
 800b0a2:	f8c8 2000 	strlt.w	r2, [r8]
 800b0a6:	ea33 030b 	bics.w	r3, r3, fp
 800b0aa:	d11b      	bne.n	800b0e4 <_dtoa_r+0xb4>
 800b0ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0ae:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0b8:	4333      	orrs	r3, r6
 800b0ba:	f000 8592 	beq.w	800bbe2 <_dtoa_r+0xbb2>
 800b0be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0c0:	b963      	cbnz	r3, 800b0dc <_dtoa_r+0xac>
 800b0c2:	4b92      	ldr	r3, [pc, #584]	; (800b30c <_dtoa_r+0x2dc>)
 800b0c4:	e022      	b.n	800b10c <_dtoa_r+0xdc>
 800b0c6:	4b92      	ldr	r3, [pc, #584]	; (800b310 <_dtoa_r+0x2e0>)
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0ce:	6013      	str	r3, [r2, #0]
 800b0d0:	9801      	ldr	r0, [sp, #4]
 800b0d2:	b013      	add	sp, #76	; 0x4c
 800b0d4:	ecbd 8b04 	vpop	{d8-d9}
 800b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0dc:	4b8b      	ldr	r3, [pc, #556]	; (800b30c <_dtoa_r+0x2dc>)
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	3303      	adds	r3, #3
 800b0e2:	e7f3      	b.n	800b0cc <_dtoa_r+0x9c>
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	4650      	mov	r0, sl
 800b0ea:	4659      	mov	r1, fp
 800b0ec:	f7f5 fd66 	bl	8000bbc <__aeabi_dcmpeq>
 800b0f0:	ec4b ab19 	vmov	d9, sl, fp
 800b0f4:	4680      	mov	r8, r0
 800b0f6:	b158      	cbz	r0, 800b110 <_dtoa_r+0xe0>
 800b0f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b100:	2b00      	cmp	r3, #0
 800b102:	f000 856b 	beq.w	800bbdc <_dtoa_r+0xbac>
 800b106:	4883      	ldr	r0, [pc, #524]	; (800b314 <_dtoa_r+0x2e4>)
 800b108:	6018      	str	r0, [r3, #0]
 800b10a:	1e43      	subs	r3, r0, #1
 800b10c:	9301      	str	r3, [sp, #4]
 800b10e:	e7df      	b.n	800b0d0 <_dtoa_r+0xa0>
 800b110:	ec4b ab10 	vmov	d0, sl, fp
 800b114:	aa10      	add	r2, sp, #64	; 0x40
 800b116:	a911      	add	r1, sp, #68	; 0x44
 800b118:	4620      	mov	r0, r4
 800b11a:	f001 fad1 	bl	800c6c0 <__d2b>
 800b11e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b122:	ee08 0a10 	vmov	s16, r0
 800b126:	2d00      	cmp	r5, #0
 800b128:	f000 8084 	beq.w	800b234 <_dtoa_r+0x204>
 800b12c:	ee19 3a90 	vmov	r3, s19
 800b130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b134:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b138:	4656      	mov	r6, sl
 800b13a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b13e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b142:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b146:	4b74      	ldr	r3, [pc, #464]	; (800b318 <_dtoa_r+0x2e8>)
 800b148:	2200      	movs	r2, #0
 800b14a:	4630      	mov	r0, r6
 800b14c:	4639      	mov	r1, r7
 800b14e:	f7f5 f915 	bl	800037c <__aeabi_dsub>
 800b152:	a365      	add	r3, pc, #404	; (adr r3, 800b2e8 <_dtoa_r+0x2b8>)
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	f7f5 fac8 	bl	80006ec <__aeabi_dmul>
 800b15c:	a364      	add	r3, pc, #400	; (adr r3, 800b2f0 <_dtoa_r+0x2c0>)
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	f7f5 f90d 	bl	8000380 <__adddf3>
 800b166:	4606      	mov	r6, r0
 800b168:	4628      	mov	r0, r5
 800b16a:	460f      	mov	r7, r1
 800b16c:	f7f5 fa54 	bl	8000618 <__aeabi_i2d>
 800b170:	a361      	add	r3, pc, #388	; (adr r3, 800b2f8 <_dtoa_r+0x2c8>)
 800b172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b176:	f7f5 fab9 	bl	80006ec <__aeabi_dmul>
 800b17a:	4602      	mov	r2, r0
 800b17c:	460b      	mov	r3, r1
 800b17e:	4630      	mov	r0, r6
 800b180:	4639      	mov	r1, r7
 800b182:	f7f5 f8fd 	bl	8000380 <__adddf3>
 800b186:	4606      	mov	r6, r0
 800b188:	460f      	mov	r7, r1
 800b18a:	f7f5 fd5f 	bl	8000c4c <__aeabi_d2iz>
 800b18e:	2200      	movs	r2, #0
 800b190:	9000      	str	r0, [sp, #0]
 800b192:	2300      	movs	r3, #0
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 fd1a 	bl	8000bd0 <__aeabi_dcmplt>
 800b19c:	b150      	cbz	r0, 800b1b4 <_dtoa_r+0x184>
 800b19e:	9800      	ldr	r0, [sp, #0]
 800b1a0:	f7f5 fa3a 	bl	8000618 <__aeabi_i2d>
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	f7f5 fd08 	bl	8000bbc <__aeabi_dcmpeq>
 800b1ac:	b910      	cbnz	r0, 800b1b4 <_dtoa_r+0x184>
 800b1ae:	9b00      	ldr	r3, [sp, #0]
 800b1b0:	3b01      	subs	r3, #1
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	9b00      	ldr	r3, [sp, #0]
 800b1b6:	2b16      	cmp	r3, #22
 800b1b8:	d85a      	bhi.n	800b270 <_dtoa_r+0x240>
 800b1ba:	9a00      	ldr	r2, [sp, #0]
 800b1bc:	4b57      	ldr	r3, [pc, #348]	; (800b31c <_dtoa_r+0x2ec>)
 800b1be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	ec51 0b19 	vmov	r0, r1, d9
 800b1ca:	f7f5 fd01 	bl	8000bd0 <__aeabi_dcmplt>
 800b1ce:	2800      	cmp	r0, #0
 800b1d0:	d050      	beq.n	800b274 <_dtoa_r+0x244>
 800b1d2:	9b00      	ldr	r3, [sp, #0]
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	9300      	str	r3, [sp, #0]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1de:	1b5d      	subs	r5, r3, r5
 800b1e0:	1e6b      	subs	r3, r5, #1
 800b1e2:	9305      	str	r3, [sp, #20]
 800b1e4:	bf45      	ittet	mi
 800b1e6:	f1c5 0301 	rsbmi	r3, r5, #1
 800b1ea:	9304      	strmi	r3, [sp, #16]
 800b1ec:	2300      	movpl	r3, #0
 800b1ee:	2300      	movmi	r3, #0
 800b1f0:	bf4c      	ite	mi
 800b1f2:	9305      	strmi	r3, [sp, #20]
 800b1f4:	9304      	strpl	r3, [sp, #16]
 800b1f6:	9b00      	ldr	r3, [sp, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	db3d      	blt.n	800b278 <_dtoa_r+0x248>
 800b1fc:	9b05      	ldr	r3, [sp, #20]
 800b1fe:	9a00      	ldr	r2, [sp, #0]
 800b200:	920a      	str	r2, [sp, #40]	; 0x28
 800b202:	4413      	add	r3, r2
 800b204:	9305      	str	r3, [sp, #20]
 800b206:	2300      	movs	r3, #0
 800b208:	9307      	str	r3, [sp, #28]
 800b20a:	9b06      	ldr	r3, [sp, #24]
 800b20c:	2b09      	cmp	r3, #9
 800b20e:	f200 8089 	bhi.w	800b324 <_dtoa_r+0x2f4>
 800b212:	2b05      	cmp	r3, #5
 800b214:	bfc4      	itt	gt
 800b216:	3b04      	subgt	r3, #4
 800b218:	9306      	strgt	r3, [sp, #24]
 800b21a:	9b06      	ldr	r3, [sp, #24]
 800b21c:	f1a3 0302 	sub.w	r3, r3, #2
 800b220:	bfcc      	ite	gt
 800b222:	2500      	movgt	r5, #0
 800b224:	2501      	movle	r5, #1
 800b226:	2b03      	cmp	r3, #3
 800b228:	f200 8087 	bhi.w	800b33a <_dtoa_r+0x30a>
 800b22c:	e8df f003 	tbb	[pc, r3]
 800b230:	59383a2d 	.word	0x59383a2d
 800b234:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b238:	441d      	add	r5, r3
 800b23a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b23e:	2b20      	cmp	r3, #32
 800b240:	bfc1      	itttt	gt
 800b242:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b246:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b24a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b24e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b252:	bfda      	itte	le
 800b254:	f1c3 0320 	rsble	r3, r3, #32
 800b258:	fa06 f003 	lslle.w	r0, r6, r3
 800b25c:	4318      	orrgt	r0, r3
 800b25e:	f7f5 f9cb 	bl	80005f8 <__aeabi_ui2d>
 800b262:	2301      	movs	r3, #1
 800b264:	4606      	mov	r6, r0
 800b266:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b26a:	3d01      	subs	r5, #1
 800b26c:	930e      	str	r3, [sp, #56]	; 0x38
 800b26e:	e76a      	b.n	800b146 <_dtoa_r+0x116>
 800b270:	2301      	movs	r3, #1
 800b272:	e7b2      	b.n	800b1da <_dtoa_r+0x1aa>
 800b274:	900b      	str	r0, [sp, #44]	; 0x2c
 800b276:	e7b1      	b.n	800b1dc <_dtoa_r+0x1ac>
 800b278:	9b04      	ldr	r3, [sp, #16]
 800b27a:	9a00      	ldr	r2, [sp, #0]
 800b27c:	1a9b      	subs	r3, r3, r2
 800b27e:	9304      	str	r3, [sp, #16]
 800b280:	4253      	negs	r3, r2
 800b282:	9307      	str	r3, [sp, #28]
 800b284:	2300      	movs	r3, #0
 800b286:	930a      	str	r3, [sp, #40]	; 0x28
 800b288:	e7bf      	b.n	800b20a <_dtoa_r+0x1da>
 800b28a:	2300      	movs	r3, #0
 800b28c:	9308      	str	r3, [sp, #32]
 800b28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b290:	2b00      	cmp	r3, #0
 800b292:	dc55      	bgt.n	800b340 <_dtoa_r+0x310>
 800b294:	2301      	movs	r3, #1
 800b296:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b29a:	461a      	mov	r2, r3
 800b29c:	9209      	str	r2, [sp, #36]	; 0x24
 800b29e:	e00c      	b.n	800b2ba <_dtoa_r+0x28a>
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e7f3      	b.n	800b28c <_dtoa_r+0x25c>
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2a8:	9308      	str	r3, [sp, #32]
 800b2aa:	9b00      	ldr	r3, [sp, #0]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	9302      	str	r3, [sp, #8]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	9303      	str	r3, [sp, #12]
 800b2b6:	bfb8      	it	lt
 800b2b8:	2301      	movlt	r3, #1
 800b2ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2bc:	2200      	movs	r2, #0
 800b2be:	6042      	str	r2, [r0, #4]
 800b2c0:	2204      	movs	r2, #4
 800b2c2:	f102 0614 	add.w	r6, r2, #20
 800b2c6:	429e      	cmp	r6, r3
 800b2c8:	6841      	ldr	r1, [r0, #4]
 800b2ca:	d93d      	bls.n	800b348 <_dtoa_r+0x318>
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f000 fecf 	bl	800c070 <_Balloc>
 800b2d2:	9001      	str	r0, [sp, #4]
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	d13b      	bne.n	800b350 <_dtoa_r+0x320>
 800b2d8:	4b11      	ldr	r3, [pc, #68]	; (800b320 <_dtoa_r+0x2f0>)
 800b2da:	4602      	mov	r2, r0
 800b2dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b2e0:	e6c0      	b.n	800b064 <_dtoa_r+0x34>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e7df      	b.n	800b2a6 <_dtoa_r+0x276>
 800b2e6:	bf00      	nop
 800b2e8:	636f4361 	.word	0x636f4361
 800b2ec:	3fd287a7 	.word	0x3fd287a7
 800b2f0:	8b60c8b3 	.word	0x8b60c8b3
 800b2f4:	3fc68a28 	.word	0x3fc68a28
 800b2f8:	509f79fb 	.word	0x509f79fb
 800b2fc:	3fd34413 	.word	0x3fd34413
 800b300:	08026004 	.word	0x08026004
 800b304:	08026244 	.word	0x08026244
 800b308:	7ff00000 	.word	0x7ff00000
 800b30c:	08026240 	.word	0x08026240
 800b310:	08026237 	.word	0x08026237
 800b314:	0802658d 	.word	0x0802658d
 800b318:	3ff80000 	.word	0x3ff80000
 800b31c:	08026398 	.word	0x08026398
 800b320:	0802629f 	.word	0x0802629f
 800b324:	2501      	movs	r5, #1
 800b326:	2300      	movs	r3, #0
 800b328:	9306      	str	r3, [sp, #24]
 800b32a:	9508      	str	r5, [sp, #32]
 800b32c:	f04f 33ff 	mov.w	r3, #4294967295
 800b330:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b334:	2200      	movs	r2, #0
 800b336:	2312      	movs	r3, #18
 800b338:	e7b0      	b.n	800b29c <_dtoa_r+0x26c>
 800b33a:	2301      	movs	r3, #1
 800b33c:	9308      	str	r3, [sp, #32]
 800b33e:	e7f5      	b.n	800b32c <_dtoa_r+0x2fc>
 800b340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b342:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b346:	e7b8      	b.n	800b2ba <_dtoa_r+0x28a>
 800b348:	3101      	adds	r1, #1
 800b34a:	6041      	str	r1, [r0, #4]
 800b34c:	0052      	lsls	r2, r2, #1
 800b34e:	e7b8      	b.n	800b2c2 <_dtoa_r+0x292>
 800b350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b352:	9a01      	ldr	r2, [sp, #4]
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	9b03      	ldr	r3, [sp, #12]
 800b358:	2b0e      	cmp	r3, #14
 800b35a:	f200 809d 	bhi.w	800b498 <_dtoa_r+0x468>
 800b35e:	2d00      	cmp	r5, #0
 800b360:	f000 809a 	beq.w	800b498 <_dtoa_r+0x468>
 800b364:	9b00      	ldr	r3, [sp, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	dd32      	ble.n	800b3d0 <_dtoa_r+0x3a0>
 800b36a:	4ab7      	ldr	r2, [pc, #732]	; (800b648 <_dtoa_r+0x618>)
 800b36c:	f003 030f 	and.w	r3, r3, #15
 800b370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b374:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b378:	9b00      	ldr	r3, [sp, #0]
 800b37a:	05d8      	lsls	r0, r3, #23
 800b37c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b380:	d516      	bpl.n	800b3b0 <_dtoa_r+0x380>
 800b382:	4bb2      	ldr	r3, [pc, #712]	; (800b64c <_dtoa_r+0x61c>)
 800b384:	ec51 0b19 	vmov	r0, r1, d9
 800b388:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b38c:	f7f5 fad8 	bl	8000940 <__aeabi_ddiv>
 800b390:	f007 070f 	and.w	r7, r7, #15
 800b394:	4682      	mov	sl, r0
 800b396:	468b      	mov	fp, r1
 800b398:	2503      	movs	r5, #3
 800b39a:	4eac      	ldr	r6, [pc, #688]	; (800b64c <_dtoa_r+0x61c>)
 800b39c:	b957      	cbnz	r7, 800b3b4 <_dtoa_r+0x384>
 800b39e:	4642      	mov	r2, r8
 800b3a0:	464b      	mov	r3, r9
 800b3a2:	4650      	mov	r0, sl
 800b3a4:	4659      	mov	r1, fp
 800b3a6:	f7f5 facb 	bl	8000940 <__aeabi_ddiv>
 800b3aa:	4682      	mov	sl, r0
 800b3ac:	468b      	mov	fp, r1
 800b3ae:	e028      	b.n	800b402 <_dtoa_r+0x3d2>
 800b3b0:	2502      	movs	r5, #2
 800b3b2:	e7f2      	b.n	800b39a <_dtoa_r+0x36a>
 800b3b4:	07f9      	lsls	r1, r7, #31
 800b3b6:	d508      	bpl.n	800b3ca <_dtoa_r+0x39a>
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	4649      	mov	r1, r9
 800b3bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3c0:	f7f5 f994 	bl	80006ec <__aeabi_dmul>
 800b3c4:	3501      	adds	r5, #1
 800b3c6:	4680      	mov	r8, r0
 800b3c8:	4689      	mov	r9, r1
 800b3ca:	107f      	asrs	r7, r7, #1
 800b3cc:	3608      	adds	r6, #8
 800b3ce:	e7e5      	b.n	800b39c <_dtoa_r+0x36c>
 800b3d0:	f000 809b 	beq.w	800b50a <_dtoa_r+0x4da>
 800b3d4:	9b00      	ldr	r3, [sp, #0]
 800b3d6:	4f9d      	ldr	r7, [pc, #628]	; (800b64c <_dtoa_r+0x61c>)
 800b3d8:	425e      	negs	r6, r3
 800b3da:	4b9b      	ldr	r3, [pc, #620]	; (800b648 <_dtoa_r+0x618>)
 800b3dc:	f006 020f 	and.w	r2, r6, #15
 800b3e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e8:	ec51 0b19 	vmov	r0, r1, d9
 800b3ec:	f7f5 f97e 	bl	80006ec <__aeabi_dmul>
 800b3f0:	1136      	asrs	r6, r6, #4
 800b3f2:	4682      	mov	sl, r0
 800b3f4:	468b      	mov	fp, r1
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	2502      	movs	r5, #2
 800b3fa:	2e00      	cmp	r6, #0
 800b3fc:	d17a      	bne.n	800b4f4 <_dtoa_r+0x4c4>
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1d3      	bne.n	800b3aa <_dtoa_r+0x37a>
 800b402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 8082 	beq.w	800b50e <_dtoa_r+0x4de>
 800b40a:	4b91      	ldr	r3, [pc, #580]	; (800b650 <_dtoa_r+0x620>)
 800b40c:	2200      	movs	r2, #0
 800b40e:	4650      	mov	r0, sl
 800b410:	4659      	mov	r1, fp
 800b412:	f7f5 fbdd 	bl	8000bd0 <__aeabi_dcmplt>
 800b416:	2800      	cmp	r0, #0
 800b418:	d079      	beq.n	800b50e <_dtoa_r+0x4de>
 800b41a:	9b03      	ldr	r3, [sp, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d076      	beq.n	800b50e <_dtoa_r+0x4de>
 800b420:	9b02      	ldr	r3, [sp, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	dd36      	ble.n	800b494 <_dtoa_r+0x464>
 800b426:	9b00      	ldr	r3, [sp, #0]
 800b428:	4650      	mov	r0, sl
 800b42a:	4659      	mov	r1, fp
 800b42c:	1e5f      	subs	r7, r3, #1
 800b42e:	2200      	movs	r2, #0
 800b430:	4b88      	ldr	r3, [pc, #544]	; (800b654 <_dtoa_r+0x624>)
 800b432:	f7f5 f95b 	bl	80006ec <__aeabi_dmul>
 800b436:	9e02      	ldr	r6, [sp, #8]
 800b438:	4682      	mov	sl, r0
 800b43a:	468b      	mov	fp, r1
 800b43c:	3501      	adds	r5, #1
 800b43e:	4628      	mov	r0, r5
 800b440:	f7f5 f8ea 	bl	8000618 <__aeabi_i2d>
 800b444:	4652      	mov	r2, sl
 800b446:	465b      	mov	r3, fp
 800b448:	f7f5 f950 	bl	80006ec <__aeabi_dmul>
 800b44c:	4b82      	ldr	r3, [pc, #520]	; (800b658 <_dtoa_r+0x628>)
 800b44e:	2200      	movs	r2, #0
 800b450:	f7f4 ff96 	bl	8000380 <__adddf3>
 800b454:	46d0      	mov	r8, sl
 800b456:	46d9      	mov	r9, fp
 800b458:	4682      	mov	sl, r0
 800b45a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b45e:	2e00      	cmp	r6, #0
 800b460:	d158      	bne.n	800b514 <_dtoa_r+0x4e4>
 800b462:	4b7e      	ldr	r3, [pc, #504]	; (800b65c <_dtoa_r+0x62c>)
 800b464:	2200      	movs	r2, #0
 800b466:	4640      	mov	r0, r8
 800b468:	4649      	mov	r1, r9
 800b46a:	f7f4 ff87 	bl	800037c <__aeabi_dsub>
 800b46e:	4652      	mov	r2, sl
 800b470:	465b      	mov	r3, fp
 800b472:	4680      	mov	r8, r0
 800b474:	4689      	mov	r9, r1
 800b476:	f7f5 fbc9 	bl	8000c0c <__aeabi_dcmpgt>
 800b47a:	2800      	cmp	r0, #0
 800b47c:	f040 8295 	bne.w	800b9aa <_dtoa_r+0x97a>
 800b480:	4652      	mov	r2, sl
 800b482:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b486:	4640      	mov	r0, r8
 800b488:	4649      	mov	r1, r9
 800b48a:	f7f5 fba1 	bl	8000bd0 <__aeabi_dcmplt>
 800b48e:	2800      	cmp	r0, #0
 800b490:	f040 8289 	bne.w	800b9a6 <_dtoa_r+0x976>
 800b494:	ec5b ab19 	vmov	sl, fp, d9
 800b498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	f2c0 8148 	blt.w	800b730 <_dtoa_r+0x700>
 800b4a0:	9a00      	ldr	r2, [sp, #0]
 800b4a2:	2a0e      	cmp	r2, #14
 800b4a4:	f300 8144 	bgt.w	800b730 <_dtoa_r+0x700>
 800b4a8:	4b67      	ldr	r3, [pc, #412]	; (800b648 <_dtoa_r+0x618>)
 800b4aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f280 80d5 	bge.w	800b664 <_dtoa_r+0x634>
 800b4ba:	9b03      	ldr	r3, [sp, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	f300 80d1 	bgt.w	800b664 <_dtoa_r+0x634>
 800b4c2:	f040 826f 	bne.w	800b9a4 <_dtoa_r+0x974>
 800b4c6:	4b65      	ldr	r3, [pc, #404]	; (800b65c <_dtoa_r+0x62c>)
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f5 f90d 	bl	80006ec <__aeabi_dmul>
 800b4d2:	4652      	mov	r2, sl
 800b4d4:	465b      	mov	r3, fp
 800b4d6:	f7f5 fb8f 	bl	8000bf8 <__aeabi_dcmpge>
 800b4da:	9e03      	ldr	r6, [sp, #12]
 800b4dc:	4637      	mov	r7, r6
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	f040 8245 	bne.w	800b96e <_dtoa_r+0x93e>
 800b4e4:	9d01      	ldr	r5, [sp, #4]
 800b4e6:	2331      	movs	r3, #49	; 0x31
 800b4e8:	f805 3b01 	strb.w	r3, [r5], #1
 800b4ec:	9b00      	ldr	r3, [sp, #0]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	e240      	b.n	800b976 <_dtoa_r+0x946>
 800b4f4:	07f2      	lsls	r2, r6, #31
 800b4f6:	d505      	bpl.n	800b504 <_dtoa_r+0x4d4>
 800b4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4fc:	f7f5 f8f6 	bl	80006ec <__aeabi_dmul>
 800b500:	3501      	adds	r5, #1
 800b502:	2301      	movs	r3, #1
 800b504:	1076      	asrs	r6, r6, #1
 800b506:	3708      	adds	r7, #8
 800b508:	e777      	b.n	800b3fa <_dtoa_r+0x3ca>
 800b50a:	2502      	movs	r5, #2
 800b50c:	e779      	b.n	800b402 <_dtoa_r+0x3d2>
 800b50e:	9f00      	ldr	r7, [sp, #0]
 800b510:	9e03      	ldr	r6, [sp, #12]
 800b512:	e794      	b.n	800b43e <_dtoa_r+0x40e>
 800b514:	9901      	ldr	r1, [sp, #4]
 800b516:	4b4c      	ldr	r3, [pc, #304]	; (800b648 <_dtoa_r+0x618>)
 800b518:	4431      	add	r1, r6
 800b51a:	910d      	str	r1, [sp, #52]	; 0x34
 800b51c:	9908      	ldr	r1, [sp, #32]
 800b51e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b522:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b526:	2900      	cmp	r1, #0
 800b528:	d043      	beq.n	800b5b2 <_dtoa_r+0x582>
 800b52a:	494d      	ldr	r1, [pc, #308]	; (800b660 <_dtoa_r+0x630>)
 800b52c:	2000      	movs	r0, #0
 800b52e:	f7f5 fa07 	bl	8000940 <__aeabi_ddiv>
 800b532:	4652      	mov	r2, sl
 800b534:	465b      	mov	r3, fp
 800b536:	f7f4 ff21 	bl	800037c <__aeabi_dsub>
 800b53a:	9d01      	ldr	r5, [sp, #4]
 800b53c:	4682      	mov	sl, r0
 800b53e:	468b      	mov	fp, r1
 800b540:	4649      	mov	r1, r9
 800b542:	4640      	mov	r0, r8
 800b544:	f7f5 fb82 	bl	8000c4c <__aeabi_d2iz>
 800b548:	4606      	mov	r6, r0
 800b54a:	f7f5 f865 	bl	8000618 <__aeabi_i2d>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4640      	mov	r0, r8
 800b554:	4649      	mov	r1, r9
 800b556:	f7f4 ff11 	bl	800037c <__aeabi_dsub>
 800b55a:	3630      	adds	r6, #48	; 0x30
 800b55c:	f805 6b01 	strb.w	r6, [r5], #1
 800b560:	4652      	mov	r2, sl
 800b562:	465b      	mov	r3, fp
 800b564:	4680      	mov	r8, r0
 800b566:	4689      	mov	r9, r1
 800b568:	f7f5 fb32 	bl	8000bd0 <__aeabi_dcmplt>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d163      	bne.n	800b638 <_dtoa_r+0x608>
 800b570:	4642      	mov	r2, r8
 800b572:	464b      	mov	r3, r9
 800b574:	4936      	ldr	r1, [pc, #216]	; (800b650 <_dtoa_r+0x620>)
 800b576:	2000      	movs	r0, #0
 800b578:	f7f4 ff00 	bl	800037c <__aeabi_dsub>
 800b57c:	4652      	mov	r2, sl
 800b57e:	465b      	mov	r3, fp
 800b580:	f7f5 fb26 	bl	8000bd0 <__aeabi_dcmplt>
 800b584:	2800      	cmp	r0, #0
 800b586:	f040 80b5 	bne.w	800b6f4 <_dtoa_r+0x6c4>
 800b58a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b58c:	429d      	cmp	r5, r3
 800b58e:	d081      	beq.n	800b494 <_dtoa_r+0x464>
 800b590:	4b30      	ldr	r3, [pc, #192]	; (800b654 <_dtoa_r+0x624>)
 800b592:	2200      	movs	r2, #0
 800b594:	4650      	mov	r0, sl
 800b596:	4659      	mov	r1, fp
 800b598:	f7f5 f8a8 	bl	80006ec <__aeabi_dmul>
 800b59c:	4b2d      	ldr	r3, [pc, #180]	; (800b654 <_dtoa_r+0x624>)
 800b59e:	4682      	mov	sl, r0
 800b5a0:	468b      	mov	fp, r1
 800b5a2:	4640      	mov	r0, r8
 800b5a4:	4649      	mov	r1, r9
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f7f5 f8a0 	bl	80006ec <__aeabi_dmul>
 800b5ac:	4680      	mov	r8, r0
 800b5ae:	4689      	mov	r9, r1
 800b5b0:	e7c6      	b.n	800b540 <_dtoa_r+0x510>
 800b5b2:	4650      	mov	r0, sl
 800b5b4:	4659      	mov	r1, fp
 800b5b6:	f7f5 f899 	bl	80006ec <__aeabi_dmul>
 800b5ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5bc:	9d01      	ldr	r5, [sp, #4]
 800b5be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5c0:	4682      	mov	sl, r0
 800b5c2:	468b      	mov	fp, r1
 800b5c4:	4649      	mov	r1, r9
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	f7f5 fb40 	bl	8000c4c <__aeabi_d2iz>
 800b5cc:	4606      	mov	r6, r0
 800b5ce:	f7f5 f823 	bl	8000618 <__aeabi_i2d>
 800b5d2:	3630      	adds	r6, #48	; 0x30
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4640      	mov	r0, r8
 800b5da:	4649      	mov	r1, r9
 800b5dc:	f7f4 fece 	bl	800037c <__aeabi_dsub>
 800b5e0:	f805 6b01 	strb.w	r6, [r5], #1
 800b5e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5e6:	429d      	cmp	r5, r3
 800b5e8:	4680      	mov	r8, r0
 800b5ea:	4689      	mov	r9, r1
 800b5ec:	f04f 0200 	mov.w	r2, #0
 800b5f0:	d124      	bne.n	800b63c <_dtoa_r+0x60c>
 800b5f2:	4b1b      	ldr	r3, [pc, #108]	; (800b660 <_dtoa_r+0x630>)
 800b5f4:	4650      	mov	r0, sl
 800b5f6:	4659      	mov	r1, fp
 800b5f8:	f7f4 fec2 	bl	8000380 <__adddf3>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	4640      	mov	r0, r8
 800b602:	4649      	mov	r1, r9
 800b604:	f7f5 fb02 	bl	8000c0c <__aeabi_dcmpgt>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d173      	bne.n	800b6f4 <_dtoa_r+0x6c4>
 800b60c:	4652      	mov	r2, sl
 800b60e:	465b      	mov	r3, fp
 800b610:	4913      	ldr	r1, [pc, #76]	; (800b660 <_dtoa_r+0x630>)
 800b612:	2000      	movs	r0, #0
 800b614:	f7f4 feb2 	bl	800037c <__aeabi_dsub>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4640      	mov	r0, r8
 800b61e:	4649      	mov	r1, r9
 800b620:	f7f5 fad6 	bl	8000bd0 <__aeabi_dcmplt>
 800b624:	2800      	cmp	r0, #0
 800b626:	f43f af35 	beq.w	800b494 <_dtoa_r+0x464>
 800b62a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b62c:	1e6b      	subs	r3, r5, #1
 800b62e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b630:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b634:	2b30      	cmp	r3, #48	; 0x30
 800b636:	d0f8      	beq.n	800b62a <_dtoa_r+0x5fa>
 800b638:	9700      	str	r7, [sp, #0]
 800b63a:	e049      	b.n	800b6d0 <_dtoa_r+0x6a0>
 800b63c:	4b05      	ldr	r3, [pc, #20]	; (800b654 <_dtoa_r+0x624>)
 800b63e:	f7f5 f855 	bl	80006ec <__aeabi_dmul>
 800b642:	4680      	mov	r8, r0
 800b644:	4689      	mov	r9, r1
 800b646:	e7bd      	b.n	800b5c4 <_dtoa_r+0x594>
 800b648:	08026398 	.word	0x08026398
 800b64c:	08026370 	.word	0x08026370
 800b650:	3ff00000 	.word	0x3ff00000
 800b654:	40240000 	.word	0x40240000
 800b658:	401c0000 	.word	0x401c0000
 800b65c:	40140000 	.word	0x40140000
 800b660:	3fe00000 	.word	0x3fe00000
 800b664:	9d01      	ldr	r5, [sp, #4]
 800b666:	4656      	mov	r6, sl
 800b668:	465f      	mov	r7, fp
 800b66a:	4642      	mov	r2, r8
 800b66c:	464b      	mov	r3, r9
 800b66e:	4630      	mov	r0, r6
 800b670:	4639      	mov	r1, r7
 800b672:	f7f5 f965 	bl	8000940 <__aeabi_ddiv>
 800b676:	f7f5 fae9 	bl	8000c4c <__aeabi_d2iz>
 800b67a:	4682      	mov	sl, r0
 800b67c:	f7f4 ffcc 	bl	8000618 <__aeabi_i2d>
 800b680:	4642      	mov	r2, r8
 800b682:	464b      	mov	r3, r9
 800b684:	f7f5 f832 	bl	80006ec <__aeabi_dmul>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	4630      	mov	r0, r6
 800b68e:	4639      	mov	r1, r7
 800b690:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b694:	f7f4 fe72 	bl	800037c <__aeabi_dsub>
 800b698:	f805 6b01 	strb.w	r6, [r5], #1
 800b69c:	9e01      	ldr	r6, [sp, #4]
 800b69e:	9f03      	ldr	r7, [sp, #12]
 800b6a0:	1bae      	subs	r6, r5, r6
 800b6a2:	42b7      	cmp	r7, r6
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	d135      	bne.n	800b716 <_dtoa_r+0x6e6>
 800b6aa:	f7f4 fe69 	bl	8000380 <__adddf3>
 800b6ae:	4642      	mov	r2, r8
 800b6b0:	464b      	mov	r3, r9
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	f7f5 faa9 	bl	8000c0c <__aeabi_dcmpgt>
 800b6ba:	b9d0      	cbnz	r0, 800b6f2 <_dtoa_r+0x6c2>
 800b6bc:	4642      	mov	r2, r8
 800b6be:	464b      	mov	r3, r9
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	f7f5 fa7a 	bl	8000bbc <__aeabi_dcmpeq>
 800b6c8:	b110      	cbz	r0, 800b6d0 <_dtoa_r+0x6a0>
 800b6ca:	f01a 0f01 	tst.w	sl, #1
 800b6ce:	d110      	bne.n	800b6f2 <_dtoa_r+0x6c2>
 800b6d0:	4620      	mov	r0, r4
 800b6d2:	ee18 1a10 	vmov	r1, s16
 800b6d6:	f000 fd0b 	bl	800c0f0 <_Bfree>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	9800      	ldr	r0, [sp, #0]
 800b6de:	702b      	strb	r3, [r5, #0]
 800b6e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6e2:	3001      	adds	r0, #1
 800b6e4:	6018      	str	r0, [r3, #0]
 800b6e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f43f acf1 	beq.w	800b0d0 <_dtoa_r+0xa0>
 800b6ee:	601d      	str	r5, [r3, #0]
 800b6f0:	e4ee      	b.n	800b0d0 <_dtoa_r+0xa0>
 800b6f2:	9f00      	ldr	r7, [sp, #0]
 800b6f4:	462b      	mov	r3, r5
 800b6f6:	461d      	mov	r5, r3
 800b6f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6fc:	2a39      	cmp	r2, #57	; 0x39
 800b6fe:	d106      	bne.n	800b70e <_dtoa_r+0x6de>
 800b700:	9a01      	ldr	r2, [sp, #4]
 800b702:	429a      	cmp	r2, r3
 800b704:	d1f7      	bne.n	800b6f6 <_dtoa_r+0x6c6>
 800b706:	9901      	ldr	r1, [sp, #4]
 800b708:	2230      	movs	r2, #48	; 0x30
 800b70a:	3701      	adds	r7, #1
 800b70c:	700a      	strb	r2, [r1, #0]
 800b70e:	781a      	ldrb	r2, [r3, #0]
 800b710:	3201      	adds	r2, #1
 800b712:	701a      	strb	r2, [r3, #0]
 800b714:	e790      	b.n	800b638 <_dtoa_r+0x608>
 800b716:	4ba6      	ldr	r3, [pc, #664]	; (800b9b0 <_dtoa_r+0x980>)
 800b718:	2200      	movs	r2, #0
 800b71a:	f7f4 ffe7 	bl	80006ec <__aeabi_dmul>
 800b71e:	2200      	movs	r2, #0
 800b720:	2300      	movs	r3, #0
 800b722:	4606      	mov	r6, r0
 800b724:	460f      	mov	r7, r1
 800b726:	f7f5 fa49 	bl	8000bbc <__aeabi_dcmpeq>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d09d      	beq.n	800b66a <_dtoa_r+0x63a>
 800b72e:	e7cf      	b.n	800b6d0 <_dtoa_r+0x6a0>
 800b730:	9a08      	ldr	r2, [sp, #32]
 800b732:	2a00      	cmp	r2, #0
 800b734:	f000 80d7 	beq.w	800b8e6 <_dtoa_r+0x8b6>
 800b738:	9a06      	ldr	r2, [sp, #24]
 800b73a:	2a01      	cmp	r2, #1
 800b73c:	f300 80ba 	bgt.w	800b8b4 <_dtoa_r+0x884>
 800b740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b742:	2a00      	cmp	r2, #0
 800b744:	f000 80b2 	beq.w	800b8ac <_dtoa_r+0x87c>
 800b748:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b74c:	9e07      	ldr	r6, [sp, #28]
 800b74e:	9d04      	ldr	r5, [sp, #16]
 800b750:	9a04      	ldr	r2, [sp, #16]
 800b752:	441a      	add	r2, r3
 800b754:	9204      	str	r2, [sp, #16]
 800b756:	9a05      	ldr	r2, [sp, #20]
 800b758:	2101      	movs	r1, #1
 800b75a:	441a      	add	r2, r3
 800b75c:	4620      	mov	r0, r4
 800b75e:	9205      	str	r2, [sp, #20]
 800b760:	f000 fd7e 	bl	800c260 <__i2b>
 800b764:	4607      	mov	r7, r0
 800b766:	2d00      	cmp	r5, #0
 800b768:	dd0c      	ble.n	800b784 <_dtoa_r+0x754>
 800b76a:	9b05      	ldr	r3, [sp, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	dd09      	ble.n	800b784 <_dtoa_r+0x754>
 800b770:	42ab      	cmp	r3, r5
 800b772:	9a04      	ldr	r2, [sp, #16]
 800b774:	bfa8      	it	ge
 800b776:	462b      	movge	r3, r5
 800b778:	1ad2      	subs	r2, r2, r3
 800b77a:	9204      	str	r2, [sp, #16]
 800b77c:	9a05      	ldr	r2, [sp, #20]
 800b77e:	1aed      	subs	r5, r5, r3
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	9305      	str	r3, [sp, #20]
 800b784:	9b07      	ldr	r3, [sp, #28]
 800b786:	b31b      	cbz	r3, 800b7d0 <_dtoa_r+0x7a0>
 800b788:	9b08      	ldr	r3, [sp, #32]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 80af 	beq.w	800b8ee <_dtoa_r+0x8be>
 800b790:	2e00      	cmp	r6, #0
 800b792:	dd13      	ble.n	800b7bc <_dtoa_r+0x78c>
 800b794:	4639      	mov	r1, r7
 800b796:	4632      	mov	r2, r6
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 fe21 	bl	800c3e0 <__pow5mult>
 800b79e:	ee18 2a10 	vmov	r2, s16
 800b7a2:	4601      	mov	r1, r0
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	4620      	mov	r0, r4
 800b7a8:	f000 fd70 	bl	800c28c <__multiply>
 800b7ac:	ee18 1a10 	vmov	r1, s16
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f000 fc9c 	bl	800c0f0 <_Bfree>
 800b7b8:	ee08 8a10 	vmov	s16, r8
 800b7bc:	9b07      	ldr	r3, [sp, #28]
 800b7be:	1b9a      	subs	r2, r3, r6
 800b7c0:	d006      	beq.n	800b7d0 <_dtoa_r+0x7a0>
 800b7c2:	ee18 1a10 	vmov	r1, s16
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 fe0a 	bl	800c3e0 <__pow5mult>
 800b7cc:	ee08 0a10 	vmov	s16, r0
 800b7d0:	2101      	movs	r1, #1
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 fd44 	bl	800c260 <__i2b>
 800b7d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	4606      	mov	r6, r0
 800b7de:	f340 8088 	ble.w	800b8f2 <_dtoa_r+0x8c2>
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	4601      	mov	r1, r0
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f000 fdfa 	bl	800c3e0 <__pow5mult>
 800b7ec:	9b06      	ldr	r3, [sp, #24]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	4606      	mov	r6, r0
 800b7f2:	f340 8081 	ble.w	800b8f8 <_dtoa_r+0x8c8>
 800b7f6:	f04f 0800 	mov.w	r8, #0
 800b7fa:	6933      	ldr	r3, [r6, #16]
 800b7fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b800:	6918      	ldr	r0, [r3, #16]
 800b802:	f000 fcdd 	bl	800c1c0 <__hi0bits>
 800b806:	f1c0 0020 	rsb	r0, r0, #32
 800b80a:	9b05      	ldr	r3, [sp, #20]
 800b80c:	4418      	add	r0, r3
 800b80e:	f010 001f 	ands.w	r0, r0, #31
 800b812:	f000 8092 	beq.w	800b93a <_dtoa_r+0x90a>
 800b816:	f1c0 0320 	rsb	r3, r0, #32
 800b81a:	2b04      	cmp	r3, #4
 800b81c:	f340 808a 	ble.w	800b934 <_dtoa_r+0x904>
 800b820:	f1c0 001c 	rsb	r0, r0, #28
 800b824:	9b04      	ldr	r3, [sp, #16]
 800b826:	4403      	add	r3, r0
 800b828:	9304      	str	r3, [sp, #16]
 800b82a:	9b05      	ldr	r3, [sp, #20]
 800b82c:	4403      	add	r3, r0
 800b82e:	4405      	add	r5, r0
 800b830:	9305      	str	r3, [sp, #20]
 800b832:	9b04      	ldr	r3, [sp, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	dd07      	ble.n	800b848 <_dtoa_r+0x818>
 800b838:	ee18 1a10 	vmov	r1, s16
 800b83c:	461a      	mov	r2, r3
 800b83e:	4620      	mov	r0, r4
 800b840:	f000 fe28 	bl	800c494 <__lshift>
 800b844:	ee08 0a10 	vmov	s16, r0
 800b848:	9b05      	ldr	r3, [sp, #20]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	dd05      	ble.n	800b85a <_dtoa_r+0x82a>
 800b84e:	4631      	mov	r1, r6
 800b850:	461a      	mov	r2, r3
 800b852:	4620      	mov	r0, r4
 800b854:	f000 fe1e 	bl	800c494 <__lshift>
 800b858:	4606      	mov	r6, r0
 800b85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d06e      	beq.n	800b93e <_dtoa_r+0x90e>
 800b860:	ee18 0a10 	vmov	r0, s16
 800b864:	4631      	mov	r1, r6
 800b866:	f000 fe85 	bl	800c574 <__mcmp>
 800b86a:	2800      	cmp	r0, #0
 800b86c:	da67      	bge.n	800b93e <_dtoa_r+0x90e>
 800b86e:	9b00      	ldr	r3, [sp, #0]
 800b870:	3b01      	subs	r3, #1
 800b872:	ee18 1a10 	vmov	r1, s16
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	220a      	movs	r2, #10
 800b87a:	2300      	movs	r3, #0
 800b87c:	4620      	mov	r0, r4
 800b87e:	f000 fc59 	bl	800c134 <__multadd>
 800b882:	9b08      	ldr	r3, [sp, #32]
 800b884:	ee08 0a10 	vmov	s16, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 81b1 	beq.w	800bbf0 <_dtoa_r+0xbc0>
 800b88e:	2300      	movs	r3, #0
 800b890:	4639      	mov	r1, r7
 800b892:	220a      	movs	r2, #10
 800b894:	4620      	mov	r0, r4
 800b896:	f000 fc4d 	bl	800c134 <__multadd>
 800b89a:	9b02      	ldr	r3, [sp, #8]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	4607      	mov	r7, r0
 800b8a0:	f300 808e 	bgt.w	800b9c0 <_dtoa_r+0x990>
 800b8a4:	9b06      	ldr	r3, [sp, #24]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	dc51      	bgt.n	800b94e <_dtoa_r+0x91e>
 800b8aa:	e089      	b.n	800b9c0 <_dtoa_r+0x990>
 800b8ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8b2:	e74b      	b.n	800b74c <_dtoa_r+0x71c>
 800b8b4:	9b03      	ldr	r3, [sp, #12]
 800b8b6:	1e5e      	subs	r6, r3, #1
 800b8b8:	9b07      	ldr	r3, [sp, #28]
 800b8ba:	42b3      	cmp	r3, r6
 800b8bc:	bfbf      	itttt	lt
 800b8be:	9b07      	ldrlt	r3, [sp, #28]
 800b8c0:	9607      	strlt	r6, [sp, #28]
 800b8c2:	1af2      	sublt	r2, r6, r3
 800b8c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b8c6:	bfb6      	itet	lt
 800b8c8:	189b      	addlt	r3, r3, r2
 800b8ca:	1b9e      	subge	r6, r3, r6
 800b8cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b8ce:	9b03      	ldr	r3, [sp, #12]
 800b8d0:	bfb8      	it	lt
 800b8d2:	2600      	movlt	r6, #0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	bfb7      	itett	lt
 800b8d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b8dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b8e0:	1a9d      	sublt	r5, r3, r2
 800b8e2:	2300      	movlt	r3, #0
 800b8e4:	e734      	b.n	800b750 <_dtoa_r+0x720>
 800b8e6:	9e07      	ldr	r6, [sp, #28]
 800b8e8:	9d04      	ldr	r5, [sp, #16]
 800b8ea:	9f08      	ldr	r7, [sp, #32]
 800b8ec:	e73b      	b.n	800b766 <_dtoa_r+0x736>
 800b8ee:	9a07      	ldr	r2, [sp, #28]
 800b8f0:	e767      	b.n	800b7c2 <_dtoa_r+0x792>
 800b8f2:	9b06      	ldr	r3, [sp, #24]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	dc18      	bgt.n	800b92a <_dtoa_r+0x8fa>
 800b8f8:	f1ba 0f00 	cmp.w	sl, #0
 800b8fc:	d115      	bne.n	800b92a <_dtoa_r+0x8fa>
 800b8fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b902:	b993      	cbnz	r3, 800b92a <_dtoa_r+0x8fa>
 800b904:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b908:	0d1b      	lsrs	r3, r3, #20
 800b90a:	051b      	lsls	r3, r3, #20
 800b90c:	b183      	cbz	r3, 800b930 <_dtoa_r+0x900>
 800b90e:	9b04      	ldr	r3, [sp, #16]
 800b910:	3301      	adds	r3, #1
 800b912:	9304      	str	r3, [sp, #16]
 800b914:	9b05      	ldr	r3, [sp, #20]
 800b916:	3301      	adds	r3, #1
 800b918:	9305      	str	r3, [sp, #20]
 800b91a:	f04f 0801 	mov.w	r8, #1
 800b91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b920:	2b00      	cmp	r3, #0
 800b922:	f47f af6a 	bne.w	800b7fa <_dtoa_r+0x7ca>
 800b926:	2001      	movs	r0, #1
 800b928:	e76f      	b.n	800b80a <_dtoa_r+0x7da>
 800b92a:	f04f 0800 	mov.w	r8, #0
 800b92e:	e7f6      	b.n	800b91e <_dtoa_r+0x8ee>
 800b930:	4698      	mov	r8, r3
 800b932:	e7f4      	b.n	800b91e <_dtoa_r+0x8ee>
 800b934:	f43f af7d 	beq.w	800b832 <_dtoa_r+0x802>
 800b938:	4618      	mov	r0, r3
 800b93a:	301c      	adds	r0, #28
 800b93c:	e772      	b.n	800b824 <_dtoa_r+0x7f4>
 800b93e:	9b03      	ldr	r3, [sp, #12]
 800b940:	2b00      	cmp	r3, #0
 800b942:	dc37      	bgt.n	800b9b4 <_dtoa_r+0x984>
 800b944:	9b06      	ldr	r3, [sp, #24]
 800b946:	2b02      	cmp	r3, #2
 800b948:	dd34      	ble.n	800b9b4 <_dtoa_r+0x984>
 800b94a:	9b03      	ldr	r3, [sp, #12]
 800b94c:	9302      	str	r3, [sp, #8]
 800b94e:	9b02      	ldr	r3, [sp, #8]
 800b950:	b96b      	cbnz	r3, 800b96e <_dtoa_r+0x93e>
 800b952:	4631      	mov	r1, r6
 800b954:	2205      	movs	r2, #5
 800b956:	4620      	mov	r0, r4
 800b958:	f000 fbec 	bl	800c134 <__multadd>
 800b95c:	4601      	mov	r1, r0
 800b95e:	4606      	mov	r6, r0
 800b960:	ee18 0a10 	vmov	r0, s16
 800b964:	f000 fe06 	bl	800c574 <__mcmp>
 800b968:	2800      	cmp	r0, #0
 800b96a:	f73f adbb 	bgt.w	800b4e4 <_dtoa_r+0x4b4>
 800b96e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b970:	9d01      	ldr	r5, [sp, #4]
 800b972:	43db      	mvns	r3, r3
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	f04f 0800 	mov.w	r8, #0
 800b97a:	4631      	mov	r1, r6
 800b97c:	4620      	mov	r0, r4
 800b97e:	f000 fbb7 	bl	800c0f0 <_Bfree>
 800b982:	2f00      	cmp	r7, #0
 800b984:	f43f aea4 	beq.w	800b6d0 <_dtoa_r+0x6a0>
 800b988:	f1b8 0f00 	cmp.w	r8, #0
 800b98c:	d005      	beq.n	800b99a <_dtoa_r+0x96a>
 800b98e:	45b8      	cmp	r8, r7
 800b990:	d003      	beq.n	800b99a <_dtoa_r+0x96a>
 800b992:	4641      	mov	r1, r8
 800b994:	4620      	mov	r0, r4
 800b996:	f000 fbab 	bl	800c0f0 <_Bfree>
 800b99a:	4639      	mov	r1, r7
 800b99c:	4620      	mov	r0, r4
 800b99e:	f000 fba7 	bl	800c0f0 <_Bfree>
 800b9a2:	e695      	b.n	800b6d0 <_dtoa_r+0x6a0>
 800b9a4:	2600      	movs	r6, #0
 800b9a6:	4637      	mov	r7, r6
 800b9a8:	e7e1      	b.n	800b96e <_dtoa_r+0x93e>
 800b9aa:	9700      	str	r7, [sp, #0]
 800b9ac:	4637      	mov	r7, r6
 800b9ae:	e599      	b.n	800b4e4 <_dtoa_r+0x4b4>
 800b9b0:	40240000 	.word	0x40240000
 800b9b4:	9b08      	ldr	r3, [sp, #32]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	f000 80ca 	beq.w	800bb50 <_dtoa_r+0xb20>
 800b9bc:	9b03      	ldr	r3, [sp, #12]
 800b9be:	9302      	str	r3, [sp, #8]
 800b9c0:	2d00      	cmp	r5, #0
 800b9c2:	dd05      	ble.n	800b9d0 <_dtoa_r+0x9a0>
 800b9c4:	4639      	mov	r1, r7
 800b9c6:	462a      	mov	r2, r5
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 fd63 	bl	800c494 <__lshift>
 800b9ce:	4607      	mov	r7, r0
 800b9d0:	f1b8 0f00 	cmp.w	r8, #0
 800b9d4:	d05b      	beq.n	800ba8e <_dtoa_r+0xa5e>
 800b9d6:	6879      	ldr	r1, [r7, #4]
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f000 fb49 	bl	800c070 <_Balloc>
 800b9de:	4605      	mov	r5, r0
 800b9e0:	b928      	cbnz	r0, 800b9ee <_dtoa_r+0x9be>
 800b9e2:	4b87      	ldr	r3, [pc, #540]	; (800bc00 <_dtoa_r+0xbd0>)
 800b9e4:	4602      	mov	r2, r0
 800b9e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b9ea:	f7ff bb3b 	b.w	800b064 <_dtoa_r+0x34>
 800b9ee:	693a      	ldr	r2, [r7, #16]
 800b9f0:	3202      	adds	r2, #2
 800b9f2:	0092      	lsls	r2, r2, #2
 800b9f4:	f107 010c 	add.w	r1, r7, #12
 800b9f8:	300c      	adds	r0, #12
 800b9fa:	f000 fb1e 	bl	800c03a <memcpy>
 800b9fe:	2201      	movs	r2, #1
 800ba00:	4629      	mov	r1, r5
 800ba02:	4620      	mov	r0, r4
 800ba04:	f000 fd46 	bl	800c494 <__lshift>
 800ba08:	9b01      	ldr	r3, [sp, #4]
 800ba0a:	f103 0901 	add.w	r9, r3, #1
 800ba0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ba12:	4413      	add	r3, r2
 800ba14:	9305      	str	r3, [sp, #20]
 800ba16:	f00a 0301 	and.w	r3, sl, #1
 800ba1a:	46b8      	mov	r8, r7
 800ba1c:	9304      	str	r3, [sp, #16]
 800ba1e:	4607      	mov	r7, r0
 800ba20:	4631      	mov	r1, r6
 800ba22:	ee18 0a10 	vmov	r0, s16
 800ba26:	f7ff fa77 	bl	800af18 <quorem>
 800ba2a:	4641      	mov	r1, r8
 800ba2c:	9002      	str	r0, [sp, #8]
 800ba2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba32:	ee18 0a10 	vmov	r0, s16
 800ba36:	f000 fd9d 	bl	800c574 <__mcmp>
 800ba3a:	463a      	mov	r2, r7
 800ba3c:	9003      	str	r0, [sp, #12]
 800ba3e:	4631      	mov	r1, r6
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 fdb3 	bl	800c5ac <__mdiff>
 800ba46:	68c2      	ldr	r2, [r0, #12]
 800ba48:	f109 3bff 	add.w	fp, r9, #4294967295
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	bb02      	cbnz	r2, 800ba92 <_dtoa_r+0xa62>
 800ba50:	4601      	mov	r1, r0
 800ba52:	ee18 0a10 	vmov	r0, s16
 800ba56:	f000 fd8d 	bl	800c574 <__mcmp>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	4620      	mov	r0, r4
 800ba60:	9207      	str	r2, [sp, #28]
 800ba62:	f000 fb45 	bl	800c0f0 <_Bfree>
 800ba66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba6a:	ea43 0102 	orr.w	r1, r3, r2
 800ba6e:	9b04      	ldr	r3, [sp, #16]
 800ba70:	430b      	orrs	r3, r1
 800ba72:	464d      	mov	r5, r9
 800ba74:	d10f      	bne.n	800ba96 <_dtoa_r+0xa66>
 800ba76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba7a:	d02a      	beq.n	800bad2 <_dtoa_r+0xaa2>
 800ba7c:	9b03      	ldr	r3, [sp, #12]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	dd02      	ble.n	800ba88 <_dtoa_r+0xa58>
 800ba82:	9b02      	ldr	r3, [sp, #8]
 800ba84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ba88:	f88b a000 	strb.w	sl, [fp]
 800ba8c:	e775      	b.n	800b97a <_dtoa_r+0x94a>
 800ba8e:	4638      	mov	r0, r7
 800ba90:	e7ba      	b.n	800ba08 <_dtoa_r+0x9d8>
 800ba92:	2201      	movs	r2, #1
 800ba94:	e7e2      	b.n	800ba5c <_dtoa_r+0xa2c>
 800ba96:	9b03      	ldr	r3, [sp, #12]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	db04      	blt.n	800baa6 <_dtoa_r+0xa76>
 800ba9c:	9906      	ldr	r1, [sp, #24]
 800ba9e:	430b      	orrs	r3, r1
 800baa0:	9904      	ldr	r1, [sp, #16]
 800baa2:	430b      	orrs	r3, r1
 800baa4:	d122      	bne.n	800baec <_dtoa_r+0xabc>
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	ddee      	ble.n	800ba88 <_dtoa_r+0xa58>
 800baaa:	ee18 1a10 	vmov	r1, s16
 800baae:	2201      	movs	r2, #1
 800bab0:	4620      	mov	r0, r4
 800bab2:	f000 fcef 	bl	800c494 <__lshift>
 800bab6:	4631      	mov	r1, r6
 800bab8:	ee08 0a10 	vmov	s16, r0
 800babc:	f000 fd5a 	bl	800c574 <__mcmp>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	dc03      	bgt.n	800bacc <_dtoa_r+0xa9c>
 800bac4:	d1e0      	bne.n	800ba88 <_dtoa_r+0xa58>
 800bac6:	f01a 0f01 	tst.w	sl, #1
 800baca:	d0dd      	beq.n	800ba88 <_dtoa_r+0xa58>
 800bacc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bad0:	d1d7      	bne.n	800ba82 <_dtoa_r+0xa52>
 800bad2:	2339      	movs	r3, #57	; 0x39
 800bad4:	f88b 3000 	strb.w	r3, [fp]
 800bad8:	462b      	mov	r3, r5
 800bada:	461d      	mov	r5, r3
 800badc:	3b01      	subs	r3, #1
 800bade:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bae2:	2a39      	cmp	r2, #57	; 0x39
 800bae4:	d071      	beq.n	800bbca <_dtoa_r+0xb9a>
 800bae6:	3201      	adds	r2, #1
 800bae8:	701a      	strb	r2, [r3, #0]
 800baea:	e746      	b.n	800b97a <_dtoa_r+0x94a>
 800baec:	2a00      	cmp	r2, #0
 800baee:	dd07      	ble.n	800bb00 <_dtoa_r+0xad0>
 800baf0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800baf4:	d0ed      	beq.n	800bad2 <_dtoa_r+0xaa2>
 800baf6:	f10a 0301 	add.w	r3, sl, #1
 800bafa:	f88b 3000 	strb.w	r3, [fp]
 800bafe:	e73c      	b.n	800b97a <_dtoa_r+0x94a>
 800bb00:	9b05      	ldr	r3, [sp, #20]
 800bb02:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bb06:	4599      	cmp	r9, r3
 800bb08:	d047      	beq.n	800bb9a <_dtoa_r+0xb6a>
 800bb0a:	ee18 1a10 	vmov	r1, s16
 800bb0e:	2300      	movs	r3, #0
 800bb10:	220a      	movs	r2, #10
 800bb12:	4620      	mov	r0, r4
 800bb14:	f000 fb0e 	bl	800c134 <__multadd>
 800bb18:	45b8      	cmp	r8, r7
 800bb1a:	ee08 0a10 	vmov	s16, r0
 800bb1e:	f04f 0300 	mov.w	r3, #0
 800bb22:	f04f 020a 	mov.w	r2, #10
 800bb26:	4641      	mov	r1, r8
 800bb28:	4620      	mov	r0, r4
 800bb2a:	d106      	bne.n	800bb3a <_dtoa_r+0xb0a>
 800bb2c:	f000 fb02 	bl	800c134 <__multadd>
 800bb30:	4680      	mov	r8, r0
 800bb32:	4607      	mov	r7, r0
 800bb34:	f109 0901 	add.w	r9, r9, #1
 800bb38:	e772      	b.n	800ba20 <_dtoa_r+0x9f0>
 800bb3a:	f000 fafb 	bl	800c134 <__multadd>
 800bb3e:	4639      	mov	r1, r7
 800bb40:	4680      	mov	r8, r0
 800bb42:	2300      	movs	r3, #0
 800bb44:	220a      	movs	r2, #10
 800bb46:	4620      	mov	r0, r4
 800bb48:	f000 faf4 	bl	800c134 <__multadd>
 800bb4c:	4607      	mov	r7, r0
 800bb4e:	e7f1      	b.n	800bb34 <_dtoa_r+0xb04>
 800bb50:	9b03      	ldr	r3, [sp, #12]
 800bb52:	9302      	str	r3, [sp, #8]
 800bb54:	9d01      	ldr	r5, [sp, #4]
 800bb56:	ee18 0a10 	vmov	r0, s16
 800bb5a:	4631      	mov	r1, r6
 800bb5c:	f7ff f9dc 	bl	800af18 <quorem>
 800bb60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bb64:	9b01      	ldr	r3, [sp, #4]
 800bb66:	f805 ab01 	strb.w	sl, [r5], #1
 800bb6a:	1aea      	subs	r2, r5, r3
 800bb6c:	9b02      	ldr	r3, [sp, #8]
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	dd09      	ble.n	800bb86 <_dtoa_r+0xb56>
 800bb72:	ee18 1a10 	vmov	r1, s16
 800bb76:	2300      	movs	r3, #0
 800bb78:	220a      	movs	r2, #10
 800bb7a:	4620      	mov	r0, r4
 800bb7c:	f000 fada 	bl	800c134 <__multadd>
 800bb80:	ee08 0a10 	vmov	s16, r0
 800bb84:	e7e7      	b.n	800bb56 <_dtoa_r+0xb26>
 800bb86:	9b02      	ldr	r3, [sp, #8]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	bfc8      	it	gt
 800bb8c:	461d      	movgt	r5, r3
 800bb8e:	9b01      	ldr	r3, [sp, #4]
 800bb90:	bfd8      	it	le
 800bb92:	2501      	movle	r5, #1
 800bb94:	441d      	add	r5, r3
 800bb96:	f04f 0800 	mov.w	r8, #0
 800bb9a:	ee18 1a10 	vmov	r1, s16
 800bb9e:	2201      	movs	r2, #1
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 fc77 	bl	800c494 <__lshift>
 800bba6:	4631      	mov	r1, r6
 800bba8:	ee08 0a10 	vmov	s16, r0
 800bbac:	f000 fce2 	bl	800c574 <__mcmp>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	dc91      	bgt.n	800bad8 <_dtoa_r+0xaa8>
 800bbb4:	d102      	bne.n	800bbbc <_dtoa_r+0xb8c>
 800bbb6:	f01a 0f01 	tst.w	sl, #1
 800bbba:	d18d      	bne.n	800bad8 <_dtoa_r+0xaa8>
 800bbbc:	462b      	mov	r3, r5
 800bbbe:	461d      	mov	r5, r3
 800bbc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbc4:	2a30      	cmp	r2, #48	; 0x30
 800bbc6:	d0fa      	beq.n	800bbbe <_dtoa_r+0xb8e>
 800bbc8:	e6d7      	b.n	800b97a <_dtoa_r+0x94a>
 800bbca:	9a01      	ldr	r2, [sp, #4]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d184      	bne.n	800bada <_dtoa_r+0xaaa>
 800bbd0:	9b00      	ldr	r3, [sp, #0]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	2331      	movs	r3, #49	; 0x31
 800bbd8:	7013      	strb	r3, [r2, #0]
 800bbda:	e6ce      	b.n	800b97a <_dtoa_r+0x94a>
 800bbdc:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <_dtoa_r+0xbd4>)
 800bbde:	f7ff ba95 	b.w	800b10c <_dtoa_r+0xdc>
 800bbe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f47f aa6e 	bne.w	800b0c6 <_dtoa_r+0x96>
 800bbea:	4b07      	ldr	r3, [pc, #28]	; (800bc08 <_dtoa_r+0xbd8>)
 800bbec:	f7ff ba8e 	b.w	800b10c <_dtoa_r+0xdc>
 800bbf0:	9b02      	ldr	r3, [sp, #8]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	dcae      	bgt.n	800bb54 <_dtoa_r+0xb24>
 800bbf6:	9b06      	ldr	r3, [sp, #24]
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	f73f aea8 	bgt.w	800b94e <_dtoa_r+0x91e>
 800bbfe:	e7a9      	b.n	800bb54 <_dtoa_r+0xb24>
 800bc00:	0802629f 	.word	0x0802629f
 800bc04:	0802658c 	.word	0x0802658c
 800bc08:	08026237 	.word	0x08026237

0800bc0c <std>:
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	b510      	push	{r4, lr}
 800bc10:	4604      	mov	r4, r0
 800bc12:	e9c0 3300 	strd	r3, r3, [r0]
 800bc16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc1a:	6083      	str	r3, [r0, #8]
 800bc1c:	8181      	strh	r1, [r0, #12]
 800bc1e:	6643      	str	r3, [r0, #100]	; 0x64
 800bc20:	81c2      	strh	r2, [r0, #14]
 800bc22:	6183      	str	r3, [r0, #24]
 800bc24:	4619      	mov	r1, r3
 800bc26:	2208      	movs	r2, #8
 800bc28:	305c      	adds	r0, #92	; 0x5c
 800bc2a:	f7fe f90b 	bl	8009e44 <memset>
 800bc2e:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <std+0x38>)
 800bc30:	6263      	str	r3, [r4, #36]	; 0x24
 800bc32:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <std+0x3c>)
 800bc34:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc36:	4b05      	ldr	r3, [pc, #20]	; (800bc4c <std+0x40>)
 800bc38:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc3a:	4b05      	ldr	r3, [pc, #20]	; (800bc50 <std+0x44>)
 800bc3c:	6224      	str	r4, [r4, #32]
 800bc3e:	6323      	str	r3, [r4, #48]	; 0x30
 800bc40:	bd10      	pop	{r4, pc}
 800bc42:	bf00      	nop
 800bc44:	0800cda9 	.word	0x0800cda9
 800bc48:	0800cdcf 	.word	0x0800cdcf
 800bc4c:	0800ce07 	.word	0x0800ce07
 800bc50:	0800ce2b 	.word	0x0800ce2b

0800bc54 <_cleanup_r>:
 800bc54:	4901      	ldr	r1, [pc, #4]	; (800bc5c <_cleanup_r+0x8>)
 800bc56:	f000 b8c1 	b.w	800bddc <_fwalk_reent>
 800bc5a:	bf00      	nop
 800bc5c:	0800d261 	.word	0x0800d261

0800bc60 <__sfmoreglue>:
 800bc60:	b570      	push	{r4, r5, r6, lr}
 800bc62:	2268      	movs	r2, #104	; 0x68
 800bc64:	1e4d      	subs	r5, r1, #1
 800bc66:	4355      	muls	r5, r2
 800bc68:	460e      	mov	r6, r1
 800bc6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc6e:	f7fe f95d 	bl	8009f2c <_malloc_r>
 800bc72:	4604      	mov	r4, r0
 800bc74:	b140      	cbz	r0, 800bc88 <__sfmoreglue+0x28>
 800bc76:	2100      	movs	r1, #0
 800bc78:	e9c0 1600 	strd	r1, r6, [r0]
 800bc7c:	300c      	adds	r0, #12
 800bc7e:	60a0      	str	r0, [r4, #8]
 800bc80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc84:	f7fe f8de 	bl	8009e44 <memset>
 800bc88:	4620      	mov	r0, r4
 800bc8a:	bd70      	pop	{r4, r5, r6, pc}

0800bc8c <__sfp_lock_acquire>:
 800bc8c:	4801      	ldr	r0, [pc, #4]	; (800bc94 <__sfp_lock_acquire+0x8>)
 800bc8e:	f000 b9d1 	b.w	800c034 <__retarget_lock_acquire_recursive>
 800bc92:	bf00      	nop
 800bc94:	20000b4e 	.word	0x20000b4e

0800bc98 <__sfp_lock_release>:
 800bc98:	4801      	ldr	r0, [pc, #4]	; (800bca0 <__sfp_lock_release+0x8>)
 800bc9a:	f000 b9cd 	b.w	800c038 <__retarget_lock_release_recursive>
 800bc9e:	bf00      	nop
 800bca0:	20000b4e 	.word	0x20000b4e

0800bca4 <__sinit_lock_acquire>:
 800bca4:	4801      	ldr	r0, [pc, #4]	; (800bcac <__sinit_lock_acquire+0x8>)
 800bca6:	f000 b9c5 	b.w	800c034 <__retarget_lock_acquire_recursive>
 800bcaa:	bf00      	nop
 800bcac:	20000b4f 	.word	0x20000b4f

0800bcb0 <__sinit_lock_release>:
 800bcb0:	4801      	ldr	r0, [pc, #4]	; (800bcb8 <__sinit_lock_release+0x8>)
 800bcb2:	f000 b9c1 	b.w	800c038 <__retarget_lock_release_recursive>
 800bcb6:	bf00      	nop
 800bcb8:	20000b4f 	.word	0x20000b4f

0800bcbc <__sinit>:
 800bcbc:	b510      	push	{r4, lr}
 800bcbe:	4604      	mov	r4, r0
 800bcc0:	f7ff fff0 	bl	800bca4 <__sinit_lock_acquire>
 800bcc4:	69a3      	ldr	r3, [r4, #24]
 800bcc6:	b11b      	cbz	r3, 800bcd0 <__sinit+0x14>
 800bcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bccc:	f7ff bff0 	b.w	800bcb0 <__sinit_lock_release>
 800bcd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bcd4:	6523      	str	r3, [r4, #80]	; 0x50
 800bcd6:	4b13      	ldr	r3, [pc, #76]	; (800bd24 <__sinit+0x68>)
 800bcd8:	4a13      	ldr	r2, [pc, #76]	; (800bd28 <__sinit+0x6c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	62a2      	str	r2, [r4, #40]	; 0x28
 800bcde:	42a3      	cmp	r3, r4
 800bce0:	bf04      	itt	eq
 800bce2:	2301      	moveq	r3, #1
 800bce4:	61a3      	streq	r3, [r4, #24]
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 f820 	bl	800bd2c <__sfp>
 800bcec:	6060      	str	r0, [r4, #4]
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f000 f81c 	bl	800bd2c <__sfp>
 800bcf4:	60a0      	str	r0, [r4, #8]
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	f000 f818 	bl	800bd2c <__sfp>
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	60e0      	str	r0, [r4, #12]
 800bd00:	2104      	movs	r1, #4
 800bd02:	6860      	ldr	r0, [r4, #4]
 800bd04:	f7ff ff82 	bl	800bc0c <std>
 800bd08:	68a0      	ldr	r0, [r4, #8]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	2109      	movs	r1, #9
 800bd0e:	f7ff ff7d 	bl	800bc0c <std>
 800bd12:	68e0      	ldr	r0, [r4, #12]
 800bd14:	2202      	movs	r2, #2
 800bd16:	2112      	movs	r1, #18
 800bd18:	f7ff ff78 	bl	800bc0c <std>
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	61a3      	str	r3, [r4, #24]
 800bd20:	e7d2      	b.n	800bcc8 <__sinit+0xc>
 800bd22:	bf00      	nop
 800bd24:	08026000 	.word	0x08026000
 800bd28:	0800bc55 	.word	0x0800bc55

0800bd2c <__sfp>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	4607      	mov	r7, r0
 800bd30:	f7ff ffac 	bl	800bc8c <__sfp_lock_acquire>
 800bd34:	4b1e      	ldr	r3, [pc, #120]	; (800bdb0 <__sfp+0x84>)
 800bd36:	681e      	ldr	r6, [r3, #0]
 800bd38:	69b3      	ldr	r3, [r6, #24]
 800bd3a:	b913      	cbnz	r3, 800bd42 <__sfp+0x16>
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	f7ff ffbd 	bl	800bcbc <__sinit>
 800bd42:	3648      	adds	r6, #72	; 0x48
 800bd44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd48:	3b01      	subs	r3, #1
 800bd4a:	d503      	bpl.n	800bd54 <__sfp+0x28>
 800bd4c:	6833      	ldr	r3, [r6, #0]
 800bd4e:	b30b      	cbz	r3, 800bd94 <__sfp+0x68>
 800bd50:	6836      	ldr	r6, [r6, #0]
 800bd52:	e7f7      	b.n	800bd44 <__sfp+0x18>
 800bd54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd58:	b9d5      	cbnz	r5, 800bd90 <__sfp+0x64>
 800bd5a:	4b16      	ldr	r3, [pc, #88]	; (800bdb4 <__sfp+0x88>)
 800bd5c:	60e3      	str	r3, [r4, #12]
 800bd5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd62:	6665      	str	r5, [r4, #100]	; 0x64
 800bd64:	f000 f964 	bl	800c030 <__retarget_lock_init_recursive>
 800bd68:	f7ff ff96 	bl	800bc98 <__sfp_lock_release>
 800bd6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd74:	6025      	str	r5, [r4, #0]
 800bd76:	61a5      	str	r5, [r4, #24]
 800bd78:	2208      	movs	r2, #8
 800bd7a:	4629      	mov	r1, r5
 800bd7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd80:	f7fe f860 	bl	8009e44 <memset>
 800bd84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd90:	3468      	adds	r4, #104	; 0x68
 800bd92:	e7d9      	b.n	800bd48 <__sfp+0x1c>
 800bd94:	2104      	movs	r1, #4
 800bd96:	4638      	mov	r0, r7
 800bd98:	f7ff ff62 	bl	800bc60 <__sfmoreglue>
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	6030      	str	r0, [r6, #0]
 800bda0:	2800      	cmp	r0, #0
 800bda2:	d1d5      	bne.n	800bd50 <__sfp+0x24>
 800bda4:	f7ff ff78 	bl	800bc98 <__sfp_lock_release>
 800bda8:	230c      	movs	r3, #12
 800bdaa:	603b      	str	r3, [r7, #0]
 800bdac:	e7ee      	b.n	800bd8c <__sfp+0x60>
 800bdae:	bf00      	nop
 800bdb0:	08026000 	.word	0x08026000
 800bdb4:	ffff0001 	.word	0xffff0001

0800bdb8 <fiprintf>:
 800bdb8:	b40e      	push	{r1, r2, r3}
 800bdba:	b503      	push	{r0, r1, lr}
 800bdbc:	4601      	mov	r1, r0
 800bdbe:	ab03      	add	r3, sp, #12
 800bdc0:	4805      	ldr	r0, [pc, #20]	; (800bdd8 <fiprintf+0x20>)
 800bdc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdc6:	6800      	ldr	r0, [r0, #0]
 800bdc8:	9301      	str	r3, [sp, #4]
 800bdca:	f000 fe71 	bl	800cab0 <_vfiprintf_r>
 800bdce:	b002      	add	sp, #8
 800bdd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdd4:	b003      	add	sp, #12
 800bdd6:	4770      	bx	lr
 800bdd8:	200000cc 	.word	0x200000cc

0800bddc <_fwalk_reent>:
 800bddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde0:	4606      	mov	r6, r0
 800bde2:	4688      	mov	r8, r1
 800bde4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bde8:	2700      	movs	r7, #0
 800bdea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdee:	f1b9 0901 	subs.w	r9, r9, #1
 800bdf2:	d505      	bpl.n	800be00 <_fwalk_reent+0x24>
 800bdf4:	6824      	ldr	r4, [r4, #0]
 800bdf6:	2c00      	cmp	r4, #0
 800bdf8:	d1f7      	bne.n	800bdea <_fwalk_reent+0xe>
 800bdfa:	4638      	mov	r0, r7
 800bdfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be00:	89ab      	ldrh	r3, [r5, #12]
 800be02:	2b01      	cmp	r3, #1
 800be04:	d907      	bls.n	800be16 <_fwalk_reent+0x3a>
 800be06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be0a:	3301      	adds	r3, #1
 800be0c:	d003      	beq.n	800be16 <_fwalk_reent+0x3a>
 800be0e:	4629      	mov	r1, r5
 800be10:	4630      	mov	r0, r6
 800be12:	47c0      	blx	r8
 800be14:	4307      	orrs	r7, r0
 800be16:	3568      	adds	r5, #104	; 0x68
 800be18:	e7e9      	b.n	800bdee <_fwalk_reent+0x12>
	...

0800be1c <_findenv_r>:
 800be1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be20:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800be90 <_findenv_r+0x74>
 800be24:	4607      	mov	r7, r0
 800be26:	4689      	mov	r9, r1
 800be28:	4616      	mov	r6, r2
 800be2a:	f001 f987 	bl	800d13c <__env_lock>
 800be2e:	f8da 4000 	ldr.w	r4, [sl]
 800be32:	b134      	cbz	r4, 800be42 <_findenv_r+0x26>
 800be34:	464b      	mov	r3, r9
 800be36:	4698      	mov	r8, r3
 800be38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be3c:	b13a      	cbz	r2, 800be4e <_findenv_r+0x32>
 800be3e:	2a3d      	cmp	r2, #61	; 0x3d
 800be40:	d1f9      	bne.n	800be36 <_findenv_r+0x1a>
 800be42:	4638      	mov	r0, r7
 800be44:	f001 f980 	bl	800d148 <__env_unlock>
 800be48:	2000      	movs	r0, #0
 800be4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be4e:	eba8 0809 	sub.w	r8, r8, r9
 800be52:	46a3      	mov	fp, r4
 800be54:	f854 0b04 	ldr.w	r0, [r4], #4
 800be58:	2800      	cmp	r0, #0
 800be5a:	d0f2      	beq.n	800be42 <_findenv_r+0x26>
 800be5c:	4642      	mov	r2, r8
 800be5e:	4649      	mov	r1, r9
 800be60:	f000 ffef 	bl	800ce42 <strncmp>
 800be64:	2800      	cmp	r0, #0
 800be66:	d1f4      	bne.n	800be52 <_findenv_r+0x36>
 800be68:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800be6c:	eb03 0508 	add.w	r5, r3, r8
 800be70:	f813 3008 	ldrb.w	r3, [r3, r8]
 800be74:	2b3d      	cmp	r3, #61	; 0x3d
 800be76:	d1ec      	bne.n	800be52 <_findenv_r+0x36>
 800be78:	f8da 3000 	ldr.w	r3, [sl]
 800be7c:	ebab 0303 	sub.w	r3, fp, r3
 800be80:	109b      	asrs	r3, r3, #2
 800be82:	4638      	mov	r0, r7
 800be84:	6033      	str	r3, [r6, #0]
 800be86:	f001 f95f 	bl	800d148 <__env_unlock>
 800be8a:	1c68      	adds	r0, r5, #1
 800be8c:	e7dd      	b.n	800be4a <_findenv_r+0x2e>
 800be8e:	bf00      	nop
 800be90:	20000190 	.word	0x20000190

0800be94 <_getenv_r>:
 800be94:	b507      	push	{r0, r1, r2, lr}
 800be96:	aa01      	add	r2, sp, #4
 800be98:	f7ff ffc0 	bl	800be1c <_findenv_r>
 800be9c:	b003      	add	sp, #12
 800be9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800bea4 <_gettimeofday_r>:
 800bea4:	b538      	push	{r3, r4, r5, lr}
 800bea6:	4d07      	ldr	r5, [pc, #28]	; (800bec4 <_gettimeofday_r+0x20>)
 800bea8:	2300      	movs	r3, #0
 800beaa:	4604      	mov	r4, r0
 800beac:	4608      	mov	r0, r1
 800beae:	4611      	mov	r1, r2
 800beb0:	602b      	str	r3, [r5, #0]
 800beb2:	f001 fff1 	bl	800de98 <_gettimeofday>
 800beb6:	1c43      	adds	r3, r0, #1
 800beb8:	d102      	bne.n	800bec0 <_gettimeofday_r+0x1c>
 800beba:	682b      	ldr	r3, [r5, #0]
 800bebc:	b103      	cbz	r3, 800bec0 <_gettimeofday_r+0x1c>
 800bebe:	6023      	str	r3, [r4, #0]
 800bec0:	bd38      	pop	{r3, r4, r5, pc}
 800bec2:	bf00      	nop
 800bec4:	20000b54 	.word	0x20000b54

0800bec8 <__gettzinfo>:
 800bec8:	4800      	ldr	r0, [pc, #0]	; (800becc <__gettzinfo+0x4>)
 800beca:	4770      	bx	lr
 800becc:	20000138 	.word	0x20000138

0800bed0 <gmtime_r>:
 800bed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed4:	e9d0 6700 	ldrd	r6, r7, [r0]
 800bed8:	460c      	mov	r4, r1
 800beda:	4a4f      	ldr	r2, [pc, #316]	; (800c018 <gmtime_r+0x148>)
 800bedc:	2300      	movs	r3, #0
 800bede:	4630      	mov	r0, r6
 800bee0:	4639      	mov	r1, r7
 800bee2:	f7f4 ff2b 	bl	8000d3c <__aeabi_ldivmod>
 800bee6:	4639      	mov	r1, r7
 800bee8:	4605      	mov	r5, r0
 800beea:	4a4b      	ldr	r2, [pc, #300]	; (800c018 <gmtime_r+0x148>)
 800beec:	4630      	mov	r0, r6
 800beee:	2300      	movs	r3, #0
 800bef0:	f7f4 ff24 	bl	8000d3c <__aeabi_ldivmod>
 800bef4:	2a00      	cmp	r2, #0
 800bef6:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800befa:	bfb7      	itett	lt
 800befc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800bf00:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800bf04:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800bf08:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800bf0c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800bf10:	fbb2 f1f0 	udiv	r1, r2, r0
 800bf14:	fb00 2211 	mls	r2, r0, r1, r2
 800bf18:	203c      	movs	r0, #60	; 0x3c
 800bf1a:	60a1      	str	r1, [r4, #8]
 800bf1c:	fbb2 f1f0 	udiv	r1, r2, r0
 800bf20:	fb00 2211 	mls	r2, r0, r1, r2
 800bf24:	6061      	str	r1, [r4, #4]
 800bf26:	6022      	str	r2, [r4, #0]
 800bf28:	2107      	movs	r1, #7
 800bf2a:	1cda      	adds	r2, r3, #3
 800bf2c:	fb92 f1f1 	sdiv	r1, r2, r1
 800bf30:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bf34:	1a52      	subs	r2, r2, r1
 800bf36:	bf48      	it	mi
 800bf38:	3207      	addmi	r2, #7
 800bf3a:	4d38      	ldr	r5, [pc, #224]	; (800c01c <gmtime_r+0x14c>)
 800bf3c:	4838      	ldr	r0, [pc, #224]	; (800c020 <gmtime_r+0x150>)
 800bf3e:	61a2      	str	r2, [r4, #24]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	bfb7      	itett	lt
 800bf44:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800bf48:	fb93 f5f5 	sdivge	r5, r3, r5
 800bf4c:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800bf50:	fb92 f5f5 	sdivlt	r5, r2, r5
 800bf54:	fb00 3005 	mla	r0, r0, r5, r3
 800bf58:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800bf5c:	fbb0 f2f2 	udiv	r2, r0, r2
 800bf60:	4402      	add	r2, r0
 800bf62:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800bf66:	fbb0 f1f3 	udiv	r1, r0, r3
 800bf6a:	1a52      	subs	r2, r2, r1
 800bf6c:	f240 1c6d 	movw	ip, #365	; 0x16d
 800bf70:	492c      	ldr	r1, [pc, #176]	; (800c024 <gmtime_r+0x154>)
 800bf72:	fbb0 f1f1 	udiv	r1, r0, r1
 800bf76:	2764      	movs	r7, #100	; 0x64
 800bf78:	1a52      	subs	r2, r2, r1
 800bf7a:	fbb2 f1fc 	udiv	r1, r2, ip
 800bf7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf82:	fbb1 f6f7 	udiv	r6, r1, r7
 800bf86:	1af3      	subs	r3, r6, r3
 800bf88:	4403      	add	r3, r0
 800bf8a:	fb0c 3311 	mls	r3, ip, r1, r3
 800bf8e:	2299      	movs	r2, #153	; 0x99
 800bf90:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800bf94:	f10e 0e02 	add.w	lr, lr, #2
 800bf98:	f103 0c01 	add.w	ip, r3, #1
 800bf9c:	fbbe f0f2 	udiv	r0, lr, r2
 800bfa0:	4342      	muls	r2, r0
 800bfa2:	3202      	adds	r2, #2
 800bfa4:	f04f 0805 	mov.w	r8, #5
 800bfa8:	fbb2 f2f8 	udiv	r2, r2, r8
 800bfac:	ebac 0c02 	sub.w	ip, ip, r2
 800bfb0:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800bfb4:	4596      	cmp	lr, r2
 800bfb6:	bf94      	ite	ls
 800bfb8:	2202      	movls	r2, #2
 800bfba:	f06f 0209 	mvnhi.w	r2, #9
 800bfbe:	4410      	add	r0, r2
 800bfc0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bfc4:	fb02 1505 	mla	r5, r2, r5, r1
 800bfc8:	2801      	cmp	r0, #1
 800bfca:	bf98      	it	ls
 800bfcc:	3501      	addls	r5, #1
 800bfce:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800bfd2:	d30d      	bcc.n	800bff0 <gmtime_r+0x120>
 800bfd4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800bfd8:	61e3      	str	r3, [r4, #28]
 800bfda:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800bfde:	2300      	movs	r3, #0
 800bfe0:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800bfe4:	f8c4 c00c 	str.w	ip, [r4, #12]
 800bfe8:	6223      	str	r3, [r4, #32]
 800bfea:	4620      	mov	r0, r4
 800bfec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff0:	078a      	lsls	r2, r1, #30
 800bff2:	d102      	bne.n	800bffa <gmtime_r+0x12a>
 800bff4:	fb07 1616 	mls	r6, r7, r6, r1
 800bff8:	b95e      	cbnz	r6, 800c012 <gmtime_r+0x142>
 800bffa:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bffe:	fbb1 f6f2 	udiv	r6, r1, r2
 800c002:	fb02 1216 	mls	r2, r2, r6, r1
 800c006:	fab2 f282 	clz	r2, r2
 800c00a:	0952      	lsrs	r2, r2, #5
 800c00c:	333b      	adds	r3, #59	; 0x3b
 800c00e:	4413      	add	r3, r2
 800c010:	e7e2      	b.n	800bfd8 <gmtime_r+0x108>
 800c012:	2201      	movs	r2, #1
 800c014:	e7fa      	b.n	800c00c <gmtime_r+0x13c>
 800c016:	bf00      	nop
 800c018:	00015180 	.word	0x00015180
 800c01c:	00023ab1 	.word	0x00023ab1
 800c020:	fffdc54f 	.word	0xfffdc54f
 800c024:	00023ab0 	.word	0x00023ab0

0800c028 <_localeconv_r>:
 800c028:	4800      	ldr	r0, [pc, #0]	; (800c02c <_localeconv_r+0x4>)
 800c02a:	4770      	bx	lr
 800c02c:	20000284 	.word	0x20000284

0800c030 <__retarget_lock_init_recursive>:
 800c030:	4770      	bx	lr

0800c032 <__retarget_lock_acquire>:
 800c032:	4770      	bx	lr

0800c034 <__retarget_lock_acquire_recursive>:
 800c034:	4770      	bx	lr

0800c036 <__retarget_lock_release>:
 800c036:	4770      	bx	lr

0800c038 <__retarget_lock_release_recursive>:
 800c038:	4770      	bx	lr

0800c03a <memcpy>:
 800c03a:	440a      	add	r2, r1
 800c03c:	4291      	cmp	r1, r2
 800c03e:	f100 33ff 	add.w	r3, r0, #4294967295
 800c042:	d100      	bne.n	800c046 <memcpy+0xc>
 800c044:	4770      	bx	lr
 800c046:	b510      	push	{r4, lr}
 800c048:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c04c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c050:	4291      	cmp	r1, r2
 800c052:	d1f9      	bne.n	800c048 <memcpy+0xe>
 800c054:	bd10      	pop	{r4, pc}
	...

0800c058 <__malloc_lock>:
 800c058:	4801      	ldr	r0, [pc, #4]	; (800c060 <__malloc_lock+0x8>)
 800c05a:	f7ff bfeb 	b.w	800c034 <__retarget_lock_acquire_recursive>
 800c05e:	bf00      	nop
 800c060:	20000b4d 	.word	0x20000b4d

0800c064 <__malloc_unlock>:
 800c064:	4801      	ldr	r0, [pc, #4]	; (800c06c <__malloc_unlock+0x8>)
 800c066:	f7ff bfe7 	b.w	800c038 <__retarget_lock_release_recursive>
 800c06a:	bf00      	nop
 800c06c:	20000b4d 	.word	0x20000b4d

0800c070 <_Balloc>:
 800c070:	b570      	push	{r4, r5, r6, lr}
 800c072:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c074:	4604      	mov	r4, r0
 800c076:	460d      	mov	r5, r1
 800c078:	b976      	cbnz	r6, 800c098 <_Balloc+0x28>
 800c07a:	2010      	movs	r0, #16
 800c07c:	f7fd fed2 	bl	8009e24 <malloc>
 800c080:	4602      	mov	r2, r0
 800c082:	6260      	str	r0, [r4, #36]	; 0x24
 800c084:	b920      	cbnz	r0, 800c090 <_Balloc+0x20>
 800c086:	4b18      	ldr	r3, [pc, #96]	; (800c0e8 <_Balloc+0x78>)
 800c088:	4818      	ldr	r0, [pc, #96]	; (800c0ec <_Balloc+0x7c>)
 800c08a:	2166      	movs	r1, #102	; 0x66
 800c08c:	f7fe ff26 	bl	800aedc <__assert_func>
 800c090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c094:	6006      	str	r6, [r0, #0]
 800c096:	60c6      	str	r6, [r0, #12]
 800c098:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c09a:	68f3      	ldr	r3, [r6, #12]
 800c09c:	b183      	cbz	r3, 800c0c0 <_Balloc+0x50>
 800c09e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0a0:	68db      	ldr	r3, [r3, #12]
 800c0a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c0a6:	b9b8      	cbnz	r0, 800c0d8 <_Balloc+0x68>
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	fa01 f605 	lsl.w	r6, r1, r5
 800c0ae:	1d72      	adds	r2, r6, #5
 800c0b0:	0092      	lsls	r2, r2, #2
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f000 fb60 	bl	800c778 <_calloc_r>
 800c0b8:	b160      	cbz	r0, 800c0d4 <_Balloc+0x64>
 800c0ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c0be:	e00e      	b.n	800c0de <_Balloc+0x6e>
 800c0c0:	2221      	movs	r2, #33	; 0x21
 800c0c2:	2104      	movs	r1, #4
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f000 fb57 	bl	800c778 <_calloc_r>
 800c0ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0cc:	60f0      	str	r0, [r6, #12]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d1e4      	bne.n	800c09e <_Balloc+0x2e>
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	bd70      	pop	{r4, r5, r6, pc}
 800c0d8:	6802      	ldr	r2, [r0, #0]
 800c0da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0de:	2300      	movs	r3, #0
 800c0e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0e4:	e7f7      	b.n	800c0d6 <_Balloc+0x66>
 800c0e6:	bf00      	nop
 800c0e8:	08026004 	.word	0x08026004
 800c0ec:	08026310 	.word	0x08026310

0800c0f0 <_Bfree>:
 800c0f0:	b570      	push	{r4, r5, r6, lr}
 800c0f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	b976      	cbnz	r6, 800c118 <_Bfree+0x28>
 800c0fa:	2010      	movs	r0, #16
 800c0fc:	f7fd fe92 	bl	8009e24 <malloc>
 800c100:	4602      	mov	r2, r0
 800c102:	6268      	str	r0, [r5, #36]	; 0x24
 800c104:	b920      	cbnz	r0, 800c110 <_Bfree+0x20>
 800c106:	4b09      	ldr	r3, [pc, #36]	; (800c12c <_Bfree+0x3c>)
 800c108:	4809      	ldr	r0, [pc, #36]	; (800c130 <_Bfree+0x40>)
 800c10a:	218a      	movs	r1, #138	; 0x8a
 800c10c:	f7fe fee6 	bl	800aedc <__assert_func>
 800c110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c114:	6006      	str	r6, [r0, #0]
 800c116:	60c6      	str	r6, [r0, #12]
 800c118:	b13c      	cbz	r4, 800c12a <_Bfree+0x3a>
 800c11a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c11c:	6862      	ldr	r2, [r4, #4]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c124:	6021      	str	r1, [r4, #0]
 800c126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c12a:	bd70      	pop	{r4, r5, r6, pc}
 800c12c:	08026004 	.word	0x08026004
 800c130:	08026310 	.word	0x08026310

0800c134 <__multadd>:
 800c134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c138:	690d      	ldr	r5, [r1, #16]
 800c13a:	4607      	mov	r7, r0
 800c13c:	460c      	mov	r4, r1
 800c13e:	461e      	mov	r6, r3
 800c140:	f101 0c14 	add.w	ip, r1, #20
 800c144:	2000      	movs	r0, #0
 800c146:	f8dc 3000 	ldr.w	r3, [ip]
 800c14a:	b299      	uxth	r1, r3
 800c14c:	fb02 6101 	mla	r1, r2, r1, r6
 800c150:	0c1e      	lsrs	r6, r3, #16
 800c152:	0c0b      	lsrs	r3, r1, #16
 800c154:	fb02 3306 	mla	r3, r2, r6, r3
 800c158:	b289      	uxth	r1, r1
 800c15a:	3001      	adds	r0, #1
 800c15c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c160:	4285      	cmp	r5, r0
 800c162:	f84c 1b04 	str.w	r1, [ip], #4
 800c166:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c16a:	dcec      	bgt.n	800c146 <__multadd+0x12>
 800c16c:	b30e      	cbz	r6, 800c1b2 <__multadd+0x7e>
 800c16e:	68a3      	ldr	r3, [r4, #8]
 800c170:	42ab      	cmp	r3, r5
 800c172:	dc19      	bgt.n	800c1a8 <__multadd+0x74>
 800c174:	6861      	ldr	r1, [r4, #4]
 800c176:	4638      	mov	r0, r7
 800c178:	3101      	adds	r1, #1
 800c17a:	f7ff ff79 	bl	800c070 <_Balloc>
 800c17e:	4680      	mov	r8, r0
 800c180:	b928      	cbnz	r0, 800c18e <__multadd+0x5a>
 800c182:	4602      	mov	r2, r0
 800c184:	4b0c      	ldr	r3, [pc, #48]	; (800c1b8 <__multadd+0x84>)
 800c186:	480d      	ldr	r0, [pc, #52]	; (800c1bc <__multadd+0x88>)
 800c188:	21b5      	movs	r1, #181	; 0xb5
 800c18a:	f7fe fea7 	bl	800aedc <__assert_func>
 800c18e:	6922      	ldr	r2, [r4, #16]
 800c190:	3202      	adds	r2, #2
 800c192:	f104 010c 	add.w	r1, r4, #12
 800c196:	0092      	lsls	r2, r2, #2
 800c198:	300c      	adds	r0, #12
 800c19a:	f7ff ff4e 	bl	800c03a <memcpy>
 800c19e:	4621      	mov	r1, r4
 800c1a0:	4638      	mov	r0, r7
 800c1a2:	f7ff ffa5 	bl	800c0f0 <_Bfree>
 800c1a6:	4644      	mov	r4, r8
 800c1a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c1ac:	3501      	adds	r5, #1
 800c1ae:	615e      	str	r6, [r3, #20]
 800c1b0:	6125      	str	r5, [r4, #16]
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b8:	0802629f 	.word	0x0802629f
 800c1bc:	08026310 	.word	0x08026310

0800c1c0 <__hi0bits>:
 800c1c0:	0c03      	lsrs	r3, r0, #16
 800c1c2:	041b      	lsls	r3, r3, #16
 800c1c4:	b9d3      	cbnz	r3, 800c1fc <__hi0bits+0x3c>
 800c1c6:	0400      	lsls	r0, r0, #16
 800c1c8:	2310      	movs	r3, #16
 800c1ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c1ce:	bf04      	itt	eq
 800c1d0:	0200      	lsleq	r0, r0, #8
 800c1d2:	3308      	addeq	r3, #8
 800c1d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c1d8:	bf04      	itt	eq
 800c1da:	0100      	lsleq	r0, r0, #4
 800c1dc:	3304      	addeq	r3, #4
 800c1de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c1e2:	bf04      	itt	eq
 800c1e4:	0080      	lsleq	r0, r0, #2
 800c1e6:	3302      	addeq	r3, #2
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	db05      	blt.n	800c1f8 <__hi0bits+0x38>
 800c1ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c1f0:	f103 0301 	add.w	r3, r3, #1
 800c1f4:	bf08      	it	eq
 800c1f6:	2320      	moveq	r3, #32
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	4770      	bx	lr
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	e7e4      	b.n	800c1ca <__hi0bits+0xa>

0800c200 <__lo0bits>:
 800c200:	6803      	ldr	r3, [r0, #0]
 800c202:	f013 0207 	ands.w	r2, r3, #7
 800c206:	4601      	mov	r1, r0
 800c208:	d00b      	beq.n	800c222 <__lo0bits+0x22>
 800c20a:	07da      	lsls	r2, r3, #31
 800c20c:	d423      	bmi.n	800c256 <__lo0bits+0x56>
 800c20e:	0798      	lsls	r0, r3, #30
 800c210:	bf49      	itett	mi
 800c212:	085b      	lsrmi	r3, r3, #1
 800c214:	089b      	lsrpl	r3, r3, #2
 800c216:	2001      	movmi	r0, #1
 800c218:	600b      	strmi	r3, [r1, #0]
 800c21a:	bf5c      	itt	pl
 800c21c:	600b      	strpl	r3, [r1, #0]
 800c21e:	2002      	movpl	r0, #2
 800c220:	4770      	bx	lr
 800c222:	b298      	uxth	r0, r3
 800c224:	b9a8      	cbnz	r0, 800c252 <__lo0bits+0x52>
 800c226:	0c1b      	lsrs	r3, r3, #16
 800c228:	2010      	movs	r0, #16
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	b90a      	cbnz	r2, 800c232 <__lo0bits+0x32>
 800c22e:	3008      	adds	r0, #8
 800c230:	0a1b      	lsrs	r3, r3, #8
 800c232:	071a      	lsls	r2, r3, #28
 800c234:	bf04      	itt	eq
 800c236:	091b      	lsreq	r3, r3, #4
 800c238:	3004      	addeq	r0, #4
 800c23a:	079a      	lsls	r2, r3, #30
 800c23c:	bf04      	itt	eq
 800c23e:	089b      	lsreq	r3, r3, #2
 800c240:	3002      	addeq	r0, #2
 800c242:	07da      	lsls	r2, r3, #31
 800c244:	d403      	bmi.n	800c24e <__lo0bits+0x4e>
 800c246:	085b      	lsrs	r3, r3, #1
 800c248:	f100 0001 	add.w	r0, r0, #1
 800c24c:	d005      	beq.n	800c25a <__lo0bits+0x5a>
 800c24e:	600b      	str	r3, [r1, #0]
 800c250:	4770      	bx	lr
 800c252:	4610      	mov	r0, r2
 800c254:	e7e9      	b.n	800c22a <__lo0bits+0x2a>
 800c256:	2000      	movs	r0, #0
 800c258:	4770      	bx	lr
 800c25a:	2020      	movs	r0, #32
 800c25c:	4770      	bx	lr
	...

0800c260 <__i2b>:
 800c260:	b510      	push	{r4, lr}
 800c262:	460c      	mov	r4, r1
 800c264:	2101      	movs	r1, #1
 800c266:	f7ff ff03 	bl	800c070 <_Balloc>
 800c26a:	4602      	mov	r2, r0
 800c26c:	b928      	cbnz	r0, 800c27a <__i2b+0x1a>
 800c26e:	4b05      	ldr	r3, [pc, #20]	; (800c284 <__i2b+0x24>)
 800c270:	4805      	ldr	r0, [pc, #20]	; (800c288 <__i2b+0x28>)
 800c272:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c276:	f7fe fe31 	bl	800aedc <__assert_func>
 800c27a:	2301      	movs	r3, #1
 800c27c:	6144      	str	r4, [r0, #20]
 800c27e:	6103      	str	r3, [r0, #16]
 800c280:	bd10      	pop	{r4, pc}
 800c282:	bf00      	nop
 800c284:	0802629f 	.word	0x0802629f
 800c288:	08026310 	.word	0x08026310

0800c28c <__multiply>:
 800c28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c290:	4691      	mov	r9, r2
 800c292:	690a      	ldr	r2, [r1, #16]
 800c294:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c298:	429a      	cmp	r2, r3
 800c29a:	bfb8      	it	lt
 800c29c:	460b      	movlt	r3, r1
 800c29e:	460c      	mov	r4, r1
 800c2a0:	bfbc      	itt	lt
 800c2a2:	464c      	movlt	r4, r9
 800c2a4:	4699      	movlt	r9, r3
 800c2a6:	6927      	ldr	r7, [r4, #16]
 800c2a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c2ac:	68a3      	ldr	r3, [r4, #8]
 800c2ae:	6861      	ldr	r1, [r4, #4]
 800c2b0:	eb07 060a 	add.w	r6, r7, sl
 800c2b4:	42b3      	cmp	r3, r6
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	bfb8      	it	lt
 800c2ba:	3101      	addlt	r1, #1
 800c2bc:	f7ff fed8 	bl	800c070 <_Balloc>
 800c2c0:	b930      	cbnz	r0, 800c2d0 <__multiply+0x44>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	4b44      	ldr	r3, [pc, #272]	; (800c3d8 <__multiply+0x14c>)
 800c2c6:	4845      	ldr	r0, [pc, #276]	; (800c3dc <__multiply+0x150>)
 800c2c8:	f240 115d 	movw	r1, #349	; 0x15d
 800c2cc:	f7fe fe06 	bl	800aedc <__assert_func>
 800c2d0:	f100 0514 	add.w	r5, r0, #20
 800c2d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c2d8:	462b      	mov	r3, r5
 800c2da:	2200      	movs	r2, #0
 800c2dc:	4543      	cmp	r3, r8
 800c2de:	d321      	bcc.n	800c324 <__multiply+0x98>
 800c2e0:	f104 0314 	add.w	r3, r4, #20
 800c2e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c2e8:	f109 0314 	add.w	r3, r9, #20
 800c2ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c2f0:	9202      	str	r2, [sp, #8]
 800c2f2:	1b3a      	subs	r2, r7, r4
 800c2f4:	3a15      	subs	r2, #21
 800c2f6:	f022 0203 	bic.w	r2, r2, #3
 800c2fa:	3204      	adds	r2, #4
 800c2fc:	f104 0115 	add.w	r1, r4, #21
 800c300:	428f      	cmp	r7, r1
 800c302:	bf38      	it	cc
 800c304:	2204      	movcc	r2, #4
 800c306:	9201      	str	r2, [sp, #4]
 800c308:	9a02      	ldr	r2, [sp, #8]
 800c30a:	9303      	str	r3, [sp, #12]
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d80c      	bhi.n	800c32a <__multiply+0x9e>
 800c310:	2e00      	cmp	r6, #0
 800c312:	dd03      	ble.n	800c31c <__multiply+0x90>
 800c314:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d05a      	beq.n	800c3d2 <__multiply+0x146>
 800c31c:	6106      	str	r6, [r0, #16]
 800c31e:	b005      	add	sp, #20
 800c320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c324:	f843 2b04 	str.w	r2, [r3], #4
 800c328:	e7d8      	b.n	800c2dc <__multiply+0x50>
 800c32a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c32e:	f1ba 0f00 	cmp.w	sl, #0
 800c332:	d024      	beq.n	800c37e <__multiply+0xf2>
 800c334:	f104 0e14 	add.w	lr, r4, #20
 800c338:	46a9      	mov	r9, r5
 800c33a:	f04f 0c00 	mov.w	ip, #0
 800c33e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c342:	f8d9 1000 	ldr.w	r1, [r9]
 800c346:	fa1f fb82 	uxth.w	fp, r2
 800c34a:	b289      	uxth	r1, r1
 800c34c:	fb0a 110b 	mla	r1, sl, fp, r1
 800c350:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c354:	f8d9 2000 	ldr.w	r2, [r9]
 800c358:	4461      	add	r1, ip
 800c35a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c35e:	fb0a c20b 	mla	r2, sl, fp, ip
 800c362:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c366:	b289      	uxth	r1, r1
 800c368:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c36c:	4577      	cmp	r7, lr
 800c36e:	f849 1b04 	str.w	r1, [r9], #4
 800c372:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c376:	d8e2      	bhi.n	800c33e <__multiply+0xb2>
 800c378:	9a01      	ldr	r2, [sp, #4]
 800c37a:	f845 c002 	str.w	ip, [r5, r2]
 800c37e:	9a03      	ldr	r2, [sp, #12]
 800c380:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c384:	3304      	adds	r3, #4
 800c386:	f1b9 0f00 	cmp.w	r9, #0
 800c38a:	d020      	beq.n	800c3ce <__multiply+0x142>
 800c38c:	6829      	ldr	r1, [r5, #0]
 800c38e:	f104 0c14 	add.w	ip, r4, #20
 800c392:	46ae      	mov	lr, r5
 800c394:	f04f 0a00 	mov.w	sl, #0
 800c398:	f8bc b000 	ldrh.w	fp, [ip]
 800c39c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c3a0:	fb09 220b 	mla	r2, r9, fp, r2
 800c3a4:	4492      	add	sl, r2
 800c3a6:	b289      	uxth	r1, r1
 800c3a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c3ac:	f84e 1b04 	str.w	r1, [lr], #4
 800c3b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c3b4:	f8be 1000 	ldrh.w	r1, [lr]
 800c3b8:	0c12      	lsrs	r2, r2, #16
 800c3ba:	fb09 1102 	mla	r1, r9, r2, r1
 800c3be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c3c2:	4567      	cmp	r7, ip
 800c3c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c3c8:	d8e6      	bhi.n	800c398 <__multiply+0x10c>
 800c3ca:	9a01      	ldr	r2, [sp, #4]
 800c3cc:	50a9      	str	r1, [r5, r2]
 800c3ce:	3504      	adds	r5, #4
 800c3d0:	e79a      	b.n	800c308 <__multiply+0x7c>
 800c3d2:	3e01      	subs	r6, #1
 800c3d4:	e79c      	b.n	800c310 <__multiply+0x84>
 800c3d6:	bf00      	nop
 800c3d8:	0802629f 	.word	0x0802629f
 800c3dc:	08026310 	.word	0x08026310

0800c3e0 <__pow5mult>:
 800c3e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3e4:	4615      	mov	r5, r2
 800c3e6:	f012 0203 	ands.w	r2, r2, #3
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	460f      	mov	r7, r1
 800c3ee:	d007      	beq.n	800c400 <__pow5mult+0x20>
 800c3f0:	4c25      	ldr	r4, [pc, #148]	; (800c488 <__pow5mult+0xa8>)
 800c3f2:	3a01      	subs	r2, #1
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3fa:	f7ff fe9b 	bl	800c134 <__multadd>
 800c3fe:	4607      	mov	r7, r0
 800c400:	10ad      	asrs	r5, r5, #2
 800c402:	d03d      	beq.n	800c480 <__pow5mult+0xa0>
 800c404:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c406:	b97c      	cbnz	r4, 800c428 <__pow5mult+0x48>
 800c408:	2010      	movs	r0, #16
 800c40a:	f7fd fd0b 	bl	8009e24 <malloc>
 800c40e:	4602      	mov	r2, r0
 800c410:	6270      	str	r0, [r6, #36]	; 0x24
 800c412:	b928      	cbnz	r0, 800c420 <__pow5mult+0x40>
 800c414:	4b1d      	ldr	r3, [pc, #116]	; (800c48c <__pow5mult+0xac>)
 800c416:	481e      	ldr	r0, [pc, #120]	; (800c490 <__pow5mult+0xb0>)
 800c418:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c41c:	f7fe fd5e 	bl	800aedc <__assert_func>
 800c420:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c424:	6004      	str	r4, [r0, #0]
 800c426:	60c4      	str	r4, [r0, #12]
 800c428:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c42c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c430:	b94c      	cbnz	r4, 800c446 <__pow5mult+0x66>
 800c432:	f240 2171 	movw	r1, #625	; 0x271
 800c436:	4630      	mov	r0, r6
 800c438:	f7ff ff12 	bl	800c260 <__i2b>
 800c43c:	2300      	movs	r3, #0
 800c43e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c442:	4604      	mov	r4, r0
 800c444:	6003      	str	r3, [r0, #0]
 800c446:	f04f 0900 	mov.w	r9, #0
 800c44a:	07eb      	lsls	r3, r5, #31
 800c44c:	d50a      	bpl.n	800c464 <__pow5mult+0x84>
 800c44e:	4639      	mov	r1, r7
 800c450:	4622      	mov	r2, r4
 800c452:	4630      	mov	r0, r6
 800c454:	f7ff ff1a 	bl	800c28c <__multiply>
 800c458:	4639      	mov	r1, r7
 800c45a:	4680      	mov	r8, r0
 800c45c:	4630      	mov	r0, r6
 800c45e:	f7ff fe47 	bl	800c0f0 <_Bfree>
 800c462:	4647      	mov	r7, r8
 800c464:	106d      	asrs	r5, r5, #1
 800c466:	d00b      	beq.n	800c480 <__pow5mult+0xa0>
 800c468:	6820      	ldr	r0, [r4, #0]
 800c46a:	b938      	cbnz	r0, 800c47c <__pow5mult+0x9c>
 800c46c:	4622      	mov	r2, r4
 800c46e:	4621      	mov	r1, r4
 800c470:	4630      	mov	r0, r6
 800c472:	f7ff ff0b 	bl	800c28c <__multiply>
 800c476:	6020      	str	r0, [r4, #0]
 800c478:	f8c0 9000 	str.w	r9, [r0]
 800c47c:	4604      	mov	r4, r0
 800c47e:	e7e4      	b.n	800c44a <__pow5mult+0x6a>
 800c480:	4638      	mov	r0, r7
 800c482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c486:	bf00      	nop
 800c488:	08026460 	.word	0x08026460
 800c48c:	08026004 	.word	0x08026004
 800c490:	08026310 	.word	0x08026310

0800c494 <__lshift>:
 800c494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c498:	460c      	mov	r4, r1
 800c49a:	6849      	ldr	r1, [r1, #4]
 800c49c:	6923      	ldr	r3, [r4, #16]
 800c49e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c4a2:	68a3      	ldr	r3, [r4, #8]
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	4691      	mov	r9, r2
 800c4a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c4ac:	f108 0601 	add.w	r6, r8, #1
 800c4b0:	42b3      	cmp	r3, r6
 800c4b2:	db0b      	blt.n	800c4cc <__lshift+0x38>
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	f7ff fddb 	bl	800c070 <_Balloc>
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	b948      	cbnz	r0, 800c4d2 <__lshift+0x3e>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	4b2a      	ldr	r3, [pc, #168]	; (800c56c <__lshift+0xd8>)
 800c4c2:	482b      	ldr	r0, [pc, #172]	; (800c570 <__lshift+0xdc>)
 800c4c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c4c8:	f7fe fd08 	bl	800aedc <__assert_func>
 800c4cc:	3101      	adds	r1, #1
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	e7ee      	b.n	800c4b0 <__lshift+0x1c>
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	f100 0114 	add.w	r1, r0, #20
 800c4d8:	f100 0210 	add.w	r2, r0, #16
 800c4dc:	4618      	mov	r0, r3
 800c4de:	4553      	cmp	r3, sl
 800c4e0:	db37      	blt.n	800c552 <__lshift+0xbe>
 800c4e2:	6920      	ldr	r0, [r4, #16]
 800c4e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c4e8:	f104 0314 	add.w	r3, r4, #20
 800c4ec:	f019 091f 	ands.w	r9, r9, #31
 800c4f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c4f8:	d02f      	beq.n	800c55a <__lshift+0xc6>
 800c4fa:	f1c9 0e20 	rsb	lr, r9, #32
 800c4fe:	468a      	mov	sl, r1
 800c500:	f04f 0c00 	mov.w	ip, #0
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	fa02 f209 	lsl.w	r2, r2, r9
 800c50a:	ea42 020c 	orr.w	r2, r2, ip
 800c50e:	f84a 2b04 	str.w	r2, [sl], #4
 800c512:	f853 2b04 	ldr.w	r2, [r3], #4
 800c516:	4298      	cmp	r0, r3
 800c518:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c51c:	d8f2      	bhi.n	800c504 <__lshift+0x70>
 800c51e:	1b03      	subs	r3, r0, r4
 800c520:	3b15      	subs	r3, #21
 800c522:	f023 0303 	bic.w	r3, r3, #3
 800c526:	3304      	adds	r3, #4
 800c528:	f104 0215 	add.w	r2, r4, #21
 800c52c:	4290      	cmp	r0, r2
 800c52e:	bf38      	it	cc
 800c530:	2304      	movcc	r3, #4
 800c532:	f841 c003 	str.w	ip, [r1, r3]
 800c536:	f1bc 0f00 	cmp.w	ip, #0
 800c53a:	d001      	beq.n	800c540 <__lshift+0xac>
 800c53c:	f108 0602 	add.w	r6, r8, #2
 800c540:	3e01      	subs	r6, #1
 800c542:	4638      	mov	r0, r7
 800c544:	612e      	str	r6, [r5, #16]
 800c546:	4621      	mov	r1, r4
 800c548:	f7ff fdd2 	bl	800c0f0 <_Bfree>
 800c54c:	4628      	mov	r0, r5
 800c54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c552:	f842 0f04 	str.w	r0, [r2, #4]!
 800c556:	3301      	adds	r3, #1
 800c558:	e7c1      	b.n	800c4de <__lshift+0x4a>
 800c55a:	3904      	subs	r1, #4
 800c55c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c560:	f841 2f04 	str.w	r2, [r1, #4]!
 800c564:	4298      	cmp	r0, r3
 800c566:	d8f9      	bhi.n	800c55c <__lshift+0xc8>
 800c568:	e7ea      	b.n	800c540 <__lshift+0xac>
 800c56a:	bf00      	nop
 800c56c:	0802629f 	.word	0x0802629f
 800c570:	08026310 	.word	0x08026310

0800c574 <__mcmp>:
 800c574:	b530      	push	{r4, r5, lr}
 800c576:	6902      	ldr	r2, [r0, #16]
 800c578:	690c      	ldr	r4, [r1, #16]
 800c57a:	1b12      	subs	r2, r2, r4
 800c57c:	d10e      	bne.n	800c59c <__mcmp+0x28>
 800c57e:	f100 0314 	add.w	r3, r0, #20
 800c582:	3114      	adds	r1, #20
 800c584:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c588:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c58c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c590:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c594:	42a5      	cmp	r5, r4
 800c596:	d003      	beq.n	800c5a0 <__mcmp+0x2c>
 800c598:	d305      	bcc.n	800c5a6 <__mcmp+0x32>
 800c59a:	2201      	movs	r2, #1
 800c59c:	4610      	mov	r0, r2
 800c59e:	bd30      	pop	{r4, r5, pc}
 800c5a0:	4283      	cmp	r3, r0
 800c5a2:	d3f3      	bcc.n	800c58c <__mcmp+0x18>
 800c5a4:	e7fa      	b.n	800c59c <__mcmp+0x28>
 800c5a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c5aa:	e7f7      	b.n	800c59c <__mcmp+0x28>

0800c5ac <__mdiff>:
 800c5ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b0:	460c      	mov	r4, r1
 800c5b2:	4606      	mov	r6, r0
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	4690      	mov	r8, r2
 800c5ba:	f7ff ffdb 	bl	800c574 <__mcmp>
 800c5be:	1e05      	subs	r5, r0, #0
 800c5c0:	d110      	bne.n	800c5e4 <__mdiff+0x38>
 800c5c2:	4629      	mov	r1, r5
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7ff fd53 	bl	800c070 <_Balloc>
 800c5ca:	b930      	cbnz	r0, 800c5da <__mdiff+0x2e>
 800c5cc:	4b3a      	ldr	r3, [pc, #232]	; (800c6b8 <__mdiff+0x10c>)
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	f240 2132 	movw	r1, #562	; 0x232
 800c5d4:	4839      	ldr	r0, [pc, #228]	; (800c6bc <__mdiff+0x110>)
 800c5d6:	f7fe fc81 	bl	800aedc <__assert_func>
 800c5da:	2301      	movs	r3, #1
 800c5dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c5e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e4:	bfa4      	itt	ge
 800c5e6:	4643      	movge	r3, r8
 800c5e8:	46a0      	movge	r8, r4
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c5f0:	bfa6      	itte	ge
 800c5f2:	461c      	movge	r4, r3
 800c5f4:	2500      	movge	r5, #0
 800c5f6:	2501      	movlt	r5, #1
 800c5f8:	f7ff fd3a 	bl	800c070 <_Balloc>
 800c5fc:	b920      	cbnz	r0, 800c608 <__mdiff+0x5c>
 800c5fe:	4b2e      	ldr	r3, [pc, #184]	; (800c6b8 <__mdiff+0x10c>)
 800c600:	4602      	mov	r2, r0
 800c602:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c606:	e7e5      	b.n	800c5d4 <__mdiff+0x28>
 800c608:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c60c:	6926      	ldr	r6, [r4, #16]
 800c60e:	60c5      	str	r5, [r0, #12]
 800c610:	f104 0914 	add.w	r9, r4, #20
 800c614:	f108 0514 	add.w	r5, r8, #20
 800c618:	f100 0e14 	add.w	lr, r0, #20
 800c61c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c620:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c624:	f108 0210 	add.w	r2, r8, #16
 800c628:	46f2      	mov	sl, lr
 800c62a:	2100      	movs	r1, #0
 800c62c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c630:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c634:	fa1f f883 	uxth.w	r8, r3
 800c638:	fa11 f18b 	uxtah	r1, r1, fp
 800c63c:	0c1b      	lsrs	r3, r3, #16
 800c63e:	eba1 0808 	sub.w	r8, r1, r8
 800c642:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c646:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c64a:	fa1f f888 	uxth.w	r8, r8
 800c64e:	1419      	asrs	r1, r3, #16
 800c650:	454e      	cmp	r6, r9
 800c652:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c656:	f84a 3b04 	str.w	r3, [sl], #4
 800c65a:	d8e7      	bhi.n	800c62c <__mdiff+0x80>
 800c65c:	1b33      	subs	r3, r6, r4
 800c65e:	3b15      	subs	r3, #21
 800c660:	f023 0303 	bic.w	r3, r3, #3
 800c664:	3304      	adds	r3, #4
 800c666:	3415      	adds	r4, #21
 800c668:	42a6      	cmp	r6, r4
 800c66a:	bf38      	it	cc
 800c66c:	2304      	movcc	r3, #4
 800c66e:	441d      	add	r5, r3
 800c670:	4473      	add	r3, lr
 800c672:	469e      	mov	lr, r3
 800c674:	462e      	mov	r6, r5
 800c676:	4566      	cmp	r6, ip
 800c678:	d30e      	bcc.n	800c698 <__mdiff+0xec>
 800c67a:	f10c 0203 	add.w	r2, ip, #3
 800c67e:	1b52      	subs	r2, r2, r5
 800c680:	f022 0203 	bic.w	r2, r2, #3
 800c684:	3d03      	subs	r5, #3
 800c686:	45ac      	cmp	ip, r5
 800c688:	bf38      	it	cc
 800c68a:	2200      	movcc	r2, #0
 800c68c:	441a      	add	r2, r3
 800c68e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c692:	b17b      	cbz	r3, 800c6b4 <__mdiff+0x108>
 800c694:	6107      	str	r7, [r0, #16]
 800c696:	e7a3      	b.n	800c5e0 <__mdiff+0x34>
 800c698:	f856 8b04 	ldr.w	r8, [r6], #4
 800c69c:	fa11 f288 	uxtah	r2, r1, r8
 800c6a0:	1414      	asrs	r4, r2, #16
 800c6a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c6a6:	b292      	uxth	r2, r2
 800c6a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c6ac:	f84e 2b04 	str.w	r2, [lr], #4
 800c6b0:	1421      	asrs	r1, r4, #16
 800c6b2:	e7e0      	b.n	800c676 <__mdiff+0xca>
 800c6b4:	3f01      	subs	r7, #1
 800c6b6:	e7ea      	b.n	800c68e <__mdiff+0xe2>
 800c6b8:	0802629f 	.word	0x0802629f
 800c6bc:	08026310 	.word	0x08026310

0800c6c0 <__d2b>:
 800c6c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c6c4:	4689      	mov	r9, r1
 800c6c6:	2101      	movs	r1, #1
 800c6c8:	ec57 6b10 	vmov	r6, r7, d0
 800c6cc:	4690      	mov	r8, r2
 800c6ce:	f7ff fccf 	bl	800c070 <_Balloc>
 800c6d2:	4604      	mov	r4, r0
 800c6d4:	b930      	cbnz	r0, 800c6e4 <__d2b+0x24>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	4b25      	ldr	r3, [pc, #148]	; (800c770 <__d2b+0xb0>)
 800c6da:	4826      	ldr	r0, [pc, #152]	; (800c774 <__d2b+0xb4>)
 800c6dc:	f240 310a 	movw	r1, #778	; 0x30a
 800c6e0:	f7fe fbfc 	bl	800aedc <__assert_func>
 800c6e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c6e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c6ec:	bb35      	cbnz	r5, 800c73c <__d2b+0x7c>
 800c6ee:	2e00      	cmp	r6, #0
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	d028      	beq.n	800c746 <__d2b+0x86>
 800c6f4:	4668      	mov	r0, sp
 800c6f6:	9600      	str	r6, [sp, #0]
 800c6f8:	f7ff fd82 	bl	800c200 <__lo0bits>
 800c6fc:	9900      	ldr	r1, [sp, #0]
 800c6fe:	b300      	cbz	r0, 800c742 <__d2b+0x82>
 800c700:	9a01      	ldr	r2, [sp, #4]
 800c702:	f1c0 0320 	rsb	r3, r0, #32
 800c706:	fa02 f303 	lsl.w	r3, r2, r3
 800c70a:	430b      	orrs	r3, r1
 800c70c:	40c2      	lsrs	r2, r0
 800c70e:	6163      	str	r3, [r4, #20]
 800c710:	9201      	str	r2, [sp, #4]
 800c712:	9b01      	ldr	r3, [sp, #4]
 800c714:	61a3      	str	r3, [r4, #24]
 800c716:	2b00      	cmp	r3, #0
 800c718:	bf14      	ite	ne
 800c71a:	2202      	movne	r2, #2
 800c71c:	2201      	moveq	r2, #1
 800c71e:	6122      	str	r2, [r4, #16]
 800c720:	b1d5      	cbz	r5, 800c758 <__d2b+0x98>
 800c722:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c726:	4405      	add	r5, r0
 800c728:	f8c9 5000 	str.w	r5, [r9]
 800c72c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c730:	f8c8 0000 	str.w	r0, [r8]
 800c734:	4620      	mov	r0, r4
 800c736:	b003      	add	sp, #12
 800c738:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c73c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c740:	e7d5      	b.n	800c6ee <__d2b+0x2e>
 800c742:	6161      	str	r1, [r4, #20]
 800c744:	e7e5      	b.n	800c712 <__d2b+0x52>
 800c746:	a801      	add	r0, sp, #4
 800c748:	f7ff fd5a 	bl	800c200 <__lo0bits>
 800c74c:	9b01      	ldr	r3, [sp, #4]
 800c74e:	6163      	str	r3, [r4, #20]
 800c750:	2201      	movs	r2, #1
 800c752:	6122      	str	r2, [r4, #16]
 800c754:	3020      	adds	r0, #32
 800c756:	e7e3      	b.n	800c720 <__d2b+0x60>
 800c758:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c75c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c760:	f8c9 0000 	str.w	r0, [r9]
 800c764:	6918      	ldr	r0, [r3, #16]
 800c766:	f7ff fd2b 	bl	800c1c0 <__hi0bits>
 800c76a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c76e:	e7df      	b.n	800c730 <__d2b+0x70>
 800c770:	0802629f 	.word	0x0802629f
 800c774:	08026310 	.word	0x08026310

0800c778 <_calloc_r>:
 800c778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c77a:	fba1 2402 	umull	r2, r4, r1, r2
 800c77e:	b94c      	cbnz	r4, 800c794 <_calloc_r+0x1c>
 800c780:	4611      	mov	r1, r2
 800c782:	9201      	str	r2, [sp, #4]
 800c784:	f7fd fbd2 	bl	8009f2c <_malloc_r>
 800c788:	9a01      	ldr	r2, [sp, #4]
 800c78a:	4605      	mov	r5, r0
 800c78c:	b930      	cbnz	r0, 800c79c <_calloc_r+0x24>
 800c78e:	4628      	mov	r0, r5
 800c790:	b003      	add	sp, #12
 800c792:	bd30      	pop	{r4, r5, pc}
 800c794:	220c      	movs	r2, #12
 800c796:	6002      	str	r2, [r0, #0]
 800c798:	2500      	movs	r5, #0
 800c79a:	e7f8      	b.n	800c78e <_calloc_r+0x16>
 800c79c:	4621      	mov	r1, r4
 800c79e:	f7fd fb51 	bl	8009e44 <memset>
 800c7a2:	e7f4      	b.n	800c78e <_calloc_r+0x16>

0800c7a4 <__ssputs_r>:
 800c7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a8:	688e      	ldr	r6, [r1, #8]
 800c7aa:	429e      	cmp	r6, r3
 800c7ac:	4682      	mov	sl, r0
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	4690      	mov	r8, r2
 800c7b2:	461f      	mov	r7, r3
 800c7b4:	d838      	bhi.n	800c828 <__ssputs_r+0x84>
 800c7b6:	898a      	ldrh	r2, [r1, #12]
 800c7b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7bc:	d032      	beq.n	800c824 <__ssputs_r+0x80>
 800c7be:	6825      	ldr	r5, [r4, #0]
 800c7c0:	6909      	ldr	r1, [r1, #16]
 800c7c2:	eba5 0901 	sub.w	r9, r5, r1
 800c7c6:	6965      	ldr	r5, [r4, #20]
 800c7c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7d0:	3301      	adds	r3, #1
 800c7d2:	444b      	add	r3, r9
 800c7d4:	106d      	asrs	r5, r5, #1
 800c7d6:	429d      	cmp	r5, r3
 800c7d8:	bf38      	it	cc
 800c7da:	461d      	movcc	r5, r3
 800c7dc:	0553      	lsls	r3, r2, #21
 800c7de:	d531      	bpl.n	800c844 <__ssputs_r+0xa0>
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	f7fd fba3 	bl	8009f2c <_malloc_r>
 800c7e6:	4606      	mov	r6, r0
 800c7e8:	b950      	cbnz	r0, 800c800 <__ssputs_r+0x5c>
 800c7ea:	230c      	movs	r3, #12
 800c7ec:	f8ca 3000 	str.w	r3, [sl]
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7f6:	81a3      	strh	r3, [r4, #12]
 800c7f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c800:	6921      	ldr	r1, [r4, #16]
 800c802:	464a      	mov	r2, r9
 800c804:	f7ff fc19 	bl	800c03a <memcpy>
 800c808:	89a3      	ldrh	r3, [r4, #12]
 800c80a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c80e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c812:	81a3      	strh	r3, [r4, #12]
 800c814:	6126      	str	r6, [r4, #16]
 800c816:	6165      	str	r5, [r4, #20]
 800c818:	444e      	add	r6, r9
 800c81a:	eba5 0509 	sub.w	r5, r5, r9
 800c81e:	6026      	str	r6, [r4, #0]
 800c820:	60a5      	str	r5, [r4, #8]
 800c822:	463e      	mov	r6, r7
 800c824:	42be      	cmp	r6, r7
 800c826:	d900      	bls.n	800c82a <__ssputs_r+0x86>
 800c828:	463e      	mov	r6, r7
 800c82a:	6820      	ldr	r0, [r4, #0]
 800c82c:	4632      	mov	r2, r6
 800c82e:	4641      	mov	r1, r8
 800c830:	f000 fddc 	bl	800d3ec <memmove>
 800c834:	68a3      	ldr	r3, [r4, #8]
 800c836:	1b9b      	subs	r3, r3, r6
 800c838:	60a3      	str	r3, [r4, #8]
 800c83a:	6823      	ldr	r3, [r4, #0]
 800c83c:	4433      	add	r3, r6
 800c83e:	6023      	str	r3, [r4, #0]
 800c840:	2000      	movs	r0, #0
 800c842:	e7db      	b.n	800c7fc <__ssputs_r+0x58>
 800c844:	462a      	mov	r2, r5
 800c846:	f000 fdeb 	bl	800d420 <_realloc_r>
 800c84a:	4606      	mov	r6, r0
 800c84c:	2800      	cmp	r0, #0
 800c84e:	d1e1      	bne.n	800c814 <__ssputs_r+0x70>
 800c850:	6921      	ldr	r1, [r4, #16]
 800c852:	4650      	mov	r0, sl
 800c854:	f7fd fafe 	bl	8009e54 <_free_r>
 800c858:	e7c7      	b.n	800c7ea <__ssputs_r+0x46>
	...

0800c85c <_svfiprintf_r>:
 800c85c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c860:	4698      	mov	r8, r3
 800c862:	898b      	ldrh	r3, [r1, #12]
 800c864:	061b      	lsls	r3, r3, #24
 800c866:	b09d      	sub	sp, #116	; 0x74
 800c868:	4607      	mov	r7, r0
 800c86a:	460d      	mov	r5, r1
 800c86c:	4614      	mov	r4, r2
 800c86e:	d50e      	bpl.n	800c88e <_svfiprintf_r+0x32>
 800c870:	690b      	ldr	r3, [r1, #16]
 800c872:	b963      	cbnz	r3, 800c88e <_svfiprintf_r+0x32>
 800c874:	2140      	movs	r1, #64	; 0x40
 800c876:	f7fd fb59 	bl	8009f2c <_malloc_r>
 800c87a:	6028      	str	r0, [r5, #0]
 800c87c:	6128      	str	r0, [r5, #16]
 800c87e:	b920      	cbnz	r0, 800c88a <_svfiprintf_r+0x2e>
 800c880:	230c      	movs	r3, #12
 800c882:	603b      	str	r3, [r7, #0]
 800c884:	f04f 30ff 	mov.w	r0, #4294967295
 800c888:	e0d1      	b.n	800ca2e <_svfiprintf_r+0x1d2>
 800c88a:	2340      	movs	r3, #64	; 0x40
 800c88c:	616b      	str	r3, [r5, #20]
 800c88e:	2300      	movs	r3, #0
 800c890:	9309      	str	r3, [sp, #36]	; 0x24
 800c892:	2320      	movs	r3, #32
 800c894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c898:	f8cd 800c 	str.w	r8, [sp, #12]
 800c89c:	2330      	movs	r3, #48	; 0x30
 800c89e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca48 <_svfiprintf_r+0x1ec>
 800c8a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8a6:	f04f 0901 	mov.w	r9, #1
 800c8aa:	4623      	mov	r3, r4
 800c8ac:	469a      	mov	sl, r3
 800c8ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8b2:	b10a      	cbz	r2, 800c8b8 <_svfiprintf_r+0x5c>
 800c8b4:	2a25      	cmp	r2, #37	; 0x25
 800c8b6:	d1f9      	bne.n	800c8ac <_svfiprintf_r+0x50>
 800c8b8:	ebba 0b04 	subs.w	fp, sl, r4
 800c8bc:	d00b      	beq.n	800c8d6 <_svfiprintf_r+0x7a>
 800c8be:	465b      	mov	r3, fp
 800c8c0:	4622      	mov	r2, r4
 800c8c2:	4629      	mov	r1, r5
 800c8c4:	4638      	mov	r0, r7
 800c8c6:	f7ff ff6d 	bl	800c7a4 <__ssputs_r>
 800c8ca:	3001      	adds	r0, #1
 800c8cc:	f000 80aa 	beq.w	800ca24 <_svfiprintf_r+0x1c8>
 800c8d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8d2:	445a      	add	r2, fp
 800c8d4:	9209      	str	r2, [sp, #36]	; 0x24
 800c8d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	f000 80a2 	beq.w	800ca24 <_svfiprintf_r+0x1c8>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8ea:	f10a 0a01 	add.w	sl, sl, #1
 800c8ee:	9304      	str	r3, [sp, #16]
 800c8f0:	9307      	str	r3, [sp, #28]
 800c8f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8f6:	931a      	str	r3, [sp, #104]	; 0x68
 800c8f8:	4654      	mov	r4, sl
 800c8fa:	2205      	movs	r2, #5
 800c8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c900:	4851      	ldr	r0, [pc, #324]	; (800ca48 <_svfiprintf_r+0x1ec>)
 800c902:	f7f3 fcdd 	bl	80002c0 <memchr>
 800c906:	9a04      	ldr	r2, [sp, #16]
 800c908:	b9d8      	cbnz	r0, 800c942 <_svfiprintf_r+0xe6>
 800c90a:	06d0      	lsls	r0, r2, #27
 800c90c:	bf44      	itt	mi
 800c90e:	2320      	movmi	r3, #32
 800c910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c914:	0711      	lsls	r1, r2, #28
 800c916:	bf44      	itt	mi
 800c918:	232b      	movmi	r3, #43	; 0x2b
 800c91a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c91e:	f89a 3000 	ldrb.w	r3, [sl]
 800c922:	2b2a      	cmp	r3, #42	; 0x2a
 800c924:	d015      	beq.n	800c952 <_svfiprintf_r+0xf6>
 800c926:	9a07      	ldr	r2, [sp, #28]
 800c928:	4654      	mov	r4, sl
 800c92a:	2000      	movs	r0, #0
 800c92c:	f04f 0c0a 	mov.w	ip, #10
 800c930:	4621      	mov	r1, r4
 800c932:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c936:	3b30      	subs	r3, #48	; 0x30
 800c938:	2b09      	cmp	r3, #9
 800c93a:	d94e      	bls.n	800c9da <_svfiprintf_r+0x17e>
 800c93c:	b1b0      	cbz	r0, 800c96c <_svfiprintf_r+0x110>
 800c93e:	9207      	str	r2, [sp, #28]
 800c940:	e014      	b.n	800c96c <_svfiprintf_r+0x110>
 800c942:	eba0 0308 	sub.w	r3, r0, r8
 800c946:	fa09 f303 	lsl.w	r3, r9, r3
 800c94a:	4313      	orrs	r3, r2
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	46a2      	mov	sl, r4
 800c950:	e7d2      	b.n	800c8f8 <_svfiprintf_r+0x9c>
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	1d19      	adds	r1, r3, #4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	9103      	str	r1, [sp, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	bfbb      	ittet	lt
 800c95e:	425b      	neglt	r3, r3
 800c960:	f042 0202 	orrlt.w	r2, r2, #2
 800c964:	9307      	strge	r3, [sp, #28]
 800c966:	9307      	strlt	r3, [sp, #28]
 800c968:	bfb8      	it	lt
 800c96a:	9204      	strlt	r2, [sp, #16]
 800c96c:	7823      	ldrb	r3, [r4, #0]
 800c96e:	2b2e      	cmp	r3, #46	; 0x2e
 800c970:	d10c      	bne.n	800c98c <_svfiprintf_r+0x130>
 800c972:	7863      	ldrb	r3, [r4, #1]
 800c974:	2b2a      	cmp	r3, #42	; 0x2a
 800c976:	d135      	bne.n	800c9e4 <_svfiprintf_r+0x188>
 800c978:	9b03      	ldr	r3, [sp, #12]
 800c97a:	1d1a      	adds	r2, r3, #4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	9203      	str	r2, [sp, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	bfb8      	it	lt
 800c984:	f04f 33ff 	movlt.w	r3, #4294967295
 800c988:	3402      	adds	r4, #2
 800c98a:	9305      	str	r3, [sp, #20]
 800c98c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca58 <_svfiprintf_r+0x1fc>
 800c990:	7821      	ldrb	r1, [r4, #0]
 800c992:	2203      	movs	r2, #3
 800c994:	4650      	mov	r0, sl
 800c996:	f7f3 fc93 	bl	80002c0 <memchr>
 800c99a:	b140      	cbz	r0, 800c9ae <_svfiprintf_r+0x152>
 800c99c:	2340      	movs	r3, #64	; 0x40
 800c99e:	eba0 000a 	sub.w	r0, r0, sl
 800c9a2:	fa03 f000 	lsl.w	r0, r3, r0
 800c9a6:	9b04      	ldr	r3, [sp, #16]
 800c9a8:	4303      	orrs	r3, r0
 800c9aa:	3401      	adds	r4, #1
 800c9ac:	9304      	str	r3, [sp, #16]
 800c9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b2:	4826      	ldr	r0, [pc, #152]	; (800ca4c <_svfiprintf_r+0x1f0>)
 800c9b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9b8:	2206      	movs	r2, #6
 800c9ba:	f7f3 fc81 	bl	80002c0 <memchr>
 800c9be:	2800      	cmp	r0, #0
 800c9c0:	d038      	beq.n	800ca34 <_svfiprintf_r+0x1d8>
 800c9c2:	4b23      	ldr	r3, [pc, #140]	; (800ca50 <_svfiprintf_r+0x1f4>)
 800c9c4:	bb1b      	cbnz	r3, 800ca0e <_svfiprintf_r+0x1b2>
 800c9c6:	9b03      	ldr	r3, [sp, #12]
 800c9c8:	3307      	adds	r3, #7
 800c9ca:	f023 0307 	bic.w	r3, r3, #7
 800c9ce:	3308      	adds	r3, #8
 800c9d0:	9303      	str	r3, [sp, #12]
 800c9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d4:	4433      	add	r3, r6
 800c9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d8:	e767      	b.n	800c8aa <_svfiprintf_r+0x4e>
 800c9da:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9de:	460c      	mov	r4, r1
 800c9e0:	2001      	movs	r0, #1
 800c9e2:	e7a5      	b.n	800c930 <_svfiprintf_r+0xd4>
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	3401      	adds	r4, #1
 800c9e8:	9305      	str	r3, [sp, #20]
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	f04f 0c0a 	mov.w	ip, #10
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9f6:	3a30      	subs	r2, #48	; 0x30
 800c9f8:	2a09      	cmp	r2, #9
 800c9fa:	d903      	bls.n	800ca04 <_svfiprintf_r+0x1a8>
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0c5      	beq.n	800c98c <_svfiprintf_r+0x130>
 800ca00:	9105      	str	r1, [sp, #20]
 800ca02:	e7c3      	b.n	800c98c <_svfiprintf_r+0x130>
 800ca04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca08:	4604      	mov	r4, r0
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e7f0      	b.n	800c9f0 <_svfiprintf_r+0x194>
 800ca0e:	ab03      	add	r3, sp, #12
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	462a      	mov	r2, r5
 800ca14:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <_svfiprintf_r+0x1f8>)
 800ca16:	a904      	add	r1, sp, #16
 800ca18:	4638      	mov	r0, r7
 800ca1a:	f7fd fb9b 	bl	800a154 <_printf_float>
 800ca1e:	1c42      	adds	r2, r0, #1
 800ca20:	4606      	mov	r6, r0
 800ca22:	d1d6      	bne.n	800c9d2 <_svfiprintf_r+0x176>
 800ca24:	89ab      	ldrh	r3, [r5, #12]
 800ca26:	065b      	lsls	r3, r3, #25
 800ca28:	f53f af2c 	bmi.w	800c884 <_svfiprintf_r+0x28>
 800ca2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca2e:	b01d      	add	sp, #116	; 0x74
 800ca30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca34:	ab03      	add	r3, sp, #12
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	462a      	mov	r2, r5
 800ca3a:	4b06      	ldr	r3, [pc, #24]	; (800ca54 <_svfiprintf_r+0x1f8>)
 800ca3c:	a904      	add	r1, sp, #16
 800ca3e:	4638      	mov	r0, r7
 800ca40:	f7fd fe2c 	bl	800a69c <_printf_i>
 800ca44:	e7eb      	b.n	800ca1e <_svfiprintf_r+0x1c2>
 800ca46:	bf00      	nop
 800ca48:	0802646c 	.word	0x0802646c
 800ca4c:	08026476 	.word	0x08026476
 800ca50:	0800a155 	.word	0x0800a155
 800ca54:	0800c7a5 	.word	0x0800c7a5
 800ca58:	08026472 	.word	0x08026472

0800ca5c <__sfputc_r>:
 800ca5c:	6893      	ldr	r3, [r2, #8]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	b410      	push	{r4}
 800ca64:	6093      	str	r3, [r2, #8]
 800ca66:	da08      	bge.n	800ca7a <__sfputc_r+0x1e>
 800ca68:	6994      	ldr	r4, [r2, #24]
 800ca6a:	42a3      	cmp	r3, r4
 800ca6c:	db01      	blt.n	800ca72 <__sfputc_r+0x16>
 800ca6e:	290a      	cmp	r1, #10
 800ca70:	d103      	bne.n	800ca7a <__sfputc_r+0x1e>
 800ca72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca76:	f000 ba77 	b.w	800cf68 <__swbuf_r>
 800ca7a:	6813      	ldr	r3, [r2, #0]
 800ca7c:	1c58      	adds	r0, r3, #1
 800ca7e:	6010      	str	r0, [r2, #0]
 800ca80:	7019      	strb	r1, [r3, #0]
 800ca82:	4608      	mov	r0, r1
 800ca84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca88:	4770      	bx	lr

0800ca8a <__sfputs_r>:
 800ca8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca8c:	4606      	mov	r6, r0
 800ca8e:	460f      	mov	r7, r1
 800ca90:	4614      	mov	r4, r2
 800ca92:	18d5      	adds	r5, r2, r3
 800ca94:	42ac      	cmp	r4, r5
 800ca96:	d101      	bne.n	800ca9c <__sfputs_r+0x12>
 800ca98:	2000      	movs	r0, #0
 800ca9a:	e007      	b.n	800caac <__sfputs_r+0x22>
 800ca9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caa0:	463a      	mov	r2, r7
 800caa2:	4630      	mov	r0, r6
 800caa4:	f7ff ffda 	bl	800ca5c <__sfputc_r>
 800caa8:	1c43      	adds	r3, r0, #1
 800caaa:	d1f3      	bne.n	800ca94 <__sfputs_r+0xa>
 800caac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cab0 <_vfiprintf_r>:
 800cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab4:	460d      	mov	r5, r1
 800cab6:	b09d      	sub	sp, #116	; 0x74
 800cab8:	4614      	mov	r4, r2
 800caba:	4698      	mov	r8, r3
 800cabc:	4606      	mov	r6, r0
 800cabe:	b118      	cbz	r0, 800cac8 <_vfiprintf_r+0x18>
 800cac0:	6983      	ldr	r3, [r0, #24]
 800cac2:	b90b      	cbnz	r3, 800cac8 <_vfiprintf_r+0x18>
 800cac4:	f7ff f8fa 	bl	800bcbc <__sinit>
 800cac8:	4b89      	ldr	r3, [pc, #548]	; (800ccf0 <_vfiprintf_r+0x240>)
 800caca:	429d      	cmp	r5, r3
 800cacc:	d11b      	bne.n	800cb06 <_vfiprintf_r+0x56>
 800cace:	6875      	ldr	r5, [r6, #4]
 800cad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cad2:	07d9      	lsls	r1, r3, #31
 800cad4:	d405      	bmi.n	800cae2 <_vfiprintf_r+0x32>
 800cad6:	89ab      	ldrh	r3, [r5, #12]
 800cad8:	059a      	lsls	r2, r3, #22
 800cada:	d402      	bmi.n	800cae2 <_vfiprintf_r+0x32>
 800cadc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cade:	f7ff faa9 	bl	800c034 <__retarget_lock_acquire_recursive>
 800cae2:	89ab      	ldrh	r3, [r5, #12]
 800cae4:	071b      	lsls	r3, r3, #28
 800cae6:	d501      	bpl.n	800caec <_vfiprintf_r+0x3c>
 800cae8:	692b      	ldr	r3, [r5, #16]
 800caea:	b9eb      	cbnz	r3, 800cb28 <_vfiprintf_r+0x78>
 800caec:	4629      	mov	r1, r5
 800caee:	4630      	mov	r0, r6
 800caf0:	f000 fa9e 	bl	800d030 <__swsetup_r>
 800caf4:	b1c0      	cbz	r0, 800cb28 <_vfiprintf_r+0x78>
 800caf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caf8:	07dc      	lsls	r4, r3, #31
 800cafa:	d50e      	bpl.n	800cb1a <_vfiprintf_r+0x6a>
 800cafc:	f04f 30ff 	mov.w	r0, #4294967295
 800cb00:	b01d      	add	sp, #116	; 0x74
 800cb02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb06:	4b7b      	ldr	r3, [pc, #492]	; (800ccf4 <_vfiprintf_r+0x244>)
 800cb08:	429d      	cmp	r5, r3
 800cb0a:	d101      	bne.n	800cb10 <_vfiprintf_r+0x60>
 800cb0c:	68b5      	ldr	r5, [r6, #8]
 800cb0e:	e7df      	b.n	800cad0 <_vfiprintf_r+0x20>
 800cb10:	4b79      	ldr	r3, [pc, #484]	; (800ccf8 <_vfiprintf_r+0x248>)
 800cb12:	429d      	cmp	r5, r3
 800cb14:	bf08      	it	eq
 800cb16:	68f5      	ldreq	r5, [r6, #12]
 800cb18:	e7da      	b.n	800cad0 <_vfiprintf_r+0x20>
 800cb1a:	89ab      	ldrh	r3, [r5, #12]
 800cb1c:	0598      	lsls	r0, r3, #22
 800cb1e:	d4ed      	bmi.n	800cafc <_vfiprintf_r+0x4c>
 800cb20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb22:	f7ff fa89 	bl	800c038 <__retarget_lock_release_recursive>
 800cb26:	e7e9      	b.n	800cafc <_vfiprintf_r+0x4c>
 800cb28:	2300      	movs	r3, #0
 800cb2a:	9309      	str	r3, [sp, #36]	; 0x24
 800cb2c:	2320      	movs	r3, #32
 800cb2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cb32:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb36:	2330      	movs	r3, #48	; 0x30
 800cb38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ccfc <_vfiprintf_r+0x24c>
 800cb3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cb40:	f04f 0901 	mov.w	r9, #1
 800cb44:	4623      	mov	r3, r4
 800cb46:	469a      	mov	sl, r3
 800cb48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb4c:	b10a      	cbz	r2, 800cb52 <_vfiprintf_r+0xa2>
 800cb4e:	2a25      	cmp	r2, #37	; 0x25
 800cb50:	d1f9      	bne.n	800cb46 <_vfiprintf_r+0x96>
 800cb52:	ebba 0b04 	subs.w	fp, sl, r4
 800cb56:	d00b      	beq.n	800cb70 <_vfiprintf_r+0xc0>
 800cb58:	465b      	mov	r3, fp
 800cb5a:	4622      	mov	r2, r4
 800cb5c:	4629      	mov	r1, r5
 800cb5e:	4630      	mov	r0, r6
 800cb60:	f7ff ff93 	bl	800ca8a <__sfputs_r>
 800cb64:	3001      	adds	r0, #1
 800cb66:	f000 80aa 	beq.w	800ccbe <_vfiprintf_r+0x20e>
 800cb6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb6c:	445a      	add	r2, fp
 800cb6e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb70:	f89a 3000 	ldrb.w	r3, [sl]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 80a2 	beq.w	800ccbe <_vfiprintf_r+0x20e>
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb84:	f10a 0a01 	add.w	sl, sl, #1
 800cb88:	9304      	str	r3, [sp, #16]
 800cb8a:	9307      	str	r3, [sp, #28]
 800cb8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb90:	931a      	str	r3, [sp, #104]	; 0x68
 800cb92:	4654      	mov	r4, sl
 800cb94:	2205      	movs	r2, #5
 800cb96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb9a:	4858      	ldr	r0, [pc, #352]	; (800ccfc <_vfiprintf_r+0x24c>)
 800cb9c:	f7f3 fb90 	bl	80002c0 <memchr>
 800cba0:	9a04      	ldr	r2, [sp, #16]
 800cba2:	b9d8      	cbnz	r0, 800cbdc <_vfiprintf_r+0x12c>
 800cba4:	06d1      	lsls	r1, r2, #27
 800cba6:	bf44      	itt	mi
 800cba8:	2320      	movmi	r3, #32
 800cbaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbae:	0713      	lsls	r3, r2, #28
 800cbb0:	bf44      	itt	mi
 800cbb2:	232b      	movmi	r3, #43	; 0x2b
 800cbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cbb8:	f89a 3000 	ldrb.w	r3, [sl]
 800cbbc:	2b2a      	cmp	r3, #42	; 0x2a
 800cbbe:	d015      	beq.n	800cbec <_vfiprintf_r+0x13c>
 800cbc0:	9a07      	ldr	r2, [sp, #28]
 800cbc2:	4654      	mov	r4, sl
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	f04f 0c0a 	mov.w	ip, #10
 800cbca:	4621      	mov	r1, r4
 800cbcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbd0:	3b30      	subs	r3, #48	; 0x30
 800cbd2:	2b09      	cmp	r3, #9
 800cbd4:	d94e      	bls.n	800cc74 <_vfiprintf_r+0x1c4>
 800cbd6:	b1b0      	cbz	r0, 800cc06 <_vfiprintf_r+0x156>
 800cbd8:	9207      	str	r2, [sp, #28]
 800cbda:	e014      	b.n	800cc06 <_vfiprintf_r+0x156>
 800cbdc:	eba0 0308 	sub.w	r3, r0, r8
 800cbe0:	fa09 f303 	lsl.w	r3, r9, r3
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	9304      	str	r3, [sp, #16]
 800cbe8:	46a2      	mov	sl, r4
 800cbea:	e7d2      	b.n	800cb92 <_vfiprintf_r+0xe2>
 800cbec:	9b03      	ldr	r3, [sp, #12]
 800cbee:	1d19      	adds	r1, r3, #4
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	9103      	str	r1, [sp, #12]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	bfbb      	ittet	lt
 800cbf8:	425b      	neglt	r3, r3
 800cbfa:	f042 0202 	orrlt.w	r2, r2, #2
 800cbfe:	9307      	strge	r3, [sp, #28]
 800cc00:	9307      	strlt	r3, [sp, #28]
 800cc02:	bfb8      	it	lt
 800cc04:	9204      	strlt	r2, [sp, #16]
 800cc06:	7823      	ldrb	r3, [r4, #0]
 800cc08:	2b2e      	cmp	r3, #46	; 0x2e
 800cc0a:	d10c      	bne.n	800cc26 <_vfiprintf_r+0x176>
 800cc0c:	7863      	ldrb	r3, [r4, #1]
 800cc0e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc10:	d135      	bne.n	800cc7e <_vfiprintf_r+0x1ce>
 800cc12:	9b03      	ldr	r3, [sp, #12]
 800cc14:	1d1a      	adds	r2, r3, #4
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	9203      	str	r2, [sp, #12]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	bfb8      	it	lt
 800cc1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800cc22:	3402      	adds	r4, #2
 800cc24:	9305      	str	r3, [sp, #20]
 800cc26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cd0c <_vfiprintf_r+0x25c>
 800cc2a:	7821      	ldrb	r1, [r4, #0]
 800cc2c:	2203      	movs	r2, #3
 800cc2e:	4650      	mov	r0, sl
 800cc30:	f7f3 fb46 	bl	80002c0 <memchr>
 800cc34:	b140      	cbz	r0, 800cc48 <_vfiprintf_r+0x198>
 800cc36:	2340      	movs	r3, #64	; 0x40
 800cc38:	eba0 000a 	sub.w	r0, r0, sl
 800cc3c:	fa03 f000 	lsl.w	r0, r3, r0
 800cc40:	9b04      	ldr	r3, [sp, #16]
 800cc42:	4303      	orrs	r3, r0
 800cc44:	3401      	adds	r4, #1
 800cc46:	9304      	str	r3, [sp, #16]
 800cc48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc4c:	482c      	ldr	r0, [pc, #176]	; (800cd00 <_vfiprintf_r+0x250>)
 800cc4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cc52:	2206      	movs	r2, #6
 800cc54:	f7f3 fb34 	bl	80002c0 <memchr>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d03f      	beq.n	800ccdc <_vfiprintf_r+0x22c>
 800cc5c:	4b29      	ldr	r3, [pc, #164]	; (800cd04 <_vfiprintf_r+0x254>)
 800cc5e:	bb1b      	cbnz	r3, 800cca8 <_vfiprintf_r+0x1f8>
 800cc60:	9b03      	ldr	r3, [sp, #12]
 800cc62:	3307      	adds	r3, #7
 800cc64:	f023 0307 	bic.w	r3, r3, #7
 800cc68:	3308      	adds	r3, #8
 800cc6a:	9303      	str	r3, [sp, #12]
 800cc6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc6e:	443b      	add	r3, r7
 800cc70:	9309      	str	r3, [sp, #36]	; 0x24
 800cc72:	e767      	b.n	800cb44 <_vfiprintf_r+0x94>
 800cc74:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc78:	460c      	mov	r4, r1
 800cc7a:	2001      	movs	r0, #1
 800cc7c:	e7a5      	b.n	800cbca <_vfiprintf_r+0x11a>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	3401      	adds	r4, #1
 800cc82:	9305      	str	r3, [sp, #20]
 800cc84:	4619      	mov	r1, r3
 800cc86:	f04f 0c0a 	mov.w	ip, #10
 800cc8a:	4620      	mov	r0, r4
 800cc8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc90:	3a30      	subs	r2, #48	; 0x30
 800cc92:	2a09      	cmp	r2, #9
 800cc94:	d903      	bls.n	800cc9e <_vfiprintf_r+0x1ee>
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d0c5      	beq.n	800cc26 <_vfiprintf_r+0x176>
 800cc9a:	9105      	str	r1, [sp, #20]
 800cc9c:	e7c3      	b.n	800cc26 <_vfiprintf_r+0x176>
 800cc9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800cca2:	4604      	mov	r4, r0
 800cca4:	2301      	movs	r3, #1
 800cca6:	e7f0      	b.n	800cc8a <_vfiprintf_r+0x1da>
 800cca8:	ab03      	add	r3, sp, #12
 800ccaa:	9300      	str	r3, [sp, #0]
 800ccac:	462a      	mov	r2, r5
 800ccae:	4b16      	ldr	r3, [pc, #88]	; (800cd08 <_vfiprintf_r+0x258>)
 800ccb0:	a904      	add	r1, sp, #16
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f7fd fa4e 	bl	800a154 <_printf_float>
 800ccb8:	4607      	mov	r7, r0
 800ccba:	1c78      	adds	r0, r7, #1
 800ccbc:	d1d6      	bne.n	800cc6c <_vfiprintf_r+0x1bc>
 800ccbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ccc0:	07d9      	lsls	r1, r3, #31
 800ccc2:	d405      	bmi.n	800ccd0 <_vfiprintf_r+0x220>
 800ccc4:	89ab      	ldrh	r3, [r5, #12]
 800ccc6:	059a      	lsls	r2, r3, #22
 800ccc8:	d402      	bmi.n	800ccd0 <_vfiprintf_r+0x220>
 800ccca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cccc:	f7ff f9b4 	bl	800c038 <__retarget_lock_release_recursive>
 800ccd0:	89ab      	ldrh	r3, [r5, #12]
 800ccd2:	065b      	lsls	r3, r3, #25
 800ccd4:	f53f af12 	bmi.w	800cafc <_vfiprintf_r+0x4c>
 800ccd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ccda:	e711      	b.n	800cb00 <_vfiprintf_r+0x50>
 800ccdc:	ab03      	add	r3, sp, #12
 800ccde:	9300      	str	r3, [sp, #0]
 800cce0:	462a      	mov	r2, r5
 800cce2:	4b09      	ldr	r3, [pc, #36]	; (800cd08 <_vfiprintf_r+0x258>)
 800cce4:	a904      	add	r1, sp, #16
 800cce6:	4630      	mov	r0, r6
 800cce8:	f7fd fcd8 	bl	800a69c <_printf_i>
 800ccec:	e7e4      	b.n	800ccb8 <_vfiprintf_r+0x208>
 800ccee:	bf00      	nop
 800ccf0:	080262d0 	.word	0x080262d0
 800ccf4:	080262f0 	.word	0x080262f0
 800ccf8:	080262b0 	.word	0x080262b0
 800ccfc:	0802646c 	.word	0x0802646c
 800cd00:	08026476 	.word	0x08026476
 800cd04:	0800a155 	.word	0x0800a155
 800cd08:	0800ca8b 	.word	0x0800ca8b
 800cd0c:	08026472 	.word	0x08026472

0800cd10 <siprintf>:
 800cd10:	b40e      	push	{r1, r2, r3}
 800cd12:	b500      	push	{lr}
 800cd14:	b09c      	sub	sp, #112	; 0x70
 800cd16:	ab1d      	add	r3, sp, #116	; 0x74
 800cd18:	9002      	str	r0, [sp, #8]
 800cd1a:	9006      	str	r0, [sp, #24]
 800cd1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd20:	4809      	ldr	r0, [pc, #36]	; (800cd48 <siprintf+0x38>)
 800cd22:	9107      	str	r1, [sp, #28]
 800cd24:	9104      	str	r1, [sp, #16]
 800cd26:	4909      	ldr	r1, [pc, #36]	; (800cd4c <siprintf+0x3c>)
 800cd28:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd2c:	9105      	str	r1, [sp, #20]
 800cd2e:	6800      	ldr	r0, [r0, #0]
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	a902      	add	r1, sp, #8
 800cd34:	f7ff fd92 	bl	800c85c <_svfiprintf_r>
 800cd38:	9b02      	ldr	r3, [sp, #8]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	701a      	strb	r2, [r3, #0]
 800cd3e:	b01c      	add	sp, #112	; 0x70
 800cd40:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd44:	b003      	add	sp, #12
 800cd46:	4770      	bx	lr
 800cd48:	200000cc 	.word	0x200000cc
 800cd4c:	ffff0208 	.word	0xffff0208

0800cd50 <siscanf>:
 800cd50:	b40e      	push	{r1, r2, r3}
 800cd52:	b510      	push	{r4, lr}
 800cd54:	b09f      	sub	sp, #124	; 0x7c
 800cd56:	ac21      	add	r4, sp, #132	; 0x84
 800cd58:	f44f 7101 	mov.w	r1, #516	; 0x204
 800cd5c:	f854 2b04 	ldr.w	r2, [r4], #4
 800cd60:	9201      	str	r2, [sp, #4]
 800cd62:	f8ad 101c 	strh.w	r1, [sp, #28]
 800cd66:	9004      	str	r0, [sp, #16]
 800cd68:	9008      	str	r0, [sp, #32]
 800cd6a:	f7f3 faa1 	bl	80002b0 <strlen>
 800cd6e:	4b0c      	ldr	r3, [pc, #48]	; (800cda0 <siscanf+0x50>)
 800cd70:	9005      	str	r0, [sp, #20]
 800cd72:	9009      	str	r0, [sp, #36]	; 0x24
 800cd74:	930d      	str	r3, [sp, #52]	; 0x34
 800cd76:	480b      	ldr	r0, [pc, #44]	; (800cda4 <siscanf+0x54>)
 800cd78:	9a01      	ldr	r2, [sp, #4]
 800cd7a:	6800      	ldr	r0, [r0, #0]
 800cd7c:	9403      	str	r4, [sp, #12]
 800cd7e:	2300      	movs	r3, #0
 800cd80:	9311      	str	r3, [sp, #68]	; 0x44
 800cd82:	9316      	str	r3, [sp, #88]	; 0x58
 800cd84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd88:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cd8c:	a904      	add	r1, sp, #16
 800cd8e:	4623      	mov	r3, r4
 800cd90:	f000 fbd0 	bl	800d534 <__ssvfiscanf_r>
 800cd94:	b01f      	add	sp, #124	; 0x7c
 800cd96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd9a:	b003      	add	sp, #12
 800cd9c:	4770      	bx	lr
 800cd9e:	bf00      	nop
 800cda0:	0800cdcb 	.word	0x0800cdcb
 800cda4:	200000cc 	.word	0x200000cc

0800cda8 <__sread>:
 800cda8:	b510      	push	{r4, lr}
 800cdaa:	460c      	mov	r4, r1
 800cdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb0:	f000 fe8a 	bl	800dac8 <_read_r>
 800cdb4:	2800      	cmp	r0, #0
 800cdb6:	bfab      	itete	ge
 800cdb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cdba:	89a3      	ldrhlt	r3, [r4, #12]
 800cdbc:	181b      	addge	r3, r3, r0
 800cdbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cdc2:	bfac      	ite	ge
 800cdc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cdc6:	81a3      	strhlt	r3, [r4, #12]
 800cdc8:	bd10      	pop	{r4, pc}

0800cdca <__seofread>:
 800cdca:	2000      	movs	r0, #0
 800cdcc:	4770      	bx	lr

0800cdce <__swrite>:
 800cdce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdd2:	461f      	mov	r7, r3
 800cdd4:	898b      	ldrh	r3, [r1, #12]
 800cdd6:	05db      	lsls	r3, r3, #23
 800cdd8:	4605      	mov	r5, r0
 800cdda:	460c      	mov	r4, r1
 800cddc:	4616      	mov	r6, r2
 800cdde:	d505      	bpl.n	800cdec <__swrite+0x1e>
 800cde0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cde4:	2302      	movs	r3, #2
 800cde6:	2200      	movs	r2, #0
 800cde8:	f000 fa76 	bl	800d2d8 <_lseek_r>
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdf6:	81a3      	strh	r3, [r4, #12]
 800cdf8:	4632      	mov	r2, r6
 800cdfa:	463b      	mov	r3, r7
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce02:	f000 b903 	b.w	800d00c <_write_r>

0800ce06 <__sseek>:
 800ce06:	b510      	push	{r4, lr}
 800ce08:	460c      	mov	r4, r1
 800ce0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce0e:	f000 fa63 	bl	800d2d8 <_lseek_r>
 800ce12:	1c43      	adds	r3, r0, #1
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	bf15      	itete	ne
 800ce18:	6560      	strne	r0, [r4, #84]	; 0x54
 800ce1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce22:	81a3      	strheq	r3, [r4, #12]
 800ce24:	bf18      	it	ne
 800ce26:	81a3      	strhne	r3, [r4, #12]
 800ce28:	bd10      	pop	{r4, pc}

0800ce2a <__sclose>:
 800ce2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce2e:	f000 b975 	b.w	800d11c <_close_r>

0800ce32 <strcpy>:
 800ce32:	4603      	mov	r3, r0
 800ce34:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce38:	f803 2b01 	strb.w	r2, [r3], #1
 800ce3c:	2a00      	cmp	r2, #0
 800ce3e:	d1f9      	bne.n	800ce34 <strcpy+0x2>
 800ce40:	4770      	bx	lr

0800ce42 <strncmp>:
 800ce42:	b510      	push	{r4, lr}
 800ce44:	b17a      	cbz	r2, 800ce66 <strncmp+0x24>
 800ce46:	4603      	mov	r3, r0
 800ce48:	3901      	subs	r1, #1
 800ce4a:	1884      	adds	r4, r0, r2
 800ce4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ce50:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ce54:	4290      	cmp	r0, r2
 800ce56:	d101      	bne.n	800ce5c <strncmp+0x1a>
 800ce58:	42a3      	cmp	r3, r4
 800ce5a:	d101      	bne.n	800ce60 <strncmp+0x1e>
 800ce5c:	1a80      	subs	r0, r0, r2
 800ce5e:	bd10      	pop	{r4, pc}
 800ce60:	2800      	cmp	r0, #0
 800ce62:	d1f3      	bne.n	800ce4c <strncmp+0xa>
 800ce64:	e7fa      	b.n	800ce5c <strncmp+0x1a>
 800ce66:	4610      	mov	r0, r2
 800ce68:	e7f9      	b.n	800ce5e <strncmp+0x1c>
	...

0800ce6c <_strtoul_l.constprop.0>:
 800ce6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce70:	4f36      	ldr	r7, [pc, #216]	; (800cf4c <_strtoul_l.constprop.0+0xe0>)
 800ce72:	4686      	mov	lr, r0
 800ce74:	460d      	mov	r5, r1
 800ce76:	4628      	mov	r0, r5
 800ce78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce7c:	5de6      	ldrb	r6, [r4, r7]
 800ce7e:	f016 0608 	ands.w	r6, r6, #8
 800ce82:	d1f8      	bne.n	800ce76 <_strtoul_l.constprop.0+0xa>
 800ce84:	2c2d      	cmp	r4, #45	; 0x2d
 800ce86:	d12f      	bne.n	800cee8 <_strtoul_l.constprop.0+0x7c>
 800ce88:	782c      	ldrb	r4, [r5, #0]
 800ce8a:	2601      	movs	r6, #1
 800ce8c:	1c85      	adds	r5, r0, #2
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d057      	beq.n	800cf42 <_strtoul_l.constprop.0+0xd6>
 800ce92:	2b10      	cmp	r3, #16
 800ce94:	d109      	bne.n	800ceaa <_strtoul_l.constprop.0+0x3e>
 800ce96:	2c30      	cmp	r4, #48	; 0x30
 800ce98:	d107      	bne.n	800ceaa <_strtoul_l.constprop.0+0x3e>
 800ce9a:	7828      	ldrb	r0, [r5, #0]
 800ce9c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cea0:	2858      	cmp	r0, #88	; 0x58
 800cea2:	d149      	bne.n	800cf38 <_strtoul_l.constprop.0+0xcc>
 800cea4:	786c      	ldrb	r4, [r5, #1]
 800cea6:	2310      	movs	r3, #16
 800cea8:	3502      	adds	r5, #2
 800ceaa:	f04f 38ff 	mov.w	r8, #4294967295
 800ceae:	2700      	movs	r7, #0
 800ceb0:	fbb8 f8f3 	udiv	r8, r8, r3
 800ceb4:	fb03 f908 	mul.w	r9, r3, r8
 800ceb8:	ea6f 0909 	mvn.w	r9, r9
 800cebc:	4638      	mov	r0, r7
 800cebe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cec2:	f1bc 0f09 	cmp.w	ip, #9
 800cec6:	d814      	bhi.n	800cef2 <_strtoul_l.constprop.0+0x86>
 800cec8:	4664      	mov	r4, ip
 800ceca:	42a3      	cmp	r3, r4
 800cecc:	dd22      	ble.n	800cf14 <_strtoul_l.constprop.0+0xa8>
 800cece:	2f00      	cmp	r7, #0
 800ced0:	db1d      	blt.n	800cf0e <_strtoul_l.constprop.0+0xa2>
 800ced2:	4580      	cmp	r8, r0
 800ced4:	d31b      	bcc.n	800cf0e <_strtoul_l.constprop.0+0xa2>
 800ced6:	d101      	bne.n	800cedc <_strtoul_l.constprop.0+0x70>
 800ced8:	45a1      	cmp	r9, r4
 800ceda:	db18      	blt.n	800cf0e <_strtoul_l.constprop.0+0xa2>
 800cedc:	fb00 4003 	mla	r0, r0, r3, r4
 800cee0:	2701      	movs	r7, #1
 800cee2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cee6:	e7ea      	b.n	800cebe <_strtoul_l.constprop.0+0x52>
 800cee8:	2c2b      	cmp	r4, #43	; 0x2b
 800ceea:	bf04      	itt	eq
 800ceec:	782c      	ldrbeq	r4, [r5, #0]
 800ceee:	1c85      	addeq	r5, r0, #2
 800cef0:	e7cd      	b.n	800ce8e <_strtoul_l.constprop.0+0x22>
 800cef2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cef6:	f1bc 0f19 	cmp.w	ip, #25
 800cefa:	d801      	bhi.n	800cf00 <_strtoul_l.constprop.0+0x94>
 800cefc:	3c37      	subs	r4, #55	; 0x37
 800cefe:	e7e4      	b.n	800ceca <_strtoul_l.constprop.0+0x5e>
 800cf00:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cf04:	f1bc 0f19 	cmp.w	ip, #25
 800cf08:	d804      	bhi.n	800cf14 <_strtoul_l.constprop.0+0xa8>
 800cf0a:	3c57      	subs	r4, #87	; 0x57
 800cf0c:	e7dd      	b.n	800ceca <_strtoul_l.constprop.0+0x5e>
 800cf0e:	f04f 37ff 	mov.w	r7, #4294967295
 800cf12:	e7e6      	b.n	800cee2 <_strtoul_l.constprop.0+0x76>
 800cf14:	2f00      	cmp	r7, #0
 800cf16:	da07      	bge.n	800cf28 <_strtoul_l.constprop.0+0xbc>
 800cf18:	2322      	movs	r3, #34	; 0x22
 800cf1a:	f8ce 3000 	str.w	r3, [lr]
 800cf1e:	f04f 30ff 	mov.w	r0, #4294967295
 800cf22:	b932      	cbnz	r2, 800cf32 <_strtoul_l.constprop.0+0xc6>
 800cf24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf28:	b106      	cbz	r6, 800cf2c <_strtoul_l.constprop.0+0xc0>
 800cf2a:	4240      	negs	r0, r0
 800cf2c:	2a00      	cmp	r2, #0
 800cf2e:	d0f9      	beq.n	800cf24 <_strtoul_l.constprop.0+0xb8>
 800cf30:	b107      	cbz	r7, 800cf34 <_strtoul_l.constprop.0+0xc8>
 800cf32:	1e69      	subs	r1, r5, #1
 800cf34:	6011      	str	r1, [r2, #0]
 800cf36:	e7f5      	b.n	800cf24 <_strtoul_l.constprop.0+0xb8>
 800cf38:	2430      	movs	r4, #48	; 0x30
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1b5      	bne.n	800ceaa <_strtoul_l.constprop.0+0x3e>
 800cf3e:	2308      	movs	r3, #8
 800cf40:	e7b3      	b.n	800ceaa <_strtoul_l.constprop.0+0x3e>
 800cf42:	2c30      	cmp	r4, #48	; 0x30
 800cf44:	d0a9      	beq.n	800ce9a <_strtoul_l.constprop.0+0x2e>
 800cf46:	230a      	movs	r3, #10
 800cf48:	e7af      	b.n	800ceaa <_strtoul_l.constprop.0+0x3e>
 800cf4a:	bf00      	nop
 800cf4c:	0802647e 	.word	0x0802647e

0800cf50 <_strtoul_r>:
 800cf50:	f7ff bf8c 	b.w	800ce6c <_strtoul_l.constprop.0>

0800cf54 <strtoul>:
 800cf54:	4613      	mov	r3, r2
 800cf56:	460a      	mov	r2, r1
 800cf58:	4601      	mov	r1, r0
 800cf5a:	4802      	ldr	r0, [pc, #8]	; (800cf64 <strtoul+0x10>)
 800cf5c:	6800      	ldr	r0, [r0, #0]
 800cf5e:	f7ff bf85 	b.w	800ce6c <_strtoul_l.constprop.0>
 800cf62:	bf00      	nop
 800cf64:	200000cc 	.word	0x200000cc

0800cf68 <__swbuf_r>:
 800cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6a:	460e      	mov	r6, r1
 800cf6c:	4614      	mov	r4, r2
 800cf6e:	4605      	mov	r5, r0
 800cf70:	b118      	cbz	r0, 800cf7a <__swbuf_r+0x12>
 800cf72:	6983      	ldr	r3, [r0, #24]
 800cf74:	b90b      	cbnz	r3, 800cf7a <__swbuf_r+0x12>
 800cf76:	f7fe fea1 	bl	800bcbc <__sinit>
 800cf7a:	4b21      	ldr	r3, [pc, #132]	; (800d000 <__swbuf_r+0x98>)
 800cf7c:	429c      	cmp	r4, r3
 800cf7e:	d12b      	bne.n	800cfd8 <__swbuf_r+0x70>
 800cf80:	686c      	ldr	r4, [r5, #4]
 800cf82:	69a3      	ldr	r3, [r4, #24]
 800cf84:	60a3      	str	r3, [r4, #8]
 800cf86:	89a3      	ldrh	r3, [r4, #12]
 800cf88:	071a      	lsls	r2, r3, #28
 800cf8a:	d52f      	bpl.n	800cfec <__swbuf_r+0x84>
 800cf8c:	6923      	ldr	r3, [r4, #16]
 800cf8e:	b36b      	cbz	r3, 800cfec <__swbuf_r+0x84>
 800cf90:	6923      	ldr	r3, [r4, #16]
 800cf92:	6820      	ldr	r0, [r4, #0]
 800cf94:	1ac0      	subs	r0, r0, r3
 800cf96:	6963      	ldr	r3, [r4, #20]
 800cf98:	b2f6      	uxtb	r6, r6
 800cf9a:	4283      	cmp	r3, r0
 800cf9c:	4637      	mov	r7, r6
 800cf9e:	dc04      	bgt.n	800cfaa <__swbuf_r+0x42>
 800cfa0:	4621      	mov	r1, r4
 800cfa2:	4628      	mov	r0, r5
 800cfa4:	f000 f95c 	bl	800d260 <_fflush_r>
 800cfa8:	bb30      	cbnz	r0, 800cff8 <__swbuf_r+0x90>
 800cfaa:	68a3      	ldr	r3, [r4, #8]
 800cfac:	3b01      	subs	r3, #1
 800cfae:	60a3      	str	r3, [r4, #8]
 800cfb0:	6823      	ldr	r3, [r4, #0]
 800cfb2:	1c5a      	adds	r2, r3, #1
 800cfb4:	6022      	str	r2, [r4, #0]
 800cfb6:	701e      	strb	r6, [r3, #0]
 800cfb8:	6963      	ldr	r3, [r4, #20]
 800cfba:	3001      	adds	r0, #1
 800cfbc:	4283      	cmp	r3, r0
 800cfbe:	d004      	beq.n	800cfca <__swbuf_r+0x62>
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	07db      	lsls	r3, r3, #31
 800cfc4:	d506      	bpl.n	800cfd4 <__swbuf_r+0x6c>
 800cfc6:	2e0a      	cmp	r6, #10
 800cfc8:	d104      	bne.n	800cfd4 <__swbuf_r+0x6c>
 800cfca:	4621      	mov	r1, r4
 800cfcc:	4628      	mov	r0, r5
 800cfce:	f000 f947 	bl	800d260 <_fflush_r>
 800cfd2:	b988      	cbnz	r0, 800cff8 <__swbuf_r+0x90>
 800cfd4:	4638      	mov	r0, r7
 800cfd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfd8:	4b0a      	ldr	r3, [pc, #40]	; (800d004 <__swbuf_r+0x9c>)
 800cfda:	429c      	cmp	r4, r3
 800cfdc:	d101      	bne.n	800cfe2 <__swbuf_r+0x7a>
 800cfde:	68ac      	ldr	r4, [r5, #8]
 800cfe0:	e7cf      	b.n	800cf82 <__swbuf_r+0x1a>
 800cfe2:	4b09      	ldr	r3, [pc, #36]	; (800d008 <__swbuf_r+0xa0>)
 800cfe4:	429c      	cmp	r4, r3
 800cfe6:	bf08      	it	eq
 800cfe8:	68ec      	ldreq	r4, [r5, #12]
 800cfea:	e7ca      	b.n	800cf82 <__swbuf_r+0x1a>
 800cfec:	4621      	mov	r1, r4
 800cfee:	4628      	mov	r0, r5
 800cff0:	f000 f81e 	bl	800d030 <__swsetup_r>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d0cb      	beq.n	800cf90 <__swbuf_r+0x28>
 800cff8:	f04f 37ff 	mov.w	r7, #4294967295
 800cffc:	e7ea      	b.n	800cfd4 <__swbuf_r+0x6c>
 800cffe:	bf00      	nop
 800d000:	080262d0 	.word	0x080262d0
 800d004:	080262f0 	.word	0x080262f0
 800d008:	080262b0 	.word	0x080262b0

0800d00c <_write_r>:
 800d00c:	b538      	push	{r3, r4, r5, lr}
 800d00e:	4d07      	ldr	r5, [pc, #28]	; (800d02c <_write_r+0x20>)
 800d010:	4604      	mov	r4, r0
 800d012:	4608      	mov	r0, r1
 800d014:	4611      	mov	r1, r2
 800d016:	2200      	movs	r2, #0
 800d018:	602a      	str	r2, [r5, #0]
 800d01a:	461a      	mov	r2, r3
 800d01c:	f000 ff72 	bl	800df04 <_write>
 800d020:	1c43      	adds	r3, r0, #1
 800d022:	d102      	bne.n	800d02a <_write_r+0x1e>
 800d024:	682b      	ldr	r3, [r5, #0]
 800d026:	b103      	cbz	r3, 800d02a <_write_r+0x1e>
 800d028:	6023      	str	r3, [r4, #0]
 800d02a:	bd38      	pop	{r3, r4, r5, pc}
 800d02c:	20000b54 	.word	0x20000b54

0800d030 <__swsetup_r>:
 800d030:	4b32      	ldr	r3, [pc, #200]	; (800d0fc <__swsetup_r+0xcc>)
 800d032:	b570      	push	{r4, r5, r6, lr}
 800d034:	681d      	ldr	r5, [r3, #0]
 800d036:	4606      	mov	r6, r0
 800d038:	460c      	mov	r4, r1
 800d03a:	b125      	cbz	r5, 800d046 <__swsetup_r+0x16>
 800d03c:	69ab      	ldr	r3, [r5, #24]
 800d03e:	b913      	cbnz	r3, 800d046 <__swsetup_r+0x16>
 800d040:	4628      	mov	r0, r5
 800d042:	f7fe fe3b 	bl	800bcbc <__sinit>
 800d046:	4b2e      	ldr	r3, [pc, #184]	; (800d100 <__swsetup_r+0xd0>)
 800d048:	429c      	cmp	r4, r3
 800d04a:	d10f      	bne.n	800d06c <__swsetup_r+0x3c>
 800d04c:	686c      	ldr	r4, [r5, #4]
 800d04e:	89a3      	ldrh	r3, [r4, #12]
 800d050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d054:	0719      	lsls	r1, r3, #28
 800d056:	d42c      	bmi.n	800d0b2 <__swsetup_r+0x82>
 800d058:	06dd      	lsls	r5, r3, #27
 800d05a:	d411      	bmi.n	800d080 <__swsetup_r+0x50>
 800d05c:	2309      	movs	r3, #9
 800d05e:	6033      	str	r3, [r6, #0]
 800d060:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d064:	81a3      	strh	r3, [r4, #12]
 800d066:	f04f 30ff 	mov.w	r0, #4294967295
 800d06a:	e03e      	b.n	800d0ea <__swsetup_r+0xba>
 800d06c:	4b25      	ldr	r3, [pc, #148]	; (800d104 <__swsetup_r+0xd4>)
 800d06e:	429c      	cmp	r4, r3
 800d070:	d101      	bne.n	800d076 <__swsetup_r+0x46>
 800d072:	68ac      	ldr	r4, [r5, #8]
 800d074:	e7eb      	b.n	800d04e <__swsetup_r+0x1e>
 800d076:	4b24      	ldr	r3, [pc, #144]	; (800d108 <__swsetup_r+0xd8>)
 800d078:	429c      	cmp	r4, r3
 800d07a:	bf08      	it	eq
 800d07c:	68ec      	ldreq	r4, [r5, #12]
 800d07e:	e7e6      	b.n	800d04e <__swsetup_r+0x1e>
 800d080:	0758      	lsls	r0, r3, #29
 800d082:	d512      	bpl.n	800d0aa <__swsetup_r+0x7a>
 800d084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d086:	b141      	cbz	r1, 800d09a <__swsetup_r+0x6a>
 800d088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d08c:	4299      	cmp	r1, r3
 800d08e:	d002      	beq.n	800d096 <__swsetup_r+0x66>
 800d090:	4630      	mov	r0, r6
 800d092:	f7fc fedf 	bl	8009e54 <_free_r>
 800d096:	2300      	movs	r3, #0
 800d098:	6363      	str	r3, [r4, #52]	; 0x34
 800d09a:	89a3      	ldrh	r3, [r4, #12]
 800d09c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d0a0:	81a3      	strh	r3, [r4, #12]
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	6063      	str	r3, [r4, #4]
 800d0a6:	6923      	ldr	r3, [r4, #16]
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f043 0308 	orr.w	r3, r3, #8
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	6923      	ldr	r3, [r4, #16]
 800d0b4:	b94b      	cbnz	r3, 800d0ca <__swsetup_r+0x9a>
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d0bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0c0:	d003      	beq.n	800d0ca <__swsetup_r+0x9a>
 800d0c2:	4621      	mov	r1, r4
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f000 f93f 	bl	800d348 <__smakebuf_r>
 800d0ca:	89a0      	ldrh	r0, [r4, #12]
 800d0cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d0d0:	f010 0301 	ands.w	r3, r0, #1
 800d0d4:	d00a      	beq.n	800d0ec <__swsetup_r+0xbc>
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	60a3      	str	r3, [r4, #8]
 800d0da:	6963      	ldr	r3, [r4, #20]
 800d0dc:	425b      	negs	r3, r3
 800d0de:	61a3      	str	r3, [r4, #24]
 800d0e0:	6923      	ldr	r3, [r4, #16]
 800d0e2:	b943      	cbnz	r3, 800d0f6 <__swsetup_r+0xc6>
 800d0e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d0e8:	d1ba      	bne.n	800d060 <__swsetup_r+0x30>
 800d0ea:	bd70      	pop	{r4, r5, r6, pc}
 800d0ec:	0781      	lsls	r1, r0, #30
 800d0ee:	bf58      	it	pl
 800d0f0:	6963      	ldrpl	r3, [r4, #20]
 800d0f2:	60a3      	str	r3, [r4, #8]
 800d0f4:	e7f4      	b.n	800d0e0 <__swsetup_r+0xb0>
 800d0f6:	2000      	movs	r0, #0
 800d0f8:	e7f7      	b.n	800d0ea <__swsetup_r+0xba>
 800d0fa:	bf00      	nop
 800d0fc:	200000cc 	.word	0x200000cc
 800d100:	080262d0 	.word	0x080262d0
 800d104:	080262f0 	.word	0x080262f0
 800d108:	080262b0 	.word	0x080262b0

0800d10c <abort>:
 800d10c:	b508      	push	{r3, lr}
 800d10e:	2006      	movs	r0, #6
 800d110:	f000 fd4c 	bl	800dbac <raise>
 800d114:	2001      	movs	r0, #1
 800d116:	f000 fefd 	bl	800df14 <_exit>
	...

0800d11c <_close_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	4d06      	ldr	r5, [pc, #24]	; (800d138 <_close_r+0x1c>)
 800d120:	2300      	movs	r3, #0
 800d122:	4604      	mov	r4, r0
 800d124:	4608      	mov	r0, r1
 800d126:	602b      	str	r3, [r5, #0]
 800d128:	f000 fe9e 	bl	800de68 <_close>
 800d12c:	1c43      	adds	r3, r0, #1
 800d12e:	d102      	bne.n	800d136 <_close_r+0x1a>
 800d130:	682b      	ldr	r3, [r5, #0]
 800d132:	b103      	cbz	r3, 800d136 <_close_r+0x1a>
 800d134:	6023      	str	r3, [r4, #0]
 800d136:	bd38      	pop	{r3, r4, r5, pc}
 800d138:	20000b54 	.word	0x20000b54

0800d13c <__env_lock>:
 800d13c:	4801      	ldr	r0, [pc, #4]	; (800d144 <__env_lock+0x8>)
 800d13e:	f7fe bf79 	b.w	800c034 <__retarget_lock_acquire_recursive>
 800d142:	bf00      	nop
 800d144:	20000b4c 	.word	0x20000b4c

0800d148 <__env_unlock>:
 800d148:	4801      	ldr	r0, [pc, #4]	; (800d150 <__env_unlock+0x8>)
 800d14a:	f7fe bf75 	b.w	800c038 <__retarget_lock_release_recursive>
 800d14e:	bf00      	nop
 800d150:	20000b4c 	.word	0x20000b4c

0800d154 <__sflush_r>:
 800d154:	898a      	ldrh	r2, [r1, #12]
 800d156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d15a:	4605      	mov	r5, r0
 800d15c:	0710      	lsls	r0, r2, #28
 800d15e:	460c      	mov	r4, r1
 800d160:	d458      	bmi.n	800d214 <__sflush_r+0xc0>
 800d162:	684b      	ldr	r3, [r1, #4]
 800d164:	2b00      	cmp	r3, #0
 800d166:	dc05      	bgt.n	800d174 <__sflush_r+0x20>
 800d168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	dc02      	bgt.n	800d174 <__sflush_r+0x20>
 800d16e:	2000      	movs	r0, #0
 800d170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d176:	2e00      	cmp	r6, #0
 800d178:	d0f9      	beq.n	800d16e <__sflush_r+0x1a>
 800d17a:	2300      	movs	r3, #0
 800d17c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d180:	682f      	ldr	r7, [r5, #0]
 800d182:	602b      	str	r3, [r5, #0]
 800d184:	d032      	beq.n	800d1ec <__sflush_r+0x98>
 800d186:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d188:	89a3      	ldrh	r3, [r4, #12]
 800d18a:	075a      	lsls	r2, r3, #29
 800d18c:	d505      	bpl.n	800d19a <__sflush_r+0x46>
 800d18e:	6863      	ldr	r3, [r4, #4]
 800d190:	1ac0      	subs	r0, r0, r3
 800d192:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d194:	b10b      	cbz	r3, 800d19a <__sflush_r+0x46>
 800d196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d198:	1ac0      	subs	r0, r0, r3
 800d19a:	2300      	movs	r3, #0
 800d19c:	4602      	mov	r2, r0
 800d19e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d1a0:	6a21      	ldr	r1, [r4, #32]
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	47b0      	blx	r6
 800d1a6:	1c43      	adds	r3, r0, #1
 800d1a8:	89a3      	ldrh	r3, [r4, #12]
 800d1aa:	d106      	bne.n	800d1ba <__sflush_r+0x66>
 800d1ac:	6829      	ldr	r1, [r5, #0]
 800d1ae:	291d      	cmp	r1, #29
 800d1b0:	d82c      	bhi.n	800d20c <__sflush_r+0xb8>
 800d1b2:	4a2a      	ldr	r2, [pc, #168]	; (800d25c <__sflush_r+0x108>)
 800d1b4:	40ca      	lsrs	r2, r1
 800d1b6:	07d6      	lsls	r6, r2, #31
 800d1b8:	d528      	bpl.n	800d20c <__sflush_r+0xb8>
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	6062      	str	r2, [r4, #4]
 800d1be:	04d9      	lsls	r1, r3, #19
 800d1c0:	6922      	ldr	r2, [r4, #16]
 800d1c2:	6022      	str	r2, [r4, #0]
 800d1c4:	d504      	bpl.n	800d1d0 <__sflush_r+0x7c>
 800d1c6:	1c42      	adds	r2, r0, #1
 800d1c8:	d101      	bne.n	800d1ce <__sflush_r+0x7a>
 800d1ca:	682b      	ldr	r3, [r5, #0]
 800d1cc:	b903      	cbnz	r3, 800d1d0 <__sflush_r+0x7c>
 800d1ce:	6560      	str	r0, [r4, #84]	; 0x54
 800d1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1d2:	602f      	str	r7, [r5, #0]
 800d1d4:	2900      	cmp	r1, #0
 800d1d6:	d0ca      	beq.n	800d16e <__sflush_r+0x1a>
 800d1d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d1dc:	4299      	cmp	r1, r3
 800d1de:	d002      	beq.n	800d1e6 <__sflush_r+0x92>
 800d1e0:	4628      	mov	r0, r5
 800d1e2:	f7fc fe37 	bl	8009e54 <_free_r>
 800d1e6:	2000      	movs	r0, #0
 800d1e8:	6360      	str	r0, [r4, #52]	; 0x34
 800d1ea:	e7c1      	b.n	800d170 <__sflush_r+0x1c>
 800d1ec:	6a21      	ldr	r1, [r4, #32]
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	4628      	mov	r0, r5
 800d1f2:	47b0      	blx	r6
 800d1f4:	1c41      	adds	r1, r0, #1
 800d1f6:	d1c7      	bne.n	800d188 <__sflush_r+0x34>
 800d1f8:	682b      	ldr	r3, [r5, #0]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d0c4      	beq.n	800d188 <__sflush_r+0x34>
 800d1fe:	2b1d      	cmp	r3, #29
 800d200:	d001      	beq.n	800d206 <__sflush_r+0xb2>
 800d202:	2b16      	cmp	r3, #22
 800d204:	d101      	bne.n	800d20a <__sflush_r+0xb6>
 800d206:	602f      	str	r7, [r5, #0]
 800d208:	e7b1      	b.n	800d16e <__sflush_r+0x1a>
 800d20a:	89a3      	ldrh	r3, [r4, #12]
 800d20c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d210:	81a3      	strh	r3, [r4, #12]
 800d212:	e7ad      	b.n	800d170 <__sflush_r+0x1c>
 800d214:	690f      	ldr	r7, [r1, #16]
 800d216:	2f00      	cmp	r7, #0
 800d218:	d0a9      	beq.n	800d16e <__sflush_r+0x1a>
 800d21a:	0793      	lsls	r3, r2, #30
 800d21c:	680e      	ldr	r6, [r1, #0]
 800d21e:	bf08      	it	eq
 800d220:	694b      	ldreq	r3, [r1, #20]
 800d222:	600f      	str	r7, [r1, #0]
 800d224:	bf18      	it	ne
 800d226:	2300      	movne	r3, #0
 800d228:	eba6 0807 	sub.w	r8, r6, r7
 800d22c:	608b      	str	r3, [r1, #8]
 800d22e:	f1b8 0f00 	cmp.w	r8, #0
 800d232:	dd9c      	ble.n	800d16e <__sflush_r+0x1a>
 800d234:	6a21      	ldr	r1, [r4, #32]
 800d236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d238:	4643      	mov	r3, r8
 800d23a:	463a      	mov	r2, r7
 800d23c:	4628      	mov	r0, r5
 800d23e:	47b0      	blx	r6
 800d240:	2800      	cmp	r0, #0
 800d242:	dc06      	bgt.n	800d252 <__sflush_r+0xfe>
 800d244:	89a3      	ldrh	r3, [r4, #12]
 800d246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d24a:	81a3      	strh	r3, [r4, #12]
 800d24c:	f04f 30ff 	mov.w	r0, #4294967295
 800d250:	e78e      	b.n	800d170 <__sflush_r+0x1c>
 800d252:	4407      	add	r7, r0
 800d254:	eba8 0800 	sub.w	r8, r8, r0
 800d258:	e7e9      	b.n	800d22e <__sflush_r+0xda>
 800d25a:	bf00      	nop
 800d25c:	20400001 	.word	0x20400001

0800d260 <_fflush_r>:
 800d260:	b538      	push	{r3, r4, r5, lr}
 800d262:	690b      	ldr	r3, [r1, #16]
 800d264:	4605      	mov	r5, r0
 800d266:	460c      	mov	r4, r1
 800d268:	b913      	cbnz	r3, 800d270 <_fflush_r+0x10>
 800d26a:	2500      	movs	r5, #0
 800d26c:	4628      	mov	r0, r5
 800d26e:	bd38      	pop	{r3, r4, r5, pc}
 800d270:	b118      	cbz	r0, 800d27a <_fflush_r+0x1a>
 800d272:	6983      	ldr	r3, [r0, #24]
 800d274:	b90b      	cbnz	r3, 800d27a <_fflush_r+0x1a>
 800d276:	f7fe fd21 	bl	800bcbc <__sinit>
 800d27a:	4b14      	ldr	r3, [pc, #80]	; (800d2cc <_fflush_r+0x6c>)
 800d27c:	429c      	cmp	r4, r3
 800d27e:	d11b      	bne.n	800d2b8 <_fflush_r+0x58>
 800d280:	686c      	ldr	r4, [r5, #4]
 800d282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d0ef      	beq.n	800d26a <_fflush_r+0xa>
 800d28a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d28c:	07d0      	lsls	r0, r2, #31
 800d28e:	d404      	bmi.n	800d29a <_fflush_r+0x3a>
 800d290:	0599      	lsls	r1, r3, #22
 800d292:	d402      	bmi.n	800d29a <_fflush_r+0x3a>
 800d294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d296:	f7fe fecd 	bl	800c034 <__retarget_lock_acquire_recursive>
 800d29a:	4628      	mov	r0, r5
 800d29c:	4621      	mov	r1, r4
 800d29e:	f7ff ff59 	bl	800d154 <__sflush_r>
 800d2a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d2a4:	07da      	lsls	r2, r3, #31
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	d4e0      	bmi.n	800d26c <_fflush_r+0xc>
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	059b      	lsls	r3, r3, #22
 800d2ae:	d4dd      	bmi.n	800d26c <_fflush_r+0xc>
 800d2b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d2b2:	f7fe fec1 	bl	800c038 <__retarget_lock_release_recursive>
 800d2b6:	e7d9      	b.n	800d26c <_fflush_r+0xc>
 800d2b8:	4b05      	ldr	r3, [pc, #20]	; (800d2d0 <_fflush_r+0x70>)
 800d2ba:	429c      	cmp	r4, r3
 800d2bc:	d101      	bne.n	800d2c2 <_fflush_r+0x62>
 800d2be:	68ac      	ldr	r4, [r5, #8]
 800d2c0:	e7df      	b.n	800d282 <_fflush_r+0x22>
 800d2c2:	4b04      	ldr	r3, [pc, #16]	; (800d2d4 <_fflush_r+0x74>)
 800d2c4:	429c      	cmp	r4, r3
 800d2c6:	bf08      	it	eq
 800d2c8:	68ec      	ldreq	r4, [r5, #12]
 800d2ca:	e7da      	b.n	800d282 <_fflush_r+0x22>
 800d2cc:	080262d0 	.word	0x080262d0
 800d2d0:	080262f0 	.word	0x080262f0
 800d2d4:	080262b0 	.word	0x080262b0

0800d2d8 <_lseek_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4d07      	ldr	r5, [pc, #28]	; (800d2f8 <_lseek_r+0x20>)
 800d2dc:	4604      	mov	r4, r0
 800d2de:	4608      	mov	r0, r1
 800d2e0:	4611      	mov	r1, r2
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	602a      	str	r2, [r5, #0]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	f000 fdee 	bl	800dec8 <_lseek>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	d102      	bne.n	800d2f6 <_lseek_r+0x1e>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	b103      	cbz	r3, 800d2f6 <_lseek_r+0x1e>
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	20000b54 	.word	0x20000b54

0800d2fc <__swhatbuf_r>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	460e      	mov	r6, r1
 800d300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d304:	2900      	cmp	r1, #0
 800d306:	b096      	sub	sp, #88	; 0x58
 800d308:	4614      	mov	r4, r2
 800d30a:	461d      	mov	r5, r3
 800d30c:	da08      	bge.n	800d320 <__swhatbuf_r+0x24>
 800d30e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d312:	2200      	movs	r2, #0
 800d314:	602a      	str	r2, [r5, #0]
 800d316:	061a      	lsls	r2, r3, #24
 800d318:	d410      	bmi.n	800d33c <__swhatbuf_r+0x40>
 800d31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d31e:	e00e      	b.n	800d33e <__swhatbuf_r+0x42>
 800d320:	466a      	mov	r2, sp
 800d322:	f000 fd31 	bl	800dd88 <_fstat_r>
 800d326:	2800      	cmp	r0, #0
 800d328:	dbf1      	blt.n	800d30e <__swhatbuf_r+0x12>
 800d32a:	9a01      	ldr	r2, [sp, #4]
 800d32c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d330:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d334:	425a      	negs	r2, r3
 800d336:	415a      	adcs	r2, r3
 800d338:	602a      	str	r2, [r5, #0]
 800d33a:	e7ee      	b.n	800d31a <__swhatbuf_r+0x1e>
 800d33c:	2340      	movs	r3, #64	; 0x40
 800d33e:	2000      	movs	r0, #0
 800d340:	6023      	str	r3, [r4, #0]
 800d342:	b016      	add	sp, #88	; 0x58
 800d344:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d348 <__smakebuf_r>:
 800d348:	898b      	ldrh	r3, [r1, #12]
 800d34a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d34c:	079d      	lsls	r5, r3, #30
 800d34e:	4606      	mov	r6, r0
 800d350:	460c      	mov	r4, r1
 800d352:	d507      	bpl.n	800d364 <__smakebuf_r+0x1c>
 800d354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d358:	6023      	str	r3, [r4, #0]
 800d35a:	6123      	str	r3, [r4, #16]
 800d35c:	2301      	movs	r3, #1
 800d35e:	6163      	str	r3, [r4, #20]
 800d360:	b002      	add	sp, #8
 800d362:	bd70      	pop	{r4, r5, r6, pc}
 800d364:	ab01      	add	r3, sp, #4
 800d366:	466a      	mov	r2, sp
 800d368:	f7ff ffc8 	bl	800d2fc <__swhatbuf_r>
 800d36c:	9900      	ldr	r1, [sp, #0]
 800d36e:	4605      	mov	r5, r0
 800d370:	4630      	mov	r0, r6
 800d372:	f7fc fddb 	bl	8009f2c <_malloc_r>
 800d376:	b948      	cbnz	r0, 800d38c <__smakebuf_r+0x44>
 800d378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d37c:	059a      	lsls	r2, r3, #22
 800d37e:	d4ef      	bmi.n	800d360 <__smakebuf_r+0x18>
 800d380:	f023 0303 	bic.w	r3, r3, #3
 800d384:	f043 0302 	orr.w	r3, r3, #2
 800d388:	81a3      	strh	r3, [r4, #12]
 800d38a:	e7e3      	b.n	800d354 <__smakebuf_r+0xc>
 800d38c:	4b0d      	ldr	r3, [pc, #52]	; (800d3c4 <__smakebuf_r+0x7c>)
 800d38e:	62b3      	str	r3, [r6, #40]	; 0x28
 800d390:	89a3      	ldrh	r3, [r4, #12]
 800d392:	6020      	str	r0, [r4, #0]
 800d394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d398:	81a3      	strh	r3, [r4, #12]
 800d39a:	9b00      	ldr	r3, [sp, #0]
 800d39c:	6163      	str	r3, [r4, #20]
 800d39e:	9b01      	ldr	r3, [sp, #4]
 800d3a0:	6120      	str	r0, [r4, #16]
 800d3a2:	b15b      	cbz	r3, 800d3bc <__smakebuf_r+0x74>
 800d3a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d3a8:	4630      	mov	r0, r6
 800d3aa:	f000 fcff 	bl	800ddac <_isatty_r>
 800d3ae:	b128      	cbz	r0, 800d3bc <__smakebuf_r+0x74>
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	f023 0303 	bic.w	r3, r3, #3
 800d3b6:	f043 0301 	orr.w	r3, r3, #1
 800d3ba:	81a3      	strh	r3, [r4, #12]
 800d3bc:	89a0      	ldrh	r0, [r4, #12]
 800d3be:	4305      	orrs	r5, r0
 800d3c0:	81a5      	strh	r5, [r4, #12]
 800d3c2:	e7cd      	b.n	800d360 <__smakebuf_r+0x18>
 800d3c4:	0800bc55 	.word	0x0800bc55

0800d3c8 <__ascii_mbtowc>:
 800d3c8:	b082      	sub	sp, #8
 800d3ca:	b901      	cbnz	r1, 800d3ce <__ascii_mbtowc+0x6>
 800d3cc:	a901      	add	r1, sp, #4
 800d3ce:	b142      	cbz	r2, 800d3e2 <__ascii_mbtowc+0x1a>
 800d3d0:	b14b      	cbz	r3, 800d3e6 <__ascii_mbtowc+0x1e>
 800d3d2:	7813      	ldrb	r3, [r2, #0]
 800d3d4:	600b      	str	r3, [r1, #0]
 800d3d6:	7812      	ldrb	r2, [r2, #0]
 800d3d8:	1e10      	subs	r0, r2, #0
 800d3da:	bf18      	it	ne
 800d3dc:	2001      	movne	r0, #1
 800d3de:	b002      	add	sp, #8
 800d3e0:	4770      	bx	lr
 800d3e2:	4610      	mov	r0, r2
 800d3e4:	e7fb      	b.n	800d3de <__ascii_mbtowc+0x16>
 800d3e6:	f06f 0001 	mvn.w	r0, #1
 800d3ea:	e7f8      	b.n	800d3de <__ascii_mbtowc+0x16>

0800d3ec <memmove>:
 800d3ec:	4288      	cmp	r0, r1
 800d3ee:	b510      	push	{r4, lr}
 800d3f0:	eb01 0402 	add.w	r4, r1, r2
 800d3f4:	d902      	bls.n	800d3fc <memmove+0x10>
 800d3f6:	4284      	cmp	r4, r0
 800d3f8:	4623      	mov	r3, r4
 800d3fa:	d807      	bhi.n	800d40c <memmove+0x20>
 800d3fc:	1e43      	subs	r3, r0, #1
 800d3fe:	42a1      	cmp	r1, r4
 800d400:	d008      	beq.n	800d414 <memmove+0x28>
 800d402:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d40a:	e7f8      	b.n	800d3fe <memmove+0x12>
 800d40c:	4402      	add	r2, r0
 800d40e:	4601      	mov	r1, r0
 800d410:	428a      	cmp	r2, r1
 800d412:	d100      	bne.n	800d416 <memmove+0x2a>
 800d414:	bd10      	pop	{r4, pc}
 800d416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d41a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d41e:	e7f7      	b.n	800d410 <memmove+0x24>

0800d420 <_realloc_r>:
 800d420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d424:	4680      	mov	r8, r0
 800d426:	4614      	mov	r4, r2
 800d428:	460e      	mov	r6, r1
 800d42a:	b921      	cbnz	r1, 800d436 <_realloc_r+0x16>
 800d42c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d430:	4611      	mov	r1, r2
 800d432:	f7fc bd7b 	b.w	8009f2c <_malloc_r>
 800d436:	b92a      	cbnz	r2, 800d444 <_realloc_r+0x24>
 800d438:	f7fc fd0c 	bl	8009e54 <_free_r>
 800d43c:	4625      	mov	r5, r4
 800d43e:	4628      	mov	r0, r5
 800d440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d444:	f000 fcc2 	bl	800ddcc <_malloc_usable_size_r>
 800d448:	4284      	cmp	r4, r0
 800d44a:	4607      	mov	r7, r0
 800d44c:	d802      	bhi.n	800d454 <_realloc_r+0x34>
 800d44e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d452:	d812      	bhi.n	800d47a <_realloc_r+0x5a>
 800d454:	4621      	mov	r1, r4
 800d456:	4640      	mov	r0, r8
 800d458:	f7fc fd68 	bl	8009f2c <_malloc_r>
 800d45c:	4605      	mov	r5, r0
 800d45e:	2800      	cmp	r0, #0
 800d460:	d0ed      	beq.n	800d43e <_realloc_r+0x1e>
 800d462:	42bc      	cmp	r4, r7
 800d464:	4622      	mov	r2, r4
 800d466:	4631      	mov	r1, r6
 800d468:	bf28      	it	cs
 800d46a:	463a      	movcs	r2, r7
 800d46c:	f7fe fde5 	bl	800c03a <memcpy>
 800d470:	4631      	mov	r1, r6
 800d472:	4640      	mov	r0, r8
 800d474:	f7fc fcee 	bl	8009e54 <_free_r>
 800d478:	e7e1      	b.n	800d43e <_realloc_r+0x1e>
 800d47a:	4635      	mov	r5, r6
 800d47c:	e7df      	b.n	800d43e <_realloc_r+0x1e>

0800d47e <_sungetc_r>:
 800d47e:	b538      	push	{r3, r4, r5, lr}
 800d480:	1c4b      	adds	r3, r1, #1
 800d482:	4614      	mov	r4, r2
 800d484:	d103      	bne.n	800d48e <_sungetc_r+0x10>
 800d486:	f04f 35ff 	mov.w	r5, #4294967295
 800d48a:	4628      	mov	r0, r5
 800d48c:	bd38      	pop	{r3, r4, r5, pc}
 800d48e:	8993      	ldrh	r3, [r2, #12]
 800d490:	f023 0320 	bic.w	r3, r3, #32
 800d494:	8193      	strh	r3, [r2, #12]
 800d496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d498:	6852      	ldr	r2, [r2, #4]
 800d49a:	b2cd      	uxtb	r5, r1
 800d49c:	b18b      	cbz	r3, 800d4c2 <_sungetc_r+0x44>
 800d49e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	dd08      	ble.n	800d4b6 <_sungetc_r+0x38>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	1e5a      	subs	r2, r3, #1
 800d4a8:	6022      	str	r2, [r4, #0]
 800d4aa:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d4ae:	6863      	ldr	r3, [r4, #4]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	6063      	str	r3, [r4, #4]
 800d4b4:	e7e9      	b.n	800d48a <_sungetc_r+0xc>
 800d4b6:	4621      	mov	r1, r4
 800d4b8:	f000 fc18 	bl	800dcec <__submore>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	d0f1      	beq.n	800d4a4 <_sungetc_r+0x26>
 800d4c0:	e7e1      	b.n	800d486 <_sungetc_r+0x8>
 800d4c2:	6921      	ldr	r1, [r4, #16]
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	b151      	cbz	r1, 800d4de <_sungetc_r+0x60>
 800d4c8:	4299      	cmp	r1, r3
 800d4ca:	d208      	bcs.n	800d4de <_sungetc_r+0x60>
 800d4cc:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d4d0:	42a9      	cmp	r1, r5
 800d4d2:	d104      	bne.n	800d4de <_sungetc_r+0x60>
 800d4d4:	3b01      	subs	r3, #1
 800d4d6:	3201      	adds	r2, #1
 800d4d8:	6023      	str	r3, [r4, #0]
 800d4da:	6062      	str	r2, [r4, #4]
 800d4dc:	e7d5      	b.n	800d48a <_sungetc_r+0xc>
 800d4de:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d4e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4e6:	6363      	str	r3, [r4, #52]	; 0x34
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	63a3      	str	r3, [r4, #56]	; 0x38
 800d4ec:	4623      	mov	r3, r4
 800d4ee:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d4f2:	6023      	str	r3, [r4, #0]
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e7dc      	b.n	800d4b2 <_sungetc_r+0x34>

0800d4f8 <__ssrefill_r>:
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	460c      	mov	r4, r1
 800d4fc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d4fe:	b169      	cbz	r1, 800d51c <__ssrefill_r+0x24>
 800d500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d504:	4299      	cmp	r1, r3
 800d506:	d001      	beq.n	800d50c <__ssrefill_r+0x14>
 800d508:	f7fc fca4 	bl	8009e54 <_free_r>
 800d50c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d50e:	6063      	str	r3, [r4, #4]
 800d510:	2000      	movs	r0, #0
 800d512:	6360      	str	r0, [r4, #52]	; 0x34
 800d514:	b113      	cbz	r3, 800d51c <__ssrefill_r+0x24>
 800d516:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d518:	6023      	str	r3, [r4, #0]
 800d51a:	bd10      	pop	{r4, pc}
 800d51c:	6923      	ldr	r3, [r4, #16]
 800d51e:	6023      	str	r3, [r4, #0]
 800d520:	2300      	movs	r3, #0
 800d522:	6063      	str	r3, [r4, #4]
 800d524:	89a3      	ldrh	r3, [r4, #12]
 800d526:	f043 0320 	orr.w	r3, r3, #32
 800d52a:	81a3      	strh	r3, [r4, #12]
 800d52c:	f04f 30ff 	mov.w	r0, #4294967295
 800d530:	e7f3      	b.n	800d51a <__ssrefill_r+0x22>
	...

0800d534 <__ssvfiscanf_r>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	460c      	mov	r4, r1
 800d53a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d53e:	2100      	movs	r1, #0
 800d540:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d544:	49a6      	ldr	r1, [pc, #664]	; (800d7e0 <__ssvfiscanf_r+0x2ac>)
 800d546:	91a0      	str	r1, [sp, #640]	; 0x280
 800d548:	f10d 0804 	add.w	r8, sp, #4
 800d54c:	49a5      	ldr	r1, [pc, #660]	; (800d7e4 <__ssvfiscanf_r+0x2b0>)
 800d54e:	4fa6      	ldr	r7, [pc, #664]	; (800d7e8 <__ssvfiscanf_r+0x2b4>)
 800d550:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d7ec <__ssvfiscanf_r+0x2b8>
 800d554:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d558:	4606      	mov	r6, r0
 800d55a:	91a1      	str	r1, [sp, #644]	; 0x284
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	7813      	ldrb	r3, [r2, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	f000 815a 	beq.w	800d81a <__ssvfiscanf_r+0x2e6>
 800d566:	5dd9      	ldrb	r1, [r3, r7]
 800d568:	f011 0108 	ands.w	r1, r1, #8
 800d56c:	f102 0501 	add.w	r5, r2, #1
 800d570:	d019      	beq.n	800d5a6 <__ssvfiscanf_r+0x72>
 800d572:	6863      	ldr	r3, [r4, #4]
 800d574:	2b00      	cmp	r3, #0
 800d576:	dd0f      	ble.n	800d598 <__ssvfiscanf_r+0x64>
 800d578:	6823      	ldr	r3, [r4, #0]
 800d57a:	781a      	ldrb	r2, [r3, #0]
 800d57c:	5cba      	ldrb	r2, [r7, r2]
 800d57e:	0712      	lsls	r2, r2, #28
 800d580:	d401      	bmi.n	800d586 <__ssvfiscanf_r+0x52>
 800d582:	462a      	mov	r2, r5
 800d584:	e7eb      	b.n	800d55e <__ssvfiscanf_r+0x2a>
 800d586:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d588:	3201      	adds	r2, #1
 800d58a:	9245      	str	r2, [sp, #276]	; 0x114
 800d58c:	6862      	ldr	r2, [r4, #4]
 800d58e:	3301      	adds	r3, #1
 800d590:	3a01      	subs	r2, #1
 800d592:	6062      	str	r2, [r4, #4]
 800d594:	6023      	str	r3, [r4, #0]
 800d596:	e7ec      	b.n	800d572 <__ssvfiscanf_r+0x3e>
 800d598:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d59a:	4621      	mov	r1, r4
 800d59c:	4630      	mov	r0, r6
 800d59e:	4798      	blx	r3
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d0e9      	beq.n	800d578 <__ssvfiscanf_r+0x44>
 800d5a4:	e7ed      	b.n	800d582 <__ssvfiscanf_r+0x4e>
 800d5a6:	2b25      	cmp	r3, #37	; 0x25
 800d5a8:	d012      	beq.n	800d5d0 <__ssvfiscanf_r+0x9c>
 800d5aa:	469a      	mov	sl, r3
 800d5ac:	6863      	ldr	r3, [r4, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	f340 8091 	ble.w	800d6d6 <__ssvfiscanf_r+0x1a2>
 800d5b4:	6822      	ldr	r2, [r4, #0]
 800d5b6:	7813      	ldrb	r3, [r2, #0]
 800d5b8:	4553      	cmp	r3, sl
 800d5ba:	f040 812e 	bne.w	800d81a <__ssvfiscanf_r+0x2e6>
 800d5be:	6863      	ldr	r3, [r4, #4]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	6063      	str	r3, [r4, #4]
 800d5c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d5c6:	3201      	adds	r2, #1
 800d5c8:	3301      	adds	r3, #1
 800d5ca:	6022      	str	r2, [r4, #0]
 800d5cc:	9345      	str	r3, [sp, #276]	; 0x114
 800d5ce:	e7d8      	b.n	800d582 <__ssvfiscanf_r+0x4e>
 800d5d0:	9141      	str	r1, [sp, #260]	; 0x104
 800d5d2:	9143      	str	r1, [sp, #268]	; 0x10c
 800d5d4:	7853      	ldrb	r3, [r2, #1]
 800d5d6:	2b2a      	cmp	r3, #42	; 0x2a
 800d5d8:	bf02      	ittt	eq
 800d5da:	2310      	moveq	r3, #16
 800d5dc:	1c95      	addeq	r5, r2, #2
 800d5de:	9341      	streq	r3, [sp, #260]	; 0x104
 800d5e0:	220a      	movs	r2, #10
 800d5e2:	46aa      	mov	sl, r5
 800d5e4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d5e8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d5ec:	2b09      	cmp	r3, #9
 800d5ee:	d91d      	bls.n	800d62c <__ssvfiscanf_r+0xf8>
 800d5f0:	487e      	ldr	r0, [pc, #504]	; (800d7ec <__ssvfiscanf_r+0x2b8>)
 800d5f2:	2203      	movs	r2, #3
 800d5f4:	f7f2 fe64 	bl	80002c0 <memchr>
 800d5f8:	b140      	cbz	r0, 800d60c <__ssvfiscanf_r+0xd8>
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	eba0 0009 	sub.w	r0, r0, r9
 800d600:	fa03 f000 	lsl.w	r0, r3, r0
 800d604:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d606:	4318      	orrs	r0, r3
 800d608:	9041      	str	r0, [sp, #260]	; 0x104
 800d60a:	4655      	mov	r5, sl
 800d60c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d610:	2b78      	cmp	r3, #120	; 0x78
 800d612:	d806      	bhi.n	800d622 <__ssvfiscanf_r+0xee>
 800d614:	2b57      	cmp	r3, #87	; 0x57
 800d616:	d810      	bhi.n	800d63a <__ssvfiscanf_r+0x106>
 800d618:	2b25      	cmp	r3, #37	; 0x25
 800d61a:	d0c6      	beq.n	800d5aa <__ssvfiscanf_r+0x76>
 800d61c:	d856      	bhi.n	800d6cc <__ssvfiscanf_r+0x198>
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d064      	beq.n	800d6ec <__ssvfiscanf_r+0x1b8>
 800d622:	2303      	movs	r3, #3
 800d624:	9347      	str	r3, [sp, #284]	; 0x11c
 800d626:	230a      	movs	r3, #10
 800d628:	9342      	str	r3, [sp, #264]	; 0x108
 800d62a:	e071      	b.n	800d710 <__ssvfiscanf_r+0x1dc>
 800d62c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d62e:	fb02 1103 	mla	r1, r2, r3, r1
 800d632:	3930      	subs	r1, #48	; 0x30
 800d634:	9143      	str	r1, [sp, #268]	; 0x10c
 800d636:	4655      	mov	r5, sl
 800d638:	e7d3      	b.n	800d5e2 <__ssvfiscanf_r+0xae>
 800d63a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d63e:	2a20      	cmp	r2, #32
 800d640:	d8ef      	bhi.n	800d622 <__ssvfiscanf_r+0xee>
 800d642:	a101      	add	r1, pc, #4	; (adr r1, 800d648 <__ssvfiscanf_r+0x114>)
 800d644:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d648:	0800d6fb 	.word	0x0800d6fb
 800d64c:	0800d623 	.word	0x0800d623
 800d650:	0800d623 	.word	0x0800d623
 800d654:	0800d759 	.word	0x0800d759
 800d658:	0800d623 	.word	0x0800d623
 800d65c:	0800d623 	.word	0x0800d623
 800d660:	0800d623 	.word	0x0800d623
 800d664:	0800d623 	.word	0x0800d623
 800d668:	0800d623 	.word	0x0800d623
 800d66c:	0800d623 	.word	0x0800d623
 800d670:	0800d623 	.word	0x0800d623
 800d674:	0800d76f 	.word	0x0800d76f
 800d678:	0800d745 	.word	0x0800d745
 800d67c:	0800d6d3 	.word	0x0800d6d3
 800d680:	0800d6d3 	.word	0x0800d6d3
 800d684:	0800d6d3 	.word	0x0800d6d3
 800d688:	0800d623 	.word	0x0800d623
 800d68c:	0800d749 	.word	0x0800d749
 800d690:	0800d623 	.word	0x0800d623
 800d694:	0800d623 	.word	0x0800d623
 800d698:	0800d623 	.word	0x0800d623
 800d69c:	0800d623 	.word	0x0800d623
 800d6a0:	0800d77f 	.word	0x0800d77f
 800d6a4:	0800d751 	.word	0x0800d751
 800d6a8:	0800d6f3 	.word	0x0800d6f3
 800d6ac:	0800d623 	.word	0x0800d623
 800d6b0:	0800d623 	.word	0x0800d623
 800d6b4:	0800d77b 	.word	0x0800d77b
 800d6b8:	0800d623 	.word	0x0800d623
 800d6bc:	0800d745 	.word	0x0800d745
 800d6c0:	0800d623 	.word	0x0800d623
 800d6c4:	0800d623 	.word	0x0800d623
 800d6c8:	0800d6fb 	.word	0x0800d6fb
 800d6cc:	3b45      	subs	r3, #69	; 0x45
 800d6ce:	2b02      	cmp	r3, #2
 800d6d0:	d8a7      	bhi.n	800d622 <__ssvfiscanf_r+0xee>
 800d6d2:	2305      	movs	r3, #5
 800d6d4:	e01b      	b.n	800d70e <__ssvfiscanf_r+0x1da>
 800d6d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d6d8:	4621      	mov	r1, r4
 800d6da:	4630      	mov	r0, r6
 800d6dc:	4798      	blx	r3
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	f43f af68 	beq.w	800d5b4 <__ssvfiscanf_r+0x80>
 800d6e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	f040 808d 	bne.w	800d806 <__ssvfiscanf_r+0x2d2>
 800d6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d6f0:	e08f      	b.n	800d812 <__ssvfiscanf_r+0x2de>
 800d6f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d6f4:	f042 0220 	orr.w	r2, r2, #32
 800d6f8:	9241      	str	r2, [sp, #260]	; 0x104
 800d6fa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d6fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d700:	9241      	str	r2, [sp, #260]	; 0x104
 800d702:	2210      	movs	r2, #16
 800d704:	2b6f      	cmp	r3, #111	; 0x6f
 800d706:	9242      	str	r2, [sp, #264]	; 0x108
 800d708:	bf34      	ite	cc
 800d70a:	2303      	movcc	r3, #3
 800d70c:	2304      	movcs	r3, #4
 800d70e:	9347      	str	r3, [sp, #284]	; 0x11c
 800d710:	6863      	ldr	r3, [r4, #4]
 800d712:	2b00      	cmp	r3, #0
 800d714:	dd42      	ble.n	800d79c <__ssvfiscanf_r+0x268>
 800d716:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d718:	0659      	lsls	r1, r3, #25
 800d71a:	d404      	bmi.n	800d726 <__ssvfiscanf_r+0x1f2>
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	781a      	ldrb	r2, [r3, #0]
 800d720:	5cba      	ldrb	r2, [r7, r2]
 800d722:	0712      	lsls	r2, r2, #28
 800d724:	d441      	bmi.n	800d7aa <__ssvfiscanf_r+0x276>
 800d726:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d728:	2b02      	cmp	r3, #2
 800d72a:	dc50      	bgt.n	800d7ce <__ssvfiscanf_r+0x29a>
 800d72c:	466b      	mov	r3, sp
 800d72e:	4622      	mov	r2, r4
 800d730:	a941      	add	r1, sp, #260	; 0x104
 800d732:	4630      	mov	r0, r6
 800d734:	f000 f876 	bl	800d824 <_scanf_chars>
 800d738:	2801      	cmp	r0, #1
 800d73a:	d06e      	beq.n	800d81a <__ssvfiscanf_r+0x2e6>
 800d73c:	2802      	cmp	r0, #2
 800d73e:	f47f af20 	bne.w	800d582 <__ssvfiscanf_r+0x4e>
 800d742:	e7cf      	b.n	800d6e4 <__ssvfiscanf_r+0x1b0>
 800d744:	220a      	movs	r2, #10
 800d746:	e7dd      	b.n	800d704 <__ssvfiscanf_r+0x1d0>
 800d748:	2300      	movs	r3, #0
 800d74a:	9342      	str	r3, [sp, #264]	; 0x108
 800d74c:	2303      	movs	r3, #3
 800d74e:	e7de      	b.n	800d70e <__ssvfiscanf_r+0x1da>
 800d750:	2308      	movs	r3, #8
 800d752:	9342      	str	r3, [sp, #264]	; 0x108
 800d754:	2304      	movs	r3, #4
 800d756:	e7da      	b.n	800d70e <__ssvfiscanf_r+0x1da>
 800d758:	4629      	mov	r1, r5
 800d75a:	4640      	mov	r0, r8
 800d75c:	f000 f9c6 	bl	800daec <__sccl>
 800d760:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d766:	9341      	str	r3, [sp, #260]	; 0x104
 800d768:	4605      	mov	r5, r0
 800d76a:	2301      	movs	r3, #1
 800d76c:	e7cf      	b.n	800d70e <__ssvfiscanf_r+0x1da>
 800d76e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d774:	9341      	str	r3, [sp, #260]	; 0x104
 800d776:	2300      	movs	r3, #0
 800d778:	e7c9      	b.n	800d70e <__ssvfiscanf_r+0x1da>
 800d77a:	2302      	movs	r3, #2
 800d77c:	e7c7      	b.n	800d70e <__ssvfiscanf_r+0x1da>
 800d77e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d780:	06c3      	lsls	r3, r0, #27
 800d782:	f53f aefe 	bmi.w	800d582 <__ssvfiscanf_r+0x4e>
 800d786:	9b00      	ldr	r3, [sp, #0]
 800d788:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d78a:	1d19      	adds	r1, r3, #4
 800d78c:	9100      	str	r1, [sp, #0]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f010 0f01 	tst.w	r0, #1
 800d794:	bf14      	ite	ne
 800d796:	801a      	strhne	r2, [r3, #0]
 800d798:	601a      	streq	r2, [r3, #0]
 800d79a:	e6f2      	b.n	800d582 <__ssvfiscanf_r+0x4e>
 800d79c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	4798      	blx	r3
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	d0b6      	beq.n	800d716 <__ssvfiscanf_r+0x1e2>
 800d7a8:	e79c      	b.n	800d6e4 <__ssvfiscanf_r+0x1b0>
 800d7aa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d7ac:	3201      	adds	r2, #1
 800d7ae:	9245      	str	r2, [sp, #276]	; 0x114
 800d7b0:	6862      	ldr	r2, [r4, #4]
 800d7b2:	3a01      	subs	r2, #1
 800d7b4:	2a00      	cmp	r2, #0
 800d7b6:	6062      	str	r2, [r4, #4]
 800d7b8:	dd02      	ble.n	800d7c0 <__ssvfiscanf_r+0x28c>
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	e7ad      	b.n	800d71c <__ssvfiscanf_r+0x1e8>
 800d7c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	4630      	mov	r0, r6
 800d7c6:	4798      	blx	r3
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d0a7      	beq.n	800d71c <__ssvfiscanf_r+0x1e8>
 800d7cc:	e78a      	b.n	800d6e4 <__ssvfiscanf_r+0x1b0>
 800d7ce:	2b04      	cmp	r3, #4
 800d7d0:	dc0e      	bgt.n	800d7f0 <__ssvfiscanf_r+0x2bc>
 800d7d2:	466b      	mov	r3, sp
 800d7d4:	4622      	mov	r2, r4
 800d7d6:	a941      	add	r1, sp, #260	; 0x104
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f000 f87d 	bl	800d8d8 <_scanf_i>
 800d7de:	e7ab      	b.n	800d738 <__ssvfiscanf_r+0x204>
 800d7e0:	0800d47f 	.word	0x0800d47f
 800d7e4:	0800d4f9 	.word	0x0800d4f9
 800d7e8:	0802647e 	.word	0x0802647e
 800d7ec:	08026472 	.word	0x08026472
 800d7f0:	4b0b      	ldr	r3, [pc, #44]	; (800d820 <__ssvfiscanf_r+0x2ec>)
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	f43f aec5 	beq.w	800d582 <__ssvfiscanf_r+0x4e>
 800d7f8:	466b      	mov	r3, sp
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	a941      	add	r1, sp, #260	; 0x104
 800d7fe:	4630      	mov	r0, r6
 800d800:	f3af 8000 	nop.w
 800d804:	e798      	b.n	800d738 <__ssvfiscanf_r+0x204>
 800d806:	89a3      	ldrh	r3, [r4, #12]
 800d808:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d80c:	bf18      	it	ne
 800d80e:	f04f 30ff 	movne.w	r0, #4294967295
 800d812:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d81a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d81c:	e7f9      	b.n	800d812 <__ssvfiscanf_r+0x2de>
 800d81e:	bf00      	nop
 800d820:	00000000 	.word	0x00000000

0800d824 <_scanf_chars>:
 800d824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d828:	4615      	mov	r5, r2
 800d82a:	688a      	ldr	r2, [r1, #8]
 800d82c:	4680      	mov	r8, r0
 800d82e:	460c      	mov	r4, r1
 800d830:	b932      	cbnz	r2, 800d840 <_scanf_chars+0x1c>
 800d832:	698a      	ldr	r2, [r1, #24]
 800d834:	2a00      	cmp	r2, #0
 800d836:	bf0c      	ite	eq
 800d838:	2201      	moveq	r2, #1
 800d83a:	f04f 32ff 	movne.w	r2, #4294967295
 800d83e:	608a      	str	r2, [r1, #8]
 800d840:	6822      	ldr	r2, [r4, #0]
 800d842:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800d8d4 <_scanf_chars+0xb0>
 800d846:	06d1      	lsls	r1, r2, #27
 800d848:	bf5f      	itttt	pl
 800d84a:	681a      	ldrpl	r2, [r3, #0]
 800d84c:	1d11      	addpl	r1, r2, #4
 800d84e:	6019      	strpl	r1, [r3, #0]
 800d850:	6816      	ldrpl	r6, [r2, #0]
 800d852:	2700      	movs	r7, #0
 800d854:	69a0      	ldr	r0, [r4, #24]
 800d856:	b188      	cbz	r0, 800d87c <_scanf_chars+0x58>
 800d858:	2801      	cmp	r0, #1
 800d85a:	d107      	bne.n	800d86c <_scanf_chars+0x48>
 800d85c:	682a      	ldr	r2, [r5, #0]
 800d85e:	7811      	ldrb	r1, [r2, #0]
 800d860:	6962      	ldr	r2, [r4, #20]
 800d862:	5c52      	ldrb	r2, [r2, r1]
 800d864:	b952      	cbnz	r2, 800d87c <_scanf_chars+0x58>
 800d866:	2f00      	cmp	r7, #0
 800d868:	d031      	beq.n	800d8ce <_scanf_chars+0xaa>
 800d86a:	e022      	b.n	800d8b2 <_scanf_chars+0x8e>
 800d86c:	2802      	cmp	r0, #2
 800d86e:	d120      	bne.n	800d8b2 <_scanf_chars+0x8e>
 800d870:	682b      	ldr	r3, [r5, #0]
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	f813 3009 	ldrb.w	r3, [r3, r9]
 800d878:	071b      	lsls	r3, r3, #28
 800d87a:	d41a      	bmi.n	800d8b2 <_scanf_chars+0x8e>
 800d87c:	6823      	ldr	r3, [r4, #0]
 800d87e:	06da      	lsls	r2, r3, #27
 800d880:	bf5e      	ittt	pl
 800d882:	682b      	ldrpl	r3, [r5, #0]
 800d884:	781b      	ldrbpl	r3, [r3, #0]
 800d886:	f806 3b01 	strbpl.w	r3, [r6], #1
 800d88a:	682a      	ldr	r2, [r5, #0]
 800d88c:	686b      	ldr	r3, [r5, #4]
 800d88e:	3201      	adds	r2, #1
 800d890:	602a      	str	r2, [r5, #0]
 800d892:	68a2      	ldr	r2, [r4, #8]
 800d894:	3b01      	subs	r3, #1
 800d896:	3a01      	subs	r2, #1
 800d898:	606b      	str	r3, [r5, #4]
 800d89a:	3701      	adds	r7, #1
 800d89c:	60a2      	str	r2, [r4, #8]
 800d89e:	b142      	cbz	r2, 800d8b2 <_scanf_chars+0x8e>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	dcd7      	bgt.n	800d854 <_scanf_chars+0x30>
 800d8a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	4640      	mov	r0, r8
 800d8ac:	4798      	blx	r3
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	d0d0      	beq.n	800d854 <_scanf_chars+0x30>
 800d8b2:	6823      	ldr	r3, [r4, #0]
 800d8b4:	f013 0310 	ands.w	r3, r3, #16
 800d8b8:	d105      	bne.n	800d8c6 <_scanf_chars+0xa2>
 800d8ba:	68e2      	ldr	r2, [r4, #12]
 800d8bc:	3201      	adds	r2, #1
 800d8be:	60e2      	str	r2, [r4, #12]
 800d8c0:	69a2      	ldr	r2, [r4, #24]
 800d8c2:	b102      	cbz	r2, 800d8c6 <_scanf_chars+0xa2>
 800d8c4:	7033      	strb	r3, [r6, #0]
 800d8c6:	6923      	ldr	r3, [r4, #16]
 800d8c8:	443b      	add	r3, r7
 800d8ca:	6123      	str	r3, [r4, #16]
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8d2:	bf00      	nop
 800d8d4:	0802647e 	.word	0x0802647e

0800d8d8 <_scanf_i>:
 800d8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8dc:	4698      	mov	r8, r3
 800d8de:	4b76      	ldr	r3, [pc, #472]	; (800dab8 <_scanf_i+0x1e0>)
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	4682      	mov	sl, r0
 800d8e4:	4616      	mov	r6, r2
 800d8e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d8ea:	b087      	sub	sp, #28
 800d8ec:	ab03      	add	r3, sp, #12
 800d8ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d8f2:	4b72      	ldr	r3, [pc, #456]	; (800dabc <_scanf_i+0x1e4>)
 800d8f4:	69a1      	ldr	r1, [r4, #24]
 800d8f6:	4a72      	ldr	r2, [pc, #456]	; (800dac0 <_scanf_i+0x1e8>)
 800d8f8:	2903      	cmp	r1, #3
 800d8fa:	bf18      	it	ne
 800d8fc:	461a      	movne	r2, r3
 800d8fe:	68a3      	ldr	r3, [r4, #8]
 800d900:	9201      	str	r2, [sp, #4]
 800d902:	1e5a      	subs	r2, r3, #1
 800d904:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d908:	bf88      	it	hi
 800d90a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d90e:	4627      	mov	r7, r4
 800d910:	bf82      	ittt	hi
 800d912:	eb03 0905 	addhi.w	r9, r3, r5
 800d916:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d91a:	60a3      	strhi	r3, [r4, #8]
 800d91c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d920:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800d924:	bf98      	it	ls
 800d926:	f04f 0900 	movls.w	r9, #0
 800d92a:	6023      	str	r3, [r4, #0]
 800d92c:	463d      	mov	r5, r7
 800d92e:	f04f 0b00 	mov.w	fp, #0
 800d932:	6831      	ldr	r1, [r6, #0]
 800d934:	ab03      	add	r3, sp, #12
 800d936:	7809      	ldrb	r1, [r1, #0]
 800d938:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d93c:	2202      	movs	r2, #2
 800d93e:	f7f2 fcbf 	bl	80002c0 <memchr>
 800d942:	b328      	cbz	r0, 800d990 <_scanf_i+0xb8>
 800d944:	f1bb 0f01 	cmp.w	fp, #1
 800d948:	d159      	bne.n	800d9fe <_scanf_i+0x126>
 800d94a:	6862      	ldr	r2, [r4, #4]
 800d94c:	b92a      	cbnz	r2, 800d95a <_scanf_i+0x82>
 800d94e:	6822      	ldr	r2, [r4, #0]
 800d950:	2308      	movs	r3, #8
 800d952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d956:	6063      	str	r3, [r4, #4]
 800d958:	6022      	str	r2, [r4, #0]
 800d95a:	6822      	ldr	r2, [r4, #0]
 800d95c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800d960:	6022      	str	r2, [r4, #0]
 800d962:	68a2      	ldr	r2, [r4, #8]
 800d964:	1e51      	subs	r1, r2, #1
 800d966:	60a1      	str	r1, [r4, #8]
 800d968:	b192      	cbz	r2, 800d990 <_scanf_i+0xb8>
 800d96a:	6832      	ldr	r2, [r6, #0]
 800d96c:	1c51      	adds	r1, r2, #1
 800d96e:	6031      	str	r1, [r6, #0]
 800d970:	7812      	ldrb	r2, [r2, #0]
 800d972:	f805 2b01 	strb.w	r2, [r5], #1
 800d976:	6872      	ldr	r2, [r6, #4]
 800d978:	3a01      	subs	r2, #1
 800d97a:	2a00      	cmp	r2, #0
 800d97c:	6072      	str	r2, [r6, #4]
 800d97e:	dc07      	bgt.n	800d990 <_scanf_i+0xb8>
 800d980:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800d984:	4631      	mov	r1, r6
 800d986:	4650      	mov	r0, sl
 800d988:	4790      	blx	r2
 800d98a:	2800      	cmp	r0, #0
 800d98c:	f040 8085 	bne.w	800da9a <_scanf_i+0x1c2>
 800d990:	f10b 0b01 	add.w	fp, fp, #1
 800d994:	f1bb 0f03 	cmp.w	fp, #3
 800d998:	d1cb      	bne.n	800d932 <_scanf_i+0x5a>
 800d99a:	6863      	ldr	r3, [r4, #4]
 800d99c:	b90b      	cbnz	r3, 800d9a2 <_scanf_i+0xca>
 800d99e:	230a      	movs	r3, #10
 800d9a0:	6063      	str	r3, [r4, #4]
 800d9a2:	6863      	ldr	r3, [r4, #4]
 800d9a4:	4947      	ldr	r1, [pc, #284]	; (800dac4 <_scanf_i+0x1ec>)
 800d9a6:	6960      	ldr	r0, [r4, #20]
 800d9a8:	1ac9      	subs	r1, r1, r3
 800d9aa:	f000 f89f 	bl	800daec <__sccl>
 800d9ae:	f04f 0b00 	mov.w	fp, #0
 800d9b2:	68a3      	ldr	r3, [r4, #8]
 800d9b4:	6822      	ldr	r2, [r4, #0]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d03d      	beq.n	800da36 <_scanf_i+0x15e>
 800d9ba:	6831      	ldr	r1, [r6, #0]
 800d9bc:	6960      	ldr	r0, [r4, #20]
 800d9be:	f891 c000 	ldrb.w	ip, [r1]
 800d9c2:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d9c6:	2800      	cmp	r0, #0
 800d9c8:	d035      	beq.n	800da36 <_scanf_i+0x15e>
 800d9ca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800d9ce:	d124      	bne.n	800da1a <_scanf_i+0x142>
 800d9d0:	0510      	lsls	r0, r2, #20
 800d9d2:	d522      	bpl.n	800da1a <_scanf_i+0x142>
 800d9d4:	f10b 0b01 	add.w	fp, fp, #1
 800d9d8:	f1b9 0f00 	cmp.w	r9, #0
 800d9dc:	d003      	beq.n	800d9e6 <_scanf_i+0x10e>
 800d9de:	3301      	adds	r3, #1
 800d9e0:	f109 39ff 	add.w	r9, r9, #4294967295
 800d9e4:	60a3      	str	r3, [r4, #8]
 800d9e6:	6873      	ldr	r3, [r6, #4]
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	6073      	str	r3, [r6, #4]
 800d9ee:	dd1b      	ble.n	800da28 <_scanf_i+0x150>
 800d9f0:	6833      	ldr	r3, [r6, #0]
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	6033      	str	r3, [r6, #0]
 800d9f6:	68a3      	ldr	r3, [r4, #8]
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	60a3      	str	r3, [r4, #8]
 800d9fc:	e7d9      	b.n	800d9b2 <_scanf_i+0xda>
 800d9fe:	f1bb 0f02 	cmp.w	fp, #2
 800da02:	d1ae      	bne.n	800d962 <_scanf_i+0x8a>
 800da04:	6822      	ldr	r2, [r4, #0]
 800da06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800da0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800da0e:	d1bf      	bne.n	800d990 <_scanf_i+0xb8>
 800da10:	2310      	movs	r3, #16
 800da12:	6063      	str	r3, [r4, #4]
 800da14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800da18:	e7a2      	b.n	800d960 <_scanf_i+0x88>
 800da1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800da1e:	6022      	str	r2, [r4, #0]
 800da20:	780b      	ldrb	r3, [r1, #0]
 800da22:	f805 3b01 	strb.w	r3, [r5], #1
 800da26:	e7de      	b.n	800d9e6 <_scanf_i+0x10e>
 800da28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800da2c:	4631      	mov	r1, r6
 800da2e:	4650      	mov	r0, sl
 800da30:	4798      	blx	r3
 800da32:	2800      	cmp	r0, #0
 800da34:	d0df      	beq.n	800d9f6 <_scanf_i+0x11e>
 800da36:	6823      	ldr	r3, [r4, #0]
 800da38:	05db      	lsls	r3, r3, #23
 800da3a:	d50d      	bpl.n	800da58 <_scanf_i+0x180>
 800da3c:	42bd      	cmp	r5, r7
 800da3e:	d909      	bls.n	800da54 <_scanf_i+0x17c>
 800da40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800da44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800da48:	4632      	mov	r2, r6
 800da4a:	4650      	mov	r0, sl
 800da4c:	4798      	blx	r3
 800da4e:	f105 39ff 	add.w	r9, r5, #4294967295
 800da52:	464d      	mov	r5, r9
 800da54:	42bd      	cmp	r5, r7
 800da56:	d02d      	beq.n	800dab4 <_scanf_i+0x1dc>
 800da58:	6822      	ldr	r2, [r4, #0]
 800da5a:	f012 0210 	ands.w	r2, r2, #16
 800da5e:	d113      	bne.n	800da88 <_scanf_i+0x1b0>
 800da60:	702a      	strb	r2, [r5, #0]
 800da62:	6863      	ldr	r3, [r4, #4]
 800da64:	9e01      	ldr	r6, [sp, #4]
 800da66:	4639      	mov	r1, r7
 800da68:	4650      	mov	r0, sl
 800da6a:	47b0      	blx	r6
 800da6c:	6821      	ldr	r1, [r4, #0]
 800da6e:	f8d8 3000 	ldr.w	r3, [r8]
 800da72:	f011 0f20 	tst.w	r1, #32
 800da76:	d013      	beq.n	800daa0 <_scanf_i+0x1c8>
 800da78:	1d1a      	adds	r2, r3, #4
 800da7a:	f8c8 2000 	str.w	r2, [r8]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	6018      	str	r0, [r3, #0]
 800da82:	68e3      	ldr	r3, [r4, #12]
 800da84:	3301      	adds	r3, #1
 800da86:	60e3      	str	r3, [r4, #12]
 800da88:	1bed      	subs	r5, r5, r7
 800da8a:	44ab      	add	fp, r5
 800da8c:	6925      	ldr	r5, [r4, #16]
 800da8e:	445d      	add	r5, fp
 800da90:	6125      	str	r5, [r4, #16]
 800da92:	2000      	movs	r0, #0
 800da94:	b007      	add	sp, #28
 800da96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9a:	f04f 0b00 	mov.w	fp, #0
 800da9e:	e7ca      	b.n	800da36 <_scanf_i+0x15e>
 800daa0:	1d1a      	adds	r2, r3, #4
 800daa2:	f8c8 2000 	str.w	r2, [r8]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f011 0f01 	tst.w	r1, #1
 800daac:	bf14      	ite	ne
 800daae:	8018      	strhne	r0, [r3, #0]
 800dab0:	6018      	streq	r0, [r3, #0]
 800dab2:	e7e6      	b.n	800da82 <_scanf_i+0x1aa>
 800dab4:	2001      	movs	r0, #1
 800dab6:	e7ed      	b.n	800da94 <_scanf_i+0x1bc>
 800dab8:	0800dfdc 	.word	0x0800dfdc
 800dabc:	0800cf51 	.word	0x0800cf51
 800dac0:	0800dce9 	.word	0x0800dce9
 800dac4:	080265a1 	.word	0x080265a1

0800dac8 <_read_r>:
 800dac8:	b538      	push	{r3, r4, r5, lr}
 800daca:	4d07      	ldr	r5, [pc, #28]	; (800dae8 <_read_r+0x20>)
 800dacc:	4604      	mov	r4, r0
 800dace:	4608      	mov	r0, r1
 800dad0:	4611      	mov	r1, r2
 800dad2:	2200      	movs	r2, #0
 800dad4:	602a      	str	r2, [r5, #0]
 800dad6:	461a      	mov	r2, r3
 800dad8:	f000 f9fe 	bl	800ded8 <_read>
 800dadc:	1c43      	adds	r3, r0, #1
 800dade:	d102      	bne.n	800dae6 <_read_r+0x1e>
 800dae0:	682b      	ldr	r3, [r5, #0]
 800dae2:	b103      	cbz	r3, 800dae6 <_read_r+0x1e>
 800dae4:	6023      	str	r3, [r4, #0]
 800dae6:	bd38      	pop	{r3, r4, r5, pc}
 800dae8:	20000b54 	.word	0x20000b54

0800daec <__sccl>:
 800daec:	b570      	push	{r4, r5, r6, lr}
 800daee:	780b      	ldrb	r3, [r1, #0]
 800daf0:	4604      	mov	r4, r0
 800daf2:	2b5e      	cmp	r3, #94	; 0x5e
 800daf4:	bf0b      	itete	eq
 800daf6:	784b      	ldrbeq	r3, [r1, #1]
 800daf8:	1c48      	addne	r0, r1, #1
 800dafa:	1c88      	addeq	r0, r1, #2
 800dafc:	2200      	movne	r2, #0
 800dafe:	bf08      	it	eq
 800db00:	2201      	moveq	r2, #1
 800db02:	1e61      	subs	r1, r4, #1
 800db04:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800db08:	f801 2f01 	strb.w	r2, [r1, #1]!
 800db0c:	42a9      	cmp	r1, r5
 800db0e:	d1fb      	bne.n	800db08 <__sccl+0x1c>
 800db10:	b90b      	cbnz	r3, 800db16 <__sccl+0x2a>
 800db12:	3801      	subs	r0, #1
 800db14:	bd70      	pop	{r4, r5, r6, pc}
 800db16:	f082 0201 	eor.w	r2, r2, #1
 800db1a:	54e2      	strb	r2, [r4, r3]
 800db1c:	4605      	mov	r5, r0
 800db1e:	4628      	mov	r0, r5
 800db20:	f810 1b01 	ldrb.w	r1, [r0], #1
 800db24:	292d      	cmp	r1, #45	; 0x2d
 800db26:	d006      	beq.n	800db36 <__sccl+0x4a>
 800db28:	295d      	cmp	r1, #93	; 0x5d
 800db2a:	d0f3      	beq.n	800db14 <__sccl+0x28>
 800db2c:	b909      	cbnz	r1, 800db32 <__sccl+0x46>
 800db2e:	4628      	mov	r0, r5
 800db30:	e7f0      	b.n	800db14 <__sccl+0x28>
 800db32:	460b      	mov	r3, r1
 800db34:	e7f1      	b.n	800db1a <__sccl+0x2e>
 800db36:	786e      	ldrb	r6, [r5, #1]
 800db38:	2e5d      	cmp	r6, #93	; 0x5d
 800db3a:	d0fa      	beq.n	800db32 <__sccl+0x46>
 800db3c:	42b3      	cmp	r3, r6
 800db3e:	dcf8      	bgt.n	800db32 <__sccl+0x46>
 800db40:	3502      	adds	r5, #2
 800db42:	4619      	mov	r1, r3
 800db44:	3101      	adds	r1, #1
 800db46:	428e      	cmp	r6, r1
 800db48:	5462      	strb	r2, [r4, r1]
 800db4a:	dcfb      	bgt.n	800db44 <__sccl+0x58>
 800db4c:	1af1      	subs	r1, r6, r3
 800db4e:	3901      	subs	r1, #1
 800db50:	1c58      	adds	r0, r3, #1
 800db52:	42b3      	cmp	r3, r6
 800db54:	bfa8      	it	ge
 800db56:	2100      	movge	r1, #0
 800db58:	1843      	adds	r3, r0, r1
 800db5a:	e7e0      	b.n	800db1e <__sccl+0x32>

0800db5c <_raise_r>:
 800db5c:	291f      	cmp	r1, #31
 800db5e:	b538      	push	{r3, r4, r5, lr}
 800db60:	4604      	mov	r4, r0
 800db62:	460d      	mov	r5, r1
 800db64:	d904      	bls.n	800db70 <_raise_r+0x14>
 800db66:	2316      	movs	r3, #22
 800db68:	6003      	str	r3, [r0, #0]
 800db6a:	f04f 30ff 	mov.w	r0, #4294967295
 800db6e:	bd38      	pop	{r3, r4, r5, pc}
 800db70:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800db72:	b112      	cbz	r2, 800db7a <_raise_r+0x1e>
 800db74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db78:	b94b      	cbnz	r3, 800db8e <_raise_r+0x32>
 800db7a:	4620      	mov	r0, r4
 800db7c:	f000 f830 	bl	800dbe0 <_getpid_r>
 800db80:	462a      	mov	r2, r5
 800db82:	4601      	mov	r1, r0
 800db84:	4620      	mov	r0, r4
 800db86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db8a:	f000 b817 	b.w	800dbbc <_kill_r>
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d00a      	beq.n	800dba8 <_raise_r+0x4c>
 800db92:	1c59      	adds	r1, r3, #1
 800db94:	d103      	bne.n	800db9e <_raise_r+0x42>
 800db96:	2316      	movs	r3, #22
 800db98:	6003      	str	r3, [r0, #0]
 800db9a:	2001      	movs	r0, #1
 800db9c:	e7e7      	b.n	800db6e <_raise_r+0x12>
 800db9e:	2400      	movs	r4, #0
 800dba0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dba4:	4628      	mov	r0, r5
 800dba6:	4798      	blx	r3
 800dba8:	2000      	movs	r0, #0
 800dbaa:	e7e0      	b.n	800db6e <_raise_r+0x12>

0800dbac <raise>:
 800dbac:	4b02      	ldr	r3, [pc, #8]	; (800dbb8 <raise+0xc>)
 800dbae:	4601      	mov	r1, r0
 800dbb0:	6818      	ldr	r0, [r3, #0]
 800dbb2:	f7ff bfd3 	b.w	800db5c <_raise_r>
 800dbb6:	bf00      	nop
 800dbb8:	200000cc 	.word	0x200000cc

0800dbbc <_kill_r>:
 800dbbc:	b538      	push	{r3, r4, r5, lr}
 800dbbe:	4d07      	ldr	r5, [pc, #28]	; (800dbdc <_kill_r+0x20>)
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	4608      	mov	r0, r1
 800dbc6:	4611      	mov	r1, r2
 800dbc8:	602b      	str	r3, [r5, #0]
 800dbca:	f000 f975 	bl	800deb8 <_kill>
 800dbce:	1c43      	adds	r3, r0, #1
 800dbd0:	d102      	bne.n	800dbd8 <_kill_r+0x1c>
 800dbd2:	682b      	ldr	r3, [r5, #0]
 800dbd4:	b103      	cbz	r3, 800dbd8 <_kill_r+0x1c>
 800dbd6:	6023      	str	r3, [r4, #0]
 800dbd8:	bd38      	pop	{r3, r4, r5, pc}
 800dbda:	bf00      	nop
 800dbdc:	20000b54 	.word	0x20000b54

0800dbe0 <_getpid_r>:
 800dbe0:	f000 b952 	b.w	800de88 <_getpid>

0800dbe4 <_strtol_l.constprop.0>:
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbea:	d001      	beq.n	800dbf0 <_strtol_l.constprop.0+0xc>
 800dbec:	2b24      	cmp	r3, #36	; 0x24
 800dbee:	d906      	bls.n	800dbfe <_strtol_l.constprop.0+0x1a>
 800dbf0:	f000 f8c4 	bl	800dd7c <__errno>
 800dbf4:	2316      	movs	r3, #22
 800dbf6:	6003      	str	r3, [r0, #0]
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbfe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800dce4 <_strtol_l.constprop.0+0x100>
 800dc02:	460d      	mov	r5, r1
 800dc04:	462e      	mov	r6, r5
 800dc06:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc0a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dc0e:	f017 0708 	ands.w	r7, r7, #8
 800dc12:	d1f7      	bne.n	800dc04 <_strtol_l.constprop.0+0x20>
 800dc14:	2c2d      	cmp	r4, #45	; 0x2d
 800dc16:	d132      	bne.n	800dc7e <_strtol_l.constprop.0+0x9a>
 800dc18:	782c      	ldrb	r4, [r5, #0]
 800dc1a:	2701      	movs	r7, #1
 800dc1c:	1cb5      	adds	r5, r6, #2
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d05b      	beq.n	800dcda <_strtol_l.constprop.0+0xf6>
 800dc22:	2b10      	cmp	r3, #16
 800dc24:	d109      	bne.n	800dc3a <_strtol_l.constprop.0+0x56>
 800dc26:	2c30      	cmp	r4, #48	; 0x30
 800dc28:	d107      	bne.n	800dc3a <_strtol_l.constprop.0+0x56>
 800dc2a:	782c      	ldrb	r4, [r5, #0]
 800dc2c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dc30:	2c58      	cmp	r4, #88	; 0x58
 800dc32:	d14d      	bne.n	800dcd0 <_strtol_l.constprop.0+0xec>
 800dc34:	786c      	ldrb	r4, [r5, #1]
 800dc36:	2310      	movs	r3, #16
 800dc38:	3502      	adds	r5, #2
 800dc3a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dc3e:	f108 38ff 	add.w	r8, r8, #4294967295
 800dc42:	f04f 0c00 	mov.w	ip, #0
 800dc46:	fbb8 f9f3 	udiv	r9, r8, r3
 800dc4a:	4666      	mov	r6, ip
 800dc4c:	fb03 8a19 	mls	sl, r3, r9, r8
 800dc50:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dc54:	f1be 0f09 	cmp.w	lr, #9
 800dc58:	d816      	bhi.n	800dc88 <_strtol_l.constprop.0+0xa4>
 800dc5a:	4674      	mov	r4, lr
 800dc5c:	42a3      	cmp	r3, r4
 800dc5e:	dd24      	ble.n	800dcaa <_strtol_l.constprop.0+0xc6>
 800dc60:	f1bc 0f00 	cmp.w	ip, #0
 800dc64:	db1e      	blt.n	800dca4 <_strtol_l.constprop.0+0xc0>
 800dc66:	45b1      	cmp	r9, r6
 800dc68:	d31c      	bcc.n	800dca4 <_strtol_l.constprop.0+0xc0>
 800dc6a:	d101      	bne.n	800dc70 <_strtol_l.constprop.0+0x8c>
 800dc6c:	45a2      	cmp	sl, r4
 800dc6e:	db19      	blt.n	800dca4 <_strtol_l.constprop.0+0xc0>
 800dc70:	fb06 4603 	mla	r6, r6, r3, r4
 800dc74:	f04f 0c01 	mov.w	ip, #1
 800dc78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc7c:	e7e8      	b.n	800dc50 <_strtol_l.constprop.0+0x6c>
 800dc7e:	2c2b      	cmp	r4, #43	; 0x2b
 800dc80:	bf04      	itt	eq
 800dc82:	782c      	ldrbeq	r4, [r5, #0]
 800dc84:	1cb5      	addeq	r5, r6, #2
 800dc86:	e7ca      	b.n	800dc1e <_strtol_l.constprop.0+0x3a>
 800dc88:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dc8c:	f1be 0f19 	cmp.w	lr, #25
 800dc90:	d801      	bhi.n	800dc96 <_strtol_l.constprop.0+0xb2>
 800dc92:	3c37      	subs	r4, #55	; 0x37
 800dc94:	e7e2      	b.n	800dc5c <_strtol_l.constprop.0+0x78>
 800dc96:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dc9a:	f1be 0f19 	cmp.w	lr, #25
 800dc9e:	d804      	bhi.n	800dcaa <_strtol_l.constprop.0+0xc6>
 800dca0:	3c57      	subs	r4, #87	; 0x57
 800dca2:	e7db      	b.n	800dc5c <_strtol_l.constprop.0+0x78>
 800dca4:	f04f 3cff 	mov.w	ip, #4294967295
 800dca8:	e7e6      	b.n	800dc78 <_strtol_l.constprop.0+0x94>
 800dcaa:	f1bc 0f00 	cmp.w	ip, #0
 800dcae:	da05      	bge.n	800dcbc <_strtol_l.constprop.0+0xd8>
 800dcb0:	2322      	movs	r3, #34	; 0x22
 800dcb2:	6003      	str	r3, [r0, #0]
 800dcb4:	4646      	mov	r6, r8
 800dcb6:	b942      	cbnz	r2, 800dcca <_strtol_l.constprop.0+0xe6>
 800dcb8:	4630      	mov	r0, r6
 800dcba:	e79e      	b.n	800dbfa <_strtol_l.constprop.0+0x16>
 800dcbc:	b107      	cbz	r7, 800dcc0 <_strtol_l.constprop.0+0xdc>
 800dcbe:	4276      	negs	r6, r6
 800dcc0:	2a00      	cmp	r2, #0
 800dcc2:	d0f9      	beq.n	800dcb8 <_strtol_l.constprop.0+0xd4>
 800dcc4:	f1bc 0f00 	cmp.w	ip, #0
 800dcc8:	d000      	beq.n	800dccc <_strtol_l.constprop.0+0xe8>
 800dcca:	1e69      	subs	r1, r5, #1
 800dccc:	6011      	str	r1, [r2, #0]
 800dcce:	e7f3      	b.n	800dcb8 <_strtol_l.constprop.0+0xd4>
 800dcd0:	2430      	movs	r4, #48	; 0x30
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1b1      	bne.n	800dc3a <_strtol_l.constprop.0+0x56>
 800dcd6:	2308      	movs	r3, #8
 800dcd8:	e7af      	b.n	800dc3a <_strtol_l.constprop.0+0x56>
 800dcda:	2c30      	cmp	r4, #48	; 0x30
 800dcdc:	d0a5      	beq.n	800dc2a <_strtol_l.constprop.0+0x46>
 800dcde:	230a      	movs	r3, #10
 800dce0:	e7ab      	b.n	800dc3a <_strtol_l.constprop.0+0x56>
 800dce2:	bf00      	nop
 800dce4:	0802647e 	.word	0x0802647e

0800dce8 <_strtol_r>:
 800dce8:	f7ff bf7c 	b.w	800dbe4 <_strtol_l.constprop.0>

0800dcec <__submore>:
 800dcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcf0:	460c      	mov	r4, r1
 800dcf2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dcf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcf8:	4299      	cmp	r1, r3
 800dcfa:	d11d      	bne.n	800dd38 <__submore+0x4c>
 800dcfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800dd00:	f7fc f914 	bl	8009f2c <_malloc_r>
 800dd04:	b918      	cbnz	r0, 800dd0e <__submore+0x22>
 800dd06:	f04f 30ff 	mov.w	r0, #4294967295
 800dd0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd12:	63a3      	str	r3, [r4, #56]	; 0x38
 800dd14:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800dd18:	6360      	str	r0, [r4, #52]	; 0x34
 800dd1a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800dd1e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800dd22:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800dd26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800dd2a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800dd2e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800dd32:	6020      	str	r0, [r4, #0]
 800dd34:	2000      	movs	r0, #0
 800dd36:	e7e8      	b.n	800dd0a <__submore+0x1e>
 800dd38:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dd3a:	0077      	lsls	r7, r6, #1
 800dd3c:	463a      	mov	r2, r7
 800dd3e:	f7ff fb6f 	bl	800d420 <_realloc_r>
 800dd42:	4605      	mov	r5, r0
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d0de      	beq.n	800dd06 <__submore+0x1a>
 800dd48:	eb00 0806 	add.w	r8, r0, r6
 800dd4c:	4601      	mov	r1, r0
 800dd4e:	4632      	mov	r2, r6
 800dd50:	4640      	mov	r0, r8
 800dd52:	f7fe f972 	bl	800c03a <memcpy>
 800dd56:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dd5a:	f8c4 8000 	str.w	r8, [r4]
 800dd5e:	e7e9      	b.n	800dd34 <__submore+0x48>

0800dd60 <__ascii_wctomb>:
 800dd60:	b149      	cbz	r1, 800dd76 <__ascii_wctomb+0x16>
 800dd62:	2aff      	cmp	r2, #255	; 0xff
 800dd64:	bf85      	ittet	hi
 800dd66:	238a      	movhi	r3, #138	; 0x8a
 800dd68:	6003      	strhi	r3, [r0, #0]
 800dd6a:	700a      	strbls	r2, [r1, #0]
 800dd6c:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd70:	bf98      	it	ls
 800dd72:	2001      	movls	r0, #1
 800dd74:	4770      	bx	lr
 800dd76:	4608      	mov	r0, r1
 800dd78:	4770      	bx	lr
	...

0800dd7c <__errno>:
 800dd7c:	4b01      	ldr	r3, [pc, #4]	; (800dd84 <__errno+0x8>)
 800dd7e:	6818      	ldr	r0, [r3, #0]
 800dd80:	4770      	bx	lr
 800dd82:	bf00      	nop
 800dd84:	200000cc 	.word	0x200000cc

0800dd88 <_fstat_r>:
 800dd88:	b538      	push	{r3, r4, r5, lr}
 800dd8a:	4d07      	ldr	r5, [pc, #28]	; (800dda8 <_fstat_r+0x20>)
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	4604      	mov	r4, r0
 800dd90:	4608      	mov	r0, r1
 800dd92:	4611      	mov	r1, r2
 800dd94:	602b      	str	r3, [r5, #0]
 800dd96:	f000 f86f 	bl	800de78 <_fstat>
 800dd9a:	1c43      	adds	r3, r0, #1
 800dd9c:	d102      	bne.n	800dda4 <_fstat_r+0x1c>
 800dd9e:	682b      	ldr	r3, [r5, #0]
 800dda0:	b103      	cbz	r3, 800dda4 <_fstat_r+0x1c>
 800dda2:	6023      	str	r3, [r4, #0]
 800dda4:	bd38      	pop	{r3, r4, r5, pc}
 800dda6:	bf00      	nop
 800dda8:	20000b54 	.word	0x20000b54

0800ddac <_isatty_r>:
 800ddac:	b538      	push	{r3, r4, r5, lr}
 800ddae:	4d06      	ldr	r5, [pc, #24]	; (800ddc8 <_isatty_r+0x1c>)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	4608      	mov	r0, r1
 800ddb6:	602b      	str	r3, [r5, #0]
 800ddb8:	f000 f876 	bl	800dea8 <_isatty>
 800ddbc:	1c43      	adds	r3, r0, #1
 800ddbe:	d102      	bne.n	800ddc6 <_isatty_r+0x1a>
 800ddc0:	682b      	ldr	r3, [r5, #0]
 800ddc2:	b103      	cbz	r3, 800ddc6 <_isatty_r+0x1a>
 800ddc4:	6023      	str	r3, [r4, #0]
 800ddc6:	bd38      	pop	{r3, r4, r5, pc}
 800ddc8:	20000b54 	.word	0x20000b54

0800ddcc <_malloc_usable_size_r>:
 800ddcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddd0:	1f18      	subs	r0, r3, #4
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	bfbc      	itt	lt
 800ddd6:	580b      	ldrlt	r3, [r1, r0]
 800ddd8:	18c0      	addlt	r0, r0, r3
 800ddda:	4770      	bx	lr

0800dddc <roundf>:
 800dddc:	ee10 0a10 	vmov	r0, s0
 800dde0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800dde4:	3a7f      	subs	r2, #127	; 0x7f
 800dde6:	2a16      	cmp	r2, #22
 800dde8:	dc15      	bgt.n	800de16 <roundf+0x3a>
 800ddea:	2a00      	cmp	r2, #0
 800ddec:	da08      	bge.n	800de00 <roundf+0x24>
 800ddee:	3201      	adds	r2, #1
 800ddf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800ddf4:	d101      	bne.n	800ddfa <roundf+0x1e>
 800ddf6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800ddfa:	ee00 3a10 	vmov	s0, r3
 800ddfe:	4770      	bx	lr
 800de00:	4907      	ldr	r1, [pc, #28]	; (800de20 <roundf+0x44>)
 800de02:	4111      	asrs	r1, r2
 800de04:	4208      	tst	r0, r1
 800de06:	d0fa      	beq.n	800ddfe <roundf+0x22>
 800de08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800de0c:	4113      	asrs	r3, r2
 800de0e:	4403      	add	r3, r0
 800de10:	ea23 0301 	bic.w	r3, r3, r1
 800de14:	e7f1      	b.n	800ddfa <roundf+0x1e>
 800de16:	2a80      	cmp	r2, #128	; 0x80
 800de18:	d1f1      	bne.n	800ddfe <roundf+0x22>
 800de1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800de1e:	4770      	bx	lr
 800de20:	007fffff 	.word	0x007fffff

0800de24 <sqrtf>:
 800de24:	b508      	push	{r3, lr}
 800de26:	ed2d 8b02 	vpush	{d8}
 800de2a:	eeb0 8a40 	vmov.f32	s16, s0
 800de2e:	f000 f817 	bl	800de60 <__ieee754_sqrtf>
 800de32:	eeb4 8a48 	vcmp.f32	s16, s16
 800de36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de3a:	d60c      	bvs.n	800de56 <sqrtf+0x32>
 800de3c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800de5c <sqrtf+0x38>
 800de40:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800de44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de48:	d505      	bpl.n	800de56 <sqrtf+0x32>
 800de4a:	f7ff ff97 	bl	800dd7c <__errno>
 800de4e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800de52:	2321      	movs	r3, #33	; 0x21
 800de54:	6003      	str	r3, [r0, #0]
 800de56:	ecbd 8b02 	vpop	{d8}
 800de5a:	bd08      	pop	{r3, pc}
 800de5c:	00000000 	.word	0x00000000

0800de60 <__ieee754_sqrtf>:
 800de60:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800de64:	4770      	bx	lr
	...

0800de68 <_close>:
 800de68:	4b02      	ldr	r3, [pc, #8]	; (800de74 <_close+0xc>)
 800de6a:	2258      	movs	r2, #88	; 0x58
 800de6c:	601a      	str	r2, [r3, #0]
 800de6e:	f04f 30ff 	mov.w	r0, #4294967295
 800de72:	4770      	bx	lr
 800de74:	20000b54 	.word	0x20000b54

0800de78 <_fstat>:
 800de78:	4b02      	ldr	r3, [pc, #8]	; (800de84 <_fstat+0xc>)
 800de7a:	2258      	movs	r2, #88	; 0x58
 800de7c:	601a      	str	r2, [r3, #0]
 800de7e:	f04f 30ff 	mov.w	r0, #4294967295
 800de82:	4770      	bx	lr
 800de84:	20000b54 	.word	0x20000b54

0800de88 <_getpid>:
 800de88:	4b02      	ldr	r3, [pc, #8]	; (800de94 <_getpid+0xc>)
 800de8a:	2258      	movs	r2, #88	; 0x58
 800de8c:	601a      	str	r2, [r3, #0]
 800de8e:	f04f 30ff 	mov.w	r0, #4294967295
 800de92:	4770      	bx	lr
 800de94:	20000b54 	.word	0x20000b54

0800de98 <_gettimeofday>:
 800de98:	4b02      	ldr	r3, [pc, #8]	; (800dea4 <_gettimeofday+0xc>)
 800de9a:	2258      	movs	r2, #88	; 0x58
 800de9c:	601a      	str	r2, [r3, #0]
 800de9e:	f04f 30ff 	mov.w	r0, #4294967295
 800dea2:	4770      	bx	lr
 800dea4:	20000b54 	.word	0x20000b54

0800dea8 <_isatty>:
 800dea8:	4b02      	ldr	r3, [pc, #8]	; (800deb4 <_isatty+0xc>)
 800deaa:	2258      	movs	r2, #88	; 0x58
 800deac:	601a      	str	r2, [r3, #0]
 800deae:	2000      	movs	r0, #0
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	20000b54 	.word	0x20000b54

0800deb8 <_kill>:
 800deb8:	4b02      	ldr	r3, [pc, #8]	; (800dec4 <_kill+0xc>)
 800deba:	2258      	movs	r2, #88	; 0x58
 800debc:	601a      	str	r2, [r3, #0]
 800debe:	f04f 30ff 	mov.w	r0, #4294967295
 800dec2:	4770      	bx	lr
 800dec4:	20000b54 	.word	0x20000b54

0800dec8 <_lseek>:
 800dec8:	4b02      	ldr	r3, [pc, #8]	; (800ded4 <_lseek+0xc>)
 800deca:	2258      	movs	r2, #88	; 0x58
 800decc:	601a      	str	r2, [r3, #0]
 800dece:	f04f 30ff 	mov.w	r0, #4294967295
 800ded2:	4770      	bx	lr
 800ded4:	20000b54 	.word	0x20000b54

0800ded8 <_read>:
 800ded8:	4b02      	ldr	r3, [pc, #8]	; (800dee4 <_read+0xc>)
 800deda:	2258      	movs	r2, #88	; 0x58
 800dedc:	601a      	str	r2, [r3, #0]
 800dede:	f04f 30ff 	mov.w	r0, #4294967295
 800dee2:	4770      	bx	lr
 800dee4:	20000b54 	.word	0x20000b54

0800dee8 <_sbrk>:
 800dee8:	4a04      	ldr	r2, [pc, #16]	; (800defc <_sbrk+0x14>)
 800deea:	6811      	ldr	r1, [r2, #0]
 800deec:	4603      	mov	r3, r0
 800deee:	b909      	cbnz	r1, 800def4 <_sbrk+0xc>
 800def0:	4903      	ldr	r1, [pc, #12]	; (800df00 <_sbrk+0x18>)
 800def2:	6011      	str	r1, [r2, #0]
 800def4:	6810      	ldr	r0, [r2, #0]
 800def6:	4403      	add	r3, r0
 800def8:	6013      	str	r3, [r2, #0]
 800defa:	4770      	bx	lr
 800defc:	20000b5c 	.word	0x20000b5c
 800df00:	20000b60 	.word	0x20000b60

0800df04 <_write>:
 800df04:	4b02      	ldr	r3, [pc, #8]	; (800df10 <_write+0xc>)
 800df06:	2258      	movs	r2, #88	; 0x58
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	f04f 30ff 	mov.w	r0, #4294967295
 800df0e:	4770      	bx	lr
 800df10:	20000b54 	.word	0x20000b54

0800df14 <_exit>:
 800df14:	e7fe      	b.n	800df14 <_exit>
	...

0800df18 <_init>:
 800df18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df1a:	bf00      	nop
 800df1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df1e:	bc08      	pop	{r3}
 800df20:	469e      	mov	lr, r3
 800df22:	4770      	bx	lr

0800df24 <_fini>:
 800df24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df26:	bf00      	nop
 800df28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df2a:	bc08      	pop	{r3}
 800df2c:	469e      	mov	lr, r3
 800df2e:	4770      	bx	lr
