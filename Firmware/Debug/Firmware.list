
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ead0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000186c4  0800ec80  0800ec80  0001ec80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027344  08027344  00040300  2**0
                  CONTENTS
  4 .ARM          00000008  08027344  08027344  00037344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802734c  0802734c  00040300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802734c  0802734c  0003734c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027350  08027350  00037350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  08027354  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a0  20000300  08027654  00040300  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba0  08027654  00040ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040300  2**0
                  CONTENTS, READONLY
 12 .debug_info   000196b8  00000000  00000000  00040330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fe9  00000000  00000000  000599e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  0005d9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  0005f100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283b7  00000000  00000000  000606b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5ca  00000000  00000000  00088a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3dd1  00000000  00000000  000a5031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  00188e02  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a04  00000000  00000000  00188ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002178  00000000  00000000  001908c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000e4  00000000  00000000  00192a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001fd  00000000  00000000  00192b20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000300 	.word	0x20000300
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ec68 	.word	0x0800ec68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000304 	.word	0x20000304
 80001ec:	0800ec68 	.word	0x0800ec68

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <strcmp>:
 8000360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000364:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000368:	2a01      	cmp	r2, #1
 800036a:	bf28      	it	cs
 800036c:	429a      	cmpcs	r2, r3
 800036e:	d0f7      	beq.n	8000360 <strcmp>
 8000370:	1ad0      	subs	r0, r2, r3
 8000372:	4770      	bx	lr

08000374 <__aeabi_drsub>:
 8000374:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000378:	e002      	b.n	8000380 <__adddf3>
 800037a:	bf00      	nop

0800037c <__aeabi_dsub>:
 800037c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000380 <__adddf3>:
 8000380:	b530      	push	{r4, r5, lr}
 8000382:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000386:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800038a:	ea94 0f05 	teq	r4, r5
 800038e:	bf08      	it	eq
 8000390:	ea90 0f02 	teqeq	r0, r2
 8000394:	bf1f      	itttt	ne
 8000396:	ea54 0c00 	orrsne.w	ip, r4, r0
 800039a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a6:	f000 80e2 	beq.w	800056e <__adddf3+0x1ee>
 80003aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003b2:	bfb8      	it	lt
 80003b4:	426d      	neglt	r5, r5
 80003b6:	dd0c      	ble.n	80003d2 <__adddf3+0x52>
 80003b8:	442c      	add	r4, r5
 80003ba:	ea80 0202 	eor.w	r2, r0, r2
 80003be:	ea81 0303 	eor.w	r3, r1, r3
 80003c2:	ea82 0000 	eor.w	r0, r2, r0
 80003c6:	ea83 0101 	eor.w	r1, r3, r1
 80003ca:	ea80 0202 	eor.w	r2, r0, r2
 80003ce:	ea81 0303 	eor.w	r3, r1, r3
 80003d2:	2d36      	cmp	r5, #54	; 0x36
 80003d4:	bf88      	it	hi
 80003d6:	bd30      	pophi	{r4, r5, pc}
 80003d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x70>
 80003ea:	4240      	negs	r0, r0
 80003ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003fc:	d002      	beq.n	8000404 <__adddf3+0x84>
 80003fe:	4252      	negs	r2, r2
 8000400:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000404:	ea94 0f05 	teq	r4, r5
 8000408:	f000 80a7 	beq.w	800055a <__adddf3+0x1da>
 800040c:	f1a4 0401 	sub.w	r4, r4, #1
 8000410:	f1d5 0e20 	rsbs	lr, r5, #32
 8000414:	db0d      	blt.n	8000432 <__adddf3+0xb2>
 8000416:	fa02 fc0e 	lsl.w	ip, r2, lr
 800041a:	fa22 f205 	lsr.w	r2, r2, r5
 800041e:	1880      	adds	r0, r0, r2
 8000420:	f141 0100 	adc.w	r1, r1, #0
 8000424:	fa03 f20e 	lsl.w	r2, r3, lr
 8000428:	1880      	adds	r0, r0, r2
 800042a:	fa43 f305 	asr.w	r3, r3, r5
 800042e:	4159      	adcs	r1, r3
 8000430:	e00e      	b.n	8000450 <__adddf3+0xd0>
 8000432:	f1a5 0520 	sub.w	r5, r5, #32
 8000436:	f10e 0e20 	add.w	lr, lr, #32
 800043a:	2a01      	cmp	r2, #1
 800043c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000440:	bf28      	it	cs
 8000442:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	18c0      	adds	r0, r0, r3
 800044c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	d507      	bpl.n	8000466 <__adddf3+0xe6>
 8000456:	f04f 0e00 	mov.w	lr, #0
 800045a:	f1dc 0c00 	rsbs	ip, ip, #0
 800045e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000462:	eb6e 0101 	sbc.w	r1, lr, r1
 8000466:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800046a:	d31b      	bcc.n	80004a4 <__adddf3+0x124>
 800046c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000470:	d30c      	bcc.n	800048c <__adddf3+0x10c>
 8000472:	0849      	lsrs	r1, r1, #1
 8000474:	ea5f 0030 	movs.w	r0, r0, rrx
 8000478:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800047c:	f104 0401 	add.w	r4, r4, #1
 8000480:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000484:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000488:	f080 809a 	bcs.w	80005c0 <__adddf3+0x240>
 800048c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000490:	bf08      	it	eq
 8000492:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000496:	f150 0000 	adcs.w	r0, r0, #0
 800049a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049e:	ea41 0105 	orr.w	r1, r1, r5
 80004a2:	bd30      	pop	{r4, r5, pc}
 80004a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a8:	4140      	adcs	r0, r0
 80004aa:	eb41 0101 	adc.w	r1, r1, r1
 80004ae:	3c01      	subs	r4, #1
 80004b0:	bf28      	it	cs
 80004b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b6:	d2e9      	bcs.n	800048c <__adddf3+0x10c>
 80004b8:	f091 0f00 	teq	r1, #0
 80004bc:	bf04      	itt	eq
 80004be:	4601      	moveq	r1, r0
 80004c0:	2000      	moveq	r0, #0
 80004c2:	fab1 f381 	clz	r3, r1
 80004c6:	bf08      	it	eq
 80004c8:	3320      	addeq	r3, #32
 80004ca:	f1a3 030b 	sub.w	r3, r3, #11
 80004ce:	f1b3 0220 	subs.w	r2, r3, #32
 80004d2:	da0c      	bge.n	80004ee <__adddf3+0x16e>
 80004d4:	320c      	adds	r2, #12
 80004d6:	dd08      	ble.n	80004ea <__adddf3+0x16a>
 80004d8:	f102 0c14 	add.w	ip, r2, #20
 80004dc:	f1c2 020c 	rsb	r2, r2, #12
 80004e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e4:	fa21 f102 	lsr.w	r1, r1, r2
 80004e8:	e00c      	b.n	8000504 <__adddf3+0x184>
 80004ea:	f102 0214 	add.w	r2, r2, #20
 80004ee:	bfd8      	it	le
 80004f0:	f1c2 0c20 	rsble	ip, r2, #32
 80004f4:	fa01 f102 	lsl.w	r1, r1, r2
 80004f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004fc:	bfdc      	itt	le
 80004fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000502:	4090      	lslle	r0, r2
 8000504:	1ae4      	subs	r4, r4, r3
 8000506:	bfa2      	ittt	ge
 8000508:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800050c:	4329      	orrge	r1, r5
 800050e:	bd30      	popge	{r4, r5, pc}
 8000510:	ea6f 0404 	mvn.w	r4, r4
 8000514:	3c1f      	subs	r4, #31
 8000516:	da1c      	bge.n	8000552 <__adddf3+0x1d2>
 8000518:	340c      	adds	r4, #12
 800051a:	dc0e      	bgt.n	800053a <__adddf3+0x1ba>
 800051c:	f104 0414 	add.w	r4, r4, #20
 8000520:	f1c4 0220 	rsb	r2, r4, #32
 8000524:	fa20 f004 	lsr.w	r0, r0, r4
 8000528:	fa01 f302 	lsl.w	r3, r1, r2
 800052c:	ea40 0003 	orr.w	r0, r0, r3
 8000530:	fa21 f304 	lsr.w	r3, r1, r4
 8000534:	ea45 0103 	orr.w	r1, r5, r3
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	f1c4 040c 	rsb	r4, r4, #12
 800053e:	f1c4 0220 	rsb	r2, r4, #32
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 f304 	lsl.w	r3, r1, r4
 800054a:	ea40 0003 	orr.w	r0, r0, r3
 800054e:	4629      	mov	r1, r5
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	fa21 f004 	lsr.w	r0, r1, r4
 8000556:	4629      	mov	r1, r5
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	f094 0f00 	teq	r4, #0
 800055e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000562:	bf06      	itte	eq
 8000564:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000568:	3401      	addeq	r4, #1
 800056a:	3d01      	subne	r5, #1
 800056c:	e74e      	b.n	800040c <__adddf3+0x8c>
 800056e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000572:	bf18      	it	ne
 8000574:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000578:	d029      	beq.n	80005ce <__adddf3+0x24e>
 800057a:	ea94 0f05 	teq	r4, r5
 800057e:	bf08      	it	eq
 8000580:	ea90 0f02 	teqeq	r0, r2
 8000584:	d005      	beq.n	8000592 <__adddf3+0x212>
 8000586:	ea54 0c00 	orrs.w	ip, r4, r0
 800058a:	bf04      	itt	eq
 800058c:	4619      	moveq	r1, r3
 800058e:	4610      	moveq	r0, r2
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	ea91 0f03 	teq	r1, r3
 8000596:	bf1e      	ittt	ne
 8000598:	2100      	movne	r1, #0
 800059a:	2000      	movne	r0, #0
 800059c:	bd30      	popne	{r4, r5, pc}
 800059e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005a2:	d105      	bne.n	80005b0 <__adddf3+0x230>
 80005a4:	0040      	lsls	r0, r0, #1
 80005a6:	4149      	adcs	r1, r1
 80005a8:	bf28      	it	cs
 80005aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd30      	pop	{r4, r5, pc}
 80005b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b4:	bf3c      	itt	cc
 80005b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005ba:	bd30      	popcc	{r4, r5, pc}
 80005bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c8:	f04f 0000 	mov.w	r0, #0
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005d2:	bf1a      	itte	ne
 80005d4:	4619      	movne	r1, r3
 80005d6:	4610      	movne	r0, r2
 80005d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005dc:	bf1c      	itt	ne
 80005de:	460b      	movne	r3, r1
 80005e0:	4602      	movne	r2, r0
 80005e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e6:	bf06      	itte	eq
 80005e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005ec:	ea91 0f03 	teqeq	r1, r3
 80005f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f4:	bd30      	pop	{r4, r5, pc}
 80005f6:	bf00      	nop

080005f8 <__aeabi_ui2d>:
 80005f8:	f090 0f00 	teq	r0, #0
 80005fc:	bf04      	itt	eq
 80005fe:	2100      	moveq	r1, #0
 8000600:	4770      	bxeq	lr
 8000602:	b530      	push	{r4, r5, lr}
 8000604:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000608:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060c:	f04f 0500 	mov.w	r5, #0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e750      	b.n	80004b8 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_i2d>:
 8000618:	f090 0f00 	teq	r0, #0
 800061c:	bf04      	itt	eq
 800061e:	2100      	moveq	r1, #0
 8000620:	4770      	bxeq	lr
 8000622:	b530      	push	{r4, r5, lr}
 8000624:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000628:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000630:	bf48      	it	mi
 8000632:	4240      	negmi	r0, r0
 8000634:	f04f 0100 	mov.w	r1, #0
 8000638:	e73e      	b.n	80004b8 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_f2d>:
 800063c:	0042      	lsls	r2, r0, #1
 800063e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000642:	ea4f 0131 	mov.w	r1, r1, rrx
 8000646:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800064a:	bf1f      	itttt	ne
 800064c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000650:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000654:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000658:	4770      	bxne	lr
 800065a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065e:	bf08      	it	eq
 8000660:	4770      	bxeq	lr
 8000662:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000666:	bf04      	itt	eq
 8000668:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	e71c      	b.n	80004b8 <__adddf3+0x138>
 800067e:	bf00      	nop

08000680 <__aeabi_ul2d>:
 8000680:	ea50 0201 	orrs.w	r2, r0, r1
 8000684:	bf08      	it	eq
 8000686:	4770      	bxeq	lr
 8000688:	b530      	push	{r4, r5, lr}
 800068a:	f04f 0500 	mov.w	r5, #0
 800068e:	e00a      	b.n	80006a6 <__aeabi_l2d+0x16>

08000690 <__aeabi_l2d>:
 8000690:	ea50 0201 	orrs.w	r2, r0, r1
 8000694:	bf08      	it	eq
 8000696:	4770      	bxeq	lr
 8000698:	b530      	push	{r4, r5, lr}
 800069a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069e:	d502      	bpl.n	80006a6 <__aeabi_l2d+0x16>
 80006a0:	4240      	negs	r0, r0
 80006a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006b2:	f43f aed8 	beq.w	8000466 <__adddf3+0xe6>
 80006b6:	f04f 0203 	mov.w	r2, #3
 80006ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006be:	bf18      	it	ne
 80006c0:	3203      	addne	r2, #3
 80006c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c6:	bf18      	it	ne
 80006c8:	3203      	addne	r2, #3
 80006ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ce:	f1c2 0320 	rsb	r3, r2, #32
 80006d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d6:	fa20 f002 	lsr.w	r0, r0, r2
 80006da:	fa01 fe03 	lsl.w	lr, r1, r3
 80006de:	ea40 000e 	orr.w	r0, r0, lr
 80006e2:	fa21 f102 	lsr.w	r1, r1, r2
 80006e6:	4414      	add	r4, r2
 80006e8:	e6bd      	b.n	8000466 <__adddf3+0xe6>
 80006ea:	bf00      	nop

080006ec <__aeabi_dmul>:
 80006ec:	b570      	push	{r4, r5, r6, lr}
 80006ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006fa:	bf1d      	ittte	ne
 80006fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000700:	ea94 0f0c 	teqne	r4, ip
 8000704:	ea95 0f0c 	teqne	r5, ip
 8000708:	f000 f8de 	bleq	80008c8 <__aeabi_dmul+0x1dc>
 800070c:	442c      	add	r4, r5
 800070e:	ea81 0603 	eor.w	r6, r1, r3
 8000712:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000716:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800071a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071e:	bf18      	it	ne
 8000720:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800072c:	d038      	beq.n	80007a0 <__aeabi_dmul+0xb4>
 800072e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	fbe1 e502 	umlal	lr, r5, r1, r2
 800073a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000742:	f04f 0600 	mov.w	r6, #0
 8000746:	fbe1 5603 	umlal	r5, r6, r1, r3
 800074a:	f09c 0f00 	teq	ip, #0
 800074e:	bf18      	it	ne
 8000750:	f04e 0e01 	orrne.w	lr, lr, #1
 8000754:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000758:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800075c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000760:	d204      	bcs.n	800076c <__aeabi_dmul+0x80>
 8000762:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000766:	416d      	adcs	r5, r5
 8000768:	eb46 0606 	adc.w	r6, r6, r6
 800076c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000770:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000774:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000778:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800077c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000780:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000784:	bf88      	it	hi
 8000786:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800078a:	d81e      	bhi.n	80007ca <__aeabi_dmul+0xde>
 800078c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000790:	bf08      	it	eq
 8000792:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000796:	f150 0000 	adcs.w	r0, r0, #0
 800079a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a4:	ea46 0101 	orr.w	r1, r6, r1
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b4:	bfc2      	ittt	gt
 80007b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007be:	bd70      	popgt	{r4, r5, r6, pc}
 80007c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c4:	f04f 0e00 	mov.w	lr, #0
 80007c8:	3c01      	subs	r4, #1
 80007ca:	f300 80ab 	bgt.w	8000924 <__aeabi_dmul+0x238>
 80007ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007d2:	bfde      	ittt	le
 80007d4:	2000      	movle	r0, #0
 80007d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007da:	bd70      	pople	{r4, r5, r6, pc}
 80007dc:	f1c4 0400 	rsb	r4, r4, #0
 80007e0:	3c20      	subs	r4, #32
 80007e2:	da35      	bge.n	8000850 <__aeabi_dmul+0x164>
 80007e4:	340c      	adds	r4, #12
 80007e6:	dc1b      	bgt.n	8000820 <__aeabi_dmul+0x134>
 80007e8:	f104 0414 	add.w	r4, r4, #20
 80007ec:	f1c4 0520 	rsb	r5, r4, #32
 80007f0:	fa00 f305 	lsl.w	r3, r0, r5
 80007f4:	fa20 f004 	lsr.w	r0, r0, r4
 80007f8:	fa01 f205 	lsl.w	r2, r1, r5
 80007fc:	ea40 0002 	orr.w	r0, r0, r2
 8000800:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000804:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	fa21 f604 	lsr.w	r6, r1, r4
 8000810:	eb42 0106 	adc.w	r1, r2, r6
 8000814:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000818:	bf08      	it	eq
 800081a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	f1c4 040c 	rsb	r4, r4, #12
 8000824:	f1c4 0520 	rsb	r5, r4, #32
 8000828:	fa00 f304 	lsl.w	r3, r0, r4
 800082c:	fa20 f005 	lsr.w	r0, r0, r5
 8000830:	fa01 f204 	lsl.w	r2, r1, r4
 8000834:	ea40 0002 	orr.w	r0, r0, r2
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000840:	f141 0100 	adc.w	r1, r1, #0
 8000844:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000848:	bf08      	it	eq
 800084a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084e:	bd70      	pop	{r4, r5, r6, pc}
 8000850:	f1c4 0520 	rsb	r5, r4, #32
 8000854:	fa00 f205 	lsl.w	r2, r0, r5
 8000858:	ea4e 0e02 	orr.w	lr, lr, r2
 800085c:	fa20 f304 	lsr.w	r3, r0, r4
 8000860:	fa01 f205 	lsl.w	r2, r1, r5
 8000864:	ea43 0302 	orr.w	r3, r3, r2
 8000868:	fa21 f004 	lsr.w	r0, r1, r4
 800086c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000870:	fa21 f204 	lsr.w	r2, r1, r4
 8000874:	ea20 0002 	bic.w	r0, r0, r2
 8000878:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800087c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000880:	bf08      	it	eq
 8000882:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000886:	bd70      	pop	{r4, r5, r6, pc}
 8000888:	f094 0f00 	teq	r4, #0
 800088c:	d10f      	bne.n	80008ae <__aeabi_dmul+0x1c2>
 800088e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000892:	0040      	lsls	r0, r0, #1
 8000894:	eb41 0101 	adc.w	r1, r1, r1
 8000898:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800089c:	bf08      	it	eq
 800089e:	3c01      	subeq	r4, #1
 80008a0:	d0f7      	beq.n	8000892 <__aeabi_dmul+0x1a6>
 80008a2:	ea41 0106 	orr.w	r1, r1, r6
 80008a6:	f095 0f00 	teq	r5, #0
 80008aa:	bf18      	it	ne
 80008ac:	4770      	bxne	lr
 80008ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008b2:	0052      	lsls	r2, r2, #1
 80008b4:	eb43 0303 	adc.w	r3, r3, r3
 80008b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008bc:	bf08      	it	eq
 80008be:	3d01      	subeq	r5, #1
 80008c0:	d0f7      	beq.n	80008b2 <__aeabi_dmul+0x1c6>
 80008c2:	ea43 0306 	orr.w	r3, r3, r6
 80008c6:	4770      	bx	lr
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d0:	bf18      	it	ne
 80008d2:	ea95 0f0c 	teqne	r5, ip
 80008d6:	d00c      	beq.n	80008f2 <__aeabi_dmul+0x206>
 80008d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008dc:	bf18      	it	ne
 80008de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e2:	d1d1      	bne.n	8000888 <__aeabi_dmul+0x19c>
 80008e4:	ea81 0103 	eor.w	r1, r1, r3
 80008e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f6:	bf06      	itte	eq
 80008f8:	4610      	moveq	r0, r2
 80008fa:	4619      	moveq	r1, r3
 80008fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000900:	d019      	beq.n	8000936 <__aeabi_dmul+0x24a>
 8000902:	ea94 0f0c 	teq	r4, ip
 8000906:	d102      	bne.n	800090e <__aeabi_dmul+0x222>
 8000908:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800090c:	d113      	bne.n	8000936 <__aeabi_dmul+0x24a>
 800090e:	ea95 0f0c 	teq	r5, ip
 8000912:	d105      	bne.n	8000920 <__aeabi_dmul+0x234>
 8000914:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000918:	bf1c      	itt	ne
 800091a:	4610      	movne	r0, r2
 800091c:	4619      	movne	r1, r3
 800091e:	d10a      	bne.n	8000936 <__aeabi_dmul+0x24a>
 8000920:	ea81 0103 	eor.w	r1, r1, r3
 8000924:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000928:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800092c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	bd70      	pop	{r4, r5, r6, pc}
 8000936:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800093a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093e:	bd70      	pop	{r4, r5, r6, pc}

08000940 <__aeabi_ddiv>:
 8000940:	b570      	push	{r4, r5, r6, lr}
 8000942:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000946:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800094a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094e:	bf1d      	ittte	ne
 8000950:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000954:	ea94 0f0c 	teqne	r4, ip
 8000958:	ea95 0f0c 	teqne	r5, ip
 800095c:	f000 f8a7 	bleq	8000aae <__aeabi_ddiv+0x16e>
 8000960:	eba4 0405 	sub.w	r4, r4, r5
 8000964:	ea81 0e03 	eor.w	lr, r1, r3
 8000968:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000970:	f000 8088 	beq.w	8000a84 <__aeabi_ddiv+0x144>
 8000974:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000978:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800097c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000980:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000984:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000988:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800098c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000990:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000994:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000998:	429d      	cmp	r5, r3
 800099a:	bf08      	it	eq
 800099c:	4296      	cmpeq	r6, r2
 800099e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a6:	d202      	bcs.n	80009ae <__aeabi_ddiv+0x6e>
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	1ab6      	subs	r6, r6, r2
 80009b0:	eb65 0503 	sbc.w	r5, r5, r3
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ca:	bf22      	ittt	cs
 80009cc:	1ab6      	subcs	r6, r6, r2
 80009ce:	4675      	movcs	r5, lr
 80009d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009da:	ebb6 0e02 	subs.w	lr, r6, r2
 80009de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e2:	bf22      	ittt	cs
 80009e4:	1ab6      	subcs	r6, r6, r2
 80009e6:	4675      	movcs	r5, lr
 80009e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ec:	085b      	lsrs	r3, r3, #1
 80009ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fa:	bf22      	ittt	cs
 80009fc:	1ab6      	subcs	r6, r6, r2
 80009fe:	4675      	movcs	r5, lr
 8000a00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a04:	085b      	lsrs	r3, r3, #1
 8000a06:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a12:	bf22      	ittt	cs
 8000a14:	1ab6      	subcs	r6, r6, r2
 8000a16:	4675      	movcs	r5, lr
 8000a18:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a1c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a20:	d018      	beq.n	8000a54 <__aeabi_ddiv+0x114>
 8000a22:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a26:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a2a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a32:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a36:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a3a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3e:	d1c0      	bne.n	80009c2 <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	d10b      	bne.n	8000a5e <__aeabi_ddiv+0x11e>
 8000a46:	ea41 0100 	orr.w	r1, r1, r0
 8000a4a:	f04f 0000 	mov.w	r0, #0
 8000a4e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a52:	e7b6      	b.n	80009c2 <__aeabi_ddiv+0x82>
 8000a54:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a58:	bf04      	itt	eq
 8000a5a:	4301      	orreq	r1, r0
 8000a5c:	2000      	moveq	r0, #0
 8000a5e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a62:	bf88      	it	hi
 8000a64:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a68:	f63f aeaf 	bhi.w	80007ca <__aeabi_dmul+0xde>
 8000a6c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a70:	bf04      	itt	eq
 8000a72:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a76:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a7a:	f150 0000 	adcs.w	r0, r0, #0
 8000a7e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a82:	bd70      	pop	{r4, r5, r6, pc}
 8000a84:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a88:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a8c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a90:	bfc2      	ittt	gt
 8000a92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a9a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa0:	f04f 0e00 	mov.w	lr, #0
 8000aa4:	3c01      	subs	r4, #1
 8000aa6:	e690      	b.n	80007ca <__aeabi_dmul+0xde>
 8000aa8:	ea45 0e06 	orr.w	lr, r5, r6
 8000aac:	e68d      	b.n	80007ca <__aeabi_dmul+0xde>
 8000aae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ab2:	ea94 0f0c 	teq	r4, ip
 8000ab6:	bf08      	it	eq
 8000ab8:	ea95 0f0c 	teqeq	r5, ip
 8000abc:	f43f af3b 	beq.w	8000936 <__aeabi_dmul+0x24a>
 8000ac0:	ea94 0f0c 	teq	r4, ip
 8000ac4:	d10a      	bne.n	8000adc <__aeabi_ddiv+0x19c>
 8000ac6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aca:	f47f af34 	bne.w	8000936 <__aeabi_dmul+0x24a>
 8000ace:	ea95 0f0c 	teq	r5, ip
 8000ad2:	f47f af25 	bne.w	8000920 <__aeabi_dmul+0x234>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e72c      	b.n	8000936 <__aeabi_dmul+0x24a>
 8000adc:	ea95 0f0c 	teq	r5, ip
 8000ae0:	d106      	bne.n	8000af0 <__aeabi_ddiv+0x1b0>
 8000ae2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae6:	f43f aefd 	beq.w	80008e4 <__aeabi_dmul+0x1f8>
 8000aea:	4610      	mov	r0, r2
 8000aec:	4619      	mov	r1, r3
 8000aee:	e722      	b.n	8000936 <__aeabi_dmul+0x24a>
 8000af0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af4:	bf18      	it	ne
 8000af6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000afa:	f47f aec5 	bne.w	8000888 <__aeabi_dmul+0x19c>
 8000afe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b02:	f47f af0d 	bne.w	8000920 <__aeabi_dmul+0x234>
 8000b06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b0a:	f47f aeeb 	bne.w	80008e4 <__aeabi_dmul+0x1f8>
 8000b0e:	e712      	b.n	8000936 <__aeabi_dmul+0x24a>

08000b10 <__gedf2>:
 8000b10:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b14:	e006      	b.n	8000b24 <__cmpdf2+0x4>
 8000b16:	bf00      	nop

08000b18 <__ledf2>:
 8000b18:	f04f 0c01 	mov.w	ip, #1
 8000b1c:	e002      	b.n	8000b24 <__cmpdf2+0x4>
 8000b1e:	bf00      	nop

08000b20 <__cmpdf2>:
 8000b20:	f04f 0c01 	mov.w	ip, #1
 8000b24:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	bf18      	it	ne
 8000b36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b3a:	d01b      	beq.n	8000b74 <__cmpdf2+0x54>
 8000b3c:	b001      	add	sp, #4
 8000b3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b42:	bf0c      	ite	eq
 8000b44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b48:	ea91 0f03 	teqne	r1, r3
 8000b4c:	bf02      	ittt	eq
 8000b4e:	ea90 0f02 	teqeq	r0, r2
 8000b52:	2000      	moveq	r0, #0
 8000b54:	4770      	bxeq	lr
 8000b56:	f110 0f00 	cmn.w	r0, #0
 8000b5a:	ea91 0f03 	teq	r1, r3
 8000b5e:	bf58      	it	pl
 8000b60:	4299      	cmppl	r1, r3
 8000b62:	bf08      	it	eq
 8000b64:	4290      	cmpeq	r0, r2
 8000b66:	bf2c      	ite	cs
 8000b68:	17d8      	asrcs	r0, r3, #31
 8000b6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6e:	f040 0001 	orr.w	r0, r0, #1
 8000b72:	4770      	bx	lr
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__cmpdf2+0x64>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d107      	bne.n	8000b94 <__cmpdf2+0x74>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d1d6      	bne.n	8000b3c <__cmpdf2+0x1c>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d0d3      	beq.n	8000b3c <__cmpdf2+0x1c>
 8000b94:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_cdrcmple>:
 8000b9c:	4684      	mov	ip, r0
 8000b9e:	4610      	mov	r0, r2
 8000ba0:	4662      	mov	r2, ip
 8000ba2:	468c      	mov	ip, r1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4663      	mov	r3, ip
 8000ba8:	e000      	b.n	8000bac <__aeabi_cdcmpeq>
 8000baa:	bf00      	nop

08000bac <__aeabi_cdcmpeq>:
 8000bac:	b501      	push	{r0, lr}
 8000bae:	f7ff ffb7 	bl	8000b20 <__cmpdf2>
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	bf48      	it	mi
 8000bb6:	f110 0f00 	cmnmi.w	r0, #0
 8000bba:	bd01      	pop	{r0, pc}

08000bbc <__aeabi_dcmpeq>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff fff4 	bl	8000bac <__aeabi_cdcmpeq>
 8000bc4:	bf0c      	ite	eq
 8000bc6:	2001      	moveq	r0, #1
 8000bc8:	2000      	movne	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmplt>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffea 	bl	8000bac <__aeabi_cdcmpeq>
 8000bd8:	bf34      	ite	cc
 8000bda:	2001      	movcc	r0, #1
 8000bdc:	2000      	movcs	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmple>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffe0 	bl	8000bac <__aeabi_cdcmpeq>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpge>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffce 	bl	8000b9c <__aeabi_cdrcmple>
 8000c00:	bf94      	ite	ls
 8000c02:	2001      	movls	r0, #1
 8000c04:	2000      	movhi	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpgt>:
 8000c0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c10:	f7ff ffc4 	bl	8000b9c <__aeabi_cdrcmple>
 8000c14:	bf34      	ite	cc
 8000c16:	2001      	movcc	r0, #1
 8000c18:	2000      	movcs	r0, #0
 8000c1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1e:	bf00      	nop

08000c20 <__aeabi_dcmpun>:
 8000c20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c28:	d102      	bne.n	8000c30 <__aeabi_dcmpun+0x10>
 8000c2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2e:	d10a      	bne.n	8000c46 <__aeabi_dcmpun+0x26>
 8000c30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c38:	d102      	bne.n	8000c40 <__aeabi_dcmpun+0x20>
 8000c3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3e:	d102      	bne.n	8000c46 <__aeabi_dcmpun+0x26>
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	f04f 0001 	mov.w	r0, #1
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2iz>:
 8000c4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c54:	d215      	bcs.n	8000c82 <__aeabi_d2iz+0x36>
 8000c56:	d511      	bpl.n	8000c7c <__aeabi_d2iz+0x30>
 8000c58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c60:	d912      	bls.n	8000c88 <__aeabi_d2iz+0x3c>
 8000c62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c72:	fa23 f002 	lsr.w	r0, r3, r2
 8000c76:	bf18      	it	ne
 8000c78:	4240      	negne	r0, r0
 8000c7a:	4770      	bx	lr
 8000c7c:	f04f 0000 	mov.w	r0, #0
 8000c80:	4770      	bx	lr
 8000c82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c86:	d105      	bne.n	8000c94 <__aeabi_d2iz+0x48>
 8000c88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c92:	4770      	bx	lr
 8000c94:	f04f 0000 	mov.w	r0, #0
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2f>:
 8000c9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ca0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ca4:	bf24      	itt	cs
 8000ca6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000caa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cae:	d90d      	bls.n	8000ccc <__aeabi_d2f+0x30>
 8000cb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cc4:	bf08      	it	eq
 8000cc6:	f020 0001 	biceq.w	r0, r0, #1
 8000cca:	4770      	bx	lr
 8000ccc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cd0:	d121      	bne.n	8000d16 <__aeabi_d2f+0x7a>
 8000cd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cd6:	bfbc      	itt	lt
 8000cd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	4770      	bxlt	lr
 8000cde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ce2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ce6:	f1c2 0218 	rsb	r2, r2, #24
 8000cea:	f1c2 0c20 	rsb	ip, r2, #32
 8000cee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000cf6:	bf18      	it	ne
 8000cf8:	f040 0001 	orrne.w	r0, r0, #1
 8000cfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d08:	ea40 000c 	orr.w	r0, r0, ip
 8000d0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000d10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d14:	e7cc      	b.n	8000cb0 <__aeabi_d2f+0x14>
 8000d16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d1a:	d107      	bne.n	8000d2c <__aeabi_d2f+0x90>
 8000d1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d20:	bf1e      	ittt	ne
 8000d22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d2a:	4770      	bxne	lr
 8000d2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <__aeabi_ldivmod>:
 8000d3c:	b97b      	cbnz	r3, 8000d5e <__aeabi_ldivmod+0x22>
 8000d3e:	b972      	cbnz	r2, 8000d5e <__aeabi_ldivmod+0x22>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bfbe      	ittt	lt
 8000d44:	2000      	movlt	r0, #0
 8000d46:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000d4a:	e006      	blt.n	8000d5a <__aeabi_ldivmod+0x1e>
 8000d4c:	bf08      	it	eq
 8000d4e:	2800      	cmpeq	r0, #0
 8000d50:	bf1c      	itt	ne
 8000d52:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000d56:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d5a:	f000 b9bf 	b.w	80010dc <__aeabi_idiv0>
 8000d5e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d62:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d66:	2900      	cmp	r1, #0
 8000d68:	db09      	blt.n	8000d7e <__aeabi_ldivmod+0x42>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db1a      	blt.n	8000da4 <__aeabi_ldivmod+0x68>
 8000d6e:	f000 f84d 	bl	8000e0c <__udivmoddi4>
 8000d72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7a:	b004      	add	sp, #16
 8000d7c:	4770      	bx	lr
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db1b      	blt.n	8000dc0 <__aeabi_ldivmod+0x84>
 8000d88:	f000 f840 	bl	8000e0c <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	4252      	negs	r2, r2
 8000d9e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000da2:	4770      	bx	lr
 8000da4:	4252      	negs	r2, r2
 8000da6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000daa:	f000 f82f 	bl	8000e0c <__udivmoddi4>
 8000dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db6:	b004      	add	sp, #16
 8000db8:	4240      	negs	r0, r0
 8000dba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dbe:	4770      	bx	lr
 8000dc0:	4252      	negs	r2, r2
 8000dc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dc6:	f000 f821 	bl	8000e0c <__udivmoddi4>
 8000dca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd2:	b004      	add	sp, #16
 8000dd4:	4252      	negs	r2, r2
 8000dd6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dda:	4770      	bx	lr

08000ddc <__aeabi_uldivmod>:
 8000ddc:	b953      	cbnz	r3, 8000df4 <__aeabi_uldivmod+0x18>
 8000dde:	b94a      	cbnz	r2, 8000df4 <__aeabi_uldivmod+0x18>
 8000de0:	2900      	cmp	r1, #0
 8000de2:	bf08      	it	eq
 8000de4:	2800      	cmpeq	r0, #0
 8000de6:	bf1c      	itt	ne
 8000de8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000dec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000df0:	f000 b974 	b.w	80010dc <__aeabi_idiv0>
 8000df4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000df8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dfc:	f000 f806 	bl	8000e0c <__udivmoddi4>
 8000e00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e08:	b004      	add	sp, #16
 8000e0a:	4770      	bx	lr

08000e0c <__udivmoddi4>:
 8000e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e10:	9d08      	ldr	r5, [sp, #32]
 8000e12:	4604      	mov	r4, r0
 8000e14:	468e      	mov	lr, r1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d14d      	bne.n	8000eb6 <__udivmoddi4+0xaa>
 8000e1a:	428a      	cmp	r2, r1
 8000e1c:	4694      	mov	ip, r2
 8000e1e:	d969      	bls.n	8000ef4 <__udivmoddi4+0xe8>
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	b152      	cbz	r2, 8000e3c <__udivmoddi4+0x30>
 8000e26:	fa01 f302 	lsl.w	r3, r1, r2
 8000e2a:	f1c2 0120 	rsb	r1, r2, #32
 8000e2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000e32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e36:	ea41 0e03 	orr.w	lr, r1, r3
 8000e3a:	4094      	lsls	r4, r2
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	0c21      	lsrs	r1, r4, #16
 8000e42:	fbbe f6f8 	udiv	r6, lr, r8
 8000e46:	fa1f f78c 	uxth.w	r7, ip
 8000e4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e52:	fb06 f107 	mul.w	r1, r6, r7
 8000e56:	4299      	cmp	r1, r3
 8000e58:	d90a      	bls.n	8000e70 <__udivmoddi4+0x64>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000e62:	f080 811f 	bcs.w	80010a4 <__udivmoddi4+0x298>
 8000e66:	4299      	cmp	r1, r3
 8000e68:	f240 811c 	bls.w	80010a4 <__udivmoddi4+0x298>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e78:	fb08 3310 	mls	r3, r8, r0, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb00 f707 	mul.w	r7, r0, r7
 8000e84:	42a7      	cmp	r7, r4
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x92>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e90:	f080 810a 	bcs.w	80010a8 <__udivmoddi4+0x29c>
 8000e94:	42a7      	cmp	r7, r4
 8000e96:	f240 8107 	bls.w	80010a8 <__udivmoddi4+0x29c>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	1be4      	subs	r4, r4, r7
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	b11d      	cbz	r5, 8000eb0 <__udivmoddi4+0xa4>
 8000ea8:	40d4      	lsrs	r4, r2
 8000eaa:	2300      	movs	r3, #0
 8000eac:	e9c5 4300 	strd	r4, r3, [r5]
 8000eb0:	4631      	mov	r1, r6
 8000eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d909      	bls.n	8000ece <__udivmoddi4+0xc2>
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	f000 80ef 	beq.w	800109e <__udivmoddi4+0x292>
 8000ec0:	2600      	movs	r6, #0
 8000ec2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	4631      	mov	r1, r6
 8000eca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ece:	fab3 f683 	clz	r6, r3
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d14a      	bne.n	8000f6c <__udivmoddi4+0x160>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d302      	bcc.n	8000ee0 <__udivmoddi4+0xd4>
 8000eda:	4282      	cmp	r2, r0
 8000edc:	f200 80f9 	bhi.w	80010d2 <__udivmoddi4+0x2c6>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	469e      	mov	lr, r3
 8000eea:	2d00      	cmp	r5, #0
 8000eec:	d0e0      	beq.n	8000eb0 <__udivmoddi4+0xa4>
 8000eee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ef2:	e7dd      	b.n	8000eb0 <__udivmoddi4+0xa4>
 8000ef4:	b902      	cbnz	r2, 8000ef8 <__udivmoddi4+0xec>
 8000ef6:	deff      	udf	#255	; 0xff
 8000ef8:	fab2 f282 	clz	r2, r2
 8000efc:	2a00      	cmp	r2, #0
 8000efe:	f040 8092 	bne.w	8001026 <__udivmoddi4+0x21a>
 8000f02:	eba1 010c 	sub.w	r1, r1, ip
 8000f06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f0a:	fa1f fe8c 	uxth.w	lr, ip
 8000f0e:	2601      	movs	r6, #1
 8000f10:	0c20      	lsrs	r0, r4, #16
 8000f12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000f16:	fb07 1113 	mls	r1, r7, r3, r1
 8000f1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f1e:	fb0e f003 	mul.w	r0, lr, r3
 8000f22:	4288      	cmp	r0, r1
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x12c>
 8000f26:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000f2e:	d202      	bcs.n	8000f36 <__udivmoddi4+0x12a>
 8000f30:	4288      	cmp	r0, r1
 8000f32:	f200 80cb 	bhi.w	80010cc <__udivmoddi4+0x2c0>
 8000f36:	4643      	mov	r3, r8
 8000f38:	1a09      	subs	r1, r1, r0
 8000f3a:	b2a4      	uxth	r4, r4
 8000f3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f40:	fb07 1110 	mls	r1, r7, r0, r1
 8000f44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f48:	fb0e fe00 	mul.w	lr, lr, r0
 8000f4c:	45a6      	cmp	lr, r4
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x156>
 8000f50:	eb1c 0404 	adds.w	r4, ip, r4
 8000f54:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f58:	d202      	bcs.n	8000f60 <__udivmoddi4+0x154>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f200 80bb 	bhi.w	80010d6 <__udivmoddi4+0x2ca>
 8000f60:	4608      	mov	r0, r1
 8000f62:	eba4 040e 	sub.w	r4, r4, lr
 8000f66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f6a:	e79c      	b.n	8000ea6 <__udivmoddi4+0x9a>
 8000f6c:	f1c6 0720 	rsb	r7, r6, #32
 8000f70:	40b3      	lsls	r3, r6
 8000f72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f82:	431c      	orrs	r4, r3
 8000f84:	40f9      	lsrs	r1, r7
 8000f86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f92:	0c20      	lsrs	r0, r4, #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fb09 1118 	mls	r1, r9, r8, r1
 8000f9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fa0:	fb08 f00e 	mul.w	r0, r8, lr
 8000fa4:	4288      	cmp	r0, r1
 8000fa6:	fa02 f206 	lsl.w	r2, r2, r6
 8000faa:	d90b      	bls.n	8000fc4 <__udivmoddi4+0x1b8>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000fb4:	f080 8088 	bcs.w	80010c8 <__udivmoddi4+0x2bc>
 8000fb8:	4288      	cmp	r0, r1
 8000fba:	f240 8085 	bls.w	80010c8 <__udivmoddi4+0x2bc>
 8000fbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000fc2:	4461      	add	r1, ip
 8000fc4:	1a09      	subs	r1, r1, r0
 8000fc6:	b2a4      	uxth	r4, r4
 8000fc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fcc:	fb09 1110 	mls	r1, r9, r0, r1
 8000fd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fd8:	458e      	cmp	lr, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x1e2>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000fe4:	d26c      	bcs.n	80010c0 <__udivmoddi4+0x2b4>
 8000fe6:	458e      	cmp	lr, r1
 8000fe8:	d96a      	bls.n	80010c0 <__udivmoddi4+0x2b4>
 8000fea:	3802      	subs	r0, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ff2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ff6:	eba1 010e 	sub.w	r1, r1, lr
 8000ffa:	42a1      	cmp	r1, r4
 8000ffc:	46c8      	mov	r8, r9
 8000ffe:	46a6      	mov	lr, r4
 8001000:	d356      	bcc.n	80010b0 <__udivmoddi4+0x2a4>
 8001002:	d053      	beq.n	80010ac <__udivmoddi4+0x2a0>
 8001004:	b15d      	cbz	r5, 800101e <__udivmoddi4+0x212>
 8001006:	ebb3 0208 	subs.w	r2, r3, r8
 800100a:	eb61 010e 	sbc.w	r1, r1, lr
 800100e:	fa01 f707 	lsl.w	r7, r1, r7
 8001012:	fa22 f306 	lsr.w	r3, r2, r6
 8001016:	40f1      	lsrs	r1, r6
 8001018:	431f      	orrs	r7, r3
 800101a:	e9c5 7100 	strd	r7, r1, [r5]
 800101e:	2600      	movs	r6, #0
 8001020:	4631      	mov	r1, r6
 8001022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001026:	f1c2 0320 	rsb	r3, r2, #32
 800102a:	40d8      	lsrs	r0, r3
 800102c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001030:	fa21 f303 	lsr.w	r3, r1, r3
 8001034:	4091      	lsls	r1, r2
 8001036:	4301      	orrs	r1, r0
 8001038:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103c:	fa1f fe8c 	uxth.w	lr, ip
 8001040:	fbb3 f0f7 	udiv	r0, r3, r7
 8001044:	fb07 3610 	mls	r6, r7, r0, r3
 8001048:	0c0b      	lsrs	r3, r1, #16
 800104a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800104e:	fb00 f60e 	mul.w	r6, r0, lr
 8001052:	429e      	cmp	r6, r3
 8001054:	fa04 f402 	lsl.w	r4, r4, r2
 8001058:	d908      	bls.n	800106c <__udivmoddi4+0x260>
 800105a:	eb1c 0303 	adds.w	r3, ip, r3
 800105e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8001062:	d22f      	bcs.n	80010c4 <__udivmoddi4+0x2b8>
 8001064:	429e      	cmp	r6, r3
 8001066:	d92d      	bls.n	80010c4 <__udivmoddi4+0x2b8>
 8001068:	3802      	subs	r0, #2
 800106a:	4463      	add	r3, ip
 800106c:	1b9b      	subs	r3, r3, r6
 800106e:	b289      	uxth	r1, r1
 8001070:	fbb3 f6f7 	udiv	r6, r3, r7
 8001074:	fb07 3316 	mls	r3, r7, r6, r3
 8001078:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800107c:	fb06 f30e 	mul.w	r3, r6, lr
 8001080:	428b      	cmp	r3, r1
 8001082:	d908      	bls.n	8001096 <__udivmoddi4+0x28a>
 8001084:	eb1c 0101 	adds.w	r1, ip, r1
 8001088:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800108c:	d216      	bcs.n	80010bc <__udivmoddi4+0x2b0>
 800108e:	428b      	cmp	r3, r1
 8001090:	d914      	bls.n	80010bc <__udivmoddi4+0x2b0>
 8001092:	3e02      	subs	r6, #2
 8001094:	4461      	add	r1, ip
 8001096:	1ac9      	subs	r1, r1, r3
 8001098:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800109c:	e738      	b.n	8000f10 <__udivmoddi4+0x104>
 800109e:	462e      	mov	r6, r5
 80010a0:	4628      	mov	r0, r5
 80010a2:	e705      	b.n	8000eb0 <__udivmoddi4+0xa4>
 80010a4:	4606      	mov	r6, r0
 80010a6:	e6e3      	b.n	8000e70 <__udivmoddi4+0x64>
 80010a8:	4618      	mov	r0, r3
 80010aa:	e6f8      	b.n	8000e9e <__udivmoddi4+0x92>
 80010ac:	454b      	cmp	r3, r9
 80010ae:	d2a9      	bcs.n	8001004 <__udivmoddi4+0x1f8>
 80010b0:	ebb9 0802 	subs.w	r8, r9, r2
 80010b4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80010b8:	3801      	subs	r0, #1
 80010ba:	e7a3      	b.n	8001004 <__udivmoddi4+0x1f8>
 80010bc:	4646      	mov	r6, r8
 80010be:	e7ea      	b.n	8001096 <__udivmoddi4+0x28a>
 80010c0:	4620      	mov	r0, r4
 80010c2:	e794      	b.n	8000fee <__udivmoddi4+0x1e2>
 80010c4:	4640      	mov	r0, r8
 80010c6:	e7d1      	b.n	800106c <__udivmoddi4+0x260>
 80010c8:	46d0      	mov	r8, sl
 80010ca:	e77b      	b.n	8000fc4 <__udivmoddi4+0x1b8>
 80010cc:	3b02      	subs	r3, #2
 80010ce:	4461      	add	r1, ip
 80010d0:	e732      	b.n	8000f38 <__udivmoddi4+0x12c>
 80010d2:	4630      	mov	r0, r6
 80010d4:	e709      	b.n	8000eea <__udivmoddi4+0xde>
 80010d6:	4464      	add	r4, ip
 80010d8:	3802      	subs	r0, #2
 80010da:	e742      	b.n	8000f62 <__udivmoddi4+0x156>

080010dc <__aeabi_idiv0>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	887a      	ldrh	r2, [r7, #2]
 80010f4:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001104:	d02c      	beq.n	8001160 <arm_cfft_init_f32+0x80>
 8001106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800110a:	f300 809e 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 800110e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001112:	d032      	beq.n	800117a <arm_cfft_init_f32+0x9a>
 8001114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001118:	f300 8097 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 800111c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001120:	d038      	beq.n	8001194 <arm_cfft_init_f32+0xb4>
 8001122:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001126:	f300 8090 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 800112a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800112e:	d03e      	beq.n	80011ae <arm_cfft_init_f32+0xce>
 8001130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001134:	f300 8089 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 8001138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800113c:	d044      	beq.n	80011c8 <arm_cfft_init_f32+0xe8>
 800113e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001142:	f300 8082 	bgt.w	800124a <arm_cfft_init_f32+0x16a>
 8001146:	2b80      	cmp	r3, #128	; 0x80
 8001148:	d04b      	beq.n	80011e2 <arm_cfft_init_f32+0x102>
 800114a:	2b80      	cmp	r3, #128	; 0x80
 800114c:	dc7d      	bgt.n	800124a <arm_cfft_init_f32+0x16a>
 800114e:	2b40      	cmp	r3, #64	; 0x40
 8001150:	d054      	beq.n	80011fc <arm_cfft_init_f32+0x11c>
 8001152:	2b40      	cmp	r3, #64	; 0x40
 8001154:	dc79      	bgt.n	800124a <arm_cfft_init_f32+0x16a>
 8001156:	2b10      	cmp	r3, #16
 8001158:	d06a      	beq.n	8001230 <arm_cfft_init_f32+0x150>
 800115a:	2b20      	cmp	r3, #32
 800115c:	d05b      	beq.n	8001216 <arm_cfft_init_f32+0x136>
 800115e:	e074      	b.n	800124a <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <arm_cfft_init_f32+0x180>)
 8001162:	899a      	ldrh	r2, [r3, #12]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	819a      	strh	r2, [r3, #12]
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <arm_cfft_init_f32+0x180>)
 800116a:	689a      	ldr	r2, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	4b3b      	ldr	r3, [pc, #236]	; (8001260 <arm_cfft_init_f32+0x180>)
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	605a      	str	r2, [r3, #4]
            break;
 8001178:	e06a      	b.n	8001250 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 800117a:	4b3a      	ldr	r3, [pc, #232]	; (8001264 <arm_cfft_init_f32+0x184>)
 800117c:	899a      	ldrh	r2, [r3, #12]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	819a      	strh	r2, [r3, #12]
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <arm_cfft_init_f32+0x184>)
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	609a      	str	r2, [r3, #8]
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <arm_cfft_init_f32+0x184>)
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	605a      	str	r2, [r3, #4]

            break;
 8001192:	e05d      	b.n	8001250 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8001194:	4b34      	ldr	r3, [pc, #208]	; (8001268 <arm_cfft_init_f32+0x188>)
 8001196:	899a      	ldrh	r2, [r3, #12]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	819a      	strh	r2, [r3, #12]
 800119c:	4b32      	ldr	r3, [pc, #200]	; (8001268 <arm_cfft_init_f32+0x188>)
 800119e:	689a      	ldr	r2, [r3, #8]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	4b30      	ldr	r3, [pc, #192]	; (8001268 <arm_cfft_init_f32+0x188>)
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	605a      	str	r2, [r3, #4]

            break;
 80011ac:	e050      	b.n	8001250 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <arm_cfft_init_f32+0x18c>)
 80011b0:	899a      	ldrh	r2, [r3, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	819a      	strh	r2, [r3, #12]
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <arm_cfft_init_f32+0x18c>)
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <arm_cfft_init_f32+0x18c>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	605a      	str	r2, [r3, #4]
            break;
 80011c6:	e043      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <arm_cfft_init_f32+0x190>)
 80011ca:	899a      	ldrh	r2, [r3, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	819a      	strh	r2, [r3, #12]
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <arm_cfft_init_f32+0x190>)
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	4b25      	ldr	r3, [pc, #148]	; (8001270 <arm_cfft_init_f32+0x190>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	605a      	str	r2, [r3, #4]
            break;
 80011e0:	e036      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <arm_cfft_init_f32+0x194>)
 80011e4:	899a      	ldrh	r2, [r3, #12]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	819a      	strh	r2, [r3, #12]
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <arm_cfft_init_f32+0x194>)
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <arm_cfft_init_f32+0x194>)
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	605a      	str	r2, [r3, #4]
            break;
 80011fa:	e029      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <arm_cfft_init_f32+0x198>)
 80011fe:	899a      	ldrh	r2, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	819a      	strh	r2, [r3, #12]
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <arm_cfft_init_f32+0x198>)
 8001206:	689a      	ldr	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <arm_cfft_init_f32+0x198>)
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	605a      	str	r2, [r3, #4]
            break;
 8001214:	e01c      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <arm_cfft_init_f32+0x19c>)
 8001218:	899a      	ldrh	r2, [r3, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	819a      	strh	r2, [r3, #12]
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <arm_cfft_init_f32+0x19c>)
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <arm_cfft_init_f32+0x19c>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	605a      	str	r2, [r3, #4]
            break;
 800122e:	e00f      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <arm_cfft_init_f32+0x1a0>)
 8001232:	899a      	ldrh	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	819a      	strh	r2, [r3, #12]
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <arm_cfft_init_f32+0x1a0>)
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <arm_cfft_init_f32+0x1a0>)
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	605a      	str	r2, [r3, #4]
            break;
 8001248:	e002      	b.n	8001250 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 800124a:	23ff      	movs	r3, #255	; 0xff
 800124c:	73fb      	strb	r3, [r7, #15]
            break;
 800124e:	bf00      	nop
        }


        return (status);
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	080118ec 	.word	0x080118ec
 8001264:	0801191c 	.word	0x0801191c
 8001268:	080118bc 	.word	0x080118bc
 800126c:	080118fc 	.word	0x080118fc
 8001270:	0801192c 	.word	0x0801192c
 8001274:	080118dc 	.word	0x080118dc
 8001278:	080118cc 	.word	0x080118cc
 800127c:	0801193c 	.word	0x0801193c
 8001280:	0801190c 	.word	0x0801190c

08001284 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 800128a:	f003 fbab 	bl	80049e4 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 800128e:	f000 f8ff 	bl	8001490 <SystemClock_Config>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 8001292:	f002 fafd 	bl	8003890 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8001296:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800129a:	2001      	movs	r0, #1
 800129c:	f002 fb86 	bl	80039ac <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f002 fbe7 	bl	8003a74 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80012a6:	f002 feb1 	bl	800400c <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80012aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ae:	f002 fc3d 	bl	8003b2c <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80012b2:	f002 fb63 	bl	800397c <BSP_LCD_GetXSize>
 80012b6:	4603      	mov	r3, r0
 80012b8:	b29c      	uxth	r4, r3
 80012ba:	f002 fb6b 	bl	8003994 <BSP_LCD_GetYSize>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4619      	mov	r1, r3
 80012c4:	4620      	mov	r0, r4
 80012c6:	f003 fa89 	bl	80047dc <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 80012ca:	f000 ffdd 	bl	8002288 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 80012ce:	f000 fffb 	bl	80022c8 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 80012d2:	2000      	movs	r0, #0
 80012d4:	f001 fec4 	bl	8003060 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 80012d8:	2001      	movs	r0, #1
 80012da:	f001 fec1 	bl	8003060 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 80012de:	f000 fe43 	bl	8001f68 <MENU_draw>
	MENU_hint();						// Show hint at startup
 80012e2:	f000 fecb 	bl	800207c <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 80012e6:	f000 f951 	bl	800158c <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 80012ea:	f000 fa2b 	bl	8001744 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 80012ee:	f000 fae9 	bl	80018c4 <MEAS_timer_init>

	// UART
	uart_init();
 80012f2:	f001 f9fb 	bl	80026ec <uart_init>
	debugPrintStrUSART1("This is a test \n another line");
 80012f6:	485c      	ldr	r0, [pc, #368]	; (8001468 <main+0x1e4>)
 80012f8:	f001 f9e4 	bl	80026c4 <debugPrintStrUSART1>


    // Timer configuration
    int timer_duration = 20; // in seconds
 80012fc:	2314      	movs	r3, #20
 80012fe:	61fb      	str	r3, [r7, #28]
    time_t start_time = time(NULL);
 8001300:	2000      	movs	r0, #0
 8001302:	f00a fa13 	bl	800b72c <time>
 8001306:	e9c7 0104 	strd	r0, r1, [r7, #16]
    time_t current_time = start_time;
 800130a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800130e:	e9c7 2300 	strd	r2, r3, [r7]
    char* time_string = ctime(&current_time);
 8001312:	463b      	mov	r3, r7
 8001314:	4618      	mov	r0, r3
 8001316:	f009 fae5 	bl	800a8e4 <ctime>
 800131a:	60f8      	str	r0, [r7, #12]

	/* Infinite while loop */
	while (difftime(current_time, start_time) < timer_duration) {							// Infinitely loop in main function
 800131c:	e086      	b.n	800142c <main+0x1a8>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 800131e:	2000      	movs	r0, #0
 8001320:	f001 ff26 	bl	8003170 <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 8001324:	4b51      	ldr	r3, [pc, #324]	; (800146c <main+0x1e8>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d02e      	beq.n	800138a <main+0x106>
			MEAS_data_ready = false;
 800132c:	4b4f      	ldr	r3, [pc, #316]	; (800146c <main+0x1e8>)
 800132e:	2200      	movs	r2, #0
 8001330:	701a      	strb	r2, [r3, #0]

			complex_fft(cfft_inout);
 8001332:	484f      	ldr	r0, [pc, #316]	; (8001470 <main+0x1ec>)
 8001334:	f001 f826 	bl	8002384 <complex_fft>

			// Output stored in array testOutput
			get_magnitude();
 8001338:	f001 f83a 	bl	80023b0 <get_magnitude>

			max_index_pass = get_max_index(testOutput);
 800133c:	484d      	ldr	r0, [pc, #308]	; (8001474 <main+0x1f0>)
 800133e:	f001 f873 	bl	8002428 <get_max_index>
 8001342:	4603      	mov	r3, r0
 8001344:	4a4c      	ldr	r2, [pc, #304]	; (8001478 <main+0x1f4>)
 8001346:	6013      	str	r3, [r2, #0]

		    dopplerFrequency = get_doppler_frequency(max_index_pass);
 8001348:	4b4b      	ldr	r3, [pc, #300]	; (8001478 <main+0x1f4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f001 f87f 	bl	8002450 <get_doppler_frequency>
 8001352:	eef0 7a40 	vmov.f32	s15, s0
 8001356:	4b49      	ldr	r3, [pc, #292]	; (800147c <main+0x1f8>)
 8001358:	edc3 7a00 	vstr	s15, [r3]

		    velocity = calculate_speed(dopplerFrequency);
 800135c:	4b47      	ldr	r3, [pc, #284]	; (800147c <main+0x1f8>)
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	eeb0 0a67 	vmov.f32	s0, s15
 8001366:	f001 f8cb 	bl	8002500 <calculate_speed>
 800136a:	eef0 7a40 	vmov.f32	s15, s0
 800136e:	4b44      	ldr	r3, [pc, #272]	; (8001480 <main+0x1fc>)
 8001370:	edc3 7a00 	vstr	s15, [r3]

		    MEAS_show_data();
 8001374:	f000 fc8e 	bl	8001c94 <MEAS_show_data>

		    // start measurement again
			ADC1_IN13_ADC2_IN11_dual_init(); // ADC initialize
 8001378:	f000 fada 	bl	8001930 <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN11_dual_start(); // start sampling
 800137c:	f000 fb82 	bl	8001a84 <ADC1_IN13_ADC2_IN11_dual_start>
			DMA2_Stream4_IRQHandler(); // write samples in ADC_samples
 8001380:	f000 fbf2 	bl	8001b68 <DMA2_Stream4_IRQHandler>

			debugPrintStrUSART1("This is a test \r\n another line");
 8001384:	483f      	ldr	r0, [pc, #252]	; (8001484 <main+0x200>)
 8001386:	f001 f99d 	bl	80026c4 <debugPrintStrUSART1>


		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 800138a:	f000 ffcf 	bl	800232c <PB_pressed>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d01d      	beq.n	80013d0 <main+0x14c>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 8001394:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <main+0x204>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf14      	ite	ne
 800139c:	2301      	movne	r3, #1
 800139e:	2300      	moveq	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f083 0301 	eor.w	r3, r3, #1
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <main+0x204>)
 80013b0:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <main+0x204>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <main+0x142>
				DAC_init();
 80013ba:	f000 fa27 	bl	800180c <DAC_init>
				BSP_LED_On(LED4);
 80013be:	2001      	movs	r0, #1
 80013c0:	f001 fea2 	bl	8003108 <BSP_LED_On>
 80013c4:	e004      	b.n	80013d0 <main+0x14c>
			} else {
				DAC_reset();
 80013c6:	f000 fa0b 	bl	80017e0 <DAC_reset>
				BSP_LED_Off(LED4);
 80013ca:	2001      	movs	r0, #1
 80013cc:	f001 feb6 	bl	800313c <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 80013d0:	f000 fe94 	bl	80020fc <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 80013d4:	f000 fe80 	bl	80020d8 <MENU_get_transition>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d817      	bhi.n	800140e <main+0x18a>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <main+0x160>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	08001401 	.word	0x08001401
 80013e8:	0800140f 	.word	0x0800140f
 80013ec:	0800140f 	.word	0x0800140f
 80013f0:	0800140f 	.word	0x0800140f
 80013f4:	0800140f 	.word	0x0800140f
 80013f8:	0800140f 	.word	0x0800140f
 80013fc:	0800140f 	.word	0x0800140f
		case MENU_NONE:					// No transition => do nothing
			break;
		case MENU_ZERO:
			ADC1_IN13_ADC2_IN11_dual_init(); // ADC initialize
 8001400:	f000 fa96 	bl	8001930 <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN11_dual_start(); // star sampling
 8001404:	f000 fb3e 	bl	8001a84 <ADC1_IN13_ADC2_IN11_dual_start>
			DMA2_Stream4_IRQHandler(); // write samples in ADC_samples
 8001408:	f000 fbae 	bl	8001b68 <DMA2_Stream4_IRQHandler>
			break;
 800140c:	e000      	b.n	8001410 <main+0x18c>
		case MENU_FOUR:
			break;
		case MENU_FIVE:
			break;
		default:						// Should never occur
			break;
 800140e:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 8001410:	20c8      	movs	r0, #200	; 0xc8
 8001412:	f003 fb61 	bl	8004ad8 <HAL_Delay>

		// Update the current time
	    printf("The current time is %s", time_string);
 8001416:	68f9      	ldr	r1, [r7, #12]
 8001418:	481c      	ldr	r0, [pc, #112]	; (800148c <main+0x208>)
 800141a:	f00a f90b 	bl	800b634 <iprintf>
		current_time = time(NULL);
 800141e:	2000      	movs	r0, #0
 8001420:	f00a f984 	bl	800b72c <time>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	e9c7 2300 	strd	r2, r3, [r7]
	while (difftime(current_time, start_time) < timer_duration) {							// Infinitely loop in main function
 800142c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001430:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001434:	f009 fa5d 	bl	800a8f2 <difftime>
 8001438:	ec55 4b10 	vmov	r4, r5, d0
 800143c:	69f8      	ldr	r0, [r7, #28]
 800143e:	f7ff f8eb 	bl	8000618 <__aeabi_i2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4620      	mov	r0, r4
 8001448:	4629      	mov	r1, r5
 800144a:	f7ff fbc1 	bl	8000bd0 <__aeabi_dcmplt>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	f47f af64 	bne.w	800131e <main+0x9a>
	}
	BSP_LED_Toggle(LED4);			// Visual feedback when running
 8001456:	2001      	movs	r0, #1
 8001458:	f001 fe8a 	bl	8003170 <BSP_LED_Toggle>
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3720      	adds	r7, #32
 8001462:	46bd      	mov	sp, r7
 8001464:	bdb0      	pop	{r4, r5, r7, pc}
 8001466:	bf00      	nop
 8001468:	0800ec80 	.word	0x0800ec80
 800146c:	20000424 	.word	0x20000424
 8001470:	20000630 	.word	0x20000630
 8001474:	20000320 	.word	0x20000320
 8001478:	20000420 	.word	0x20000420
 800147c:	2000083c 	.word	0x2000083c
 8001480:	2000031c 	.word	0x2000031c
 8001484:	0800eca0 	.word	0x0800eca0
 8001488:	20000425 	.word	0x20000425
 800148c:	0800ecc0 	.word	0x0800ecc0

08001490 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8001490:	b580      	push	{r7, lr}
 8001492:	b0a0      	sub	sp, #128	; 0x80
 8001494:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800149a:	2230      	movs	r2, #48	; 0x30
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f009 fb76 	bl	800ab90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2230      	movs	r2, #48	; 0x30
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f009 fb67 	bl	800ab90 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <SystemClock_Config+0xf0>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <SystemClock_Config+0xf0>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b2b      	ldr	r3, [pc, #172]	; (8001580 <SystemClock_Config+0xf0>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <SystemClock_Config+0xf4>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a27      	ldr	r2, [pc, #156]	; (8001584 <SystemClock_Config+0xf4>)
 80014e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <SystemClock_Config+0xf4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fa:	2301      	movs	r3, #1
 80014fc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	2302      	movs	r3, #2
 8001506:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001508:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800150c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800150e:	2308      	movs	r3, #8
 8001510:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001512:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001516:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001518:	2302      	movs	r3, #2
 800151a:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800151c:	2307      	movs	r3, #7
 800151e:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001520:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001524:	4618      	mov	r0, r3
 8001526:	f005 fd29 	bl	8006f7c <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800152a:	230f      	movs	r3, #15
 800152c:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800152e:	2302      	movs	r3, #2
 8001530:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001536:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800153a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001542:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001546:	2105      	movs	r1, #5
 8001548:	4618      	mov	r0, r3
 800154a:	f005 ff85 	bl	8007458 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800154e:	2308      	movs	r3, #8
 8001550:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001552:	23c0      	movs	r3, #192	; 0xc0
 8001554:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001556:	2304      	movs	r3, #4
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800155a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4618      	mov	r0, r3
 8001566:	f006 f997 	bl	8007898 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <SystemClock_Config+0xf8>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4a06      	ldr	r2, [pc, #24]	; (8001588 <SystemClock_Config+0xf8>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6053      	str	r3, [r2, #4]
}
 8001576:	bf00      	nop
 8001578:	3780      	adds	r7, #128	; 0x80
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	40007000 	.word	0x40007000
 8001588:	40012300 	.word	0x40012300

0800158c <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b2a      	ldr	r3, [pc, #168]	; (8001640 <gyro_disable+0xb4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a29      	ldr	r2, [pc, #164]	; (8001640 <gyro_disable+0xb4>)
 800159c:	f043 0304 	orr.w	r3, r3, #4
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b27      	ldr	r3, [pc, #156]	; (8001640 <gyro_disable+0xb4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 80015ae:	4b25      	ldr	r3, [pc, #148]	; (8001644 <gyro_disable+0xb8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a24      	ldr	r2, [pc, #144]	; (8001644 <gyro_disable+0xb8>)
 80015b4:	f023 030c 	bic.w	r3, r3, #12
 80015b8:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <gyro_disable+0xb8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a21      	ldr	r2, [pc, #132]	; (8001644 <gyro_disable+0xb8>)
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <gyro_disable+0xb8>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <gyro_disable+0xb8>)
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 80015d2:	200a      	movs	r0, #10
 80015d4:	f003 fa80 	bl	8004ad8 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <gyro_disable+0xb8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a19      	ldr	r2, [pc, #100]	; (8001644 <gyro_disable+0xb8>)
 80015de:	f043 030c 	orr.w	r3, r3, #12
 80015e2:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <gyro_disable+0xb4>)
 80015ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <gyro_disable+0xb4>)
 80015ee:	f043 0320 	orr.w	r3, r3, #32
 80015f2:	6313      	str	r3, [r2, #48]	; 0x30
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <gyro_disable+0xb4>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <gyro_disable+0xbc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <gyro_disable+0xbc>)
 8001606:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800160a:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <gyro_disable+0xbc>)
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <gyro_disable+0xbc>)
 8001612:	f023 030f 	bic.w	r3, r3, #15
 8001616:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 8001618:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <gyro_disable+0xbc>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4a0a      	ldr	r2, [pc, #40]	; (8001648 <gyro_disable+0xbc>)
 800161e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001622:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8001624:	200a      	movs	r0, #10
 8001626:	f003 fa57 	bl	8004ad8 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <gyro_disable+0xbc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a06      	ldr	r2, [pc, #24]	; (8001648 <gyro_disable+0xbc>)
 8001630:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001634:	6013      	str	r3, [r2, #0]
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40020800 	.word	0x40020800
 8001648:	40021400 	.word	0x40021400

0800164c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	2b00      	cmp	r3, #0
 800165c:	db0b      	blt.n	8001676 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f003 021f 	and.w	r2, r3, #31
 8001664:	4907      	ldr	r1, [pc, #28]	; (8001684 <__NVIC_EnableIRQ+0x38>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	2001      	movs	r0, #1
 800166e:	fa00 f202 	lsl.w	r2, r0, r2
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100

08001688 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db12      	blt.n	80016c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	490a      	ldr	r1, [pc, #40]	; (80016cc <__NVIC_DisableIRQ+0x44>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	3320      	adds	r3, #32
 80016b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016b4:	f3bf 8f4f 	dsb	sy
}
 80016b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ba:	f3bf 8f6f 	isb	sy
}
 80016be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	db0c      	blt.n	80016fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	4907      	ldr	r1, [pc, #28]	; (8001708 <__NVIC_ClearPendingIRQ+0x38>)
 80016ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	2001      	movs	r0, #1
 80016f2:	fa00 f202 	lsl.w	r2, r0, r2
 80016f6:	3360      	adds	r3, #96	; 0x60
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100

0800170c <roundToAccuracy>:

/******************************************************************************
 * Functions
 *****************************************************************************/

float32_t roundToAccuracy(float32_t num) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	ed87 0a01 	vstr	s0, [r7, #4]
    return roundf(num / 0.3f) * 0.3f;
 8001716:	edd7 7a01 	vldr	s15, [r7, #4]
 800171a:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001740 <roundToAccuracy+0x34>
 800171e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001722:	eeb0 0a47 	vmov.f32	s0, s14
 8001726:	f00d fa01 	bl	800eb2c <roundf>
 800172a:	eef0 7a40 	vmov.f32	s15, s0
 800172e:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001740 <roundToAccuracy+0x34>
 8001732:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	3e99999a 	.word	0x3e99999a

08001744 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <MEAS_GPIO_analog_init+0x8c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <MEAS_GPIO_analog_init+0x8c>)
 8001754:	f043 0320 	orr.w	r3, r3, #32
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <MEAS_GPIO_analog_init+0x8c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 8001766:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <MEAS_GPIO_analog_init+0x90>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1a      	ldr	r2, [pc, #104]	; (80017d4 <MEAS_GPIO_analog_init+0x90>)
 800176c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001770:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <MEAS_GPIO_analog_init+0x8c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <MEAS_GPIO_analog_init+0x8c>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <MEAS_GPIO_analog_init+0x8c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <MEAS_GPIO_analog_init+0x94>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <MEAS_GPIO_analog_init+0x94>)
 8001794:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001798:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 800179a:	2300      	movs	r3, #0
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MEAS_GPIO_analog_init+0x8c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <MEAS_GPIO_analog_init+0x8c>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MEAS_GPIO_analog_init+0x8c>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <MEAS_GPIO_analog_init+0x98>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a08      	ldr	r2, [pc, #32]	; (80017dc <MEAS_GPIO_analog_init+0x98>)
 80017bc:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80017c0:	6013      	str	r3, [r2, #0]
}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40021400 	.word	0x40021400
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40020000 	.word	0x40020000

080017e0 <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <DAC_reset+0x28>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <DAC_reset+0x28>)
 80017ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80017ee:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <DAC_reset+0x28>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <DAC_reset+0x28>)
 80017f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80017fa:	6213      	str	r3, [r2, #32]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40023800 	.word	0x40023800

0800180c <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <DAC_init+0x3c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	4a0b      	ldr	r2, [pc, #44]	; (8001848 <DAC_init+0x3c>)
 800181c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001820:	6413      	str	r3, [r2, #64]	; 0x40
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <DAC_init+0x3c>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <DAC_init+0x40>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a06      	ldr	r2, [pc, #24]	; (800184c <DAC_init+0x40>)
 8001834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001838:	6013      	str	r3, [r2, #0]
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40007400 	.word	0x40007400

08001850 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <DAC_increment+0x30>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3314      	adds	r3, #20
 800185a:	4a09      	ldr	r2, [pc, #36]	; (8001880 <DAC_increment+0x30>)
 800185c:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 800185e:	4b08      	ldr	r3, [pc, #32]	; (8001880 <DAC_increment+0x30>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001866:	d302      	bcc.n	800186e <DAC_increment+0x1e>
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <DAC_increment+0x30>)
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <DAC_increment+0x34>)
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <DAC_increment+0x30>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6153      	str	r3, [r2, #20]
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	2000062c 	.word	0x2000062c
 8001884:	40007400 	.word	0x40007400

08001888 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <ADC_reset+0x38>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <ADC_reset+0x38>)
 8001892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001896:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <ADC_reset+0x38>)
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	4a08      	ldr	r2, [pc, #32]	; (80018c0 <ADC_reset+0x38>)
 800189e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a2:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 80018a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018ae:	f023 0301 	bic.w	r3, r3, #1
 80018b2:	6013      	str	r3, [r2, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800

080018c4 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 80018ca:	2300      	movs	r3, #0
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <MEAS_timer_init+0x68>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a16      	ldr	r2, [pc, #88]	; (800192c <MEAS_timer_init+0x68>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <MEAS_timer_init+0x68>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	607b      	str	r3, [r7, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 80018e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ea:	2237      	movs	r2, #55	; 0x37
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 80018ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f2:	2231      	movs	r2, #49	; 0x31
 80018f4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 80018f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8001906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8001916:	201c      	movs	r0, #28
 8001918:	f7ff feda 	bl	80016d0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 800191c:	201c      	movs	r0, #28
 800191e:	f7ff fe95 	bl	800164c <__NVIC_EnableIRQ>
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <ADC1_IN13_ADC2_IN11_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN11 = GPIO PC1
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_init(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// Only 1 input is converted
 8001936:	4b4a      	ldr	r3, [pc, #296]	; (8001a60 <ADC1_IN13_ADC2_IN11_dual_init+0x130>)
 8001938:	2202      	movs	r2, #2
 800193a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	4b48      	ldr	r3, [pc, #288]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	4a47      	ldr	r2, [pc, #284]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194a:	6453      	str	r3, [r2, #68]	; 0x44
 800194c:	4b45      	ldr	r3, [pc, #276]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800194e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8001958:	2300      	movs	r3, #0
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	4a40      	ldr	r2, [pc, #256]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001966:	6453      	str	r3, [r2, #68]	; 0x44
 8001968:	4b3e      	ldr	r3, [pc, #248]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 8001974:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a3b      	ldr	r2, [pc, #236]	; (8001a68 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 800197a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800197e:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2
 8001980:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a38      	ldr	r2, [pc, #224]	; (8001a68 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8001986:	f043 0306 	orr.w	r3, r3, #6
 800198a:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 800198c:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a36      	ldr	r2, [pc, #216]	; (8001a6c <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8001992:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001996:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a33      	ldr	r2, [pc, #204]	; (8001a6c <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 800199e:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80019a2:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (11UL << ADC_SQR3_SQ1_Pos);	// Input 11 = first conversion
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 80019a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a8:	4a30      	ldr	r2, [pc, #192]	; (8001a6c <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 80019aa:	f043 030b 	orr.w	r3, r3, #11
 80019ae:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 80019b0:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 80019b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b4:	4a2e      	ldr	r2, [pc, #184]	; (8001a70 <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 80019b6:	f043 030d 	orr.w	r3, r3, #13
 80019ba:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 80019bc:	2300      	movs	r3, #0
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80019c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ca:	6313      	str	r3, [r2, #48]	; 0x30
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 80019d8:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a25      	ldr	r2, [pc, #148]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019de:	f023 0301 	bic.w	r3, r3, #1
 80019e2:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80019e4:	bf00      	nop
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f9      	bne.n	80019e6 <ADC1_IN13_ADC2_IN11_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4a20      	ldr	r2, [pc, #128]	; (8001a78 <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 80019f8:	f043 0320 	orr.w	r3, r3, #32
 80019fc:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a00:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a1a      	ldr	r2, [pc, #104]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a28:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a34:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a0e      	ldr	r2, [pc, #56]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a3c:	f043 0310 	orr.w	r3, r3, #16
 8001a40:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a44:	2240      	movs	r2, #64	; 0x40
 8001a46:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a4a:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <ADC1_IN13_ADC2_IN11_dual_init+0x14c>)
 8001a4c:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001a50:	4a0b      	ldr	r2, [pc, #44]	; (8001a80 <ADC1_IN13_ADC2_IN11_dual_init+0x150>)
 8001a52:	60da      	str	r2, [r3, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	20000000 	.word	0x20000000
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	40012000 	.word	0x40012000
 8001a70:	40012100 	.word	0x40012100
 8001a74:	40026470 	.word	0x40026470
 8001a78:	40026400 	.word	0x40026400
 8001a7c:	40012308 	.word	0x40012308
 8001a80:	2000042c 	.word	0x2000042c

08001a84 <ADC1_IN13_ADC2_IN11_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_start(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <ADC1_IN13_ADC2_IN11_dual_start+0x48>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <ADC1_IN13_ADC2_IN11_dual_start+0x48>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 8001a94:	203c      	movs	r0, #60	; 0x3c
 8001a96:	f7ff fe1b 	bl	80016d0 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 8001a9a:	203c      	movs	r0, #60	; 0x3c
 8001a9c:	f7ff fdd6 	bl	800164c <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <ADC1_IN13_ADC2_IN11_dual_start+0x4c>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <ADC1_IN13_ADC2_IN11_dual_start+0x4c>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <ADC1_IN13_ADC2_IN11_dual_start+0x50>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <ADC1_IN13_ADC2_IN11_dual_start+0x50>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6013      	str	r3, [r2, #0]
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40026470 	.word	0x40026470
 8001ad0:	40012000 	.word	0x40012000
 8001ad4:	40012100 	.word	0x40012100

08001ad8 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001adc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ae6:	f023 0301 	bic.w	r3, r3, #1
 8001aea:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <TIM2_IRQHandler+0x24>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001af4:	f7ff feac 	bl	8001850 <DAC_increment>
	}
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000425 	.word	0x20000425

08001b00 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <ADC_IRQHandler+0x58>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d020      	beq.n	8001b52 <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001b10:	4911      	ldr	r1, [pc, #68]	; (8001b58 <ADC_IRQHandler+0x58>)
 8001b12:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <ADC_IRQHandler+0x5c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	1c5a      	adds	r2, r3, #1
 8001b18:	4810      	ldr	r0, [pc, #64]	; (8001b5c <ADC_IRQHandler+0x5c>)
 8001b1a:	6002      	str	r2, [r0, #0]
 8001b1c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8001b1e:	4910      	ldr	r1, [pc, #64]	; (8001b60 <ADC_IRQHandler+0x60>)
 8001b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001b24:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <ADC_IRQHandler+0x5c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b3f      	cmp	r3, #63	; 0x3f
 8001b2a:	d912      	bls.n	8001b52 <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001b2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001b3c:	4b06      	ldr	r3, [pc, #24]	; (8001b58 <ADC_IRQHandler+0x58>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a05      	ldr	r2, [pc, #20]	; (8001b58 <ADC_IRQHandler+0x58>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001b48:	f7ff fe9e 	bl	8001888 <ADC_reset>
			MEAS_data_ready = true;
 8001b4c:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <ADC_IRQHandler+0x64>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40012200 	.word	0x40012200
 8001b5c:	20000428 	.word	0x20000428
 8001b60:	2000042c 	.word	0x2000042c
 8001b64:	20000424 	.word	0x20000424

08001b68 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8001b6e:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <DMA2_Stream4_IRQHandler+0x10c>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0320 	and.w	r3, r3, #32
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d077      	beq.n	8001c6a <DMA2_Stream4_IRQHandler+0x102>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8001b7a:	203c      	movs	r0, #60	; 0x3c
 8001b7c:	f7ff fd84 	bl	8001688 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8001b80:	203c      	movs	r0, #60	; 0x3c
 8001b82:	f7ff fda5 	bl	80016d0 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001b86:	4b3c      	ldr	r3, [pc, #240]	; (8001c78 <DMA2_Stream4_IRQHandler+0x110>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a3b      	ldr	r2, [pc, #236]	; (8001c78 <DMA2_Stream4_IRQHandler+0x110>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001b92:	bf00      	nop
 8001b94:	4b38      	ldr	r3, [pc, #224]	; (8001c78 <DMA2_Stream4_IRQHandler+0x110>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f9      	bne.n	8001b94 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <DMA2_Stream4_IRQHandler+0x10c>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4a33      	ldr	r2, [pc, #204]	; (8001c74 <DMA2_Stream4_IRQHandler+0x10c>)
 8001ba6:	f043 0320 	orr.w	r3, r3, #32
 8001baa:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001bac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <DMA2_Stream4_IRQHandler+0x114>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a2e      	ldr	r2, [pc, #184]	; (8001c7c <DMA2_Stream4_IRQHandler+0x114>)
 8001bc2:	f023 0301 	bic.w	r3, r3, #1
 8001bc6:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <DMA2_Stream4_IRQHandler+0x118>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a2c      	ldr	r2, [pc, #176]	; (8001c80 <DMA2_Stream4_IRQHandler+0x118>)
 8001bce:	f023 0301 	bic.w	r3, r3, #1
 8001bd2:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <DMA2_Stream4_IRQHandler+0x11c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a2a      	ldr	r2, [pc, #168]	; (8001c84 <DMA2_Stream4_IRQHandler+0x11c>)
 8001bda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001bde:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--) {
 8001be0:	233f      	movs	r3, #63	; 0x3f
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	e039      	b.n	8001c5a <DMA2_Stream4_IRQHandler+0xf2>
		    ADC_samples[2*i+1] = (ADC_samples[i] >> 16);         // (*(int32_t*)& cast für ADC_samples
 8001be6:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <DMA2_Stream4_IRQHandler+0x120>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	0c12      	lsrs	r2, r2, #16
 8001bf6:	4924      	ldr	r1, [pc, #144]	; (8001c88 <DMA2_Stream4_IRQHandler+0x120>)
 8001bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 8001bfc:	4a22      	ldr	r2, [pc, #136]	; (8001c88 <DMA2_Stream4_IRQHandler+0x120>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	b292      	uxth	r2, r2
 8001c0a:	491f      	ldr	r1, [pc, #124]	; (8001c88 <DMA2_Stream4_IRQHandler+0x120>)
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			cfft_inout[2*i+1] = ADC_samples[2*i+1];
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	3301      	adds	r3, #1
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <DMA2_Stream4_IRQHandler+0x120>)
 8001c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	3301      	adds	r3, #1
 8001c22:	ee07 2a90 	vmov	s15, r2
 8001c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c2a:	4a18      	ldr	r2, [pc, #96]	; (8001c8c <DMA2_Stream4_IRQHandler+0x124>)
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	edc3 7a00 	vstr	s15, [r3]
			cfft_inout[2*i]   = ADC_samples[2*i];          // (*(int32_t*)&
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <DMA2_Stream4_IRQHandler+0x120>)
 8001c3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	ee07 2a90 	vmov	s15, r2
 8001c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <DMA2_Stream4_IRQHandler+0x124>)
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	edc3 7a00 	vstr	s15, [r3]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--) {
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	dac2      	bge.n	8001be6 <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8001c60:	f7ff fe12 	bl	8001888 <ADC_reset>
		MEAS_data_ready = true;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <DMA2_Stream4_IRQHandler+0x128>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40026400 	.word	0x40026400
 8001c78:	40026470 	.word	0x40026470
 8001c7c:	40012000 	.word	0x40012000
 8001c80:	40012100 	.word	0x40012100
 8001c84:	40012300 	.word	0x40012300
 8001c88:	2000042c 	.word	0x2000042c
 8001c8c:	20000630 	.word	0x20000630
 8001c90:	20000424 	.word	0x20000424

08001c94 <MEAS_show_data>:
 * of signals and results.
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void) {
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b099      	sub	sp, #100	; 0x64
 8001c98:	af02      	add	r7, sp, #8

	float32_t v = velocity;
 8001c9a:	4ba7      	ldr	r3, [pc, #668]	; (8001f38 <MEAS_show_data+0x2a4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	647b      	str	r3, [r7, #68]	; 0x44
	extern float32_t HighVelocity;
	const uint32_t Y_OFFSET = 260;
 8001ca0:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001ca4:	643b      	str	r3, [r7, #64]	; 0x40
	const uint32_t X_SIZE = 240;
 8001ca6:	23f0      	movs	r3, #240	; 0xf0
 8001ca8:	63fb      	str	r3, [r7, #60]	; 0x3c

	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 8001caa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t data;
	uint32_t data_last;

	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001cb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cbc:	f001 feea 	bl	8003a94 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8001cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	3301      	adds	r3, #1
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2100      	movs	r1, #0
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f002 f920 	bl	8003f14 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font16);
 8001cd4:	4899      	ldr	r0, [pc, #612]	; (8001f3c <MEAS_show_data+0x2a8>)
 8001cd6:	f001 ff0f 	bl	8003af8 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cde:	f001 fef1 	bl	8003ac4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001ce2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ce6:	f001 fed5 	bl	8003a94 <BSP_LCD_SetTextColor>
	char text[50];
	snprintf(text, 50, "Velocity: %.1f km/h", v);
 8001cea:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001cec:	f7fe fca6 	bl	800063c <__aeabi_f2d>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4638      	mov	r0, r7
 8001cf6:	e9cd 2300 	strd	r2, r3, [sp]
 8001cfa:	4a91      	ldr	r2, [pc, #580]	; (8001f40 <MEAS_show_data+0x2ac>)
 8001cfc:	2132      	movs	r1, #50	; 0x32
 8001cfe:	f009 fcc1 	bl	800b684 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 20, (uint8_t *)text, CENTER_MODE);
 8001d02:	463a      	mov	r2, r7
 8001d04:	2301      	movs	r3, #1
 8001d06:	2114      	movs	r1, #20
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f001 ff7b 	bl	8003c04 <BSP_LCD_DisplayStringAt>

	// show HighScore
	snprintf(text, 50, "Highscore: %.1f km/h", HighVelocity);
 8001d0e:	4b8d      	ldr	r3, [pc, #564]	; (8001f44 <MEAS_show_data+0x2b0>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7fe fc92 	bl	800063c <__aeabi_f2d>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	460b      	mov	r3, r1
 8001d1c:	4638      	mov	r0, r7
 8001d1e:	e9cd 2300 	strd	r2, r3, [sp]
 8001d22:	4a89      	ldr	r2, [pc, #548]	; (8001f48 <MEAS_show_data+0x2b4>)
 8001d24:	2132      	movs	r1, #50	; 0x32
 8001d26:	f009 fcad 	bl	800b684 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, CENTER_MODE);
 8001d2a:	463a      	mov	r2, r7
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	2132      	movs	r1, #50	; 0x32
 8001d30:	2000      	movs	r0, #0
 8001d32:	f001 ff67 	bl	8003c04 <BSP_LCD_DisplayStringAt>


	snprintf(text, 50, "I: blue, Q: red");
 8001d36:	463b      	mov	r3, r7
 8001d38:	4a84      	ldr	r2, [pc, #528]	; (8001f4c <MEAS_show_data+0x2b8>)
 8001d3a:	2132      	movs	r1, #50	; 0x32
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f009 fca1 	bl	800b684 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 150, (uint8_t *)text, CENTER_MODE);
 8001d42:	463a      	mov	r2, r7
 8001d44:	2301      	movs	r3, #1
 8001d46:	2196      	movs	r1, #150	; 0x96
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f001 ff5b 	bl	8003c04 <BSP_LCD_DisplayStringAt>

	snprintf(text, 50, "FFT magnitude: green");
 8001d4e:	463b      	mov	r3, r7
 8001d50:	4a7f      	ldr	r2, [pc, #508]	; (8001f50 <MEAS_show_data+0x2bc>)
 8001d52:	2132      	movs	r1, #50	; 0x32
 8001d54:	4618      	mov	r0, r3
 8001d56:	f009 fc95 	bl	800b684 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 200, (uint8_t *)text, CENTER_MODE);
 8001d5a:	463a      	mov	r2, r7
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	21c8      	movs	r1, #200	; 0xc8
 8001d60:	2000      	movs	r0, #0
 8001d62:	f001 ff4f 	bl	8003c04 <BSP_LCD_DisplayStringAt>


	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d66:	487b      	ldr	r0, [pc, #492]	; (8001f54 <MEAS_show_data+0x2c0>)
 8001d68:	f001 fe94 	bl	8003a94 <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_input_count*0] / f;
 8001d6c:	4b7a      	ldr	r3, [pc, #488]	; (8001f58 <MEAS_show_data+0x2c4>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d76:	657b      	str	r3, [r7, #84]	; 0x54
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001d78:	2301      	movs	r3, #1
 8001d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8001d7c:	e033      	b.n	8001de6 <MEAS_show_data+0x152>
		data_last = data;
 8001d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
		data = (ADC_samples[MEAS_input_count*i]) / f;
 8001d82:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <MEAS_show_data+0x2c8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <MEAS_show_data+0x2c4>)
 8001d8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	657b      	str	r3, [r7, #84]	; 0x54
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001d9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d901      	bls.n	8001da6 <MEAS_show_data+0x112>
 8001da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001da4:	657b      	str	r3, [r7, #84]	; 0x54
		BSP_LCD_DrawLine(3*(i-1), Y_OFFSET-data_last, 3*i, Y_OFFSET-data);
 8001da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	0052      	lsls	r2, r2, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b03      	subs	r3, #3
 8001db4:	b298      	uxth	r0, r3
 8001db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	b299      	uxth	r1, r3
 8001dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	0052      	lsls	r2, r2, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	b29c      	uxth	r4, r3
 8001dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	4622      	mov	r2, r4
 8001ddc:	f001 ffd0 	bl	8003d80 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001de0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de2:	3301      	adds	r3, #1
 8001de4:	653b      	str	r3, [r7, #80]	; 0x50
 8001de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de8:	2b3f      	cmp	r3, #63	; 0x3f
 8001dea:	d9c8      	bls.n	8001d7e <MEAS_show_data+0xea>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_input_count == 2) {
 8001dec:	4b5b      	ldr	r3, [pc, #364]	; (8001f5c <MEAS_show_data+0x2c8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d143      	bne.n	8001e7c <MEAS_show_data+0x1e8>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001df4:	485a      	ldr	r0, [pc, #360]	; (8001f60 <MEAS_show_data+0x2cc>)
 8001df6:	f001 fe4d 	bl	8003a94 <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 8001dfa:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <MEAS_show_data+0x2c4>)
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	657b      	str	r3, [r7, #84]	; 0x54
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001e06:	2301      	movs	r3, #1
 8001e08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e0a:	e034      	b.n	8001e76 <MEAS_show_data+0x1e2>
			data_last = data;
 8001e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 8001e10:	4b52      	ldr	r3, [pc, #328]	; (8001f5c <MEAS_show_data+0x2c8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e16:	fb02 f303 	mul.w	r3, r2, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	4a4e      	ldr	r2, [pc, #312]	; (8001f58 <MEAS_show_data+0x2c4>)
 8001e1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	657b      	str	r3, [r7, #84]	; 0x54
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001e2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d901      	bls.n	8001e36 <MEAS_show_data+0x1a2>
 8001e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e34:	657b      	str	r3, [r7, #84]	; 0x54
			BSP_LCD_DrawLine(3*(i-1), Y_OFFSET-data_last, 3*i, Y_OFFSET-data);
 8001e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	0052      	lsls	r2, r2, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	3b03      	subs	r3, #3
 8001e44:	b298      	uxth	r0, r3
 8001e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	b299      	uxth	r1, r3
 8001e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	0052      	lsls	r2, r2, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	b29c      	uxth	r4, r3
 8001e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4622      	mov	r2, r4
 8001e6c:	f001 ff88 	bl	8003d80 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e72:	3301      	adds	r3, #1
 8001e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e78:	2b3f      	cmp	r3, #63	; 0x3f
 8001e7a:	d9c7      	bls.n	8001e0c <MEAS_show_data+0x178>
		}
	}

	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001e7c:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001e80:	f001 fe08 	bl	8003a94 <BSP_LCD_SetTextColor>
	data = testOutput[0] / (f*9);
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <MEAS_show_data+0x2d0>)
 8001e86:	edd3 6a00 	vldr	s13, [r3]
 8001e8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	ee07 3a90 	vmov	s15, r3
 8001e96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea2:	ee17 3a90 	vmov	r3, s15
 8001ea6:	657b      	str	r3, [r7, #84]	; 0x54
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eac:	e03c      	b.n	8001f28 <MEAS_show_data+0x294>
		data_last = data;
 8001eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34
		data = (testOutput[i]) / (f*9);
 8001eb2:	4a2c      	ldr	r2, [pc, #176]	; (8001f64 <MEAS_show_data+0x2d0>)
 8001eb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	edd3 6a00 	vldr	s13, [r3]
 8001ebe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed6:	ee17 3a90 	vmov	r3, s15
 8001eda:	657b      	str	r3, [r7, #84]	; 0x54
		if (data > Y_OFFSET) { data = Y_OFFSET; } // Limit value, prevent crash
 8001edc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d901      	bls.n	8001ee8 <MEAS_show_data+0x254>
 8001ee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee6:	657b      	str	r3, [r7, #84]	; 0x54
		BSP_LCD_DrawLine(3*(i-1), Y_OFFSET-data_last, 3*i, Y_OFFSET-data);
 8001ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	0052      	lsls	r2, r2, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b03      	subs	r3, #3
 8001ef6:	b298      	uxth	r0, r3
 8001ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	b299      	uxth	r1, r3
 8001f04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	0052      	lsls	r2, r2, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b29c      	uxth	r4, r3
 8001f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4622      	mov	r2, r4
 8001f1e:	f001 ff2f 	bl	8003d80 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f24:	3301      	adds	r3, #1
 8001f26:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f2a:	2b3f      	cmp	r3, #63	; 0x3f
 8001f2c:	d9bf      	bls.n	8001eae <MEAS_show_data+0x21a>
	}
}
 8001f2e:	bf00      	nop
 8001f30:	bf00      	nop
 8001f32:	375c      	adds	r7, #92	; 0x5c
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd90      	pop	{r4, r7, pc}
 8001f38:	2000031c 	.word	0x2000031c
 8001f3c:	200000b0 	.word	0x200000b0
 8001f40:	0800ecd8 	.word	0x0800ecd8
 8001f44:	20000858 	.word	0x20000858
 8001f48:	0800ecec 	.word	0x0800ecec
 8001f4c:	0800ed04 	.word	0x0800ed04
 8001f50:	0800ed14 	.word	0x0800ed14
 8001f54:	ff0000ff 	.word	0xff0000ff
 8001f58:	2000042c 	.word	0x2000042c
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	ffff0000 	.word	0xffff0000
 8001f64:	20000320 	.word	0x20000320

08001f68 <MENU_draw>:
 *
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void) {
 8001f68:	b590      	push	{r4, r7, lr}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8001f6e:	4841      	ldr	r0, [pc, #260]	; (8002074 <MENU_draw+0x10c>)
 8001f70:	f001 fdc2 	bl	8003af8 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8001f74:	f001 fd0e 	bl	8003994 <BSP_LCD_GetYSize>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	3b28      	subs	r3, #40	; 0x28
 8001f7c:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8001f7e:	2304      	movs	r3, #4
 8001f80:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8001f82:	f001 fcfb 	bl	800397c <BSP_LCD_GetXSize>
 8001f86:	60b8      	str	r0, [r7, #8]
	h = MENU_HEIGHT;
 8001f88:	2328      	movs	r3, #40	; 0x28
 8001f8a:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
 8001f90:	e068      	b.n	8002064 <MENU_draw+0xfc>
		x = i*w;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	fb02 f303 	mul.w	r3, r2, r3
 8001f9a:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8001f9c:	4936      	ldr	r1, [pc, #216]	; (8002078 <MENU_draw+0x110>)
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	4413      	add	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	440b      	add	r3, r1
 8001faa:	3324      	adds	r3, #36	; 0x24
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f001 fd70 	bl	8003a94 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b298      	uxth	r0, r3
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	b299      	uxth	r1, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	b29c      	uxth	r4, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	4622      	mov	r2, r4
 8001fee:	f001 ff91 	bl	8003f14 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 8001ff2:	4921      	ldr	r1, [pc, #132]	; (8002078 <MENU_draw+0x110>)
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	3324      	adds	r3, #36	; 0x24
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f001 fd5d 	bl	8003ac4 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 800200a:	491b      	ldr	r1, [pc, #108]	; (8002078 <MENU_draw+0x110>)
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	440b      	add	r3, r1
 8002018:	3320      	adds	r3, #32
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f001 fd39 	bl	8003a94 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,(uint8_t *)MENU_entry[i].line1, CENTER_MODE);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	b29b      	uxth	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	0052      	lsls	r2, r2, #1
 800202a:	4413      	add	r3, r2
 800202c:	b29a      	uxth	r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	b29b      	uxth	r3, r3
 8002032:	4413      	add	r3, r2
 8002034:	b298      	uxth	r0, r3
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	0052      	lsls	r2, r2, #1
 800203e:	4413      	add	r3, r2
 8002040:	b29a      	uxth	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	b29b      	uxth	r3, r3
 8002046:	4413      	add	r3, r2
 8002048:	b299      	uxth	r1, r3
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4a08      	ldr	r2, [pc, #32]	; (8002078 <MENU_draw+0x110>)
 8002056:	441a      	add	r2, r3
 8002058:	2301      	movs	r3, #1
 800205a:	f001 fdd3 	bl	8003c04 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	3301      	adds	r3, #1
 8002062:	617b      	str	r3, [r7, #20]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d093      	beq.n	8001f92 <MENU_draw+0x2a>
		// BSP_LCD_DisplayStringAt(x+3*m, y+h/2,(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
	}
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd90      	pop	{r4, r7, pc}
 8002074:	200000b8 	.word	0x200000b8
 8002078:	20000008 	.word	0x20000008

0800207c <MENU_hint>:

/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void) {
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002084:	f001 fd1e 	bl	8003ac4 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002088:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800208c:	f001 fd02 	bl	8003a94 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8002090:	480c      	ldr	r0, [pc, #48]	; (80020c4 <MENU_hint+0x48>)
 8002092:	f001 fd31 	bl	8003af8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Doppler Radar", CENTER_MODE);
 8002096:	2301      	movs	r3, #1
 8002098:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <MENU_hint+0x4c>)
 800209a:	210a      	movs	r1, #10
 800209c:	2005      	movs	r0, #5
 800209e:	f001 fdb1 	bl	8003c04 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 80020a2:	480a      	ldr	r0, [pc, #40]	; (80020cc <MENU_hint+0x50>)
 80020a4:	f001 fd28 	bl	8003af8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Press \"start\" button", LEFT_MODE);
 80020a8:	2303      	movs	r3, #3
 80020aa:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <MENU_hint+0x54>)
 80020ac:	213c      	movs	r1, #60	; 0x3c
 80020ae:	2005      	movs	r0, #5
 80020b0:	f001 fda8 	bl	8003c04 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start measurement", LEFT_MODE);
 80020b4:	2303      	movs	r3, #3
 80020b6:	4a07      	ldr	r2, [pc, #28]	; (80020d4 <MENU_hint+0x58>)
 80020b8:	2150      	movs	r1, #80	; 0x50
 80020ba:	2005      	movs	r0, #5
 80020bc:	f001 fda2 	bl	8003c04 <BSP_LCD_DisplayStringAt>
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200000a8 	.word	0x200000a8
 80020c8:	0800ed2c 	.word	0x0800ed2c
 80020cc:	200000b0 	.word	0x200000b0
 80020d0:	0800ed3c 	.word	0x0800ed3c
 80020d4:	0800ed54 	.word	0x0800ed54

080020d8 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <MENU_get_transition+0x20>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <MENU_get_transition+0x20>)
 80020e6:	2206      	movs	r2, #6
 80020e8:	701a      	strb	r2, [r3, #0]
	return item;
 80020ea:	79fb      	ldrb	r3, [r7, #7]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	20000004 	.word	0x20000004

080020fc <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 80020fc:	b598      	push	{r3, r4, r7, lr}
 80020fe:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8002100:	482e      	ldr	r0, [pc, #184]	; (80021bc <MENU_check_transition+0xc0>)
 8002102:	f002 fbb1 	bl	8004868 <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8002106:	f001 fc45 	bl	8003994 <BSP_LCD_GetYSize>
 800210a:	4603      	mov	r3, r0
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <MENU_check_transition+0xc0>)
 8002110:	889b      	ldrh	r3, [r3, #4]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	b29a      	uxth	r2, r3
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <MENU_check_transition+0xc0>)
 8002118:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 800211a:	f001 fc2f 	bl	800397c <BSP_LCD_GetXSize>
 800211e:	4603      	mov	r3, r0
 8002120:	b29a      	uxth	r2, r3
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <MENU_check_transition+0xc0>)
 8002124:	885b      	ldrh	r3, [r3, #2]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b24      	ldr	r3, [pc, #144]	; (80021bc <MENU_check_transition+0xc0>)
 800212c:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 800212e:	f001 fc31 	bl	8003994 <BSP_LCD_GetYSize>
 8002132:	4603      	mov	r3, r0
 8002134:	b29a      	uxth	r2, r3
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <MENU_check_transition+0xc0>)
 8002138:	889b      	ldrh	r3, [r3, #4]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	b29a      	uxth	r2, r3
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <MENU_check_transition+0xc0>)
 8002140:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <MENU_check_transition+0xc0>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d035      	beq.n	80021b6 <MENU_check_transition+0xba>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 800214a:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <MENU_check_transition+0xc4>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b06      	cmp	r3, #6
 8002150:	d131      	bne.n	80021b6 <MENU_check_transition+0xba>
			item_old = item_new;		// Store old item
 8002152:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <MENU_check_transition+0xc8>)
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	4b1c      	ldr	r3, [pc, #112]	; (80021c8 <MENU_check_transition+0xcc>)
 8002158:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 800215a:	f001 fc1b 	bl	8003994 <BSP_LCD_GetYSize>
 800215e:	4603      	mov	r3, r0
 8002160:	3b28      	subs	r3, #40	; 0x28
 8002162:	4a16      	ldr	r2, [pc, #88]	; (80021bc <MENU_check_transition+0xc0>)
 8002164:	8892      	ldrh	r2, [r2, #4]
 8002166:	4293      	cmp	r3, r2
 8002168:	d225      	bcs.n	80021b6 <MENU_check_transition+0xba>
 800216a:	f001 fc13 	bl	8003994 <BSP_LCD_GetYSize>
 800216e:	4603      	mov	r3, r0
 8002170:	4a12      	ldr	r2, [pc, #72]	; (80021bc <MENU_check_transition+0xc0>)
 8002172:	8892      	ldrh	r2, [r2, #4]
 8002174:	4293      	cmp	r3, r2
 8002176:	d91e      	bls.n	80021b6 <MENU_check_transition+0xba>
				item_new = TS_State.X	// Calculate new item
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <MENU_check_transition+0xc0>)
 800217a:	885b      	ldrh	r3, [r3, #2]
 800217c:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 800217e:	f001 fbfd 	bl	800397c <BSP_LCD_GetXSize>
 8002182:	4603      	mov	r3, r0
 8002184:	fbb4 f3f3 	udiv	r3, r4, r3
 8002188:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MENU_check_transition+0xc8>)
 800218c:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 800218e:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <MENU_check_transition+0xc8>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d002      	beq.n	800219c <MENU_check_transition+0xa0>
					item_new = MENU_NONE;	// Out of bounds
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MENU_check_transition+0xc8>)
 8002198:	2206      	movs	r2, #6
 800219a:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MENU_check_transition+0xc8>)
 800219e:	781a      	ldrb	r2, [r3, #0]
 80021a0:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <MENU_check_transition+0xcc>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d106      	bne.n	80021b6 <MENU_check_transition+0xba>
					item_new = MENU_NONE;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MENU_check_transition+0xc8>)
 80021aa:	2206      	movs	r2, #6
 80021ac:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <MENU_check_transition+0xcc>)
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <MENU_check_transition+0xc4>)
 80021b4:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 80021b6:	bf00      	nop
 80021b8:	bd98      	pop	{r3, r4, r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000830 	.word	0x20000830
 80021c0:	20000004 	.word	0x20000004
 80021c4:	20000030 	.word	0x20000030
 80021c8:	20000031 	.word	0x20000031

080021cc <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 80021d0:	4b0e      	ldr	r3, [pc, #56]	; (800220c <EXTI15_10_IRQHandler+0x40>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d014      	beq.n	8002206 <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <EXTI15_10_IRQHandler+0x40>)
 80021de:	695b      	ldr	r3, [r3, #20]
 80021e0:	4a0a      	ldr	r2, [pc, #40]	; (800220c <EXTI15_10_IRQHandler+0x40>)
 80021e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e6:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 80021e8:	f002 fb32 	bl	8004850 <BSP_TS_ITGetStatus>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 80021f2:	f002 fbeb 	bl	80049cc <BSP_TS_ITClear>
			MENU_check_transition();
 80021f6:	f7ff ff81 	bl	80020fc <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <EXTI15_10_IRQHandler+0x40>)
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	4a03      	ldr	r2, [pc, #12]	; (800220c <EXTI15_10_IRQHandler+0x40>)
 8002200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002204:	6153      	str	r3, [r2, #20]
	}
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40013c00 	.word	0x40013c00

08002210 <__NVIC_EnableIRQ>:
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	db0b      	blt.n	800223a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f003 021f 	and.w	r2, r3, #31
 8002228:	4907      	ldr	r1, [pc, #28]	; (8002248 <__NVIC_EnableIRQ+0x38>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	095b      	lsrs	r3, r3, #5
 8002230:	2001      	movs	r0, #1
 8002232:	fa00 f202 	lsl.w	r2, r0, r2
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000e100 	.word	0xe000e100

0800224c <__NVIC_ClearPendingIRQ>:
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	4603      	mov	r3, r0
 8002254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	db0c      	blt.n	8002278 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	f003 021f 	and.w	r2, r3, #31
 8002264:	4907      	ldr	r1, [pc, #28]	; (8002284 <__NVIC_ClearPendingIRQ+0x38>)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	2001      	movs	r0, #1
 800226e:	fa00 f202 	lsl.w	r2, r0, r2
 8002272:	3360      	adds	r3, #96	; 0x60
 8002274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000e100 	.word	0xe000e100

08002288 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 800228e:	2300      	movs	r3, #0
 8002290:	607b      	str	r3, [r7, #4]
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <PB_init+0x38>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a0a      	ldr	r2, [pc, #40]	; (80022c0 <PB_init+0x38>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b08      	ldr	r3, [pc, #32]	; (80022c0 <PB_init+0x38>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	607b      	str	r3, [r7, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <PB_init+0x3c>)
 80022ac:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <PB_init+0x3c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6013      	str	r3, [r2, #0]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	40023800 	.word	0x40023800
 80022c4:	40020000 	.word	0x40020000

080022c8 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
 80022d2:	4b13      	ldr	r3, [pc, #76]	; (8002320 <PB_enableIRQ+0x58>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	4a12      	ldr	r2, [pc, #72]	; (8002320 <PB_enableIRQ+0x58>)
 80022d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022dc:	6453      	str	r3, [r2, #68]	; 0x44
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <PB_enableIRQ+0x58>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e6:	607b      	str	r3, [r7, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <PB_enableIRQ+0x5c>)
 80022ec:	4a0d      	ldr	r2, [pc, #52]	; (8002324 <PB_enableIRQ+0x5c>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <PB_enableIRQ+0x60>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <PB_enableIRQ+0x60>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <PB_enableIRQ+0x60>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a09      	ldr	r2, [pc, #36]	; (8002328 <PB_enableIRQ+0x60>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 800230a:	2006      	movs	r0, #6
 800230c:	f7ff ff9e 	bl	800224c <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8002310:	2006      	movs	r0, #6
 8002312:	f7ff ff7d 	bl	8002210 <__NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	40013800 	.word	0x40013800
 8002328:	40013c00 	.word	0x40013c00

0800232c <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <PB_pressed+0x20>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8002338:	4b04      	ldr	r3, [pc, #16]	; (800234c <PB_pressed+0x20>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
	return pressed;
 800233e:	79fb      	ldrb	r3, [r7, #7]
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	20000838 	.word	0x20000838

08002350 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8002354:	4b09      	ldr	r3, [pc, #36]	; (800237c <EXTI0_IRQHandler+0x2c>)
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <EXTI0_IRQHandler+0x2c>)
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	4a05      	ldr	r2, [pc, #20]	; (800237c <EXTI0_IRQHandler+0x2c>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <EXTI0_IRQHandler+0x30>)
 800236e:	2201      	movs	r2, #1
 8002370:	701a      	strb	r2, [r3, #0]
	}
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	40013c00 	.word	0x40013c00
 8002380:	20000838 	.word	0x20000838

08002384 <complex_fft>:
float32_t max_value;
uint32_t max_index; // index at max value
extern float32_t HighVelocity = 0.0; // stores the highest Velocity

// Functions
void complex_fft(float32_t fft_input[]) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]

    // Initialize the FFT instance
    arm_cfft_init_f32(&fftInstance, FFT_SIZE);
 800238c:	2140      	movs	r1, #64	; 0x40
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <complex_fft+0x24>)
 8002390:	f7fe fea6 	bl	80010e0 <arm_cfft_init_f32>

    // Perform the FFT, 0 indicates forward FFT, 1 enables bit reversal of output
    arm_cfft_f32(&fftInstance, cfft_inout, 0, 1);
 8002394:	2301      	movs	r3, #1
 8002396:	2200      	movs	r2, #0
 8002398:	4904      	ldr	r1, [pc, #16]	; (80023ac <complex_fft+0x28>)
 800239a:	4803      	ldr	r0, [pc, #12]	; (80023a8 <complex_fft+0x24>)
 800239c:	f007 fe4e 	bl	800a03c <arm_cfft_f32>

}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20000840 	.word	0x20000840
 80023ac:	20000630 	.word	0x20000630

080023b0 <get_magnitude>:

void get_magnitude(void) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0

    // magnitude calculation
    arm_cmplx_mag_f32(cfft_inout, testOutput, FFT_SIZE);
 80023b6:	2240      	movs	r2, #64	; 0x40
 80023b8:	4919      	ldr	r1, [pc, #100]	; (8002420 <get_magnitude+0x70>)
 80023ba:	481a      	ldr	r0, [pc, #104]	; (8002424 <get_magnitude+0x74>)
 80023bc:	f007 feb8 	bl	800a130 <arm_cmplx_mag_f32>

    // set DC value to 0 because we have an offset of 1.4V
    testOutput[0] = 0;
 80023c0:	4b17      	ldr	r3, [pc, #92]	; (8002420 <get_magnitude+0x70>)
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
    testOutput[1] = 0;
 80023c8:	4b15      	ldr	r3, [pc, #84]	; (8002420 <get_magnitude+0x70>)
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
    testOutput[2] = 0;
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <get_magnitude+0x70>)
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	609a      	str	r2, [r3, #8]
    testOutput[63] = 0;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <get_magnitude+0x70>)
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc

    int size = 64;
 80023e2:	2340      	movs	r3, #64	; 0x40
 80023e4:	60bb      	str	r3, [r7, #8]
    int mean = meanOfArray(testOutput, size);
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	480d      	ldr	r0, [pc, #52]	; (8002420 <get_magnitude+0x70>)
 80023ea:	f000 f8d5 	bl	8002598 <meanOfArray>
 80023ee:	6078      	str	r0, [r7, #4]

    if(mean < THRESHOLD) {
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b3b      	cmp	r3, #59	; 0x3b
 80023f4:	dc10      	bgt.n	8002418 <get_magnitude+0x68>

    	for(int i = 0; i < size; i++) {
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	e009      	b.n	8002410 <get_magnitude+0x60>
    		testOutput[i] = (float32_t) 0.0;
 80023fc:	4a08      	ldr	r2, [pc, #32]	; (8002420 <get_magnitude+0x70>)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	f04f 0200 	mov.w	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
    	for(int i = 0; i < size; i++) {
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	3301      	adds	r3, #1
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	429a      	cmp	r2, r3
 8002416:	dbf1      	blt.n	80023fc <get_magnitude+0x4c>
    	}
    }
}
 8002418:	bf00      	nop
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20000320 	.word	0x20000320
 8002424:	20000630 	.word	0x20000630

08002428 <get_max_index>:

uint32_t get_max_index(float32_t testOutput[]) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]

    // get max value and corresponding index
    arm_max_f32(testOutput, FFT_SIZE, &max_value, &max_index);
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <get_max_index+0x20>)
 8002432:	4a06      	ldr	r2, [pc, #24]	; (800244c <get_max_index+0x24>)
 8002434:	2140      	movs	r1, #64	; 0x40
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f007 fa6a 	bl	8009910 <arm_max_f32>

    return max_index;
 800243c:	4b02      	ldr	r3, [pc, #8]	; (8002448 <get_max_index+0x20>)
 800243e:	681b      	ldr	r3, [r3, #0]

}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000854 	.word	0x20000854
 800244c:	20000850 	.word	0x20000850

08002450 <get_doppler_frequency>:

float32_t get_doppler_frequency(uint32_t max_index) {
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

    // calculate Doppler frequency by multiplying max_index by frequency resolution
    dopplerFrequency = (float32_t)max_index * ADC_FS / FFT_SIZE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80024b8 <get_doppler_frequency+0x68>
 8002466:	ee27 7a87 	vmul.f32	s14, s15, s14
 800246a:	eddf 6a14 	vldr	s13, [pc, #80]	; 80024bc <get_doppler_frequency+0x6c>
 800246e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <get_doppler_frequency+0x70>)
 8002474:	edc3 7a00 	vstr	s15, [r3]

    // check if dopplerFrequency is in the second Nyquist zone -> > fs/2
    if (dopplerFrequency > (ADC_FS / 2)) {
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <get_doppler_frequency+0x70>)
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80024c4 <get_doppler_frequency+0x74>
 8002482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	dd09      	ble.n	80024a0 <get_doppler_frequency+0x50>
    	dopplerFrequency = dopplerFrequency - ADC_FS;
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <get_doppler_frequency+0x70>)
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80024b8 <get_doppler_frequency+0x68>
 8002496:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800249a:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <get_doppler_frequency+0x70>)
 800249c:	edc3 7a00 	vstr	s15, [r3]
    }

    return dopplerFrequency;
 80024a0:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <get_doppler_frequency+0x70>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	ee07 3a90 	vmov	s15, r3

}
 80024a8:	eeb0 0a67 	vmov.f32	s0, s15
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	46ea6000 	.word	0x46ea6000
 80024bc:	42800000 	.word	0x42800000
 80024c0:	2000083c 	.word	0x2000083c
 80024c4:	466a6000 	.word	0x466a6000

080024c8 <update_high_velocity>:

void update_high_velocity(float32_t velocity) {
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	ed87 0a01 	vstr	s0, [r7, #4]
	if (velocity > HighVelocity) {
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <update_high_velocity+0x34>)
 80024d4:	edd3 7a00 	vldr	s15, [r3]
 80024d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80024dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	dc00      	bgt.n	80024e8 <update_high_velocity+0x20>
		HighVelocity = velocity;
	}
}
 80024e6:	e002      	b.n	80024ee <update_high_velocity+0x26>
		HighVelocity = velocity;
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <update_high_velocity+0x34>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6013      	str	r3, [r2, #0]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000858 	.word	0x20000858

08002500 <calculate_speed>:

float32_t calculate_speed(float32_t dopplerFrequency) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	ed87 0a01 	vstr	s0, [r7, #4]

    // Calculate velocity in m/s
    float32_t lambda = SPEED_OF_LIGHT / TRANSMIT_FREQUENCY;
 800250a:	4b21      	ldr	r3, [pc, #132]	; (8002590 <calculate_speed+0x90>)
 800250c:	60fb      	str	r3, [r7, #12]
    velocity = (dopplerFrequency*lambda) / 2.0f;
 800250e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002512:	edd7 7a03 	vldr	s15, [r7, #12]
 8002516:	ee27 7a27 	vmul.f32	s14, s14, s15
 800251a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800251e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <calculate_speed+0x94>)
 8002524:	edc3 7a00 	vstr	s15, [r3]

    // convert to m/s to km/h and round to accuracy +/- 0.3
    velocity = velocity*3.6;
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <calculate_speed+0x94>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fe f885 	bl	800063c <__aeabi_f2d>
 8002532:	a315      	add	r3, pc, #84	; (adr r3, 8002588 <calculate_speed+0x88>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f8d8 	bl	80006ec <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fbaa 	bl	8000c9c <__aeabi_d2f>
 8002548:	4603      	mov	r3, r0
 800254a:	4a12      	ldr	r2, [pc, #72]	; (8002594 <calculate_speed+0x94>)
 800254c:	6013      	str	r3, [r2, #0]
    velocity = roundToAccuracy(velocity);
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <calculate_speed+0x94>)
 8002550:	edd3 7a00 	vldr	s15, [r3]
 8002554:	eeb0 0a67 	vmov.f32	s0, s15
 8002558:	f7ff f8d8 	bl	800170c <roundToAccuracy>
 800255c:	eef0 7a40 	vmov.f32	s15, s0
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <calculate_speed+0x94>)
 8002562:	edc3 7a00 	vstr	s15, [r3]

    // Update the high velocity
    update_high_velocity(velocity);
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <calculate_speed+0x94>)
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	f7ff ffaa 	bl	80024c8 <update_high_velocity>

    return velocity;
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <calculate_speed+0x94>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	ee07 3a90 	vmov	s15, r3

}
 800257c:	eeb0 0a67 	vmov.f32	s0, s15
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	cccccccd 	.word	0xcccccccd
 800258c:	400ccccc 	.word	0x400ccccc
 8002590:	3c4ca888 	.word	0x3c4ca888
 8002594:	2000031c 	.word	0x2000031c

08002598 <meanOfArray>:

int meanOfArray(float32_t testOutput[], int size) {
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]

	int sum = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
	int average = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]

	for(int i = 1; i < size ; i++) {
 80025aa:	2301      	movs	r3, #1
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	e014      	b.n	80025da <meanOfArray+0x42>
		sum += testOutput[i];
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ce:	ee17 3a90 	vmov	r3, s15
 80025d2:	617b      	str	r3, [r7, #20]
	for(int i = 1; i < size ; i++) {
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	3301      	adds	r3, #1
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	dbe6      	blt.n	80025b0 <meanOfArray+0x18>
	}

	average = sum / size;
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80025ea:	60fb      	str	r3, [r7, #12]

	return average;
 80025ec:	68fb      	ldr	r3, [r7, #12]

}
 80025ee:	4618      	mov	r0, r3
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 800260c:	e7fe      	b.n	800260c <HardFault_Handler+0x4>

0800260e <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 8002612:	e7fe      	b.n	8002612 <MemManage_Handler+0x4>

08002614 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 8002618:	e7fe      	b.n	8002618 <BusFault_Handler+0x4>

0800261a <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 800261e:	e7fe      	b.n	800261e <UsageFault_Handler+0x4>

08002620 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800264e:	f002 fa23 	bl	8004a98 <HAL_IncTick>
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800265c:	4b16      	ldr	r3, [pc, #88]	; (80026b8 <SystemInit+0x60>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	4a15      	ldr	r2, [pc, #84]	; (80026b8 <SystemInit+0x60>)
 8002664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <SystemInit+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a12      	ldr	r2, [pc, #72]	; (80026bc <SystemInit+0x64>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <SystemInit+0x64>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <SystemInit+0x64>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <SystemInit+0x64>)
 8002684:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002688:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800268e:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <SystemInit+0x64>)
 8002690:	4a0b      	ldr	r2, [pc, #44]	; (80026c0 <SystemInit+0x68>)
 8002692:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <SystemInit+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a08      	ldr	r2, [pc, #32]	; (80026bc <SystemInit+0x64>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <SystemInit+0x64>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <SystemInit+0x60>)
 80026a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026ac:	609a      	str	r2, [r3, #8]
#endif
}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00
 80026bc:	40023800 	.word	0x40023800
 80026c0:	24003010 	.word	0x24003010

080026c4 <debugPrintStrUSART1>:
#include "stm32f4xx_hal_uart.h"
#include "uart.h"

UART_HandleTypeDef huart1;

void debugPrintStrUSART1(char _out[]) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 10);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f7fd fdef 	bl	80002b0 <strlen>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	230a      	movs	r3, #10
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4803      	ldr	r0, [pc, #12]	; (80026e8 <debugPrintStrUSART1+0x24>)
 80026dc:	f006 fa25 	bl	8008b2a <HAL_UART_Transmit>
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	2000085c 	.word	0x2000085c

080026ec <uart_init>:
    debugPrintStrUSART1(data[i]);
  }
}


void uart_init(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
	// Enable clock for GPIOA
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <uart_init+0xc0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <uart_init+0xc0>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <uart_init+0xc0>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
	*/

	GPIO_InitTypeDef  GPIO_InitStruct;

	/*Configure GPIO pin : GPIO_PIN_9  TX */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800270e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002712:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800271c:	2307      	movs	r3, #7
 800271e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	4619      	mov	r1, r3
 8002726:	4822      	ldr	r0, [pc, #136]	; (80027b0 <uart_init+0xc4>)
 8002728:	f002 ff60 	bl	80055ec <HAL_GPIO_Init>

	/*Configure GPIO pin : GPIO_PIN_10  RX */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 800272c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002730:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800273a:	2307      	movs	r3, #7
 800273c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 030c 	add.w	r3, r7, #12
 8002742:	4619      	mov	r1, r3
 8002744:	481a      	ldr	r0, [pc, #104]	; (80027b0 <uart_init+0xc4>)
 8002746:	f002 ff51 	bl	80055ec <HAL_GPIO_Init>

	__HAL_RCC_USART1_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <uart_init+0xc0>)
 8002750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002752:	4a16      	ldr	r2, [pc, #88]	; (80027ac <uart_init+0xc0>)
 8002754:	f043 0310 	orr.w	r3, r3, #16
 8002758:	6453      	str	r3, [r2, #68]	; 0x44
 800275a:	4b14      	ldr	r3, [pc, #80]	; (80027ac <uart_init+0xc0>)
 800275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]

	huart1.Instance = USART1;
 8002766:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <uart_init+0xc8>)
 8002768:	4a13      	ldr	r2, [pc, #76]	; (80027b8 <uart_init+0xcc>)
 800276a:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800276c:	4b11      	ldr	r3, [pc, #68]	; (80027b4 <uart_init+0xc8>)
 800276e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002772:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002774:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <uart_init+0xc8>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <uart_init+0xc8>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <uart_init+0xc8>)
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX;
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <uart_init+0xc8>)
 8002788:	2208      	movs	r2, #8
 800278a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <uart_init+0xc8>)
 800278e:	2200      	movs	r2, #0
 8002790:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <uart_init+0xc8>)
 8002794:	2200      	movs	r2, #0
 8002796:	61da      	str	r2, [r3, #28]
	HAL_UART_Init(&huart1);
 8002798:	4806      	ldr	r0, [pc, #24]	; (80027b4 <uart_init+0xc8>)
 800279a:	f006 f96f 	bl	8008a7c <HAL_UART_Init>

	debugPrintStrUSART1("Renn Test\r\n"); // print
 800279e:	4807      	ldr	r0, [pc, #28]	; (80027bc <uart_init+0xd0>)
 80027a0:	f7ff ff90 	bl	80026c4 <debugPrintStrUSART1>

	//HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart);
	//HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart);
	//void HAL_UART_MspInit(UART_HandleTypeDef *huart);
	//void HAL_UART_MspDeInit(UART_HandleTypeDef *huart);
}
 80027a4:	bf00      	nop
 80027a6:	3720      	adds	r7, #32
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40023800 	.word	0x40023800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	2000085c 	.word	0x2000085c
 80027b8:	40011000 	.word	0x40011000
 80027bc:	0800ed74 	.word	0x0800ed74

080027c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80027c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027f8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027c6:	e003      	b.n	80027d0 <LoopCopyDataInit>

080027c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027ce:	3104      	adds	r1, #4

080027d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027d0:	480b      	ldr	r0, [pc, #44]	; (8002800 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027d8:	d3f6      	bcc.n	80027c8 <CopyDataInit>
  ldr  r2, =_sbss
 80027da:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027dc:	e002      	b.n	80027e4 <LoopFillZerobss>

080027de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027e0:	f842 3b04 	str.w	r3, [r2], #4

080027e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027e4:	4b09      	ldr	r3, [pc, #36]	; (800280c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027e8:	d3f9      	bcc.n	80027de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027ea:	f7ff ff35 	bl	8002658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ee:	f008 f889 	bl	800a904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027f2:	f7fe fd47 	bl	8001284 <main>
  bx  lr    
 80027f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80027f8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80027fc:	08027354 	.word	0x08027354
  ldr  r0, =_sdata
 8002800:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002804:	20000300 	.word	0x20000300
  ldr  r2, =_sbss
 8002808:	20000300 	.word	0x20000300
  ldr  r3, = _ebss
 800280c:	20000ba0 	.word	0x20000ba0

08002810 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002810:	e7fe      	b.n	8002810 <CAN1_RX0_IRQHandler>

08002812 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002816:	f000 feed 	bl	80035f4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800281a:	20ca      	movs	r0, #202	; 0xca
 800281c:	f000 f95d 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8002820:	20c3      	movs	r0, #195	; 0xc3
 8002822:	f000 f967 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8002826:	2008      	movs	r0, #8
 8002828:	f000 f964 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 800282c:	2050      	movs	r0, #80	; 0x50
 800282e:	f000 f961 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8002832:	20cf      	movs	r0, #207	; 0xcf
 8002834:	f000 f951 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002838:	2000      	movs	r0, #0
 800283a:	f000 f95b 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800283e:	20c1      	movs	r0, #193	; 0xc1
 8002840:	f000 f958 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8002844:	2030      	movs	r0, #48	; 0x30
 8002846:	f000 f955 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800284a:	20ed      	movs	r0, #237	; 0xed
 800284c:	f000 f945 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002850:	2064      	movs	r0, #100	; 0x64
 8002852:	f000 f94f 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002856:	2003      	movs	r0, #3
 8002858:	f000 f94c 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800285c:	2012      	movs	r0, #18
 800285e:	f000 f949 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002862:	2081      	movs	r0, #129	; 0x81
 8002864:	f000 f946 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002868:	20e8      	movs	r0, #232	; 0xe8
 800286a:	f000 f936 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800286e:	2085      	movs	r0, #133	; 0x85
 8002870:	f000 f940 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002874:	2000      	movs	r0, #0
 8002876:	f000 f93d 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800287a:	2078      	movs	r0, #120	; 0x78
 800287c:	f000 f93a 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002880:	20cb      	movs	r0, #203	; 0xcb
 8002882:	f000 f92a 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002886:	2039      	movs	r0, #57	; 0x39
 8002888:	f000 f934 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800288c:	202c      	movs	r0, #44	; 0x2c
 800288e:	f000 f931 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002892:	2000      	movs	r0, #0
 8002894:	f000 f92e 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002898:	2034      	movs	r0, #52	; 0x34
 800289a:	f000 f92b 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800289e:	2002      	movs	r0, #2
 80028a0:	f000 f928 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80028a4:	20f7      	movs	r0, #247	; 0xf7
 80028a6:	f000 f918 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80028aa:	2020      	movs	r0, #32
 80028ac:	f000 f922 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80028b0:	20ea      	movs	r0, #234	; 0xea
 80028b2:	f000 f912 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f000 f91c 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80028bc:	2000      	movs	r0, #0
 80028be:	f000 f919 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80028c2:	20b1      	movs	r0, #177	; 0xb1
 80028c4:	f000 f909 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80028c8:	2000      	movs	r0, #0
 80028ca:	f000 f913 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80028ce:	201b      	movs	r0, #27
 80028d0:	f000 f910 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80028d4:	20b6      	movs	r0, #182	; 0xb6
 80028d6:	f000 f900 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80028da:	200a      	movs	r0, #10
 80028dc:	f000 f90a 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80028e0:	20a2      	movs	r0, #162	; 0xa2
 80028e2:	f000 f907 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80028e6:	20c0      	movs	r0, #192	; 0xc0
 80028e8:	f000 f8f7 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80028ec:	2010      	movs	r0, #16
 80028ee:	f000 f901 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80028f2:	20c1      	movs	r0, #193	; 0xc1
 80028f4:	f000 f8f1 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80028f8:	2010      	movs	r0, #16
 80028fa:	f000 f8fb 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80028fe:	20c5      	movs	r0, #197	; 0xc5
 8002900:	f000 f8eb 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002904:	2045      	movs	r0, #69	; 0x45
 8002906:	f000 f8f5 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800290a:	2015      	movs	r0, #21
 800290c:	f000 f8f2 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8002910:	20c7      	movs	r0, #199	; 0xc7
 8002912:	f000 f8e2 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8002916:	2090      	movs	r0, #144	; 0x90
 8002918:	f000 f8ec 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 800291c:	2036      	movs	r0, #54	; 0x36
 800291e:	f000 f8dc 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8002922:	20c8      	movs	r0, #200	; 0xc8
 8002924:	f000 f8e6 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8002928:	20f2      	movs	r0, #242	; 0xf2
 800292a:	f000 f8d6 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800292e:	2000      	movs	r0, #0
 8002930:	f000 f8e0 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002934:	20b0      	movs	r0, #176	; 0xb0
 8002936:	f000 f8d0 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800293a:	20c2      	movs	r0, #194	; 0xc2
 800293c:	f000 f8da 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002940:	20b6      	movs	r0, #182	; 0xb6
 8002942:	f000 f8ca 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002946:	200a      	movs	r0, #10
 8002948:	f000 f8d4 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800294c:	20a7      	movs	r0, #167	; 0xa7
 800294e:	f000 f8d1 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002952:	2027      	movs	r0, #39	; 0x27
 8002954:	f000 f8ce 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002958:	2004      	movs	r0, #4
 800295a:	f000 f8cb 	bl	8002af4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800295e:	202a      	movs	r0, #42	; 0x2a
 8002960:	f000 f8bb 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002964:	2000      	movs	r0, #0
 8002966:	f000 f8c5 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800296a:	2000      	movs	r0, #0
 800296c:	f000 f8c2 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002970:	2000      	movs	r0, #0
 8002972:	f000 f8bf 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002976:	20ef      	movs	r0, #239	; 0xef
 8002978:	f000 f8bc 	bl	8002af4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800297c:	202b      	movs	r0, #43	; 0x2b
 800297e:	f000 f8ac 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002982:	2000      	movs	r0, #0
 8002984:	f000 f8b6 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002988:	2000      	movs	r0, #0
 800298a:	f000 f8b3 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800298e:	2001      	movs	r0, #1
 8002990:	f000 f8b0 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002994:	203f      	movs	r0, #63	; 0x3f
 8002996:	f000 f8ad 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800299a:	20f6      	movs	r0, #246	; 0xf6
 800299c:	f000 f89d 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80029a0:	2001      	movs	r0, #1
 80029a2:	f000 f8a7 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f000 f8a4 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80029ac:	2006      	movs	r0, #6
 80029ae:	f000 f8a1 	bl	8002af4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80029b2:	202c      	movs	r0, #44	; 0x2c
 80029b4:	f000 f891 	bl	8002ada <ili9341_WriteReg>
  LCD_Delay(200);
 80029b8:	20c8      	movs	r0, #200	; 0xc8
 80029ba:	f000 ff09 	bl	80037d0 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80029be:	2026      	movs	r0, #38	; 0x26
 80029c0:	f000 f88b 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80029c4:	2001      	movs	r0, #1
 80029c6:	f000 f895 	bl	8002af4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80029ca:	20e0      	movs	r0, #224	; 0xe0
 80029cc:	f000 f885 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80029d0:	200f      	movs	r0, #15
 80029d2:	f000 f88f 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80029d6:	2029      	movs	r0, #41	; 0x29
 80029d8:	f000 f88c 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80029dc:	2024      	movs	r0, #36	; 0x24
 80029de:	f000 f889 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80029e2:	200c      	movs	r0, #12
 80029e4:	f000 f886 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80029e8:	200e      	movs	r0, #14
 80029ea:	f000 f883 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80029ee:	2009      	movs	r0, #9
 80029f0:	f000 f880 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80029f4:	204e      	movs	r0, #78	; 0x4e
 80029f6:	f000 f87d 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80029fa:	2078      	movs	r0, #120	; 0x78
 80029fc:	f000 f87a 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002a00:	203c      	movs	r0, #60	; 0x3c
 8002a02:	f000 f877 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002a06:	2009      	movs	r0, #9
 8002a08:	f000 f874 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8002a0c:	2013      	movs	r0, #19
 8002a0e:	f000 f871 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002a12:	2005      	movs	r0, #5
 8002a14:	f000 f86e 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8002a18:	2017      	movs	r0, #23
 8002a1a:	f000 f86b 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002a1e:	2011      	movs	r0, #17
 8002a20:	f000 f868 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002a24:	2000      	movs	r0, #0
 8002a26:	f000 f865 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8002a2a:	20e1      	movs	r0, #225	; 0xe1
 8002a2c:	f000 f855 	bl	8002ada <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002a30:	2000      	movs	r0, #0
 8002a32:	f000 f85f 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002a36:	2016      	movs	r0, #22
 8002a38:	f000 f85c 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002a3c:	201b      	movs	r0, #27
 8002a3e:	f000 f859 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002a42:	2004      	movs	r0, #4
 8002a44:	f000 f856 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002a48:	2011      	movs	r0, #17
 8002a4a:	f000 f853 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8002a4e:	2007      	movs	r0, #7
 8002a50:	f000 f850 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002a54:	2031      	movs	r0, #49	; 0x31
 8002a56:	f000 f84d 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8002a5a:	2033      	movs	r0, #51	; 0x33
 8002a5c:	f000 f84a 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002a60:	2042      	movs	r0, #66	; 0x42
 8002a62:	f000 f847 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002a66:	2005      	movs	r0, #5
 8002a68:	f000 f844 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002a6c:	200c      	movs	r0, #12
 8002a6e:	f000 f841 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002a72:	200a      	movs	r0, #10
 8002a74:	f000 f83e 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002a78:	2028      	movs	r0, #40	; 0x28
 8002a7a:	f000 f83b 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002a7e:	202f      	movs	r0, #47	; 0x2f
 8002a80:	f000 f838 	bl	8002af4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002a84:	200f      	movs	r0, #15
 8002a86:	f000 f835 	bl	8002af4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8002a8a:	2011      	movs	r0, #17
 8002a8c:	f000 f825 	bl	8002ada <ili9341_WriteReg>
  LCD_Delay(200);
 8002a90:	20c8      	movs	r0, #200	; 0xc8
 8002a92:	f000 fe9d 	bl	80037d0 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002a96:	2029      	movs	r0, #41	; 0x29
 8002a98:	f000 f81f 	bl	8002ada <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002a9c:	202c      	movs	r0, #44	; 0x2c
 8002a9e:	f000 f81c 	bl	8002ada <ili9341_WriteReg>
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002aaa:	f000 fda3 	bl	80035f4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002aae:	2103      	movs	r1, #3
 8002ab0:	20d3      	movs	r0, #211	; 0xd3
 8002ab2:	f000 f82c 	bl	8002b0e <ili9341_ReadData>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	b29b      	uxth	r3, r3
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	bd80      	pop	{r7, pc}

08002abe <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002ac2:	2029      	movs	r0, #41	; 0x29
 8002ac4:	f000 f809 	bl	8002ada <ili9341_WriteReg>
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}

08002acc <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002ad0:	2028      	movs	r0, #40	; 0x28
 8002ad2:	f000 f802 	bl	8002ada <ili9341_WriteReg>
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 fe1e 	bl	8003728 <LCD_IO_WriteReg>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002afe:	88fb      	ldrh	r3, [r7, #6]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fdef 	bl	80036e4 <LCD_IO_WriteData>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	4603      	mov	r3, r0
 8002b16:	460a      	mov	r2, r1
 8002b18:	80fb      	strh	r3, [r7, #6]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8002b1e:	797a      	ldrb	r2, [r7, #5]
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fe21 	bl	800376c <LCD_IO_ReadData>
 8002b2a:	4603      	mov	r3, r0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002b38:	23f0      	movs	r3, #240	; 0xf0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002b48:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fa59 	bl	800301c <stmpe811_GetInstance>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	2bff      	cmp	r3, #255	; 0xff
 8002b72:	d112      	bne.n	8002b9a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002b74:	2000      	movs	r0, #0
 8002b76:	f000 fa51 	bl	800301c <stmpe811_GetInstance>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002b7e:	7bbb      	ldrb	r3, [r7, #14]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d80a      	bhi.n	8002b9a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002b84:	7bbb      	ldrb	r3, [r7, #14]
 8002b86:	88fa      	ldrh	r2, [r7, #6]
 8002b88:	b2d1      	uxtb	r1, r2
 8002b8a:	4a06      	ldr	r2, [pc, #24]	; (8002ba4 <stmpe811_Init+0x4c>)
 8002b8c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002b8e:	f000 fe2a 	bl	80037e6 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 f807 	bl	8002ba8 <stmpe811_Reset>
    }
  }
}
 8002b9a:	bf00      	nop
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	2000089c 	.word	0x2000089c

08002ba8 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	2103      	movs	r1, #3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fe1f 	bl	80037fe <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002bc0:	200a      	movs	r0, #10
 8002bc2:	f000 fe59 	bl	8003878 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2200      	movs	r2, #0
 8002bcc:	2103      	movs	r1, #3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fe15 	bl	80037fe <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002bd4:	2002      	movs	r0, #2
 8002bd6:	f000 fe4f 	bl	8003878 <IOE_Delay>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002be2:	b590      	push	{r4, r7, lr}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002bec:	f000 fdfb 	bl	80037e6 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002bf0:	88fb      	ldrh	r3, [r7, #6]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fe14 	bl	8003824 <IOE_Read>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	021b      	lsls	r3, r3, #8
 8002c00:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2101      	movs	r1, #1
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 fe0b 	bl	8003824 <IOE_Read>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002c12:	4323      	orrs	r3, r4
 8002c14:	b21b      	sxth	r3, r3
 8002c16:	b29b      	uxth	r3, r3
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd90      	pop	{r4, r7, pc}

08002c20 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002c2e:	88fb      	ldrh	r3, [r7, #6]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2109      	movs	r1, #9
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fdf5 	bl	8003824 <IOE_Read>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	2109      	movs	r1, #9
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fdd5 	bl	80037fe <IOE_Write>
}
 8002c54:	bf00      	nop
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2109      	movs	r1, #9
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fdd7 	bl	8003824 <IOE_Read>
 8002c76:	4603      	mov	r3, r0
 8002c78:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	f023 0301 	bic.w	r3, r3, #1
 8002c80:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	7bfa      	ldrb	r2, [r7, #15]
 8002c88:	2109      	movs	r1, #9
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 fdb7 	bl	80037fe <IOE_Write>
    
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	460a      	mov	r2, r1
 8002ca2:	80fb      	strh	r3, [r7, #6]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	210a      	movs	r1, #10
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fdb6 	bl	8003824 <IOE_Read>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	797b      	ldrb	r3, [r7, #5]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002cc4:	88fb      	ldrh	r3, [r7, #6]
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	7bfa      	ldrb	r2, [r7, #15]
 8002cca:	210a      	movs	r1, #10
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 fd96 	bl	80037fe <IOE_Write>
}
 8002cd2:	bf00      	nop
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	460a      	mov	r2, r1
 8002ce4:	80fb      	strh	r3, [r7, #6]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002cee:	88fb      	ldrh	r3, [r7, #6]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	210a      	movs	r1, #10
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 fd95 	bl	8003824 <IOE_Read>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002cfe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	b25a      	sxtb	r2, r3
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	210a      	movs	r1, #10
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fd70 	bl	80037fe <IOE_Write>
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460a      	mov	r2, r1
 8002d30:	80fb      	strh	r3, [r7, #6]
 8002d32:	4613      	mov	r3, r2
 8002d34:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	210b      	movs	r1, #11
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fd71 	bl	8003824 <IOE_Read>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
 8002d46:	797b      	ldrb	r3, [r7, #5]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b2db      	uxtb	r3, r3
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460a      	mov	r2, r1
 8002d5e:	80fb      	strh	r3, [r7, #6]
 8002d60:	4613      	mov	r3, r2
 8002d62:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	797a      	ldrb	r2, [r7, #5]
 8002d6a:	210b      	movs	r1, #11
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 fd46 	bl	80037fe <IOE_Write>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	6039      	str	r1, [r7, #0]
 8002d84:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2117      	movs	r1, #23
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fd47 	bl	8003824 <IOE_Read>
 8002d96:	4603      	mov	r3, r0
 8002d98:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	b25b      	sxtb	r3, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	b25a      	sxtb	r2, r3
 8002da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da6:	4013      	ands	r3, r2
 8002da8:	b25b      	sxtb	r3, r3
 8002daa:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002dac:	88fb      	ldrh	r3, [r7, #6]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	7bfa      	ldrb	r2, [r7, #15]
 8002db2:	2117      	movs	r1, #23
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fd22 	bl	80037fe <IOE_Write>
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	4603      	mov	r3, r0
 8002dca:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2104      	movs	r1, #4
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fd26 	bl	8003824 <IOE_Read>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	f023 0304 	bic.w	r3, r3, #4
 8002de2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002de4:	88fb      	ldrh	r3, [r7, #6]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	2104      	movs	r1, #4
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fd06 	bl	80037fe <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	21f0      	movs	r1, #240	; 0xf0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ffbf 	bl	8002d7a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	f023 0303 	bic.w	r3, r3, #3
 8002e02:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002e04:	88fb      	ldrh	r3, [r7, #6]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	2104      	movs	r1, #4
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fcf6 	bl	80037fe <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2249      	movs	r2, #73	; 0x49
 8002e18:	2120      	movs	r1, #32
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fcef 	bl	80037fe <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8002e20:	2002      	movs	r0, #2
 8002e22:	f000 fd29 	bl	8003878 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	2121      	movs	r1, #33	; 0x21
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 fce5 	bl	80037fe <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	229a      	movs	r2, #154	; 0x9a
 8002e3a:	2141      	movs	r1, #65	; 0x41
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 fcde 	bl	80037fe <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2201      	movs	r2, #1
 8002e48:	214a      	movs	r1, #74	; 0x4a
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 fcd7 	bl	80037fe <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2201      	movs	r2, #1
 8002e56:	214b      	movs	r1, #75	; 0x4b
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fcd0 	bl	80037fe <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2200      	movs	r2, #0
 8002e64:	214b      	movs	r1, #75	; 0x4b
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 fcc9 	bl	80037fe <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002e6c:	88fb      	ldrh	r3, [r7, #6]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2201      	movs	r2, #1
 8002e72:	2156      	movs	r1, #86	; 0x56
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fcc2 	bl	80037fe <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2201      	movs	r2, #1
 8002e80:	2158      	movs	r1, #88	; 0x58
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fcbb 	bl	80037fe <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	2140      	movs	r1, #64	; 0x40
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fcb4 	bl	80037fe <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	22ff      	movs	r2, #255	; 0xff
 8002e9c:	210b      	movs	r1, #11
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fcad 	bl	80037fe <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002ea4:	2002      	movs	r0, #2
 8002ea6:	f000 fce7 	bl	8003878 <IOE_Delay>
}
 8002eaa:	bf00      	nop
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2140      	movs	r1, #64	; 0x40
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fcac 	bl	8003824 <IOE_Read>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed2:	2b80      	cmp	r3, #128	; 0x80
 8002ed4:	bf0c      	ite	eq
 8002ed6:	2301      	moveq	r3, #1
 8002ed8:	2300      	movne	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002ede:	7bbb      	ldrb	r3, [r7, #14]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002ee4:	88fb      	ldrh	r3, [r7, #6]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	214c      	movs	r1, #76	; 0x4c
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fc9a 	bl	8003824 <IOE_Read>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d010      	beq.n	8002f18 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
 8002efa:	e00d      	b.n	8002f18 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2201      	movs	r2, #1
 8002f02:	214b      	movs	r1, #75	; 0x4b
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fc7a 	bl	80037fe <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002f0a:	88fb      	ldrh	r3, [r7, #6]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2200      	movs	r2, #0
 8002f10:	214b      	movs	r1, #75	; 0x4b
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 fc73 	bl	80037fe <IOE_Write>
  }
  
  return ret;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b086      	sub	sp, #24
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	60b9      	str	r1, [r7, #8]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002f30:	89fb      	ldrh	r3, [r7, #14]
 8002f32:	b2d8      	uxtb	r0, r3
 8002f34:	f107 0210 	add.w	r2, r7, #16
 8002f38:	2304      	movs	r3, #4
 8002f3a:	21d7      	movs	r1, #215	; 0xd7
 8002f3c:	f000 fc85 	bl	800384a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002f40:	7c3b      	ldrb	r3, [r7, #16]
 8002f42:	061a      	lsls	r2, r3, #24
 8002f44:	7c7b      	ldrb	r3, [r7, #17]
 8002f46:	041b      	lsls	r3, r3, #16
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	7cbb      	ldrb	r3, [r7, #18]
 8002f4c:	021b      	lsls	r3, r3, #8
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	7cfa      	ldrb	r2, [r7, #19]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	0d1b      	lsrs	r3, r3, #20
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	0a1b      	lsrs	r3, r3, #8
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002f70:	89fb      	ldrh	r3, [r7, #14]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2201      	movs	r2, #1
 8002f76:	214b      	movs	r1, #75	; 0x4b
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fc40 	bl	80037fe <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002f7e:	89fb      	ldrh	r3, [r7, #14]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2200      	movs	r2, #0
 8002f84:	214b      	movs	r1, #75	; 0x4b
 8002f86:	4618      	mov	r0, r3
 8002f88:	f000 fc39 	bl	80037fe <IOE_Write>
}
 8002f8c:	bf00      	nop
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002f9e:	f000 fc28 	bl	80037f2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	211f      	movs	r1, #31
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fe76 	bl	8002c98 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fe36 	bl	8002c20 <stmpe811_EnableGlobalIT>
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fe47 	bl	8002c5c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002fce:	88fb      	ldrh	r3, [r7, #6]
 8002fd0:	211f      	movs	r1, #31
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fe81 	bl	8002cda <stmpe811_DisableITSource>
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	211f      	movs	r1, #31
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fe99 	bl	8002d26 <stmpe811_ReadGITStatus>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	4603      	mov	r3, r0
 8003006:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8003008:	88fb      	ldrh	r3, [r7, #6]
 800300a:	211f      	movs	r1, #31
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff fea1 	bl	8002d54 <stmpe811_ClearGlobalIT>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800302a:	2300      	movs	r3, #0
 800302c:	73fb      	strb	r3, [r7, #15]
 800302e:	e00b      	b.n	8003048 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	4a0a      	ldr	r2, [pc, #40]	; (800305c <stmpe811_GetInstance+0x40>)
 8003034:	5cd3      	ldrb	r3, [r2, r3]
 8003036:	b29b      	uxth	r3, r3
 8003038:	88fa      	ldrh	r2, [r7, #6]
 800303a:	429a      	cmp	r2, r3
 800303c:	d101      	bne.n	8003042 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	e006      	b.n	8003050 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	3301      	adds	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d9f0      	bls.n	8003030 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800304e:	23ff      	movs	r3, #255	; 0xff
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	2000089c 	.word	0x2000089c

08003060 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	; 0x28
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10e      	bne.n	800308e <BSP_LED_Init+0x2e>
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	4b21      	ldr	r3, [pc, #132]	; (80030fc <BSP_LED_Init+0x9c>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	4a20      	ldr	r2, [pc, #128]	; (80030fc <BSP_LED_Init+0x9c>)
 800307a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800307e:	6313      	str	r3, [r2, #48]	; 0x30
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <BSP_LED_Init+0x9c>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	e010      	b.n	80030b0 <BSP_LED_Init+0x50>
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10d      	bne.n	80030b0 <BSP_LED_Init+0x50>
 8003094:	2300      	movs	r3, #0
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <BSP_LED_Init+0x9c>)
 800309a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309c:	4a17      	ldr	r2, [pc, #92]	; (80030fc <BSP_LED_Init+0x9c>)
 800309e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030a2:	6313      	str	r3, [r2, #48]	; 0x30
 80030a4:	4b15      	ldr	r3, [pc, #84]	; (80030fc <BSP_LED_Init+0x9c>)
 80030a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	4a13      	ldr	r2, [pc, #76]	; (8003100 <BSP_LED_Init+0xa0>)
 80030b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030be:	2301      	movs	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80030c2:	2302      	movs	r3, #2
 80030c4:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80030c6:	79fb      	ldrb	r3, [r7, #7]
 80030c8:	4a0e      	ldr	r2, [pc, #56]	; (8003104 <BSP_LED_Init+0xa4>)
 80030ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ce:	f107 0214 	add.w	r2, r7, #20
 80030d2:	4611      	mov	r1, r2
 80030d4:	4618      	mov	r0, r3
 80030d6:	f002 fa89 	bl	80055ec <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	4a09      	ldr	r2, [pc, #36]	; (8003104 <BSP_LED_Init+0xa4>)
 80030de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80030e2:	79fb      	ldrb	r3, [r7, #7]
 80030e4:	4a06      	ldr	r2, [pc, #24]	; (8003100 <BSP_LED_Init+0xa0>)
 80030e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ea:	2200      	movs	r2, #0
 80030ec:	4619      	mov	r1, r3
 80030ee:	f002 fc29 	bl	8005944 <HAL_GPIO_WritePin>
}
 80030f2:	bf00      	nop
 80030f4:	3728      	adds	r7, #40	; 0x28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	0800eda4 	.word	0x0800eda4
 8003104:	20000098 	.word	0x20000098

08003108 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	4a07      	ldr	r2, [pc, #28]	; (8003134 <BSP_LED_On+0x2c>)
 8003116:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	4a06      	ldr	r2, [pc, #24]	; (8003138 <BSP_LED_On+0x30>)
 800311e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003122:	2201      	movs	r2, #1
 8003124:	4619      	mov	r1, r3
 8003126:	f002 fc0d 	bl	8005944 <HAL_GPIO_WritePin>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	20000098 	.word	0x20000098
 8003138:	0800eda4 	.word	0x0800eda4

0800313c <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <BSP_LED_Off+0x2c>)
 800314a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800314e:	79fb      	ldrb	r3, [r7, #7]
 8003150:	4a06      	ldr	r2, [pc, #24]	; (800316c <BSP_LED_Off+0x30>)
 8003152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003156:	2200      	movs	r2, #0
 8003158:	4619      	mov	r1, r3
 800315a:	f002 fbf3 	bl	8005944 <HAL_GPIO_WritePin>
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	20000098 	.word	0x20000098
 800316c:	0800eda4 	.word	0x0800eda4

08003170 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800317a:	79fb      	ldrb	r3, [r7, #7]
 800317c:	4a07      	ldr	r2, [pc, #28]	; (800319c <BSP_LED_Toggle+0x2c>)
 800317e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	4906      	ldr	r1, [pc, #24]	; (80031a0 <BSP_LED_Toggle+0x30>)
 8003186:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800318a:	4619      	mov	r1, r3
 800318c:	4610      	mov	r0, r2
 800318e:	f002 fbf2 	bl	8005976 <HAL_GPIO_TogglePin>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	20000098 	.word	0x20000098
 80031a0:	0800eda4 	.word	0x0800eda4

080031a4 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b08a      	sub	sp, #40	; 0x28
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a33      	ldr	r2, [pc, #204]	; (8003280 <I2Cx_MspInit+0xdc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d15f      	bne.n	8003276 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	4b32      	ldr	r3, [pc, #200]	; (8003284 <I2Cx_MspInit+0xe0>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a31      	ldr	r2, [pc, #196]	; (8003284 <I2Cx_MspInit+0xe0>)
 80031c0:	f043 0304 	orr.w	r3, r3, #4
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <I2Cx_MspInit+0xe0>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <I2Cx_MspInit+0xe0>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a2a      	ldr	r2, [pc, #168]	; (8003284 <I2Cx_MspInit+0xe0>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b28      	ldr	r3, [pc, #160]	; (8003284 <I2Cx_MspInit+0xe0>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80031ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80031f4:	2312      	movs	r3, #18
 80031f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80031f8:	2300      	movs	r3, #0
 80031fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80031fc:	2302      	movs	r3, #2
 80031fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003200:	2304      	movs	r3, #4
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	4619      	mov	r1, r3
 800320a:	481f      	ldr	r0, [pc, #124]	; (8003288 <I2Cx_MspInit+0xe4>)
 800320c:	f002 f9ee 	bl	80055ec <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003214:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003216:	f107 0314 	add.w	r3, r7, #20
 800321a:	4619      	mov	r1, r3
 800321c:	481b      	ldr	r0, [pc, #108]	; (800328c <I2Cx_MspInit+0xe8>)
 800321e:	f002 f9e5 	bl	80055ec <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	4b17      	ldr	r3, [pc, #92]	; (8003284 <I2Cx_MspInit+0xe0>)
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	4a16      	ldr	r2, [pc, #88]	; (8003284 <I2Cx_MspInit+0xe0>)
 800322c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003230:	6413      	str	r3, [r2, #64]	; 0x40
 8003232:	4b14      	ldr	r3, [pc, #80]	; (8003284 <I2Cx_MspInit+0xe0>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <I2Cx_MspInit+0xe0>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <I2Cx_MspInit+0xe0>)
 8003244:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003248:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <I2Cx_MspInit+0xe0>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <I2Cx_MspInit+0xe0>)
 8003250:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003254:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003256:	2200      	movs	r2, #0
 8003258:	210f      	movs	r1, #15
 800325a:	2048      	movs	r0, #72	; 0x48
 800325c:	f001 fd3b 	bl	8004cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003260:	2048      	movs	r0, #72	; 0x48
 8003262:	f001 fd54 	bl	8004d0e <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003266:	2200      	movs	r2, #0
 8003268:	210f      	movs	r1, #15
 800326a:	2049      	movs	r0, #73	; 0x49
 800326c:	f001 fd33 	bl	8004cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8003270:	2049      	movs	r0, #73	; 0x49
 8003272:	f001 fd4c 	bl	8004d0e <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8003276:	bf00      	nop
 8003278:	3728      	adds	r7, #40	; 0x28
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40005c00 	.word	0x40005c00
 8003284:	40023800 	.word	0x40023800
 8003288:	40020000 	.word	0x40020000
 800328c:	40020800 	.word	0x40020800

08003290 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8003294:	4814      	ldr	r0, [pc, #80]	; (80032e8 <I2Cx_Init+0x58>)
 8003296:	f003 f831 	bl	80062fc <HAL_I2C_GetState>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d121      	bne.n	80032e4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 80032a0:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <I2Cx_Init+0x58>)
 80032a2:	4a12      	ldr	r2, [pc, #72]	; (80032ec <I2Cx_Init+0x5c>)
 80032a4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80032a6:	4b10      	ldr	r3, [pc, #64]	; (80032e8 <I2Cx_Init+0x58>)
 80032a8:	4a11      	ldr	r2, [pc, #68]	; (80032f0 <I2Cx_Init+0x60>)
 80032aa:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 80032ac:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <I2Cx_Init+0x58>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 80032b2:	4b0d      	ldr	r3, [pc, #52]	; (80032e8 <I2Cx_Init+0x58>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80032b8:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <I2Cx_Init+0x58>)
 80032ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032be:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <I2Cx_Init+0x58>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <I2Cx_Init+0x58>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <I2Cx_Init+0x58>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <I2Cx_Init+0x58>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80032d8:	4803      	ldr	r0, [pc, #12]	; (80032e8 <I2Cx_Init+0x58>)
 80032da:	f7ff ff63 	bl	80031a4 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80032de:	4802      	ldr	r0, [pc, #8]	; (80032e8 <I2Cx_Init+0x58>)
 80032e0:	f002 fb64 	bl	80059ac <HAL_I2C_Init>
  }
}
 80032e4:	bf00      	nop
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	200008a0 	.word	0x200008a0
 80032ec:	40005c00 	.word	0x40005c00
 80032f0:	000186a0 	.word	0x000186a0

080032f4 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	4b13      	ldr	r3, [pc, #76]	; (800334c <I2Cx_ITConfig+0x58>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <I2Cx_ITConfig+0x58>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6313      	str	r3, [r2, #48]	; 0x30
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <I2Cx_ITConfig+0x58>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800331c:	2301      	movs	r3, #1
 800331e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003324:	4b0a      	ldr	r3, [pc, #40]	; (8003350 <I2Cx_ITConfig+0x5c>)
 8003326:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	4619      	mov	r1, r3
 800332c:	4809      	ldr	r0, [pc, #36]	; (8003354 <I2Cx_ITConfig+0x60>)
 800332e:	f002 f95d 	bl	80055ec <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8003332:	2200      	movs	r2, #0
 8003334:	210f      	movs	r1, #15
 8003336:	2028      	movs	r0, #40	; 0x28
 8003338:	f001 fccd 	bl	8004cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 800333c:	2028      	movs	r0, #40	; 0x28
 800333e:	f001 fce6 	bl	8004d0e <HAL_NVIC_EnableIRQ>
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	10210000 	.word	0x10210000
 8003354:	40020000 	.word	0x40020000

08003358 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af04      	add	r7, sp, #16
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
 8003362:	460b      	mov	r3, r1
 8003364:	71bb      	strb	r3, [r7, #6]
 8003366:	4613      	mov	r3, r2
 8003368:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800336e:	79fb      	ldrb	r3, [r7, #7]
 8003370:	b299      	uxth	r1, r3
 8003372:	79bb      	ldrb	r3, [r7, #6]
 8003374:	b29a      	uxth	r2, r3
 8003376:	4b0b      	ldr	r3, [pc, #44]	; (80033a4 <I2Cx_WriteData+0x4c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	9302      	str	r3, [sp, #8]
 800337c:	2301      	movs	r3, #1
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	1d7b      	adds	r3, r7, #5
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2301      	movs	r3, #1
 8003386:	4808      	ldr	r0, [pc, #32]	; (80033a8 <I2Cx_WriteData+0x50>)
 8003388:	f002 fc98 	bl	8005cbc <HAL_I2C_Mem_Write>
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8003396:	f000 f863 	bl	8003460 <I2Cx_Error>
  }        
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200000a0 	.word	0x200000a0
 80033a8:	200008a0 	.word	0x200008a0

080033ac <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af04      	add	r7, sp, #16
 80033b2:	4603      	mov	r3, r0
 80033b4:	460a      	mov	r2, r1
 80033b6:	71fb      	strb	r3, [r7, #7]
 80033b8:	4613      	mov	r3, r2
 80033ba:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	b299      	uxth	r1, r3
 80033c8:	79bb      	ldrb	r3, [r7, #6]
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <I2Cx_ReadData+0x50>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	9302      	str	r3, [sp, #8]
 80033d2:	2301      	movs	r3, #1
 80033d4:	9301      	str	r3, [sp, #4]
 80033d6:	f107 030e 	add.w	r3, r7, #14
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2301      	movs	r3, #1
 80033de:	4808      	ldr	r0, [pc, #32]	; (8003400 <I2Cx_ReadData+0x54>)
 80033e0:	f002 fd66 	bl	8005eb0 <HAL_I2C_Mem_Read>
 80033e4:	4603      	mov	r3, r0
 80033e6:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80033ee:	f000 f837 	bl	8003460 <I2Cx_Error>
  
  }
  return value;
 80033f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200000a0 	.word	0x200000a0
 8003400:	200008a0 	.word	0x200008a0

08003404 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af04      	add	r7, sp, #16
 800340a:	603a      	str	r2, [r7, #0]
 800340c:	461a      	mov	r2, r3
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
 8003412:	460b      	mov	r3, r1
 8003414:	71bb      	strb	r3, [r7, #6]
 8003416:	4613      	mov	r3, r2
 8003418:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	b299      	uxth	r1, r3
 8003422:	79bb      	ldrb	r3, [r7, #6]
 8003424:	b29a      	uxth	r2, r3
 8003426:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <I2Cx_ReadBuffer+0x54>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	9302      	str	r3, [sp, #8]
 800342c:	88bb      	ldrh	r3, [r7, #4]
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	2301      	movs	r3, #1
 8003436:	4809      	ldr	r0, [pc, #36]	; (800345c <I2Cx_ReadBuffer+0x58>)
 8003438:	f002 fd3a 	bl	8005eb0 <HAL_I2C_Mem_Read>
 800343c:	4603      	mov	r3, r0
 800343e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8003446:	2300      	movs	r3, #0
 8003448:	e002      	b.n	8003450 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800344a:	f000 f809 	bl	8003460 <I2Cx_Error>

    return 1;
 800344e:	2301      	movs	r3, #1
  }
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	200000a0 	.word	0x200000a0
 800345c:	200008a0 	.word	0x200008a0

08003460 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8003464:	4803      	ldr	r0, [pc, #12]	; (8003474 <I2Cx_Error+0x14>)
 8003466:	f002 fbe5 	bl	8005c34 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800346a:	f7ff ff11 	bl	8003290 <I2Cx_Init>
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	200008a0 	.word	0x200008a0

08003478 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800347c:	4819      	ldr	r0, [pc, #100]	; (80034e4 <SPIx_Init+0x6c>)
 800347e:	f005 f9de 	bl	800883e <HAL_SPI_GetState>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d12b      	bne.n	80034e0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003488:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <SPIx_Init+0x6c>)
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <SPIx_Init+0x70>)
 800348c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800348e:	4b15      	ldr	r3, [pc, #84]	; (80034e4 <SPIx_Init+0x6c>)
 8003490:	2218      	movs	r2, #24
 8003492:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003494:	4b13      	ldr	r3, [pc, #76]	; (80034e4 <SPIx_Init+0x6c>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800349a:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <SPIx_Init+0x6c>)
 800349c:	2200      	movs	r2, #0
 800349e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80034a0:	4b10      	ldr	r3, [pc, #64]	; (80034e4 <SPIx_Init+0x6c>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <SPIx_Init+0x6c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80034ac:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <SPIx_Init+0x6c>)
 80034ae:	2207      	movs	r2, #7
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80034b2:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <SPIx_Init+0x6c>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80034b8:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <SPIx_Init+0x6c>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80034be:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <SPIx_Init+0x6c>)
 80034c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c4:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80034c6:	4b07      	ldr	r3, [pc, #28]	; (80034e4 <SPIx_Init+0x6c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <SPIx_Init+0x6c>)
 80034ce:	f44f 7282 	mov.w	r2, #260	; 0x104
 80034d2:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80034d4:	4803      	ldr	r0, [pc, #12]	; (80034e4 <SPIx_Init+0x6c>)
 80034d6:	f000 f853 	bl	8003580 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80034da:	4802      	ldr	r0, [pc, #8]	; (80034e4 <SPIx_Init+0x6c>)
 80034dc:	f004 fc25 	bl	8007d2a <HAL_SPI_Init>
  } 
}
 80034e0:	bf00      	nop
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	200008f4 	.word	0x200008f4
 80034e8:	40015000 	.word	0x40015000

080034ec <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	4b09      	ldr	r3, [pc, #36]	; (8003524 <SPIx_Read+0x38>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f107 0108 	add.w	r1, r7, #8
 8003506:	4808      	ldr	r0, [pc, #32]	; (8003528 <SPIx_Read+0x3c>)
 8003508:	f004 fe0c 	bl	8008124 <HAL_SPI_Receive>
 800350c:	4603      	mov	r3, r0
 800350e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003516:	f000 f827 	bl	8003568 <SPIx_Error>
  }
  
  return readvalue;
 800351a:	68bb      	ldr	r3, [r7, #8]
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	200000a4 	.word	0x200000a4
 8003528:	200008f4 	.word	0x200008f4

0800352c <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <SPIx_Write+0x34>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	1db9      	adds	r1, r7, #6
 8003540:	2201      	movs	r2, #1
 8003542:	4808      	ldr	r0, [pc, #32]	; (8003564 <SPIx_Write+0x38>)
 8003544:	f004 fc98 	bl	8007e78 <HAL_SPI_Transmit>
 8003548:	4603      	mov	r3, r0
 800354a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8003552:	f000 f809 	bl	8003568 <SPIx_Error>
  }
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200000a4 	.word	0x200000a4
 8003564:	200008f4 	.word	0x200008f4

08003568 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800356c:	4803      	ldr	r0, [pc, #12]	; (800357c <SPIx_Error+0x14>)
 800356e:	f004 fc47 	bl	8007e00 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003572:	f7ff ff81 	bl	8003478 <SPIx_Init>
}
 8003576:	bf00      	nop
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200008f4 	.word	0x200008f4

08003580 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	4b17      	ldr	r3, [pc, #92]	; (80035ec <SPIx_MspInit+0x6c>)
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	4a16      	ldr	r2, [pc, #88]	; (80035ec <SPIx_MspInit+0x6c>)
 8003592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003596:	6453      	str	r3, [r2, #68]	; 0x44
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <SPIx_MspInit+0x6c>)
 800359a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	4b10      	ldr	r3, [pc, #64]	; (80035ec <SPIx_MspInit+0x6c>)
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	4a0f      	ldr	r2, [pc, #60]	; (80035ec <SPIx_MspInit+0x6c>)
 80035ae:	f043 0320 	orr.w	r3, r3, #32
 80035b2:	6313      	str	r3, [r2, #48]	; 0x30
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <SPIx_MspInit+0x6c>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80035c0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80035c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80035c6:	2302      	movs	r3, #2
 80035c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80035ca:	2302      	movs	r3, #2
 80035cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80035ce:	2301      	movs	r3, #1
 80035d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80035d2:	2305      	movs	r3, #5
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	4619      	mov	r1, r3
 80035dc:	4804      	ldr	r0, [pc, #16]	; (80035f0 <SPIx_MspInit+0x70>)
 80035de:	f002 f805 	bl	80055ec <HAL_GPIO_Init>
}
 80035e2:	bf00      	nop
 80035e4:	3728      	adds	r7, #40	; 0x28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40021400 	.word	0x40021400

080035f4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80035fa:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <LCD_IO_Init+0xe0>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d164      	bne.n	80036cc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003602:	4b34      	ldr	r3, [pc, #208]	; (80036d4 <LCD_IO_Init+0xe0>)
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003608:	2300      	movs	r3, #0
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <LCD_IO_Init+0xe4>)
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	4a31      	ldr	r2, [pc, #196]	; (80036d8 <LCD_IO_Init+0xe4>)
 8003612:	f043 0308 	orr.w	r3, r3, #8
 8003616:	6313      	str	r3, [r2, #48]	; 0x30
 8003618:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <LCD_IO_Init+0xe4>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	60bb      	str	r3, [r7, #8]
 8003622:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003628:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800362a:	2301      	movs	r3, #1
 800362c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003632:	2302      	movs	r3, #2
 8003634:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003636:	f107 030c 	add.w	r3, r7, #12
 800363a:	4619      	mov	r1, r3
 800363c:	4827      	ldr	r0, [pc, #156]	; (80036dc <LCD_IO_Init+0xe8>)
 800363e:	f001 ffd5 	bl	80055ec <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <LCD_IO_Init+0xe4>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a23      	ldr	r2, [pc, #140]	; (80036d8 <LCD_IO_Init+0xe4>)
 800364c:	f043 0308 	orr.w	r3, r3, #8
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b21      	ldr	r3, [pc, #132]	; (80036d8 <LCD_IO_Init+0xe4>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	607b      	str	r3, [r7, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800365e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003662:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800366c:	2302      	movs	r3, #2
 800366e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	4619      	mov	r1, r3
 8003676:	4819      	ldr	r0, [pc, #100]	; (80036dc <LCD_IO_Init+0xe8>)
 8003678:	f001 ffb8 	bl	80055ec <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800367c:	2300      	movs	r3, #0
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <LCD_IO_Init+0xe4>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	4a14      	ldr	r2, [pc, #80]	; (80036d8 <LCD_IO_Init+0xe4>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	6313      	str	r3, [r2, #48]	; 0x30
 800368c:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <LCD_IO_Init+0xe4>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	603b      	str	r3, [r7, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003698:	2304      	movs	r3, #4
 800369a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800369c:	2301      	movs	r3, #1
 800369e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80036a4:	2302      	movs	r3, #2
 80036a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80036a8:	f107 030c 	add.w	r3, r7, #12
 80036ac:	4619      	mov	r1, r3
 80036ae:	480c      	ldr	r0, [pc, #48]	; (80036e0 <LCD_IO_Init+0xec>)
 80036b0:	f001 ff9c 	bl	80055ec <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80036b4:	2200      	movs	r2, #0
 80036b6:	2104      	movs	r1, #4
 80036b8:	4809      	ldr	r0, [pc, #36]	; (80036e0 <LCD_IO_Init+0xec>)
 80036ba:	f002 f943 	bl	8005944 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80036be:	2201      	movs	r2, #1
 80036c0:	2104      	movs	r1, #4
 80036c2:	4807      	ldr	r0, [pc, #28]	; (80036e0 <LCD_IO_Init+0xec>)
 80036c4:	f002 f93e 	bl	8005944 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80036c8:	f7ff fed6 	bl	8003478 <SPIx_Init>
  }
}
 80036cc:	bf00      	nop
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	2000094c 	.word	0x2000094c
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	40020800 	.word	0x40020800

080036e4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80036ee:	2201      	movs	r2, #1
 80036f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036f4:	480a      	ldr	r0, [pc, #40]	; (8003720 <LCD_IO_WriteData+0x3c>)
 80036f6:	f002 f925 	bl	8005944 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80036fa:	2200      	movs	r2, #0
 80036fc:	2104      	movs	r1, #4
 80036fe:	4809      	ldr	r0, [pc, #36]	; (8003724 <LCD_IO_WriteData+0x40>)
 8003700:	f002 f920 	bl	8005944 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003704:	88fb      	ldrh	r3, [r7, #6]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ff10 	bl	800352c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800370c:	2201      	movs	r2, #1
 800370e:	2104      	movs	r1, #4
 8003710:	4804      	ldr	r0, [pc, #16]	; (8003724 <LCD_IO_WriteData+0x40>)
 8003712:	f002 f917 	bl	8005944 <HAL_GPIO_WritePin>
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40020c00 	.word	0x40020c00
 8003724:	40020800 	.word	0x40020800

08003728 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003732:	2200      	movs	r2, #0
 8003734:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003738:	480a      	ldr	r0, [pc, #40]	; (8003764 <LCD_IO_WriteReg+0x3c>)
 800373a:	f002 f903 	bl	8005944 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800373e:	2200      	movs	r2, #0
 8003740:	2104      	movs	r1, #4
 8003742:	4809      	ldr	r0, [pc, #36]	; (8003768 <LCD_IO_WriteReg+0x40>)
 8003744:	f002 f8fe 	bl	8005944 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003748:	79fb      	ldrb	r3, [r7, #7]
 800374a:	b29b      	uxth	r3, r3
 800374c:	4618      	mov	r0, r3
 800374e:	f7ff feed 	bl	800352c <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003752:	2201      	movs	r2, #1
 8003754:	2104      	movs	r1, #4
 8003756:	4804      	ldr	r0, [pc, #16]	; (8003768 <LCD_IO_WriteReg+0x40>)
 8003758:	f002 f8f4 	bl	8005944 <HAL_GPIO_WritePin>
}
 800375c:	bf00      	nop
 800375e:	3708      	adds	r7, #8
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40020c00 	.word	0x40020c00
 8003768:	40020800 	.word	0x40020800

0800376c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	460a      	mov	r2, r1
 8003776:	80fb      	strh	r3, [r7, #6]
 8003778:	4613      	mov	r3, r2
 800377a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003780:	2200      	movs	r2, #0
 8003782:	2104      	movs	r1, #4
 8003784:	4810      	ldr	r0, [pc, #64]	; (80037c8 <LCD_IO_ReadData+0x5c>)
 8003786:	f002 f8dd 	bl	8005944 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800378a:	2200      	movs	r2, #0
 800378c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003790:	480e      	ldr	r0, [pc, #56]	; (80037cc <LCD_IO_ReadData+0x60>)
 8003792:	f002 f8d7 	bl	8005944 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003796:	88fb      	ldrh	r3, [r7, #6]
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fec7 	bl	800352c <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800379e:	797b      	ldrb	r3, [r7, #5]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff fea3 	bl	80034ec <SPIx_Read>
 80037a6:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80037a8:	2201      	movs	r2, #1
 80037aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037ae:	4807      	ldr	r0, [pc, #28]	; (80037cc <LCD_IO_ReadData+0x60>)
 80037b0:	f002 f8c8 	bl	8005944 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80037b4:	2201      	movs	r2, #1
 80037b6:	2104      	movs	r1, #4
 80037b8:	4803      	ldr	r0, [pc, #12]	; (80037c8 <LCD_IO_ReadData+0x5c>)
 80037ba:	f002 f8c3 	bl	8005944 <HAL_GPIO_WritePin>
  
  return readvalue;
 80037be:	68fb      	ldr	r3, [r7, #12]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40020800 	.word	0x40020800
 80037cc:	40020c00 	.word	0x40020c00

080037d0 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f001 f97d 	bl	8004ad8 <HAL_Delay>
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80037ea:	f7ff fd51 	bl	8003290 <I2Cx_Init>
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80037f6:	f7ff fd7d 	bl	80032f4 <I2Cx_ITConfig>
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}

080037fe <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	4603      	mov	r3, r0
 8003806:	71fb      	strb	r3, [r7, #7]
 8003808:	460b      	mov	r3, r1
 800380a:	71bb      	strb	r3, [r7, #6]
 800380c:	4613      	mov	r3, r2
 800380e:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8003810:	797a      	ldrb	r2, [r7, #5]
 8003812:	79b9      	ldrb	r1, [r7, #6]
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fd9e 	bl	8003358 <I2Cx_WriteData>
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	460a      	mov	r2, r1
 800382e:	71fb      	strb	r3, [r7, #7]
 8003830:	4613      	mov	r3, r2
 8003832:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8003834:	79ba      	ldrb	r2, [r7, #6]
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f7ff fdb6 	bl	80033ac <I2Cx_ReadData>
 8003840:	4603      	mov	r3, r0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	603a      	str	r2, [r7, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	4603      	mov	r3, r0
 8003856:	71fb      	strb	r3, [r7, #7]
 8003858:	460b      	mov	r3, r1
 800385a:	71bb      	strb	r3, [r7, #6]
 800385c:	4613      	mov	r3, r2
 800385e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003860:	88bb      	ldrh	r3, [r7, #4]
 8003862:	79b9      	ldrb	r1, [r7, #6]
 8003864:	79f8      	ldrb	r0, [r7, #7]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	f7ff fdcc 	bl	8003404 <I2Cx_ReadBuffer>
 800386c:	4603      	mov	r3, r0
 800386e:	b29b      	uxth	r3, r3
}
 8003870:	4618      	mov	r0, r3
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f001 f929 	bl	8004ad8 <HAL_Delay>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <BSP_LCD_Init_Flipped+0x14>)
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 800389a:	f000 f805 	bl	80038a8 <BSP_LCD_Init>
 800389e:	4603      	mov	r3, r0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	20000a88 	.word	0x20000a88

080038a8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80038ac:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038ae:	4a2e      	ldr	r2, [pc, #184]	; (8003968 <BSP_LCD_Init+0xc0>)
 80038b0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80038b2:	4b2c      	ldr	r3, [pc, #176]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038b4:	2209      	movs	r2, #9
 80038b6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80038be:	4b29      	ldr	r3, [pc, #164]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038c0:	221d      	movs	r2, #29
 80038c2:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038c6:	2203      	movs	r2, #3
 80038c8:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80038ca:	4b26      	ldr	r3, [pc, #152]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038cc:	f240 120d 	movw	r2, #269	; 0x10d
 80038d0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038d4:	f240 1243 	movw	r2, #323	; 0x143
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038dc:	f240 1217 	movw	r2, #279	; 0x117
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038e4:	f240 1247 	movw	r2, #327	; 0x147
 80038e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80038f2:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <BSP_LCD_Init+0xbc>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <BSP_LCD_Init+0xc4>)
 8003904:	2208      	movs	r2, #8
 8003906:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003908:	4b18      	ldr	r3, [pc, #96]	; (800396c <BSP_LCD_Init+0xc4>)
 800390a:	22c0      	movs	r2, #192	; 0xc0
 800390c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <BSP_LCD_Init+0xc4>)
 8003910:	2204      	movs	r2, #4
 8003912:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003914:	4b15      	ldr	r3, [pc, #84]	; (800396c <BSP_LCD_Init+0xc4>)
 8003916:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800391a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800391c:	4813      	ldr	r0, [pc, #76]	; (800396c <BSP_LCD_Init+0xc4>)
 800391e:	f003 ffbb 	bl	8007898 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003922:	4b10      	ldr	r3, [pc, #64]	; (8003964 <BSP_LCD_Init+0xbc>)
 8003924:	2200      	movs	r2, #0
 8003926:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8003928:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <BSP_LCD_Init+0xbc>)
 800392a:	2200      	movs	r2, #0
 800392c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <BSP_LCD_Init+0xbc>)
 8003930:	2200      	movs	r2, #0
 8003932:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <BSP_LCD_Init+0xbc>)
 8003936:	2200      	movs	r2, #0
 8003938:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800393a:	f000 fb77 	bl	800402c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800393e:	4809      	ldr	r0, [pc, #36]	; (8003964 <BSP_LCD_Init+0xbc>)
 8003940:	f003 f842 	bl	80069c8 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <BSP_LCD_Init+0xc8>)
 8003946:	4a0b      	ldr	r2, [pc, #44]	; (8003974 <BSP_LCD_Init+0xcc>)
 8003948:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <BSP_LCD_Init+0xc8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003952:	f000 fd79 	bl	8004448 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003956:	4808      	ldr	r0, [pc, #32]	; (8003978 <BSP_LCD_Init+0xd0>)
 8003958:	f000 f8ce 	bl	8003af8 <BSP_LCD_SetFont>

  return LCD_OK;
 800395c:	2300      	movs	r3, #0
}  
 800395e:	4618      	mov	r0, r3
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000950 	.word	0x20000950
 8003968:	40016800 	.word	0x40016800
 800396c:	20000a38 	.word	0x20000a38
 8003970:	20000a84 	.word	0x20000a84
 8003974:	20000038 	.word	0x20000038
 8003978:	200000a8 	.word	0x200000a8

0800397c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <BSP_LCD_GetXSize+0x14>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	4798      	blx	r3
 8003988:	4603      	mov	r3, r0
}
 800398a:	4618      	mov	r0, r3
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000a84 	.word	0x20000a84

08003994 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <BSP_LCD_GetYSize+0x14>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	4798      	blx	r3
 80039a0:	4603      	mov	r3, r0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000a84 	.word	0x20000a84

080039ac <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b090      	sub	sp, #64	; 0x40
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80039bc:	f7ff ffde 	bl	800397c <BSP_LCD_GetXSize>
 80039c0:	4603      	mov	r3, r0
 80039c2:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80039c8:	f7ff ffe4 	bl	8003994 <BSP_LCD_GetYSize>
 80039cc:	4603      	mov	r3, r0
 80039ce:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80039d8:	23ff      	movs	r3, #255	; 0xff
 80039da:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80039f2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80039f6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80039f8:	2307      	movs	r3, #7
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80039fc:	f7ff ffbe 	bl	800397c <BSP_LCD_GetXSize>
 8003a00:	4603      	mov	r3, r0
 8003a02:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003a04:	f7ff ffc6 	bl	8003994 <BSP_LCD_GetYSize>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003a0c:	88fa      	ldrh	r2, [r7, #6]
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	4619      	mov	r1, r3
 8003a14:	4814      	ldr	r0, [pc, #80]	; (8003a68 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003a16:	f003 f8b1 	bl	8006b7c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003a1a:	88fa      	ldrh	r2, [r7, #6]
 8003a1c:	4913      	ldr	r1, [pc, #76]	; (8003a6c <BSP_LCD_LayerDefaultInit+0xc0>)
 8003a1e:	4613      	mov	r3, r2
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	440b      	add	r3, r1
 8003a28:	3304      	adds	r3, #4
 8003a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a2e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003a30:	88fa      	ldrh	r2, [r7, #6]
 8003a32:	490e      	ldr	r1, [pc, #56]	; (8003a6c <BSP_LCD_LayerDefaultInit+0xc0>)
 8003a34:	4613      	mov	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	3308      	adds	r3, #8
 8003a40:	4a0b      	ldr	r2, [pc, #44]	; (8003a70 <BSP_LCD_LayerDefaultInit+0xc4>)
 8003a42:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003a44:	88fa      	ldrh	r2, [r7, #6]
 8003a46:	4909      	ldr	r1, [pc, #36]	; (8003a6c <BSP_LCD_LayerDefaultInit+0xc0>)
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	440b      	add	r3, r1
 8003a52:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003a56:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003a58:	4803      	ldr	r0, [pc, #12]	; (8003a68 <BSP_LCD_LayerDefaultInit+0xbc>)
 8003a5a:	f003 f8cd 	bl	8006bf8 <HAL_LTDC_EnableDither>
}
 8003a5e:	bf00      	nop
 8003a60:	3740      	adds	r7, #64	; 0x40
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000950 	.word	0x20000950
 8003a6c:	20000a6c 	.word	0x20000a6c
 8003a70:	200000a8 	.word	0x200000a8

08003a74 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003a7c:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <BSP_LCD_SelectLayer+0x1c>)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6013      	str	r3, [r2, #0]
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000a68 	.word	0x20000a68

08003a94 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003a9c:	4b07      	ldr	r3, [pc, #28]	; (8003abc <BSP_LCD_SetTextColor+0x28>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4907      	ldr	r1, [pc, #28]	; (8003ac0 <BSP_LCD_SetTextColor+0x2c>)
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	601a      	str	r2, [r3, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	20000a68 	.word	0x20000a68
 8003ac0:	20000a6c 	.word	0x20000a6c

08003ac4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003acc:	4b08      	ldr	r3, [pc, #32]	; (8003af0 <BSP_LCD_SetBackColor+0x2c>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	4908      	ldr	r1, [pc, #32]	; (8003af4 <BSP_LCD_SetBackColor+0x30>)
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	3304      	adds	r3, #4
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	601a      	str	r2, [r3, #0]
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000a68 	.word	0x20000a68
 8003af4:	20000a6c 	.word	0x20000a6c

08003af8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <BSP_LCD_SetFont+0x2c>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4908      	ldr	r1, [pc, #32]	; (8003b28 <BSP_LCD_SetFont+0x30>)
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	3308      	adds	r3, #8
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	601a      	str	r2, [r3, #0]
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000a68 	.word	0x20000a68
 8003b28:	20000a6c 	.word	0x20000a6c

08003b2c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af02      	add	r7, sp, #8
 8003b32:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003b34:	4b0f      	ldr	r3, [pc, #60]	; (8003b74 <BSP_LCD_Clear+0x48>)
 8003b36:	681c      	ldr	r4, [r3, #0]
 8003b38:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <BSP_LCD_Clear+0x48>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <BSP_LCD_Clear+0x4c>)
 8003b3e:	2134      	movs	r1, #52	; 0x34
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	335c      	adds	r3, #92	; 0x5c
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461e      	mov	r6, r3
 8003b4c:	f7ff ff16 	bl	800397c <BSP_LCD_GetXSize>
 8003b50:	4605      	mov	r5, r0
 8003b52:	f7ff ff1f 	bl	8003994 <BSP_LCD_GetYSize>
 8003b56:	4602      	mov	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	462a      	mov	r2, r5
 8003b64:	4631      	mov	r1, r6
 8003b66:	4620      	mov	r0, r4
 8003b68:	f000 fc36 	bl	80043d8 <FillBuffer>
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b74:	20000a68 	.word	0x20000a68
 8003b78:	20000950 	.word	0x20000950

08003b7c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	80fb      	strh	r3, [r7, #6]
 8003b86:	460b      	mov	r3, r1
 8003b88:	80bb      	strh	r3, [r7, #4]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	; (8003bfc <BSP_LCD_DisplayChar+0x80>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	491b      	ldr	r1, [pc, #108]	; (8003c00 <BSP_LCD_DisplayChar+0x84>)
 8003b94:	4613      	mov	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003baa:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <BSP_LCD_DisplayChar+0x80>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4c14      	ldr	r4, [pc, #80]	; (8003c00 <BSP_LCD_DisplayChar+0x84>)
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	4423      	add	r3, r4
 8003bba:	3308      	adds	r3, #8
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003bc0:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	; (8003bfc <BSP_LCD_DisplayChar+0x80>)
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	4c0d      	ldr	r4, [pc, #52]	; (8003c00 <BSP_LCD_DisplayChar+0x84>)
 8003bca:	4613      	mov	r3, r2
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	4413      	add	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4423      	add	r3, r4
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	889b      	ldrh	r3, [r3, #4]
 8003bda:	3307      	adds	r3, #7
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	da00      	bge.n	8003be2 <BSP_LCD_DisplayChar+0x66>
 8003be0:	3307      	adds	r3, #7
 8003be2:	10db      	asrs	r3, r3, #3
 8003be4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003be8:	18ca      	adds	r2, r1, r3
 8003bea:	88b9      	ldrh	r1, [r7, #4]
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fb38 	bl	8004264 <DrawChar>
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd90      	pop	{r4, r7, pc}
 8003bfc:	20000a68 	.word	0x20000a68
 8003c00:	20000a6c 	.word	0x20000a6c

08003c04 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003c04:	b5b0      	push	{r4, r5, r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60ba      	str	r2, [r7, #8]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	81fb      	strh	r3, [r7, #14]
 8003c12:	460b      	mov	r3, r1
 8003c14:	81bb      	strh	r3, [r7, #12]
 8003c16:	4613      	mov	r3, r2
 8003c18:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	83fb      	strh	r3, [r7, #30]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	2300      	movs	r3, #0
 8003c28:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003c2e:	e002      	b.n	8003c36 <BSP_LCD_DisplayStringAt+0x32>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	3301      	adds	r3, #1
 8003c34:	61bb      	str	r3, [r7, #24]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	617a      	str	r2, [r7, #20]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f6      	bne.n	8003c30 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003c42:	f7ff fe9b 	bl	800397c <BSP_LCD_GetXSize>
 8003c46:	4601      	mov	r1, r0
 8003c48:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <BSP_LCD_DisplayStringAt+0x174>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	484b      	ldr	r0, [pc, #300]	; (8003d7c <BSP_LCD_DisplayStringAt+0x178>)
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4403      	add	r3, r0
 8003c58:	3308      	adds	r3, #8
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	889b      	ldrh	r3, [r3, #4]
 8003c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c62:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003c64:	79fb      	ldrb	r3, [r7, #7]
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d01c      	beq.n	8003ca4 <BSP_LCD_DisplayStringAt+0xa0>
 8003c6a:	2b03      	cmp	r3, #3
 8003c6c:	dc33      	bgt.n	8003cd6 <BSP_LCD_DisplayStringAt+0xd2>
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d002      	beq.n	8003c78 <BSP_LCD_DisplayStringAt+0x74>
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d019      	beq.n	8003caa <BSP_LCD_DisplayStringAt+0xa6>
 8003c76:	e02e      	b.n	8003cd6 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	1ad1      	subs	r1, r2, r3
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <BSP_LCD_DisplayStringAt+0x174>)
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	483e      	ldr	r0, [pc, #248]	; (8003d7c <BSP_LCD_DisplayStringAt+0x178>)
 8003c84:	4613      	mov	r3, r2
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4403      	add	r3, r0
 8003c8e:	3308      	adds	r3, #8
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	889b      	ldrh	r3, [r3, #4]
 8003c94:	fb01 f303 	mul.w	r3, r1, r3
 8003c98:	085b      	lsrs	r3, r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	83fb      	strh	r3, [r7, #30]
      break;
 8003ca2:	e01b      	b.n	8003cdc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003ca4:	89fb      	ldrh	r3, [r7, #14]
 8003ca6:	83fb      	strh	r3, [r7, #30]
      break;
 8003ca8:	e018      	b.n	8003cdc <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	b299      	uxth	r1, r3
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <BSP_LCD_DisplayStringAt+0x174>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	4831      	ldr	r0, [pc, #196]	; (8003d7c <BSP_LCD_DisplayStringAt+0x178>)
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	889b      	ldrh	r3, [r3, #4]
 8003cc8:	fb11 f303 	smulbb	r3, r1, r3
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	89fb      	ldrh	r3, [r7, #14]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	83fb      	strh	r3, [r7, #30]
      break;
 8003cd4:	e002      	b.n	8003cdc <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003cd6:	89fb      	ldrh	r3, [r7, #14]
 8003cd8:	83fb      	strh	r3, [r7, #30]
      break;
 8003cda:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003cdc:	e01a      	b.n	8003d14 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	89b9      	ldrh	r1, [r7, #12]
 8003ce4:	8bfb      	ldrh	r3, [r7, #30]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ff48 	bl	8003b7c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003cec:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <BSP_LCD_DisplayStringAt+0x174>)
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	4922      	ldr	r1, [pc, #136]	; (8003d7c <BSP_LCD_DisplayStringAt+0x178>)
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	3308      	adds	r3, #8
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	889a      	ldrh	r2, [r3, #4]
 8003d02:	8bfb      	ldrh	r3, [r7, #30]
 8003d04:	4413      	add	r3, r2
 8003d06:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	60bb      	str	r3, [r7, #8]
    i++;
 8003d0e:	8bbb      	ldrh	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	bf14      	ite	ne
 8003d1c:	2301      	movne	r3, #1
 8003d1e:	2300      	moveq	r3, #0
 8003d20:	b2dc      	uxtb	r4, r3
 8003d22:	f7ff fe2b 	bl	800397c <BSP_LCD_GetXSize>
 8003d26:	8bb9      	ldrh	r1, [r7, #28]
 8003d28:	4b13      	ldr	r3, [pc, #76]	; (8003d78 <BSP_LCD_DisplayStringAt+0x174>)
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	4d13      	ldr	r5, [pc, #76]	; (8003d7c <BSP_LCD_DisplayStringAt+0x178>)
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	442b      	add	r3, r5
 8003d38:	3308      	adds	r3, #8
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	889b      	ldrh	r3, [r3, #4]
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	1ac3      	subs	r3, r0, r3
 8003d44:	b299      	uxth	r1, r3
 8003d46:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <BSP_LCD_DisplayStringAt+0x174>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	480c      	ldr	r0, [pc, #48]	; (8003d7c <BSP_LCD_DisplayStringAt+0x178>)
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4403      	add	r3, r0
 8003d56:	3308      	adds	r3, #8
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	889b      	ldrh	r3, [r3, #4]
 8003d5c:	4299      	cmp	r1, r3
 8003d5e:	bf2c      	ite	cs
 8003d60:	2301      	movcs	r3, #1
 8003d62:	2300      	movcc	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	4023      	ands	r3, r4
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1b7      	bne.n	8003cde <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
 8003d72:	3720      	adds	r7, #32
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bdb0      	pop	{r4, r5, r7, pc}
 8003d78:	20000a68 	.word	0x20000a68
 8003d7c:	20000a6c 	.word	0x20000a6c

08003d80 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b08b      	sub	sp, #44	; 0x2c
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4604      	mov	r4, r0
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	80fb      	strh	r3, [r7, #6]
 8003d92:	4603      	mov	r3, r0
 8003d94:	80bb      	strh	r3, [r7, #4]
 8003d96:	460b      	mov	r3, r1
 8003d98:	807b      	strh	r3, [r7, #2]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003d9e:	2300      	movs	r3, #0
 8003da0:	823b      	strh	r3, [r7, #16]
 8003da2:	2300      	movs	r3, #0
 8003da4:	81fb      	strh	r3, [r7, #14]
 8003da6:	2300      	movs	r3, #0
 8003da8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003daa:	2300      	movs	r3, #0
 8003dac:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003dae:	2300      	movs	r3, #0
 8003db0:	847b      	strh	r3, [r7, #34]	; 0x22
 8003db2:	2300      	movs	r3, #0
 8003db4:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8003db6:	2300      	movs	r3, #0
 8003db8:	83fb      	strh	r3, [r7, #30]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	83bb      	strh	r3, [r7, #28]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	837b      	strh	r3, [r7, #26]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	833b      	strh	r3, [r7, #24]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	82fb      	strh	r3, [r7, #22]
 8003dca:	2300      	movs	r3, #0
 8003dcc:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003dd2:	887a      	ldrh	r2, [r7, #2]
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bfb8      	it	lt
 8003ddc:	425b      	neglt	r3, r3
 8003dde:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003de0:	883a      	ldrh	r2, [r7, #0]
 8003de2:	88bb      	ldrh	r3, [r7, #4]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bfb8      	it	lt
 8003dea:	425b      	neglt	r3, r3
 8003dec:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003df2:	88bb      	ldrh	r3, [r7, #4]
 8003df4:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8003df6:	887a      	ldrh	r2, [r7, #2]
 8003df8:	88fb      	ldrh	r3, [r7, #6]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d304      	bcc.n	8003e08 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	843b      	strh	r3, [r7, #32]
 8003e06:	e005      	b.n	8003e14 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e0c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e12:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8003e14:	883a      	ldrh	r2, [r7, #0]
 8003e16:	88bb      	ldrh	r3, [r7, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d304      	bcc.n	8003e26 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003e20:	2301      	movs	r3, #1
 8003e22:	83bb      	strh	r3, [r7, #28]
 8003e24:	e005      	b.n	8003e32 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003e26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e2a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e30:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003e32:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	db10      	blt.n	8003e60 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003e3e:	2300      	movs	r3, #0
 8003e40:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003e42:	2300      	movs	r3, #0
 8003e44:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003e46:	8a3b      	ldrh	r3, [r7, #16]
 8003e48:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003e4a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003e4e:	0fda      	lsrs	r2, r3, #31
 8003e50:	4413      	add	r3, r2
 8003e52:	105b      	asrs	r3, r3, #1
 8003e54:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8003e56:	89fb      	ldrh	r3, [r7, #14]
 8003e58:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8003e5a:	8a3b      	ldrh	r3, [r7, #16]
 8003e5c:	82bb      	strh	r3, [r7, #20]
 8003e5e:	e00f      	b.n	8003e80 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003e60:	2300      	movs	r3, #0
 8003e62:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003e64:	2300      	movs	r3, #0
 8003e66:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003e68:	89fb      	ldrh	r3, [r7, #14]
 8003e6a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003e6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e70:	0fda      	lsrs	r2, r3, #31
 8003e72:	4413      	add	r3, r2
 8003e74:	105b      	asrs	r3, r3, #1
 8003e76:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8003e78:	8a3b      	ldrh	r3, [r7, #16]
 8003e7a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003e7c:	89fb      	ldrh	r3, [r7, #14]
 8003e7e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003e80:	2300      	movs	r3, #0
 8003e82:	827b      	strh	r3, [r7, #18]
 8003e84:	e037      	b.n	8003ef6 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003e86:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003e88:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <BSP_LCD_DrawLine+0x18c>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4c20      	ldr	r4, [pc, #128]	; (8003f10 <BSP_LCD_DrawLine+0x190>)
 8003e90:	4613      	mov	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4423      	add	r3, r4
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	f000 f99b 	bl	80041d8 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003ea2:	8b3a      	ldrh	r2, [r7, #24]
 8003ea4:	8afb      	ldrh	r3, [r7, #22]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003eac:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003eb0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	db0e      	blt.n	8003ed6 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003eb8:	8b3a      	ldrh	r2, [r7, #24]
 8003eba:	8b7b      	ldrh	r3, [r7, #26]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003ec2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ec6:	4413      	add	r3, r2
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003ecc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ece:	8bfb      	ldrh	r3, [r7, #30]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003ed6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ed8:	8c3b      	ldrh	r3, [r7, #32]
 8003eda:	4413      	add	r3, r2
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003ee0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ee2:	8bbb      	ldrh	r3, [r7, #28]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003eea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	827b      	strh	r3, [r7, #18]
 8003ef6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003efa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	ddc1      	ble.n	8003e86 <BSP_LCD_DrawLine+0x106>
  }
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	372c      	adds	r7, #44	; 0x2c
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd90      	pop	{r4, r7, pc}
 8003f0c:	20000a68 	.word	0x20000a68
 8003f10:	20000a6c 	.word	0x20000a6c

08003f14 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f18:	b086      	sub	sp, #24
 8003f1a:	af02      	add	r7, sp, #8
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	4608      	mov	r0, r1
 8003f20:	4611      	mov	r1, r2
 8003f22:	461a      	mov	r2, r3
 8003f24:	4623      	mov	r3, r4
 8003f26:	80fb      	strh	r3, [r7, #6]
 8003f28:	4603      	mov	r3, r0
 8003f2a:	80bb      	strh	r3, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	807b      	strh	r3, [r7, #2]
 8003f30:	4613      	mov	r3, r2
 8003f32:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003f38:	4b30      	ldr	r3, [pc, #192]	; (8003ffc <BSP_LCD_FillRect+0xe8>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	4930      	ldr	r1, [pc, #192]	; (8004000 <BSP_LCD_FillRect+0xec>)
 8003f3e:	4613      	mov	r3, r2
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fda2 	bl	8003a94 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8003f50:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <BSP_LCD_FillRect+0xf0>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01b      	beq.n	8003f90 <BSP_LCD_FillRect+0x7c>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +76800); //Rotate by 180°
 8003f58:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <BSP_LCD_FillRect+0xe8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a2a      	ldr	r2, [pc, #168]	; (8004008 <BSP_LCD_FillRect+0xf4>)
 8003f5e:	2134      	movs	r1, #52	; 0x34
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	335c      	adds	r3, #92	; 0x5c
 8003f68:	681c      	ldr	r4, [r3, #0]
 8003f6a:	f7ff fd07 	bl	800397c <BSP_LCD_GetXSize>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	425b      	negs	r3, r3
 8003f72:	88b9      	ldrh	r1, [r7, #4]
 8003f74:	883a      	ldrh	r2, [r7, #0]
 8003f76:	440a      	add	r2, r1
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	88f9      	ldrh	r1, [r7, #6]
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	440a      	add	r2, r1
 8003f82:	1a9b      	subs	r3, r3, r2
 8003f84:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4423      	add	r3, r4
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	e013      	b.n	8003fb8 <BSP_LCD_FillRect+0xa4>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003f90:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <BSP_LCD_FillRect+0xe8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a1c      	ldr	r2, [pc, #112]	; (8004008 <BSP_LCD_FillRect+0xf4>)
 8003f96:	2134      	movs	r1, #52	; 0x34
 8003f98:	fb01 f303 	mul.w	r3, r1, r3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	335c      	adds	r3, #92	; 0x5c
 8003fa0:	681c      	ldr	r4, [r3, #0]
 8003fa2:	f7ff fceb 	bl	800397c <BSP_LCD_GetXSize>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	88bb      	ldrh	r3, [r7, #4]
 8003faa:	fb03 f202 	mul.w	r2, r3, r2
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4423      	add	r3, r4
 8003fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <BSP_LCD_FillRect+0xe8>)
 8003fba:	681c      	ldr	r4, [r3, #0]
 8003fbc:	68fd      	ldr	r5, [r7, #12]
 8003fbe:	887e      	ldrh	r6, [r7, #2]
 8003fc0:	f8b7 8000 	ldrh.w	r8, [r7]
 8003fc4:	f7ff fcda 	bl	800397c <BSP_LCD_GetXSize>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	887b      	ldrh	r3, [r7, #2]
 8003fcc:	1ad1      	subs	r1, r2, r3
 8003fce:	4b0b      	ldr	r3, [pc, #44]	; (8003ffc <BSP_LCD_FillRect+0xe8>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	480b      	ldr	r0, [pc, #44]	; (8004000 <BSP_LCD_FillRect+0xec>)
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4403      	add	r3, r0
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	9100      	str	r1, [sp, #0]
 8003fe4:	4643      	mov	r3, r8
 8003fe6:	4632      	mov	r2, r6
 8003fe8:	4629      	mov	r1, r5
 8003fea:	4620      	mov	r0, r4
 8003fec:	f000 f9f4 	bl	80043d8 <FillBuffer>
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000a68 	.word	0x20000a68
 8004000:	20000a6c 	.word	0x20000a6c
 8004004:	20000a88 	.word	0x20000a88
 8004008:	20000950 	.word	0x20000950

0800400c <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <BSP_LCD_DisplayOn+0x1c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 800401a:	4b03      	ldr	r3, [pc, #12]	; (8004028 <BSP_LCD_DisplayOn+0x1c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	4798      	blx	r3
  }
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000a84 	.word	0x20000a84

0800402c <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	; 0x38
 8004030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	623b      	str	r3, [r7, #32]
 8004036:	4b61      	ldr	r3, [pc, #388]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	4a60      	ldr	r2, [pc, #384]	; (80041bc <BSP_LCD_MspInit+0x190>)
 800403c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004040:	6453      	str	r3, [r2, #68]	; 0x44
 8004042:	4b5e      	ldr	r3, [pc, #376]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800404a:	623b      	str	r3, [r7, #32]
 800404c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	4b5a      	ldr	r3, [pc, #360]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	4a59      	ldr	r2, [pc, #356]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004058:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800405c:	6313      	str	r3, [r2, #48]	; 0x30
 800405e:	4b57      	ldr	r3, [pc, #348]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004066:	61fb      	str	r3, [r7, #28]
 8004068:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	4b53      	ldr	r3, [pc, #332]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	4a52      	ldr	r2, [pc, #328]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6313      	str	r3, [r2, #48]	; 0x30
 800407a:	4b50      	ldr	r3, [pc, #320]	; (80041bc <BSP_LCD_MspInit+0x190>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	4b4c      	ldr	r3, [pc, #304]	; (80041bc <BSP_LCD_MspInit+0x190>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4a4b      	ldr	r2, [pc, #300]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004090:	f043 0302 	orr.w	r3, r3, #2
 8004094:	6313      	str	r3, [r2, #48]	; 0x30
 8004096:	4b49      	ldr	r3, [pc, #292]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	4b45      	ldr	r3, [pc, #276]	; (80041bc <BSP_LCD_MspInit+0x190>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	4a44      	ldr	r2, [pc, #272]	; (80041bc <BSP_LCD_MspInit+0x190>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6313      	str	r3, [r2, #48]	; 0x30
 80040b2:	4b42      	ldr	r3, [pc, #264]	; (80041bc <BSP_LCD_MspInit+0x190>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	4b3e      	ldr	r3, [pc, #248]	; (80041bc <BSP_LCD_MspInit+0x190>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4a3d      	ldr	r2, [pc, #244]	; (80041bc <BSP_LCD_MspInit+0x190>)
 80040c8:	f043 0308 	orr.w	r3, r3, #8
 80040cc:	6313      	str	r3, [r2, #48]	; 0x30
 80040ce:	4b3b      	ldr	r3, [pc, #236]	; (80041bc <BSP_LCD_MspInit+0x190>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	60fb      	str	r3, [r7, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	4b37      	ldr	r3, [pc, #220]	; (80041bc <BSP_LCD_MspInit+0x190>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	4a36      	ldr	r2, [pc, #216]	; (80041bc <BSP_LCD_MspInit+0x190>)
 80040e4:	f043 0320 	orr.w	r3, r3, #32
 80040e8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ea:	4b34      	ldr	r3, [pc, #208]	; (80041bc <BSP_LCD_MspInit+0x190>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	60bb      	str	r3, [r7, #8]
 80040f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	4b30      	ldr	r3, [pc, #192]	; (80041bc <BSP_LCD_MspInit+0x190>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4a2f      	ldr	r2, [pc, #188]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004104:	6313      	str	r3, [r2, #48]	; 0x30
 8004106:	4b2d      	ldr	r3, [pc, #180]	; (80041bc <BSP_LCD_MspInit+0x190>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	607b      	str	r3, [r7, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8004112:	f641 0358 	movw	r3, #6232	; 0x1858
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004118:	2302      	movs	r3, #2
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800411c:	2300      	movs	r3, #0
 800411e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004120:	2302      	movs	r3, #2
 8004122:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8004124:	230e      	movs	r3, #14
 8004126:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004128:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800412c:	4619      	mov	r1, r3
 800412e:	4824      	ldr	r0, [pc, #144]	; (80041c0 <BSP_LCD_MspInit+0x194>)
 8004130:	f001 fa5c 	bl	80055ec <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004134:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800413a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800413e:	4619      	mov	r1, r3
 8004140:	4820      	ldr	r0, [pc, #128]	; (80041c4 <BSP_LCD_MspInit+0x198>)
 8004142:	f001 fa53 	bl	80055ec <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004146:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800414c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004150:	4619      	mov	r1, r3
 8004152:	481d      	ldr	r0, [pc, #116]	; (80041c8 <BSP_LCD_MspInit+0x19c>)
 8004154:	f001 fa4a 	bl	80055ec <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004158:	2348      	movs	r3, #72	; 0x48
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800415c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004160:	4619      	mov	r1, r3
 8004162:	481a      	ldr	r0, [pc, #104]	; (80041cc <BSP_LCD_MspInit+0x1a0>)
 8004164:	f001 fa42 	bl	80055ec <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8004168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800416e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004172:	4619      	mov	r1, r3
 8004174:	4816      	ldr	r0, [pc, #88]	; (80041d0 <BSP_LCD_MspInit+0x1a4>)
 8004176:	f001 fa39 	bl	80055ec <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800417a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004184:	4619      	mov	r1, r3
 8004186:	4813      	ldr	r0, [pc, #76]	; (80041d4 <BSP_LCD_MspInit+0x1a8>)
 8004188:	f001 fa30 	bl	80055ec <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800418c:	2303      	movs	r3, #3
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8004190:	2309      	movs	r3, #9
 8004192:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004198:	4619      	mov	r1, r3
 800419a:	480a      	ldr	r0, [pc, #40]	; (80041c4 <BSP_LCD_MspInit+0x198>)
 800419c:	f001 fa26 	bl	80055ec <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80041a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80041a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041aa:	4619      	mov	r1, r3
 80041ac:	4809      	ldr	r0, [pc, #36]	; (80041d4 <BSP_LCD_MspInit+0x1a8>)
 80041ae:	f001 fa1d 	bl	80055ec <HAL_GPIO_Init>
}
 80041b2:	bf00      	nop
 80041b4:	3738      	adds	r7, #56	; 0x38
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40020000 	.word	0x40020000
 80041c4:	40020400 	.word	0x40020400
 80041c8:	40020800 	.word	0x40020800
 80041cc:	40020c00 	.word	0x40020c00
 80041d0:	40021400 	.word	0x40021400
 80041d4:	40021800 	.word	0x40021800

080041d8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80041d8:	b5b0      	push	{r4, r5, r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	603a      	str	r2, [r7, #0]
 80041e2:	80fb      	strh	r3, [r7, #6]
 80041e4:	460b      	mov	r3, r1
 80041e6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 80041e8:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <BSP_LCD_DrawPixel+0x80>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d018      	beq.n	8004222 <BSP_LCD_DrawPixel+0x4a>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (76800 - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80041f0:	4b1a      	ldr	r3, [pc, #104]	; (800425c <BSP_LCD_DrawPixel+0x84>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a1a      	ldr	r2, [pc, #104]	; (8004260 <BSP_LCD_DrawPixel+0x88>)
 80041f6:	2134      	movs	r1, #52	; 0x34
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	335c      	adds	r3, #92	; 0x5c
 8004200:	681c      	ldr	r4, [r3, #0]
 8004202:	88fd      	ldrh	r5, [r7, #6]
 8004204:	f7ff fbba 	bl	800397c <BSP_LCD_GetXSize>
 8004208:	4602      	mov	r2, r0
 800420a:	88bb      	ldrh	r3, [r7, #4]
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	442b      	add	r3, r5
 8004212:	f5c3 3396 	rsb	r3, r3, #76800	; 0x12c00
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4423      	add	r3, r4
 800421a:	461a      	mov	r2, r3
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8004220:	e015      	b.n	800424e <BSP_LCD_DrawPixel+0x76>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8004222:	4b0e      	ldr	r3, [pc, #56]	; (800425c <BSP_LCD_DrawPixel+0x84>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <BSP_LCD_DrawPixel+0x88>)
 8004228:	2134      	movs	r1, #52	; 0x34
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	335c      	adds	r3, #92	; 0x5c
 8004232:	681c      	ldr	r4, [r3, #0]
 8004234:	88bd      	ldrh	r5, [r7, #4]
 8004236:	f7ff fba1 	bl	800397c <BSP_LCD_GetXSize>
 800423a:	4603      	mov	r3, r0
 800423c:	fb03 f205 	mul.w	r2, r3, r5
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4423      	add	r3, r4
 8004248:	461a      	mov	r2, r3
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	6013      	str	r3, [r2, #0]
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bdb0      	pop	{r4, r5, r7, pc}
 8004256:	bf00      	nop
 8004258:	20000a88 	.word	0x20000a88
 800425c:	20000a68 	.word	0x20000a68
 8004260:	20000950 	.word	0x20000950

08004264 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	4603      	mov	r3, r0
 800426c:	603a      	str	r2, [r7, #0]
 800426e:	80fb      	strh	r3, [r7, #6]
 8004270:	460b      	mov	r3, r1
 8004272:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800427c:	2300      	movs	r3, #0
 800427e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8004280:	4b53      	ldr	r3, [pc, #332]	; (80043d0 <DrawChar+0x16c>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4953      	ldr	r1, [pc, #332]	; (80043d4 <DrawChar+0x170>)
 8004286:	4613      	mov	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	3308      	adds	r3, #8
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	88db      	ldrh	r3, [r3, #6]
 8004296:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004298:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <DrawChar+0x16c>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	494d      	ldr	r1, [pc, #308]	; (80043d4 <DrawChar+0x170>)
 800429e:	4613      	mov	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	440b      	add	r3, r1
 80042a8:	3308      	adds	r3, #8
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	889b      	ldrh	r3, [r3, #4]
 80042ae:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80042b0:	8a3b      	ldrh	r3, [r7, #16]
 80042b2:	3307      	adds	r3, #7
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da00      	bge.n	80042ba <DrawChar+0x56>
 80042b8:	3307      	adds	r3, #7
 80042ba:	10db      	asrs	r3, r3, #3
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	8a3b      	ldrh	r3, [r7, #16]
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e076      	b.n	80043be <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80042d0:	8a3b      	ldrh	r3, [r7, #16]
 80042d2:	3307      	adds	r3, #7
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	da00      	bge.n	80042da <DrawChar+0x76>
 80042d8:	3307      	adds	r3, #7
 80042da:	10db      	asrs	r3, r3, #3
 80042dc:	461a      	mov	r2, r3
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fb02 f303 	mul.w	r3, r2, r3
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	4413      	add	r3, r2
 80042e8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80042ea:	8a3b      	ldrh	r3, [r7, #16]
 80042ec:	3307      	adds	r3, #7
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	da00      	bge.n	80042f4 <DrawChar+0x90>
 80042f2:	3307      	adds	r3, #7
 80042f4:	10db      	asrs	r3, r3, #3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d002      	beq.n	8004300 <DrawChar+0x9c>
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d004      	beq.n	8004308 <DrawChar+0xa4>
 80042fe:	e00c      	b.n	800431a <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	617b      	str	r3, [r7, #20]
      break;
 8004306:	e016      	b.n	8004336 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	3201      	adds	r2, #1
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
      break;
 8004318:	e00d      	b.n	8004336 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	041a      	lsls	r2, r3, #16
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	3301      	adds	r3, #1
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	4313      	orrs	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	3202      	adds	r2, #2
 800432e:	7812      	ldrb	r2, [r2, #0]
 8004330:	4313      	orrs	r3, r2
 8004332:	617b      	str	r3, [r7, #20]
      break;
 8004334:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e036      	b.n	80043aa <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800433c:	8a3a      	ldrh	r2, [r7, #16]
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	1ad2      	subs	r2, r2, r3
 8004342:	7bfb      	ldrb	r3, [r7, #15]
 8004344:	4413      	add	r3, r2
 8004346:	3b01      	subs	r3, #1
 8004348:	2201      	movs	r2, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	461a      	mov	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d012      	beq.n	800437e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	b29a      	uxth	r2, r3
 800435c:	88fb      	ldrh	r3, [r7, #6]
 800435e:	4413      	add	r3, r2
 8004360:	b298      	uxth	r0, r3
 8004362:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <DrawChar+0x16c>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	491b      	ldr	r1, [pc, #108]	; (80043d4 <DrawChar+0x170>)
 8004368:	4613      	mov	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	88bb      	ldrh	r3, [r7, #4]
 8004376:	4619      	mov	r1, r3
 8004378:	f7ff ff2e 	bl	80041d8 <BSP_LCD_DrawPixel>
 800437c:	e012      	b.n	80043a4 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	b29a      	uxth	r2, r3
 8004382:	88fb      	ldrh	r3, [r7, #6]
 8004384:	4413      	add	r3, r2
 8004386:	b298      	uxth	r0, r3
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <DrawChar+0x16c>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4911      	ldr	r1, [pc, #68]	; (80043d4 <DrawChar+0x170>)
 800438e:	4613      	mov	r3, r2
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3304      	adds	r3, #4
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	88bb      	ldrh	r3, [r7, #4]
 800439e:	4619      	mov	r1, r3
 80043a0:	f7ff ff1a 	bl	80041d8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61bb      	str	r3, [r7, #24]
 80043aa:	8a3b      	ldrh	r3, [r7, #16]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d3c4      	bcc.n	800433c <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80043b2:	88bb      	ldrh	r3, [r7, #4]
 80043b4:	3301      	adds	r3, #1
 80043b6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	3301      	adds	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	8a7b      	ldrh	r3, [r7, #18]
 80043c0:	69fa      	ldr	r2, [r7, #28]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d384      	bcc.n	80042d0 <DrawChar+0x6c>
  }
}
 80043c6:	bf00      	nop
 80043c8:	bf00      	nop
 80043ca:	3720      	adds	r7, #32
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20000a68 	.word	0x20000a68
 80043d4:	20000a6c 	.word	0x20000a6c

080043d8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80043e6:	4b16      	ldr	r3, [pc, #88]	; (8004440 <FillBuffer+0x68>)
 80043e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80043ec:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80043ee:	4b14      	ldr	r3, [pc, #80]	; (8004440 <FillBuffer+0x68>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80043f4:	4a12      	ldr	r2, [pc, #72]	; (8004440 <FillBuffer+0x68>)
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80043fa:	4b11      	ldr	r3, [pc, #68]	; (8004440 <FillBuffer+0x68>)
 80043fc:	4a11      	ldr	r2, [pc, #68]	; (8004444 <FillBuffer+0x6c>)
 80043fe:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8004400:	480f      	ldr	r0, [pc, #60]	; (8004440 <FillBuffer+0x68>)
 8004402:	f000 fe5d 	bl	80050c0 <HAL_DMA2D_Init>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d115      	bne.n	8004438 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 800440c:	68f9      	ldr	r1, [r7, #12]
 800440e:	480c      	ldr	r0, [pc, #48]	; (8004440 <FillBuffer+0x68>)
 8004410:	f000 ffbe 	bl	8005390 <HAL_DMA2D_ConfigLayer>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10e      	bne.n	8004438 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69f9      	ldr	r1, [r7, #28]
 8004424:	4806      	ldr	r0, [pc, #24]	; (8004440 <FillBuffer+0x68>)
 8004426:	f000 fe9e 	bl	8005166 <HAL_DMA2D_Start>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d103      	bne.n	8004438 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8004430:	210a      	movs	r1, #10
 8004432:	4803      	ldr	r0, [pc, #12]	; (8004440 <FillBuffer+0x68>)
 8004434:	f000 fec2 	bl	80051bc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200009f8 	.word	0x200009f8
 8004444:	4002b000 	.word	0x4002b000

08004448 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800444c:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 800444e:	4a2a      	ldr	r2, [pc, #168]	; (80044f8 <BSP_SDRAM_Init+0xb0>)
 8004450:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8004452:	4b2a      	ldr	r3, [pc, #168]	; (80044fc <BSP_SDRAM_Init+0xb4>)
 8004454:	2202      	movs	r2, #2
 8004456:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8004458:	4b28      	ldr	r3, [pc, #160]	; (80044fc <BSP_SDRAM_Init+0xb4>)
 800445a:	2207      	movs	r2, #7
 800445c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800445e:	4b27      	ldr	r3, [pc, #156]	; (80044fc <BSP_SDRAM_Init+0xb4>)
 8004460:	2204      	movs	r2, #4
 8004462:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8004464:	4b25      	ldr	r3, [pc, #148]	; (80044fc <BSP_SDRAM_Init+0xb4>)
 8004466:	2207      	movs	r2, #7
 8004468:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800446a:	4b24      	ldr	r3, [pc, #144]	; (80044fc <BSP_SDRAM_Init+0xb4>)
 800446c:	2202      	movs	r2, #2
 800446e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8004470:	4b22      	ldr	r3, [pc, #136]	; (80044fc <BSP_SDRAM_Init+0xb4>)
 8004472:	2202      	movs	r2, #2
 8004474:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8004476:	4b21      	ldr	r3, [pc, #132]	; (80044fc <BSP_SDRAM_Init+0xb4>)
 8004478:	2202      	movs	r2, #2
 800447a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800447c:	4b1d      	ldr	r3, [pc, #116]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 800447e:	2201      	movs	r2, #1
 8004480:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004482:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 8004484:	2200      	movs	r2, #0
 8004486:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004488:	4b1a      	ldr	r3, [pc, #104]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 800448a:	2204      	movs	r2, #4
 800448c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800448e:	4b19      	ldr	r3, [pc, #100]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 8004490:	2210      	movs	r2, #16
 8004492:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004494:	4b17      	ldr	r3, [pc, #92]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800449a:	4b16      	ldr	r3, [pc, #88]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 800449c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80044a0:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80044a2:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 80044a4:	2200      	movs	r2, #0
 80044a6:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80044a8:	4b12      	ldr	r3, [pc, #72]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 80044aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ae:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80044b0:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80044b6:	4b0f      	ldr	r3, [pc, #60]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 80044b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044bc:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80044be:	2100      	movs	r1, #0
 80044c0:	480c      	ldr	r0, [pc, #48]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 80044c2:	f000 f87f 	bl	80045c4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80044c6:	490d      	ldr	r1, [pc, #52]	; (80044fc <BSP_SDRAM_Init+0xb4>)
 80044c8:	480a      	ldr	r0, [pc, #40]	; (80044f4 <BSP_SDRAM_Init+0xac>)
 80044ca:	f003 fba5 	bl	8007c18 <HAL_SDRAM_Init>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80044d4:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <BSP_SDRAM_Init+0xb8>)
 80044d6:	2201      	movs	r2, #1
 80044d8:	701a      	strb	r2, [r3, #0]
 80044da:	e002      	b.n	80044e2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80044dc:	4b08      	ldr	r3, [pc, #32]	; (8004500 <BSP_SDRAM_Init+0xb8>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80044e2:	f240 506a 	movw	r0, #1386	; 0x56a
 80044e6:	f000 f80d 	bl	8004504 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <BSP_SDRAM_Init+0xb8>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	20000a8c 	.word	0x20000a8c
 80044f8:	a0000140 	.word	0xa0000140
 80044fc:	20000ac0 	.word	0x20000ac0
 8004500:	200000c0 	.word	0x200000c0

08004504 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8004510:	4b2a      	ldr	r3, [pc, #168]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004516:	4b29      	ldr	r3, [pc, #164]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004518:	2208      	movs	r2, #8
 800451a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800451c:	4b27      	ldr	r3, [pc, #156]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800451e:	2201      	movs	r2, #1
 8004520:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004524:	2200      	movs	r2, #0
 8004526:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800452c:	4923      	ldr	r1, [pc, #140]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800452e:	4824      	ldr	r0, [pc, #144]	; (80045c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004530:	f003 fbb0 	bl	8007c94 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004534:	2001      	movs	r0, #1
 8004536:	f000 facf 	bl	8004ad8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800453a:	4b20      	ldr	r3, [pc, #128]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800453c:	2202      	movs	r2, #2
 800453e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004540:	4b1e      	ldr	r3, [pc, #120]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004542:	2208      	movs	r2, #8
 8004544:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004546:	4b1d      	ldr	r3, [pc, #116]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004548:	2201      	movs	r2, #1
 800454a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800454c:	4b1b      	ldr	r3, [pc, #108]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800454e:	2200      	movs	r2, #0
 8004550:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004556:	4919      	ldr	r1, [pc, #100]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004558:	4819      	ldr	r0, [pc, #100]	; (80045c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800455a:	f003 fb9b 	bl	8007c94 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800455e:	4b17      	ldr	r3, [pc, #92]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004560:	2203      	movs	r2, #3
 8004562:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004564:	4b15      	ldr	r3, [pc, #84]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004566:	2208      	movs	r2, #8
 8004568:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800456c:	2204      	movs	r2, #4
 800456e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004570:	4b12      	ldr	r3, [pc, #72]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004572:	2200      	movs	r2, #0
 8004574:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800457a:	4910      	ldr	r1, [pc, #64]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800457c:	4810      	ldr	r0, [pc, #64]	; (80045c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800457e:	f003 fb89 	bl	8007c94 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004582:	f44f 730c 	mov.w	r3, #560	; 0x230
 8004586:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8004588:	4b0c      	ldr	r3, [pc, #48]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800458a:	2204      	movs	r2, #4
 800458c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800458e:	4b0b      	ldr	r3, [pc, #44]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004590:	2208      	movs	r2, #8
 8004592:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004596:	2201      	movs	r2, #1
 8004598:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a07      	ldr	r2, [pc, #28]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 800459e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80045a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045a4:	4905      	ldr	r1, [pc, #20]	; (80045bc <BSP_SDRAM_Initialization_sequence+0xb8>)
 80045a6:	4806      	ldr	r0, [pc, #24]	; (80045c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80045a8:	f003 fb74 	bl	8007c94 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4804      	ldr	r0, [pc, #16]	; (80045c0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80045b0:	f003 fb9b 	bl	8007cea <HAL_SDRAM_ProgramRefreshRate>
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000adc 	.word	0x20000adc
 80045c0:	20000a8c 	.word	0x20000a8c

080045c4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b090      	sub	sp, #64	; 0x40
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80ec 	beq.w	80047ae <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045da:	4b77      	ldr	r3, [pc, #476]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 80045dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045de:	4a76      	ldr	r2, [pc, #472]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	6393      	str	r3, [r2, #56]	; 0x38
 80045e6:	4b74      	ldr	r3, [pc, #464]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	f003 0301 	and.w	r3, r3, #1
 80045ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80045f2:	2300      	movs	r3, #0
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
 80045f6:	4b70      	ldr	r3, [pc, #448]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	4a6f      	ldr	r2, [pc, #444]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 80045fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004600:	6313      	str	r3, [r2, #48]	; 0x30
 8004602:	4b6d      	ldr	r3, [pc, #436]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460a:	627b      	str	r3, [r7, #36]	; 0x24
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800460e:	2300      	movs	r3, #0
 8004610:	623b      	str	r3, [r7, #32]
 8004612:	4b69      	ldr	r3, [pc, #420]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004616:	4a68      	ldr	r2, [pc, #416]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004618:	f043 0302 	orr.w	r3, r3, #2
 800461c:	6313      	str	r3, [r2, #48]	; 0x30
 800461e:	4b66      	ldr	r3, [pc, #408]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	623b      	str	r3, [r7, #32]
 8004628:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	4b62      	ldr	r3, [pc, #392]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	4a61      	ldr	r2, [pc, #388]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	6313      	str	r3, [r2, #48]	; 0x30
 800463a:	4b5f      	ldr	r3, [pc, #380]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	61fb      	str	r3, [r7, #28]
 8004644:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004646:	2300      	movs	r3, #0
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	4b5b      	ldr	r3, [pc, #364]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 800464c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464e:	4a5a      	ldr	r2, [pc, #360]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004650:	f043 0308 	orr.w	r3, r3, #8
 8004654:	6313      	str	r3, [r2, #48]	; 0x30
 8004656:	4b58      	ldr	r3, [pc, #352]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	61bb      	str	r3, [r7, #24]
 8004660:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	4b54      	ldr	r3, [pc, #336]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	4a53      	ldr	r2, [pc, #332]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 800466c:	f043 0310 	orr.w	r3, r3, #16
 8004670:	6313      	str	r3, [r2, #48]	; 0x30
 8004672:	4b51      	ldr	r3, [pc, #324]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	4b4d      	ldr	r3, [pc, #308]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004686:	4a4c      	ldr	r2, [pc, #304]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004688:	f043 0320 	orr.w	r3, r3, #32
 800468c:	6313      	str	r3, [r2, #48]	; 0x30
 800468e:	4b4a      	ldr	r3, [pc, #296]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	4b46      	ldr	r3, [pc, #280]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	4a45      	ldr	r2, [pc, #276]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 80046a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046a8:	6313      	str	r3, [r2, #48]	; 0x30
 80046aa:	4b43      	ldr	r3, [pc, #268]	; (80047b8 <BSP_SDRAM_MspInit+0x1f4>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80046b6:	2302      	movs	r3, #2
 80046b8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80046ba:	2302      	movs	r3, #2
 80046bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80046c2:	230c      	movs	r3, #12
 80046c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80046c6:	2360      	movs	r3, #96	; 0x60
 80046c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80046ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046ce:	4619      	mov	r1, r3
 80046d0:	483a      	ldr	r0, [pc, #232]	; (80047bc <BSP_SDRAM_MspInit+0x1f8>)
 80046d2:	f000 ff8b 	bl	80055ec <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80046d6:	2301      	movs	r3, #1
 80046d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80046da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046de:	4619      	mov	r1, r3
 80046e0:	4837      	ldr	r0, [pc, #220]	; (80047c0 <BSP_SDRAM_MspInit+0x1fc>)
 80046e2:	f000 ff83 	bl	80055ec <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80046e6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80046ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80046ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046f0:	4619      	mov	r1, r3
 80046f2:	4834      	ldr	r0, [pc, #208]	; (80047c4 <BSP_SDRAM_MspInit+0x200>)
 80046f4:	f000 ff7a 	bl	80055ec <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80046f8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80046fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004702:	4619      	mov	r1, r3
 8004704:	4830      	ldr	r0, [pc, #192]	; (80047c8 <BSP_SDRAM_MspInit+0x204>)
 8004706:	f000 ff71 	bl	80055ec <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800470a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8004710:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004714:	4619      	mov	r1, r3
 8004716:	482d      	ldr	r0, [pc, #180]	; (80047cc <BSP_SDRAM_MspInit+0x208>)
 8004718:	f000 ff68 	bl	80055ec <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800471c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8004722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004726:	4619      	mov	r1, r3
 8004728:	4829      	ldr	r0, [pc, #164]	; (80047d0 <BSP_SDRAM_MspInit+0x20c>)
 800472a:	f000 ff5f 	bl	80055ec <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800472e:	4b29      	ldr	r3, [pc, #164]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 8004730:	2200      	movs	r2, #0
 8004732:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004734:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 8004736:	2280      	movs	r2, #128	; 0x80
 8004738:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800473a:	4b26      	ldr	r3, [pc, #152]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 800473c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004740:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8004742:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 8004744:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004748:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800474a:	4b22      	ldr	r3, [pc, #136]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 800474c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004750:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004752:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 8004754:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004758:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800475a:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 800475c:	2200      	movs	r2, #0
 800475e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004760:	4b1c      	ldr	r3, [pc, #112]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 8004762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004766:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004768:	4b1a      	ldr	r3, [pc, #104]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 800476a:	2200      	movs	r2, #0
 800476c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800476e:	4b19      	ldr	r3, [pc, #100]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 8004770:	2203      	movs	r2, #3
 8004772:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004774:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 8004776:	2200      	movs	r2, #0
 8004778:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800477a:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004780:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 8004782:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <BSP_SDRAM_MspInit+0x214>)
 8004784:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
 800478c:	4a11      	ldr	r2, [pc, #68]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004792:	4810      	ldr	r0, [pc, #64]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 8004794:	f000 fb84 	bl	8004ea0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004798:	480e      	ldr	r0, [pc, #56]	; (80047d4 <BSP_SDRAM_MspInit+0x210>)
 800479a:	f000 fad3 	bl	8004d44 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800479e:	2200      	movs	r2, #0
 80047a0:	210f      	movs	r1, #15
 80047a2:	2038      	movs	r0, #56	; 0x38
 80047a4:	f000 fa97 	bl	8004cd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80047a8:	2038      	movs	r0, #56	; 0x38
 80047aa:	f000 fab0 	bl	8004d0e <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80047ae:	bf00      	nop
 80047b0:	3740      	adds	r7, #64	; 0x40
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40020400 	.word	0x40020400
 80047c0:	40020800 	.word	0x40020800
 80047c4:	40020c00 	.word	0x40020c00
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40021400 	.word	0x40021400
 80047d0:	40021800 	.word	0x40021800
 80047d4:	20000aec 	.word	0x20000aec
 80047d8:	40026410 	.word	0x40026410

080047dc <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	460a      	mov	r2, r1
 80047e6:	80fb      	strh	r3, [r7, #6]
 80047e8:	4613      	mov	r3, r2
 80047ea:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80047f0:	4a13      	ldr	r2, [pc, #76]	; (8004840 <BSP_TS_Init+0x64>)
 80047f2:	88fb      	ldrh	r3, [r7, #6]
 80047f4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80047f6:	4a13      	ldr	r2, [pc, #76]	; (8004844 <BSP_TS_Init+0x68>)
 80047f8:	88bb      	ldrh	r3, [r7, #4]
 80047fa:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80047fc:	4b12      	ldr	r3, [pc, #72]	; (8004848 <BSP_TS_Init+0x6c>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2082      	movs	r0, #130	; 0x82
 8004802:	4798      	blx	r3
 8004804:	4603      	mov	r3, r0
 8004806:	461a      	mov	r2, r3
 8004808:	f640 0311 	movw	r3, #2065	; 0x811
 800480c:	429a      	cmp	r2, r3
 800480e:	d104      	bne.n	800481a <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <BSP_TS_Init+0x70>)
 8004812:	4a0d      	ldr	r2, [pc, #52]	; (8004848 <BSP_TS_Init+0x6c>)
 8004814:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800481a:	7bfb      	ldrb	r3, [r7, #15]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d109      	bne.n	8004834 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8004820:	4b0a      	ldr	r3, [pc, #40]	; (800484c <BSP_TS_Init+0x70>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2082      	movs	r0, #130	; 0x82
 8004828:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800482a:	4b08      	ldr	r3, [pc, #32]	; (800484c <BSP_TS_Init+0x70>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	2082      	movs	r0, #130	; 0x82
 8004832:	4798      	blx	r3
  }

  return ret;
 8004834:	7bfb      	ldrb	r3, [r7, #15]
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000b50 	.word	0x20000b50
 8004844:	20000b52 	.word	0x20000b52
 8004848:	20000070 	.word	0x20000070
 800484c:	20000b4c 	.word	0x20000b4c

08004850 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004854:	4b03      	ldr	r3, [pc, #12]	; (8004864 <BSP_TS_ITGetStatus+0x14>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	2082      	movs	r0, #130	; 0x82
 800485c:	4798      	blx	r3
 800485e:	4603      	mov	r3, r0
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000b4c 	.word	0x20000b4c

08004868 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004870:	4b4f      	ldr	r3, [pc, #316]	; (80049b0 <BSP_TS_GetState+0x148>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2082      	movs	r0, #130	; 0x82
 8004878:	4798      	blx	r3
 800487a:	4603      	mov	r3, r0
 800487c:	b29a      	uxth	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 808d 	beq.w	80049a6 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800488c:	4b48      	ldr	r3, [pc, #288]	; (80049b0 <BSP_TS_GetState+0x148>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	f107 020c 	add.w	r2, r7, #12
 8004896:	f107 010e 	add.w	r1, r7, #14
 800489a:	2082      	movs	r0, #130	; 0x82
 800489c:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800489e:	89bb      	ldrh	r3, [r7, #12]
 80048a0:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80048a8:	89bb      	ldrh	r3, [r7, #12]
 80048aa:	4a42      	ldr	r2, [pc, #264]	; (80049b4 <BSP_TS_GetState+0x14c>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	08db      	lsrs	r3, r3, #3
 80048b2:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80048b4:	8abb      	ldrh	r3, [r7, #20]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	82bb      	strh	r3, [r7, #20]
 80048be:	e008      	b.n	80048d2 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80048c0:	4b3d      	ldr	r3, [pc, #244]	; (80049b8 <BSP_TS_GetState+0x150>)
 80048c2:	881b      	ldrh	r3, [r3, #0]
 80048c4:	8aba      	ldrh	r2, [r7, #20]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d903      	bls.n	80048d2 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80048ca:	4b3b      	ldr	r3, [pc, #236]	; (80049b8 <BSP_TS_GetState+0x150>)
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80048d2:	8abb      	ldrh	r3, [r7, #20]
 80048d4:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80048d6:	89fb      	ldrh	r3, [r7, #14]
 80048d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80048dc:	4293      	cmp	r3, r2
 80048de:	d806      	bhi.n	80048ee <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80048e0:	89fb      	ldrh	r3, [r7, #14]
 80048e2:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80048e6:	330e      	adds	r3, #14
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	81fb      	strh	r3, [r7, #14]
 80048ec:	e005      	b.n	80048fa <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80048ee:	89fb      	ldrh	r3, [r7, #14]
 80048f0:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80048f4:	3308      	adds	r3, #8
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80048fa:	89fb      	ldrh	r3, [r7, #14]
 80048fc:	4a2f      	ldr	r2, [pc, #188]	; (80049bc <BSP_TS_GetState+0x154>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	08db      	lsrs	r3, r3, #3
 8004904:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004906:	8afb      	ldrh	r3, [r7, #22]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d102      	bne.n	8004912 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 800490c:	2300      	movs	r3, #0
 800490e:	82fb      	strh	r3, [r7, #22]
 8004910:	e008      	b.n	8004924 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8004912:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <BSP_TS_GetState+0x158>)
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	8afa      	ldrh	r2, [r7, #22]
 8004918:	429a      	cmp	r2, r3
 800491a:	d903      	bls.n	8004924 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <BSP_TS_GetState+0x158>)
 800491e:	881b      	ldrh	r3, [r3, #0]
 8004920:	3b01      	subs	r3, #1
 8004922:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004924:	8afb      	ldrh	r3, [r7, #22]
 8004926:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004928:	89fb      	ldrh	r3, [r7, #14]
 800492a:	461a      	mov	r2, r3
 800492c:	4b25      	ldr	r3, [pc, #148]	; (80049c4 <BSP_TS_GetState+0x15c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d906      	bls.n	8004942 <BSP_TS_GetState+0xda>
 8004934:	89fa      	ldrh	r2, [r7, #14]
 8004936:	4b23      	ldr	r3, [pc, #140]	; (80049c4 <BSP_TS_GetState+0x15c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	b29b      	uxth	r3, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	b29b      	uxth	r3, r3
 8004940:	e005      	b.n	800494e <BSP_TS_GetState+0xe6>
 8004942:	4b20      	ldr	r3, [pc, #128]	; (80049c4 <BSP_TS_GetState+0x15c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	b29a      	uxth	r2, r3
 8004948:	89fb      	ldrh	r3, [r7, #14]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	b29b      	uxth	r3, r3
 800494e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004950:	89bb      	ldrh	r3, [r7, #12]
 8004952:	461a      	mov	r2, r3
 8004954:	4b1c      	ldr	r3, [pc, #112]	; (80049c8 <BSP_TS_GetState+0x160>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d906      	bls.n	800496a <BSP_TS_GetState+0x102>
 800495c:	89ba      	ldrh	r2, [r7, #12]
 800495e:	4b1a      	ldr	r3, [pc, #104]	; (80049c8 <BSP_TS_GetState+0x160>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	b29b      	uxth	r3, r3
 8004968:	e005      	b.n	8004976 <BSP_TS_GetState+0x10e>
 800496a:	4b17      	ldr	r3, [pc, #92]	; (80049c8 <BSP_TS_GetState+0x160>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	b29a      	uxth	r2, r3
 8004970:	89bb      	ldrh	r3, [r7, #12]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	b29b      	uxth	r3, r3
 8004976:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004978:	8a7a      	ldrh	r2, [r7, #18]
 800497a:	8a3b      	ldrh	r3, [r7, #16]
 800497c:	4413      	add	r3, r2
 800497e:	2b05      	cmp	r3, #5
 8004980:	dd07      	ble.n	8004992 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8004982:	89fb      	ldrh	r3, [r7, #14]
 8004984:	461a      	mov	r2, r3
 8004986:	4b0f      	ldr	r3, [pc, #60]	; (80049c4 <BSP_TS_GetState+0x15c>)
 8004988:	601a      	str	r2, [r3, #0]
      _y = y; 
 800498a:	89bb      	ldrh	r3, [r7, #12]
 800498c:	461a      	mov	r2, r3
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <BSP_TS_GetState+0x160>)
 8004990:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004992:	4b0c      	ldr	r3, [pc, #48]	; (80049c4 <BSP_TS_GetState+0x15c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	b29a      	uxth	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 800499c:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <BSP_TS_GetState+0x160>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	809a      	strh	r2, [r3, #4]
  }
}
 80049a6:	bf00      	nop
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000b4c 	.word	0x20000b4c
 80049b4:	ba2e8ba3 	.word	0xba2e8ba3
 80049b8:	20000b52 	.word	0x20000b52
 80049bc:	88888889 	.word	0x88888889
 80049c0:	20000b50 	.word	0x20000b50
 80049c4:	20000b54 	.word	0x20000b54
 80049c8:	20000b58 	.word	0x20000b58

080049cc <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <BSP_TS_ITClear+0x14>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	2082      	movs	r0, #130	; 0x82
 80049d8:	4798      	blx	r3
}
 80049da:	bf00      	nop
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop
 80049e0:	20000b4c 	.word	0x20000b4c

080049e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049e8:	4b0e      	ldr	r3, [pc, #56]	; (8004a24 <HAL_Init+0x40>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0d      	ldr	r2, [pc, #52]	; (8004a24 <HAL_Init+0x40>)
 80049ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_Init+0x40>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <HAL_Init+0x40>)
 80049fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a00:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <HAL_Init+0x40>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a07      	ldr	r2, [pc, #28]	; (8004a24 <HAL_Init+0x40>)
 8004a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a0c:	2003      	movs	r0, #3
 8004a0e:	f000 f957 	bl	8004cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a12:	200f      	movs	r0, #15
 8004a14:	f000 f810 	bl	8004a38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a18:	f000 f806 	bl	8004a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023c00 	.word	0x40023c00

08004a28 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_InitTick+0x54>)
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	4b12      	ldr	r3, [pc, #72]	; (8004a90 <HAL_InitTick+0x58>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	4619      	mov	r1, r3
 8004a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 f967 	bl	8004d2a <HAL_SYSTICK_Config>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e00e      	b.n	8004a84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b0f      	cmp	r3, #15
 8004a6a:	d80a      	bhi.n	8004a82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a74:	f000 f92f 	bl	8004cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <HAL_InitTick+0x5c>)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	e000      	b.n	8004a84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	20000034 	.word	0x20000034
 8004a90:	200000c8 	.word	0x200000c8
 8004a94:	200000c4 	.word	0x200000c4

08004a98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <HAL_IncTick+0x20>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_IncTick+0x24>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <HAL_IncTick+0x24>)
 8004aaa:	6013      	str	r3, [r2, #0]
}
 8004aac:	bf00      	nop
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	200000c8 	.word	0x200000c8
 8004abc:	20000b5c 	.word	0x20000b5c

08004ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <HAL_GetTick+0x14>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	20000b5c 	.word	0x20000b5c

08004ad8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae0:	f7ff ffee 	bl	8004ac0 <HAL_GetTick>
 8004ae4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af0:	d005      	beq.n	8004afe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <HAL_Delay+0x44>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	461a      	mov	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4413      	add	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004afe:	bf00      	nop
 8004b00:	f7ff ffde 	bl	8004ac0 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d8f7      	bhi.n	8004b00 <HAL_Delay+0x28>
  {
  }
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	200000c8 	.word	0x200000c8

08004b20 <__NVIC_SetPriorityGrouping>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f003 0307 	and.w	r3, r3, #7
 8004b2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b30:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <__NVIC_SetPriorityGrouping+0x44>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b52:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <__NVIC_SetPriorityGrouping+0x44>)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	60d3      	str	r3, [r2, #12]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	e000ed00 	.word	0xe000ed00

08004b68 <__NVIC_GetPriorityGrouping>:
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b6c:	4b04      	ldr	r3, [pc, #16]	; (8004b80 <__NVIC_GetPriorityGrouping+0x18>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	0a1b      	lsrs	r3, r3, #8
 8004b72:	f003 0307 	and.w	r3, r3, #7
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	e000ed00 	.word	0xe000ed00

08004b84 <__NVIC_EnableIRQ>:
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	db0b      	blt.n	8004bae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	f003 021f 	and.w	r2, r3, #31
 8004b9c:	4907      	ldr	r1, [pc, #28]	; (8004bbc <__NVIC_EnableIRQ+0x38>)
 8004b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba2:	095b      	lsrs	r3, r3, #5
 8004ba4:	2001      	movs	r0, #1
 8004ba6:	fa00 f202 	lsl.w	r2, r0, r2
 8004baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	e000e100 	.word	0xe000e100

08004bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	6039      	str	r1, [r7, #0]
 8004bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	db0a      	blt.n	8004bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	490c      	ldr	r1, [pc, #48]	; (8004c0c <__NVIC_SetPriority+0x4c>)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	0112      	lsls	r2, r2, #4
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	440b      	add	r3, r1
 8004be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004be8:	e00a      	b.n	8004c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	4908      	ldr	r1, [pc, #32]	; (8004c10 <__NVIC_SetPriority+0x50>)
 8004bf0:	79fb      	ldrb	r3, [r7, #7]
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	3b04      	subs	r3, #4
 8004bf8:	0112      	lsls	r2, r2, #4
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	761a      	strb	r2, [r3, #24]
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	e000e100 	.word	0xe000e100
 8004c10:	e000ed00 	.word	0xe000ed00

08004c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b089      	sub	sp, #36	; 0x24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f1c3 0307 	rsb	r3, r3, #7
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	bf28      	it	cs
 8004c32:	2304      	movcs	r3, #4
 8004c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	2b06      	cmp	r3, #6
 8004c3c:	d902      	bls.n	8004c44 <NVIC_EncodePriority+0x30>
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3b03      	subs	r3, #3
 8004c42:	e000      	b.n	8004c46 <NVIC_EncodePriority+0x32>
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	43da      	mvns	r2, r3
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	401a      	ands	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	fa01 f303 	lsl.w	r3, r1, r3
 8004c66:	43d9      	mvns	r1, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6c:	4313      	orrs	r3, r2
         );
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3724      	adds	r7, #36	; 0x24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
	...

08004c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c8c:	d301      	bcc.n	8004c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e00f      	b.n	8004cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <SysTick_Config+0x40>)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	3b01      	subs	r3, #1
 8004c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c9a:	210f      	movs	r1, #15
 8004c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca0:	f7ff ff8e 	bl	8004bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <SysTick_Config+0x40>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004caa:	4b04      	ldr	r3, [pc, #16]	; (8004cbc <SysTick_Config+0x40>)
 8004cac:	2207      	movs	r2, #7
 8004cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	e000e010 	.word	0xe000e010

08004cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7ff ff29 	bl	8004b20 <__NVIC_SetPriorityGrouping>
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	4603      	mov	r3, r0
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce8:	f7ff ff3e 	bl	8004b68 <__NVIC_GetPriorityGrouping>
 8004cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	6978      	ldr	r0, [r7, #20]
 8004cf4:	f7ff ff8e 	bl	8004c14 <NVIC_EncodePriority>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff ff5d 	bl	8004bc0 <__NVIC_SetPriority>
}
 8004d06:	bf00      	nop
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b082      	sub	sp, #8
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	4603      	mov	r3, r0
 8004d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ff31 	bl	8004b84 <__NVIC_EnableIRQ>
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7ff ffa2 	bl	8004c7c <SysTick_Config>
 8004d38:	4603      	mov	r3, r0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004d50:	f7ff feb6 	bl	8004ac0 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e099      	b.n	8004e94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d80:	e00f      	b.n	8004da2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d82:	f7ff fe9d 	bl	8004ac0 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b05      	cmp	r3, #5
 8004d8e:	d908      	bls.n	8004da2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2203      	movs	r2, #3
 8004d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e078      	b.n	8004e94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1e8      	bne.n	8004d82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	4b38      	ldr	r3, [pc, #224]	; (8004e9c <HAL_DMA_Init+0x158>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d107      	bne.n	8004e0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	4313      	orrs	r3, r2
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0307 	bic.w	r3, r3, #7
 8004e22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d117      	bne.n	8004e66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00e      	beq.n	8004e66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f8bd 	bl	8004fc8 <DMA_CheckFifoParam>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2240      	movs	r2, #64	; 0x40
 8004e58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004e62:	2301      	movs	r3, #1
 8004e64:	e016      	b.n	8004e94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f874 	bl	8004f5c <DMA_CalcBaseAndBitshift>
 8004e74:	4603      	mov	r3, r0
 8004e76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7c:	223f      	movs	r2, #63	; 0x3f
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	f010803f 	.word	0xf010803f

08004ea0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e050      	b.n	8004f54 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d101      	bne.n	8004ec2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e048      	b.n	8004f54 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0201 	bic.w	r2, r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2221      	movs	r2, #33	; 0x21
 8004f00:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f82a 	bl	8004f5c <DMA_CalcBaseAndBitshift>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f34:	223f      	movs	r2, #63	; 0x3f
 8004f36:	409a      	lsls	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3710      	adds	r7, #16
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	3b10      	subs	r3, #16
 8004f6c:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <DMA_CalcBaseAndBitshift+0x64>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	091b      	lsrs	r3, r3, #4
 8004f74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f76:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <DMA_CalcBaseAndBitshift+0x68>)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d909      	bls.n	8004f9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f92:	f023 0303 	bic.w	r3, r3, #3
 8004f96:	1d1a      	adds	r2, r3, #4
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	659a      	str	r2, [r3, #88]	; 0x58
 8004f9c:	e007      	b.n	8004fae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004fa6:	f023 0303 	bic.w	r3, r3, #3
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	aaaaaaab 	.word	0xaaaaaaab
 8004fc4:	080118b4 	.word	0x080118b4

08004fc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d11f      	bne.n	8005022 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b03      	cmp	r3, #3
 8004fe6:	d856      	bhi.n	8005096 <DMA_CheckFifoParam+0xce>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <DMA_CheckFifoParam+0x28>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005001 	.word	0x08005001
 8004ff4:	08005013 	.word	0x08005013
 8004ff8:	08005001 	.word	0x08005001
 8004ffc:	08005097 	.word	0x08005097
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d046      	beq.n	800509a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005010:	e043      	b.n	800509a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005016:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800501a:	d140      	bne.n	800509e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005020:	e03d      	b.n	800509e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800502a:	d121      	bne.n	8005070 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	2b03      	cmp	r3, #3
 8005030:	d837      	bhi.n	80050a2 <DMA_CheckFifoParam+0xda>
 8005032:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <DMA_CheckFifoParam+0x70>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	08005049 	.word	0x08005049
 800503c:	0800504f 	.word	0x0800504f
 8005040:	08005049 	.word	0x08005049
 8005044:	08005061 	.word	0x08005061
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
      break;
 800504c:	e030      	b.n	80050b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d025      	beq.n	80050a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800505e:	e022      	b.n	80050a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005068:	d11f      	bne.n	80050aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800506e:	e01c      	b.n	80050aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d903      	bls.n	800507e <DMA_CheckFifoParam+0xb6>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b03      	cmp	r3, #3
 800507a:	d003      	beq.n	8005084 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800507c:	e018      	b.n	80050b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
      break;
 8005082:	e015      	b.n	80050b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00e      	beq.n	80050ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
      break;
 8005094:	e00b      	b.n	80050ae <DMA_CheckFifoParam+0xe6>
      break;
 8005096:	bf00      	nop
 8005098:	e00a      	b.n	80050b0 <DMA_CheckFifoParam+0xe8>
      break;
 800509a:	bf00      	nop
 800509c:	e008      	b.n	80050b0 <DMA_CheckFifoParam+0xe8>
      break;
 800509e:	bf00      	nop
 80050a0:	e006      	b.n	80050b0 <DMA_CheckFifoParam+0xe8>
      break;
 80050a2:	bf00      	nop
 80050a4:	e004      	b.n	80050b0 <DMA_CheckFifoParam+0xe8>
      break;
 80050a6:	bf00      	nop
 80050a8:	e002      	b.n	80050b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80050aa:	bf00      	nop
 80050ac:	e000      	b.n	80050b0 <DMA_CheckFifoParam+0xe8>
      break;
 80050ae:	bf00      	nop
    }
  } 
  
  return status; 
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop

080050c0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e03b      	b.n	800514a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f833 	bl	8005152 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	430a      	orrs	r2, r1
 8005108:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	f023 0107 	bic.w	r1, r3, #7
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800512a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68d1      	ldr	r1, [r2, #12]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	430b      	orrs	r3, r1
 8005138:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3708      	adds	r7, #8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b086      	sub	sp, #24
 800516a:	af02      	add	r7, sp, #8
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_DMA2D_Start+0x1c>
 800517e:	2302      	movs	r3, #2
 8005180:	e018      	b.n	80051b4 <HAL_DMA2D_Start+0x4e>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2202      	movs	r2, #2
 800518e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	68b9      	ldr	r1, [r7, #8]
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f989 	bl	80054b4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0201 	orr.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d056      	beq.n	8005286 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80051d8:	f7ff fc72 	bl	8004ac0 <HAL_GetTick>
 80051dc:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80051de:	e04b      	b.n	8005278 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d023      	beq.n	800523a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005200:	f043 0202 	orr.w	r2, r3, #2
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d005      	beq.n	800521e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005216:	f043 0201 	orr.w	r2, r3, #1
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2221      	movs	r2, #33	; 0x21
 8005224:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2204      	movs	r2, #4
 800522a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e0a5      	b.n	8005386 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005240:	d01a      	beq.n	8005278 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005242:	f7ff fc3d 	bl	8004ac0 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d302      	bcc.n	8005258 <HAL_DMA2D_PollForTransfer+0x9c>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10f      	bne.n	8005278 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	f043 0220 	orr.w	r2, r3, #32
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2203      	movs	r2, #3
 8005268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e086      	b.n	8005386 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0ac      	beq.n	80051e0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d061      	beq.n	800536c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80052a8:	f7ff fc0a 	bl	8004ac0 <HAL_GetTick>
 80052ac:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80052ae:	e056      	b.n	800535e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d02e      	beq.n	8005320 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 0308 	and.w	r3, r3, #8
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d0:	f043 0204 	orr.w	r2, r3, #4
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e6:	f043 0202 	orr.w	r2, r3, #2
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d005      	beq.n	8005304 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fc:	f043 0201 	orr.w	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2229      	movs	r2, #41	; 0x29
 800530a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2204      	movs	r2, #4
 8005310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e032      	b.n	8005386 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005326:	d01a      	beq.n	800535e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005328:	f7ff fbca 	bl	8004ac0 <HAL_GetTick>
 800532c:	4602      	mov	r2, r0
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d302      	bcc.n	800533e <HAL_DMA2D_PollForTransfer+0x182>
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10f      	bne.n	800535e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2203      	movs	r2, #3
 800534e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e013      	b.n	8005386 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0a1      	beq.n	80052b0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2212      	movs	r2, #18
 8005372:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d101      	bne.n	80053b0 <HAL_DMA2D_ConfigLayer+0x20>
 80053ac:	2302      	movs	r3, #2
 80053ae:	e079      	b.n	80054a4 <HAL_DMA2D_ConfigLayer+0x114>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	3318      	adds	r3, #24
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	4413      	add	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	685a      	ldr	r2, [r3, #4]
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	041b      	lsls	r3, r3, #16
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80053da:	4b35      	ldr	r3, [pc, #212]	; (80054b0 <HAL_DMA2D_ConfigLayer+0x120>)
 80053dc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b0a      	cmp	r3, #10
 80053e4:	d003      	beq.n	80053ee <HAL_DMA2D_ConfigLayer+0x5e>
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b09      	cmp	r3, #9
 80053ec:	d107      	bne.n	80053fe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e005      	b.n	800540a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	061b      	lsls	r3, r3, #24
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d120      	bne.n	8005452 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	43db      	mvns	r3, r3
 800541a:	ea02 0103 	and.w	r1, r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	430a      	orrs	r2, r1
 8005426:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	6812      	ldr	r2, [r2, #0]
 8005430:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b0a      	cmp	r3, #10
 8005438:	d003      	beq.n	8005442 <HAL_DMA2D_ConfigLayer+0xb2>
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b09      	cmp	r3, #9
 8005440:	d127      	bne.n	8005492 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800544e:	629a      	str	r2, [r3, #40]	; 0x28
 8005450:	e01f      	b.n	8005492 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69da      	ldr	r2, [r3, #28]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	43db      	mvns	r3, r3
 800545c:	ea02 0103 	and.w	r1, r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	430a      	orrs	r2, r1
 8005468:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	6812      	ldr	r2, [r2, #0]
 8005472:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	2b0a      	cmp	r3, #10
 800547a:	d003      	beq.n	8005484 <HAL_DMA2D_ConfigLayer+0xf4>
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b09      	cmp	r3, #9
 8005482:	d106      	bne.n	8005492 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005490:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	ff03000f 	.word	0xff03000f

080054b4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b08b      	sub	sp, #44	; 0x2c
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	041a      	lsls	r2, r3, #16
 80054d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d2:	431a      	orrs	r2, r3
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80054ec:	d174      	bne.n	80055d8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80054f4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80054fc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005504:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d108      	bne.n	8005526 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	431a      	orrs	r2, r3
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	4313      	orrs	r3, r2
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	4313      	orrs	r3, r2
 8005522:	627b      	str	r3, [r7, #36]	; 0x24
 8005524:	e053      	b.n	80055ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d106      	bne.n	800553c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800552e:	69ba      	ldr	r2, [r7, #24]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4313      	orrs	r3, r2
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
 800553a:	e048      	b.n	80055ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b02      	cmp	r3, #2
 8005542:	d111      	bne.n	8005568 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	0cdb      	lsrs	r3, r3, #19
 8005548:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	0a9b      	lsrs	r3, r3, #10
 800554e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	08db      	lsrs	r3, r3, #3
 8005554:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	02db      	lsls	r3, r3, #11
 800555e:	4313      	orrs	r3, r2
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
 8005566:	e032      	b.n	80055ce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b03      	cmp	r3, #3
 800556e:	d117      	bne.n	80055a0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	0fdb      	lsrs	r3, r3, #31
 8005574:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	0cdb      	lsrs	r3, r3, #19
 800557a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	0adb      	lsrs	r3, r3, #11
 8005580:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	08db      	lsrs	r3, r3, #3
 8005586:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	015a      	lsls	r2, r3, #5
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	029b      	lsls	r3, r3, #10
 8005590:	431a      	orrs	r2, r3
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	03db      	lsls	r3, r3, #15
 8005596:	4313      	orrs	r3, r2
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
 800559e:	e016      	b.n	80055ce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	0f1b      	lsrs	r3, r3, #28
 80055a4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	0d1b      	lsrs	r3, r3, #20
 80055aa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	0b1b      	lsrs	r3, r3, #12
 80055b0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	011a      	lsls	r2, r3, #4
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	431a      	orrs	r2, r3
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	031b      	lsls	r3, r3, #12
 80055c6:	4313      	orrs	r3, r2
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80055d6:	e003      	b.n	80055e0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	60da      	str	r2, [r3, #12]
}
 80055e0:	bf00      	nop
 80055e2:	372c      	adds	r7, #44	; 0x2c
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b089      	sub	sp, #36	; 0x24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005602:	2300      	movs	r3, #0
 8005604:	61fb      	str	r3, [r7, #28]
 8005606:	e177      	b.n	80058f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005608:	2201      	movs	r2, #1
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	4013      	ands	r3, r2
 800561a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	429a      	cmp	r2, r3
 8005622:	f040 8166 	bne.w	80058f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d00b      	beq.n	8005646 <HAL_GPIO_Init+0x5a>
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	2b02      	cmp	r3, #2
 8005634:	d007      	beq.n	8005646 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800563a:	2b11      	cmp	r3, #17
 800563c:	d003      	beq.n	8005646 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	2b12      	cmp	r3, #18
 8005644:	d130      	bne.n	80056a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	2203      	movs	r2, #3
 8005652:	fa02 f303 	lsl.w	r3, r2, r3
 8005656:	43db      	mvns	r3, r3
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	4013      	ands	r3, r2
 800565c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	68da      	ldr	r2, [r3, #12]
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	69ba      	ldr	r2, [r7, #24]
 800566c:	4313      	orrs	r3, r2
 800566e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800567c:	2201      	movs	r2, #1
 800567e:	69fb      	ldr	r3, [r7, #28]
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	43db      	mvns	r3, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	f003 0201 	and.w	r2, r3, #1
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	4313      	orrs	r3, r2
 80056a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	2203      	movs	r2, #3
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	43db      	mvns	r3, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4013      	ands	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	fa02 f303 	lsl.w	r3, r2, r3
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d003      	beq.n	80056e8 <HAL_GPIO_Init+0xfc>
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b12      	cmp	r3, #18
 80056e6:	d123      	bne.n	8005730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	08da      	lsrs	r2, r3, #3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3208      	adds	r2, #8
 80056f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	220f      	movs	r2, #15
 8005700:	fa02 f303 	lsl.w	r3, r2, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	4013      	ands	r3, r2
 800570a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	fa02 f303 	lsl.w	r3, r2, r3
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	4313      	orrs	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	08da      	lsrs	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3208      	adds	r2, #8
 800572a:	69b9      	ldr	r1, [r7, #24]
 800572c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	2203      	movs	r2, #3
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	69ba      	ldr	r2, [r7, #24]
 8005744:	4013      	ands	r3, r2
 8005746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f003 0203 	and.w	r2, r3, #3
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	69ba      	ldr	r2, [r7, #24]
 800575a:	4313      	orrs	r3, r2
 800575c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80c0 	beq.w	80058f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	4b66      	ldr	r3, [pc, #408]	; (8005910 <HAL_GPIO_Init+0x324>)
 8005778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577a:	4a65      	ldr	r2, [pc, #404]	; (8005910 <HAL_GPIO_Init+0x324>)
 800577c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005780:	6453      	str	r3, [r2, #68]	; 0x44
 8005782:	4b63      	ldr	r3, [pc, #396]	; (8005910 <HAL_GPIO_Init+0x324>)
 8005784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800578e:	4a61      	ldr	r2, [pc, #388]	; (8005914 <HAL_GPIO_Init+0x328>)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	3302      	adds	r3, #2
 8005796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	220f      	movs	r2, #15
 80057a6:	fa02 f303 	lsl.w	r3, r2, r3
 80057aa:	43db      	mvns	r3, r3
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4013      	ands	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a58      	ldr	r2, [pc, #352]	; (8005918 <HAL_GPIO_Init+0x32c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d037      	beq.n	800582a <HAL_GPIO_Init+0x23e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a57      	ldr	r2, [pc, #348]	; (800591c <HAL_GPIO_Init+0x330>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d031      	beq.n	8005826 <HAL_GPIO_Init+0x23a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a56      	ldr	r2, [pc, #344]	; (8005920 <HAL_GPIO_Init+0x334>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d02b      	beq.n	8005822 <HAL_GPIO_Init+0x236>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a55      	ldr	r2, [pc, #340]	; (8005924 <HAL_GPIO_Init+0x338>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d025      	beq.n	800581e <HAL_GPIO_Init+0x232>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a54      	ldr	r2, [pc, #336]	; (8005928 <HAL_GPIO_Init+0x33c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01f      	beq.n	800581a <HAL_GPIO_Init+0x22e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a53      	ldr	r2, [pc, #332]	; (800592c <HAL_GPIO_Init+0x340>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d019      	beq.n	8005816 <HAL_GPIO_Init+0x22a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a52      	ldr	r2, [pc, #328]	; (8005930 <HAL_GPIO_Init+0x344>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <HAL_GPIO_Init+0x226>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a51      	ldr	r2, [pc, #324]	; (8005934 <HAL_GPIO_Init+0x348>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00d      	beq.n	800580e <HAL_GPIO_Init+0x222>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a50      	ldr	r2, [pc, #320]	; (8005938 <HAL_GPIO_Init+0x34c>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d007      	beq.n	800580a <HAL_GPIO_Init+0x21e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a4f      	ldr	r2, [pc, #316]	; (800593c <HAL_GPIO_Init+0x350>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d101      	bne.n	8005806 <HAL_GPIO_Init+0x21a>
 8005802:	2309      	movs	r3, #9
 8005804:	e012      	b.n	800582c <HAL_GPIO_Init+0x240>
 8005806:	230a      	movs	r3, #10
 8005808:	e010      	b.n	800582c <HAL_GPIO_Init+0x240>
 800580a:	2308      	movs	r3, #8
 800580c:	e00e      	b.n	800582c <HAL_GPIO_Init+0x240>
 800580e:	2307      	movs	r3, #7
 8005810:	e00c      	b.n	800582c <HAL_GPIO_Init+0x240>
 8005812:	2306      	movs	r3, #6
 8005814:	e00a      	b.n	800582c <HAL_GPIO_Init+0x240>
 8005816:	2305      	movs	r3, #5
 8005818:	e008      	b.n	800582c <HAL_GPIO_Init+0x240>
 800581a:	2304      	movs	r3, #4
 800581c:	e006      	b.n	800582c <HAL_GPIO_Init+0x240>
 800581e:	2303      	movs	r3, #3
 8005820:	e004      	b.n	800582c <HAL_GPIO_Init+0x240>
 8005822:	2302      	movs	r3, #2
 8005824:	e002      	b.n	800582c <HAL_GPIO_Init+0x240>
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <HAL_GPIO_Init+0x240>
 800582a:	2300      	movs	r3, #0
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	f002 0203 	and.w	r2, r2, #3
 8005832:	0092      	lsls	r2, r2, #2
 8005834:	4093      	lsls	r3, r2
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	4313      	orrs	r3, r2
 800583a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800583c:	4935      	ldr	r1, [pc, #212]	; (8005914 <HAL_GPIO_Init+0x328>)
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	089b      	lsrs	r3, r3, #2
 8005842:	3302      	adds	r3, #2
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800584a:	4b3d      	ldr	r3, [pc, #244]	; (8005940 <HAL_GPIO_Init+0x354>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	43db      	mvns	r3, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4013      	ands	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800586e:	4a34      	ldr	r2, [pc, #208]	; (8005940 <HAL_GPIO_Init+0x354>)
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005874:	4b32      	ldr	r3, [pc, #200]	; (8005940 <HAL_GPIO_Init+0x354>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	43db      	mvns	r3, r3
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4013      	ands	r3, r2
 8005882:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005898:	4a29      	ldr	r2, [pc, #164]	; (8005940 <HAL_GPIO_Init+0x354>)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800589e:	4b28      	ldr	r3, [pc, #160]	; (8005940 <HAL_GPIO_Init+0x354>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	43db      	mvns	r3, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4013      	ands	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	4313      	orrs	r3, r2
 80058c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80058c2:	4a1f      	ldr	r2, [pc, #124]	; (8005940 <HAL_GPIO_Init+0x354>)
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80058c8:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <HAL_GPIO_Init+0x354>)
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	43db      	mvns	r3, r3
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4013      	ands	r3, r2
 80058d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80058ec:	4a14      	ldr	r2, [pc, #80]	; (8005940 <HAL_GPIO_Init+0x354>)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3301      	adds	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b0f      	cmp	r3, #15
 80058fc:	f67f ae84 	bls.w	8005608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	3724      	adds	r7, #36	; 0x24
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40023800 	.word	0x40023800
 8005914:	40013800 	.word	0x40013800
 8005918:	40020000 	.word	0x40020000
 800591c:	40020400 	.word	0x40020400
 8005920:	40020800 	.word	0x40020800
 8005924:	40020c00 	.word	0x40020c00
 8005928:	40021000 	.word	0x40021000
 800592c:	40021400 	.word	0x40021400
 8005930:	40021800 	.word	0x40021800
 8005934:	40021c00 	.word	0x40021c00
 8005938:	40022000 	.word	0x40022000
 800593c:	40022400 	.word	0x40022400
 8005940:	40013c00 	.word	0x40013c00

08005944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	807b      	strh	r3, [r7, #2]
 8005950:	4613      	mov	r3, r2
 8005952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005954:	787b      	ldrb	r3, [r7, #1]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800595a:	887a      	ldrh	r2, [r7, #2]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005960:	e003      	b.n	800596a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005962:	887b      	ldrh	r3, [r7, #2]
 8005964:	041a      	lsls	r2, r3, #16
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	619a      	str	r2, [r3, #24]
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	460b      	mov	r3, r1
 8005980:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695a      	ldr	r2, [r3, #20]
 8005986:	887b      	ldrh	r3, [r7, #2]
 8005988:	401a      	ands	r2, r3
 800598a:	887b      	ldrh	r3, [r7, #2]
 800598c:	429a      	cmp	r2, r3
 800598e:	d104      	bne.n	800599a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005990:	887b      	ldrh	r3, [r7, #2]
 8005992:	041a      	lsls	r2, r3, #16
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005998:	e002      	b.n	80059a0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800599a:	887a      	ldrh	r2, [r7, #2]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	619a      	str	r2, [r3, #24]
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e12b      	b.n	8005c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f95d 	bl	8005c92 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2224      	movs	r2, #36	; 0x24
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a10:	f001 ff1a 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8005a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	4a81      	ldr	r2, [pc, #516]	; (8005c20 <HAL_I2C_Init+0x274>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d807      	bhi.n	8005a30 <HAL_I2C_Init+0x84>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4a80      	ldr	r2, [pc, #512]	; (8005c24 <HAL_I2C_Init+0x278>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	bf94      	ite	ls
 8005a28:	2301      	movls	r3, #1
 8005a2a:	2300      	movhi	r3, #0
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	e006      	b.n	8005a3e <HAL_I2C_Init+0x92>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4a7d      	ldr	r2, [pc, #500]	; (8005c28 <HAL_I2C_Init+0x27c>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	bf94      	ite	ls
 8005a38:	2301      	movls	r3, #1
 8005a3a:	2300      	movhi	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e0e7      	b.n	8005c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	4a78      	ldr	r2, [pc, #480]	; (8005c2c <HAL_I2C_Init+0x280>)
 8005a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4e:	0c9b      	lsrs	r3, r3, #18
 8005a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	4a6a      	ldr	r2, [pc, #424]	; (8005c20 <HAL_I2C_Init+0x274>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d802      	bhi.n	8005a80 <HAL_I2C_Init+0xd4>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	e009      	b.n	8005a94 <HAL_I2C_Init+0xe8>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	4a69      	ldr	r2, [pc, #420]	; (8005c30 <HAL_I2C_Init+0x284>)
 8005a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a90:	099b      	lsrs	r3, r3, #6
 8005a92:	3301      	adds	r3, #1
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	430b      	orrs	r3, r1
 8005a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	495c      	ldr	r1, [pc, #368]	; (8005c20 <HAL_I2C_Init+0x274>)
 8005ab0:	428b      	cmp	r3, r1
 8005ab2:	d819      	bhi.n	8005ae8 <HAL_I2C_Init+0x13c>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	1e59      	subs	r1, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ac2:	1c59      	adds	r1, r3, #1
 8005ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005ac8:	400b      	ands	r3, r1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_I2C_Init+0x138>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	1e59      	subs	r1, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005adc:	3301      	adds	r3, #1
 8005ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae2:	e051      	b.n	8005b88 <HAL_I2C_Init+0x1dc>
 8005ae4:	2304      	movs	r3, #4
 8005ae6:	e04f      	b.n	8005b88 <HAL_I2C_Init+0x1dc>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d111      	bne.n	8005b14 <HAL_I2C_Init+0x168>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	1e58      	subs	r0, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6859      	ldr	r1, [r3, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	005b      	lsls	r3, r3, #1
 8005afc:	440b      	add	r3, r1
 8005afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b02:	3301      	adds	r3, #1
 8005b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	bf0c      	ite	eq
 8005b0c:	2301      	moveq	r3, #1
 8005b0e:	2300      	movne	r3, #0
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	e012      	b.n	8005b3a <HAL_I2C_Init+0x18e>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	1e58      	subs	r0, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6859      	ldr	r1, [r3, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	440b      	add	r3, r1
 8005b22:	0099      	lsls	r1, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <HAL_I2C_Init+0x196>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e022      	b.n	8005b88 <HAL_I2C_Init+0x1dc>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d10e      	bne.n	8005b68 <HAL_I2C_Init+0x1bc>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	1e58      	subs	r0, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6859      	ldr	r1, [r3, #4]
 8005b52:	460b      	mov	r3, r1
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	440b      	add	r3, r1
 8005b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b66:	e00f      	b.n	8005b88 <HAL_I2C_Init+0x1dc>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	1e58      	subs	r0, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6859      	ldr	r1, [r3, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	0099      	lsls	r1, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b88:	6879      	ldr	r1, [r7, #4]
 8005b8a:	6809      	ldr	r1, [r1, #0]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69da      	ldr	r2, [r3, #28]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6911      	ldr	r1, [r2, #16]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	68d2      	ldr	r2, [r2, #12]
 8005bc2:	4311      	orrs	r1, r2
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2220      	movs	r2, #32
 8005c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	000186a0 	.word	0x000186a0
 8005c24:	001e847f 	.word	0x001e847f
 8005c28:	003d08ff 	.word	0x003d08ff
 8005c2c:	431bde83 	.word	0x431bde83
 8005c30:	10624dd3 	.word	0x10624dd3

08005c34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e021      	b.n	8005c8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2224      	movs	r2, #36	; 0x24
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 f821 	bl	8005ca6 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af02      	add	r7, sp, #8
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	4611      	mov	r1, r2
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	817b      	strh	r3, [r7, #10]
 8005cce:	460b      	mov	r3, r1
 8005cd0:	813b      	strh	r3, [r7, #8]
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005cd6:	f7fe fef3 	bl	8004ac0 <HAL_GetTick>
 8005cda:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	f040 80d9 	bne.w	8005e9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	2319      	movs	r3, #25
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	496d      	ldr	r1, [pc, #436]	; (8005ea8 <HAL_I2C_Mem_Write+0x1ec>)
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fc89 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005d00:	2302      	movs	r3, #2
 8005d02:	e0cc      	b.n	8005e9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <HAL_I2C_Mem_Write+0x56>
 8005d0e:	2302      	movs	r3, #2
 8005d10:	e0c5      	b.n	8005e9e <HAL_I2C_Mem_Write+0x1e2>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d007      	beq.n	8005d38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2221      	movs	r2, #33	; 0x21
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2240      	movs	r2, #64	; 0x40
 8005d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d68:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	4a4d      	ldr	r2, [pc, #308]	; (8005eac <HAL_I2C_Mem_Write+0x1f0>)
 8005d78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d7a:	88f8      	ldrh	r0, [r7, #6]
 8005d7c:	893a      	ldrh	r2, [r7, #8]
 8005d7e:	8979      	ldrh	r1, [r7, #10]
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	4603      	mov	r3, r0
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 fac4 	bl	8006318 <I2C_RequestMemoryWrite>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d052      	beq.n	8005e3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e081      	b.n	8005e9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fd0a 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00d      	beq.n	8005dc6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d107      	bne.n	8005dc2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e06b      	b.n	8005e9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	781a      	ldrb	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de0:	3b01      	subs	r3, #1
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d11b      	bne.n	8005e3c <HAL_I2C_Mem_Write+0x180>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d017      	beq.n	8005e3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	781a      	ldrb	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1aa      	bne.n	8005d9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 fcf6 	bl	800683a <I2C_WaitOnBTFFlagUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d107      	bne.n	8005e6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e016      	b.n	8005e9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e000      	b.n	8005e9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005e9c:	2302      	movs	r3, #2
  }
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	00100002 	.word	0x00100002
 8005eac:	ffff0000 	.word	0xffff0000

08005eb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08c      	sub	sp, #48	; 0x30
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	4608      	mov	r0, r1
 8005eba:	4611      	mov	r1, r2
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	817b      	strh	r3, [r7, #10]
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	813b      	strh	r3, [r7, #8]
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005eca:	f7fe fdf9 	bl	8004ac0 <HAL_GetTick>
 8005ece:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	f040 8208 	bne.w	80062ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	2319      	movs	r3, #25
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	497b      	ldr	r1, [pc, #492]	; (80060d4 <HAL_I2C_Mem_Read+0x224>)
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 fb8f 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e1fb      	b.n	80062f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d101      	bne.n	8005f06 <HAL_I2C_Mem_Read+0x56>
 8005f02:	2302      	movs	r3, #2
 8005f04:	e1f4      	b.n	80062f0 <HAL_I2C_Mem_Read+0x440>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d007      	beq.n	8005f2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2222      	movs	r2, #34	; 0x22
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2240      	movs	r2, #64	; 0x40
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4a5b      	ldr	r2, [pc, #364]	; (80060d8 <HAL_I2C_Mem_Read+0x228>)
 8005f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005f6e:	88f8      	ldrh	r0, [r7, #6]
 8005f70:	893a      	ldrh	r2, [r7, #8]
 8005f72:	8979      	ldrh	r1, [r7, #10]
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 fa5e 	bl	8006440 <I2C_RequestMemoryRead>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e1b0      	b.n	80062f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d113      	bne.n	8005fbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f96:	2300      	movs	r3, #0
 8005f98:	623b      	str	r3, [r7, #32]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	623b      	str	r3, [r7, #32]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	623b      	str	r3, [r7, #32]
 8005faa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	e184      	b.n	80062c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d11b      	bne.n	8005ffe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	61fb      	str	r3, [r7, #28]
 8005fea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	e164      	b.n	80062c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006002:	2b02      	cmp	r3, #2
 8006004:	d11b      	bne.n	800603e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006014:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006024:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006026:	2300      	movs	r3, #0
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	61bb      	str	r3, [r7, #24]
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	e144      	b.n	80062c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	617b      	str	r3, [r7, #20]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	617b      	str	r3, [r7, #20]
 8006052:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006054:	e138      	b.n	80062c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	2b03      	cmp	r3, #3
 800605c:	f200 80f1 	bhi.w	8006242 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006064:	2b01      	cmp	r3, #1
 8006066:	d123      	bne.n	80060b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800606a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 fc25 	bl	80068bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e139      	b.n	80062f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006098:	3b01      	subs	r3, #1
 800609a:	b29a      	uxth	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060ae:	e10b      	b.n	80062c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d14e      	bne.n	8006156 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060be:	2200      	movs	r2, #0
 80060c0:	4906      	ldr	r1, [pc, #24]	; (80060dc <HAL_I2C_Mem_Read+0x22c>)
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 faa2 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d008      	beq.n	80060e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e10e      	b.n	80062f0 <HAL_I2C_Mem_Read+0x440>
 80060d2:	bf00      	nop
 80060d4:	00100002 	.word	0x00100002
 80060d8:	ffff0000 	.word	0xffff0000
 80060dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	691a      	ldr	r2, [r3, #16]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fa:	b2d2      	uxtb	r2, r2
 80060fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006118:	b29b      	uxth	r3, r3
 800611a:	3b01      	subs	r3, #1
 800611c:	b29a      	uxth	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	691a      	ldr	r2, [r3, #16]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612c:	b2d2      	uxtb	r2, r2
 800612e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800614a:	b29b      	uxth	r3, r3
 800614c:	3b01      	subs	r3, #1
 800614e:	b29a      	uxth	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006154:	e0b8      	b.n	80062c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	9300      	str	r3, [sp, #0]
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	2200      	movs	r2, #0
 800615e:	4966      	ldr	r1, [pc, #408]	; (80062f8 <HAL_I2C_Mem_Read+0x448>)
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f000 fa53 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e0bf      	b.n	80062f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691a      	ldr	r2, [r3, #16]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	b2d2      	uxtb	r2, r2
 800618c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b8:	2200      	movs	r2, #0
 80061ba:	494f      	ldr	r1, [pc, #316]	; (80062f8 <HAL_I2C_Mem_Read+0x448>)
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 fa25 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e091      	b.n	80062f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691a      	ldr	r2, [r3, #16]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006240:	e042      	b.n	80062c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006244:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f000 fb38 	bl	80068bc <I2C_WaitOnRXNEFlagUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e04c      	b.n	80062f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800627e:	b29b      	uxth	r3, r3
 8006280:	3b01      	subs	r3, #1
 8006282:	b29a      	uxth	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	2b04      	cmp	r3, #4
 8006294:	d118      	bne.n	80062c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b2:	3b01      	subs	r3, #1
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	f47f aec2 	bne.w	8006056 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	e000      	b.n	80062f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80062ee:	2302      	movs	r3, #2
  }
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3728      	adds	r7, #40	; 0x28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	00010004 	.word	0x00010004

080062fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800630a:	b2db      	uxtb	r3, r3
}
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af02      	add	r7, sp, #8
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	4608      	mov	r0, r1
 8006322:	4611      	mov	r1, r2
 8006324:	461a      	mov	r2, r3
 8006326:	4603      	mov	r3, r0
 8006328:	817b      	strh	r3, [r7, #10]
 800632a:	460b      	mov	r3, r1
 800632c:	813b      	strh	r3, [r7, #8]
 800632e:	4613      	mov	r3, r2
 8006330:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006340:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	2200      	movs	r2, #0
 800634a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f95c 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00c      	beq.n	8006374 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800636e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e05f      	b.n	8006434 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006374:	897b      	ldrh	r3, [r7, #10]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006382:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	6a3a      	ldr	r2, [r7, #32]
 8006388:	492c      	ldr	r1, [pc, #176]	; (800643c <I2C_RequestMemoryWrite+0x124>)
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f995 	bl	80066ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e04c      	b.n	8006434 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b2:	6a39      	ldr	r1, [r7, #32]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 f9ff 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00d      	beq.n	80063dc <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d107      	bne.n	80063d8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e02b      	b.n	8006434 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063dc:	88fb      	ldrh	r3, [r7, #6]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d105      	bne.n	80063ee <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063e2:	893b      	ldrh	r3, [r7, #8]
 80063e4:	b2da      	uxtb	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	611a      	str	r2, [r3, #16]
 80063ec:	e021      	b.n	8006432 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063ee:	893b      	ldrh	r3, [r7, #8]
 80063f0:	0a1b      	lsrs	r3, r3, #8
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fe:	6a39      	ldr	r1, [r7, #32]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f9d9 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00d      	beq.n	8006428 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	2b04      	cmp	r3, #4
 8006412:	d107      	bne.n	8006424 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006422:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e005      	b.n	8006434 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006428:	893b      	ldrh	r3, [r7, #8]
 800642a:	b2da      	uxtb	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	00010002 	.word	0x00010002

08006440 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b088      	sub	sp, #32
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	461a      	mov	r2, r3
 800644e:	4603      	mov	r3, r0
 8006450:	817b      	strh	r3, [r7, #10]
 8006452:	460b      	mov	r3, r1
 8006454:	813b      	strh	r3, [r7, #8]
 8006456:	4613      	mov	r3, r2
 8006458:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006468:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006478:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	2200      	movs	r2, #0
 8006482:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f000 f8c0 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00c      	beq.n	80064ac <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e0a9      	b.n	8006600 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064ac:	897b      	ldrh	r3, [r7, #10]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	4951      	ldr	r1, [pc, #324]	; (8006608 <I2C_RequestMemoryRead+0x1c8>)
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f8f9 	bl	80066ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e096      	b.n	8006600 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064d2:	2300      	movs	r3, #0
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	617b      	str	r3, [r7, #20]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ea:	6a39      	ldr	r1, [r7, #32]
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f963 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d107      	bne.n	8006510 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800650e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e075      	b.n	8006600 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006514:	88fb      	ldrh	r3, [r7, #6]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d105      	bne.n	8006526 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800651a:	893b      	ldrh	r3, [r7, #8]
 800651c:	b2da      	uxtb	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	611a      	str	r2, [r3, #16]
 8006524:	e021      	b.n	800656a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006526:	893b      	ldrh	r3, [r7, #8]
 8006528:	0a1b      	lsrs	r3, r3, #8
 800652a:	b29b      	uxth	r3, r3
 800652c:	b2da      	uxtb	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006536:	6a39      	ldr	r1, [r7, #32]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f93d 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00d      	beq.n	8006560 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2b04      	cmp	r3, #4
 800654a:	d107      	bne.n	800655c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800655a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e04f      	b.n	8006600 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006560:	893b      	ldrh	r3, [r7, #8]
 8006562:	b2da      	uxtb	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800656a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800656c:	6a39      	ldr	r1, [r7, #32]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 f922 	bl	80067b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00d      	beq.n	8006596 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	2b04      	cmp	r3, #4
 8006580:	d107      	bne.n	8006592 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006590:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e034      	b.n	8006600 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f82a 	bl	800660c <I2C_WaitOnFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00c      	beq.n	80065d8 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d003      	beq.n	80065d4 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e013      	b.n	8006600 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065d8:	897b      	ldrh	r3, [r7, #10]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f043 0301 	orr.w	r3, r3, #1
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	6a3a      	ldr	r2, [r7, #32]
 80065ec:	4906      	ldr	r1, [pc, #24]	; (8006608 <I2C_RequestMemoryRead+0x1c8>)
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f863 	bl	80066ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	00010002 	.word	0x00010002

0800660c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	603b      	str	r3, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800661c:	e025      	b.n	800666a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006624:	d021      	beq.n	800666a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006626:	f7fe fa4b 	bl	8004ac0 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	429a      	cmp	r2, r3
 8006634:	d302      	bcc.n	800663c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d116      	bne.n	800666a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2220      	movs	r2, #32
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	f043 0220 	orr.w	r2, r3, #32
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e023      	b.n	80066b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	0c1b      	lsrs	r3, r3, #16
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	d10d      	bne.n	8006690 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	43da      	mvns	r2, r3
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	4013      	ands	r3, r2
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	bf0c      	ite	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	2300      	movne	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	461a      	mov	r2, r3
 800668e:	e00c      	b.n	80066aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	43da      	mvns	r2, r3
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	4013      	ands	r3, r2
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bf0c      	ite	eq
 80066a2:	2301      	moveq	r3, #1
 80066a4:	2300      	movne	r3, #0
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	461a      	mov	r2, r3
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d0b6      	beq.n	800661e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b084      	sub	sp, #16
 80066be:	af00      	add	r7, sp, #0
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066c8:	e051      	b.n	800676e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d8:	d123      	bne.n	8006722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80066f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	f043 0204 	orr.w	r2, r3, #4
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e046      	b.n	80067b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006728:	d021      	beq.n	800676e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672a:	f7fe f9c9 	bl	8004ac0 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	429a      	cmp	r2, r3
 8006738:	d302      	bcc.n	8006740 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d116      	bne.n	800676e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	f043 0220 	orr.w	r2, r3, #32
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e020      	b.n	80067b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	d10c      	bne.n	8006792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	43da      	mvns	r2, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4013      	ands	r3, r2
 8006784:	b29b      	uxth	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf14      	ite	ne
 800678a:	2301      	movne	r3, #1
 800678c:	2300      	moveq	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	e00b      	b.n	80067aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	43da      	mvns	r2, r3
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	4013      	ands	r3, r2
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bf14      	ite	ne
 80067a4:	2301      	movne	r3, #1
 80067a6:	2300      	moveq	r3, #0
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d18d      	bne.n	80066ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80067c4:	e02d      	b.n	8006822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f8ce 	bl	8006968 <I2C_IsAcknowledgeFailed>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e02d      	b.n	8006832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067dc:	d021      	beq.n	8006822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fe f96f 	bl	8004ac0 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d116      	bne.n	8006822 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2220      	movs	r2, #32
 80067fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f043 0220 	orr.w	r2, r3, #32
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e007      	b.n	8006832 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682c:	2b80      	cmp	r3, #128	; 0x80
 800682e:	d1ca      	bne.n	80067c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b084      	sub	sp, #16
 800683e:	af00      	add	r7, sp, #0
 8006840:	60f8      	str	r0, [r7, #12]
 8006842:	60b9      	str	r1, [r7, #8]
 8006844:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006846:	e02d      	b.n	80068a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f88d 	bl	8006968 <I2C_IsAcknowledgeFailed>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e02d      	b.n	80068b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800685e:	d021      	beq.n	80068a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006860:	f7fe f92e 	bl	8004ac0 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d116      	bne.n	80068a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	f043 0220 	orr.w	r2, r3, #32
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e007      	b.n	80068b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0304 	and.w	r3, r3, #4
 80068ae:	2b04      	cmp	r3, #4
 80068b0:	d1ca      	bne.n	8006848 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068c8:	e042      	b.n	8006950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b10      	cmp	r3, #16
 80068d6:	d119      	bne.n	800690c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f06f 0210 	mvn.w	r2, #16
 80068e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e029      	b.n	8006960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690c:	f7fe f8d8 	bl	8004ac0 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	429a      	cmp	r2, r3
 800691a:	d302      	bcc.n	8006922 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d116      	bne.n	8006950 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2220      	movs	r2, #32
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693c:	f043 0220 	orr.w	r2, r3, #32
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e007      	b.n	8006960 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d1b5      	bne.n	80068ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697e:	d11b      	bne.n	80069b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006988:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2220      	movs	r2, #32
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	f043 0204 	orr.w	r2, r3, #4
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
	...

080069c8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80069d6:	2301      	movs	r3, #1
 80069d8:	e0bf      	b.n	8006b5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d106      	bne.n	80069f4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f8ba 	bl	8006b68 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006a0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6999      	ldr	r1, [r3, #24]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6899      	ldr	r1, [r3, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b4a      	ldr	r3, [pc, #296]	; (8006b64 <HAL_LTDC_Init+0x19c>)
 8006a3c:	400b      	ands	r3, r1
 8006a3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	041b      	lsls	r3, r3, #16
 8006a46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6899      	ldr	r1, [r3, #8]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	431a      	orrs	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68d9      	ldr	r1, [r3, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	4b3e      	ldr	r3, [pc, #248]	; (8006b64 <HAL_LTDC_Init+0x19c>)
 8006a6a:	400b      	ands	r3, r1
 8006a6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	041b      	lsls	r3, r3, #16
 8006a74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68d9      	ldr	r1, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6919      	ldr	r1, [r3, #16]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	4b33      	ldr	r3, [pc, #204]	; (8006b64 <HAL_LTDC_Init+0x19c>)
 8006a98:	400b      	ands	r3, r1
 8006a9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6919      	ldr	r1, [r3, #16]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6959      	ldr	r1, [r3, #20]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	4b27      	ldr	r3, [pc, #156]	; (8006b64 <HAL_LTDC_Init+0x19c>)
 8006ac6:	400b      	ands	r3, r1
 8006ac8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	041b      	lsls	r3, r3, #16
 8006ad0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6959      	ldr	r1, [r3, #20]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	430a      	orrs	r2, r1
 8006ae6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aee:	021b      	lsls	r3, r3, #8
 8006af0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006af8:	041b      	lsls	r3, r3, #16
 8006afa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	430a      	orrs	r2, r1
 8006b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f042 0206 	orr.w	r2, r2, #6
 8006b36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	699a      	ldr	r2, [r3, #24]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f042 0201 	orr.w	r2, r2, #1
 8006b46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	f000f800 	.word	0xf000f800

08006b68 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006b7c:	b5b0      	push	{r4, r5, r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_LTDC_ConfigLayer+0x1a>
 8006b92:	2302      	movs	r3, #2
 8006b94:	e02c      	b.n	8006bf0 <HAL_LTDC_ConfigLayer+0x74>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2202      	movs	r2, #2
 8006ba2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2134      	movs	r1, #52	; 0x34
 8006bac:	fb01 f303 	mul.w	r3, r1, r3
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	4614      	mov	r4, r2
 8006bba:	461d      	mov	r5, r3
 8006bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f83b 	bl	8006c4c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bdb0      	pop	{r4, r5, r7, pc}

08006bf8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d101      	bne.n	8006c0e <HAL_LTDC_EnableDither+0x16>
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	e016      	b.n	8006c3c <HAL_LTDC_EnableDither+0x44>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <HAL_LTDC_EnableDither+0x50>)
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	4a09      	ldr	r2, [pc, #36]	; (8006c48 <HAL_LTDC_EnableDither+0x50>)
 8006c24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c28:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40016800 	.word	0x40016800

08006c4c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b089      	sub	sp, #36	; 0x24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	0c1b      	lsrs	r3, r3, #16
 8006c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c68:	4413      	add	r3, r2
 8006c6a:	041b      	lsls	r3, r3, #16
 8006c6c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	01db      	lsls	r3, r3, #7
 8006c78:	4413      	add	r3, r2
 8006c7a:	3384      	adds	r3, #132	; 0x84
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	4611      	mov	r1, r2
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	01d2      	lsls	r2, r2, #7
 8006c88:	440a      	add	r2, r1
 8006c8a:	3284      	adds	r2, #132	; 0x84
 8006c8c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c90:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	0c1b      	lsrs	r3, r3, #16
 8006c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ca2:	4413      	add	r3, r2
 8006ca4:	1c5a      	adds	r2, r3, #1
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	01db      	lsls	r3, r3, #7
 8006cb0:	440b      	add	r3, r1
 8006cb2:	3384      	adds	r3, #132	; 0x84
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	68da      	ldr	r2, [r3, #12]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cca:	4413      	add	r3, r2
 8006ccc:	041b      	lsls	r3, r3, #16
 8006cce:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	01db      	lsls	r3, r3, #7
 8006cda:	4413      	add	r3, r2
 8006cdc:	3384      	adds	r3, #132	; 0x84
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	4611      	mov	r1, r2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	01d2      	lsls	r2, r2, #7
 8006cea:	440a      	add	r2, r1
 8006cec:	3284      	adds	r2, #132	; 0x84
 8006cee:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006cf2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d02:	4413      	add	r3, r2
 8006d04:	1c5a      	adds	r2, r3, #1
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	01db      	lsls	r3, r3, #7
 8006d10:	440b      	add	r3, r1
 8006d12:	3384      	adds	r3, #132	; 0x84
 8006d14:	4619      	mov	r1, r3
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	461a      	mov	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	01db      	lsls	r3, r3, #7
 8006d26:	4413      	add	r3, r2
 8006d28:	3384      	adds	r3, #132	; 0x84
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	6812      	ldr	r2, [r2, #0]
 8006d30:	4611      	mov	r1, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	01d2      	lsls	r2, r2, #7
 8006d36:	440a      	add	r2, r1
 8006d38:	3284      	adds	r2, #132	; 0x84
 8006d3a:	f023 0307 	bic.w	r3, r3, #7
 8006d3e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	01db      	lsls	r3, r3, #7
 8006d4a:	4413      	add	r3, r2
 8006d4c:	3384      	adds	r3, #132	; 0x84
 8006d4e:	461a      	mov	r2, r3
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	061b      	lsls	r3, r3, #24
 8006d70:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	01db      	lsls	r3, r3, #7
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3384      	adds	r3, #132	; 0x84
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	01db      	lsls	r3, r3, #7
 8006d8c:	4413      	add	r3, r2
 8006d8e:	3384      	adds	r3, #132	; 0x84
 8006d90:	461a      	mov	r2, r3
 8006d92:	2300      	movs	r3, #0
 8006d94:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	431a      	orrs	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4619      	mov	r1, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	01db      	lsls	r3, r3, #7
 8006db0:	440b      	add	r3, r1
 8006db2:	3384      	adds	r3, #132	; 0x84
 8006db4:	4619      	mov	r1, r3
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	01db      	lsls	r3, r3, #7
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3384      	adds	r3, #132	; 0x84
 8006dca:	695b      	ldr	r3, [r3, #20]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	01d2      	lsls	r2, r2, #7
 8006dd6:	440a      	add	r2, r1
 8006dd8:	3284      	adds	r2, #132	; 0x84
 8006dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006dde:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	01db      	lsls	r3, r3, #7
 8006dea:	4413      	add	r3, r2
 8006dec:	3384      	adds	r3, #132	; 0x84
 8006dee:	461a      	mov	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	01db      	lsls	r3, r3, #7
 8006e00:	4413      	add	r3, r2
 8006e02:	3384      	adds	r3, #132	; 0x84
 8006e04:	69db      	ldr	r3, [r3, #28]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	6812      	ldr	r2, [r2, #0]
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	01d2      	lsls	r2, r2, #7
 8006e10:	440a      	add	r2, r1
 8006e12:	3284      	adds	r2, #132	; 0x84
 8006e14:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e18:	f023 0307 	bic.w	r3, r3, #7
 8006e1c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	69da      	ldr	r2, [r3, #28]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	6809      	ldr	r1, [r1, #0]
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	6879      	ldr	r1, [r7, #4]
 8006e2e:	01c9      	lsls	r1, r1, #7
 8006e30:	4401      	add	r1, r0
 8006e32:	3184      	adds	r1, #132	; 0x84
 8006e34:	4313      	orrs	r3, r2
 8006e36:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	01db      	lsls	r3, r3, #7
 8006e42:	4413      	add	r3, r2
 8006e44:	3384      	adds	r3, #132	; 0x84
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	01db      	lsls	r3, r3, #7
 8006e52:	4413      	add	r3, r2
 8006e54:	3384      	adds	r3, #132	; 0x84
 8006e56:	461a      	mov	r2, r3
 8006e58:	2300      	movs	r3, #0
 8006e5a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	461a      	mov	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	01db      	lsls	r3, r3, #7
 8006e66:	4413      	add	r3, r2
 8006e68:	3384      	adds	r3, #132	; 0x84
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006e7a:	2304      	movs	r3, #4
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e01b      	b.n	8006eb8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d102      	bne.n	8006e8e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	61fb      	str	r3, [r7, #28]
 8006e8c:	e014      	b.n	8006eb8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	2b04      	cmp	r3, #4
 8006e94:	d00b      	beq.n	8006eae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d007      	beq.n	8006eae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d003      	beq.n	8006eae <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006eaa:	2b07      	cmp	r3, #7
 8006eac:	d102      	bne.n	8006eb4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	e001      	b.n	8006eb8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	01db      	lsls	r3, r3, #7
 8006ec2:	4413      	add	r3, r2
 8006ec4:	3384      	adds	r3, #132	; 0x84
 8006ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	6812      	ldr	r2, [r2, #0]
 8006ecc:	4611      	mov	r1, r2
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	01d2      	lsls	r2, r2, #7
 8006ed2:	440a      	add	r2, r1
 8006ed4:	3284      	adds	r2, #132	; 0x84
 8006ed6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006eda:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	fb02 f303 	mul.w	r3, r2, r3
 8006ee6:	041a      	lsls	r2, r3, #16
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	6859      	ldr	r1, [r3, #4]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	1acb      	subs	r3, r1, r3
 8006ef2:	69f9      	ldr	r1, [r7, #28]
 8006ef4:	fb01 f303 	mul.w	r3, r1, r3
 8006ef8:	3303      	adds	r3, #3
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	6809      	ldr	r1, [r1, #0]
 8006efe:	4608      	mov	r0, r1
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	01c9      	lsls	r1, r1, #7
 8006f04:	4401      	add	r1, r0
 8006f06:	3184      	adds	r1, #132	; 0x84
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	461a      	mov	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	01db      	lsls	r3, r3, #7
 8006f16:	4413      	add	r3, r2
 8006f18:	3384      	adds	r3, #132	; 0x84
 8006f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	6812      	ldr	r2, [r2, #0]
 8006f20:	4611      	mov	r1, r2
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	01d2      	lsls	r2, r2, #7
 8006f26:	440a      	add	r2, r1
 8006f28:	3284      	adds	r2, #132	; 0x84
 8006f2a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f2e:	f023 0307 	bic.w	r3, r3, #7
 8006f32:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	01db      	lsls	r3, r3, #7
 8006f3e:	4413      	add	r3, r2
 8006f40:	3384      	adds	r3, #132	; 0x84
 8006f42:	461a      	mov	r2, r3
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	01db      	lsls	r3, r3, #7
 8006f54:	4413      	add	r3, r2
 8006f56:	3384      	adds	r3, #132	; 0x84
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	6812      	ldr	r2, [r2, #0]
 8006f5e:	4611      	mov	r1, r2
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	01d2      	lsls	r2, r2, #7
 8006f64:	440a      	add	r2, r1
 8006f66:	3284      	adds	r2, #132	; 0x84
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	6013      	str	r3, [r2, #0]
}
 8006f6e:	bf00      	nop
 8006f70:	3724      	adds	r7, #36	; 0x24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
	...

08006f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d101      	bne.n	8006f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e25e      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d075      	beq.n	8007086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f9a:	4b88      	ldr	r3, [pc, #544]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 030c 	and.w	r3, r3, #12
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d00c      	beq.n	8006fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fa6:	4b85      	ldr	r3, [pc, #532]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006fae:	2b08      	cmp	r3, #8
 8006fb0:	d112      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006fb2:	4b82      	ldr	r3, [pc, #520]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006fbe:	d10b      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fc0:	4b7e      	ldr	r3, [pc, #504]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d05b      	beq.n	8007084 <HAL_RCC_OscConfig+0x108>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d157      	bne.n	8007084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e239      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe0:	d106      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x74>
 8006fe2:	4b76      	ldr	r3, [pc, #472]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a75      	ldr	r2, [pc, #468]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8006fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fec:	6013      	str	r3, [r2, #0]
 8006fee:	e01d      	b.n	800702c <HAL_RCC_OscConfig+0xb0>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ff8:	d10c      	bne.n	8007014 <HAL_RCC_OscConfig+0x98>
 8006ffa:	4b70      	ldr	r3, [pc, #448]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a6f      	ldr	r2, [pc, #444]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	4b6d      	ldr	r3, [pc, #436]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a6c      	ldr	r2, [pc, #432]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 800700c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007010:	6013      	str	r3, [r2, #0]
 8007012:	e00b      	b.n	800702c <HAL_RCC_OscConfig+0xb0>
 8007014:	4b69      	ldr	r3, [pc, #420]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a68      	ldr	r2, [pc, #416]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 800701a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	4b66      	ldr	r3, [pc, #408]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a65      	ldr	r2, [pc, #404]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800702a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d013      	beq.n	800705c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007034:	f7fd fd44 	bl	8004ac0 <HAL_GetTick>
 8007038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800703a:	e008      	b.n	800704e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800703c:	f7fd fd40 	bl	8004ac0 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	2b64      	cmp	r3, #100	; 0x64
 8007048:	d901      	bls.n	800704e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e1fe      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800704e:	4b5b      	ldr	r3, [pc, #364]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0f0      	beq.n	800703c <HAL_RCC_OscConfig+0xc0>
 800705a:	e014      	b.n	8007086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800705c:	f7fd fd30 	bl	8004ac0 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007062:	e008      	b.n	8007076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007064:	f7fd fd2c 	bl	8004ac0 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	2b64      	cmp	r3, #100	; 0x64
 8007070:	d901      	bls.n	8007076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007072:	2303      	movs	r3, #3
 8007074:	e1ea      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007076:	4b51      	ldr	r3, [pc, #324]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f0      	bne.n	8007064 <HAL_RCC_OscConfig+0xe8>
 8007082:	e000      	b.n	8007086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d063      	beq.n	800715a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007092:	4b4a      	ldr	r3, [pc, #296]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f003 030c 	and.w	r3, r3, #12
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00b      	beq.n	80070b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800709e:	4b47      	ldr	r3, [pc, #284]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	d11c      	bne.n	80070e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070aa:	4b44      	ldr	r3, [pc, #272]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d116      	bne.n	80070e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070b6:	4b41      	ldr	r3, [pc, #260]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0302 	and.w	r3, r3, #2
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <HAL_RCC_OscConfig+0x152>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d001      	beq.n	80070ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e1be      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070ce:	4b3b      	ldr	r3, [pc, #236]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	4937      	ldr	r1, [pc, #220]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80070e2:	e03a      	b.n	800715a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d020      	beq.n	800712e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070ec:	4b34      	ldr	r3, [pc, #208]	; (80071c0 <HAL_RCC_OscConfig+0x244>)
 80070ee:	2201      	movs	r2, #1
 80070f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070f2:	f7fd fce5 	bl	8004ac0 <HAL_GetTick>
 80070f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070f8:	e008      	b.n	800710c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070fa:	f7fd fce1 	bl	8004ac0 <HAL_GetTick>
 80070fe:	4602      	mov	r2, r0
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	2b02      	cmp	r3, #2
 8007106:	d901      	bls.n	800710c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007108:	2303      	movs	r3, #3
 800710a:	e19f      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800710c:	4b2b      	ldr	r3, [pc, #172]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0f0      	beq.n	80070fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007118:	4b28      	ldr	r3, [pc, #160]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4925      	ldr	r1, [pc, #148]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007128:	4313      	orrs	r3, r2
 800712a:	600b      	str	r3, [r1, #0]
 800712c:	e015      	b.n	800715a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800712e:	4b24      	ldr	r3, [pc, #144]	; (80071c0 <HAL_RCC_OscConfig+0x244>)
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007134:	f7fd fcc4 	bl	8004ac0 <HAL_GetTick>
 8007138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800713c:	f7fd fcc0 	bl	8004ac0 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b02      	cmp	r3, #2
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e17e      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800714e:	4b1b      	ldr	r3, [pc, #108]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f0      	bne.n	800713c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0308 	and.w	r3, r3, #8
 8007162:	2b00      	cmp	r3, #0
 8007164:	d036      	beq.n	80071d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d016      	beq.n	800719c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800716e:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <HAL_RCC_OscConfig+0x248>)
 8007170:	2201      	movs	r2, #1
 8007172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007174:	f7fd fca4 	bl	8004ac0 <HAL_GetTick>
 8007178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800717a:	e008      	b.n	800718e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800717c:	f7fd fca0 	bl	8004ac0 <HAL_GetTick>
 8007180:	4602      	mov	r2, r0
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	1ad3      	subs	r3, r2, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d901      	bls.n	800718e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e15e      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800718e:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <HAL_RCC_OscConfig+0x240>)
 8007190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007192:	f003 0302 	and.w	r3, r3, #2
 8007196:	2b00      	cmp	r3, #0
 8007198:	d0f0      	beq.n	800717c <HAL_RCC_OscConfig+0x200>
 800719a:	e01b      	b.n	80071d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800719c:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <HAL_RCC_OscConfig+0x248>)
 800719e:	2200      	movs	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071a2:	f7fd fc8d 	bl	8004ac0 <HAL_GetTick>
 80071a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071a8:	e00e      	b.n	80071c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071aa:	f7fd fc89 	bl	8004ac0 <HAL_GetTick>
 80071ae:	4602      	mov	r2, r0
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	1ad3      	subs	r3, r2, r3
 80071b4:	2b02      	cmp	r3, #2
 80071b6:	d907      	bls.n	80071c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e147      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
 80071bc:	40023800 	.word	0x40023800
 80071c0:	42470000 	.word	0x42470000
 80071c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80071c8:	4b88      	ldr	r3, [pc, #544]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 80071ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d1ea      	bne.n	80071aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0304 	and.w	r3, r3, #4
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8097 	beq.w	8007310 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071e6:	4b81      	ldr	r3, [pc, #516]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10f      	bne.n	8007212 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071f2:	2300      	movs	r3, #0
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	4b7d      	ldr	r3, [pc, #500]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 80071f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fa:	4a7c      	ldr	r2, [pc, #496]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 80071fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007200:	6413      	str	r3, [r2, #64]	; 0x40
 8007202:	4b7a      	ldr	r3, [pc, #488]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800720a:	60bb      	str	r3, [r7, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800720e:	2301      	movs	r3, #1
 8007210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007212:	4b77      	ldr	r3, [pc, #476]	; (80073f0 <HAL_RCC_OscConfig+0x474>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721a:	2b00      	cmp	r3, #0
 800721c:	d118      	bne.n	8007250 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800721e:	4b74      	ldr	r3, [pc, #464]	; (80073f0 <HAL_RCC_OscConfig+0x474>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a73      	ldr	r2, [pc, #460]	; (80073f0 <HAL_RCC_OscConfig+0x474>)
 8007224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800722a:	f7fd fc49 	bl	8004ac0 <HAL_GetTick>
 800722e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007230:	e008      	b.n	8007244 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007232:	f7fd fc45 	bl	8004ac0 <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d901      	bls.n	8007244 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e103      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007244:	4b6a      	ldr	r3, [pc, #424]	; (80073f0 <HAL_RCC_OscConfig+0x474>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d0f0      	beq.n	8007232 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d106      	bne.n	8007266 <HAL_RCC_OscConfig+0x2ea>
 8007258:	4b64      	ldr	r3, [pc, #400]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 800725a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725c:	4a63      	ldr	r2, [pc, #396]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 800725e:	f043 0301 	orr.w	r3, r3, #1
 8007262:	6713      	str	r3, [r2, #112]	; 0x70
 8007264:	e01c      	b.n	80072a0 <HAL_RCC_OscConfig+0x324>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2b05      	cmp	r3, #5
 800726c:	d10c      	bne.n	8007288 <HAL_RCC_OscConfig+0x30c>
 800726e:	4b5f      	ldr	r3, [pc, #380]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	4a5e      	ldr	r2, [pc, #376]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 8007274:	f043 0304 	orr.w	r3, r3, #4
 8007278:	6713      	str	r3, [r2, #112]	; 0x70
 800727a:	4b5c      	ldr	r3, [pc, #368]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	4a5b      	ldr	r2, [pc, #364]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	6713      	str	r3, [r2, #112]	; 0x70
 8007286:	e00b      	b.n	80072a0 <HAL_RCC_OscConfig+0x324>
 8007288:	4b58      	ldr	r3, [pc, #352]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 800728a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728c:	4a57      	ldr	r2, [pc, #348]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 800728e:	f023 0301 	bic.w	r3, r3, #1
 8007292:	6713      	str	r3, [r2, #112]	; 0x70
 8007294:	4b55      	ldr	r3, [pc, #340]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 8007296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007298:	4a54      	ldr	r2, [pc, #336]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 800729a:	f023 0304 	bic.w	r3, r3, #4
 800729e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d015      	beq.n	80072d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a8:	f7fd fc0a 	bl	8004ac0 <HAL_GetTick>
 80072ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ae:	e00a      	b.n	80072c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072b0:	f7fd fc06 	bl	8004ac0 <HAL_GetTick>
 80072b4:	4602      	mov	r2, r0
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80072be:	4293      	cmp	r3, r2
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e0c2      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072c6:	4b49      	ldr	r3, [pc, #292]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 80072c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0ee      	beq.n	80072b0 <HAL_RCC_OscConfig+0x334>
 80072d2:	e014      	b.n	80072fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072d4:	f7fd fbf4 	bl	8004ac0 <HAL_GetTick>
 80072d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072da:	e00a      	b.n	80072f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80072dc:	f7fd fbf0 	bl	8004ac0 <HAL_GetTick>
 80072e0:	4602      	mov	r2, r0
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d901      	bls.n	80072f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e0ac      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072f2:	4b3e      	ldr	r3, [pc, #248]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	f003 0302 	and.w	r3, r3, #2
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1ee      	bne.n	80072dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d105      	bne.n	8007310 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007304:	4b39      	ldr	r3, [pc, #228]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	4a38      	ldr	r2, [pc, #224]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 800730a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800730e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8098 	beq.w	800744a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800731a:	4b34      	ldr	r3, [pc, #208]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f003 030c 	and.w	r3, r3, #12
 8007322:	2b08      	cmp	r3, #8
 8007324:	d05c      	beq.n	80073e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	2b02      	cmp	r3, #2
 800732c:	d141      	bne.n	80073b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800732e:	4b31      	ldr	r3, [pc, #196]	; (80073f4 <HAL_RCC_OscConfig+0x478>)
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007334:	f7fd fbc4 	bl	8004ac0 <HAL_GetTick>
 8007338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800733a:	e008      	b.n	800734e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800733c:	f7fd fbc0 	bl	8004ac0 <HAL_GetTick>
 8007340:	4602      	mov	r2, r0
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	1ad3      	subs	r3, r2, r3
 8007346:	2b02      	cmp	r3, #2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e07e      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800734e:	4b27      	ldr	r3, [pc, #156]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1f0      	bne.n	800733c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69da      	ldr	r2, [r3, #28]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a1b      	ldr	r3, [r3, #32]
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	019b      	lsls	r3, r3, #6
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007370:	085b      	lsrs	r3, r3, #1
 8007372:	3b01      	subs	r3, #1
 8007374:	041b      	lsls	r3, r3, #16
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	061b      	lsls	r3, r3, #24
 800737e:	491b      	ldr	r1, [pc, #108]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 8007380:	4313      	orrs	r3, r2
 8007382:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007384:	4b1b      	ldr	r3, [pc, #108]	; (80073f4 <HAL_RCC_OscConfig+0x478>)
 8007386:	2201      	movs	r2, #1
 8007388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800738a:	f7fd fb99 	bl	8004ac0 <HAL_GetTick>
 800738e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007390:	e008      	b.n	80073a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007392:	f7fd fb95 	bl	8004ac0 <HAL_GetTick>
 8007396:	4602      	mov	r2, r0
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	2b02      	cmp	r3, #2
 800739e:	d901      	bls.n	80073a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e053      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d0f0      	beq.n	8007392 <HAL_RCC_OscConfig+0x416>
 80073b0:	e04b      	b.n	800744a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073b2:	4b10      	ldr	r3, [pc, #64]	; (80073f4 <HAL_RCC_OscConfig+0x478>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073b8:	f7fd fb82 	bl	8004ac0 <HAL_GetTick>
 80073bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073be:	e008      	b.n	80073d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073c0:	f7fd fb7e 	bl	8004ac0 <HAL_GetTick>
 80073c4:	4602      	mov	r2, r0
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d901      	bls.n	80073d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80073ce:	2303      	movs	r3, #3
 80073d0:	e03c      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073d2:	4b06      	ldr	r3, [pc, #24]	; (80073ec <HAL_RCC_OscConfig+0x470>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f0      	bne.n	80073c0 <HAL_RCC_OscConfig+0x444>
 80073de:	e034      	b.n	800744a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d107      	bne.n	80073f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e02f      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
 80073ec:	40023800 	.word	0x40023800
 80073f0:	40007000 	.word	0x40007000
 80073f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073f8:	4b16      	ldr	r3, [pc, #88]	; (8007454 <HAL_RCC_OscConfig+0x4d8>)
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	69db      	ldr	r3, [r3, #28]
 8007408:	429a      	cmp	r2, r3
 800740a:	d11c      	bne.n	8007446 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007416:	429a      	cmp	r2, r3
 8007418:	d115      	bne.n	8007446 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007420:	4013      	ands	r3, r2
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007426:	4293      	cmp	r3, r2
 8007428:	d10d      	bne.n	8007446 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007434:	429a      	cmp	r2, r3
 8007436:	d106      	bne.n	8007446 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007442:	429a      	cmp	r2, r3
 8007444:	d001      	beq.n	800744a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3718      	adds	r7, #24
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	40023800 	.word	0x40023800

08007458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e0cc      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800746c:	4b68      	ldr	r3, [pc, #416]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 030f 	and.w	r3, r3, #15
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	429a      	cmp	r2, r3
 8007478:	d90c      	bls.n	8007494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800747a:	4b65      	ldr	r3, [pc, #404]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 800747c:	683a      	ldr	r2, [r7, #0]
 800747e:	b2d2      	uxtb	r2, r2
 8007480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007482:	4b63      	ldr	r3, [pc, #396]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	d001      	beq.n	8007494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	e0b8      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0302 	and.w	r3, r3, #2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d020      	beq.n	80074e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074ac:	4b59      	ldr	r3, [pc, #356]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	4a58      	ldr	r2, [pc, #352]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d005      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074c4:	4b53      	ldr	r3, [pc, #332]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	4a52      	ldr	r2, [pc, #328]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074d0:	4b50      	ldr	r3, [pc, #320]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	494d      	ldr	r1, [pc, #308]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d044      	beq.n	8007578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d107      	bne.n	8007506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074f6:	4b47      	ldr	r3, [pc, #284]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d119      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	e07f      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2b02      	cmp	r3, #2
 800750c:	d003      	beq.n	8007516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007512:	2b03      	cmp	r3, #3
 8007514:	d107      	bne.n	8007526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007516:	4b3f      	ldr	r3, [pc, #252]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d109      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e06f      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007526:	4b3b      	ldr	r3, [pc, #236]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 0302 	and.w	r3, r3, #2
 800752e:	2b00      	cmp	r3, #0
 8007530:	d101      	bne.n	8007536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e067      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007536:	4b37      	ldr	r3, [pc, #220]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f023 0203 	bic.w	r2, r3, #3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	4934      	ldr	r1, [pc, #208]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007544:	4313      	orrs	r3, r2
 8007546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007548:	f7fd faba 	bl	8004ac0 <HAL_GetTick>
 800754c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800754e:	e00a      	b.n	8007566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007550:	f7fd fab6 	bl	8004ac0 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	f241 3288 	movw	r2, #5000	; 0x1388
 800755e:	4293      	cmp	r3, r2
 8007560:	d901      	bls.n	8007566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007562:	2303      	movs	r3, #3
 8007564:	e04f      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007566:	4b2b      	ldr	r3, [pc, #172]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	f003 020c 	and.w	r2, r3, #12
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	429a      	cmp	r2, r3
 8007576:	d1eb      	bne.n	8007550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007578:	4b25      	ldr	r3, [pc, #148]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 030f 	and.w	r3, r3, #15
 8007580:	683a      	ldr	r2, [r7, #0]
 8007582:	429a      	cmp	r2, r3
 8007584:	d20c      	bcs.n	80075a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007586:	4b22      	ldr	r3, [pc, #136]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800758e:	4b20      	ldr	r3, [pc, #128]	; (8007610 <HAL_RCC_ClockConfig+0x1b8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 030f 	and.w	r3, r3, #15
 8007596:	683a      	ldr	r2, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d001      	beq.n	80075a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	e032      	b.n	8007606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d008      	beq.n	80075be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075ac:	4b19      	ldr	r3, [pc, #100]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4916      	ldr	r1, [pc, #88]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d009      	beq.n	80075de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80075ca:	4b12      	ldr	r3, [pc, #72]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	00db      	lsls	r3, r3, #3
 80075d8:	490e      	ldr	r1, [pc, #56]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80075de:	f000 f821 	bl	8007624 <HAL_RCC_GetSysClockFreq>
 80075e2:	4602      	mov	r2, r0
 80075e4:	4b0b      	ldr	r3, [pc, #44]	; (8007614 <HAL_RCC_ClockConfig+0x1bc>)
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	091b      	lsrs	r3, r3, #4
 80075ea:	f003 030f 	and.w	r3, r3, #15
 80075ee:	490a      	ldr	r1, [pc, #40]	; (8007618 <HAL_RCC_ClockConfig+0x1c0>)
 80075f0:	5ccb      	ldrb	r3, [r1, r3]
 80075f2:	fa22 f303 	lsr.w	r3, r2, r3
 80075f6:	4a09      	ldr	r2, [pc, #36]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 80075f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fd fa1a 	bl	8004a38 <HAL_InitTick>

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	40023c00 	.word	0x40023c00
 8007614:	40023800 	.word	0x40023800
 8007618:	0800ed8c 	.word	0x0800ed8c
 800761c:	20000034 	.word	0x20000034
 8007620:	200000c4 	.word	0x200000c4

08007624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007628:	b094      	sub	sp, #80	; 0x50
 800762a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	647b      	str	r3, [r7, #68]	; 0x44
 8007630:	2300      	movs	r3, #0
 8007632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007634:	2300      	movs	r3, #0
 8007636:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800763c:	4b79      	ldr	r3, [pc, #484]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f003 030c 	and.w	r3, r3, #12
 8007644:	2b08      	cmp	r3, #8
 8007646:	d00d      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0x40>
 8007648:	2b08      	cmp	r3, #8
 800764a:	f200 80e1 	bhi.w	8007810 <HAL_RCC_GetSysClockFreq+0x1ec>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <HAL_RCC_GetSysClockFreq+0x34>
 8007652:	2b04      	cmp	r3, #4
 8007654:	d003      	beq.n	800765e <HAL_RCC_GetSysClockFreq+0x3a>
 8007656:	e0db      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007658:	4b73      	ldr	r3, [pc, #460]	; (8007828 <HAL_RCC_GetSysClockFreq+0x204>)
 800765a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800765c:	e0db      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800765e:	4b73      	ldr	r3, [pc, #460]	; (800782c <HAL_RCC_GetSysClockFreq+0x208>)
 8007660:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007662:	e0d8      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007664:	4b6f      	ldr	r3, [pc, #444]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800766c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800766e:	4b6d      	ldr	r3, [pc, #436]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d063      	beq.n	8007742 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800767a:	4b6a      	ldr	r3, [pc, #424]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	099b      	lsrs	r3, r3, #6
 8007680:	2200      	movs	r2, #0
 8007682:	63bb      	str	r3, [r7, #56]	; 0x38
 8007684:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800768c:	633b      	str	r3, [r7, #48]	; 0x30
 800768e:	2300      	movs	r3, #0
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
 8007692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007696:	4622      	mov	r2, r4
 8007698:	462b      	mov	r3, r5
 800769a:	f04f 0000 	mov.w	r0, #0
 800769e:	f04f 0100 	mov.w	r1, #0
 80076a2:	0159      	lsls	r1, r3, #5
 80076a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076a8:	0150      	lsls	r0, r2, #5
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4621      	mov	r1, r4
 80076b0:	1a51      	subs	r1, r2, r1
 80076b2:	6139      	str	r1, [r7, #16]
 80076b4:	4629      	mov	r1, r5
 80076b6:	eb63 0301 	sbc.w	r3, r3, r1
 80076ba:	617b      	str	r3, [r7, #20]
 80076bc:	f04f 0200 	mov.w	r2, #0
 80076c0:	f04f 0300 	mov.w	r3, #0
 80076c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076c8:	4659      	mov	r1, fp
 80076ca:	018b      	lsls	r3, r1, #6
 80076cc:	4651      	mov	r1, sl
 80076ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076d2:	4651      	mov	r1, sl
 80076d4:	018a      	lsls	r2, r1, #6
 80076d6:	4651      	mov	r1, sl
 80076d8:	ebb2 0801 	subs.w	r8, r2, r1
 80076dc:	4659      	mov	r1, fp
 80076de:	eb63 0901 	sbc.w	r9, r3, r1
 80076e2:	f04f 0200 	mov.w	r2, #0
 80076e6:	f04f 0300 	mov.w	r3, #0
 80076ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076f6:	4690      	mov	r8, r2
 80076f8:	4699      	mov	r9, r3
 80076fa:	4623      	mov	r3, r4
 80076fc:	eb18 0303 	adds.w	r3, r8, r3
 8007700:	60bb      	str	r3, [r7, #8]
 8007702:	462b      	mov	r3, r5
 8007704:	eb49 0303 	adc.w	r3, r9, r3
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	f04f 0200 	mov.w	r2, #0
 800770e:	f04f 0300 	mov.w	r3, #0
 8007712:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007716:	4629      	mov	r1, r5
 8007718:	024b      	lsls	r3, r1, #9
 800771a:	4621      	mov	r1, r4
 800771c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007720:	4621      	mov	r1, r4
 8007722:	024a      	lsls	r2, r1, #9
 8007724:	4610      	mov	r0, r2
 8007726:	4619      	mov	r1, r3
 8007728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800772a:	2200      	movs	r2, #0
 800772c:	62bb      	str	r3, [r7, #40]	; 0x28
 800772e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007730:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007734:	f7f9 fb52 	bl	8000ddc <__aeabi_uldivmod>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4613      	mov	r3, r2
 800773e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007740:	e058      	b.n	80077f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007742:	4b38      	ldr	r3, [pc, #224]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	099b      	lsrs	r3, r3, #6
 8007748:	2200      	movs	r2, #0
 800774a:	4618      	mov	r0, r3
 800774c:	4611      	mov	r1, r2
 800774e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007752:	623b      	str	r3, [r7, #32]
 8007754:	2300      	movs	r3, #0
 8007756:	627b      	str	r3, [r7, #36]	; 0x24
 8007758:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800775c:	4642      	mov	r2, r8
 800775e:	464b      	mov	r3, r9
 8007760:	f04f 0000 	mov.w	r0, #0
 8007764:	f04f 0100 	mov.w	r1, #0
 8007768:	0159      	lsls	r1, r3, #5
 800776a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800776e:	0150      	lsls	r0, r2, #5
 8007770:	4602      	mov	r2, r0
 8007772:	460b      	mov	r3, r1
 8007774:	4641      	mov	r1, r8
 8007776:	ebb2 0a01 	subs.w	sl, r2, r1
 800777a:	4649      	mov	r1, r9
 800777c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	f04f 0300 	mov.w	r3, #0
 8007788:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800778c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007790:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007794:	ebb2 040a 	subs.w	r4, r2, sl
 8007798:	eb63 050b 	sbc.w	r5, r3, fp
 800779c:	f04f 0200 	mov.w	r2, #0
 80077a0:	f04f 0300 	mov.w	r3, #0
 80077a4:	00eb      	lsls	r3, r5, #3
 80077a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077aa:	00e2      	lsls	r2, r4, #3
 80077ac:	4614      	mov	r4, r2
 80077ae:	461d      	mov	r5, r3
 80077b0:	4643      	mov	r3, r8
 80077b2:	18e3      	adds	r3, r4, r3
 80077b4:	603b      	str	r3, [r7, #0]
 80077b6:	464b      	mov	r3, r9
 80077b8:	eb45 0303 	adc.w	r3, r5, r3
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077ca:	4629      	mov	r1, r5
 80077cc:	028b      	lsls	r3, r1, #10
 80077ce:	4621      	mov	r1, r4
 80077d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077d4:	4621      	mov	r1, r4
 80077d6:	028a      	lsls	r2, r1, #10
 80077d8:	4610      	mov	r0, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077de:	2200      	movs	r2, #0
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	61fa      	str	r2, [r7, #28]
 80077e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077e8:	f7f9 faf8 	bl	8000ddc <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4613      	mov	r3, r2
 80077f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <HAL_RCC_GetSysClockFreq+0x200>)
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	3301      	adds	r3, #1
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007804:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800780e:	e002      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <HAL_RCC_GetSysClockFreq+0x204>)
 8007812:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007818:	4618      	mov	r0, r3
 800781a:	3750      	adds	r7, #80	; 0x50
 800781c:	46bd      	mov	sp, r7
 800781e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007822:	bf00      	nop
 8007824:	40023800 	.word	0x40023800
 8007828:	00f42400 	.word	0x00f42400
 800782c:	007a1200 	.word	0x007a1200

08007830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007834:	4b03      	ldr	r3, [pc, #12]	; (8007844 <HAL_RCC_GetHCLKFreq+0x14>)
 8007836:	681b      	ldr	r3, [r3, #0]
}
 8007838:	4618      	mov	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	20000034 	.word	0x20000034

08007848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800784c:	f7ff fff0 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b05      	ldr	r3, [pc, #20]	; (8007868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	0a9b      	lsrs	r3, r3, #10
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4903      	ldr	r1, [pc, #12]	; (800786c <HAL_RCC_GetPCLK1Freq+0x24>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40023800 	.word	0x40023800
 800786c:	0800ed9c 	.word	0x0800ed9c

08007870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007874:	f7ff ffdc 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 8007878:	4602      	mov	r2, r0
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	0b5b      	lsrs	r3, r3, #13
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	4903      	ldr	r1, [pc, #12]	; (8007894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007886:	5ccb      	ldrb	r3, [r1, r3]
 8007888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800788c:	4618      	mov	r0, r3
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40023800 	.word	0x40023800
 8007894:	0800ed9c 	.word	0x0800ed9c

08007898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d10b      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d075      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80078cc:	4b91      	ldr	r3, [pc, #580]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80078d2:	f7fd f8f5 	bl	8004ac0 <HAL_GetTick>
 80078d6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078d8:	e008      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80078da:	f7fd f8f1 	bl	8004ac0 <HAL_GetTick>
 80078de:	4602      	mov	r2, r0
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	1ad3      	subs	r3, r2, r3
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d901      	bls.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e189      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078ec:	4b8a      	ldr	r3, [pc, #552]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1f0      	bne.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0301 	and.w	r3, r3, #1
 8007900:	2b00      	cmp	r3, #0
 8007902:	d009      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	019a      	lsls	r2, r3, #6
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	071b      	lsls	r3, r3, #28
 8007910:	4981      	ldr	r1, [pc, #516]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007912:	4313      	orrs	r3, r2
 8007914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d01f      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007924:	4b7c      	ldr	r3, [pc, #496]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800792a:	0f1b      	lsrs	r3, r3, #28
 800792c:	f003 0307 	and.w	r3, r3, #7
 8007930:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	019a      	lsls	r2, r3, #6
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	061b      	lsls	r3, r3, #24
 800793e:	431a      	orrs	r2, r3
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	071b      	lsls	r3, r3, #28
 8007944:	4974      	ldr	r1, [pc, #464]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007946:	4313      	orrs	r3, r2
 8007948:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800794c:	4b72      	ldr	r3, [pc, #456]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800794e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007952:	f023 021f 	bic.w	r2, r3, #31
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	3b01      	subs	r3, #1
 800795c:	496e      	ldr	r1, [pc, #440]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800795e:	4313      	orrs	r3, r2
 8007960:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00d      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	019a      	lsls	r2, r3, #6
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	061b      	lsls	r3, r3, #24
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	071b      	lsls	r3, r3, #28
 8007984:	4964      	ldr	r1, [pc, #400]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800798c:	4b61      	ldr	r3, [pc, #388]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800798e:	2201      	movs	r2, #1
 8007990:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007992:	f7fd f895 	bl	8004ac0 <HAL_GetTick>
 8007996:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007998:	e008      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800799a:	f7fd f891 	bl	8004ac0 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d901      	bls.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e129      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079ac:	4b5a      	ldr	r3, [pc, #360]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d0f0      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d079      	beq.n	8007ac4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079d0:	4b52      	ldr	r3, [pc, #328]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079d6:	f7fd f873 	bl	8004ac0 <HAL_GetTick>
 80079da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079dc:	e008      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80079de:	f7fd f86f 	bl	8004ac0 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	2b02      	cmp	r3, #2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e107      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079f0:	4b49      	ldr	r3, [pc, #292]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079fc:	d0ef      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0304 	and.w	r3, r3, #4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d020      	beq.n	8007a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a0a:	4b43      	ldr	r3, [pc, #268]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a10:	0f1b      	lsrs	r3, r3, #28
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	019a      	lsls	r2, r3, #6
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	061b      	lsls	r3, r3, #24
 8007a24:	431a      	orrs	r2, r3
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	071b      	lsls	r3, r3, #28
 8007a2a:	493b      	ldr	r1, [pc, #236]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a32:	4b39      	ldr	r3, [pc, #228]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	3b01      	subs	r3, #1
 8007a42:	021b      	lsls	r3, r3, #8
 8007a44:	4934      	ldr	r1, [pc, #208]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0308 	and.w	r3, r3, #8
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d01e      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a58:	4b2f      	ldr	r3, [pc, #188]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5e:	0e1b      	lsrs	r3, r3, #24
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	019a      	lsls	r2, r3, #6
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	061b      	lsls	r3, r3, #24
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	071b      	lsls	r3, r3, #28
 8007a78:	4927      	ldr	r1, [pc, #156]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a80:	4b25      	ldr	r3, [pc, #148]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a86:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8e:	4922      	ldr	r1, [pc, #136]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007a90:	4313      	orrs	r3, r2
 8007a92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a96:	4b21      	ldr	r3, [pc, #132]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a9c:	f7fd f810 	bl	8004ac0 <HAL_GetTick>
 8007aa0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007aa4:	f7fd f80c 	bl	8004ac0 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e0a4      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac2:	d1ef      	bne.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 808b 	beq.w	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
 8007ad6:	4b10      	ldr	r3, [pc, #64]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	4a0f      	ldr	r2, [pc, #60]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ae2:	4b0d      	ldr	r3, [pc, #52]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aea:	60fb      	str	r3, [r7, #12]
 8007aec:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007aee:	4b0c      	ldr	r3, [pc, #48]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a0b      	ldr	r2, [pc, #44]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007afa:	f7fc ffe1 	bl	8004ac0 <HAL_GetTick>
 8007afe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b00:	e010      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007b02:	f7fc ffdd 	bl	8004ac0 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d909      	bls.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007b10:	2303      	movs	r3, #3
 8007b12:	e075      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007b14:	42470068 	.word	0x42470068
 8007b18:	40023800 	.word	0x40023800
 8007b1c:	42470070 	.word	0x42470070
 8007b20:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007b24:	4b38      	ldr	r3, [pc, #224]	; (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0e8      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b30:	4b36      	ldr	r3, [pc, #216]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b38:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d02f      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d028      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b4e:	4b2f      	ldr	r3, [pc, #188]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b56:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b58:	4b2d      	ldr	r3, [pc, #180]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b5e:	4b2c      	ldr	r3, [pc, #176]	; (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b64:	4a29      	ldr	r2, [pc, #164]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b6a:	4b28      	ldr	r3, [pc, #160]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d114      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b76:	f7fc ffa3 	bl	8004ac0 <HAL_GetTick>
 8007b7a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b7c:	e00a      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b7e:	f7fc ff9f 	bl	8004ac0 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d901      	bls.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007b90:	2303      	movs	r3, #3
 8007b92:	e035      	b.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b94:	4b1d      	ldr	r3, [pc, #116]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d0ee      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bac:	d10d      	bne.n	8007bca <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007bae:	4b17      	ldr	r3, [pc, #92]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bc2:	4912      	ldr	r1, [pc, #72]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	608b      	str	r3, [r1, #8]
 8007bc8:	e005      	b.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007bca:	4b10      	ldr	r3, [pc, #64]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	4a0f      	ldr	r2, [pc, #60]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bd0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007bd4:	6093      	str	r3, [r2, #8]
 8007bd6:	4b0d      	ldr	r3, [pc, #52]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007bd8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007be2:	490a      	ldr	r1, [pc, #40]	; (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0310 	and.w	r3, r3, #16
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d004      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007bfa:	4b06      	ldr	r3, [pc, #24]	; (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007bfc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	40007000 	.word	0x40007000
 8007c0c:	40023800 	.word	0x40023800
 8007c10:	42470e40 	.word	0x42470e40
 8007c14:	424711e0 	.word	0x424711e0

08007c18 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e025      	b.n	8007c78 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d106      	bne.n	8007c46 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 f81d 	bl	8007c80 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2202      	movs	r2, #2
 8007c4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	3304      	adds	r3, #4
 8007c56:	4619      	mov	r1, r3
 8007c58:	4610      	mov	r0, r2
 8007c5a:	f001 fd17 	bl	800968c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6818      	ldr	r0, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	461a      	mov	r2, r3
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	f001 fd82 	bl	8009772 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3708      	adds	r7, #8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d101      	bne.n	8007cb0 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007cac:	2302      	movs	r3, #2
 8007cae:	e018      	b.n	8007ce2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f001 fdd5 	bl	8009870 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d104      	bne.n	8007cd8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2205      	movs	r2, #5
 8007cd2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007cd6:	e003      	b.n	8007ce0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2201      	movs	r2, #1
 8007cdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d101      	bne.n	8007d04 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007d00:	2302      	movs	r3, #2
 8007d02:	e00e      	b.n	8007d22 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f001 fde8 	bl	80098e8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e05d      	b.n	8007df8 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d106      	bne.n	8007d56 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f87d 	bl	8007e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	ea42 0103 	orr.w	r1, r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	0c1b      	lsrs	r3, r3, #16
 8007db4:	f003 0104 	and.w	r1, r3, #4
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dcc:	d104      	bne.n	8007dd8 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007dd6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69da      	ldr	r2, [r3, #28]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007de6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e01a      	b.n	8007e48 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2202      	movs	r2, #2
 8007e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f81a 	bl	8007e64 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007e46:	2300      	movs	r3, #0
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b088      	sub	sp, #32
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	4613      	mov	r3, r2
 8007e86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d101      	bne.n	8007e9a <HAL_SPI_Transmit+0x22>
 8007e96:	2302      	movs	r3, #2
 8007e98:	e140      	b.n	800811c <HAL_SPI_Transmit+0x2a4>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ea2:	f7fc fe0d 	bl	8004ac0 <HAL_GetTick>
 8007ea6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d002      	beq.n	8007ebe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007eb8:	2302      	movs	r3, #2
 8007eba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ebc:	e125      	b.n	800810a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <HAL_SPI_Transmit+0x52>
 8007ec4:	88fb      	ldrh	r3, [r7, #6]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d102      	bne.n	8007ed0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ece:	e11c      	b.n	800810a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	88fa      	ldrh	r2, [r7, #6]
 8007ee8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	88fa      	ldrh	r2, [r7, #6]
 8007eee:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f16:	d107      	bne.n	8007f28 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f26:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f30:	d10f      	bne.n	8007f52 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f50:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5c:	2b40      	cmp	r3, #64	; 0x40
 8007f5e:	d007      	beq.n	8007f70 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f78:	d14b      	bne.n	8008012 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_SPI_Transmit+0x110>
 8007f82:	8afb      	ldrh	r3, [r7, #22]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d13e      	bne.n	8008006 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8c:	881a      	ldrh	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f98:	1c9a      	adds	r2, r3, #2
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	b29a      	uxth	r2, r3
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007fac:	e02b      	b.n	8008006 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 0302 	and.w	r3, r3, #2
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d112      	bne.n	8007fe2 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc0:	881a      	ldrh	r2, [r3, #0]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	1c9a      	adds	r2, r3, #2
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	86da      	strh	r2, [r3, #54]	; 0x36
 8007fe0:	e011      	b.n	8008006 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fe2:	f7fc fd6d 	bl	8004ac0 <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d803      	bhi.n	8007ffa <HAL_SPI_Transmit+0x182>
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ff8:	d102      	bne.n	8008000 <HAL_SPI_Transmit+0x188>
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d102      	bne.n	8008006 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008004:	e081      	b.n	800810a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800800a:	b29b      	uxth	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1ce      	bne.n	8007fae <HAL_SPI_Transmit+0x136>
 8008010:	e04c      	b.n	80080ac <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d002      	beq.n	8008020 <HAL_SPI_Transmit+0x1a8>
 800801a:	8afb      	ldrh	r3, [r7, #22]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d140      	bne.n	80080a2 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	330c      	adds	r3, #12
 800802a:	7812      	ldrb	r2, [r2, #0]
 800802c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800803c:	b29b      	uxth	r3, r3
 800803e:	3b01      	subs	r3, #1
 8008040:	b29a      	uxth	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008046:	e02c      	b.n	80080a2 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b02      	cmp	r3, #2
 8008054:	d113      	bne.n	800807e <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	330c      	adds	r3, #12
 8008060:	7812      	ldrb	r2, [r2, #0]
 8008062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	1c5a      	adds	r2, r3, #1
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	86da      	strh	r2, [r3, #54]	; 0x36
 800807c:	e011      	b.n	80080a2 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800807e:	f7fc fd1f 	bl	8004ac0 <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d803      	bhi.n	8008096 <HAL_SPI_Transmit+0x21e>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008094:	d102      	bne.n	800809c <HAL_SPI_Transmit+0x224>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d102      	bne.n	80080a2 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080a0:	e033      	b.n	800810a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1cd      	bne.n	8008048 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080b4:	d107      	bne.n	80080c6 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080c4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080c6:	69ba      	ldr	r2, [r7, #24]
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 fc94 	bl	80089f8 <SPI_EndRxTxTransaction>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2220      	movs	r2, #32
 80080da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080e4:	2300      	movs	r3, #0
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	613b      	str	r3, [r7, #16]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	77fb      	strb	r3, [r7, #31]
 8008106:	e000      	b.n	800810a <HAL_SPI_Transmit+0x292>
  }

error:
 8008108:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800811a:	7ffb      	ldrb	r3, [r7, #31]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3720      	adds	r7, #32
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af02      	add	r7, sp, #8
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	603b      	str	r3, [r7, #0]
 8008130:	4613      	mov	r3, r2
 8008132:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008140:	d112      	bne.n	8008168 <HAL_SPI_Receive+0x44>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10e      	bne.n	8008168 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2204      	movs	r2, #4
 800814e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008152:	88fa      	ldrh	r2, [r7, #6]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	4613      	mov	r3, r2
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	68b9      	ldr	r1, [r7, #8]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f95f 	bl	8008422 <HAL_SPI_TransmitReceive>
 8008164:	4603      	mov	r3, r0
 8008166:	e158      	b.n	800841a <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800816e:	2b01      	cmp	r3, #1
 8008170:	d101      	bne.n	8008176 <HAL_SPI_Receive+0x52>
 8008172:	2302      	movs	r3, #2
 8008174:	e151      	b.n	800841a <HAL_SPI_Receive+0x2f6>
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800817e:	f7fc fc9f 	bl	8004ac0 <HAL_GetTick>
 8008182:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800818a:	b2db      	uxtb	r3, r3
 800818c:	2b01      	cmp	r3, #1
 800818e:	d002      	beq.n	8008196 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008190:	2302      	movs	r3, #2
 8008192:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008194:	e138      	b.n	8008408 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <HAL_SPI_Receive+0x7e>
 800819c:	88fb      	ldrh	r3, [r7, #6]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d102      	bne.n	80081a8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081a6:	e12f      	b.n	8008408 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2204      	movs	r2, #4
 80081ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	88fa      	ldrh	r2, [r7, #6]
 80081c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	88fa      	ldrh	r2, [r7, #6]
 80081c6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081ee:	d116      	bne.n	800821e <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800820e:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008226:	d107      	bne.n	8008238 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008236:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008242:	2b40      	cmp	r3, #64	; 0x40
 8008244:	d007      	beq.n	8008256 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008254:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d162      	bne.n	8008324 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800825e:	e02e      	b.n	80082be <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b01      	cmp	r3, #1
 800826c:	d115      	bne.n	800829a <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f103 020c 	add.w	r2, r3, #12
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	7812      	ldrb	r2, [r2, #0]
 800827c:	b2d2      	uxtb	r2, r2
 800827e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008284:	1c5a      	adds	r2, r3, #1
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800828e:	b29b      	uxth	r3, r3
 8008290:	3b01      	subs	r3, #1
 8008292:	b29a      	uxth	r2, r3
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008298:	e011      	b.n	80082be <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800829a:	f7fc fc11 	bl	8004ac0 <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d803      	bhi.n	80082b2 <HAL_SPI_Receive+0x18e>
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082b0:	d102      	bne.n	80082b8 <HAL_SPI_Receive+0x194>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d102      	bne.n	80082be <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80082bc:	e0a4      	b.n	8008408 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1cb      	bne.n	8008260 <HAL_SPI_Receive+0x13c>
 80082c8:	e031      	b.n	800832e <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689b      	ldr	r3, [r3, #8]
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d113      	bne.n	8008300 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68da      	ldr	r2, [r3, #12]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e2:	b292      	uxth	r2, r2
 80082e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ea:	1c9a      	adds	r2, r3, #2
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	3b01      	subs	r3, #1
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082fe:	e011      	b.n	8008324 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008300:	f7fc fbde 	bl	8004ac0 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	429a      	cmp	r2, r3
 800830e:	d803      	bhi.n	8008318 <HAL_SPI_Receive+0x1f4>
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008316:	d102      	bne.n	800831e <HAL_SPI_Receive+0x1fa>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d102      	bne.n	8008324 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008322:	e071      	b.n	8008408 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008328:	b29b      	uxth	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1cd      	bne.n	80082ca <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008336:	d142      	bne.n	80083be <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008346:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	2201      	movs	r2, #1
 8008350:	2101      	movs	r1, #1
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f000 fa81 	bl	800885a <SPI_WaitFlagStateUntilTimeout>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800835e:	2303      	movs	r3, #3
 8008360:	75fb      	strb	r3, [r7, #23]
      goto error;
 8008362:	e051      	b.n	8008408 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800836c:	d107      	bne.n	800837e <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68da      	ldr	r2, [r3, #12]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008378:	b292      	uxth	r2, r2
 800837a:	801a      	strh	r2, [r3, #0]
 800837c:	e008      	b.n	8008390 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f103 020c 	add.w	r2, r3, #12
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	7812      	ldrb	r2, [r2, #0]
 800838c:	b2d2      	uxtb	r2, r2
 800838e:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	9300      	str	r3, [sp, #0]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	2201      	movs	r2, #1
 8008398:	2101      	movs	r1, #1
 800839a:	68f8      	ldr	r0, [r7, #12]
 800839c:	f000 fa5d 	bl	800885a <SPI_WaitFlagStateUntilTimeout>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d008      	beq.n	80083b8 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083aa:	f043 0202 	orr.w	r2, r3, #2
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80083b2:	2303      	movs	r3, #3
 80083b4:	75fb      	strb	r3, [r7, #23]
      goto error;
 80083b6:	e027      	b.n	8008408 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	6839      	ldr	r1, [r7, #0]
 80083c2:	68f8      	ldr	r0, [r7, #12]
 80083c4:	f000 fab3 	bl	800892e <SPI_EndRxTransaction>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d002      	beq.n	80083d4 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2220      	movs	r2, #32
 80083d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f003 0310 	and.w	r3, r3, #16
 80083de:	2b10      	cmp	r3, #16
 80083e0:	d10a      	bne.n	80083f8 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e6:	f043 0202 	orr.w	r2, r3, #2
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80083f6:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d002      	beq.n	8008406 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	75fb      	strb	r3, [r7, #23]
 8008404:	e000      	b.n	8008408 <HAL_SPI_Receive+0x2e4>
  }

error :
 8008406:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008418:	7dfb      	ldrb	r3, [r7, #23]
}
 800841a:	4618      	mov	r0, r3
 800841c:	3718      	adds	r7, #24
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b08e      	sub	sp, #56	; 0x38
 8008426:	af02      	add	r7, sp, #8
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	607a      	str	r2, [r7, #4]
 800842e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008430:	2301      	movs	r3, #1
 8008432:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008434:	2300      	movs	r3, #0
 8008436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008440:	2b01      	cmp	r3, #1
 8008442:	d101      	bne.n	8008448 <HAL_SPI_TransmitReceive+0x26>
 8008444:	2302      	movs	r3, #2
 8008446:	e1f6      	b.n	8008836 <HAL_SPI_TransmitReceive+0x414>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008450:	f7fc fb36 	bl	8004ac0 <HAL_GetTick>
 8008454:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800845c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008466:	887b      	ldrh	r3, [r7, #2]
 8008468:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800846a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800846e:	2b01      	cmp	r3, #1
 8008470:	d00f      	beq.n	8008492 <HAL_SPI_TransmitReceive+0x70>
 8008472:	69fb      	ldr	r3, [r7, #28]
 8008474:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008478:	d107      	bne.n	800848a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d103      	bne.n	800848a <HAL_SPI_TransmitReceive+0x68>
 8008482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008486:	2b04      	cmp	r3, #4
 8008488:	d003      	beq.n	8008492 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800848a:	2302      	movs	r3, #2
 800848c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008490:	e1c7      	b.n	8008822 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x82>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d002      	beq.n	80084a4 <HAL_SPI_TransmitReceive+0x82>
 800849e:	887b      	ldrh	r3, [r7, #2]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d103      	bne.n	80084ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80084aa:	e1ba      	b.n	8008822 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	d003      	beq.n	80084c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2205      	movs	r2, #5
 80084bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	887a      	ldrh	r2, [r7, #2]
 80084d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	887a      	ldrh	r2, [r7, #2]
 80084d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	68ba      	ldr	r2, [r7, #8]
 80084dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	887a      	ldrh	r2, [r7, #2]
 80084e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	887a      	ldrh	r2, [r7, #2]
 80084e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084fe:	d10f      	bne.n	8008520 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800851e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852a:	2b40      	cmp	r3, #64	; 0x40
 800852c:	d007      	beq.n	800853e <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800853c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008546:	f040 808b 	bne.w	8008660 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d002      	beq.n	8008558 <HAL_SPI_TransmitReceive+0x136>
 8008552:	8b7b      	ldrh	r3, [r7, #26]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d178      	bne.n	800864a <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855c:	881a      	ldrh	r2, [r3, #0]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008568:	1c9a      	adds	r2, r3, #2
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008572:	b29b      	uxth	r3, r3
 8008574:	3b01      	subs	r3, #1
 8008576:	b29a      	uxth	r2, r3
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800857c:	e065      	b.n	800864a <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b02      	cmp	r3, #2
 800858a:	d12d      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x1c6>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008590:	b29b      	uxth	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d028      	beq.n	80085e8 <HAL_SPI_TransmitReceive+0x1c6>
 8008596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008598:	2b01      	cmp	r3, #1
 800859a:	d125      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a0:	881a      	ldrh	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ac:	1c9a      	adds	r2, r3, #2
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	3b01      	subs	r3, #1
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085c0:	2300      	movs	r3, #0
 80085c2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10c      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x1c6>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d6:	d107      	bne.n	80085e8 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085e6:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d119      	bne.n	800862a <HAL_SPI_TransmitReceive+0x208>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d014      	beq.n	800862a <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	b292      	uxth	r2, r2
 800860c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	1c9a      	adds	r2, r3, #2
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800861c:	b29b      	uxth	r3, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008626:	2301      	movs	r3, #1
 8008628:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800862a:	f7fc fa49 	bl	8004ac0 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008636:	429a      	cmp	r2, r3
 8008638:	d807      	bhi.n	800864a <HAL_SPI_TransmitReceive+0x228>
 800863a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008640:	d003      	beq.n	800864a <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008648:	e0eb      	b.n	8008822 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800864e:	b29b      	uxth	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d194      	bne.n	800857e <HAL_SPI_TransmitReceive+0x15c>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008658:	b29b      	uxth	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d18f      	bne.n	800857e <HAL_SPI_TransmitReceive+0x15c>
 800865e:	e08e      	b.n	800877e <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <HAL_SPI_TransmitReceive+0x24c>
 8008668:	8b7b      	ldrh	r3, [r7, #26]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d17d      	bne.n	800876a <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	330c      	adds	r3, #12
 8008678:	7812      	ldrb	r2, [r2, #0]
 800867a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	1c5a      	adds	r2, r3, #1
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008694:	e069      	b.n	800876a <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d12e      	bne.n	8008702 <HAL_SPI_TransmitReceive+0x2e0>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d029      	beq.n	8008702 <HAL_SPI_TransmitReceive+0x2e0>
 80086ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d126      	bne.n	8008702 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	330c      	adds	r3, #12
 80086be:	7812      	ldrb	r2, [r2, #0]
 80086c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	3b01      	subs	r3, #1
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10c      	bne.n	8008702 <HAL_SPI_TransmitReceive+0x2e0>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086f0:	d107      	bne.n	8008702 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008700:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b01      	cmp	r3, #1
 800870e:	d119      	bne.n	8008744 <HAL_SPI_TransmitReceive+0x322>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008714:	b29b      	uxth	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d014      	beq.n	8008744 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	b2d2      	uxtb	r2, r2
 8008726:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872c:	1c5a      	adds	r2, r3, #1
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008736:	b29b      	uxth	r3, r3
 8008738:	3b01      	subs	r3, #1
 800873a:	b29a      	uxth	r2, r3
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008740:	2301      	movs	r3, #1
 8008742:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008744:	f7fc f9bc 	bl	8004ac0 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008750:	429a      	cmp	r2, r3
 8008752:	d803      	bhi.n	800875c <HAL_SPI_TransmitReceive+0x33a>
 8008754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800875a:	d102      	bne.n	8008762 <HAL_SPI_TransmitReceive+0x340>
 800875c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800875e:	2b00      	cmp	r3, #0
 8008760:	d103      	bne.n	800876a <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008768:	e05b      	b.n	8008822 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800876e:	b29b      	uxth	r3, r3
 8008770:	2b00      	cmp	r3, #0
 8008772:	d190      	bne.n	8008696 <HAL_SPI_TransmitReceive+0x274>
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008778:	b29b      	uxth	r3, r3
 800877a:	2b00      	cmp	r3, #0
 800877c:	d18b      	bne.n	8008696 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008786:	d117      	bne.n	80087b8 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8008788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878e:	2201      	movs	r2, #1
 8008790:	2101      	movs	r1, #1
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 f861 	bl	800885a <SPI_WaitFlagStateUntilTimeout>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d009      	beq.n	80087b2 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	f043 0202 	orr.w	r2, r3, #2
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80087b0:	e037      	b.n	8008822 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f003 0310 	and.w	r3, r3, #16
 80087c2:	2b10      	cmp	r3, #16
 80087c4:	d10d      	bne.n	80087e2 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ca:	f043 0202 	orr.w	r2, r3, #2
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80087da:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80087dc:	2301      	movs	r3, #1
 80087de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80087e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80087e6:	68f8      	ldr	r0, [r7, #12]
 80087e8:	f000 f906 	bl	80089f8 <SPI_EndRxTxTransaction>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d006      	beq.n	8008800 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2220      	movs	r2, #32
 80087fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80087fe:	e010      	b.n	8008822 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10b      	bne.n	8008820 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008808:	2300      	movs	r3, #0
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	617b      	str	r3, [r7, #20]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	e000      	b.n	8008822 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8008820:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008832:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008836:	4618      	mov	r0, r3
 8008838:	3730      	adds	r7, #48	; 0x30
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800884c:	b2db      	uxtb	r3, r3
}
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	60b9      	str	r1, [r7, #8]
 8008864:	603b      	str	r3, [r7, #0]
 8008866:	4613      	mov	r3, r2
 8008868:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800886a:	e04c      	b.n	8008906 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008872:	d048      	beq.n	8008906 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008874:	f7fc f924 	bl	8004ac0 <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	429a      	cmp	r2, r3
 8008882:	d902      	bls.n	800888a <SPI_WaitFlagStateUntilTimeout+0x30>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d13d      	bne.n	8008906 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008898:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088a2:	d111      	bne.n	80088c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088ac:	d004      	beq.n	80088b8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088b6:	d107      	bne.n	80088c8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088d0:	d10f      	bne.n	80088f2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e00f      	b.n	8008926 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	689a      	ldr	r2, [r3, #8]
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	4013      	ands	r3, r2
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	429a      	cmp	r2, r3
 8008914:	bf0c      	ite	eq
 8008916:	2301      	moveq	r3, #1
 8008918:	2300      	movne	r3, #0
 800891a:	b2db      	uxtb	r3, r3
 800891c:	461a      	mov	r2, r3
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	429a      	cmp	r2, r3
 8008922:	d1a3      	bne.n	800886c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b086      	sub	sp, #24
 8008932:	af02      	add	r7, sp, #8
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008942:	d111      	bne.n	8008968 <SPI_EndRxTransaction+0x3a>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800894c:	d004      	beq.n	8008958 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008956:	d107      	bne.n	8008968 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008966:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008970:	d12a      	bne.n	80089c8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800897a:	d012      	beq.n	80089a2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	9300      	str	r3, [sp, #0]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2200      	movs	r2, #0
 8008984:	2180      	movs	r1, #128	; 0x80
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	f7ff ff67 	bl	800885a <SPI_WaitFlagStateUntilTimeout>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d02d      	beq.n	80089ee <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008996:	f043 0220 	orr.w	r2, r3, #32
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e026      	b.n	80089f0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2200      	movs	r2, #0
 80089aa:	2101      	movs	r1, #1
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f7ff ff54 	bl	800885a <SPI_WaitFlagStateUntilTimeout>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d01a      	beq.n	80089ee <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089bc:	f043 0220 	orr.w	r2, r3, #32
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e013      	b.n	80089f0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	9300      	str	r3, [sp, #0]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2200      	movs	r2, #0
 80089d0:	2101      	movs	r1, #1
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f7ff ff41 	bl	800885a <SPI_WaitFlagStateUntilTimeout>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d007      	beq.n	80089ee <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e2:	f043 0220 	orr.w	r2, r3, #32
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e000      	b.n	80089f0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b088      	sub	sp, #32
 80089fc:	af02      	add	r7, sp, #8
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a04:	4b1b      	ldr	r3, [pc, #108]	; (8008a74 <SPI_EndRxTxTransaction+0x7c>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a1b      	ldr	r2, [pc, #108]	; (8008a78 <SPI_EndRxTxTransaction+0x80>)
 8008a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0e:	0d5b      	lsrs	r3, r3, #21
 8008a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a14:	fb02 f303 	mul.w	r3, r2, r3
 8008a18:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a22:	d112      	bne.n	8008a4a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2180      	movs	r1, #128	; 0x80
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f7ff ff13 	bl	800885a <SPI_WaitFlagStateUntilTimeout>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3e:	f043 0220 	orr.w	r2, r3, #32
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e00f      	b.n	8008a6a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00a      	beq.n	8008a66 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	3b01      	subs	r3, #1
 8008a54:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a60:	2b80      	cmp	r3, #128	; 0x80
 8008a62:	d0f2      	beq.n	8008a4a <SPI_EndRxTxTransaction+0x52>
 8008a64:	e000      	b.n	8008a68 <SPI_EndRxTxTransaction+0x70>
        break;
 8008a66:	bf00      	nop
  }

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000034 	.word	0x20000034
 8008a78:	165e9f81 	.word	0x165e9f81

08008a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e03f      	b.n	8008b0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d106      	bne.n	8008aa8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f837 	bl	8008b16 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2224      	movs	r2, #36	; 0x24
 8008aac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008abe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f915 	bl	8008cf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	691a      	ldr	r2, [r3, #16]
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ad4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	695a      	ldr	r2, [r3, #20]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ae4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008af4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3708      	adds	r7, #8
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}

08008b16 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b083      	sub	sp, #12
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8008b1e:	bf00      	nop
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b088      	sub	sp, #32
 8008b2e:	af02      	add	r7, sp, #8
 8008b30:	60f8      	str	r0, [r7, #12]
 8008b32:	60b9      	str	r1, [r7, #8]
 8008b34:	603b      	str	r3, [r7, #0]
 8008b36:	4613      	mov	r3, r2
 8008b38:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b20      	cmp	r3, #32
 8008b48:	f040 8083 	bne.w	8008c52 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <HAL_UART_Transmit+0x2e>
 8008b52:	88fb      	ldrh	r3, [r7, #6]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e07b      	b.n	8008c54 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d101      	bne.n	8008b6a <HAL_UART_Transmit+0x40>
 8008b66:	2302      	movs	r3, #2
 8008b68:	e074      	b.n	8008c54 <HAL_UART_Transmit+0x12a>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2221      	movs	r2, #33	; 0x21
 8008b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008b80:	f7fb ff9e 	bl	8004ac0 <HAL_GetTick>
 8008b84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	88fa      	ldrh	r2, [r7, #6]
 8008b8a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	88fa      	ldrh	r2, [r7, #6]
 8008b90:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008b9a:	e042      	b.n	8008c22 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	b29a      	uxth	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bb2:	d122      	bne.n	8008bfa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	2180      	movs	r1, #128	; 0x80
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f000 f84c 	bl	8008c5c <UART_WaitOnFlagUntilTimeout>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d001      	beq.n	8008bce <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e042      	b.n	8008c54 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008be0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d103      	bne.n	8008bf2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	3302      	adds	r3, #2
 8008bee:	60bb      	str	r3, [r7, #8]
 8008bf0:	e017      	b.n	8008c22 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	60bb      	str	r3, [r7, #8]
 8008bf8:	e013      	b.n	8008c22 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	2200      	movs	r2, #0
 8008c02:	2180      	movs	r1, #128	; 0x80
 8008c04:	68f8      	ldr	r0, [r7, #12]
 8008c06:	f000 f829 	bl	8008c5c <UART_WaitOnFlagUntilTimeout>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d001      	beq.n	8008c14 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e01f      	b.n	8008c54 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	60ba      	str	r2, [r7, #8]
 8008c1a:	781a      	ldrb	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1b7      	bne.n	8008b9c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	9300      	str	r3, [sp, #0]
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	2200      	movs	r2, #0
 8008c34:	2140      	movs	r1, #64	; 0x40
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 f810 	bl	8008c5c <UART_WaitOnFlagUntilTimeout>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008c42:	2303      	movs	r3, #3
 8008c44:	e006      	b.n	8008c54 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	e000      	b.n	8008c54 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008c52:	2302      	movs	r3, #2
  }
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c6c:	e02c      	b.n	8008cc8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c74:	d028      	beq.n	8008cc8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d007      	beq.n	8008c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c7c:	f7fb ff20 	bl	8004ac0 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d21d      	bcs.n	8008cc8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c9a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	695a      	ldr	r2, [r3, #20]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f022 0201 	bic.w	r2, r2, #1
 8008caa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e00f      	b.n	8008ce8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	68ba      	ldr	r2, [r7, #8]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	bf0c      	ite	eq
 8008cd8:	2301      	moveq	r3, #1
 8008cda:	2300      	movne	r3, #0
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	461a      	mov	r2, r3
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d0c3      	beq.n	8008c6e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cf4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008cfe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d0a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d0e:	68d9      	ldr	r1, [r3, #12]
 8008d10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	ea40 0301 	orr.w	r3, r0, r1
 8008d1a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d1c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d20:	689a      	ldr	r2, [r3, #8]
 8008d22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d2e:	695b      	ldr	r3, [r3, #20]
 8008d30:	431a      	orrs	r2, r3
 8008d32:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8008d3e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d4a:	f021 010c 	bic.w	r1, r1, #12
 8008d4e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d6c:	6999      	ldr	r1, [r3, #24]
 8008d6e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	ea40 0301 	orr.w	r3, r0, r1
 8008d78:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d7e:	69db      	ldr	r3, [r3, #28]
 8008d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d84:	f040 824a 	bne.w	800921c <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d88:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4b96      	ldr	r3, [pc, #600]	; (8008fe8 <UART_SetConfig+0x2f8>)
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d006      	beq.n	8008da2 <UART_SetConfig+0xb2>
 8008d94:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b94      	ldr	r3, [pc, #592]	; (8008fec <UART_SetConfig+0x2fc>)
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	f040 8129 	bne.w	8008ff4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008da2:	f7fe fd65 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 8008da6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008daa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008dae:	2200      	movs	r2, #0
 8008db0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8008db4:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8008db8:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	462b      	mov	r3, r5
 8008dc0:	1891      	adds	r1, r2, r2
 8008dc2:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008dc6:	415b      	adcs	r3, r3
 8008dc8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008dcc:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	1851      	adds	r1, r2, r1
 8008dd4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8008dd8:	4629      	mov	r1, r5
 8008dda:	414b      	adcs	r3, r1
 8008ddc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	f04f 0300 	mov.w	r3, #0
 8008de8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8008dec:	4649      	mov	r1, r9
 8008dee:	00cb      	lsls	r3, r1, #3
 8008df0:	4641      	mov	r1, r8
 8008df2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008df6:	4641      	mov	r1, r8
 8008df8:	00ca      	lsls	r2, r1, #3
 8008dfa:	4610      	mov	r0, r2
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	4603      	mov	r3, r0
 8008e00:	4622      	mov	r2, r4
 8008e02:	189b      	adds	r3, r3, r2
 8008e04:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008e08:	462b      	mov	r3, r5
 8008e0a:	460a      	mov	r2, r1
 8008e0c:	eb42 0303 	adc.w	r3, r2, r3
 8008e10:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8008e14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008e20:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8008e24:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	18db      	adds	r3, r3, r3
 8008e2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008e30:	4613      	mov	r3, r2
 8008e32:	eb42 0303 	adc.w	r3, r2, r3
 8008e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008e3a:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8008e3e:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8008e42:	f7f7 ffcb 	bl	8000ddc <__aeabi_uldivmod>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4b69      	ldr	r3, [pc, #420]	; (8008ff0 <UART_SetConfig+0x300>)
 8008e4c:	fba3 2302 	umull	r2, r3, r3, r2
 8008e50:	095b      	lsrs	r3, r3, #5
 8008e52:	011c      	lsls	r4, r3, #4
 8008e54:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8008e5e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008e62:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8008e66:	4642      	mov	r2, r8
 8008e68:	464b      	mov	r3, r9
 8008e6a:	1891      	adds	r1, r2, r2
 8008e6c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008e70:	415b      	adcs	r3, r3
 8008e72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008e76:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008e7a:	4641      	mov	r1, r8
 8008e7c:	1851      	adds	r1, r2, r1
 8008e7e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8008e82:	4649      	mov	r1, r9
 8008e84:	414b      	adcs	r3, r1
 8008e86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e8a:	f04f 0200 	mov.w	r2, #0
 8008e8e:	f04f 0300 	mov.w	r3, #0
 8008e92:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8008e96:	4659      	mov	r1, fp
 8008e98:	00cb      	lsls	r3, r1, #3
 8008e9a:	4651      	mov	r1, sl
 8008e9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ea0:	4651      	mov	r1, sl
 8008ea2:	00ca      	lsls	r2, r1, #3
 8008ea4:	4610      	mov	r0, r2
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	4642      	mov	r2, r8
 8008eac:	189b      	adds	r3, r3, r2
 8008eae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	460a      	mov	r2, r1
 8008eb6:	eb42 0303 	adc.w	r3, r2, r3
 8008eba:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008ebe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008eca:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8008ece:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	18db      	adds	r3, r3, r3
 8008ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008eda:	4613      	mov	r3, r2
 8008edc:	eb42 0303 	adc.w	r3, r2, r3
 8008ee0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ee4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8008ee8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8008eec:	f7f7 ff76 	bl	8000ddc <__aeabi_uldivmod>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	4b3e      	ldr	r3, [pc, #248]	; (8008ff0 <UART_SetConfig+0x300>)
 8008ef8:	fba3 2301 	umull	r2, r3, r3, r1
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	2264      	movs	r2, #100	; 0x64
 8008f00:	fb02 f303 	mul.w	r3, r2, r3
 8008f04:	1acb      	subs	r3, r1, r3
 8008f06:	00db      	lsls	r3, r3, #3
 8008f08:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008f0c:	4b38      	ldr	r3, [pc, #224]	; (8008ff0 <UART_SetConfig+0x300>)
 8008f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	005b      	lsls	r3, r3, #1
 8008f16:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f1a:	441c      	add	r4, r3
 8008f1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008f26:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8008f2a:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8008f2e:	4642      	mov	r2, r8
 8008f30:	464b      	mov	r3, r9
 8008f32:	1891      	adds	r1, r2, r2
 8008f34:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8008f38:	415b      	adcs	r3, r3
 8008f3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f3e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008f42:	4641      	mov	r1, r8
 8008f44:	1851      	adds	r1, r2, r1
 8008f46:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8008f4a:	4649      	mov	r1, r9
 8008f4c:	414b      	adcs	r3, r1
 8008f4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f52:	f04f 0200 	mov.w	r2, #0
 8008f56:	f04f 0300 	mov.w	r3, #0
 8008f5a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8008f5e:	4659      	mov	r1, fp
 8008f60:	00cb      	lsls	r3, r1, #3
 8008f62:	4651      	mov	r1, sl
 8008f64:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f68:	4651      	mov	r1, sl
 8008f6a:	00ca      	lsls	r2, r1, #3
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4603      	mov	r3, r0
 8008f72:	4642      	mov	r2, r8
 8008f74:	189b      	adds	r3, r3, r2
 8008f76:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	eb42 0303 	adc.w	r3, r2, r3
 8008f82:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008f86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8008f92:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8008f96:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	18db      	adds	r3, r3, r3
 8008f9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	eb42 0303 	adc.w	r3, r2, r3
 8008fa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fac:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008fb0:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8008fb4:	f7f7 ff12 	bl	8000ddc <__aeabi_uldivmod>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4b0c      	ldr	r3, [pc, #48]	; (8008ff0 <UART_SetConfig+0x300>)
 8008fbe:	fba3 1302 	umull	r1, r3, r3, r2
 8008fc2:	095b      	lsrs	r3, r3, #5
 8008fc4:	2164      	movs	r1, #100	; 0x64
 8008fc6:	fb01 f303 	mul.w	r3, r1, r3
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	00db      	lsls	r3, r3, #3
 8008fce:	3332      	adds	r3, #50	; 0x32
 8008fd0:	4a07      	ldr	r2, [pc, #28]	; (8008ff0 <UART_SetConfig+0x300>)
 8008fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd6:	095b      	lsrs	r3, r3, #5
 8008fd8:	f003 0207 	and.w	r2, r3, #7
 8008fdc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4422      	add	r2, r4
 8008fe4:	609a      	str	r2, [r3, #8]
 8008fe6:	e349      	b.n	800967c <UART_SetConfig+0x98c>
 8008fe8:	40011000 	.word	0x40011000
 8008fec:	40011400 	.word	0x40011400
 8008ff0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ff4:	f7fe fc28 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8008ff8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ffc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009000:	2200      	movs	r2, #0
 8009002:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8009006:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800900a:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800900e:	4622      	mov	r2, r4
 8009010:	462b      	mov	r3, r5
 8009012:	1891      	adds	r1, r2, r2
 8009014:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8009018:	415b      	adcs	r3, r3
 800901a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800901e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8009022:	4621      	mov	r1, r4
 8009024:	eb12 0a01 	adds.w	sl, r2, r1
 8009028:	4629      	mov	r1, r5
 800902a:	eb43 0b01 	adc.w	fp, r3, r1
 800902e:	f04f 0200 	mov.w	r2, #0
 8009032:	f04f 0300 	mov.w	r3, #0
 8009036:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800903a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800903e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009042:	4692      	mov	sl, r2
 8009044:	469b      	mov	fp, r3
 8009046:	4623      	mov	r3, r4
 8009048:	eb1a 0303 	adds.w	r3, sl, r3
 800904c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009050:	462b      	mov	r3, r5
 8009052:	eb4b 0303 	adc.w	r3, fp, r3
 8009056:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800905a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8009066:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800906a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800906e:	460b      	mov	r3, r1
 8009070:	18db      	adds	r3, r3, r3
 8009072:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009076:	4613      	mov	r3, r2
 8009078:	eb42 0303 	adc.w	r3, r2, r3
 800907c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009080:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8009084:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8009088:	f7f7 fea8 	bl	8000ddc <__aeabi_uldivmod>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	4b61      	ldr	r3, [pc, #388]	; (8009218 <UART_SetConfig+0x528>)
 8009092:	fba3 2302 	umull	r2, r3, r3, r2
 8009096:	095b      	lsrs	r3, r3, #5
 8009098:	011c      	lsls	r4, r3, #4
 800909a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800909e:	2200      	movs	r2, #0
 80090a0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80090a4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80090a8:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80090ac:	4642      	mov	r2, r8
 80090ae:	464b      	mov	r3, r9
 80090b0:	1891      	adds	r1, r2, r2
 80090b2:	67b9      	str	r1, [r7, #120]	; 0x78
 80090b4:	415b      	adcs	r3, r3
 80090b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80090b8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80090bc:	4641      	mov	r1, r8
 80090be:	1851      	adds	r1, r2, r1
 80090c0:	6739      	str	r1, [r7, #112]	; 0x70
 80090c2:	4649      	mov	r1, r9
 80090c4:	414b      	adcs	r3, r1
 80090c6:	677b      	str	r3, [r7, #116]	; 0x74
 80090c8:	f04f 0200 	mov.w	r2, #0
 80090cc:	f04f 0300 	mov.w	r3, #0
 80090d0:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80090d4:	4659      	mov	r1, fp
 80090d6:	00cb      	lsls	r3, r1, #3
 80090d8:	4651      	mov	r1, sl
 80090da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090de:	4651      	mov	r1, sl
 80090e0:	00ca      	lsls	r2, r1, #3
 80090e2:	4610      	mov	r0, r2
 80090e4:	4619      	mov	r1, r3
 80090e6:	4603      	mov	r3, r0
 80090e8:	4642      	mov	r2, r8
 80090ea:	189b      	adds	r3, r3, r2
 80090ec:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80090f0:	464b      	mov	r3, r9
 80090f2:	460a      	mov	r2, r1
 80090f4:	eb42 0303 	adc.w	r3, r2, r3
 80090f8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80090fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8009108:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800910c:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 8009110:	460b      	mov	r3, r1
 8009112:	18db      	adds	r3, r3, r3
 8009114:	66bb      	str	r3, [r7, #104]	; 0x68
 8009116:	4613      	mov	r3, r2
 8009118:	eb42 0303 	adc.w	r3, r2, r3
 800911c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800911e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009122:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8009126:	f7f7 fe59 	bl	8000ddc <__aeabi_uldivmod>
 800912a:	4602      	mov	r2, r0
 800912c:	460b      	mov	r3, r1
 800912e:	4611      	mov	r1, r2
 8009130:	4b39      	ldr	r3, [pc, #228]	; (8009218 <UART_SetConfig+0x528>)
 8009132:	fba3 2301 	umull	r2, r3, r3, r1
 8009136:	095b      	lsrs	r3, r3, #5
 8009138:	2264      	movs	r2, #100	; 0x64
 800913a:	fb02 f303 	mul.w	r3, r2, r3
 800913e:	1acb      	subs	r3, r1, r3
 8009140:	00db      	lsls	r3, r3, #3
 8009142:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009146:	4b34      	ldr	r3, [pc, #208]	; (8009218 <UART_SetConfig+0x528>)
 8009148:	fba3 2302 	umull	r2, r3, r3, r2
 800914c:	095b      	lsrs	r3, r3, #5
 800914e:	005b      	lsls	r3, r3, #1
 8009150:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009154:	441c      	add	r4, r3
 8009156:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800915a:	2200      	movs	r2, #0
 800915c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8009160:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8009164:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8009168:	4642      	mov	r2, r8
 800916a:	464b      	mov	r3, r9
 800916c:	1891      	adds	r1, r2, r2
 800916e:	6639      	str	r1, [r7, #96]	; 0x60
 8009170:	415b      	adcs	r3, r3
 8009172:	667b      	str	r3, [r7, #100]	; 0x64
 8009174:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009178:	4641      	mov	r1, r8
 800917a:	1851      	adds	r1, r2, r1
 800917c:	65b9      	str	r1, [r7, #88]	; 0x58
 800917e:	4649      	mov	r1, r9
 8009180:	414b      	adcs	r3, r1
 8009182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009184:	f04f 0200 	mov.w	r2, #0
 8009188:	f04f 0300 	mov.w	r3, #0
 800918c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8009190:	4659      	mov	r1, fp
 8009192:	00cb      	lsls	r3, r1, #3
 8009194:	4651      	mov	r1, sl
 8009196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800919a:	4651      	mov	r1, sl
 800919c:	00ca      	lsls	r2, r1, #3
 800919e:	4610      	mov	r0, r2
 80091a0:	4619      	mov	r1, r3
 80091a2:	4603      	mov	r3, r0
 80091a4:	4642      	mov	r2, r8
 80091a6:	189b      	adds	r3, r3, r2
 80091a8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80091ac:	464b      	mov	r3, r9
 80091ae:	460a      	mov	r2, r1
 80091b0:	eb42 0303 	adc.w	r3, r2, r3
 80091b4:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80091b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80091c4:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80091c8:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80091cc:	460b      	mov	r3, r1
 80091ce:	18db      	adds	r3, r3, r3
 80091d0:	653b      	str	r3, [r7, #80]	; 0x50
 80091d2:	4613      	mov	r3, r2
 80091d4:	eb42 0303 	adc.w	r3, r2, r3
 80091d8:	657b      	str	r3, [r7, #84]	; 0x54
 80091da:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80091de:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80091e2:	f7f7 fdfb 	bl	8000ddc <__aeabi_uldivmod>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	4b0b      	ldr	r3, [pc, #44]	; (8009218 <UART_SetConfig+0x528>)
 80091ec:	fba3 1302 	umull	r1, r3, r3, r2
 80091f0:	095b      	lsrs	r3, r3, #5
 80091f2:	2164      	movs	r1, #100	; 0x64
 80091f4:	fb01 f303 	mul.w	r3, r1, r3
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	00db      	lsls	r3, r3, #3
 80091fc:	3332      	adds	r3, #50	; 0x32
 80091fe:	4a06      	ldr	r2, [pc, #24]	; (8009218 <UART_SetConfig+0x528>)
 8009200:	fba2 2303 	umull	r2, r3, r2, r3
 8009204:	095b      	lsrs	r3, r3, #5
 8009206:	f003 0207 	and.w	r2, r3, #7
 800920a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4422      	add	r2, r4
 8009212:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009214:	e232      	b.n	800967c <UART_SetConfig+0x98c>
 8009216:	bf00      	nop
 8009218:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800921c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	4b8d      	ldr	r3, [pc, #564]	; (8009458 <UART_SetConfig+0x768>)
 8009224:	429a      	cmp	r2, r3
 8009226:	d006      	beq.n	8009236 <UART_SetConfig+0x546>
 8009228:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	4b8b      	ldr	r3, [pc, #556]	; (800945c <UART_SetConfig+0x76c>)
 8009230:	429a      	cmp	r2, r3
 8009232:	f040 8117 	bne.w	8009464 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009236:	f7fe fb1b 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 800923a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800923e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009242:	2200      	movs	r2, #0
 8009244:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8009248:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800924c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8009250:	4622      	mov	r2, r4
 8009252:	462b      	mov	r3, r5
 8009254:	1891      	adds	r1, r2, r2
 8009256:	64b9      	str	r1, [r7, #72]	; 0x48
 8009258:	415b      	adcs	r3, r3
 800925a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800925c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009260:	4621      	mov	r1, r4
 8009262:	eb12 0801 	adds.w	r8, r2, r1
 8009266:	4629      	mov	r1, r5
 8009268:	eb43 0901 	adc.w	r9, r3, r1
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	f04f 0300 	mov.w	r3, #0
 8009274:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009278:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800927c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009280:	4690      	mov	r8, r2
 8009282:	4699      	mov	r9, r3
 8009284:	4623      	mov	r3, r4
 8009286:	eb18 0303 	adds.w	r3, r8, r3
 800928a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800928e:	462b      	mov	r3, r5
 8009290:	eb49 0303 	adc.w	r3, r9, r3
 8009294:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8009298:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80092a4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80092a8:	f04f 0200 	mov.w	r2, #0
 80092ac:	f04f 0300 	mov.w	r3, #0
 80092b0:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80092b4:	4629      	mov	r1, r5
 80092b6:	008b      	lsls	r3, r1, #2
 80092b8:	4621      	mov	r1, r4
 80092ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092be:	4621      	mov	r1, r4
 80092c0:	008a      	lsls	r2, r1, #2
 80092c2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80092c6:	f7f7 fd89 	bl	8000ddc <__aeabi_uldivmod>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4b64      	ldr	r3, [pc, #400]	; (8009460 <UART_SetConfig+0x770>)
 80092d0:	fba3 2302 	umull	r2, r3, r3, r2
 80092d4:	095b      	lsrs	r3, r3, #5
 80092d6:	011c      	lsls	r4, r3, #4
 80092d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80092dc:	2200      	movs	r2, #0
 80092de:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80092e2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80092e6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80092ea:	4642      	mov	r2, r8
 80092ec:	464b      	mov	r3, r9
 80092ee:	1891      	adds	r1, r2, r2
 80092f0:	6439      	str	r1, [r7, #64]	; 0x40
 80092f2:	415b      	adcs	r3, r3
 80092f4:	647b      	str	r3, [r7, #68]	; 0x44
 80092f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092fa:	4641      	mov	r1, r8
 80092fc:	1851      	adds	r1, r2, r1
 80092fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8009300:	4649      	mov	r1, r9
 8009302:	414b      	adcs	r3, r1
 8009304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009306:	f04f 0200 	mov.w	r2, #0
 800930a:	f04f 0300 	mov.w	r3, #0
 800930e:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8009312:	4659      	mov	r1, fp
 8009314:	00cb      	lsls	r3, r1, #3
 8009316:	4651      	mov	r1, sl
 8009318:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800931c:	4651      	mov	r1, sl
 800931e:	00ca      	lsls	r2, r1, #3
 8009320:	4610      	mov	r0, r2
 8009322:	4619      	mov	r1, r3
 8009324:	4603      	mov	r3, r0
 8009326:	4642      	mov	r2, r8
 8009328:	189b      	adds	r3, r3, r2
 800932a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800932e:	464b      	mov	r3, r9
 8009330:	460a      	mov	r2, r1
 8009332:	eb42 0303 	adc.w	r3, r2, r3
 8009336:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800933a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8009346:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800934a:	f04f 0200 	mov.w	r2, #0
 800934e:	f04f 0300 	mov.w	r3, #0
 8009352:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8009356:	4649      	mov	r1, r9
 8009358:	008b      	lsls	r3, r1, #2
 800935a:	4641      	mov	r1, r8
 800935c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009360:	4641      	mov	r1, r8
 8009362:	008a      	lsls	r2, r1, #2
 8009364:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009368:	f7f7 fd38 	bl	8000ddc <__aeabi_uldivmod>
 800936c:	4602      	mov	r2, r0
 800936e:	460b      	mov	r3, r1
 8009370:	4b3b      	ldr	r3, [pc, #236]	; (8009460 <UART_SetConfig+0x770>)
 8009372:	fba3 1302 	umull	r1, r3, r3, r2
 8009376:	095b      	lsrs	r3, r3, #5
 8009378:	2164      	movs	r1, #100	; 0x64
 800937a:	fb01 f303 	mul.w	r3, r1, r3
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	011b      	lsls	r3, r3, #4
 8009382:	3332      	adds	r3, #50	; 0x32
 8009384:	4a36      	ldr	r2, [pc, #216]	; (8009460 <UART_SetConfig+0x770>)
 8009386:	fba2 2303 	umull	r2, r3, r2, r3
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009390:	441c      	add	r4, r3
 8009392:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009396:	2200      	movs	r2, #0
 8009398:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800939c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80093a0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80093a4:	4642      	mov	r2, r8
 80093a6:	464b      	mov	r3, r9
 80093a8:	1891      	adds	r1, r2, r2
 80093aa:	6339      	str	r1, [r7, #48]	; 0x30
 80093ac:	415b      	adcs	r3, r3
 80093ae:	637b      	str	r3, [r7, #52]	; 0x34
 80093b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80093b4:	4641      	mov	r1, r8
 80093b6:	1851      	adds	r1, r2, r1
 80093b8:	62b9      	str	r1, [r7, #40]	; 0x28
 80093ba:	4649      	mov	r1, r9
 80093bc:	414b      	adcs	r3, r1
 80093be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093c0:	f04f 0200 	mov.w	r2, #0
 80093c4:	f04f 0300 	mov.w	r3, #0
 80093c8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80093cc:	4659      	mov	r1, fp
 80093ce:	00cb      	lsls	r3, r1, #3
 80093d0:	4651      	mov	r1, sl
 80093d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093d6:	4651      	mov	r1, sl
 80093d8:	00ca      	lsls	r2, r1, #3
 80093da:	4610      	mov	r0, r2
 80093dc:	4619      	mov	r1, r3
 80093de:	4603      	mov	r3, r0
 80093e0:	4642      	mov	r2, r8
 80093e2:	189b      	adds	r3, r3, r2
 80093e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80093e8:	464b      	mov	r3, r9
 80093ea:	460a      	mov	r2, r1
 80093ec:	eb42 0303 	adc.w	r3, r2, r3
 80093f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80093f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8009400:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8009404:	f04f 0200 	mov.w	r2, #0
 8009408:	f04f 0300 	mov.w	r3, #0
 800940c:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8009410:	4649      	mov	r1, r9
 8009412:	008b      	lsls	r3, r1, #2
 8009414:	4641      	mov	r1, r8
 8009416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800941a:	4641      	mov	r1, r8
 800941c:	008a      	lsls	r2, r1, #2
 800941e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8009422:	f7f7 fcdb 	bl	8000ddc <__aeabi_uldivmod>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	4b0d      	ldr	r3, [pc, #52]	; (8009460 <UART_SetConfig+0x770>)
 800942c:	fba3 1302 	umull	r1, r3, r3, r2
 8009430:	095b      	lsrs	r3, r3, #5
 8009432:	2164      	movs	r1, #100	; 0x64
 8009434:	fb01 f303 	mul.w	r3, r1, r3
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	3332      	adds	r3, #50	; 0x32
 800943e:	4a08      	ldr	r2, [pc, #32]	; (8009460 <UART_SetConfig+0x770>)
 8009440:	fba2 2303 	umull	r2, r3, r2, r3
 8009444:	095b      	lsrs	r3, r3, #5
 8009446:	f003 020f 	and.w	r2, r3, #15
 800944a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4422      	add	r2, r4
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	e112      	b.n	800967c <UART_SetConfig+0x98c>
 8009456:	bf00      	nop
 8009458:	40011000 	.word	0x40011000
 800945c:	40011400 	.word	0x40011400
 8009460:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8009464:	f7fe f9f0 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 8009468:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800946c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009470:	2200      	movs	r2, #0
 8009472:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8009476:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800947a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800947e:	4642      	mov	r2, r8
 8009480:	464b      	mov	r3, r9
 8009482:	1891      	adds	r1, r2, r2
 8009484:	6239      	str	r1, [r7, #32]
 8009486:	415b      	adcs	r3, r3
 8009488:	627b      	str	r3, [r7, #36]	; 0x24
 800948a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800948e:	4641      	mov	r1, r8
 8009490:	1854      	adds	r4, r2, r1
 8009492:	4649      	mov	r1, r9
 8009494:	eb43 0501 	adc.w	r5, r3, r1
 8009498:	f04f 0200 	mov.w	r2, #0
 800949c:	f04f 0300 	mov.w	r3, #0
 80094a0:	00eb      	lsls	r3, r5, #3
 80094a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094a6:	00e2      	lsls	r2, r4, #3
 80094a8:	4614      	mov	r4, r2
 80094aa:	461d      	mov	r5, r3
 80094ac:	4643      	mov	r3, r8
 80094ae:	18e3      	adds	r3, r4, r3
 80094b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80094b4:	464b      	mov	r3, r9
 80094b6:	eb45 0303 	adc.w	r3, r5, r3
 80094ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80094be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80094ca:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80094ce:	f04f 0200 	mov.w	r2, #0
 80094d2:	f04f 0300 	mov.w	r3, #0
 80094d6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80094da:	4629      	mov	r1, r5
 80094dc:	008b      	lsls	r3, r1, #2
 80094de:	4621      	mov	r1, r4
 80094e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094e4:	4621      	mov	r1, r4
 80094e6:	008a      	lsls	r2, r1, #2
 80094e8:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80094ec:	f7f7 fc76 	bl	8000ddc <__aeabi_uldivmod>
 80094f0:	4602      	mov	r2, r0
 80094f2:	460b      	mov	r3, r1
 80094f4:	4b64      	ldr	r3, [pc, #400]	; (8009688 <UART_SetConfig+0x998>)
 80094f6:	fba3 2302 	umull	r2, r3, r3, r2
 80094fa:	095b      	lsrs	r3, r3, #5
 80094fc:	011c      	lsls	r4, r3, #4
 80094fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009502:	2200      	movs	r2, #0
 8009504:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009508:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800950c:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8009510:	4642      	mov	r2, r8
 8009512:	464b      	mov	r3, r9
 8009514:	1891      	adds	r1, r2, r2
 8009516:	61b9      	str	r1, [r7, #24]
 8009518:	415b      	adcs	r3, r3
 800951a:	61fb      	str	r3, [r7, #28]
 800951c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009520:	4641      	mov	r1, r8
 8009522:	1851      	adds	r1, r2, r1
 8009524:	6139      	str	r1, [r7, #16]
 8009526:	4649      	mov	r1, r9
 8009528:	414b      	adcs	r3, r1
 800952a:	617b      	str	r3, [r7, #20]
 800952c:	f04f 0200 	mov.w	r2, #0
 8009530:	f04f 0300 	mov.w	r3, #0
 8009534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009538:	4659      	mov	r1, fp
 800953a:	00cb      	lsls	r3, r1, #3
 800953c:	4651      	mov	r1, sl
 800953e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009542:	4651      	mov	r1, sl
 8009544:	00ca      	lsls	r2, r1, #3
 8009546:	4610      	mov	r0, r2
 8009548:	4619      	mov	r1, r3
 800954a:	4603      	mov	r3, r0
 800954c:	4642      	mov	r2, r8
 800954e:	189b      	adds	r3, r3, r2
 8009550:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009554:	464b      	mov	r3, r9
 8009556:	460a      	mov	r2, r1
 8009558:	eb42 0303 	adc.w	r3, r2, r3
 800955c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009560:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800956c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009570:	f04f 0200 	mov.w	r2, #0
 8009574:	f04f 0300 	mov.w	r3, #0
 8009578:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800957c:	4649      	mov	r1, r9
 800957e:	008b      	lsls	r3, r1, #2
 8009580:	4641      	mov	r1, r8
 8009582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009586:	4641      	mov	r1, r8
 8009588:	008a      	lsls	r2, r1, #2
 800958a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800958e:	f7f7 fc25 	bl	8000ddc <__aeabi_uldivmod>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4b3c      	ldr	r3, [pc, #240]	; (8009688 <UART_SetConfig+0x998>)
 8009598:	fba3 1302 	umull	r1, r3, r3, r2
 800959c:	095b      	lsrs	r3, r3, #5
 800959e:	2164      	movs	r1, #100	; 0x64
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	011b      	lsls	r3, r3, #4
 80095a8:	3332      	adds	r3, #50	; 0x32
 80095aa:	4a37      	ldr	r2, [pc, #220]	; (8009688 <UART_SetConfig+0x998>)
 80095ac:	fba2 2303 	umull	r2, r3, r2, r3
 80095b0:	095b      	lsrs	r3, r3, #5
 80095b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095b6:	441c      	add	r4, r3
 80095b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80095bc:	2200      	movs	r2, #0
 80095be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095c6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80095ca:	4642      	mov	r2, r8
 80095cc:	464b      	mov	r3, r9
 80095ce:	1891      	adds	r1, r2, r2
 80095d0:	60b9      	str	r1, [r7, #8]
 80095d2:	415b      	adcs	r3, r3
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095da:	4641      	mov	r1, r8
 80095dc:	1851      	adds	r1, r2, r1
 80095de:	6039      	str	r1, [r7, #0]
 80095e0:	4649      	mov	r1, r9
 80095e2:	414b      	adcs	r3, r1
 80095e4:	607b      	str	r3, [r7, #4]
 80095e6:	f04f 0200 	mov.w	r2, #0
 80095ea:	f04f 0300 	mov.w	r3, #0
 80095ee:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095f2:	4659      	mov	r1, fp
 80095f4:	00cb      	lsls	r3, r1, #3
 80095f6:	4651      	mov	r1, sl
 80095f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095fc:	4651      	mov	r1, sl
 80095fe:	00ca      	lsls	r2, r1, #3
 8009600:	4610      	mov	r0, r2
 8009602:	4619      	mov	r1, r3
 8009604:	4603      	mov	r3, r0
 8009606:	4642      	mov	r2, r8
 8009608:	189b      	adds	r3, r3, r2
 800960a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800960e:	464b      	mov	r3, r9
 8009610:	460a      	mov	r2, r1
 8009612:	eb42 0303 	adc.w	r3, r2, r3
 8009616:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800961a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009626:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800962a:	f04f 0200 	mov.w	r2, #0
 800962e:	f04f 0300 	mov.w	r3, #0
 8009632:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8009636:	4649      	mov	r1, r9
 8009638:	008b      	lsls	r3, r1, #2
 800963a:	4641      	mov	r1, r8
 800963c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009640:	4641      	mov	r1, r8
 8009642:	008a      	lsls	r2, r1, #2
 8009644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009648:	f7f7 fbc8 	bl	8000ddc <__aeabi_uldivmod>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4b0d      	ldr	r3, [pc, #52]	; (8009688 <UART_SetConfig+0x998>)
 8009652:	fba3 1302 	umull	r1, r3, r3, r2
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	2164      	movs	r1, #100	; 0x64
 800965a:	fb01 f303 	mul.w	r3, r1, r3
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	011b      	lsls	r3, r3, #4
 8009662:	3332      	adds	r3, #50	; 0x32
 8009664:	4a08      	ldr	r2, [pc, #32]	; (8009688 <UART_SetConfig+0x998>)
 8009666:	fba2 2303 	umull	r2, r3, r2, r3
 800966a:	095b      	lsrs	r3, r3, #5
 800966c:	f003 020f 	and.w	r2, r3, #15
 8009670:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4422      	add	r2, r4
 8009678:	609a      	str	r2, [r3, #8]
}
 800967a:	e7ff      	b.n	800967c <UART_SetConfig+0x98c>
 800967c:	bf00      	nop
 800967e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8009682:	46bd      	mov	sp, r7
 8009684:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009688:	51eb851f 	.word	0x51eb851f

0800968c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009696:	2300      	movs	r3, #0
 8009698:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800969a:	2300      	movs	r3, #0
 800969c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d029      	beq.n	80096fa <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80096b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096b6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80096c0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80096c6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80096cc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80096d2:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80096d8:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80096de:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80096e4:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80096ea:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	e034      	b.n	8009764 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009706:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009710:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009716:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800972a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800972e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009738:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800973e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8009744:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800974a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8009750:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	4313      	orrs	r3, r2
 8009756:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009772:	b480      	push	{r7}
 8009774:	b087      	sub	sp, #28
 8009776:	af00      	add	r7, sp, #0
 8009778:	60f8      	str	r0, [r7, #12]
 800977a:	60b9      	str	r1, [r7, #8]
 800977c:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800977e:	2300      	movs	r3, #0
 8009780:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8009782:	2300      	movs	r3, #0
 8009784:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d02e      	beq.n	80097ea <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009798:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	3b01      	subs	r3, #1
 80097a6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80097a8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	3b01      	subs	r3, #1
 80097b0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80097b2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	3b01      	subs	r3, #1
 80097ba:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80097bc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	3b01      	subs	r3, #1
 80097c4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80097c6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	695b      	ldr	r3, [r3, #20]
 80097cc:	3b01      	subs	r3, #1
 80097ce:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80097d0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	3b01      	subs	r3, #1
 80097d8:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80097da:	4313      	orrs	r3, r2
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	4313      	orrs	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	609a      	str	r2, [r3, #8]
 80097e8:	e03b      	b.n	8009862 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80097f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097fa:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	3b01      	subs	r3, #1
 8009802:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	3b01      	subs	r3, #1
 800980a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800980c:	4313      	orrs	r3, r2
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	4313      	orrs	r3, r2
 8009812:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009820:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	3b01      	subs	r3, #1
 800982e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009830:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009832:	68bb      	ldr	r3, [r7, #8]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	3b01      	subs	r3, #1
 8009838:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800983a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	3b01      	subs	r3, #1
 8009842:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009844:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	3b01      	subs	r3, #1
 800984c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800984e:	4313      	orrs	r3, r2
 8009850:	693a      	ldr	r2, [r7, #16]
 8009852:	4313      	orrs	r3, r2
 8009854:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	693a      	ldr	r2, [r7, #16]
 8009860:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	371c      	adds	r7, #28
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009880:	2300      	movs	r3, #0
 8009882:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800988c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	3b01      	subs	r3, #1
 8009894:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009896:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800989e:	4313      	orrs	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80098a8:	f7fb f90a 	bl	8004ac0 <HAL_GetTick>
 80098ac:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80098ae:	e010      	b.n	80098d2 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098b6:	d00c      	beq.n	80098d2 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d007      	beq.n	80098ce <FMC_SDRAM_SendCommand+0x5e>
 80098be:	f7fb f8ff 	bl	8004ac0 <HAL_GetTick>
 80098c2:	4602      	mov	r2, r0
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d201      	bcs.n	80098d2 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e006      	b.n	80098e0 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	f003 0320 	and.w	r3, r3, #32
 80098da:	2b20      	cmp	r3, #32
 80098dc:	d0e8      	beq.n	80098b0 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	695a      	ldr	r2, [r3, #20]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	431a      	orrs	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr
	...

08009910 <arm_max_f32>:
 8009910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009914:	1e4f      	subs	r7, r1, #1
 8009916:	ea5f 0897 	movs.w	r8, r7, lsr #2
 800991a:	f100 0e04 	add.w	lr, r0, #4
 800991e:	edd0 7a00 	vldr	s15, [r0]
 8009922:	d058      	beq.n	80099d6 <arm_max_f32+0xc6>
 8009924:	3014      	adds	r0, #20
 8009926:	46c4      	mov	ip, r8
 8009928:	2604      	movs	r6, #4
 800992a:	2400      	movs	r4, #0
 800992c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8009930:	ed50 6a03 	vldr	s13, [r0, #-12]
 8009934:	ed10 7a02 	vldr	s14, [r0, #-8]
 8009938:	ed50 5a01 	vldr	s11, [r0, #-4]
 800993c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8009940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009944:	bfc8      	it	gt
 8009946:	eef0 7a46 	vmovgt.f32	s15, s12
 800994a:	f1a6 0503 	sub.w	r5, r6, #3
 800994e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009952:	bfc8      	it	gt
 8009954:	462c      	movgt	r4, r5
 8009956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800995a:	bf48      	it	mi
 800995c:	eef0 7a66 	vmovmi.f32	s15, s13
 8009960:	f1a6 0502 	sub.w	r5, r6, #2
 8009964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009968:	bf48      	it	mi
 800996a:	462c      	movmi	r4, r5
 800996c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009970:	bf48      	it	mi
 8009972:	eef0 7a47 	vmovmi.f32	s15, s14
 8009976:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800997a:	eef4 7ae5 	vcmpe.f32	s15, s11
 800997e:	bf48      	it	mi
 8009980:	462c      	movmi	r4, r5
 8009982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009986:	bf48      	it	mi
 8009988:	4634      	movmi	r4, r6
 800998a:	bf48      	it	mi
 800998c:	eef0 7a65 	vmovmi.f32	s15, s11
 8009990:	f1bc 0c01 	subs.w	ip, ip, #1
 8009994:	f100 0010 	add.w	r0, r0, #16
 8009998:	f106 0604 	add.w	r6, r6, #4
 800999c:	d1c6      	bne.n	800992c <arm_max_f32+0x1c>
 800999e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80099a2:	f017 0003 	ands.w	r0, r7, #3
 80099a6:	d018      	beq.n	80099da <arm_max_f32+0xca>
 80099a8:	1a08      	subs	r0, r1, r0
 80099aa:	ecbe 7a01 	vldmia	lr!, {s14}
 80099ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b6:	bfc8      	it	gt
 80099b8:	4604      	movgt	r4, r0
 80099ba:	f100 0001 	add.w	r0, r0, #1
 80099be:	bfd8      	it	le
 80099c0:	eeb0 7a67 	vmovle.f32	s14, s15
 80099c4:	4281      	cmp	r1, r0
 80099c6:	eef0 7a47 	vmov.f32	s15, s14
 80099ca:	d1ee      	bne.n	80099aa <arm_max_f32+0x9a>
 80099cc:	ed82 7a00 	vstr	s14, [r2]
 80099d0:	601c      	str	r4, [r3, #0]
 80099d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099d6:	4644      	mov	r4, r8
 80099d8:	e7e3      	b.n	80099a2 <arm_max_f32+0x92>
 80099da:	eeb0 7a67 	vmov.f32	s14, s15
 80099de:	e7f5      	b.n	80099cc <arm_max_f32+0xbc>

080099e0 <arm_cfft_radix8by2_f32>:
 80099e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e4:	ed2d 8b08 	vpush	{d8-d11}
 80099e8:	4607      	mov	r7, r0
 80099ea:	4608      	mov	r0, r1
 80099ec:	f8b7 e000 	ldrh.w	lr, [r7]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80099f6:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80099fa:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80099fe:	f000 80b0 	beq.w	8009b62 <arm_cfft_radix8by2_f32+0x182>
 8009a02:	008b      	lsls	r3, r1, #2
 8009a04:	3310      	adds	r3, #16
 8009a06:	18c6      	adds	r6, r0, r3
 8009a08:	3210      	adds	r2, #16
 8009a0a:	4443      	add	r3, r8
 8009a0c:	f100 0510 	add.w	r5, r0, #16
 8009a10:	f108 0410 	add.w	r4, r8, #16
 8009a14:	ed54 1a04 	vldr	s3, [r4, #-16]
 8009a18:	ed54 6a03 	vldr	s13, [r4, #-12]
 8009a1c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8009a20:	ed53 3a03 	vldr	s7, [r3, #-12]
 8009a24:	ed53 5a02 	vldr	s11, [r3, #-8]
 8009a28:	ed13 5a01 	vldr	s10, [r3, #-4]
 8009a2c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8009a30:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009a34:	ed16 2a04 	vldr	s4, [r6, #-16]
 8009a38:	ed56 2a03 	vldr	s5, [r6, #-12]
 8009a3c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8009a40:	ed15 7a01 	vldr	s14, [r5, #-4]
 8009a44:	ed15 3a04 	vldr	s6, [r5, #-16]
 8009a48:	ed56 0a02 	vldr	s1, [r6, #-8]
 8009a4c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8009a50:	ed55 4a02 	vldr	s9, [r5, #-8]
 8009a54:	ee73 ba21 	vadd.f32	s23, s6, s3
 8009a58:	ee36 ba26 	vadd.f32	s22, s12, s13
 8009a5c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8009a60:	ee72 9a04 	vadd.f32	s19, s4, s8
 8009a64:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8009a68:	ee31 8a05 	vadd.f32	s16, s2, s10
 8009a6c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8009a70:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8009a74:	ed45 ba04 	vstr	s23, [r5, #-16]
 8009a78:	ed05 ba03 	vstr	s22, [r5, #-12]
 8009a7c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8009a80:	ed05 aa01 	vstr	s20, [r5, #-4]
 8009a84:	ed06 8a01 	vstr	s16, [r6, #-4]
 8009a88:	ed46 9a04 	vstr	s19, [r6, #-16]
 8009a8c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8009a90:	ed46 8a02 	vstr	s17, [r6, #-8]
 8009a94:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009a98:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8009a9c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8009aa0:	ed52 2a04 	vldr	s5, [r2, #-16]
 8009aa4:	ee33 3a61 	vsub.f32	s6, s6, s3
 8009aa8:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009aac:	ee26 8a86 	vmul.f32	s16, s13, s12
 8009ab0:	ee24 2a06 	vmul.f32	s4, s8, s12
 8009ab4:	ee63 1a22 	vmul.f32	s3, s6, s5
 8009ab8:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009abc:	ee23 3a06 	vmul.f32	s6, s6, s12
 8009ac0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8009ac4:	ee23 6a86 	vmul.f32	s12, s7, s12
 8009ac8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8009acc:	ee36 6a04 	vadd.f32	s12, s12, s8
 8009ad0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8009ad4:	ee72 3a63 	vsub.f32	s7, s4, s7
 8009ad8:	ee71 2a88 	vadd.f32	s5, s3, s16
 8009adc:	ed44 6a03 	vstr	s13, [r4, #-12]
 8009ae0:	ed44 2a04 	vstr	s5, [r4, #-16]
 8009ae4:	ed43 3a04 	vstr	s7, [r3, #-16]
 8009ae8:	ed03 6a03 	vstr	s12, [r3, #-12]
 8009aec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009af0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8009af4:	ed12 7a01 	vldr	s14, [r2, #-4]
 8009af8:	ed52 5a02 	vldr	s11, [r2, #-8]
 8009afc:	ee35 6a41 	vsub.f32	s12, s10, s2
 8009b00:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8009b04:	ee67 3a87 	vmul.f32	s7, s15, s14
 8009b08:	ee26 5a87 	vmul.f32	s10, s13, s14
 8009b0c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8009b10:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009b14:	ee64 4a87 	vmul.f32	s9, s9, s14
 8009b18:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8009b1c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8009b20:	ee26 6a25 	vmul.f32	s12, s12, s11
 8009b24:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009b28:	ee74 5a23 	vadd.f32	s11, s8, s7
 8009b2c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009b30:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009b34:	f1be 0e01 	subs.w	lr, lr, #1
 8009b38:	ed44 5a02 	vstr	s11, [r4, #-8]
 8009b3c:	f105 0510 	add.w	r5, r5, #16
 8009b40:	ed44 7a01 	vstr	s15, [r4, #-4]
 8009b44:	f106 0610 	add.w	r6, r6, #16
 8009b48:	ed03 6a02 	vstr	s12, [r3, #-8]
 8009b4c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8009b50:	f102 0210 	add.w	r2, r2, #16
 8009b54:	f104 0410 	add.w	r4, r4, #16
 8009b58:	f103 0310 	add.w	r3, r3, #16
 8009b5c:	f47f af5a 	bne.w	8009a14 <arm_cfft_radix8by2_f32+0x34>
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	b28c      	uxth	r4, r1
 8009b64:	4621      	mov	r1, r4
 8009b66:	2302      	movs	r3, #2
 8009b68:	f000 fbca 	bl	800a300 <arm_radix8_butterfly_f32>
 8009b6c:	ecbd 8b08 	vpop	{d8-d11}
 8009b70:	4621      	mov	r1, r4
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4640      	mov	r0, r8
 8009b76:	2302      	movs	r3, #2
 8009b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b7c:	f000 bbc0 	b.w	800a300 <arm_radix8_butterfly_f32>

08009b80 <arm_cfft_radix8by4_f32>:
 8009b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b84:	ed2d 8b0a 	vpush	{d8-d12}
 8009b88:	8802      	ldrh	r2, [r0, #0]
 8009b8a:	ed91 6a00 	vldr	s12, [r1]
 8009b8e:	b08f      	sub	sp, #60	; 0x3c
 8009b90:	460f      	mov	r7, r1
 8009b92:	0852      	lsrs	r2, r2, #1
 8009b94:	6841      	ldr	r1, [r0, #4]
 8009b96:	900c      	str	r0, [sp, #48]	; 0x30
 8009b98:	0093      	lsls	r3, r2, #2
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	4418      	add	r0, r3
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	9009      	str	r0, [sp, #36]	; 0x24
 8009ba2:	4418      	add	r0, r3
 8009ba4:	edd0 6a00 	vldr	s13, [r0]
 8009ba8:	ed96 4a00 	vldr	s8, [r6]
 8009bac:	edd6 2a01 	vldr	s5, [r6, #4]
 8009bb0:	edd0 7a01 	vldr	s15, [r0, #4]
 8009bb4:	900a      	str	r0, [sp, #40]	; 0x28
 8009bb6:	ee76 5a26 	vadd.f32	s11, s12, s13
 8009bba:	4604      	mov	r4, r0
 8009bbc:	4625      	mov	r5, r4
 8009bbe:	441c      	add	r4, r3
 8009bc0:	edd4 4a00 	vldr	s9, [r4]
 8009bc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8009bc8:	ed94 3a01 	vldr	s6, [r4, #4]
 8009bcc:	9401      	str	r4, [sp, #4]
 8009bce:	ee35 5a84 	vadd.f32	s10, s11, s8
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009bd8:	463e      	mov	r6, r7
 8009bda:	ee15 ea10 	vmov	lr, s10
 8009bde:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009be2:	f846 eb08 	str.w	lr, [r6], #8
 8009be6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8009bea:	ed90 5a01 	vldr	s10, [r0, #4]
 8009bee:	9605      	str	r6, [sp, #20]
 8009bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bf4:	9e01      	ldr	r6, [sp, #4]
 8009bf6:	9707      	str	r7, [sp, #28]
 8009bf8:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8009bfc:	ed96 2a01 	vldr	s4, [r6, #4]
 8009c00:	ee36 7a05 	vadd.f32	s14, s12, s10
 8009c04:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8009c08:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8009c0c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8009c10:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8009c14:	4604      	mov	r4, r0
 8009c16:	46a3      	mov	fp, r4
 8009c18:	ee37 7a02 	vadd.f32	s14, s14, s4
 8009c1c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009c20:	ee14 8a10 	vmov	r8, s8
 8009c24:	46a4      	mov	ip, r4
 8009c26:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8009c2a:	ed87 7a01 	vstr	s14, [r7, #4]
 8009c2e:	f84b 8b08 	str.w	r8, [fp], #8
 8009c32:	f1ac 0704 	sub.w	r7, ip, #4
 8009c36:	ed8c 5a01 	vstr	s10, [ip, #4]
 8009c3a:	f101 0c08 	add.w	ip, r1, #8
 8009c3e:	462c      	mov	r4, r5
 8009c40:	f8cd c010 	str.w	ip, [sp, #16]
 8009c44:	ee15 ca90 	vmov	ip, s11
 8009c48:	ee36 6a62 	vsub.f32	s12, s12, s5
 8009c4c:	f844 cb08 	str.w	ip, [r4], #8
 8009c50:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8009c54:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009c58:	9406      	str	r4, [sp, #24]
 8009c5a:	ee76 6a83 	vadd.f32	s13, s13, s6
 8009c5e:	f101 0410 	add.w	r4, r1, #16
 8009c62:	0852      	lsrs	r2, r2, #1
 8009c64:	9402      	str	r4, [sp, #8]
 8009c66:	ed85 6a01 	vstr	s12, [r5, #4]
 8009c6a:	462c      	mov	r4, r5
 8009c6c:	f101 0518 	add.w	r5, r1, #24
 8009c70:	920b      	str	r2, [sp, #44]	; 0x2c
 8009c72:	46b2      	mov	sl, r6
 8009c74:	9503      	str	r5, [sp, #12]
 8009c76:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8009c7a:	3a02      	subs	r2, #2
 8009c7c:	ee16 5a90 	vmov	r5, s13
 8009c80:	46b6      	mov	lr, r6
 8009c82:	4630      	mov	r0, r6
 8009c84:	0852      	lsrs	r2, r2, #1
 8009c86:	f84a 5b08 	str.w	r5, [sl], #8
 8009c8a:	f1a0 0604 	sub.w	r6, r0, #4
 8009c8e:	edce 7a01 	vstr	s15, [lr, #4]
 8009c92:	9208      	str	r2, [sp, #32]
 8009c94:	f000 8130 	beq.w	8009ef8 <arm_cfft_radix8by4_f32+0x378>
 8009c98:	4691      	mov	r9, r2
 8009c9a:	9a07      	ldr	r2, [sp, #28]
 8009c9c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009ca0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009ca4:	3b08      	subs	r3, #8
 8009ca6:	f102 0510 	add.w	r5, r2, #16
 8009caa:	f101 0c20 	add.w	ip, r1, #32
 8009cae:	f1a4 020c 	sub.w	r2, r4, #12
 8009cb2:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8009cb6:	4433      	add	r3, r6
 8009cb8:	3410      	adds	r4, #16
 8009cba:	4650      	mov	r0, sl
 8009cbc:	4659      	mov	r1, fp
 8009cbe:	ed55 3a02 	vldr	s7, [r5, #-8]
 8009cc2:	ed14 5a02 	vldr	s10, [r4, #-8]
 8009cc6:	ed91 7a00 	vldr	s14, [r1]
 8009cca:	edd0 7a00 	vldr	s15, [r0]
 8009cce:	ed54 5a01 	vldr	s11, [r4, #-4]
 8009cd2:	ed15 4a01 	vldr	s8, [r5, #-4]
 8009cd6:	edd0 6a01 	vldr	s13, [r0, #4]
 8009cda:	ed91 6a01 	vldr	s12, [r1, #4]
 8009cde:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009ce2:	ee34 0a25 	vadd.f32	s0, s8, s11
 8009ce6:	ee78 4a07 	vadd.f32	s9, s16, s14
 8009cea:	ee74 5a65 	vsub.f32	s11, s8, s11
 8009cee:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8009cf2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8009cf6:	ed45 4a02 	vstr	s9, [r5, #-8]
 8009cfa:	edd1 4a01 	vldr	s9, [r1, #4]
 8009cfe:	ed90 4a01 	vldr	s8, [r0, #4]
 8009d02:	ee70 4a24 	vadd.f32	s9, s0, s9
 8009d06:	ee75 aa06 	vadd.f32	s21, s10, s12
 8009d0a:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009d0e:	ee35 aac7 	vsub.f32	s20, s11, s14
 8009d12:	ed45 4a01 	vstr	s9, [r5, #-4]
 8009d16:	edd6 1a00 	vldr	s3, [r6]
 8009d1a:	edd7 0a00 	vldr	s1, [r7]
 8009d1e:	ed92 4a02 	vldr	s8, [r2, #8]
 8009d22:	edd3 3a02 	vldr	s7, [r3, #8]
 8009d26:	ed93 2a01 	vldr	s4, [r3, #4]
 8009d2a:	ed16 1a01 	vldr	s2, [r6, #-4]
 8009d2e:	edd2 2a01 	vldr	s5, [r2, #4]
 8009d32:	ed57 9a01 	vldr	s19, [r7, #-4]
 8009d36:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8009d3a:	ee39 3a81 	vadd.f32	s6, s19, s2
 8009d3e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8009d42:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8009d46:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8009d4a:	ee7a aae6 	vsub.f32	s21, s21, s13
 8009d4e:	ee18 aa90 	vmov	sl, s17
 8009d52:	f847 a908 	str.w	sl, [r7], #-8
 8009d56:	edd2 8a01 	vldr	s17, [r2, #4]
 8009d5a:	ed93 9a01 	vldr	s18, [r3, #4]
 8009d5e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8009d62:	ee3a aa27 	vadd.f32	s20, s20, s15
 8009d66:	ee78 8a89 	vadd.f32	s17, s17, s18
 8009d6a:	ee74 0a63 	vsub.f32	s1, s8, s7
 8009d6e:	edc7 8a01 	vstr	s17, [r7, #4]
 8009d72:	ed18 ba02 	vldr	s22, [r8, #-8]
 8009d76:	ed58 8a01 	vldr	s17, [r8, #-4]
 8009d7a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8009d7e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8009d82:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8009d86:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8009d8a:	ee31 9a20 	vadd.f32	s18, s2, s1
 8009d8e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8009d92:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8009d96:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8009d9a:	ee69 baa8 	vmul.f32	s23, s19, s17
 8009d9e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8009da2:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8009da6:	ee69 8a28 	vmul.f32	s17, s18, s17
 8009daa:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8009dae:	ee1c aa10 	vmov	sl, s24
 8009db2:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8009db6:	f841 ab08 	str.w	sl, [r1], #8
 8009dba:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8009dbe:	ee3b bacb 	vsub.f32	s22, s23, s22
 8009dc2:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8009dc6:	ee33 3a62 	vsub.f32	s6, s6, s5
 8009dca:	ed01 aa01 	vstr	s20, [r1, #-4]
 8009dce:	edc2 8a01 	vstr	s17, [r2, #4]
 8009dd2:	ed82 ba02 	vstr	s22, [r2, #8]
 8009dd6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8009dda:	ee74 3a63 	vsub.f32	s7, s8, s7
 8009dde:	ee38 8a47 	vsub.f32	s16, s16, s14
 8009de2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8009de6:	ee30 0a46 	vsub.f32	s0, s0, s12
 8009dea:	ee33 3a42 	vsub.f32	s6, s6, s4
 8009dee:	ee38 8a67 	vsub.f32	s16, s16, s15
 8009df2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8009df6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8009dfa:	ee63 8a04 	vmul.f32	s17, s6, s8
 8009dfe:	ee28 aa24 	vmul.f32	s20, s16, s9
 8009e02:	ee60 9a04 	vmul.f32	s19, s0, s8
 8009e06:	ee28 8a04 	vmul.f32	s16, s16, s8
 8009e0a:	ee20 0a24 	vmul.f32	s0, s0, s9
 8009e0e:	ee63 3a84 	vmul.f32	s7, s7, s8
 8009e12:	ee39 4a68 	vsub.f32	s8, s18, s17
 8009e16:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8009e1a:	ee14 aa10 	vmov	sl, s8
 8009e1e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8009e22:	ee63 4a24 	vmul.f32	s9, s6, s9
 8009e26:	ed44 9a02 	vstr	s19, [r4, #-8]
 8009e2a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8009e2e:	ed04 0a01 	vstr	s0, [r4, #-4]
 8009e32:	f846 a908 	str.w	sl, [r6], #-8
 8009e36:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009e3a:	ee35 7a87 	vadd.f32	s14, s11, s14
 8009e3e:	edc6 3a01 	vstr	s7, [r6, #4]
 8009e42:	ee76 6a26 	vadd.f32	s13, s12, s13
 8009e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e4a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8009e4e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8009e52:	ee67 5a86 	vmul.f32	s11, s15, s12
 8009e56:	ee26 5a87 	vmul.f32	s10, s13, s14
 8009e5a:	ee72 2a62 	vsub.f32	s5, s4, s5
 8009e5e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8009e62:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8009e66:	ee75 5a25 	vadd.f32	s11, s10, s11
 8009e6a:	ee62 0a86 	vmul.f32	s1, s5, s12
 8009e6e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e76:	ee21 6a06 	vmul.f32	s12, s2, s12
 8009e7a:	ee62 2a87 	vmul.f32	s5, s5, s14
 8009e7e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8009e82:	ee15 aa90 	vmov	sl, s11
 8009e86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009e8a:	f840 ab08 	str.w	sl, [r0], #8
 8009e8e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8009e92:	ee76 2a22 	vadd.f32	s5, s12, s5
 8009e96:	f1b9 0901 	subs.w	r9, r9, #1
 8009e9a:	ed40 7a01 	vstr	s15, [r0, #-4]
 8009e9e:	f105 0508 	add.w	r5, r5, #8
 8009ea2:	ed83 1a02 	vstr	s2, [r3, #8]
 8009ea6:	edc3 2a01 	vstr	s5, [r3, #4]
 8009eaa:	f108 0808 	add.w	r8, r8, #8
 8009eae:	f1a2 0208 	sub.w	r2, r2, #8
 8009eb2:	f10c 0c10 	add.w	ip, ip, #16
 8009eb6:	f104 0408 	add.w	r4, r4, #8
 8009eba:	f10e 0e18 	add.w	lr, lr, #24
 8009ebe:	f1a3 0308 	sub.w	r3, r3, #8
 8009ec2:	f47f aefc 	bne.w	8009cbe <arm_cfft_radix8by4_f32+0x13e>
 8009ec6:	9908      	ldr	r1, [sp, #32]
 8009ec8:	9802      	ldr	r0, [sp, #8]
 8009eca:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8009ece:	00cb      	lsls	r3, r1, #3
 8009ed0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8009ed4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009ed8:	9102      	str	r1, [sp, #8]
 8009eda:	9905      	ldr	r1, [sp, #20]
 8009edc:	4419      	add	r1, r3
 8009ede:	9105      	str	r1, [sp, #20]
 8009ee0:	9904      	ldr	r1, [sp, #16]
 8009ee2:	4419      	add	r1, r3
 8009ee4:	9104      	str	r1, [sp, #16]
 8009ee6:	9906      	ldr	r1, [sp, #24]
 8009ee8:	449b      	add	fp, r3
 8009eea:	4419      	add	r1, r3
 8009eec:	449a      	add	sl, r3
 8009eee:	9b03      	ldr	r3, [sp, #12]
 8009ef0:	9106      	str	r1, [sp, #24]
 8009ef2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ef6:	9303      	str	r3, [sp, #12]
 8009ef8:	9a05      	ldr	r2, [sp, #20]
 8009efa:	9806      	ldr	r0, [sp, #24]
 8009efc:	ed92 4a00 	vldr	s8, [r2]
 8009f00:	ed90 7a00 	vldr	s14, [r0]
 8009f04:	ed9b 3a00 	vldr	s6, [fp]
 8009f08:	edda 3a00 	vldr	s7, [sl]
 8009f0c:	edd2 4a01 	vldr	s9, [r2, #4]
 8009f10:	edd0 6a01 	vldr	s13, [r0, #4]
 8009f14:	ed9a 2a01 	vldr	s4, [sl, #4]
 8009f18:	eddb 7a01 	vldr	s15, [fp, #4]
 8009f1c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8009f20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009f22:	ee34 6a07 	vadd.f32	s12, s8, s14
 8009f26:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8009f2a:	ee36 5a03 	vadd.f32	s10, s12, s6
 8009f2e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009f32:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009f36:	ee34 7a47 	vsub.f32	s14, s8, s14
 8009f3a:	ed82 5a00 	vstr	s10, [r2]
 8009f3e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8009f42:	edda 4a01 	vldr	s9, [sl, #4]
 8009f46:	ee35 5a85 	vadd.f32	s10, s11, s10
 8009f4a:	ee37 4a27 	vadd.f32	s8, s14, s15
 8009f4e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009f52:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8009f56:	ed82 5a01 	vstr	s10, [r2, #4]
 8009f5a:	9a04      	ldr	r2, [sp, #16]
 8009f5c:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8009f60:	edd2 1a00 	vldr	s3, [r2]
 8009f64:	edd2 2a01 	vldr	s5, [r2, #4]
 8009f68:	9a02      	ldr	r2, [sp, #8]
 8009f6a:	ee34 4a42 	vsub.f32	s8, s8, s4
 8009f6e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009f72:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009f76:	ee24 4a22 	vmul.f32	s8, s8, s5
 8009f7a:	ee65 2a22 	vmul.f32	s5, s10, s5
 8009f7e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009f82:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009f86:	ee35 5a44 	vsub.f32	s10, s10, s8
 8009f8a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009f8e:	edcb 2a00 	vstr	s5, [fp]
 8009f92:	ed8b 5a01 	vstr	s10, [fp, #4]
 8009f96:	ed92 4a01 	vldr	s8, [r2, #4]
 8009f9a:	ed92 5a00 	vldr	s10, [r2]
 8009f9e:	9a03      	ldr	r2, [sp, #12]
 8009fa0:	ee36 6a63 	vsub.f32	s12, s12, s7
 8009fa4:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009fa8:	ee66 4a05 	vmul.f32	s9, s12, s10
 8009fac:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009fb0:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009fb4:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009fb8:	ee35 6a46 	vsub.f32	s12, s10, s12
 8009fbc:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8009fc0:	ee76 6a83 	vadd.f32	s13, s13, s6
 8009fc4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fc8:	ed80 6a01 	vstr	s12, [r0, #4]
 8009fcc:	edc0 5a00 	vstr	s11, [r0]
 8009fd0:	edd2 5a01 	vldr	s11, [r2, #4]
 8009fd4:	9807      	ldr	r0, [sp, #28]
 8009fd6:	ee77 7a02 	vadd.f32	s15, s14, s4
 8009fda:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8009fde:	edd2 6a00 	vldr	s13, [r2]
 8009fe2:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8009fe6:	ee67 6a26 	vmul.f32	s13, s14, s13
 8009fea:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009fee:	ee27 7a25 	vmul.f32	s14, s14, s11
 8009ff2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009ff6:	ee36 7a07 	vadd.f32	s14, s12, s14
 8009ffa:	edca 7a01 	vstr	s15, [sl, #4]
 8009ffe:	ed8a 7a00 	vstr	s14, [sl]
 800a002:	6872      	ldr	r2, [r6, #4]
 800a004:	4621      	mov	r1, r4
 800a006:	2304      	movs	r3, #4
 800a008:	f000 f97a 	bl	800a300 <arm_radix8_butterfly_f32>
 800a00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a00e:	6872      	ldr	r2, [r6, #4]
 800a010:	4621      	mov	r1, r4
 800a012:	2304      	movs	r3, #4
 800a014:	f000 f974 	bl	800a300 <arm_radix8_butterfly_f32>
 800a018:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a01a:	6872      	ldr	r2, [r6, #4]
 800a01c:	4621      	mov	r1, r4
 800a01e:	2304      	movs	r3, #4
 800a020:	f000 f96e 	bl	800a300 <arm_radix8_butterfly_f32>
 800a024:	6872      	ldr	r2, [r6, #4]
 800a026:	9801      	ldr	r0, [sp, #4]
 800a028:	4621      	mov	r1, r4
 800a02a:	2304      	movs	r3, #4
 800a02c:	b00f      	add	sp, #60	; 0x3c
 800a02e:	ecbd 8b0a 	vpop	{d8-d12}
 800a032:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a036:	f000 b963 	b.w	800a300 <arm_radix8_butterfly_f32>
 800a03a:	bf00      	nop

0800a03c <arm_cfft_f32>:
 800a03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a040:	2a01      	cmp	r2, #1
 800a042:	4606      	mov	r6, r0
 800a044:	4617      	mov	r7, r2
 800a046:	460c      	mov	r4, r1
 800a048:	4698      	mov	r8, r3
 800a04a:	8805      	ldrh	r5, [r0, #0]
 800a04c:	d054      	beq.n	800a0f8 <arm_cfft_f32+0xbc>
 800a04e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a052:	d04c      	beq.n	800a0ee <arm_cfft_f32+0xb2>
 800a054:	d916      	bls.n	800a084 <arm_cfft_f32+0x48>
 800a056:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800a05a:	d01a      	beq.n	800a092 <arm_cfft_f32+0x56>
 800a05c:	d95c      	bls.n	800a118 <arm_cfft_f32+0xdc>
 800a05e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800a062:	d044      	beq.n	800a0ee <arm_cfft_f32+0xb2>
 800a064:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800a068:	d105      	bne.n	800a076 <arm_cfft_f32+0x3a>
 800a06a:	2301      	movs	r3, #1
 800a06c:	6872      	ldr	r2, [r6, #4]
 800a06e:	4629      	mov	r1, r5
 800a070:	4620      	mov	r0, r4
 800a072:	f000 f945 	bl	800a300 <arm_radix8_butterfly_f32>
 800a076:	f1b8 0f00 	cmp.w	r8, #0
 800a07a:	d111      	bne.n	800a0a0 <arm_cfft_f32+0x64>
 800a07c:	2f01      	cmp	r7, #1
 800a07e:	d016      	beq.n	800a0ae <arm_cfft_f32+0x72>
 800a080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a084:	2d20      	cmp	r5, #32
 800a086:	d032      	beq.n	800a0ee <arm_cfft_f32+0xb2>
 800a088:	d94a      	bls.n	800a120 <arm_cfft_f32+0xe4>
 800a08a:	2d40      	cmp	r5, #64	; 0x40
 800a08c:	d0ed      	beq.n	800a06a <arm_cfft_f32+0x2e>
 800a08e:	2d80      	cmp	r5, #128	; 0x80
 800a090:	d1f1      	bne.n	800a076 <arm_cfft_f32+0x3a>
 800a092:	4621      	mov	r1, r4
 800a094:	4630      	mov	r0, r6
 800a096:	f7ff fca3 	bl	80099e0 <arm_cfft_radix8by2_f32>
 800a09a:	f1b8 0f00 	cmp.w	r8, #0
 800a09e:	d0ed      	beq.n	800a07c <arm_cfft_f32+0x40>
 800a0a0:	68b2      	ldr	r2, [r6, #8]
 800a0a2:	89b1      	ldrh	r1, [r6, #12]
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f7f6 f8a3 	bl	80001f0 <arm_bitreversal_32>
 800a0aa:	2f01      	cmp	r7, #1
 800a0ac:	d1e8      	bne.n	800a080 <arm_cfft_f32+0x44>
 800a0ae:	ee07 5a90 	vmov	s15, r5
 800a0b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0ba:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a0be:	2d00      	cmp	r5, #0
 800a0c0:	d0de      	beq.n	800a080 <arm_cfft_f32+0x44>
 800a0c2:	f104 0108 	add.w	r1, r4, #8
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	f101 0108 	add.w	r1, r1, #8
 800a0d0:	ed11 7a04 	vldr	s14, [r1, #-16]
 800a0d4:	ed51 7a03 	vldr	s15, [r1, #-12]
 800a0d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a0dc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800a0e0:	ed01 7a04 	vstr	s14, [r1, #-16]
 800a0e4:	ed41 7a03 	vstr	s15, [r1, #-12]
 800a0e8:	d1ee      	bne.n	800a0c8 <arm_cfft_f32+0x8c>
 800a0ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7ff fd45 	bl	8009b80 <arm_cfft_radix8by4_f32>
 800a0f6:	e7be      	b.n	800a076 <arm_cfft_f32+0x3a>
 800a0f8:	b1ad      	cbz	r5, 800a126 <arm_cfft_f32+0xea>
 800a0fa:	f101 030c 	add.w	r3, r1, #12
 800a0fe:	2200      	movs	r2, #0
 800a100:	ed53 7a02 	vldr	s15, [r3, #-8]
 800a104:	3201      	adds	r2, #1
 800a106:	eef1 7a67 	vneg.f32	s15, s15
 800a10a:	4295      	cmp	r5, r2
 800a10c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800a110:	f103 0308 	add.w	r3, r3, #8
 800a114:	d1f4      	bne.n	800a100 <arm_cfft_f32+0xc4>
 800a116:	e79a      	b.n	800a04e <arm_cfft_f32+0x12>
 800a118:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800a11c:	d0a5      	beq.n	800a06a <arm_cfft_f32+0x2e>
 800a11e:	e7aa      	b.n	800a076 <arm_cfft_f32+0x3a>
 800a120:	2d10      	cmp	r5, #16
 800a122:	d0b6      	beq.n	800a092 <arm_cfft_f32+0x56>
 800a124:	e7a7      	b.n	800a076 <arm_cfft_f32+0x3a>
 800a126:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800a12a:	d894      	bhi.n	800a056 <arm_cfft_f32+0x1a>
 800a12c:	e7aa      	b.n	800a084 <arm_cfft_f32+0x48>
 800a12e:	bf00      	nop

0800a130 <arm_cmplx_mag_f32>:
 800a130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a134:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800a138:	b084      	sub	sp, #16
 800a13a:	d07f      	beq.n	800a23c <arm_cmplx_mag_f32+0x10c>
 800a13c:	2700      	movs	r7, #0
 800a13e:	f100 0420 	add.w	r4, r0, #32
 800a142:	f101 0510 	add.w	r5, r1, #16
 800a146:	4646      	mov	r6, r8
 800a148:	e05a      	b.n	800a200 <arm_cmplx_mag_f32+0xd0>
 800a14a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a14e:	eeb4 0a40 	vcmp.f32	s0, s0
 800a152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a156:	f040 80a4 	bne.w	800a2a2 <arm_cmplx_mag_f32+0x172>
 800a15a:	ed05 0a04 	vstr	s0, [r5, #-16]
 800a15e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800a162:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800a166:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a16a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a16e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a17a:	f2c0 808f 	blt.w	800a29c <arm_cmplx_mag_f32+0x16c>
 800a17e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a182:	eeb4 0a40 	vcmp.f32	s0, s0
 800a186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a18a:	f040 80af 	bne.w	800a2ec <arm_cmplx_mag_f32+0x1bc>
 800a18e:	ed05 0a03 	vstr	s0, [r5, #-12]
 800a192:	ed54 7a04 	vldr	s15, [r4, #-16]
 800a196:	ed14 0a03 	vldr	s0, [r4, #-12]
 800a19a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a19e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a1a2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a1a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ae:	db72      	blt.n	800a296 <arm_cmplx_mag_f32+0x166>
 800a1b0:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a1b4:	eeb4 0a40 	vcmp.f32	s0, s0
 800a1b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1bc:	f040 808c 	bne.w	800a2d8 <arm_cmplx_mag_f32+0x1a8>
 800a1c0:	ed05 0a02 	vstr	s0, [r5, #-8]
 800a1c4:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a1c8:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a1cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a1d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a1d4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a1d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1e0:	db20      	blt.n	800a224 <arm_cmplx_mag_f32+0xf4>
 800a1e2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a1e6:	eeb4 0a40 	vcmp.f32	s0, s0
 800a1ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ee:	d169      	bne.n	800a2c4 <arm_cmplx_mag_f32+0x194>
 800a1f0:	3e01      	subs	r6, #1
 800a1f2:	ed05 0a01 	vstr	s0, [r5, #-4]
 800a1f6:	f104 0420 	add.w	r4, r4, #32
 800a1fa:	f105 0510 	add.w	r5, r5, #16
 800a1fe:	d019      	beq.n	800a234 <arm_cmplx_mag_f32+0x104>
 800a200:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800a204:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800a208:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a20c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a210:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a214:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a21c:	da95      	bge.n	800a14a <arm_cmplx_mag_f32+0x1a>
 800a21e:	f845 7c10 	str.w	r7, [r5, #-16]
 800a222:	e79c      	b.n	800a15e <arm_cmplx_mag_f32+0x2e>
 800a224:	3e01      	subs	r6, #1
 800a226:	f845 7c04 	str.w	r7, [r5, #-4]
 800a22a:	f104 0420 	add.w	r4, r4, #32
 800a22e:	f105 0510 	add.w	r5, r5, #16
 800a232:	d1e5      	bne.n	800a200 <arm_cmplx_mag_f32+0xd0>
 800a234:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800a238:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800a23c:	f012 0503 	ands.w	r5, r2, #3
 800a240:	d026      	beq.n	800a290 <arm_cmplx_mag_f32+0x160>
 800a242:	2600      	movs	r6, #0
 800a244:	f100 0408 	add.w	r4, r0, #8
 800a248:	e00c      	b.n	800a264 <arm_cmplx_mag_f32+0x134>
 800a24a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800a24e:	eeb4 0a40 	vcmp.f32	s0, s0
 800a252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a256:	d12e      	bne.n	800a2b6 <arm_cmplx_mag_f32+0x186>
 800a258:	3d01      	subs	r5, #1
 800a25a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800a25e:	f104 0408 	add.w	r4, r4, #8
 800a262:	d015      	beq.n	800a290 <arm_cmplx_mag_f32+0x160>
 800a264:	ed54 7a02 	vldr	s15, [r4, #-8]
 800a268:	ed14 0a01 	vldr	s0, [r4, #-4]
 800a26c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a270:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a274:	3104      	adds	r1, #4
 800a276:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a27a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a282:	dae2      	bge.n	800a24a <arm_cmplx_mag_f32+0x11a>
 800a284:	3d01      	subs	r5, #1
 800a286:	f841 6c04 	str.w	r6, [r1, #-4]
 800a28a:	f104 0408 	add.w	r4, r4, #8
 800a28e:	d1e9      	bne.n	800a264 <arm_cmplx_mag_f32+0x134>
 800a290:	b004      	add	sp, #16
 800a292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a296:	f845 7c08 	str.w	r7, [r5, #-8]
 800a29a:	e793      	b.n	800a1c4 <arm_cmplx_mag_f32+0x94>
 800a29c:	f845 7c0c 	str.w	r7, [r5, #-12]
 800a2a0:	e777      	b.n	800a192 <arm_cmplx_mag_f32+0x62>
 800a2a2:	eeb0 0a67 	vmov.f32	s0, s15
 800a2a6:	9203      	str	r2, [sp, #12]
 800a2a8:	9102      	str	r1, [sp, #8]
 800a2aa:	9001      	str	r0, [sp, #4]
 800a2ac:	f004 fc62 	bl	800eb74 <sqrtf>
 800a2b0:	a801      	add	r0, sp, #4
 800a2b2:	c807      	ldmia	r0, {r0, r1, r2}
 800a2b4:	e751      	b.n	800a15a <arm_cmplx_mag_f32+0x2a>
 800a2b6:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ba:	9101      	str	r1, [sp, #4]
 800a2bc:	f004 fc5a 	bl	800eb74 <sqrtf>
 800a2c0:	9901      	ldr	r1, [sp, #4]
 800a2c2:	e7c9      	b.n	800a258 <arm_cmplx_mag_f32+0x128>
 800a2c4:	eeb0 0a67 	vmov.f32	s0, s15
 800a2c8:	9203      	str	r2, [sp, #12]
 800a2ca:	9102      	str	r1, [sp, #8]
 800a2cc:	9001      	str	r0, [sp, #4]
 800a2ce:	f004 fc51 	bl	800eb74 <sqrtf>
 800a2d2:	a801      	add	r0, sp, #4
 800a2d4:	c807      	ldmia	r0, {r0, r1, r2}
 800a2d6:	e78b      	b.n	800a1f0 <arm_cmplx_mag_f32+0xc0>
 800a2d8:	eeb0 0a67 	vmov.f32	s0, s15
 800a2dc:	9203      	str	r2, [sp, #12]
 800a2de:	9102      	str	r1, [sp, #8]
 800a2e0:	9001      	str	r0, [sp, #4]
 800a2e2:	f004 fc47 	bl	800eb74 <sqrtf>
 800a2e6:	a801      	add	r0, sp, #4
 800a2e8:	c807      	ldmia	r0, {r0, r1, r2}
 800a2ea:	e769      	b.n	800a1c0 <arm_cmplx_mag_f32+0x90>
 800a2ec:	eeb0 0a67 	vmov.f32	s0, s15
 800a2f0:	9203      	str	r2, [sp, #12]
 800a2f2:	9102      	str	r1, [sp, #8]
 800a2f4:	9001      	str	r0, [sp, #4]
 800a2f6:	f004 fc3d 	bl	800eb74 <sqrtf>
 800a2fa:	a801      	add	r0, sp, #4
 800a2fc:	c807      	ldmia	r0, {r0, r1, r2}
 800a2fe:	e746      	b.n	800a18e <arm_cmplx_mag_f32+0x5e>

0800a300 <arm_radix8_butterfly_f32>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	ed2d 8b10 	vpush	{d8-d15}
 800a308:	461c      	mov	r4, r3
 800a30a:	b09d      	sub	sp, #116	; 0x74
 800a30c:	4603      	mov	r3, r0
 800a30e:	3304      	adds	r3, #4
 800a310:	ed9f bac4 	vldr	s22, [pc, #784]	; 800a624 <arm_radix8_butterfly_f32+0x324>
 800a314:	9019      	str	r0, [sp, #100]	; 0x64
 800a316:	921a      	str	r2, [sp, #104]	; 0x68
 800a318:	468b      	mov	fp, r1
 800a31a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a31c:	468a      	mov	sl, r1
 800a31e:	46a1      	mov	r9, r4
 800a320:	4607      	mov	r7, r0
 800a322:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800a326:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800a32a:	eb03 0508 	add.w	r5, r3, r8
 800a32e:	195c      	adds	r4, r3, r5
 800a330:	00de      	lsls	r6, r3, #3
 800a332:	191a      	adds	r2, r3, r4
 800a334:	9600      	str	r6, [sp, #0]
 800a336:	1898      	adds	r0, r3, r2
 800a338:	4619      	mov	r1, r3
 800a33a:	9e00      	ldr	r6, [sp, #0]
 800a33c:	9311      	str	r3, [sp, #68]	; 0x44
 800a33e:	4401      	add	r1, r0
 800a340:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800a344:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 800a348:	19be      	adds	r6, r7, r6
 800a34a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800a34e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800a352:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800a356:	9f00      	ldr	r7, [sp, #0]
 800a358:	011b      	lsls	r3, r3, #4
 800a35a:	eb06 0e07 	add.w	lr, r6, r7
 800a35e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a360:	9302      	str	r3, [sp, #8]
 800a362:	3204      	adds	r2, #4
 800a364:	3104      	adds	r1, #4
 800a366:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a36a:	f04f 0c00 	mov.w	ip, #0
 800a36e:	edde 7a00 	vldr	s15, [lr]
 800a372:	edd6 6a00 	vldr	s13, [r6]
 800a376:	ed95 2a00 	vldr	s4, [r5]
 800a37a:	ed17 aa01 	vldr	s20, [r7, #-4]
 800a37e:	edd4 4a00 	vldr	s9, [r4]
 800a382:	ed90 5a00 	vldr	s10, [r0]
 800a386:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a38a:	ed51 0a01 	vldr	s1, [r1, #-4]
 800a38e:	ee77 8a85 	vadd.f32	s17, s15, s10
 800a392:	ee76 3a87 	vadd.f32	s7, s13, s14
 800a396:	ee32 4a20 	vadd.f32	s8, s4, s1
 800a39a:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800a39e:	ee33 6a84 	vadd.f32	s12, s7, s8
 800a3a2:	ee73 5a28 	vadd.f32	s11, s6, s17
 800a3a6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a3aa:	ee75 6a86 	vadd.f32	s13, s11, s12
 800a3ae:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800a3b2:	ed47 6a01 	vstr	s13, [r7, #-4]
 800a3b6:	edc4 5a00 	vstr	s11, [r4]
 800a3ba:	ed92 9a00 	vldr	s18, [r2]
 800a3be:	ed95 1a01 	vldr	s2, [r5, #4]
 800a3c2:	edd6 5a01 	vldr	s11, [r6, #4]
 800a3c6:	ed91 6a00 	vldr	s12, [r1]
 800a3ca:	edd7 2a00 	vldr	s5, [r7]
 800a3ce:	edd4 1a01 	vldr	s3, [r4, #4]
 800a3d2:	edde 6a01 	vldr	s13, [lr, #4]
 800a3d6:	edd0 9a01 	vldr	s19, [r0, #4]
 800a3da:	ee72 0a60 	vsub.f32	s1, s4, s1
 800a3de:	ee71 aa46 	vsub.f32	s21, s2, s12
 800a3e2:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800a3e6:	ee37 0a60 	vsub.f32	s0, s14, s1
 800a3ea:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800a3ee:	ee37 7a20 	vadd.f32	s14, s14, s1
 800a3f2:	ee32 2a6a 	vsub.f32	s4, s4, s21
 800a3f6:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800a3fa:	ee75 5a89 	vadd.f32	s11, s11, s18
 800a3fe:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800a402:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800a406:	ee31 6a06 	vadd.f32	s12, s2, s12
 800a40a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800a40e:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800a412:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800a416:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800a41a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800a41e:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800a422:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800a426:	ee33 3a68 	vsub.f32	s6, s6, s17
 800a42a:	ee36 0a88 	vadd.f32	s0, s13, s16
 800a42e:	ee75 8a86 	vadd.f32	s17, s11, s12
 800a432:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800a436:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800a43a:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800a43e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800a442:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800a446:	ee75 4a27 	vadd.f32	s9, s10, s15
 800a44a:	ee71 5a49 	vsub.f32	s11, s2, s18
 800a44e:	ee31 2a09 	vadd.f32	s4, s2, s18
 800a452:	ee75 7a67 	vsub.f32	s15, s10, s15
 800a456:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800a45a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800a45e:	ee73 0a06 	vadd.f32	s1, s6, s12
 800a462:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800a466:	ee36 5a87 	vadd.f32	s10, s13, s14
 800a46a:	ee32 8a28 	vadd.f32	s16, s4, s17
 800a46e:	ee33 6a46 	vsub.f32	s12, s6, s12
 800a472:	ee34 4a25 	vadd.f32	s8, s8, s11
 800a476:	ee33 3a80 	vadd.f32	s6, s7, s0
 800a47a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a47e:	ee71 5a64 	vsub.f32	s11, s2, s9
 800a482:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800a486:	ee32 2a68 	vsub.f32	s4, s4, s17
 800a48a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800a48e:	ee74 4a81 	vadd.f32	s9, s9, s2
 800a492:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800a496:	44dc      	add	ip, fp
 800a498:	45e2      	cmp	sl, ip
 800a49a:	ed87 8a00 	vstr	s16, [r7]
 800a49e:	ed84 2a01 	vstr	s4, [r4, #4]
 800a4a2:	441f      	add	r7, r3
 800a4a4:	edce 0a00 	vstr	s1, [lr]
 800a4a8:	441c      	add	r4, r3
 800a4aa:	ed80 6a00 	vstr	s12, [r0]
 800a4ae:	edce 1a01 	vstr	s3, [lr, #4]
 800a4b2:	ed80 4a01 	vstr	s8, [r0, #4]
 800a4b6:	449e      	add	lr, r3
 800a4b8:	ed86 3a00 	vstr	s6, [r6]
 800a4bc:	4418      	add	r0, r3
 800a4be:	ed41 3a01 	vstr	s7, [r1, #-4]
 800a4c2:	ed02 5a01 	vstr	s10, [r2, #-4]
 800a4c6:	ed85 7a00 	vstr	s14, [r5]
 800a4ca:	edc6 5a01 	vstr	s11, [r6, #4]
 800a4ce:	edc1 4a00 	vstr	s9, [r1]
 800a4d2:	441e      	add	r6, r3
 800a4d4:	edc2 6a00 	vstr	s13, [r2]
 800a4d8:	4419      	add	r1, r3
 800a4da:	edc5 7a01 	vstr	s15, [r5, #4]
 800a4de:	441a      	add	r2, r3
 800a4e0:	441d      	add	r5, r3
 800a4e2:	f63f af44 	bhi.w	800a36e <arm_radix8_butterfly_f32+0x6e>
 800a4e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a4e8:	2a07      	cmp	r2, #7
 800a4ea:	f240 81f5 	bls.w	800a8d8 <arm_radix8_butterfly_f32+0x5d8>
 800a4ee:	f108 0101 	add.w	r1, r8, #1
 800a4f2:	188f      	adds	r7, r1, r2
 800a4f4:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 800a4f8:	19d6      	adds	r6, r2, r7
 800a4fa:	eb08 0c09 	add.w	ip, r8, r9
 800a4fe:	1994      	adds	r4, r2, r6
 800a500:	eb0c 0e09 	add.w	lr, ip, r9
 800a504:	4610      	mov	r0, r2
 800a506:	9701      	str	r7, [sp, #4]
 800a508:	4420      	add	r0, r4
 800a50a:	eb0e 0709 	add.w	r7, lr, r9
 800a50e:	1815      	adds	r5, r2, r0
 800a510:	eb07 0209 	add.w	r2, r7, r9
 800a514:	9203      	str	r2, [sp, #12]
 800a516:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a518:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a51c:	9117      	str	r1, [sp, #92]	; 0x5c
 800a51e:	440a      	add	r2, r1
 800a520:	9900      	ldr	r1, [sp, #0]
 800a522:	3108      	adds	r1, #8
 800a524:	9100      	str	r1, [sp, #0]
 800a526:	9902      	ldr	r1, [sp, #8]
 800a528:	3108      	adds	r1, #8
 800a52a:	9102      	str	r1, [sp, #8]
 800a52c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a52e:	00ff      	lsls	r7, r7, #3
 800a530:	9715      	str	r7, [sp, #84]	; 0x54
 800a532:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800a536:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a53a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800a53e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800a540:	9903      	ldr	r1, [sp, #12]
 800a542:	19d7      	adds	r7, r2, r7
 800a544:	00c9      	lsls	r1, r1, #3
 800a546:	9114      	str	r1, [sp, #80]	; 0x50
 800a548:	9710      	str	r7, [sp, #64]	; 0x40
 800a54a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a54c:	9f00      	ldr	r7, [sp, #0]
 800a54e:	19cf      	adds	r7, r1, r7
 800a550:	970d      	str	r7, [sp, #52]	; 0x34
 800a552:	9f02      	ldr	r7, [sp, #8]
 800a554:	19cf      	adds	r7, r1, r7
 800a556:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800a55a:	970c      	str	r7, [sp, #48]	; 0x30
 800a55c:	9f01      	ldr	r7, [sp, #4]
 800a55e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800a562:	3504      	adds	r5, #4
 800a564:	3004      	adds	r0, #4
 800a566:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800a56a:	9508      	str	r5, [sp, #32]
 800a56c:	9009      	str	r0, [sp, #36]	; 0x24
 800a56e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800a570:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a572:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800a576:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800a57a:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800a57e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800a580:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800a584:	1945      	adds	r5, r0, r5
 800a586:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800a58a:	460f      	mov	r7, r1
 800a58c:	3404      	adds	r4, #4
 800a58e:	4641      	mov	r1, r8
 800a590:	1841      	adds	r1, r0, r1
 800a592:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800a596:	940a      	str	r4, [sp, #40]	; 0x28
 800a598:	eb00 0c06 	add.w	ip, r0, r6
 800a59c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a5a0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a5a2:	9506      	str	r5, [sp, #24]
 800a5a4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800a5a6:	9105      	str	r1, [sp, #20]
 800a5a8:	4639      	mov	r1, r7
 800a5aa:	1905      	adds	r5, r0, r4
 800a5ac:	3108      	adds	r1, #8
 800a5ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a5b0:	9507      	str	r5, [sp, #28]
 800a5b2:	910f      	str	r1, [sp, #60]	; 0x3c
 800a5b4:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800a5b8:	2101      	movs	r1, #1
 800a5ba:	eb00 0e06 	add.w	lr, r0, r6
 800a5be:	9518      	str	r5, [sp, #96]	; 0x60
 800a5c0:	9404      	str	r4, [sp, #16]
 800a5c2:	9103      	str	r1, [sp, #12]
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	4689      	mov	r9, r1
 800a5c8:	9e06      	ldr	r6, [sp, #24]
 800a5ca:	ed90 fa00 	vldr	s30, [r0]
 800a5ce:	edd6 7a01 	vldr	s15, [r6, #4]
 800a5d2:	edd0 ba01 	vldr	s23, [r0, #4]
 800a5d6:	edcd 7a00 	vstr	s15, [sp]
 800a5da:	a80d      	add	r0, sp, #52	; 0x34
 800a5dc:	edde 7a01 	vldr	s15, [lr, #4]
 800a5e0:	9c05      	ldr	r4, [sp, #20]
 800a5e2:	9d07      	ldr	r5, [sp, #28]
 800a5e4:	edd2 fa00 	vldr	s31, [r2]
 800a5e8:	ed92 ca01 	vldr	s24, [r2, #4]
 800a5ec:	edcd 7a01 	vstr	s15, [sp, #4]
 800a5f0:	c807      	ldmia	r0, {r0, r1, r2}
 800a5f2:	eddc 7a01 	vldr	s15, [ip, #4]
 800a5f6:	edd4 ea00 	vldr	s29, [r4]
 800a5fa:	ed95 ea00 	vldr	s28, [r5]
 800a5fe:	edd6 da00 	vldr	s27, [r6]
 800a602:	edd4 aa01 	vldr	s21, [r4, #4]
 800a606:	ed95 aa01 	vldr	s20, [r5, #4]
 800a60a:	ed9e da00 	vldr	s26, [lr]
 800a60e:	eddc ca00 	vldr	s25, [ip]
 800a612:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a616:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a618:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a61a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a61c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a61e:	edcd 7a02 	vstr	s15, [sp, #8]
 800a622:	e001      	b.n	800a628 <arm_radix8_butterfly_f32+0x328>
 800a624:	3f3504f3 	.word	0x3f3504f3
 800a628:	ed16 6a01 	vldr	s12, [r6, #-4]
 800a62c:	ed91 5a00 	vldr	s10, [r1]
 800a630:	ed57 9a01 	vldr	s19, [r7, #-4]
 800a634:	edd5 7a00 	vldr	s15, [r5]
 800a638:	ed18 7a01 	vldr	s14, [r8, #-4]
 800a63c:	edd2 3a00 	vldr	s7, [r2]
 800a640:	ed94 3a00 	vldr	s6, [r4]
 800a644:	ed90 2a00 	vldr	s4, [r0]
 800a648:	ed92 0a01 	vldr	s0, [r2, #4]
 800a64c:	ee33 8a85 	vadd.f32	s16, s7, s10
 800a650:	ee32 1a06 	vadd.f32	s2, s4, s12
 800a654:	ee33 4a29 	vadd.f32	s8, s6, s19
 800a658:	ee77 4a87 	vadd.f32	s9, s15, s14
 800a65c:	ee78 1a04 	vadd.f32	s3, s16, s8
 800a660:	ee71 6a24 	vadd.f32	s13, s2, s9
 800a664:	ee32 2a46 	vsub.f32	s4, s4, s12
 800a668:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800a66c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a670:	ed82 6a00 	vstr	s12, [r2]
 800a674:	edd5 8a01 	vldr	s17, [r5, #4]
 800a678:	ed90 9a01 	vldr	s18, [r0, #4]
 800a67c:	edd6 2a00 	vldr	s5, [r6]
 800a680:	ed98 7a00 	vldr	s14, [r8]
 800a684:	edd4 0a01 	vldr	s1, [r4, #4]
 800a688:	ed91 6a01 	vldr	s12, [r1, #4]
 800a68c:	edd7 5a00 	vldr	s11, [r7]
 800a690:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800a694:	ee33 3a69 	vsub.f32	s6, s6, s19
 800a698:	ee39 5a62 	vsub.f32	s10, s18, s5
 800a69c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800a6a0:	ee38 4a44 	vsub.f32	s8, s16, s8
 800a6a4:	ee38 7a87 	vadd.f32	s14, s17, s14
 800a6a8:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800a6ac:	ee79 2a22 	vadd.f32	s5, s18, s5
 800a6b0:	ee75 8a69 	vsub.f32	s17, s10, s19
 800a6b4:	ee32 9a27 	vadd.f32	s18, s4, s15
 800a6b8:	ee35 5a29 	vadd.f32	s10, s10, s19
 800a6bc:	ee72 7a67 	vsub.f32	s15, s4, s15
 800a6c0:	ee30 2a06 	vadd.f32	s4, s0, s12
 800a6c4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800a6c8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800a6cc:	ee32 9a08 	vadd.f32	s18, s4, s16
 800a6d0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800a6d4:	ee32 2a48 	vsub.f32	s4, s4, s16
 800a6d8:	ee71 4a64 	vsub.f32	s9, s2, s9
 800a6dc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800a6e0:	ee32 1a87 	vadd.f32	s2, s5, s14
 800a6e4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800a6e8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800a6ec:	ee30 6a46 	vsub.f32	s12, s0, s12
 800a6f0:	ee73 0a29 	vadd.f32	s1, s6, s19
 800a6f4:	ee36 0a28 	vadd.f32	s0, s12, s17
 800a6f8:	ee33 3a69 	vsub.f32	s6, s6, s19
 800a6fc:	ee32 7a64 	vsub.f32	s14, s4, s9
 800a700:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800a704:	ee36 6a68 	vsub.f32	s12, s12, s17
 800a708:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800a70c:	ee75 8a85 	vadd.f32	s17, s11, s10
 800a710:	ee74 3a22 	vadd.f32	s7, s8, s5
 800a714:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800a718:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800a71c:	ee79 1a41 	vsub.f32	s3, s18, s2
 800a720:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800a724:	ee76 5a43 	vsub.f32	s11, s12, s6
 800a728:	ee74 2a62 	vsub.f32	s5, s8, s5
 800a72c:	ee74 4a82 	vadd.f32	s9, s9, s4
 800a730:	ee30 4a60 	vsub.f32	s8, s0, s1
 800a734:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800a738:	ee30 0a80 	vadd.f32	s0, s1, s0
 800a73c:	ee77 9a85 	vadd.f32	s19, s15, s10
 800a740:	ee33 6a06 	vadd.f32	s12, s6, s12
 800a744:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a748:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800a74c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800a750:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800a754:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800a758:	ee39 1a01 	vadd.f32	s2, s18, s2
 800a75c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800a760:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800a764:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800a768:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800a76c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800a770:	ee35 3a03 	vadd.f32	s6, s10, s6
 800a774:	ee72 6a66 	vsub.f32	s13, s4, s13
 800a778:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800a77c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800a780:	ed9d 4a02 	vldr	s8, [sp, #8]
 800a784:	ed82 1a01 	vstr	s2, [r2, #4]
 800a788:	ee77 3a63 	vsub.f32	s7, s14, s7
 800a78c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800a790:	ed9d 7a01 	vldr	s14, [sp, #4]
 800a794:	ed81 3a00 	vstr	s6, [r1]
 800a798:	ee30 9a89 	vadd.f32	s18, s1, s18
 800a79c:	ee32 2a05 	vadd.f32	s4, s4, s10
 800a7a0:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800a7a4:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800a7a8:	ee67 2a22 	vmul.f32	s5, s14, s5
 800a7ac:	ee64 1a00 	vmul.f32	s3, s8, s0
 800a7b0:	ee27 7a24 	vmul.f32	s14, s14, s9
 800a7b4:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800a7b8:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800a7bc:	ee64 8a28 	vmul.f32	s17, s8, s17
 800a7c0:	ed9d 4a00 	vldr	s8, [sp]
 800a7c4:	edc1 6a01 	vstr	s13, [r1, #4]
 800a7c8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800a7cc:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800a7d0:	ee64 9a29 	vmul.f32	s19, s8, s19
 800a7d4:	ee24 4a25 	vmul.f32	s8, s8, s11
 800a7d8:	ee30 7a87 	vadd.f32	s14, s1, s14
 800a7dc:	ee74 4a84 	vadd.f32	s9, s9, s8
 800a7e0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800a7e4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800a7e8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800a7ec:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800a7f0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800a7f4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800a7f8:	ee75 1a21 	vadd.f32	s3, s10, s3
 800a7fc:	ee30 0a68 	vsub.f32	s0, s0, s17
 800a800:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800a804:	ee70 0a84 	vadd.f32	s1, s1, s8
 800a808:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a80c:	44d9      	add	r9, fp
 800a80e:	45ca      	cmp	sl, r9
 800a810:	ed84 9a00 	vstr	s18, [r4]
 800a814:	edc4 3a01 	vstr	s7, [r4, #4]
 800a818:	441a      	add	r2, r3
 800a81a:	ed07 7a01 	vstr	s14, [r7, #-4]
 800a81e:	edc7 2a00 	vstr	s5, [r7]
 800a822:	4419      	add	r1, r3
 800a824:	ed80 2a00 	vstr	s4, [r0]
 800a828:	ed80 8a01 	vstr	s16, [r0, #4]
 800a82c:	441c      	add	r4, r3
 800a82e:	ed48 1a01 	vstr	s3, [r8, #-4]
 800a832:	ed88 0a00 	vstr	s0, [r8]
 800a836:	441f      	add	r7, r3
 800a838:	ed46 4a01 	vstr	s9, [r6, #-4]
 800a83c:	4418      	add	r0, r3
 800a83e:	edc6 9a00 	vstr	s19, [r6]
 800a842:	4498      	add	r8, r3
 800a844:	edc5 0a00 	vstr	s1, [r5]
 800a848:	ed85 6a01 	vstr	s12, [r5, #4]
 800a84c:	441e      	add	r6, r3
 800a84e:	441d      	add	r5, r3
 800a850:	f63f aeea 	bhi.w	800a628 <arm_radix8_butterfly_f32+0x328>
 800a854:	9a03      	ldr	r2, [sp, #12]
 800a856:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a858:	3201      	adds	r2, #1
 800a85a:	4611      	mov	r1, r2
 800a85c:	9203      	str	r2, [sp, #12]
 800a85e:	9a04      	ldr	r2, [sp, #16]
 800a860:	4402      	add	r2, r0
 800a862:	9204      	str	r2, [sp, #16]
 800a864:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800a866:	9a05      	ldr	r2, [sp, #20]
 800a868:	4402      	add	r2, r0
 800a86a:	9205      	str	r2, [sp, #20]
 800a86c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800a86e:	9a07      	ldr	r2, [sp, #28]
 800a870:	4402      	add	r2, r0
 800a872:	9207      	str	r2, [sp, #28]
 800a874:	9816      	ldr	r0, [sp, #88]	; 0x58
 800a876:	9a06      	ldr	r2, [sp, #24]
 800a878:	4402      	add	r2, r0
 800a87a:	9206      	str	r2, [sp, #24]
 800a87c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a87e:	4496      	add	lr, r2
 800a880:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a882:	4494      	add	ip, r2
 800a884:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a886:	3208      	adds	r2, #8
 800a888:	920f      	str	r2, [sp, #60]	; 0x3c
 800a88a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a88c:	3208      	adds	r2, #8
 800a88e:	920e      	str	r2, [sp, #56]	; 0x38
 800a890:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a892:	3208      	adds	r2, #8
 800a894:	920d      	str	r2, [sp, #52]	; 0x34
 800a896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a898:	3208      	adds	r2, #8
 800a89a:	920c      	str	r2, [sp, #48]	; 0x30
 800a89c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a89e:	3208      	adds	r2, #8
 800a8a0:	920b      	str	r2, [sp, #44]	; 0x2c
 800a8a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8a4:	3208      	adds	r2, #8
 800a8a6:	920a      	str	r2, [sp, #40]	; 0x28
 800a8a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8aa:	3208      	adds	r2, #8
 800a8ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a8ae:	9a08      	ldr	r2, [sp, #32]
 800a8b0:	3208      	adds	r2, #8
 800a8b2:	9208      	str	r2, [sp, #32]
 800a8b4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800a8b6:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a8b8:	4288      	cmp	r0, r1
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	d007      	beq.n	800a8ce <arm_radix8_butterfly_f32+0x5ce>
 800a8be:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a8c0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4401      	add	r1, r0
 800a8c8:	9110      	str	r1, [sp, #64]	; 0x40
 800a8ca:	9804      	ldr	r0, [sp, #16]
 800a8cc:	e67c      	b.n	800a5c8 <arm_radix8_butterfly_f32+0x2c8>
 800a8ce:	4683      	mov	fp, r0
 800a8d0:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 800a8d4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800a8d6:	e524      	b.n	800a322 <arm_radix8_butterfly_f32+0x22>
 800a8d8:	b01d      	add	sp, #116	; 0x74
 800a8da:	ecbd 8b10 	vpop	{d8-d15}
 800a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e2:	bf00      	nop

0800a8e4 <ctime>:
 800a8e4:	b508      	push	{r3, lr}
 800a8e6:	f000 f831 	bl	800a94c <localtime>
 800a8ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a8ee:	f001 b973 	b.w	800bbd8 <asctime>

0800a8f2 <difftime>:
 800a8f2:	1a80      	subs	r0, r0, r2
 800a8f4:	b508      	push	{r3, lr}
 800a8f6:	eb61 0103 	sbc.w	r1, r1, r3
 800a8fa:	f7f5 fec9 	bl	8000690 <__aeabi_l2d>
 800a8fe:	ec41 0b10 	vmov	d0, r0, r1
 800a902:	bd08      	pop	{r3, pc}

0800a904 <__libc_init_array>:
 800a904:	b570      	push	{r4, r5, r6, lr}
 800a906:	4d0d      	ldr	r5, [pc, #52]	; (800a93c <__libc_init_array+0x38>)
 800a908:	4c0d      	ldr	r4, [pc, #52]	; (800a940 <__libc_init_array+0x3c>)
 800a90a:	1b64      	subs	r4, r4, r5
 800a90c:	10a4      	asrs	r4, r4, #2
 800a90e:	2600      	movs	r6, #0
 800a910:	42a6      	cmp	r6, r4
 800a912:	d109      	bne.n	800a928 <__libc_init_array+0x24>
 800a914:	4d0b      	ldr	r5, [pc, #44]	; (800a944 <__libc_init_array+0x40>)
 800a916:	4c0c      	ldr	r4, [pc, #48]	; (800a948 <__libc_init_array+0x44>)
 800a918:	f004 f9a6 	bl	800ec68 <_init>
 800a91c:	1b64      	subs	r4, r4, r5
 800a91e:	10a4      	asrs	r4, r4, #2
 800a920:	2600      	movs	r6, #0
 800a922:	42a6      	cmp	r6, r4
 800a924:	d105      	bne.n	800a932 <__libc_init_array+0x2e>
 800a926:	bd70      	pop	{r4, r5, r6, pc}
 800a928:	f855 3b04 	ldr.w	r3, [r5], #4
 800a92c:	4798      	blx	r3
 800a92e:	3601      	adds	r6, #1
 800a930:	e7ee      	b.n	800a910 <__libc_init_array+0xc>
 800a932:	f855 3b04 	ldr.w	r3, [r5], #4
 800a936:	4798      	blx	r3
 800a938:	3601      	adds	r6, #1
 800a93a:	e7f2      	b.n	800a922 <__libc_init_array+0x1e>
 800a93c:	0802734c 	.word	0x0802734c
 800a940:	0802734c 	.word	0x0802734c
 800a944:	0802734c 	.word	0x0802734c
 800a948:	08027350 	.word	0x08027350

0800a94c <localtime>:
 800a94c:	b538      	push	{r3, r4, r5, lr}
 800a94e:	4b0b      	ldr	r3, [pc, #44]	; (800a97c <localtime+0x30>)
 800a950:	681d      	ldr	r5, [r3, #0]
 800a952:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800a954:	4604      	mov	r4, r0
 800a956:	b953      	cbnz	r3, 800a96e <localtime+0x22>
 800a958:	2024      	movs	r0, #36	; 0x24
 800a95a:	f000 f909 	bl	800ab70 <malloc>
 800a95e:	4602      	mov	r2, r0
 800a960:	63e8      	str	r0, [r5, #60]	; 0x3c
 800a962:	b920      	cbnz	r0, 800a96e <localtime+0x22>
 800a964:	4b06      	ldr	r3, [pc, #24]	; (800a980 <localtime+0x34>)
 800a966:	4807      	ldr	r0, [pc, #28]	; (800a984 <localtime+0x38>)
 800a968:	2132      	movs	r1, #50	; 0x32
 800a96a:	f001 f97d 	bl	800bc68 <__assert_func>
 800a96e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800a970:	4620      	mov	r0, r4
 800a972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a976:	f000 b807 	b.w	800a988 <localtime_r>
 800a97a:	bf00      	nop
 800a97c:	200000cc 	.word	0x200000cc
 800a980:	08026da8 	.word	0x08026da8
 800a984:	08026dbf 	.word	0x08026dbf

0800a988 <localtime_r>:
 800a988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a98c:	4680      	mov	r8, r0
 800a98e:	9101      	str	r1, [sp, #4]
 800a990:	f002 f962 	bl	800cc58 <__gettzinfo>
 800a994:	9901      	ldr	r1, [sp, #4]
 800a996:	4605      	mov	r5, r0
 800a998:	4640      	mov	r0, r8
 800a99a:	f002 f961 	bl	800cc60 <gmtime_r>
 800a99e:	6943      	ldr	r3, [r0, #20]
 800a9a0:	0799      	lsls	r1, r3, #30
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800a9a8:	d105      	bne.n	800a9b6 <localtime_r+0x2e>
 800a9aa:	2264      	movs	r2, #100	; 0x64
 800a9ac:	fb97 f3f2 	sdiv	r3, r7, r2
 800a9b0:	fb02 7313 	mls	r3, r2, r3, r7
 800a9b4:	bb73      	cbnz	r3, 800aa14 <localtime_r+0x8c>
 800a9b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800a9ba:	fb97 f6f3 	sdiv	r6, r7, r3
 800a9be:	fb03 7616 	mls	r6, r3, r6, r7
 800a9c2:	fab6 f386 	clz	r3, r6
 800a9c6:	095b      	lsrs	r3, r3, #5
 800a9c8:	4e67      	ldr	r6, [pc, #412]	; (800ab68 <localtime_r+0x1e0>)
 800a9ca:	2230      	movs	r2, #48	; 0x30
 800a9cc:	fb02 6603 	mla	r6, r2, r3, r6
 800a9d0:	f000 ff70 	bl	800b8b4 <__tz_lock>
 800a9d4:	f000 ff7a 	bl	800b8cc <_tzset_unlocked>
 800a9d8:	4b64      	ldr	r3, [pc, #400]	; (800ab6c <localtime_r+0x1e4>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	b34b      	cbz	r3, 800aa32 <localtime_r+0xaa>
 800a9de:	686b      	ldr	r3, [r5, #4]
 800a9e0:	42bb      	cmp	r3, r7
 800a9e2:	d119      	bne.n	800aa18 <localtime_r+0x90>
 800a9e4:	682f      	ldr	r7, [r5, #0]
 800a9e6:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a9ea:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800a9ee:	b9df      	cbnz	r7, 800aa28 <localtime_r+0xa0>
 800a9f0:	4282      	cmp	r2, r0
 800a9f2:	eb73 0101 	sbcs.w	r1, r3, r1
 800a9f6:	da23      	bge.n	800aa40 <localtime_r+0xb8>
 800a9f8:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800a9fc:	4282      	cmp	r2, r0
 800a9fe:	eb73 0701 	sbcs.w	r7, r3, r1
 800aa02:	bfb4      	ite	lt
 800aa04:	2701      	movlt	r7, #1
 800aa06:	2700      	movge	r7, #0
 800aa08:	4282      	cmp	r2, r0
 800aa0a:	418b      	sbcs	r3, r1
 800aa0c:	6227      	str	r7, [r4, #32]
 800aa0e:	db19      	blt.n	800aa44 <localtime_r+0xbc>
 800aa10:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800aa12:	e018      	b.n	800aa46 <localtime_r+0xbe>
 800aa14:	2301      	movs	r3, #1
 800aa16:	e7d7      	b.n	800a9c8 <localtime_r+0x40>
 800aa18:	4638      	mov	r0, r7
 800aa1a:	f000 fea1 	bl	800b760 <__tzcalc_limits>
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d1e0      	bne.n	800a9e4 <localtime_r+0x5c>
 800aa22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa26:	e004      	b.n	800aa32 <localtime_r+0xaa>
 800aa28:	4282      	cmp	r2, r0
 800aa2a:	eb73 0101 	sbcs.w	r1, r3, r1
 800aa2e:	da02      	bge.n	800aa36 <localtime_r+0xae>
 800aa30:	2300      	movs	r3, #0
 800aa32:	6223      	str	r3, [r4, #32]
 800aa34:	e7ec      	b.n	800aa10 <localtime_r+0x88>
 800aa36:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800aa3a:	4282      	cmp	r2, r0
 800aa3c:	418b      	sbcs	r3, r1
 800aa3e:	daf7      	bge.n	800aa30 <localtime_r+0xa8>
 800aa40:	2301      	movs	r3, #1
 800aa42:	6223      	str	r3, [r4, #32]
 800aa44:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800aa46:	6861      	ldr	r1, [r4, #4]
 800aa48:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800aa4c:	203c      	movs	r0, #60	; 0x3c
 800aa4e:	fb93 f5f2 	sdiv	r5, r3, r2
 800aa52:	fb02 3315 	mls	r3, r2, r5, r3
 800aa56:	fb93 f2f0 	sdiv	r2, r3, r0
 800aa5a:	fb00 3012 	mls	r0, r0, r2, r3
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	1a89      	subs	r1, r1, r2
 800aa62:	68a2      	ldr	r2, [r4, #8]
 800aa64:	6061      	str	r1, [r4, #4]
 800aa66:	1a1b      	subs	r3, r3, r0
 800aa68:	1b52      	subs	r2, r2, r5
 800aa6a:	2b3b      	cmp	r3, #59	; 0x3b
 800aa6c:	6023      	str	r3, [r4, #0]
 800aa6e:	60a2      	str	r2, [r4, #8]
 800aa70:	dd35      	ble.n	800aade <localtime_r+0x156>
 800aa72:	3101      	adds	r1, #1
 800aa74:	6061      	str	r1, [r4, #4]
 800aa76:	3b3c      	subs	r3, #60	; 0x3c
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	6863      	ldr	r3, [r4, #4]
 800aa7c:	2b3b      	cmp	r3, #59	; 0x3b
 800aa7e:	dd34      	ble.n	800aaea <localtime_r+0x162>
 800aa80:	3201      	adds	r2, #1
 800aa82:	60a2      	str	r2, [r4, #8]
 800aa84:	3b3c      	subs	r3, #60	; 0x3c
 800aa86:	6063      	str	r3, [r4, #4]
 800aa88:	68a3      	ldr	r3, [r4, #8]
 800aa8a:	2b17      	cmp	r3, #23
 800aa8c:	dd33      	ble.n	800aaf6 <localtime_r+0x16e>
 800aa8e:	69e2      	ldr	r2, [r4, #28]
 800aa90:	3201      	adds	r2, #1
 800aa92:	61e2      	str	r2, [r4, #28]
 800aa94:	69a2      	ldr	r2, [r4, #24]
 800aa96:	3201      	adds	r2, #1
 800aa98:	2a06      	cmp	r2, #6
 800aa9a:	bfc8      	it	gt
 800aa9c:	2200      	movgt	r2, #0
 800aa9e:	61a2      	str	r2, [r4, #24]
 800aaa0:	68e2      	ldr	r2, [r4, #12]
 800aaa2:	3b18      	subs	r3, #24
 800aaa4:	3201      	adds	r2, #1
 800aaa6:	60a3      	str	r3, [r4, #8]
 800aaa8:	6923      	ldr	r3, [r4, #16]
 800aaaa:	60e2      	str	r2, [r4, #12]
 800aaac:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 800aab0:	428a      	cmp	r2, r1
 800aab2:	dd0e      	ble.n	800aad2 <localtime_r+0x14a>
 800aab4:	2b0b      	cmp	r3, #11
 800aab6:	eba2 0201 	sub.w	r2, r2, r1
 800aaba:	60e2      	str	r2, [r4, #12]
 800aabc:	f103 0201 	add.w	r2, r3, #1
 800aac0:	bf09      	itett	eq
 800aac2:	6963      	ldreq	r3, [r4, #20]
 800aac4:	6122      	strne	r2, [r4, #16]
 800aac6:	2200      	moveq	r2, #0
 800aac8:	3301      	addeq	r3, #1
 800aaca:	bf02      	ittt	eq
 800aacc:	6122      	streq	r2, [r4, #16]
 800aace:	6163      	streq	r3, [r4, #20]
 800aad0:	61e2      	streq	r2, [r4, #28]
 800aad2:	f000 fef5 	bl	800b8c0 <__tz_unlock>
 800aad6:	4620      	mov	r0, r4
 800aad8:	b002      	add	sp, #8
 800aada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aade:	2b00      	cmp	r3, #0
 800aae0:	dacb      	bge.n	800aa7a <localtime_r+0xf2>
 800aae2:	3901      	subs	r1, #1
 800aae4:	6061      	str	r1, [r4, #4]
 800aae6:	333c      	adds	r3, #60	; 0x3c
 800aae8:	e7c6      	b.n	800aa78 <localtime_r+0xf0>
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dacc      	bge.n	800aa88 <localtime_r+0x100>
 800aaee:	3a01      	subs	r2, #1
 800aaf0:	60a2      	str	r2, [r4, #8]
 800aaf2:	333c      	adds	r3, #60	; 0x3c
 800aaf4:	e7c7      	b.n	800aa86 <localtime_r+0xfe>
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	daeb      	bge.n	800aad2 <localtime_r+0x14a>
 800aafa:	69e2      	ldr	r2, [r4, #28]
 800aafc:	3a01      	subs	r2, #1
 800aafe:	61e2      	str	r2, [r4, #28]
 800ab00:	69a2      	ldr	r2, [r4, #24]
 800ab02:	3a01      	subs	r2, #1
 800ab04:	bf48      	it	mi
 800ab06:	2206      	movmi	r2, #6
 800ab08:	61a2      	str	r2, [r4, #24]
 800ab0a:	68e2      	ldr	r2, [r4, #12]
 800ab0c:	3318      	adds	r3, #24
 800ab0e:	3a01      	subs	r2, #1
 800ab10:	60e2      	str	r2, [r4, #12]
 800ab12:	60a3      	str	r3, [r4, #8]
 800ab14:	2a00      	cmp	r2, #0
 800ab16:	d1dc      	bne.n	800aad2 <localtime_r+0x14a>
 800ab18:	6923      	ldr	r3, [r4, #16]
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	d405      	bmi.n	800ab2a <localtime_r+0x1a2>
 800ab1e:	6123      	str	r3, [r4, #16]
 800ab20:	6923      	ldr	r3, [r4, #16]
 800ab22:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800ab26:	60e3      	str	r3, [r4, #12]
 800ab28:	e7d3      	b.n	800aad2 <localtime_r+0x14a>
 800ab2a:	230b      	movs	r3, #11
 800ab2c:	6123      	str	r3, [r4, #16]
 800ab2e:	6963      	ldr	r3, [r4, #20]
 800ab30:	1e5a      	subs	r2, r3, #1
 800ab32:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800ab36:	6162      	str	r2, [r4, #20]
 800ab38:	079a      	lsls	r2, r3, #30
 800ab3a:	d105      	bne.n	800ab48 <localtime_r+0x1c0>
 800ab3c:	2164      	movs	r1, #100	; 0x64
 800ab3e:	fb93 f2f1 	sdiv	r2, r3, r1
 800ab42:	fb01 3212 	mls	r2, r1, r2, r3
 800ab46:	b962      	cbnz	r2, 800ab62 <localtime_r+0x1da>
 800ab48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ab4c:	fb93 f1f2 	sdiv	r1, r3, r2
 800ab50:	fb02 3311 	mls	r3, r2, r1, r3
 800ab54:	fab3 f383 	clz	r3, r3
 800ab58:	095b      	lsrs	r3, r3, #5
 800ab5a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800ab5e:	61e3      	str	r3, [r4, #28]
 800ab60:	e7de      	b.n	800ab20 <localtime_r+0x198>
 800ab62:	2301      	movs	r3, #1
 800ab64:	e7f9      	b.n	800ab5a <localtime_r+0x1d2>
 800ab66:	bf00      	nop
 800ab68:	08026e1c 	.word	0x08026e1c
 800ab6c:	20000b84 	.word	0x20000b84

0800ab70 <malloc>:
 800ab70:	4b02      	ldr	r3, [pc, #8]	; (800ab7c <malloc+0xc>)
 800ab72:	4601      	mov	r1, r0
 800ab74:	6818      	ldr	r0, [r3, #0]
 800ab76:	f000 b87f 	b.w	800ac78 <_malloc_r>
 800ab7a:	bf00      	nop
 800ab7c:	200000cc 	.word	0x200000cc

0800ab80 <free>:
 800ab80:	4b02      	ldr	r3, [pc, #8]	; (800ab8c <free+0xc>)
 800ab82:	4601      	mov	r1, r0
 800ab84:	6818      	ldr	r0, [r3, #0]
 800ab86:	f000 b80b 	b.w	800aba0 <_free_r>
 800ab8a:	bf00      	nop
 800ab8c:	200000cc 	.word	0x200000cc

0800ab90 <memset>:
 800ab90:	4402      	add	r2, r0
 800ab92:	4603      	mov	r3, r0
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d100      	bne.n	800ab9a <memset+0xa>
 800ab98:	4770      	bx	lr
 800ab9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab9e:	e7f9      	b.n	800ab94 <memset+0x4>

0800aba0 <_free_r>:
 800aba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aba2:	2900      	cmp	r1, #0
 800aba4:	d044      	beq.n	800ac30 <_free_r+0x90>
 800aba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abaa:	9001      	str	r0, [sp, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f1a1 0404 	sub.w	r4, r1, #4
 800abb2:	bfb8      	it	lt
 800abb4:	18e4      	addlt	r4, r4, r3
 800abb6:	f002 f917 	bl	800cde8 <__malloc_lock>
 800abba:	4a1e      	ldr	r2, [pc, #120]	; (800ac34 <_free_r+0x94>)
 800abbc:	9801      	ldr	r0, [sp, #4]
 800abbe:	6813      	ldr	r3, [r2, #0]
 800abc0:	b933      	cbnz	r3, 800abd0 <_free_r+0x30>
 800abc2:	6063      	str	r3, [r4, #4]
 800abc4:	6014      	str	r4, [r2, #0]
 800abc6:	b003      	add	sp, #12
 800abc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abcc:	f002 b912 	b.w	800cdf4 <__malloc_unlock>
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d908      	bls.n	800abe6 <_free_r+0x46>
 800abd4:	6825      	ldr	r5, [r4, #0]
 800abd6:	1961      	adds	r1, r4, r5
 800abd8:	428b      	cmp	r3, r1
 800abda:	bf01      	itttt	eq
 800abdc:	6819      	ldreq	r1, [r3, #0]
 800abde:	685b      	ldreq	r3, [r3, #4]
 800abe0:	1949      	addeq	r1, r1, r5
 800abe2:	6021      	streq	r1, [r4, #0]
 800abe4:	e7ed      	b.n	800abc2 <_free_r+0x22>
 800abe6:	461a      	mov	r2, r3
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	b10b      	cbz	r3, 800abf0 <_free_r+0x50>
 800abec:	42a3      	cmp	r3, r4
 800abee:	d9fa      	bls.n	800abe6 <_free_r+0x46>
 800abf0:	6811      	ldr	r1, [r2, #0]
 800abf2:	1855      	adds	r5, r2, r1
 800abf4:	42a5      	cmp	r5, r4
 800abf6:	d10b      	bne.n	800ac10 <_free_r+0x70>
 800abf8:	6824      	ldr	r4, [r4, #0]
 800abfa:	4421      	add	r1, r4
 800abfc:	1854      	adds	r4, r2, r1
 800abfe:	42a3      	cmp	r3, r4
 800ac00:	6011      	str	r1, [r2, #0]
 800ac02:	d1e0      	bne.n	800abc6 <_free_r+0x26>
 800ac04:	681c      	ldr	r4, [r3, #0]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	6053      	str	r3, [r2, #4]
 800ac0a:	4421      	add	r1, r4
 800ac0c:	6011      	str	r1, [r2, #0]
 800ac0e:	e7da      	b.n	800abc6 <_free_r+0x26>
 800ac10:	d902      	bls.n	800ac18 <_free_r+0x78>
 800ac12:	230c      	movs	r3, #12
 800ac14:	6003      	str	r3, [r0, #0]
 800ac16:	e7d6      	b.n	800abc6 <_free_r+0x26>
 800ac18:	6825      	ldr	r5, [r4, #0]
 800ac1a:	1961      	adds	r1, r4, r5
 800ac1c:	428b      	cmp	r3, r1
 800ac1e:	bf04      	itt	eq
 800ac20:	6819      	ldreq	r1, [r3, #0]
 800ac22:	685b      	ldreq	r3, [r3, #4]
 800ac24:	6063      	str	r3, [r4, #4]
 800ac26:	bf04      	itt	eq
 800ac28:	1949      	addeq	r1, r1, r5
 800ac2a:	6021      	streq	r1, [r4, #0]
 800ac2c:	6054      	str	r4, [r2, #4]
 800ac2e:	e7ca      	b.n	800abc6 <_free_r+0x26>
 800ac30:	b003      	add	sp, #12
 800ac32:	bd30      	pop	{r4, r5, pc}
 800ac34:	20000b60 	.word	0x20000b60

0800ac38 <sbrk_aligned>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	4e0e      	ldr	r6, [pc, #56]	; (800ac74 <sbrk_aligned+0x3c>)
 800ac3c:	460c      	mov	r4, r1
 800ac3e:	6831      	ldr	r1, [r6, #0]
 800ac40:	4605      	mov	r5, r0
 800ac42:	b911      	cbnz	r1, 800ac4a <sbrk_aligned+0x12>
 800ac44:	f000 fd0e 	bl	800b664 <_sbrk_r>
 800ac48:	6030      	str	r0, [r6, #0]
 800ac4a:	4621      	mov	r1, r4
 800ac4c:	4628      	mov	r0, r5
 800ac4e:	f000 fd09 	bl	800b664 <_sbrk_r>
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	d00a      	beq.n	800ac6c <sbrk_aligned+0x34>
 800ac56:	1cc4      	adds	r4, r0, #3
 800ac58:	f024 0403 	bic.w	r4, r4, #3
 800ac5c:	42a0      	cmp	r0, r4
 800ac5e:	d007      	beq.n	800ac70 <sbrk_aligned+0x38>
 800ac60:	1a21      	subs	r1, r4, r0
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 fcfe 	bl	800b664 <_sbrk_r>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d101      	bne.n	800ac70 <sbrk_aligned+0x38>
 800ac6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ac70:	4620      	mov	r0, r4
 800ac72:	bd70      	pop	{r4, r5, r6, pc}
 800ac74:	20000b64 	.word	0x20000b64

0800ac78 <_malloc_r>:
 800ac78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac7c:	1ccd      	adds	r5, r1, #3
 800ac7e:	f025 0503 	bic.w	r5, r5, #3
 800ac82:	3508      	adds	r5, #8
 800ac84:	2d0c      	cmp	r5, #12
 800ac86:	bf38      	it	cc
 800ac88:	250c      	movcc	r5, #12
 800ac8a:	2d00      	cmp	r5, #0
 800ac8c:	4607      	mov	r7, r0
 800ac8e:	db01      	blt.n	800ac94 <_malloc_r+0x1c>
 800ac90:	42a9      	cmp	r1, r5
 800ac92:	d905      	bls.n	800aca0 <_malloc_r+0x28>
 800ac94:	230c      	movs	r3, #12
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	2600      	movs	r6, #0
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aca0:	4e2e      	ldr	r6, [pc, #184]	; (800ad5c <_malloc_r+0xe4>)
 800aca2:	f002 f8a1 	bl	800cde8 <__malloc_lock>
 800aca6:	6833      	ldr	r3, [r6, #0]
 800aca8:	461c      	mov	r4, r3
 800acaa:	bb34      	cbnz	r4, 800acfa <_malloc_r+0x82>
 800acac:	4629      	mov	r1, r5
 800acae:	4638      	mov	r0, r7
 800acb0:	f7ff ffc2 	bl	800ac38 <sbrk_aligned>
 800acb4:	1c43      	adds	r3, r0, #1
 800acb6:	4604      	mov	r4, r0
 800acb8:	d14d      	bne.n	800ad56 <_malloc_r+0xde>
 800acba:	6834      	ldr	r4, [r6, #0]
 800acbc:	4626      	mov	r6, r4
 800acbe:	2e00      	cmp	r6, #0
 800acc0:	d140      	bne.n	800ad44 <_malloc_r+0xcc>
 800acc2:	6823      	ldr	r3, [r4, #0]
 800acc4:	4631      	mov	r1, r6
 800acc6:	4638      	mov	r0, r7
 800acc8:	eb04 0803 	add.w	r8, r4, r3
 800accc:	f000 fcca 	bl	800b664 <_sbrk_r>
 800acd0:	4580      	cmp	r8, r0
 800acd2:	d13a      	bne.n	800ad4a <_malloc_r+0xd2>
 800acd4:	6821      	ldr	r1, [r4, #0]
 800acd6:	3503      	adds	r5, #3
 800acd8:	1a6d      	subs	r5, r5, r1
 800acda:	f025 0503 	bic.w	r5, r5, #3
 800acde:	3508      	adds	r5, #8
 800ace0:	2d0c      	cmp	r5, #12
 800ace2:	bf38      	it	cc
 800ace4:	250c      	movcc	r5, #12
 800ace6:	4629      	mov	r1, r5
 800ace8:	4638      	mov	r0, r7
 800acea:	f7ff ffa5 	bl	800ac38 <sbrk_aligned>
 800acee:	3001      	adds	r0, #1
 800acf0:	d02b      	beq.n	800ad4a <_malloc_r+0xd2>
 800acf2:	6823      	ldr	r3, [r4, #0]
 800acf4:	442b      	add	r3, r5
 800acf6:	6023      	str	r3, [r4, #0]
 800acf8:	e00e      	b.n	800ad18 <_malloc_r+0xa0>
 800acfa:	6822      	ldr	r2, [r4, #0]
 800acfc:	1b52      	subs	r2, r2, r5
 800acfe:	d41e      	bmi.n	800ad3e <_malloc_r+0xc6>
 800ad00:	2a0b      	cmp	r2, #11
 800ad02:	d916      	bls.n	800ad32 <_malloc_r+0xba>
 800ad04:	1961      	adds	r1, r4, r5
 800ad06:	42a3      	cmp	r3, r4
 800ad08:	6025      	str	r5, [r4, #0]
 800ad0a:	bf18      	it	ne
 800ad0c:	6059      	strne	r1, [r3, #4]
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	bf08      	it	eq
 800ad12:	6031      	streq	r1, [r6, #0]
 800ad14:	5162      	str	r2, [r4, r5]
 800ad16:	604b      	str	r3, [r1, #4]
 800ad18:	4638      	mov	r0, r7
 800ad1a:	f104 060b 	add.w	r6, r4, #11
 800ad1e:	f002 f869 	bl	800cdf4 <__malloc_unlock>
 800ad22:	f026 0607 	bic.w	r6, r6, #7
 800ad26:	1d23      	adds	r3, r4, #4
 800ad28:	1af2      	subs	r2, r6, r3
 800ad2a:	d0b6      	beq.n	800ac9a <_malloc_r+0x22>
 800ad2c:	1b9b      	subs	r3, r3, r6
 800ad2e:	50a3      	str	r3, [r4, r2]
 800ad30:	e7b3      	b.n	800ac9a <_malloc_r+0x22>
 800ad32:	6862      	ldr	r2, [r4, #4]
 800ad34:	42a3      	cmp	r3, r4
 800ad36:	bf0c      	ite	eq
 800ad38:	6032      	streq	r2, [r6, #0]
 800ad3a:	605a      	strne	r2, [r3, #4]
 800ad3c:	e7ec      	b.n	800ad18 <_malloc_r+0xa0>
 800ad3e:	4623      	mov	r3, r4
 800ad40:	6864      	ldr	r4, [r4, #4]
 800ad42:	e7b2      	b.n	800acaa <_malloc_r+0x32>
 800ad44:	4634      	mov	r4, r6
 800ad46:	6876      	ldr	r6, [r6, #4]
 800ad48:	e7b9      	b.n	800acbe <_malloc_r+0x46>
 800ad4a:	230c      	movs	r3, #12
 800ad4c:	603b      	str	r3, [r7, #0]
 800ad4e:	4638      	mov	r0, r7
 800ad50:	f002 f850 	bl	800cdf4 <__malloc_unlock>
 800ad54:	e7a1      	b.n	800ac9a <_malloc_r+0x22>
 800ad56:	6025      	str	r5, [r4, #0]
 800ad58:	e7de      	b.n	800ad18 <_malloc_r+0xa0>
 800ad5a:	bf00      	nop
 800ad5c:	20000b60 	.word	0x20000b60

0800ad60 <__cvt>:
 800ad60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad64:	ec55 4b10 	vmov	r4, r5, d0
 800ad68:	2d00      	cmp	r5, #0
 800ad6a:	460e      	mov	r6, r1
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	462b      	mov	r3, r5
 800ad70:	bfbb      	ittet	lt
 800ad72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad76:	461d      	movlt	r5, r3
 800ad78:	2300      	movge	r3, #0
 800ad7a:	232d      	movlt	r3, #45	; 0x2d
 800ad7c:	700b      	strb	r3, [r1, #0]
 800ad7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad84:	4691      	mov	r9, r2
 800ad86:	f023 0820 	bic.w	r8, r3, #32
 800ad8a:	bfbc      	itt	lt
 800ad8c:	4622      	movlt	r2, r4
 800ad8e:	4614      	movlt	r4, r2
 800ad90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad94:	d005      	beq.n	800ada2 <__cvt+0x42>
 800ad96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad9a:	d100      	bne.n	800ad9e <__cvt+0x3e>
 800ad9c:	3601      	adds	r6, #1
 800ad9e:	2102      	movs	r1, #2
 800ada0:	e000      	b.n	800ada4 <__cvt+0x44>
 800ada2:	2103      	movs	r1, #3
 800ada4:	ab03      	add	r3, sp, #12
 800ada6:	9301      	str	r3, [sp, #4]
 800ada8:	ab02      	add	r3, sp, #8
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	ec45 4b10 	vmov	d0, r4, r5
 800adb0:	4653      	mov	r3, sl
 800adb2:	4632      	mov	r2, r6
 800adb4:	f001 f804 	bl	800bdc0 <_dtoa_r>
 800adb8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800adbc:	4607      	mov	r7, r0
 800adbe:	d102      	bne.n	800adc6 <__cvt+0x66>
 800adc0:	f019 0f01 	tst.w	r9, #1
 800adc4:	d022      	beq.n	800ae0c <__cvt+0xac>
 800adc6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800adca:	eb07 0906 	add.w	r9, r7, r6
 800adce:	d110      	bne.n	800adf2 <__cvt+0x92>
 800add0:	783b      	ldrb	r3, [r7, #0]
 800add2:	2b30      	cmp	r3, #48	; 0x30
 800add4:	d10a      	bne.n	800adec <__cvt+0x8c>
 800add6:	2200      	movs	r2, #0
 800add8:	2300      	movs	r3, #0
 800adda:	4620      	mov	r0, r4
 800addc:	4629      	mov	r1, r5
 800adde:	f7f5 feed 	bl	8000bbc <__aeabi_dcmpeq>
 800ade2:	b918      	cbnz	r0, 800adec <__cvt+0x8c>
 800ade4:	f1c6 0601 	rsb	r6, r6, #1
 800ade8:	f8ca 6000 	str.w	r6, [sl]
 800adec:	f8da 3000 	ldr.w	r3, [sl]
 800adf0:	4499      	add	r9, r3
 800adf2:	2200      	movs	r2, #0
 800adf4:	2300      	movs	r3, #0
 800adf6:	4620      	mov	r0, r4
 800adf8:	4629      	mov	r1, r5
 800adfa:	f7f5 fedf 	bl	8000bbc <__aeabi_dcmpeq>
 800adfe:	b108      	cbz	r0, 800ae04 <__cvt+0xa4>
 800ae00:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae04:	2230      	movs	r2, #48	; 0x30
 800ae06:	9b03      	ldr	r3, [sp, #12]
 800ae08:	454b      	cmp	r3, r9
 800ae0a:	d307      	bcc.n	800ae1c <__cvt+0xbc>
 800ae0c:	9b03      	ldr	r3, [sp, #12]
 800ae0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae10:	1bdb      	subs	r3, r3, r7
 800ae12:	4638      	mov	r0, r7
 800ae14:	6013      	str	r3, [r2, #0]
 800ae16:	b004      	add	sp, #16
 800ae18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae1c:	1c59      	adds	r1, r3, #1
 800ae1e:	9103      	str	r1, [sp, #12]
 800ae20:	701a      	strb	r2, [r3, #0]
 800ae22:	e7f0      	b.n	800ae06 <__cvt+0xa6>

0800ae24 <__exponent>:
 800ae24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae26:	4603      	mov	r3, r0
 800ae28:	2900      	cmp	r1, #0
 800ae2a:	bfb8      	it	lt
 800ae2c:	4249      	neglt	r1, r1
 800ae2e:	f803 2b02 	strb.w	r2, [r3], #2
 800ae32:	bfb4      	ite	lt
 800ae34:	222d      	movlt	r2, #45	; 0x2d
 800ae36:	222b      	movge	r2, #43	; 0x2b
 800ae38:	2909      	cmp	r1, #9
 800ae3a:	7042      	strb	r2, [r0, #1]
 800ae3c:	dd2a      	ble.n	800ae94 <__exponent+0x70>
 800ae3e:	f10d 0407 	add.w	r4, sp, #7
 800ae42:	46a4      	mov	ip, r4
 800ae44:	270a      	movs	r7, #10
 800ae46:	46a6      	mov	lr, r4
 800ae48:	460a      	mov	r2, r1
 800ae4a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ae4e:	fb07 1516 	mls	r5, r7, r6, r1
 800ae52:	3530      	adds	r5, #48	; 0x30
 800ae54:	2a63      	cmp	r2, #99	; 0x63
 800ae56:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ae5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ae5e:	4631      	mov	r1, r6
 800ae60:	dcf1      	bgt.n	800ae46 <__exponent+0x22>
 800ae62:	3130      	adds	r1, #48	; 0x30
 800ae64:	f1ae 0502 	sub.w	r5, lr, #2
 800ae68:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ae6c:	1c44      	adds	r4, r0, #1
 800ae6e:	4629      	mov	r1, r5
 800ae70:	4561      	cmp	r1, ip
 800ae72:	d30a      	bcc.n	800ae8a <__exponent+0x66>
 800ae74:	f10d 0209 	add.w	r2, sp, #9
 800ae78:	eba2 020e 	sub.w	r2, r2, lr
 800ae7c:	4565      	cmp	r5, ip
 800ae7e:	bf88      	it	hi
 800ae80:	2200      	movhi	r2, #0
 800ae82:	4413      	add	r3, r2
 800ae84:	1a18      	subs	r0, r3, r0
 800ae86:	b003      	add	sp, #12
 800ae88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ae92:	e7ed      	b.n	800ae70 <__exponent+0x4c>
 800ae94:	2330      	movs	r3, #48	; 0x30
 800ae96:	3130      	adds	r1, #48	; 0x30
 800ae98:	7083      	strb	r3, [r0, #2]
 800ae9a:	70c1      	strb	r1, [r0, #3]
 800ae9c:	1d03      	adds	r3, r0, #4
 800ae9e:	e7f1      	b.n	800ae84 <__exponent+0x60>

0800aea0 <_printf_float>:
 800aea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	ed2d 8b02 	vpush	{d8}
 800aea8:	b08d      	sub	sp, #52	; 0x34
 800aeaa:	460c      	mov	r4, r1
 800aeac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aeb0:	4616      	mov	r6, r2
 800aeb2:	461f      	mov	r7, r3
 800aeb4:	4605      	mov	r5, r0
 800aeb6:	f001 ff7f 	bl	800cdb8 <_localeconv_r>
 800aeba:	f8d0 a000 	ldr.w	sl, [r0]
 800aebe:	4650      	mov	r0, sl
 800aec0:	f7f5 f9f6 	bl	80002b0 <strlen>
 800aec4:	2300      	movs	r3, #0
 800aec6:	930a      	str	r3, [sp, #40]	; 0x28
 800aec8:	6823      	ldr	r3, [r4, #0]
 800aeca:	9305      	str	r3, [sp, #20]
 800aecc:	f8d8 3000 	ldr.w	r3, [r8]
 800aed0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aed4:	3307      	adds	r3, #7
 800aed6:	f023 0307 	bic.w	r3, r3, #7
 800aeda:	f103 0208 	add.w	r2, r3, #8
 800aede:	f8c8 2000 	str.w	r2, [r8]
 800aee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aeea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aeee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aef2:	9307      	str	r3, [sp, #28]
 800aef4:	f8cd 8018 	str.w	r8, [sp, #24]
 800aef8:	ee08 0a10 	vmov	s16, r0
 800aefc:	4b9f      	ldr	r3, [pc, #636]	; (800b17c <_printf_float+0x2dc>)
 800aefe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af06:	f7f5 fe8b 	bl	8000c20 <__aeabi_dcmpun>
 800af0a:	bb88      	cbnz	r0, 800af70 <_printf_float+0xd0>
 800af0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af10:	4b9a      	ldr	r3, [pc, #616]	; (800b17c <_printf_float+0x2dc>)
 800af12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af16:	f7f5 fe65 	bl	8000be4 <__aeabi_dcmple>
 800af1a:	bb48      	cbnz	r0, 800af70 <_printf_float+0xd0>
 800af1c:	2200      	movs	r2, #0
 800af1e:	2300      	movs	r3, #0
 800af20:	4640      	mov	r0, r8
 800af22:	4649      	mov	r1, r9
 800af24:	f7f5 fe54 	bl	8000bd0 <__aeabi_dcmplt>
 800af28:	b110      	cbz	r0, 800af30 <_printf_float+0x90>
 800af2a:	232d      	movs	r3, #45	; 0x2d
 800af2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af30:	4b93      	ldr	r3, [pc, #588]	; (800b180 <_printf_float+0x2e0>)
 800af32:	4894      	ldr	r0, [pc, #592]	; (800b184 <_printf_float+0x2e4>)
 800af34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800af38:	bf94      	ite	ls
 800af3a:	4698      	movls	r8, r3
 800af3c:	4680      	movhi	r8, r0
 800af3e:	2303      	movs	r3, #3
 800af40:	6123      	str	r3, [r4, #16]
 800af42:	9b05      	ldr	r3, [sp, #20]
 800af44:	f023 0204 	bic.w	r2, r3, #4
 800af48:	6022      	str	r2, [r4, #0]
 800af4a:	f04f 0900 	mov.w	r9, #0
 800af4e:	9700      	str	r7, [sp, #0]
 800af50:	4633      	mov	r3, r6
 800af52:	aa0b      	add	r2, sp, #44	; 0x2c
 800af54:	4621      	mov	r1, r4
 800af56:	4628      	mov	r0, r5
 800af58:	f000 f9d8 	bl	800b30c <_printf_common>
 800af5c:	3001      	adds	r0, #1
 800af5e:	f040 8090 	bne.w	800b082 <_printf_float+0x1e2>
 800af62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af66:	b00d      	add	sp, #52	; 0x34
 800af68:	ecbd 8b02 	vpop	{d8}
 800af6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af70:	4642      	mov	r2, r8
 800af72:	464b      	mov	r3, r9
 800af74:	4640      	mov	r0, r8
 800af76:	4649      	mov	r1, r9
 800af78:	f7f5 fe52 	bl	8000c20 <__aeabi_dcmpun>
 800af7c:	b140      	cbz	r0, 800af90 <_printf_float+0xf0>
 800af7e:	464b      	mov	r3, r9
 800af80:	2b00      	cmp	r3, #0
 800af82:	bfbc      	itt	lt
 800af84:	232d      	movlt	r3, #45	; 0x2d
 800af86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800af8a:	487f      	ldr	r0, [pc, #508]	; (800b188 <_printf_float+0x2e8>)
 800af8c:	4b7f      	ldr	r3, [pc, #508]	; (800b18c <_printf_float+0x2ec>)
 800af8e:	e7d1      	b.n	800af34 <_printf_float+0x94>
 800af90:	6863      	ldr	r3, [r4, #4]
 800af92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800af96:	9206      	str	r2, [sp, #24]
 800af98:	1c5a      	adds	r2, r3, #1
 800af9a:	d13f      	bne.n	800b01c <_printf_float+0x17c>
 800af9c:	2306      	movs	r3, #6
 800af9e:	6063      	str	r3, [r4, #4]
 800afa0:	9b05      	ldr	r3, [sp, #20]
 800afa2:	6861      	ldr	r1, [r4, #4]
 800afa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800afa8:	2300      	movs	r3, #0
 800afaa:	9303      	str	r3, [sp, #12]
 800afac:	ab0a      	add	r3, sp, #40	; 0x28
 800afae:	e9cd b301 	strd	fp, r3, [sp, #4]
 800afb2:	ab09      	add	r3, sp, #36	; 0x24
 800afb4:	ec49 8b10 	vmov	d0, r8, r9
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	6022      	str	r2, [r4, #0]
 800afbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800afc0:	4628      	mov	r0, r5
 800afc2:	f7ff fecd 	bl	800ad60 <__cvt>
 800afc6:	9b06      	ldr	r3, [sp, #24]
 800afc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afca:	2b47      	cmp	r3, #71	; 0x47
 800afcc:	4680      	mov	r8, r0
 800afce:	d108      	bne.n	800afe2 <_printf_float+0x142>
 800afd0:	1cc8      	adds	r0, r1, #3
 800afd2:	db02      	blt.n	800afda <_printf_float+0x13a>
 800afd4:	6863      	ldr	r3, [r4, #4]
 800afd6:	4299      	cmp	r1, r3
 800afd8:	dd41      	ble.n	800b05e <_printf_float+0x1be>
 800afda:	f1ab 0b02 	sub.w	fp, fp, #2
 800afde:	fa5f fb8b 	uxtb.w	fp, fp
 800afe2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800afe6:	d820      	bhi.n	800b02a <_printf_float+0x18a>
 800afe8:	3901      	subs	r1, #1
 800afea:	465a      	mov	r2, fp
 800afec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800aff0:	9109      	str	r1, [sp, #36]	; 0x24
 800aff2:	f7ff ff17 	bl	800ae24 <__exponent>
 800aff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aff8:	1813      	adds	r3, r2, r0
 800affa:	2a01      	cmp	r2, #1
 800affc:	4681      	mov	r9, r0
 800affe:	6123      	str	r3, [r4, #16]
 800b000:	dc02      	bgt.n	800b008 <_printf_float+0x168>
 800b002:	6822      	ldr	r2, [r4, #0]
 800b004:	07d2      	lsls	r2, r2, #31
 800b006:	d501      	bpl.n	800b00c <_printf_float+0x16c>
 800b008:	3301      	adds	r3, #1
 800b00a:	6123      	str	r3, [r4, #16]
 800b00c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b010:	2b00      	cmp	r3, #0
 800b012:	d09c      	beq.n	800af4e <_printf_float+0xae>
 800b014:	232d      	movs	r3, #45	; 0x2d
 800b016:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b01a:	e798      	b.n	800af4e <_printf_float+0xae>
 800b01c:	9a06      	ldr	r2, [sp, #24]
 800b01e:	2a47      	cmp	r2, #71	; 0x47
 800b020:	d1be      	bne.n	800afa0 <_printf_float+0x100>
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1bc      	bne.n	800afa0 <_printf_float+0x100>
 800b026:	2301      	movs	r3, #1
 800b028:	e7b9      	b.n	800af9e <_printf_float+0xfe>
 800b02a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b02e:	d118      	bne.n	800b062 <_printf_float+0x1c2>
 800b030:	2900      	cmp	r1, #0
 800b032:	6863      	ldr	r3, [r4, #4]
 800b034:	dd0b      	ble.n	800b04e <_printf_float+0x1ae>
 800b036:	6121      	str	r1, [r4, #16]
 800b038:	b913      	cbnz	r3, 800b040 <_printf_float+0x1a0>
 800b03a:	6822      	ldr	r2, [r4, #0]
 800b03c:	07d0      	lsls	r0, r2, #31
 800b03e:	d502      	bpl.n	800b046 <_printf_float+0x1a6>
 800b040:	3301      	adds	r3, #1
 800b042:	440b      	add	r3, r1
 800b044:	6123      	str	r3, [r4, #16]
 800b046:	65a1      	str	r1, [r4, #88]	; 0x58
 800b048:	f04f 0900 	mov.w	r9, #0
 800b04c:	e7de      	b.n	800b00c <_printf_float+0x16c>
 800b04e:	b913      	cbnz	r3, 800b056 <_printf_float+0x1b6>
 800b050:	6822      	ldr	r2, [r4, #0]
 800b052:	07d2      	lsls	r2, r2, #31
 800b054:	d501      	bpl.n	800b05a <_printf_float+0x1ba>
 800b056:	3302      	adds	r3, #2
 800b058:	e7f4      	b.n	800b044 <_printf_float+0x1a4>
 800b05a:	2301      	movs	r3, #1
 800b05c:	e7f2      	b.n	800b044 <_printf_float+0x1a4>
 800b05e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b064:	4299      	cmp	r1, r3
 800b066:	db05      	blt.n	800b074 <_printf_float+0x1d4>
 800b068:	6823      	ldr	r3, [r4, #0]
 800b06a:	6121      	str	r1, [r4, #16]
 800b06c:	07d8      	lsls	r0, r3, #31
 800b06e:	d5ea      	bpl.n	800b046 <_printf_float+0x1a6>
 800b070:	1c4b      	adds	r3, r1, #1
 800b072:	e7e7      	b.n	800b044 <_printf_float+0x1a4>
 800b074:	2900      	cmp	r1, #0
 800b076:	bfd4      	ite	le
 800b078:	f1c1 0202 	rsble	r2, r1, #2
 800b07c:	2201      	movgt	r2, #1
 800b07e:	4413      	add	r3, r2
 800b080:	e7e0      	b.n	800b044 <_printf_float+0x1a4>
 800b082:	6823      	ldr	r3, [r4, #0]
 800b084:	055a      	lsls	r2, r3, #21
 800b086:	d407      	bmi.n	800b098 <_printf_float+0x1f8>
 800b088:	6923      	ldr	r3, [r4, #16]
 800b08a:	4642      	mov	r2, r8
 800b08c:	4631      	mov	r1, r6
 800b08e:	4628      	mov	r0, r5
 800b090:	47b8      	blx	r7
 800b092:	3001      	adds	r0, #1
 800b094:	d12c      	bne.n	800b0f0 <_printf_float+0x250>
 800b096:	e764      	b.n	800af62 <_printf_float+0xc2>
 800b098:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b09c:	f240 80e0 	bls.w	800b260 <_printf_float+0x3c0>
 800b0a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	f7f5 fd88 	bl	8000bbc <__aeabi_dcmpeq>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d034      	beq.n	800b11a <_printf_float+0x27a>
 800b0b0:	4a37      	ldr	r2, [pc, #220]	; (800b190 <_printf_float+0x2f0>)
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	4631      	mov	r1, r6
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	47b8      	blx	r7
 800b0ba:	3001      	adds	r0, #1
 800b0bc:	f43f af51 	beq.w	800af62 <_printf_float+0xc2>
 800b0c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	db02      	blt.n	800b0ce <_printf_float+0x22e>
 800b0c8:	6823      	ldr	r3, [r4, #0]
 800b0ca:	07d8      	lsls	r0, r3, #31
 800b0cc:	d510      	bpl.n	800b0f0 <_printf_float+0x250>
 800b0ce:	ee18 3a10 	vmov	r3, s16
 800b0d2:	4652      	mov	r2, sl
 800b0d4:	4631      	mov	r1, r6
 800b0d6:	4628      	mov	r0, r5
 800b0d8:	47b8      	blx	r7
 800b0da:	3001      	adds	r0, #1
 800b0dc:	f43f af41 	beq.w	800af62 <_printf_float+0xc2>
 800b0e0:	f04f 0800 	mov.w	r8, #0
 800b0e4:	f104 091a 	add.w	r9, r4, #26
 800b0e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	4543      	cmp	r3, r8
 800b0ee:	dc09      	bgt.n	800b104 <_printf_float+0x264>
 800b0f0:	6823      	ldr	r3, [r4, #0]
 800b0f2:	079b      	lsls	r3, r3, #30
 800b0f4:	f100 8105 	bmi.w	800b302 <_printf_float+0x462>
 800b0f8:	68e0      	ldr	r0, [r4, #12]
 800b0fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0fc:	4298      	cmp	r0, r3
 800b0fe:	bfb8      	it	lt
 800b100:	4618      	movlt	r0, r3
 800b102:	e730      	b.n	800af66 <_printf_float+0xc6>
 800b104:	2301      	movs	r3, #1
 800b106:	464a      	mov	r2, r9
 800b108:	4631      	mov	r1, r6
 800b10a:	4628      	mov	r0, r5
 800b10c:	47b8      	blx	r7
 800b10e:	3001      	adds	r0, #1
 800b110:	f43f af27 	beq.w	800af62 <_printf_float+0xc2>
 800b114:	f108 0801 	add.w	r8, r8, #1
 800b118:	e7e6      	b.n	800b0e8 <_printf_float+0x248>
 800b11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	dc39      	bgt.n	800b194 <_printf_float+0x2f4>
 800b120:	4a1b      	ldr	r2, [pc, #108]	; (800b190 <_printf_float+0x2f0>)
 800b122:	2301      	movs	r3, #1
 800b124:	4631      	mov	r1, r6
 800b126:	4628      	mov	r0, r5
 800b128:	47b8      	blx	r7
 800b12a:	3001      	adds	r0, #1
 800b12c:	f43f af19 	beq.w	800af62 <_printf_float+0xc2>
 800b130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b134:	4313      	orrs	r3, r2
 800b136:	d102      	bne.n	800b13e <_printf_float+0x29e>
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	07d9      	lsls	r1, r3, #31
 800b13c:	d5d8      	bpl.n	800b0f0 <_printf_float+0x250>
 800b13e:	ee18 3a10 	vmov	r3, s16
 800b142:	4652      	mov	r2, sl
 800b144:	4631      	mov	r1, r6
 800b146:	4628      	mov	r0, r5
 800b148:	47b8      	blx	r7
 800b14a:	3001      	adds	r0, #1
 800b14c:	f43f af09 	beq.w	800af62 <_printf_float+0xc2>
 800b150:	f04f 0900 	mov.w	r9, #0
 800b154:	f104 0a1a 	add.w	sl, r4, #26
 800b158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15a:	425b      	negs	r3, r3
 800b15c:	454b      	cmp	r3, r9
 800b15e:	dc01      	bgt.n	800b164 <_printf_float+0x2c4>
 800b160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b162:	e792      	b.n	800b08a <_printf_float+0x1ea>
 800b164:	2301      	movs	r3, #1
 800b166:	4652      	mov	r2, sl
 800b168:	4631      	mov	r1, r6
 800b16a:	4628      	mov	r0, r5
 800b16c:	47b8      	blx	r7
 800b16e:	3001      	adds	r0, #1
 800b170:	f43f aef7 	beq.w	800af62 <_printf_float+0xc2>
 800b174:	f109 0901 	add.w	r9, r9, #1
 800b178:	e7ee      	b.n	800b158 <_printf_float+0x2b8>
 800b17a:	bf00      	nop
 800b17c:	7fefffff 	.word	0x7fefffff
 800b180:	08026e7c 	.word	0x08026e7c
 800b184:	08026e80 	.word	0x08026e80
 800b188:	08026e88 	.word	0x08026e88
 800b18c:	08026e84 	.word	0x08026e84
 800b190:	0802732c 	.word	0x0802732c
 800b194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b198:	429a      	cmp	r2, r3
 800b19a:	bfa8      	it	ge
 800b19c:	461a      	movge	r2, r3
 800b19e:	2a00      	cmp	r2, #0
 800b1a0:	4691      	mov	r9, r2
 800b1a2:	dc37      	bgt.n	800b214 <_printf_float+0x374>
 800b1a4:	f04f 0b00 	mov.w	fp, #0
 800b1a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1ac:	f104 021a 	add.w	r2, r4, #26
 800b1b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1b2:	9305      	str	r3, [sp, #20]
 800b1b4:	eba3 0309 	sub.w	r3, r3, r9
 800b1b8:	455b      	cmp	r3, fp
 800b1ba:	dc33      	bgt.n	800b224 <_printf_float+0x384>
 800b1bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	db3b      	blt.n	800b23c <_printf_float+0x39c>
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	07da      	lsls	r2, r3, #31
 800b1c8:	d438      	bmi.n	800b23c <_printf_float+0x39c>
 800b1ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1cc:	9a05      	ldr	r2, [sp, #20]
 800b1ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1d0:	1a9a      	subs	r2, r3, r2
 800b1d2:	eba3 0901 	sub.w	r9, r3, r1
 800b1d6:	4591      	cmp	r9, r2
 800b1d8:	bfa8      	it	ge
 800b1da:	4691      	movge	r9, r2
 800b1dc:	f1b9 0f00 	cmp.w	r9, #0
 800b1e0:	dc35      	bgt.n	800b24e <_printf_float+0x3ae>
 800b1e2:	f04f 0800 	mov.w	r8, #0
 800b1e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1ea:	f104 0a1a 	add.w	sl, r4, #26
 800b1ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1f2:	1a9b      	subs	r3, r3, r2
 800b1f4:	eba3 0309 	sub.w	r3, r3, r9
 800b1f8:	4543      	cmp	r3, r8
 800b1fa:	f77f af79 	ble.w	800b0f0 <_printf_float+0x250>
 800b1fe:	2301      	movs	r3, #1
 800b200:	4652      	mov	r2, sl
 800b202:	4631      	mov	r1, r6
 800b204:	4628      	mov	r0, r5
 800b206:	47b8      	blx	r7
 800b208:	3001      	adds	r0, #1
 800b20a:	f43f aeaa 	beq.w	800af62 <_printf_float+0xc2>
 800b20e:	f108 0801 	add.w	r8, r8, #1
 800b212:	e7ec      	b.n	800b1ee <_printf_float+0x34e>
 800b214:	4613      	mov	r3, r2
 800b216:	4631      	mov	r1, r6
 800b218:	4642      	mov	r2, r8
 800b21a:	4628      	mov	r0, r5
 800b21c:	47b8      	blx	r7
 800b21e:	3001      	adds	r0, #1
 800b220:	d1c0      	bne.n	800b1a4 <_printf_float+0x304>
 800b222:	e69e      	b.n	800af62 <_printf_float+0xc2>
 800b224:	2301      	movs	r3, #1
 800b226:	4631      	mov	r1, r6
 800b228:	4628      	mov	r0, r5
 800b22a:	9205      	str	r2, [sp, #20]
 800b22c:	47b8      	blx	r7
 800b22e:	3001      	adds	r0, #1
 800b230:	f43f ae97 	beq.w	800af62 <_printf_float+0xc2>
 800b234:	9a05      	ldr	r2, [sp, #20]
 800b236:	f10b 0b01 	add.w	fp, fp, #1
 800b23a:	e7b9      	b.n	800b1b0 <_printf_float+0x310>
 800b23c:	ee18 3a10 	vmov	r3, s16
 800b240:	4652      	mov	r2, sl
 800b242:	4631      	mov	r1, r6
 800b244:	4628      	mov	r0, r5
 800b246:	47b8      	blx	r7
 800b248:	3001      	adds	r0, #1
 800b24a:	d1be      	bne.n	800b1ca <_printf_float+0x32a>
 800b24c:	e689      	b.n	800af62 <_printf_float+0xc2>
 800b24e:	9a05      	ldr	r2, [sp, #20]
 800b250:	464b      	mov	r3, r9
 800b252:	4442      	add	r2, r8
 800b254:	4631      	mov	r1, r6
 800b256:	4628      	mov	r0, r5
 800b258:	47b8      	blx	r7
 800b25a:	3001      	adds	r0, #1
 800b25c:	d1c1      	bne.n	800b1e2 <_printf_float+0x342>
 800b25e:	e680      	b.n	800af62 <_printf_float+0xc2>
 800b260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b262:	2a01      	cmp	r2, #1
 800b264:	dc01      	bgt.n	800b26a <_printf_float+0x3ca>
 800b266:	07db      	lsls	r3, r3, #31
 800b268:	d538      	bpl.n	800b2dc <_printf_float+0x43c>
 800b26a:	2301      	movs	r3, #1
 800b26c:	4642      	mov	r2, r8
 800b26e:	4631      	mov	r1, r6
 800b270:	4628      	mov	r0, r5
 800b272:	47b8      	blx	r7
 800b274:	3001      	adds	r0, #1
 800b276:	f43f ae74 	beq.w	800af62 <_printf_float+0xc2>
 800b27a:	ee18 3a10 	vmov	r3, s16
 800b27e:	4652      	mov	r2, sl
 800b280:	4631      	mov	r1, r6
 800b282:	4628      	mov	r0, r5
 800b284:	47b8      	blx	r7
 800b286:	3001      	adds	r0, #1
 800b288:	f43f ae6b 	beq.w	800af62 <_printf_float+0xc2>
 800b28c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b290:	2200      	movs	r2, #0
 800b292:	2300      	movs	r3, #0
 800b294:	f7f5 fc92 	bl	8000bbc <__aeabi_dcmpeq>
 800b298:	b9d8      	cbnz	r0, 800b2d2 <_printf_float+0x432>
 800b29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b29c:	f108 0201 	add.w	r2, r8, #1
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	47b8      	blx	r7
 800b2a8:	3001      	adds	r0, #1
 800b2aa:	d10e      	bne.n	800b2ca <_printf_float+0x42a>
 800b2ac:	e659      	b.n	800af62 <_printf_float+0xc2>
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	4652      	mov	r2, sl
 800b2b2:	4631      	mov	r1, r6
 800b2b4:	4628      	mov	r0, r5
 800b2b6:	47b8      	blx	r7
 800b2b8:	3001      	adds	r0, #1
 800b2ba:	f43f ae52 	beq.w	800af62 <_printf_float+0xc2>
 800b2be:	f108 0801 	add.w	r8, r8, #1
 800b2c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	4543      	cmp	r3, r8
 800b2c8:	dcf1      	bgt.n	800b2ae <_printf_float+0x40e>
 800b2ca:	464b      	mov	r3, r9
 800b2cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b2d0:	e6dc      	b.n	800b08c <_printf_float+0x1ec>
 800b2d2:	f04f 0800 	mov.w	r8, #0
 800b2d6:	f104 0a1a 	add.w	sl, r4, #26
 800b2da:	e7f2      	b.n	800b2c2 <_printf_float+0x422>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	4642      	mov	r2, r8
 800b2e0:	e7df      	b.n	800b2a2 <_printf_float+0x402>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	464a      	mov	r2, r9
 800b2e6:	4631      	mov	r1, r6
 800b2e8:	4628      	mov	r0, r5
 800b2ea:	47b8      	blx	r7
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	f43f ae38 	beq.w	800af62 <_printf_float+0xc2>
 800b2f2:	f108 0801 	add.w	r8, r8, #1
 800b2f6:	68e3      	ldr	r3, [r4, #12]
 800b2f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b2fa:	1a5b      	subs	r3, r3, r1
 800b2fc:	4543      	cmp	r3, r8
 800b2fe:	dcf0      	bgt.n	800b2e2 <_printf_float+0x442>
 800b300:	e6fa      	b.n	800b0f8 <_printf_float+0x258>
 800b302:	f04f 0800 	mov.w	r8, #0
 800b306:	f104 0919 	add.w	r9, r4, #25
 800b30a:	e7f4      	b.n	800b2f6 <_printf_float+0x456>

0800b30c <_printf_common>:
 800b30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b310:	4616      	mov	r6, r2
 800b312:	4699      	mov	r9, r3
 800b314:	688a      	ldr	r2, [r1, #8]
 800b316:	690b      	ldr	r3, [r1, #16]
 800b318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b31c:	4293      	cmp	r3, r2
 800b31e:	bfb8      	it	lt
 800b320:	4613      	movlt	r3, r2
 800b322:	6033      	str	r3, [r6, #0]
 800b324:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b328:	4607      	mov	r7, r0
 800b32a:	460c      	mov	r4, r1
 800b32c:	b10a      	cbz	r2, 800b332 <_printf_common+0x26>
 800b32e:	3301      	adds	r3, #1
 800b330:	6033      	str	r3, [r6, #0]
 800b332:	6823      	ldr	r3, [r4, #0]
 800b334:	0699      	lsls	r1, r3, #26
 800b336:	bf42      	ittt	mi
 800b338:	6833      	ldrmi	r3, [r6, #0]
 800b33a:	3302      	addmi	r3, #2
 800b33c:	6033      	strmi	r3, [r6, #0]
 800b33e:	6825      	ldr	r5, [r4, #0]
 800b340:	f015 0506 	ands.w	r5, r5, #6
 800b344:	d106      	bne.n	800b354 <_printf_common+0x48>
 800b346:	f104 0a19 	add.w	sl, r4, #25
 800b34a:	68e3      	ldr	r3, [r4, #12]
 800b34c:	6832      	ldr	r2, [r6, #0]
 800b34e:	1a9b      	subs	r3, r3, r2
 800b350:	42ab      	cmp	r3, r5
 800b352:	dc26      	bgt.n	800b3a2 <_printf_common+0x96>
 800b354:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b358:	1e13      	subs	r3, r2, #0
 800b35a:	6822      	ldr	r2, [r4, #0]
 800b35c:	bf18      	it	ne
 800b35e:	2301      	movne	r3, #1
 800b360:	0692      	lsls	r2, r2, #26
 800b362:	d42b      	bmi.n	800b3bc <_printf_common+0xb0>
 800b364:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b368:	4649      	mov	r1, r9
 800b36a:	4638      	mov	r0, r7
 800b36c:	47c0      	blx	r8
 800b36e:	3001      	adds	r0, #1
 800b370:	d01e      	beq.n	800b3b0 <_printf_common+0xa4>
 800b372:	6823      	ldr	r3, [r4, #0]
 800b374:	68e5      	ldr	r5, [r4, #12]
 800b376:	6832      	ldr	r2, [r6, #0]
 800b378:	f003 0306 	and.w	r3, r3, #6
 800b37c:	2b04      	cmp	r3, #4
 800b37e:	bf08      	it	eq
 800b380:	1aad      	subeq	r5, r5, r2
 800b382:	68a3      	ldr	r3, [r4, #8]
 800b384:	6922      	ldr	r2, [r4, #16]
 800b386:	bf0c      	ite	eq
 800b388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b38c:	2500      	movne	r5, #0
 800b38e:	4293      	cmp	r3, r2
 800b390:	bfc4      	itt	gt
 800b392:	1a9b      	subgt	r3, r3, r2
 800b394:	18ed      	addgt	r5, r5, r3
 800b396:	2600      	movs	r6, #0
 800b398:	341a      	adds	r4, #26
 800b39a:	42b5      	cmp	r5, r6
 800b39c:	d11a      	bne.n	800b3d4 <_printf_common+0xc8>
 800b39e:	2000      	movs	r0, #0
 800b3a0:	e008      	b.n	800b3b4 <_printf_common+0xa8>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4652      	mov	r2, sl
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	4638      	mov	r0, r7
 800b3aa:	47c0      	blx	r8
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	d103      	bne.n	800b3b8 <_printf_common+0xac>
 800b3b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b8:	3501      	adds	r5, #1
 800b3ba:	e7c6      	b.n	800b34a <_printf_common+0x3e>
 800b3bc:	18e1      	adds	r1, r4, r3
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	2030      	movs	r0, #48	; 0x30
 800b3c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3c6:	4422      	add	r2, r4
 800b3c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3d0:	3302      	adds	r3, #2
 800b3d2:	e7c7      	b.n	800b364 <_printf_common+0x58>
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	4622      	mov	r2, r4
 800b3d8:	4649      	mov	r1, r9
 800b3da:	4638      	mov	r0, r7
 800b3dc:	47c0      	blx	r8
 800b3de:	3001      	adds	r0, #1
 800b3e0:	d0e6      	beq.n	800b3b0 <_printf_common+0xa4>
 800b3e2:	3601      	adds	r6, #1
 800b3e4:	e7d9      	b.n	800b39a <_printf_common+0x8e>
	...

0800b3e8 <_printf_i>:
 800b3e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ec:	7e0f      	ldrb	r7, [r1, #24]
 800b3ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b3f0:	2f78      	cmp	r7, #120	; 0x78
 800b3f2:	4691      	mov	r9, r2
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	469a      	mov	sl, r3
 800b3fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b3fe:	d807      	bhi.n	800b410 <_printf_i+0x28>
 800b400:	2f62      	cmp	r7, #98	; 0x62
 800b402:	d80a      	bhi.n	800b41a <_printf_i+0x32>
 800b404:	2f00      	cmp	r7, #0
 800b406:	f000 80d8 	beq.w	800b5ba <_printf_i+0x1d2>
 800b40a:	2f58      	cmp	r7, #88	; 0x58
 800b40c:	f000 80a3 	beq.w	800b556 <_printf_i+0x16e>
 800b410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b414:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b418:	e03a      	b.n	800b490 <_printf_i+0xa8>
 800b41a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b41e:	2b15      	cmp	r3, #21
 800b420:	d8f6      	bhi.n	800b410 <_printf_i+0x28>
 800b422:	a101      	add	r1, pc, #4	; (adr r1, 800b428 <_printf_i+0x40>)
 800b424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b428:	0800b481 	.word	0x0800b481
 800b42c:	0800b495 	.word	0x0800b495
 800b430:	0800b411 	.word	0x0800b411
 800b434:	0800b411 	.word	0x0800b411
 800b438:	0800b411 	.word	0x0800b411
 800b43c:	0800b411 	.word	0x0800b411
 800b440:	0800b495 	.word	0x0800b495
 800b444:	0800b411 	.word	0x0800b411
 800b448:	0800b411 	.word	0x0800b411
 800b44c:	0800b411 	.word	0x0800b411
 800b450:	0800b411 	.word	0x0800b411
 800b454:	0800b5a1 	.word	0x0800b5a1
 800b458:	0800b4c5 	.word	0x0800b4c5
 800b45c:	0800b583 	.word	0x0800b583
 800b460:	0800b411 	.word	0x0800b411
 800b464:	0800b411 	.word	0x0800b411
 800b468:	0800b5c3 	.word	0x0800b5c3
 800b46c:	0800b411 	.word	0x0800b411
 800b470:	0800b4c5 	.word	0x0800b4c5
 800b474:	0800b411 	.word	0x0800b411
 800b478:	0800b411 	.word	0x0800b411
 800b47c:	0800b58b 	.word	0x0800b58b
 800b480:	682b      	ldr	r3, [r5, #0]
 800b482:	1d1a      	adds	r2, r3, #4
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	602a      	str	r2, [r5, #0]
 800b488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b48c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b490:	2301      	movs	r3, #1
 800b492:	e0a3      	b.n	800b5dc <_printf_i+0x1f4>
 800b494:	6820      	ldr	r0, [r4, #0]
 800b496:	6829      	ldr	r1, [r5, #0]
 800b498:	0606      	lsls	r6, r0, #24
 800b49a:	f101 0304 	add.w	r3, r1, #4
 800b49e:	d50a      	bpl.n	800b4b6 <_printf_i+0xce>
 800b4a0:	680e      	ldr	r6, [r1, #0]
 800b4a2:	602b      	str	r3, [r5, #0]
 800b4a4:	2e00      	cmp	r6, #0
 800b4a6:	da03      	bge.n	800b4b0 <_printf_i+0xc8>
 800b4a8:	232d      	movs	r3, #45	; 0x2d
 800b4aa:	4276      	negs	r6, r6
 800b4ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4b0:	485e      	ldr	r0, [pc, #376]	; (800b62c <_printf_i+0x244>)
 800b4b2:	230a      	movs	r3, #10
 800b4b4:	e019      	b.n	800b4ea <_printf_i+0x102>
 800b4b6:	680e      	ldr	r6, [r1, #0]
 800b4b8:	602b      	str	r3, [r5, #0]
 800b4ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b4be:	bf18      	it	ne
 800b4c0:	b236      	sxthne	r6, r6
 800b4c2:	e7ef      	b.n	800b4a4 <_printf_i+0xbc>
 800b4c4:	682b      	ldr	r3, [r5, #0]
 800b4c6:	6820      	ldr	r0, [r4, #0]
 800b4c8:	1d19      	adds	r1, r3, #4
 800b4ca:	6029      	str	r1, [r5, #0]
 800b4cc:	0601      	lsls	r1, r0, #24
 800b4ce:	d501      	bpl.n	800b4d4 <_printf_i+0xec>
 800b4d0:	681e      	ldr	r6, [r3, #0]
 800b4d2:	e002      	b.n	800b4da <_printf_i+0xf2>
 800b4d4:	0646      	lsls	r6, r0, #25
 800b4d6:	d5fb      	bpl.n	800b4d0 <_printf_i+0xe8>
 800b4d8:	881e      	ldrh	r6, [r3, #0]
 800b4da:	4854      	ldr	r0, [pc, #336]	; (800b62c <_printf_i+0x244>)
 800b4dc:	2f6f      	cmp	r7, #111	; 0x6f
 800b4de:	bf0c      	ite	eq
 800b4e0:	2308      	moveq	r3, #8
 800b4e2:	230a      	movne	r3, #10
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4ea:	6865      	ldr	r5, [r4, #4]
 800b4ec:	60a5      	str	r5, [r4, #8]
 800b4ee:	2d00      	cmp	r5, #0
 800b4f0:	bfa2      	ittt	ge
 800b4f2:	6821      	ldrge	r1, [r4, #0]
 800b4f4:	f021 0104 	bicge.w	r1, r1, #4
 800b4f8:	6021      	strge	r1, [r4, #0]
 800b4fa:	b90e      	cbnz	r6, 800b500 <_printf_i+0x118>
 800b4fc:	2d00      	cmp	r5, #0
 800b4fe:	d04d      	beq.n	800b59c <_printf_i+0x1b4>
 800b500:	4615      	mov	r5, r2
 800b502:	fbb6 f1f3 	udiv	r1, r6, r3
 800b506:	fb03 6711 	mls	r7, r3, r1, r6
 800b50a:	5dc7      	ldrb	r7, [r0, r7]
 800b50c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b510:	4637      	mov	r7, r6
 800b512:	42bb      	cmp	r3, r7
 800b514:	460e      	mov	r6, r1
 800b516:	d9f4      	bls.n	800b502 <_printf_i+0x11a>
 800b518:	2b08      	cmp	r3, #8
 800b51a:	d10b      	bne.n	800b534 <_printf_i+0x14c>
 800b51c:	6823      	ldr	r3, [r4, #0]
 800b51e:	07de      	lsls	r6, r3, #31
 800b520:	d508      	bpl.n	800b534 <_printf_i+0x14c>
 800b522:	6923      	ldr	r3, [r4, #16]
 800b524:	6861      	ldr	r1, [r4, #4]
 800b526:	4299      	cmp	r1, r3
 800b528:	bfde      	ittt	le
 800b52a:	2330      	movle	r3, #48	; 0x30
 800b52c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b530:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b534:	1b52      	subs	r2, r2, r5
 800b536:	6122      	str	r2, [r4, #16]
 800b538:	f8cd a000 	str.w	sl, [sp]
 800b53c:	464b      	mov	r3, r9
 800b53e:	aa03      	add	r2, sp, #12
 800b540:	4621      	mov	r1, r4
 800b542:	4640      	mov	r0, r8
 800b544:	f7ff fee2 	bl	800b30c <_printf_common>
 800b548:	3001      	adds	r0, #1
 800b54a:	d14c      	bne.n	800b5e6 <_printf_i+0x1fe>
 800b54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b550:	b004      	add	sp, #16
 800b552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b556:	4835      	ldr	r0, [pc, #212]	; (800b62c <_printf_i+0x244>)
 800b558:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b55c:	6829      	ldr	r1, [r5, #0]
 800b55e:	6823      	ldr	r3, [r4, #0]
 800b560:	f851 6b04 	ldr.w	r6, [r1], #4
 800b564:	6029      	str	r1, [r5, #0]
 800b566:	061d      	lsls	r5, r3, #24
 800b568:	d514      	bpl.n	800b594 <_printf_i+0x1ac>
 800b56a:	07df      	lsls	r7, r3, #31
 800b56c:	bf44      	itt	mi
 800b56e:	f043 0320 	orrmi.w	r3, r3, #32
 800b572:	6023      	strmi	r3, [r4, #0]
 800b574:	b91e      	cbnz	r6, 800b57e <_printf_i+0x196>
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	f023 0320 	bic.w	r3, r3, #32
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	2310      	movs	r3, #16
 800b580:	e7b0      	b.n	800b4e4 <_printf_i+0xfc>
 800b582:	6823      	ldr	r3, [r4, #0]
 800b584:	f043 0320 	orr.w	r3, r3, #32
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	2378      	movs	r3, #120	; 0x78
 800b58c:	4828      	ldr	r0, [pc, #160]	; (800b630 <_printf_i+0x248>)
 800b58e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b592:	e7e3      	b.n	800b55c <_printf_i+0x174>
 800b594:	0659      	lsls	r1, r3, #25
 800b596:	bf48      	it	mi
 800b598:	b2b6      	uxthmi	r6, r6
 800b59a:	e7e6      	b.n	800b56a <_printf_i+0x182>
 800b59c:	4615      	mov	r5, r2
 800b59e:	e7bb      	b.n	800b518 <_printf_i+0x130>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	6826      	ldr	r6, [r4, #0]
 800b5a4:	6961      	ldr	r1, [r4, #20]
 800b5a6:	1d18      	adds	r0, r3, #4
 800b5a8:	6028      	str	r0, [r5, #0]
 800b5aa:	0635      	lsls	r5, r6, #24
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	d501      	bpl.n	800b5b4 <_printf_i+0x1cc>
 800b5b0:	6019      	str	r1, [r3, #0]
 800b5b2:	e002      	b.n	800b5ba <_printf_i+0x1d2>
 800b5b4:	0670      	lsls	r0, r6, #25
 800b5b6:	d5fb      	bpl.n	800b5b0 <_printf_i+0x1c8>
 800b5b8:	8019      	strh	r1, [r3, #0]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	6123      	str	r3, [r4, #16]
 800b5be:	4615      	mov	r5, r2
 800b5c0:	e7ba      	b.n	800b538 <_printf_i+0x150>
 800b5c2:	682b      	ldr	r3, [r5, #0]
 800b5c4:	1d1a      	adds	r2, r3, #4
 800b5c6:	602a      	str	r2, [r5, #0]
 800b5c8:	681d      	ldr	r5, [r3, #0]
 800b5ca:	6862      	ldr	r2, [r4, #4]
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f7f4 fe76 	bl	80002c0 <memchr>
 800b5d4:	b108      	cbz	r0, 800b5da <_printf_i+0x1f2>
 800b5d6:	1b40      	subs	r0, r0, r5
 800b5d8:	6060      	str	r0, [r4, #4]
 800b5da:	6863      	ldr	r3, [r4, #4]
 800b5dc:	6123      	str	r3, [r4, #16]
 800b5de:	2300      	movs	r3, #0
 800b5e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5e4:	e7a8      	b.n	800b538 <_printf_i+0x150>
 800b5e6:	6923      	ldr	r3, [r4, #16]
 800b5e8:	462a      	mov	r2, r5
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	4640      	mov	r0, r8
 800b5ee:	47d0      	blx	sl
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	d0ab      	beq.n	800b54c <_printf_i+0x164>
 800b5f4:	6823      	ldr	r3, [r4, #0]
 800b5f6:	079b      	lsls	r3, r3, #30
 800b5f8:	d413      	bmi.n	800b622 <_printf_i+0x23a>
 800b5fa:	68e0      	ldr	r0, [r4, #12]
 800b5fc:	9b03      	ldr	r3, [sp, #12]
 800b5fe:	4298      	cmp	r0, r3
 800b600:	bfb8      	it	lt
 800b602:	4618      	movlt	r0, r3
 800b604:	e7a4      	b.n	800b550 <_printf_i+0x168>
 800b606:	2301      	movs	r3, #1
 800b608:	4632      	mov	r2, r6
 800b60a:	4649      	mov	r1, r9
 800b60c:	4640      	mov	r0, r8
 800b60e:	47d0      	blx	sl
 800b610:	3001      	adds	r0, #1
 800b612:	d09b      	beq.n	800b54c <_printf_i+0x164>
 800b614:	3501      	adds	r5, #1
 800b616:	68e3      	ldr	r3, [r4, #12]
 800b618:	9903      	ldr	r1, [sp, #12]
 800b61a:	1a5b      	subs	r3, r3, r1
 800b61c:	42ab      	cmp	r3, r5
 800b61e:	dcf2      	bgt.n	800b606 <_printf_i+0x21e>
 800b620:	e7eb      	b.n	800b5fa <_printf_i+0x212>
 800b622:	2500      	movs	r5, #0
 800b624:	f104 0619 	add.w	r6, r4, #25
 800b628:	e7f5      	b.n	800b616 <_printf_i+0x22e>
 800b62a:	bf00      	nop
 800b62c:	08026e8c 	.word	0x08026e8c
 800b630:	08026e9d 	.word	0x08026e9d

0800b634 <iprintf>:
 800b634:	b40f      	push	{r0, r1, r2, r3}
 800b636:	4b0a      	ldr	r3, [pc, #40]	; (800b660 <iprintf+0x2c>)
 800b638:	b513      	push	{r0, r1, r4, lr}
 800b63a:	681c      	ldr	r4, [r3, #0]
 800b63c:	b124      	cbz	r4, 800b648 <iprintf+0x14>
 800b63e:	69a3      	ldr	r3, [r4, #24]
 800b640:	b913      	cbnz	r3, 800b648 <iprintf+0x14>
 800b642:	4620      	mov	r0, r4
 800b644:	f001 fa02 	bl	800ca4c <__sinit>
 800b648:	ab05      	add	r3, sp, #20
 800b64a:	9a04      	ldr	r2, [sp, #16]
 800b64c:	68a1      	ldr	r1, [r4, #8]
 800b64e:	9301      	str	r3, [sp, #4]
 800b650:	4620      	mov	r0, r4
 800b652:	f002 f8f5 	bl	800d840 <_vfiprintf_r>
 800b656:	b002      	add	sp, #8
 800b658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b65c:	b004      	add	sp, #16
 800b65e:	4770      	bx	lr
 800b660:	200000cc 	.word	0x200000cc

0800b664 <_sbrk_r>:
 800b664:	b538      	push	{r3, r4, r5, lr}
 800b666:	4d06      	ldr	r5, [pc, #24]	; (800b680 <_sbrk_r+0x1c>)
 800b668:	2300      	movs	r3, #0
 800b66a:	4604      	mov	r4, r0
 800b66c:	4608      	mov	r0, r1
 800b66e:	602b      	str	r3, [r5, #0]
 800b670:	f003 fae2 	bl	800ec38 <_sbrk>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	d102      	bne.n	800b67e <_sbrk_r+0x1a>
 800b678:	682b      	ldr	r3, [r5, #0]
 800b67a:	b103      	cbz	r3, 800b67e <_sbrk_r+0x1a>
 800b67c:	6023      	str	r3, [r4, #0]
 800b67e:	bd38      	pop	{r3, r4, r5, pc}
 800b680:	20000b94 	.word	0x20000b94

0800b684 <sniprintf>:
 800b684:	b40c      	push	{r2, r3}
 800b686:	b530      	push	{r4, r5, lr}
 800b688:	4b17      	ldr	r3, [pc, #92]	; (800b6e8 <sniprintf+0x64>)
 800b68a:	1e0c      	subs	r4, r1, #0
 800b68c:	681d      	ldr	r5, [r3, #0]
 800b68e:	b09d      	sub	sp, #116	; 0x74
 800b690:	da08      	bge.n	800b6a4 <sniprintf+0x20>
 800b692:	238b      	movs	r3, #139	; 0x8b
 800b694:	602b      	str	r3, [r5, #0]
 800b696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b69a:	b01d      	add	sp, #116	; 0x74
 800b69c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6a0:	b002      	add	sp, #8
 800b6a2:	4770      	bx	lr
 800b6a4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b6a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b6ac:	bf14      	ite	ne
 800b6ae:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b6b2:	4623      	moveq	r3, r4
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	9307      	str	r3, [sp, #28]
 800b6b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6bc:	9002      	str	r0, [sp, #8]
 800b6be:	9006      	str	r0, [sp, #24]
 800b6c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b6c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b6c6:	ab21      	add	r3, sp, #132	; 0x84
 800b6c8:	a902      	add	r1, sp, #8
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	9301      	str	r3, [sp, #4]
 800b6ce:	f001 ff8d 	bl	800d5ec <_svfiprintf_r>
 800b6d2:	1c43      	adds	r3, r0, #1
 800b6d4:	bfbc      	itt	lt
 800b6d6:	238b      	movlt	r3, #139	; 0x8b
 800b6d8:	602b      	strlt	r3, [r5, #0]
 800b6da:	2c00      	cmp	r4, #0
 800b6dc:	d0dd      	beq.n	800b69a <sniprintf+0x16>
 800b6de:	9b02      	ldr	r3, [sp, #8]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	701a      	strb	r2, [r3, #0]
 800b6e4:	e7d9      	b.n	800b69a <sniprintf+0x16>
 800b6e6:	bf00      	nop
 800b6e8:	200000cc 	.word	0x200000cc

0800b6ec <siprintf>:
 800b6ec:	b40e      	push	{r1, r2, r3}
 800b6ee:	b500      	push	{lr}
 800b6f0:	b09c      	sub	sp, #112	; 0x70
 800b6f2:	ab1d      	add	r3, sp, #116	; 0x74
 800b6f4:	9002      	str	r0, [sp, #8]
 800b6f6:	9006      	str	r0, [sp, #24]
 800b6f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6fc:	4809      	ldr	r0, [pc, #36]	; (800b724 <siprintf+0x38>)
 800b6fe:	9107      	str	r1, [sp, #28]
 800b700:	9104      	str	r1, [sp, #16]
 800b702:	4909      	ldr	r1, [pc, #36]	; (800b728 <siprintf+0x3c>)
 800b704:	f853 2b04 	ldr.w	r2, [r3], #4
 800b708:	9105      	str	r1, [sp, #20]
 800b70a:	6800      	ldr	r0, [r0, #0]
 800b70c:	9301      	str	r3, [sp, #4]
 800b70e:	a902      	add	r1, sp, #8
 800b710:	f001 ff6c 	bl	800d5ec <_svfiprintf_r>
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	b01c      	add	sp, #112	; 0x70
 800b71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b720:	b003      	add	sp, #12
 800b722:	4770      	bx	lr
 800b724:	200000cc 	.word	0x200000cc
 800b728:	ffff0208 	.word	0xffff0208

0800b72c <time>:
 800b72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b72e:	4b0b      	ldr	r3, [pc, #44]	; (800b75c <time+0x30>)
 800b730:	2200      	movs	r2, #0
 800b732:	4669      	mov	r1, sp
 800b734:	4604      	mov	r4, r0
 800b736:	6818      	ldr	r0, [r3, #0]
 800b738:	f001 fa7c 	bl	800cc34 <_gettimeofday_r>
 800b73c:	2800      	cmp	r0, #0
 800b73e:	bfbe      	ittt	lt
 800b740:	f04f 32ff 	movlt.w	r2, #4294967295	; 0xffffffff
 800b744:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b748:	e9cd 2300 	strdlt	r2, r3, [sp]
 800b74c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b750:	b10c      	cbz	r4, 800b756 <time+0x2a>
 800b752:	e9c4 0100 	strd	r0, r1, [r4]
 800b756:	b004      	add	sp, #16
 800b758:	bd10      	pop	{r4, pc}
 800b75a:	bf00      	nop
 800b75c:	200000cc 	.word	0x200000cc

0800b760 <__tzcalc_limits>:
 800b760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b764:	4605      	mov	r5, r0
 800b766:	f001 fa77 	bl	800cc58 <__gettzinfo>
 800b76a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800b76e:	429d      	cmp	r5, r3
 800b770:	f340 8099 	ble.w	800b8a6 <__tzcalc_limits+0x146>
 800b774:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800b778:	18ac      	adds	r4, r5, r2
 800b77a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800b77e:	f240 126d 	movw	r2, #365	; 0x16d
 800b782:	10a4      	asrs	r4, r4, #2
 800b784:	fb02 4403 	mla	r4, r2, r3, r4
 800b788:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800b78c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800b790:	fb93 f3f2 	sdiv	r3, r3, r2
 800b794:	441c      	add	r4, r3
 800b796:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800b79a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800b79e:	fb95 fcf3 	sdiv	ip, r5, r3
 800b7a2:	fb03 5c1c 	mls	ip, r3, ip, r5
 800b7a6:	186a      	adds	r2, r5, r1
 800b7a8:	fabc f68c 	clz	r6, ip
 800b7ac:	fbb2 f2f3 	udiv	r2, r2, r3
 800b7b0:	f005 0303 	and.w	r3, r5, #3
 800b7b4:	4414      	add	r4, r2
 800b7b6:	2264      	movs	r2, #100	; 0x64
 800b7b8:	6045      	str	r5, [r0, #4]
 800b7ba:	fb95 f7f2 	sdiv	r7, r5, r2
 800b7be:	0976      	lsrs	r6, r6, #5
 800b7c0:	fb02 5717 	mls	r7, r2, r7, r5
 800b7c4:	4601      	mov	r1, r0
 800b7c6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	f04f 0a07 	mov.w	sl, #7
 800b7d0:	7a0d      	ldrb	r5, [r1, #8]
 800b7d2:	694b      	ldr	r3, [r1, #20]
 800b7d4:	2d4a      	cmp	r5, #74	; 0x4a
 800b7d6:	d12d      	bne.n	800b834 <__tzcalc_limits+0xd4>
 800b7d8:	9a00      	ldr	r2, [sp, #0]
 800b7da:	eb04 0e03 	add.w	lr, r4, r3
 800b7de:	b902      	cbnz	r2, 800b7e2 <__tzcalc_limits+0x82>
 800b7e0:	b917      	cbnz	r7, 800b7e8 <__tzcalc_limits+0x88>
 800b7e2:	f1bc 0f00 	cmp.w	ip, #0
 800b7e6:	d123      	bne.n	800b830 <__tzcalc_limits+0xd0>
 800b7e8:	2b3b      	cmp	r3, #59	; 0x3b
 800b7ea:	bfd4      	ite	le
 800b7ec:	2300      	movle	r3, #0
 800b7ee:	2301      	movgt	r3, #1
 800b7f0:	4473      	add	r3, lr
 800b7f2:	3b01      	subs	r3, #1
 800b7f4:	698d      	ldr	r5, [r1, #24]
 800b7f6:	4a2d      	ldr	r2, [pc, #180]	; (800b8ac <__tzcalc_limits+0x14c>)
 800b7f8:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800b7fc:	fbc3 5e02 	smlal	r5, lr, r3, r2
 800b800:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800b802:	18ed      	adds	r5, r5, r3
 800b804:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800b808:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800b80c:	3128      	adds	r1, #40	; 0x28
 800b80e:	458b      	cmp	fp, r1
 800b810:	d1de      	bne.n	800b7d0 <__tzcalc_limits+0x70>
 800b812:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 800b816:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 800b81a:	428c      	cmp	r4, r1
 800b81c:	eb72 0303 	sbcs.w	r3, r2, r3
 800b820:	bfb4      	ite	lt
 800b822:	2301      	movlt	r3, #1
 800b824:	2300      	movge	r3, #0
 800b826:	6003      	str	r3, [r0, #0]
 800b828:	2001      	movs	r0, #1
 800b82a:	b003      	add	sp, #12
 800b82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b830:	2300      	movs	r3, #0
 800b832:	e7dd      	b.n	800b7f0 <__tzcalc_limits+0x90>
 800b834:	2d44      	cmp	r5, #68	; 0x44
 800b836:	d101      	bne.n	800b83c <__tzcalc_limits+0xdc>
 800b838:	4423      	add	r3, r4
 800b83a:	e7db      	b.n	800b7f4 <__tzcalc_limits+0x94>
 800b83c:	9a00      	ldr	r2, [sp, #0]
 800b83e:	bb62      	cbnz	r2, 800b89a <__tzcalc_limits+0x13a>
 800b840:	2f00      	cmp	r7, #0
 800b842:	bf0c      	ite	eq
 800b844:	4635      	moveq	r5, r6
 800b846:	2501      	movne	r5, #1
 800b848:	68ca      	ldr	r2, [r1, #12]
 800b84a:	9201      	str	r2, [sp, #4]
 800b84c:	4a18      	ldr	r2, [pc, #96]	; (800b8b0 <__tzcalc_limits+0x150>)
 800b84e:	f04f 0930 	mov.w	r9, #48	; 0x30
 800b852:	fb09 2505 	mla	r5, r9, r5, r2
 800b856:	46a6      	mov	lr, r4
 800b858:	f04f 0800 	mov.w	r8, #0
 800b85c:	3d04      	subs	r5, #4
 800b85e:	9a01      	ldr	r2, [sp, #4]
 800b860:	f108 0801 	add.w	r8, r8, #1
 800b864:	4542      	cmp	r2, r8
 800b866:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800b86a:	dc18      	bgt.n	800b89e <__tzcalc_limits+0x13e>
 800b86c:	f10e 0504 	add.w	r5, lr, #4
 800b870:	fb95 f8fa 	sdiv	r8, r5, sl
 800b874:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800b878:	eba5 0808 	sub.w	r8, r5, r8
 800b87c:	ebb3 0808 	subs.w	r8, r3, r8
 800b880:	690b      	ldr	r3, [r1, #16]
 800b882:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b886:	bf48      	it	mi
 800b888:	f108 0807 	addmi.w	r8, r8, #7
 800b88c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800b890:	4443      	add	r3, r8
 800b892:	454b      	cmp	r3, r9
 800b894:	da05      	bge.n	800b8a2 <__tzcalc_limits+0x142>
 800b896:	4473      	add	r3, lr
 800b898:	e7ac      	b.n	800b7f4 <__tzcalc_limits+0x94>
 800b89a:	4635      	mov	r5, r6
 800b89c:	e7d4      	b.n	800b848 <__tzcalc_limits+0xe8>
 800b89e:	44ce      	add	lr, r9
 800b8a0:	e7dd      	b.n	800b85e <__tzcalc_limits+0xfe>
 800b8a2:	3b07      	subs	r3, #7
 800b8a4:	e7f5      	b.n	800b892 <__tzcalc_limits+0x132>
 800b8a6:	2000      	movs	r0, #0
 800b8a8:	e7bf      	b.n	800b82a <__tzcalc_limits+0xca>
 800b8aa:	bf00      	nop
 800b8ac:	00015180 	.word	0x00015180
 800b8b0:	08026e1c 	.word	0x08026e1c

0800b8b4 <__tz_lock>:
 800b8b4:	4801      	ldr	r0, [pc, #4]	; (800b8bc <__tz_lock+0x8>)
 800b8b6:	f001 ba84 	b.w	800cdc2 <__retarget_lock_acquire>
 800b8ba:	bf00      	nop
 800b8bc:	20000b90 	.word	0x20000b90

0800b8c0 <__tz_unlock>:
 800b8c0:	4801      	ldr	r0, [pc, #4]	; (800b8c8 <__tz_unlock+0x8>)
 800b8c2:	f001 ba80 	b.w	800cdc6 <__retarget_lock_release>
 800b8c6:	bf00      	nop
 800b8c8:	20000b90 	.word	0x20000b90

0800b8cc <_tzset_unlocked>:
 800b8cc:	4b01      	ldr	r3, [pc, #4]	; (800b8d4 <_tzset_unlocked+0x8>)
 800b8ce:	6818      	ldr	r0, [r3, #0]
 800b8d0:	f000 b802 	b.w	800b8d8 <_tzset_unlocked_r>
 800b8d4:	200000cc 	.word	0x200000cc

0800b8d8 <_tzset_unlocked_r>:
 800b8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8dc:	b08d      	sub	sp, #52	; 0x34
 800b8de:	4607      	mov	r7, r0
 800b8e0:	f001 f9ba 	bl	800cc58 <__gettzinfo>
 800b8e4:	49b0      	ldr	r1, [pc, #704]	; (800bba8 <_tzset_unlocked_r+0x2d0>)
 800b8e6:	4eb1      	ldr	r6, [pc, #708]	; (800bbac <_tzset_unlocked_r+0x2d4>)
 800b8e8:	4605      	mov	r5, r0
 800b8ea:	4638      	mov	r0, r7
 800b8ec:	f001 f99a 	bl	800cc24 <_getenv_r>
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	b970      	cbnz	r0, 800b912 <_tzset_unlocked_r+0x3a>
 800b8f4:	4bae      	ldr	r3, [pc, #696]	; (800bbb0 <_tzset_unlocked_r+0x2d8>)
 800b8f6:	4aaf      	ldr	r2, [pc, #700]	; (800bbb4 <_tzset_unlocked_r+0x2dc>)
 800b8f8:	6018      	str	r0, [r3, #0]
 800b8fa:	4baf      	ldr	r3, [pc, #700]	; (800bbb8 <_tzset_unlocked_r+0x2e0>)
 800b8fc:	6018      	str	r0, [r3, #0]
 800b8fe:	4baf      	ldr	r3, [pc, #700]	; (800bbbc <_tzset_unlocked_r+0x2e4>)
 800b900:	6830      	ldr	r0, [r6, #0]
 800b902:	e9c3 2200 	strd	r2, r2, [r3]
 800b906:	f7ff f93b 	bl	800ab80 <free>
 800b90a:	6034      	str	r4, [r6, #0]
 800b90c:	b00d      	add	sp, #52	; 0x34
 800b90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b912:	6831      	ldr	r1, [r6, #0]
 800b914:	2900      	cmp	r1, #0
 800b916:	d162      	bne.n	800b9de <_tzset_unlocked_r+0x106>
 800b918:	6830      	ldr	r0, [r6, #0]
 800b91a:	f7ff f931 	bl	800ab80 <free>
 800b91e:	4620      	mov	r0, r4
 800b920:	f7f4 fcc6 	bl	80002b0 <strlen>
 800b924:	1c41      	adds	r1, r0, #1
 800b926:	4638      	mov	r0, r7
 800b928:	f7ff f9a6 	bl	800ac78 <_malloc_r>
 800b92c:	6030      	str	r0, [r6, #0]
 800b92e:	2800      	cmp	r0, #0
 800b930:	d15a      	bne.n	800b9e8 <_tzset_unlocked_r+0x110>
 800b932:	7823      	ldrb	r3, [r4, #0]
 800b934:	4aa2      	ldr	r2, [pc, #648]	; (800bbc0 <_tzset_unlocked_r+0x2e8>)
 800b936:	49a3      	ldr	r1, [pc, #652]	; (800bbc4 <_tzset_unlocked_r+0x2ec>)
 800b938:	2b3a      	cmp	r3, #58	; 0x3a
 800b93a:	bf08      	it	eq
 800b93c:	3401      	addeq	r4, #1
 800b93e:	ae0a      	add	r6, sp, #40	; 0x28
 800b940:	4633      	mov	r3, r6
 800b942:	4620      	mov	r0, r4
 800b944:	f002 f8ac 	bl	800daa0 <siscanf>
 800b948:	2800      	cmp	r0, #0
 800b94a:	dddf      	ble.n	800b90c <_tzset_unlocked_r+0x34>
 800b94c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94e:	18e7      	adds	r7, r4, r3
 800b950:	5ce3      	ldrb	r3, [r4, r3]
 800b952:	2b2d      	cmp	r3, #45	; 0x2d
 800b954:	d14c      	bne.n	800b9f0 <_tzset_unlocked_r+0x118>
 800b956:	3701      	adds	r7, #1
 800b958:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800b95c:	f10d 0a20 	add.w	sl, sp, #32
 800b960:	f10d 0b1e 	add.w	fp, sp, #30
 800b964:	2400      	movs	r4, #0
 800b966:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800b96a:	4997      	ldr	r1, [pc, #604]	; (800bbc8 <_tzset_unlocked_r+0x2f0>)
 800b96c:	9603      	str	r6, [sp, #12]
 800b96e:	f8cd b000 	str.w	fp, [sp]
 800b972:	4633      	mov	r3, r6
 800b974:	aa07      	add	r2, sp, #28
 800b976:	4638      	mov	r0, r7
 800b978:	f8ad 401e 	strh.w	r4, [sp, #30]
 800b97c:	f8ad 4020 	strh.w	r4, [sp, #32]
 800b980:	f002 f88e 	bl	800daa0 <siscanf>
 800b984:	42a0      	cmp	r0, r4
 800b986:	ddc1      	ble.n	800b90c <_tzset_unlocked_r+0x34>
 800b988:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800b98c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800b990:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800bbd4 <_tzset_unlocked_r+0x2fc>
 800b994:	213c      	movs	r1, #60	; 0x3c
 800b996:	fb01 3302 	mla	r3, r1, r2, r3
 800b99a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800b99e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800b9a2:	fb01 3302 	mla	r3, r1, r2, r3
 800b9a6:	fb08 f303 	mul.w	r3, r8, r3
 800b9aa:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800bbbc <_tzset_unlocked_r+0x2e4>
 800b9ae:	62ab      	str	r3, [r5, #40]	; 0x28
 800b9b0:	4b83      	ldr	r3, [pc, #524]	; (800bbc0 <_tzset_unlocked_r+0x2e8>)
 800b9b2:	f8c8 3000 	str.w	r3, [r8]
 800b9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b8:	4982      	ldr	r1, [pc, #520]	; (800bbc4 <_tzset_unlocked_r+0x2ec>)
 800b9ba:	441f      	add	r7, r3
 800b9bc:	464a      	mov	r2, r9
 800b9be:	4633      	mov	r3, r6
 800b9c0:	4638      	mov	r0, r7
 800b9c2:	f002 f86d 	bl	800daa0 <siscanf>
 800b9c6:	42a0      	cmp	r0, r4
 800b9c8:	dc18      	bgt.n	800b9fc <_tzset_unlocked_r+0x124>
 800b9ca:	f8d8 3000 	ldr.w	r3, [r8]
 800b9ce:	f8c8 3004 	str.w	r3, [r8, #4]
 800b9d2:	4b77      	ldr	r3, [pc, #476]	; (800bbb0 <_tzset_unlocked_r+0x2d8>)
 800b9d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800b9d6:	601a      	str	r2, [r3, #0]
 800b9d8:	4b77      	ldr	r3, [pc, #476]	; (800bbb8 <_tzset_unlocked_r+0x2e0>)
 800b9da:	601c      	str	r4, [r3, #0]
 800b9dc:	e796      	b.n	800b90c <_tzset_unlocked_r+0x34>
 800b9de:	f7f4 fcbf 	bl	8000360 <strcmp>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d198      	bne.n	800b918 <_tzset_unlocked_r+0x40>
 800b9e6:	e791      	b.n	800b90c <_tzset_unlocked_r+0x34>
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	f002 f8ca 	bl	800db82 <strcpy>
 800b9ee:	e7a0      	b.n	800b932 <_tzset_unlocked_r+0x5a>
 800b9f0:	2b2b      	cmp	r3, #43	; 0x2b
 800b9f2:	bf08      	it	eq
 800b9f4:	3701      	addeq	r7, #1
 800b9f6:	f04f 0801 	mov.w	r8, #1
 800b9fa:	e7af      	b.n	800b95c <_tzset_unlocked_r+0x84>
 800b9fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9fe:	f8c8 9004 	str.w	r9, [r8, #4]
 800ba02:	18fc      	adds	r4, r7, r3
 800ba04:	5cfb      	ldrb	r3, [r7, r3]
 800ba06:	2b2d      	cmp	r3, #45	; 0x2d
 800ba08:	f040 808b 	bne.w	800bb22 <_tzset_unlocked_r+0x24a>
 800ba0c:	3401      	adds	r4, #1
 800ba0e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ba12:	2300      	movs	r3, #0
 800ba14:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ba18:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ba1c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ba20:	930a      	str	r3, [sp, #40]	; 0x28
 800ba22:	e9cd a602 	strd	sl, r6, [sp, #8]
 800ba26:	e9cd b600 	strd	fp, r6, [sp]
 800ba2a:	4967      	ldr	r1, [pc, #412]	; (800bbc8 <_tzset_unlocked_r+0x2f0>)
 800ba2c:	4633      	mov	r3, r6
 800ba2e:	aa07      	add	r2, sp, #28
 800ba30:	4620      	mov	r0, r4
 800ba32:	f002 f835 	bl	800daa0 <siscanf>
 800ba36:	2800      	cmp	r0, #0
 800ba38:	dc78      	bgt.n	800bb2c <_tzset_unlocked_r+0x254>
 800ba3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800ba3c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 800ba40:	652b      	str	r3, [r5, #80]	; 0x50
 800ba42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba44:	462f      	mov	r7, r5
 800ba46:	441c      	add	r4, r3
 800ba48:	f04f 0900 	mov.w	r9, #0
 800ba4c:	7823      	ldrb	r3, [r4, #0]
 800ba4e:	2b2c      	cmp	r3, #44	; 0x2c
 800ba50:	bf08      	it	eq
 800ba52:	3401      	addeq	r4, #1
 800ba54:	f894 8000 	ldrb.w	r8, [r4]
 800ba58:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800ba5c:	d178      	bne.n	800bb50 <_tzset_unlocked_r+0x278>
 800ba5e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800ba62:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800ba66:	ab09      	add	r3, sp, #36	; 0x24
 800ba68:	9300      	str	r3, [sp, #0]
 800ba6a:	4958      	ldr	r1, [pc, #352]	; (800bbcc <_tzset_unlocked_r+0x2f4>)
 800ba6c:	9603      	str	r6, [sp, #12]
 800ba6e:	4633      	mov	r3, r6
 800ba70:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ba74:	4620      	mov	r0, r4
 800ba76:	f002 f813 	bl	800daa0 <siscanf>
 800ba7a:	2803      	cmp	r0, #3
 800ba7c:	f47f af46 	bne.w	800b90c <_tzset_unlocked_r+0x34>
 800ba80:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ba84:	1e4b      	subs	r3, r1, #1
 800ba86:	2b0b      	cmp	r3, #11
 800ba88:	f63f af40 	bhi.w	800b90c <_tzset_unlocked_r+0x34>
 800ba8c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ba90:	1e53      	subs	r3, r2, #1
 800ba92:	2b04      	cmp	r3, #4
 800ba94:	f63f af3a 	bhi.w	800b90c <_tzset_unlocked_r+0x34>
 800ba98:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ba9c:	2b06      	cmp	r3, #6
 800ba9e:	f63f af35 	bhi.w	800b90c <_tzset_unlocked_r+0x34>
 800baa2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800baa6:	f887 8008 	strb.w	r8, [r7, #8]
 800baaa:	617b      	str	r3, [r7, #20]
 800baac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baae:	eb04 0803 	add.w	r8, r4, r3
 800bab2:	2302      	movs	r3, #2
 800bab4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800bab8:	2300      	movs	r3, #0
 800baba:	f8ad 301e 	strh.w	r3, [sp, #30]
 800babe:	f8ad 3020 	strh.w	r3, [sp, #32]
 800bac2:	930a      	str	r3, [sp, #40]	; 0x28
 800bac4:	f898 3000 	ldrb.w	r3, [r8]
 800bac8:	2b2f      	cmp	r3, #47	; 0x2f
 800baca:	d109      	bne.n	800bae0 <_tzset_unlocked_r+0x208>
 800bacc:	e9cd a602 	strd	sl, r6, [sp, #8]
 800bad0:	e9cd b600 	strd	fp, r6, [sp]
 800bad4:	493e      	ldr	r1, [pc, #248]	; (800bbd0 <_tzset_unlocked_r+0x2f8>)
 800bad6:	4633      	mov	r3, r6
 800bad8:	aa07      	add	r2, sp, #28
 800bada:	4640      	mov	r0, r8
 800badc:	f001 ffe0 	bl	800daa0 <siscanf>
 800bae0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800bae4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bae8:	213c      	movs	r1, #60	; 0x3c
 800baea:	fb01 3302 	mla	r3, r1, r2, r3
 800baee:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800baf2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800baf6:	fb01 3302 	mla	r3, r1, r2, r3
 800bafa:	61bb      	str	r3, [r7, #24]
 800bafc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bafe:	3728      	adds	r7, #40	; 0x28
 800bb00:	4444      	add	r4, r8
 800bb02:	f1b9 0f00 	cmp.w	r9, #0
 800bb06:	d020      	beq.n	800bb4a <_tzset_unlocked_r+0x272>
 800bb08:	6868      	ldr	r0, [r5, #4]
 800bb0a:	f7ff fe29 	bl	800b760 <__tzcalc_limits>
 800bb0e:	4b28      	ldr	r3, [pc, #160]	; (800bbb0 <_tzset_unlocked_r+0x2d8>)
 800bb10:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800bb12:	601a      	str	r2, [r3, #0]
 800bb14:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800bb16:	1a9b      	subs	r3, r3, r2
 800bb18:	4a27      	ldr	r2, [pc, #156]	; (800bbb8 <_tzset_unlocked_r+0x2e0>)
 800bb1a:	bf18      	it	ne
 800bb1c:	2301      	movne	r3, #1
 800bb1e:	6013      	str	r3, [r2, #0]
 800bb20:	e6f4      	b.n	800b90c <_tzset_unlocked_r+0x34>
 800bb22:	2b2b      	cmp	r3, #43	; 0x2b
 800bb24:	bf08      	it	eq
 800bb26:	3401      	addeq	r4, #1
 800bb28:	2701      	movs	r7, #1
 800bb2a:	e772      	b.n	800ba12 <_tzset_unlocked_r+0x13a>
 800bb2c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800bb30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800bb34:	213c      	movs	r1, #60	; 0x3c
 800bb36:	fb01 3302 	mla	r3, r1, r2, r3
 800bb3a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800bb3e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800bb42:	fb01 3302 	mla	r3, r1, r2, r3
 800bb46:	437b      	muls	r3, r7
 800bb48:	e77a      	b.n	800ba40 <_tzset_unlocked_r+0x168>
 800bb4a:	f04f 0901 	mov.w	r9, #1
 800bb4e:	e77d      	b.n	800ba4c <_tzset_unlocked_r+0x174>
 800bb50:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800bb54:	bf06      	itte	eq
 800bb56:	3401      	addeq	r4, #1
 800bb58:	4643      	moveq	r3, r8
 800bb5a:	2344      	movne	r3, #68	; 0x44
 800bb5c:	220a      	movs	r2, #10
 800bb5e:	a90b      	add	r1, sp, #44	; 0x2c
 800bb60:	4620      	mov	r0, r4
 800bb62:	9305      	str	r3, [sp, #20]
 800bb64:	f002 f89e 	bl	800dca4 <strtoul>
 800bb68:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800bb6c:	9b05      	ldr	r3, [sp, #20]
 800bb6e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800bb72:	45a0      	cmp	r8, r4
 800bb74:	d114      	bne.n	800bba0 <_tzset_unlocked_r+0x2c8>
 800bb76:	234d      	movs	r3, #77	; 0x4d
 800bb78:	f1b9 0f00 	cmp.w	r9, #0
 800bb7c:	d107      	bne.n	800bb8e <_tzset_unlocked_r+0x2b6>
 800bb7e:	722b      	strb	r3, [r5, #8]
 800bb80:	2103      	movs	r1, #3
 800bb82:	2302      	movs	r3, #2
 800bb84:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800bb88:	f8c5 9014 	str.w	r9, [r5, #20]
 800bb8c:	e791      	b.n	800bab2 <_tzset_unlocked_r+0x1da>
 800bb8e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800bb92:	220b      	movs	r2, #11
 800bb94:	2301      	movs	r3, #1
 800bb96:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	63eb      	str	r3, [r5, #60]	; 0x3c
 800bb9e:	e788      	b.n	800bab2 <_tzset_unlocked_r+0x1da>
 800bba0:	b280      	uxth	r0, r0
 800bba2:	723b      	strb	r3, [r7, #8]
 800bba4:	6178      	str	r0, [r7, #20]
 800bba6:	e784      	b.n	800bab2 <_tzset_unlocked_r+0x1da>
 800bba8:	08026eae 	.word	0x08026eae
 800bbac:	20000b80 	.word	0x20000b80
 800bbb0:	20000b88 	.word	0x20000b88
 800bbb4:	08026eb1 	.word	0x08026eb1
 800bbb8:	20000b84 	.word	0x20000b84
 800bbbc:	20000130 	.word	0x20000130
 800bbc0:	20000b73 	.word	0x20000b73
 800bbc4:	08026eb5 	.word	0x08026eb5
 800bbc8:	08026ed8 	.word	0x08026ed8
 800bbcc:	08026ec4 	.word	0x08026ec4
 800bbd0:	08026ed7 	.word	0x08026ed7
 800bbd4:	20000b68 	.word	0x20000b68

0800bbd8 <asctime>:
 800bbd8:	4b0d      	ldr	r3, [pc, #52]	; (800bc10 <asctime+0x38>)
 800bbda:	b570      	push	{r4, r5, r6, lr}
 800bbdc:	681d      	ldr	r5, [r3, #0]
 800bbde:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 800bbe0:	4604      	mov	r4, r0
 800bbe2:	b976      	cbnz	r6, 800bc02 <asctime+0x2a>
 800bbe4:	201a      	movs	r0, #26
 800bbe6:	f7fe ffc3 	bl	800ab70 <malloc>
 800bbea:	4602      	mov	r2, r0
 800bbec:	6428      	str	r0, [r5, #64]	; 0x40
 800bbee:	b920      	cbnz	r0, 800bbfa <asctime+0x22>
 800bbf0:	4b08      	ldr	r3, [pc, #32]	; (800bc14 <asctime+0x3c>)
 800bbf2:	4809      	ldr	r0, [pc, #36]	; (800bc18 <asctime+0x40>)
 800bbf4:	2137      	movs	r1, #55	; 0x37
 800bbf6:	f000 f837 	bl	800bc68 <__assert_func>
 800bbfa:	221a      	movs	r2, #26
 800bbfc:	4631      	mov	r1, r6
 800bbfe:	f7fe ffc7 	bl	800ab90 <memset>
 800bc02:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800bc04:	4620      	mov	r0, r4
 800bc06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bc0a:	f000 b807 	b.w	800bc1c <asctime_r>
 800bc0e:	bf00      	nop
 800bc10:	200000cc 	.word	0x200000cc
 800bc14:	08026da8 	.word	0x08026da8
 800bc18:	08026eea 	.word	0x08026eea

0800bc1c <asctime_r>:
 800bc1c:	b510      	push	{r4, lr}
 800bc1e:	460c      	mov	r4, r1
 800bc20:	6941      	ldr	r1, [r0, #20]
 800bc22:	6903      	ldr	r3, [r0, #16]
 800bc24:	6982      	ldr	r2, [r0, #24]
 800bc26:	b086      	sub	sp, #24
 800bc28:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 800bc2c:	9104      	str	r1, [sp, #16]
 800bc2e:	6801      	ldr	r1, [r0, #0]
 800bc30:	9103      	str	r1, [sp, #12]
 800bc32:	6841      	ldr	r1, [r0, #4]
 800bc34:	9102      	str	r1, [sp, #8]
 800bc36:	6881      	ldr	r1, [r0, #8]
 800bc38:	9101      	str	r1, [sp, #4]
 800bc3a:	68c1      	ldr	r1, [r0, #12]
 800bc3c:	9100      	str	r1, [sp, #0]
 800bc3e:	4907      	ldr	r1, [pc, #28]	; (800bc5c <asctime_r+0x40>)
 800bc40:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bc44:	440b      	add	r3, r1
 800bc46:	4906      	ldr	r1, [pc, #24]	; (800bc60 <asctime_r+0x44>)
 800bc48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800bc4c:	440a      	add	r2, r1
 800bc4e:	4620      	mov	r0, r4
 800bc50:	4904      	ldr	r1, [pc, #16]	; (800bc64 <asctime_r+0x48>)
 800bc52:	f7ff fd4b 	bl	800b6ec <siprintf>
 800bc56:	4620      	mov	r0, r4
 800bc58:	b006      	add	sp, #24
 800bc5a:	bd10      	pop	{r4, pc}
 800bc5c:	08026f7b 	.word	0x08026f7b
 800bc60:	08026f66 	.word	0x08026f66
 800bc64:	08026f46 	.word	0x08026f46

0800bc68 <__assert_func>:
 800bc68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc6a:	4614      	mov	r4, r2
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <__assert_func+0x2c>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4605      	mov	r5, r0
 800bc74:	68d8      	ldr	r0, [r3, #12]
 800bc76:	b14c      	cbz	r4, 800bc8c <__assert_func+0x24>
 800bc78:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <__assert_func+0x30>)
 800bc7a:	9100      	str	r1, [sp, #0]
 800bc7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bc80:	4906      	ldr	r1, [pc, #24]	; (800bc9c <__assert_func+0x34>)
 800bc82:	462b      	mov	r3, r5
 800bc84:	f000 ff60 	bl	800cb48 <fiprintf>
 800bc88:	f002 f8e8 	bl	800de5c <abort>
 800bc8c:	4b04      	ldr	r3, [pc, #16]	; (800bca0 <__assert_func+0x38>)
 800bc8e:	461c      	mov	r4, r3
 800bc90:	e7f3      	b.n	800bc7a <__assert_func+0x12>
 800bc92:	bf00      	nop
 800bc94:	200000cc 	.word	0x200000cc
 800bc98:	08026f9f 	.word	0x08026f9f
 800bc9c:	08026fac 	.word	0x08026fac
 800bca0:	08026f65 	.word	0x08026f65

0800bca4 <quorem>:
 800bca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca8:	6903      	ldr	r3, [r0, #16]
 800bcaa:	690c      	ldr	r4, [r1, #16]
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	4607      	mov	r7, r0
 800bcb0:	f2c0 8081 	blt.w	800bdb6 <quorem+0x112>
 800bcb4:	3c01      	subs	r4, #1
 800bcb6:	f101 0814 	add.w	r8, r1, #20
 800bcba:	f100 0514 	add.w	r5, r0, #20
 800bcbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcc2:	9301      	str	r3, [sp, #4]
 800bcc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bcc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bccc:	3301      	adds	r3, #1
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bcd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bcd8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bcdc:	d331      	bcc.n	800bd42 <quorem+0x9e>
 800bcde:	f04f 0e00 	mov.w	lr, #0
 800bce2:	4640      	mov	r0, r8
 800bce4:	46ac      	mov	ip, r5
 800bce6:	46f2      	mov	sl, lr
 800bce8:	f850 2b04 	ldr.w	r2, [r0], #4
 800bcec:	b293      	uxth	r3, r2
 800bcee:	fb06 e303 	mla	r3, r6, r3, lr
 800bcf2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	ebaa 0303 	sub.w	r3, sl, r3
 800bcfc:	f8dc a000 	ldr.w	sl, [ip]
 800bd00:	0c12      	lsrs	r2, r2, #16
 800bd02:	fa13 f38a 	uxtah	r3, r3, sl
 800bd06:	fb06 e202 	mla	r2, r6, r2, lr
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	9b00      	ldr	r3, [sp, #0]
 800bd0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bd12:	b292      	uxth	r2, r2
 800bd14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bd18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd1c:	f8bd 3000 	ldrh.w	r3, [sp]
 800bd20:	4581      	cmp	r9, r0
 800bd22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd26:	f84c 3b04 	str.w	r3, [ip], #4
 800bd2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bd2e:	d2db      	bcs.n	800bce8 <quorem+0x44>
 800bd30:	f855 300b 	ldr.w	r3, [r5, fp]
 800bd34:	b92b      	cbnz	r3, 800bd42 <quorem+0x9e>
 800bd36:	9b01      	ldr	r3, [sp, #4]
 800bd38:	3b04      	subs	r3, #4
 800bd3a:	429d      	cmp	r5, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	d32e      	bcc.n	800bd9e <quorem+0xfa>
 800bd40:	613c      	str	r4, [r7, #16]
 800bd42:	4638      	mov	r0, r7
 800bd44:	f001 fade 	bl	800d304 <__mcmp>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	db24      	blt.n	800bd96 <quorem+0xf2>
 800bd4c:	3601      	adds	r6, #1
 800bd4e:	4628      	mov	r0, r5
 800bd50:	f04f 0c00 	mov.w	ip, #0
 800bd54:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd58:	f8d0 e000 	ldr.w	lr, [r0]
 800bd5c:	b293      	uxth	r3, r2
 800bd5e:	ebac 0303 	sub.w	r3, ip, r3
 800bd62:	0c12      	lsrs	r2, r2, #16
 800bd64:	fa13 f38e 	uxtah	r3, r3, lr
 800bd68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd76:	45c1      	cmp	r9, r8
 800bd78:	f840 3b04 	str.w	r3, [r0], #4
 800bd7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd80:	d2e8      	bcs.n	800bd54 <quorem+0xb0>
 800bd82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd8a:	b922      	cbnz	r2, 800bd96 <quorem+0xf2>
 800bd8c:	3b04      	subs	r3, #4
 800bd8e:	429d      	cmp	r5, r3
 800bd90:	461a      	mov	r2, r3
 800bd92:	d30a      	bcc.n	800bdaa <quorem+0x106>
 800bd94:	613c      	str	r4, [r7, #16]
 800bd96:	4630      	mov	r0, r6
 800bd98:	b003      	add	sp, #12
 800bd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9e:	6812      	ldr	r2, [r2, #0]
 800bda0:	3b04      	subs	r3, #4
 800bda2:	2a00      	cmp	r2, #0
 800bda4:	d1cc      	bne.n	800bd40 <quorem+0x9c>
 800bda6:	3c01      	subs	r4, #1
 800bda8:	e7c7      	b.n	800bd3a <quorem+0x96>
 800bdaa:	6812      	ldr	r2, [r2, #0]
 800bdac:	3b04      	subs	r3, #4
 800bdae:	2a00      	cmp	r2, #0
 800bdb0:	d1f0      	bne.n	800bd94 <quorem+0xf0>
 800bdb2:	3c01      	subs	r4, #1
 800bdb4:	e7eb      	b.n	800bd8e <quorem+0xea>
 800bdb6:	2000      	movs	r0, #0
 800bdb8:	e7ee      	b.n	800bd98 <quorem+0xf4>
 800bdba:	0000      	movs	r0, r0
 800bdbc:	0000      	movs	r0, r0
	...

0800bdc0 <_dtoa_r>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	ed2d 8b04 	vpush	{d8-d9}
 800bdc8:	ec57 6b10 	vmov	r6, r7, d0
 800bdcc:	b093      	sub	sp, #76	; 0x4c
 800bdce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bdd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bdd4:	9106      	str	r1, [sp, #24]
 800bdd6:	ee10 aa10 	vmov	sl, s0
 800bdda:	4604      	mov	r4, r0
 800bddc:	9209      	str	r2, [sp, #36]	; 0x24
 800bdde:	930c      	str	r3, [sp, #48]	; 0x30
 800bde0:	46bb      	mov	fp, r7
 800bde2:	b975      	cbnz	r5, 800be02 <_dtoa_r+0x42>
 800bde4:	2010      	movs	r0, #16
 800bde6:	f7fe fec3 	bl	800ab70 <malloc>
 800bdea:	4602      	mov	r2, r0
 800bdec:	6260      	str	r0, [r4, #36]	; 0x24
 800bdee:	b920      	cbnz	r0, 800bdfa <_dtoa_r+0x3a>
 800bdf0:	4ba7      	ldr	r3, [pc, #668]	; (800c090 <_dtoa_r+0x2d0>)
 800bdf2:	21ea      	movs	r1, #234	; 0xea
 800bdf4:	48a7      	ldr	r0, [pc, #668]	; (800c094 <_dtoa_r+0x2d4>)
 800bdf6:	f7ff ff37 	bl	800bc68 <__assert_func>
 800bdfa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bdfe:	6005      	str	r5, [r0, #0]
 800be00:	60c5      	str	r5, [r0, #12]
 800be02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be04:	6819      	ldr	r1, [r3, #0]
 800be06:	b151      	cbz	r1, 800be1e <_dtoa_r+0x5e>
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	604a      	str	r2, [r1, #4]
 800be0c:	2301      	movs	r3, #1
 800be0e:	4093      	lsls	r3, r2
 800be10:	608b      	str	r3, [r1, #8]
 800be12:	4620      	mov	r0, r4
 800be14:	f001 f834 	bl	800ce80 <_Bfree>
 800be18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]
 800be1e:	1e3b      	subs	r3, r7, #0
 800be20:	bfaa      	itet	ge
 800be22:	2300      	movge	r3, #0
 800be24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800be28:	f8c8 3000 	strge.w	r3, [r8]
 800be2c:	4b9a      	ldr	r3, [pc, #616]	; (800c098 <_dtoa_r+0x2d8>)
 800be2e:	bfbc      	itt	lt
 800be30:	2201      	movlt	r2, #1
 800be32:	f8c8 2000 	strlt.w	r2, [r8]
 800be36:	ea33 030b 	bics.w	r3, r3, fp
 800be3a:	d11b      	bne.n	800be74 <_dtoa_r+0xb4>
 800be3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be3e:	f242 730f 	movw	r3, #9999	; 0x270f
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800be48:	4333      	orrs	r3, r6
 800be4a:	f000 8592 	beq.w	800c972 <_dtoa_r+0xbb2>
 800be4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be50:	b963      	cbnz	r3, 800be6c <_dtoa_r+0xac>
 800be52:	4b92      	ldr	r3, [pc, #584]	; (800c09c <_dtoa_r+0x2dc>)
 800be54:	e022      	b.n	800be9c <_dtoa_r+0xdc>
 800be56:	4b92      	ldr	r3, [pc, #584]	; (800c0a0 <_dtoa_r+0x2e0>)
 800be58:	9301      	str	r3, [sp, #4]
 800be5a:	3308      	adds	r3, #8
 800be5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be5e:	6013      	str	r3, [r2, #0]
 800be60:	9801      	ldr	r0, [sp, #4]
 800be62:	b013      	add	sp, #76	; 0x4c
 800be64:	ecbd 8b04 	vpop	{d8-d9}
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	4b8b      	ldr	r3, [pc, #556]	; (800c09c <_dtoa_r+0x2dc>)
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	3303      	adds	r3, #3
 800be72:	e7f3      	b.n	800be5c <_dtoa_r+0x9c>
 800be74:	2200      	movs	r2, #0
 800be76:	2300      	movs	r3, #0
 800be78:	4650      	mov	r0, sl
 800be7a:	4659      	mov	r1, fp
 800be7c:	f7f4 fe9e 	bl	8000bbc <__aeabi_dcmpeq>
 800be80:	ec4b ab19 	vmov	d9, sl, fp
 800be84:	4680      	mov	r8, r0
 800be86:	b158      	cbz	r0, 800bea0 <_dtoa_r+0xe0>
 800be88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be8a:	2301      	movs	r3, #1
 800be8c:	6013      	str	r3, [r2, #0]
 800be8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be90:	2b00      	cmp	r3, #0
 800be92:	f000 856b 	beq.w	800c96c <_dtoa_r+0xbac>
 800be96:	4883      	ldr	r0, [pc, #524]	; (800c0a4 <_dtoa_r+0x2e4>)
 800be98:	6018      	str	r0, [r3, #0]
 800be9a:	1e43      	subs	r3, r0, #1
 800be9c:	9301      	str	r3, [sp, #4]
 800be9e:	e7df      	b.n	800be60 <_dtoa_r+0xa0>
 800bea0:	ec4b ab10 	vmov	d0, sl, fp
 800bea4:	aa10      	add	r2, sp, #64	; 0x40
 800bea6:	a911      	add	r1, sp, #68	; 0x44
 800bea8:	4620      	mov	r0, r4
 800beaa:	f001 fad1 	bl	800d450 <__d2b>
 800beae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800beb2:	ee08 0a10 	vmov	s16, r0
 800beb6:	2d00      	cmp	r5, #0
 800beb8:	f000 8084 	beq.w	800bfc4 <_dtoa_r+0x204>
 800bebc:	ee19 3a90 	vmov	r3, s19
 800bec0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bec4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bec8:	4656      	mov	r6, sl
 800beca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bece:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bed2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bed6:	4b74      	ldr	r3, [pc, #464]	; (800c0a8 <_dtoa_r+0x2e8>)
 800bed8:	2200      	movs	r2, #0
 800beda:	4630      	mov	r0, r6
 800bedc:	4639      	mov	r1, r7
 800bede:	f7f4 fa4d 	bl	800037c <__aeabi_dsub>
 800bee2:	a365      	add	r3, pc, #404	; (adr r3, 800c078 <_dtoa_r+0x2b8>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 fc00 	bl	80006ec <__aeabi_dmul>
 800beec:	a364      	add	r3, pc, #400	; (adr r3, 800c080 <_dtoa_r+0x2c0>)
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	f7f4 fa45 	bl	8000380 <__adddf3>
 800bef6:	4606      	mov	r6, r0
 800bef8:	4628      	mov	r0, r5
 800befa:	460f      	mov	r7, r1
 800befc:	f7f4 fb8c 	bl	8000618 <__aeabi_i2d>
 800bf00:	a361      	add	r3, pc, #388	; (adr r3, 800c088 <_dtoa_r+0x2c8>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f7f4 fbf1 	bl	80006ec <__aeabi_dmul>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4630      	mov	r0, r6
 800bf10:	4639      	mov	r1, r7
 800bf12:	f7f4 fa35 	bl	8000380 <__adddf3>
 800bf16:	4606      	mov	r6, r0
 800bf18:	460f      	mov	r7, r1
 800bf1a:	f7f4 fe97 	bl	8000c4c <__aeabi_d2iz>
 800bf1e:	2200      	movs	r2, #0
 800bf20:	9000      	str	r0, [sp, #0]
 800bf22:	2300      	movs	r3, #0
 800bf24:	4630      	mov	r0, r6
 800bf26:	4639      	mov	r1, r7
 800bf28:	f7f4 fe52 	bl	8000bd0 <__aeabi_dcmplt>
 800bf2c:	b150      	cbz	r0, 800bf44 <_dtoa_r+0x184>
 800bf2e:	9800      	ldr	r0, [sp, #0]
 800bf30:	f7f4 fb72 	bl	8000618 <__aeabi_i2d>
 800bf34:	4632      	mov	r2, r6
 800bf36:	463b      	mov	r3, r7
 800bf38:	f7f4 fe40 	bl	8000bbc <__aeabi_dcmpeq>
 800bf3c:	b910      	cbnz	r0, 800bf44 <_dtoa_r+0x184>
 800bf3e:	9b00      	ldr	r3, [sp, #0]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	9b00      	ldr	r3, [sp, #0]
 800bf46:	2b16      	cmp	r3, #22
 800bf48:	d85a      	bhi.n	800c000 <_dtoa_r+0x240>
 800bf4a:	9a00      	ldr	r2, [sp, #0]
 800bf4c:	4b57      	ldr	r3, [pc, #348]	; (800c0ac <_dtoa_r+0x2ec>)
 800bf4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	ec51 0b19 	vmov	r0, r1, d9
 800bf5a:	f7f4 fe39 	bl	8000bd0 <__aeabi_dcmplt>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d050      	beq.n	800c004 <_dtoa_r+0x244>
 800bf62:	9b00      	ldr	r3, [sp, #0]
 800bf64:	3b01      	subs	r3, #1
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	2300      	movs	r3, #0
 800bf6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf6e:	1b5d      	subs	r5, r3, r5
 800bf70:	1e6b      	subs	r3, r5, #1
 800bf72:	9305      	str	r3, [sp, #20]
 800bf74:	bf45      	ittet	mi
 800bf76:	f1c5 0301 	rsbmi	r3, r5, #1
 800bf7a:	9304      	strmi	r3, [sp, #16]
 800bf7c:	2300      	movpl	r3, #0
 800bf7e:	2300      	movmi	r3, #0
 800bf80:	bf4c      	ite	mi
 800bf82:	9305      	strmi	r3, [sp, #20]
 800bf84:	9304      	strpl	r3, [sp, #16]
 800bf86:	9b00      	ldr	r3, [sp, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	db3d      	blt.n	800c008 <_dtoa_r+0x248>
 800bf8c:	9b05      	ldr	r3, [sp, #20]
 800bf8e:	9a00      	ldr	r2, [sp, #0]
 800bf90:	920a      	str	r2, [sp, #40]	; 0x28
 800bf92:	4413      	add	r3, r2
 800bf94:	9305      	str	r3, [sp, #20]
 800bf96:	2300      	movs	r3, #0
 800bf98:	9307      	str	r3, [sp, #28]
 800bf9a:	9b06      	ldr	r3, [sp, #24]
 800bf9c:	2b09      	cmp	r3, #9
 800bf9e:	f200 8089 	bhi.w	800c0b4 <_dtoa_r+0x2f4>
 800bfa2:	2b05      	cmp	r3, #5
 800bfa4:	bfc4      	itt	gt
 800bfa6:	3b04      	subgt	r3, #4
 800bfa8:	9306      	strgt	r3, [sp, #24]
 800bfaa:	9b06      	ldr	r3, [sp, #24]
 800bfac:	f1a3 0302 	sub.w	r3, r3, #2
 800bfb0:	bfcc      	ite	gt
 800bfb2:	2500      	movgt	r5, #0
 800bfb4:	2501      	movle	r5, #1
 800bfb6:	2b03      	cmp	r3, #3
 800bfb8:	f200 8087 	bhi.w	800c0ca <_dtoa_r+0x30a>
 800bfbc:	e8df f003 	tbb	[pc, r3]
 800bfc0:	59383a2d 	.word	0x59383a2d
 800bfc4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bfc8:	441d      	add	r5, r3
 800bfca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bfce:	2b20      	cmp	r3, #32
 800bfd0:	bfc1      	itttt	gt
 800bfd2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bfd6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bfda:	fa0b f303 	lslgt.w	r3, fp, r3
 800bfde:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bfe2:	bfda      	itte	le
 800bfe4:	f1c3 0320 	rsble	r3, r3, #32
 800bfe8:	fa06 f003 	lslle.w	r0, r6, r3
 800bfec:	4318      	orrgt	r0, r3
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_ui2d>
 800bff2:	2301      	movs	r3, #1
 800bff4:	4606      	mov	r6, r0
 800bff6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bffa:	3d01      	subs	r5, #1
 800bffc:	930e      	str	r3, [sp, #56]	; 0x38
 800bffe:	e76a      	b.n	800bed6 <_dtoa_r+0x116>
 800c000:	2301      	movs	r3, #1
 800c002:	e7b2      	b.n	800bf6a <_dtoa_r+0x1aa>
 800c004:	900b      	str	r0, [sp, #44]	; 0x2c
 800c006:	e7b1      	b.n	800bf6c <_dtoa_r+0x1ac>
 800c008:	9b04      	ldr	r3, [sp, #16]
 800c00a:	9a00      	ldr	r2, [sp, #0]
 800c00c:	1a9b      	subs	r3, r3, r2
 800c00e:	9304      	str	r3, [sp, #16]
 800c010:	4253      	negs	r3, r2
 800c012:	9307      	str	r3, [sp, #28]
 800c014:	2300      	movs	r3, #0
 800c016:	930a      	str	r3, [sp, #40]	; 0x28
 800c018:	e7bf      	b.n	800bf9a <_dtoa_r+0x1da>
 800c01a:	2300      	movs	r3, #0
 800c01c:	9308      	str	r3, [sp, #32]
 800c01e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c020:	2b00      	cmp	r3, #0
 800c022:	dc55      	bgt.n	800c0d0 <_dtoa_r+0x310>
 800c024:	2301      	movs	r3, #1
 800c026:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c02a:	461a      	mov	r2, r3
 800c02c:	9209      	str	r2, [sp, #36]	; 0x24
 800c02e:	e00c      	b.n	800c04a <_dtoa_r+0x28a>
 800c030:	2301      	movs	r3, #1
 800c032:	e7f3      	b.n	800c01c <_dtoa_r+0x25c>
 800c034:	2300      	movs	r3, #0
 800c036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c038:	9308      	str	r3, [sp, #32]
 800c03a:	9b00      	ldr	r3, [sp, #0]
 800c03c:	4413      	add	r3, r2
 800c03e:	9302      	str	r3, [sp, #8]
 800c040:	3301      	adds	r3, #1
 800c042:	2b01      	cmp	r3, #1
 800c044:	9303      	str	r3, [sp, #12]
 800c046:	bfb8      	it	lt
 800c048:	2301      	movlt	r3, #1
 800c04a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c04c:	2200      	movs	r2, #0
 800c04e:	6042      	str	r2, [r0, #4]
 800c050:	2204      	movs	r2, #4
 800c052:	f102 0614 	add.w	r6, r2, #20
 800c056:	429e      	cmp	r6, r3
 800c058:	6841      	ldr	r1, [r0, #4]
 800c05a:	d93d      	bls.n	800c0d8 <_dtoa_r+0x318>
 800c05c:	4620      	mov	r0, r4
 800c05e:	f000 fecf 	bl	800ce00 <_Balloc>
 800c062:	9001      	str	r0, [sp, #4]
 800c064:	2800      	cmp	r0, #0
 800c066:	d13b      	bne.n	800c0e0 <_dtoa_r+0x320>
 800c068:	4b11      	ldr	r3, [pc, #68]	; (800c0b0 <_dtoa_r+0x2f0>)
 800c06a:	4602      	mov	r2, r0
 800c06c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c070:	e6c0      	b.n	800bdf4 <_dtoa_r+0x34>
 800c072:	2301      	movs	r3, #1
 800c074:	e7df      	b.n	800c036 <_dtoa_r+0x276>
 800c076:	bf00      	nop
 800c078:	636f4361 	.word	0x636f4361
 800c07c:	3fd287a7 	.word	0x3fd287a7
 800c080:	8b60c8b3 	.word	0x8b60c8b3
 800c084:	3fc68a28 	.word	0x3fc68a28
 800c088:	509f79fb 	.word	0x509f79fb
 800c08c:	3fd34413 	.word	0x3fd34413
 800c090:	08026da8 	.word	0x08026da8
 800c094:	08026fe8 	.word	0x08026fe8
 800c098:	7ff00000 	.word	0x7ff00000
 800c09c:	08026fe4 	.word	0x08026fe4
 800c0a0:	08026fdb 	.word	0x08026fdb
 800c0a4:	0802732d 	.word	0x0802732d
 800c0a8:	3ff80000 	.word	0x3ff80000
 800c0ac:	08027138 	.word	0x08027138
 800c0b0:	08027043 	.word	0x08027043
 800c0b4:	2501      	movs	r5, #1
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	9306      	str	r3, [sp, #24]
 800c0ba:	9508      	str	r5, [sp, #32]
 800c0bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	2312      	movs	r3, #18
 800c0c8:	e7b0      	b.n	800c02c <_dtoa_r+0x26c>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	9308      	str	r3, [sp, #32]
 800c0ce:	e7f5      	b.n	800c0bc <_dtoa_r+0x2fc>
 800c0d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c0d6:	e7b8      	b.n	800c04a <_dtoa_r+0x28a>
 800c0d8:	3101      	adds	r1, #1
 800c0da:	6041      	str	r1, [r0, #4]
 800c0dc:	0052      	lsls	r2, r2, #1
 800c0de:	e7b8      	b.n	800c052 <_dtoa_r+0x292>
 800c0e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0e2:	9a01      	ldr	r2, [sp, #4]
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	9b03      	ldr	r3, [sp, #12]
 800c0e8:	2b0e      	cmp	r3, #14
 800c0ea:	f200 809d 	bhi.w	800c228 <_dtoa_r+0x468>
 800c0ee:	2d00      	cmp	r5, #0
 800c0f0:	f000 809a 	beq.w	800c228 <_dtoa_r+0x468>
 800c0f4:	9b00      	ldr	r3, [sp, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	dd32      	ble.n	800c160 <_dtoa_r+0x3a0>
 800c0fa:	4ab7      	ldr	r2, [pc, #732]	; (800c3d8 <_dtoa_r+0x618>)
 800c0fc:	f003 030f 	and.w	r3, r3, #15
 800c100:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c104:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c108:	9b00      	ldr	r3, [sp, #0]
 800c10a:	05d8      	lsls	r0, r3, #23
 800c10c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c110:	d516      	bpl.n	800c140 <_dtoa_r+0x380>
 800c112:	4bb2      	ldr	r3, [pc, #712]	; (800c3dc <_dtoa_r+0x61c>)
 800c114:	ec51 0b19 	vmov	r0, r1, d9
 800c118:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c11c:	f7f4 fc10 	bl	8000940 <__aeabi_ddiv>
 800c120:	f007 070f 	and.w	r7, r7, #15
 800c124:	4682      	mov	sl, r0
 800c126:	468b      	mov	fp, r1
 800c128:	2503      	movs	r5, #3
 800c12a:	4eac      	ldr	r6, [pc, #688]	; (800c3dc <_dtoa_r+0x61c>)
 800c12c:	b957      	cbnz	r7, 800c144 <_dtoa_r+0x384>
 800c12e:	4642      	mov	r2, r8
 800c130:	464b      	mov	r3, r9
 800c132:	4650      	mov	r0, sl
 800c134:	4659      	mov	r1, fp
 800c136:	f7f4 fc03 	bl	8000940 <__aeabi_ddiv>
 800c13a:	4682      	mov	sl, r0
 800c13c:	468b      	mov	fp, r1
 800c13e:	e028      	b.n	800c192 <_dtoa_r+0x3d2>
 800c140:	2502      	movs	r5, #2
 800c142:	e7f2      	b.n	800c12a <_dtoa_r+0x36a>
 800c144:	07f9      	lsls	r1, r7, #31
 800c146:	d508      	bpl.n	800c15a <_dtoa_r+0x39a>
 800c148:	4640      	mov	r0, r8
 800c14a:	4649      	mov	r1, r9
 800c14c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c150:	f7f4 facc 	bl	80006ec <__aeabi_dmul>
 800c154:	3501      	adds	r5, #1
 800c156:	4680      	mov	r8, r0
 800c158:	4689      	mov	r9, r1
 800c15a:	107f      	asrs	r7, r7, #1
 800c15c:	3608      	adds	r6, #8
 800c15e:	e7e5      	b.n	800c12c <_dtoa_r+0x36c>
 800c160:	f000 809b 	beq.w	800c29a <_dtoa_r+0x4da>
 800c164:	9b00      	ldr	r3, [sp, #0]
 800c166:	4f9d      	ldr	r7, [pc, #628]	; (800c3dc <_dtoa_r+0x61c>)
 800c168:	425e      	negs	r6, r3
 800c16a:	4b9b      	ldr	r3, [pc, #620]	; (800c3d8 <_dtoa_r+0x618>)
 800c16c:	f006 020f 	and.w	r2, r6, #15
 800c170:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	ec51 0b19 	vmov	r0, r1, d9
 800c17c:	f7f4 fab6 	bl	80006ec <__aeabi_dmul>
 800c180:	1136      	asrs	r6, r6, #4
 800c182:	4682      	mov	sl, r0
 800c184:	468b      	mov	fp, r1
 800c186:	2300      	movs	r3, #0
 800c188:	2502      	movs	r5, #2
 800c18a:	2e00      	cmp	r6, #0
 800c18c:	d17a      	bne.n	800c284 <_dtoa_r+0x4c4>
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1d3      	bne.n	800c13a <_dtoa_r+0x37a>
 800c192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c194:	2b00      	cmp	r3, #0
 800c196:	f000 8082 	beq.w	800c29e <_dtoa_r+0x4de>
 800c19a:	4b91      	ldr	r3, [pc, #580]	; (800c3e0 <_dtoa_r+0x620>)
 800c19c:	2200      	movs	r2, #0
 800c19e:	4650      	mov	r0, sl
 800c1a0:	4659      	mov	r1, fp
 800c1a2:	f7f4 fd15 	bl	8000bd0 <__aeabi_dcmplt>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d079      	beq.n	800c29e <_dtoa_r+0x4de>
 800c1aa:	9b03      	ldr	r3, [sp, #12]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d076      	beq.n	800c29e <_dtoa_r+0x4de>
 800c1b0:	9b02      	ldr	r3, [sp, #8]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	dd36      	ble.n	800c224 <_dtoa_r+0x464>
 800c1b6:	9b00      	ldr	r3, [sp, #0]
 800c1b8:	4650      	mov	r0, sl
 800c1ba:	4659      	mov	r1, fp
 800c1bc:	1e5f      	subs	r7, r3, #1
 800c1be:	2200      	movs	r2, #0
 800c1c0:	4b88      	ldr	r3, [pc, #544]	; (800c3e4 <_dtoa_r+0x624>)
 800c1c2:	f7f4 fa93 	bl	80006ec <__aeabi_dmul>
 800c1c6:	9e02      	ldr	r6, [sp, #8]
 800c1c8:	4682      	mov	sl, r0
 800c1ca:	468b      	mov	fp, r1
 800c1cc:	3501      	adds	r5, #1
 800c1ce:	4628      	mov	r0, r5
 800c1d0:	f7f4 fa22 	bl	8000618 <__aeabi_i2d>
 800c1d4:	4652      	mov	r2, sl
 800c1d6:	465b      	mov	r3, fp
 800c1d8:	f7f4 fa88 	bl	80006ec <__aeabi_dmul>
 800c1dc:	4b82      	ldr	r3, [pc, #520]	; (800c3e8 <_dtoa_r+0x628>)
 800c1de:	2200      	movs	r2, #0
 800c1e0:	f7f4 f8ce 	bl	8000380 <__adddf3>
 800c1e4:	46d0      	mov	r8, sl
 800c1e6:	46d9      	mov	r9, fp
 800c1e8:	4682      	mov	sl, r0
 800c1ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c1ee:	2e00      	cmp	r6, #0
 800c1f0:	d158      	bne.n	800c2a4 <_dtoa_r+0x4e4>
 800c1f2:	4b7e      	ldr	r3, [pc, #504]	; (800c3ec <_dtoa_r+0x62c>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	4640      	mov	r0, r8
 800c1f8:	4649      	mov	r1, r9
 800c1fa:	f7f4 f8bf 	bl	800037c <__aeabi_dsub>
 800c1fe:	4652      	mov	r2, sl
 800c200:	465b      	mov	r3, fp
 800c202:	4680      	mov	r8, r0
 800c204:	4689      	mov	r9, r1
 800c206:	f7f4 fd01 	bl	8000c0c <__aeabi_dcmpgt>
 800c20a:	2800      	cmp	r0, #0
 800c20c:	f040 8295 	bne.w	800c73a <_dtoa_r+0x97a>
 800c210:	4652      	mov	r2, sl
 800c212:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c216:	4640      	mov	r0, r8
 800c218:	4649      	mov	r1, r9
 800c21a:	f7f4 fcd9 	bl	8000bd0 <__aeabi_dcmplt>
 800c21e:	2800      	cmp	r0, #0
 800c220:	f040 8289 	bne.w	800c736 <_dtoa_r+0x976>
 800c224:	ec5b ab19 	vmov	sl, fp, d9
 800c228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	f2c0 8148 	blt.w	800c4c0 <_dtoa_r+0x700>
 800c230:	9a00      	ldr	r2, [sp, #0]
 800c232:	2a0e      	cmp	r2, #14
 800c234:	f300 8144 	bgt.w	800c4c0 <_dtoa_r+0x700>
 800c238:	4b67      	ldr	r3, [pc, #412]	; (800c3d8 <_dtoa_r+0x618>)
 800c23a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c23e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c244:	2b00      	cmp	r3, #0
 800c246:	f280 80d5 	bge.w	800c3f4 <_dtoa_r+0x634>
 800c24a:	9b03      	ldr	r3, [sp, #12]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f300 80d1 	bgt.w	800c3f4 <_dtoa_r+0x634>
 800c252:	f040 826f 	bne.w	800c734 <_dtoa_r+0x974>
 800c256:	4b65      	ldr	r3, [pc, #404]	; (800c3ec <_dtoa_r+0x62c>)
 800c258:	2200      	movs	r2, #0
 800c25a:	4640      	mov	r0, r8
 800c25c:	4649      	mov	r1, r9
 800c25e:	f7f4 fa45 	bl	80006ec <__aeabi_dmul>
 800c262:	4652      	mov	r2, sl
 800c264:	465b      	mov	r3, fp
 800c266:	f7f4 fcc7 	bl	8000bf8 <__aeabi_dcmpge>
 800c26a:	9e03      	ldr	r6, [sp, #12]
 800c26c:	4637      	mov	r7, r6
 800c26e:	2800      	cmp	r0, #0
 800c270:	f040 8245 	bne.w	800c6fe <_dtoa_r+0x93e>
 800c274:	9d01      	ldr	r5, [sp, #4]
 800c276:	2331      	movs	r3, #49	; 0x31
 800c278:	f805 3b01 	strb.w	r3, [r5], #1
 800c27c:	9b00      	ldr	r3, [sp, #0]
 800c27e:	3301      	adds	r3, #1
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	e240      	b.n	800c706 <_dtoa_r+0x946>
 800c284:	07f2      	lsls	r2, r6, #31
 800c286:	d505      	bpl.n	800c294 <_dtoa_r+0x4d4>
 800c288:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c28c:	f7f4 fa2e 	bl	80006ec <__aeabi_dmul>
 800c290:	3501      	adds	r5, #1
 800c292:	2301      	movs	r3, #1
 800c294:	1076      	asrs	r6, r6, #1
 800c296:	3708      	adds	r7, #8
 800c298:	e777      	b.n	800c18a <_dtoa_r+0x3ca>
 800c29a:	2502      	movs	r5, #2
 800c29c:	e779      	b.n	800c192 <_dtoa_r+0x3d2>
 800c29e:	9f00      	ldr	r7, [sp, #0]
 800c2a0:	9e03      	ldr	r6, [sp, #12]
 800c2a2:	e794      	b.n	800c1ce <_dtoa_r+0x40e>
 800c2a4:	9901      	ldr	r1, [sp, #4]
 800c2a6:	4b4c      	ldr	r3, [pc, #304]	; (800c3d8 <_dtoa_r+0x618>)
 800c2a8:	4431      	add	r1, r6
 800c2aa:	910d      	str	r1, [sp, #52]	; 0x34
 800c2ac:	9908      	ldr	r1, [sp, #32]
 800c2ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c2b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2b6:	2900      	cmp	r1, #0
 800c2b8:	d043      	beq.n	800c342 <_dtoa_r+0x582>
 800c2ba:	494d      	ldr	r1, [pc, #308]	; (800c3f0 <_dtoa_r+0x630>)
 800c2bc:	2000      	movs	r0, #0
 800c2be:	f7f4 fb3f 	bl	8000940 <__aeabi_ddiv>
 800c2c2:	4652      	mov	r2, sl
 800c2c4:	465b      	mov	r3, fp
 800c2c6:	f7f4 f859 	bl	800037c <__aeabi_dsub>
 800c2ca:	9d01      	ldr	r5, [sp, #4]
 800c2cc:	4682      	mov	sl, r0
 800c2ce:	468b      	mov	fp, r1
 800c2d0:	4649      	mov	r1, r9
 800c2d2:	4640      	mov	r0, r8
 800c2d4:	f7f4 fcba 	bl	8000c4c <__aeabi_d2iz>
 800c2d8:	4606      	mov	r6, r0
 800c2da:	f7f4 f99d 	bl	8000618 <__aeabi_i2d>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4640      	mov	r0, r8
 800c2e4:	4649      	mov	r1, r9
 800c2e6:	f7f4 f849 	bl	800037c <__aeabi_dsub>
 800c2ea:	3630      	adds	r6, #48	; 0x30
 800c2ec:	f805 6b01 	strb.w	r6, [r5], #1
 800c2f0:	4652      	mov	r2, sl
 800c2f2:	465b      	mov	r3, fp
 800c2f4:	4680      	mov	r8, r0
 800c2f6:	4689      	mov	r9, r1
 800c2f8:	f7f4 fc6a 	bl	8000bd0 <__aeabi_dcmplt>
 800c2fc:	2800      	cmp	r0, #0
 800c2fe:	d163      	bne.n	800c3c8 <_dtoa_r+0x608>
 800c300:	4642      	mov	r2, r8
 800c302:	464b      	mov	r3, r9
 800c304:	4936      	ldr	r1, [pc, #216]	; (800c3e0 <_dtoa_r+0x620>)
 800c306:	2000      	movs	r0, #0
 800c308:	f7f4 f838 	bl	800037c <__aeabi_dsub>
 800c30c:	4652      	mov	r2, sl
 800c30e:	465b      	mov	r3, fp
 800c310:	f7f4 fc5e 	bl	8000bd0 <__aeabi_dcmplt>
 800c314:	2800      	cmp	r0, #0
 800c316:	f040 80b5 	bne.w	800c484 <_dtoa_r+0x6c4>
 800c31a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c31c:	429d      	cmp	r5, r3
 800c31e:	d081      	beq.n	800c224 <_dtoa_r+0x464>
 800c320:	4b30      	ldr	r3, [pc, #192]	; (800c3e4 <_dtoa_r+0x624>)
 800c322:	2200      	movs	r2, #0
 800c324:	4650      	mov	r0, sl
 800c326:	4659      	mov	r1, fp
 800c328:	f7f4 f9e0 	bl	80006ec <__aeabi_dmul>
 800c32c:	4b2d      	ldr	r3, [pc, #180]	; (800c3e4 <_dtoa_r+0x624>)
 800c32e:	4682      	mov	sl, r0
 800c330:	468b      	mov	fp, r1
 800c332:	4640      	mov	r0, r8
 800c334:	4649      	mov	r1, r9
 800c336:	2200      	movs	r2, #0
 800c338:	f7f4 f9d8 	bl	80006ec <__aeabi_dmul>
 800c33c:	4680      	mov	r8, r0
 800c33e:	4689      	mov	r9, r1
 800c340:	e7c6      	b.n	800c2d0 <_dtoa_r+0x510>
 800c342:	4650      	mov	r0, sl
 800c344:	4659      	mov	r1, fp
 800c346:	f7f4 f9d1 	bl	80006ec <__aeabi_dmul>
 800c34a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c34c:	9d01      	ldr	r5, [sp, #4]
 800c34e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c350:	4682      	mov	sl, r0
 800c352:	468b      	mov	fp, r1
 800c354:	4649      	mov	r1, r9
 800c356:	4640      	mov	r0, r8
 800c358:	f7f4 fc78 	bl	8000c4c <__aeabi_d2iz>
 800c35c:	4606      	mov	r6, r0
 800c35e:	f7f4 f95b 	bl	8000618 <__aeabi_i2d>
 800c362:	3630      	adds	r6, #48	; 0x30
 800c364:	4602      	mov	r2, r0
 800c366:	460b      	mov	r3, r1
 800c368:	4640      	mov	r0, r8
 800c36a:	4649      	mov	r1, r9
 800c36c:	f7f4 f806 	bl	800037c <__aeabi_dsub>
 800c370:	f805 6b01 	strb.w	r6, [r5], #1
 800c374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c376:	429d      	cmp	r5, r3
 800c378:	4680      	mov	r8, r0
 800c37a:	4689      	mov	r9, r1
 800c37c:	f04f 0200 	mov.w	r2, #0
 800c380:	d124      	bne.n	800c3cc <_dtoa_r+0x60c>
 800c382:	4b1b      	ldr	r3, [pc, #108]	; (800c3f0 <_dtoa_r+0x630>)
 800c384:	4650      	mov	r0, sl
 800c386:	4659      	mov	r1, fp
 800c388:	f7f3 fffa 	bl	8000380 <__adddf3>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	4640      	mov	r0, r8
 800c392:	4649      	mov	r1, r9
 800c394:	f7f4 fc3a 	bl	8000c0c <__aeabi_dcmpgt>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d173      	bne.n	800c484 <_dtoa_r+0x6c4>
 800c39c:	4652      	mov	r2, sl
 800c39e:	465b      	mov	r3, fp
 800c3a0:	4913      	ldr	r1, [pc, #76]	; (800c3f0 <_dtoa_r+0x630>)
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	f7f3 ffea 	bl	800037c <__aeabi_dsub>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4640      	mov	r0, r8
 800c3ae:	4649      	mov	r1, r9
 800c3b0:	f7f4 fc0e 	bl	8000bd0 <__aeabi_dcmplt>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	f43f af35 	beq.w	800c224 <_dtoa_r+0x464>
 800c3ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c3bc:	1e6b      	subs	r3, r5, #1
 800c3be:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c3c4:	2b30      	cmp	r3, #48	; 0x30
 800c3c6:	d0f8      	beq.n	800c3ba <_dtoa_r+0x5fa>
 800c3c8:	9700      	str	r7, [sp, #0]
 800c3ca:	e049      	b.n	800c460 <_dtoa_r+0x6a0>
 800c3cc:	4b05      	ldr	r3, [pc, #20]	; (800c3e4 <_dtoa_r+0x624>)
 800c3ce:	f7f4 f98d 	bl	80006ec <__aeabi_dmul>
 800c3d2:	4680      	mov	r8, r0
 800c3d4:	4689      	mov	r9, r1
 800c3d6:	e7bd      	b.n	800c354 <_dtoa_r+0x594>
 800c3d8:	08027138 	.word	0x08027138
 800c3dc:	08027110 	.word	0x08027110
 800c3e0:	3ff00000 	.word	0x3ff00000
 800c3e4:	40240000 	.word	0x40240000
 800c3e8:	401c0000 	.word	0x401c0000
 800c3ec:	40140000 	.word	0x40140000
 800c3f0:	3fe00000 	.word	0x3fe00000
 800c3f4:	9d01      	ldr	r5, [sp, #4]
 800c3f6:	4656      	mov	r6, sl
 800c3f8:	465f      	mov	r7, fp
 800c3fa:	4642      	mov	r2, r8
 800c3fc:	464b      	mov	r3, r9
 800c3fe:	4630      	mov	r0, r6
 800c400:	4639      	mov	r1, r7
 800c402:	f7f4 fa9d 	bl	8000940 <__aeabi_ddiv>
 800c406:	f7f4 fc21 	bl	8000c4c <__aeabi_d2iz>
 800c40a:	4682      	mov	sl, r0
 800c40c:	f7f4 f904 	bl	8000618 <__aeabi_i2d>
 800c410:	4642      	mov	r2, r8
 800c412:	464b      	mov	r3, r9
 800c414:	f7f4 f96a 	bl	80006ec <__aeabi_dmul>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	4630      	mov	r0, r6
 800c41e:	4639      	mov	r1, r7
 800c420:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c424:	f7f3 ffaa 	bl	800037c <__aeabi_dsub>
 800c428:	f805 6b01 	strb.w	r6, [r5], #1
 800c42c:	9e01      	ldr	r6, [sp, #4]
 800c42e:	9f03      	ldr	r7, [sp, #12]
 800c430:	1bae      	subs	r6, r5, r6
 800c432:	42b7      	cmp	r7, r6
 800c434:	4602      	mov	r2, r0
 800c436:	460b      	mov	r3, r1
 800c438:	d135      	bne.n	800c4a6 <_dtoa_r+0x6e6>
 800c43a:	f7f3 ffa1 	bl	8000380 <__adddf3>
 800c43e:	4642      	mov	r2, r8
 800c440:	464b      	mov	r3, r9
 800c442:	4606      	mov	r6, r0
 800c444:	460f      	mov	r7, r1
 800c446:	f7f4 fbe1 	bl	8000c0c <__aeabi_dcmpgt>
 800c44a:	b9d0      	cbnz	r0, 800c482 <_dtoa_r+0x6c2>
 800c44c:	4642      	mov	r2, r8
 800c44e:	464b      	mov	r3, r9
 800c450:	4630      	mov	r0, r6
 800c452:	4639      	mov	r1, r7
 800c454:	f7f4 fbb2 	bl	8000bbc <__aeabi_dcmpeq>
 800c458:	b110      	cbz	r0, 800c460 <_dtoa_r+0x6a0>
 800c45a:	f01a 0f01 	tst.w	sl, #1
 800c45e:	d110      	bne.n	800c482 <_dtoa_r+0x6c2>
 800c460:	4620      	mov	r0, r4
 800c462:	ee18 1a10 	vmov	r1, s16
 800c466:	f000 fd0b 	bl	800ce80 <_Bfree>
 800c46a:	2300      	movs	r3, #0
 800c46c:	9800      	ldr	r0, [sp, #0]
 800c46e:	702b      	strb	r3, [r5, #0]
 800c470:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c472:	3001      	adds	r0, #1
 800c474:	6018      	str	r0, [r3, #0]
 800c476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c478:	2b00      	cmp	r3, #0
 800c47a:	f43f acf1 	beq.w	800be60 <_dtoa_r+0xa0>
 800c47e:	601d      	str	r5, [r3, #0]
 800c480:	e4ee      	b.n	800be60 <_dtoa_r+0xa0>
 800c482:	9f00      	ldr	r7, [sp, #0]
 800c484:	462b      	mov	r3, r5
 800c486:	461d      	mov	r5, r3
 800c488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c48c:	2a39      	cmp	r2, #57	; 0x39
 800c48e:	d106      	bne.n	800c49e <_dtoa_r+0x6de>
 800c490:	9a01      	ldr	r2, [sp, #4]
 800c492:	429a      	cmp	r2, r3
 800c494:	d1f7      	bne.n	800c486 <_dtoa_r+0x6c6>
 800c496:	9901      	ldr	r1, [sp, #4]
 800c498:	2230      	movs	r2, #48	; 0x30
 800c49a:	3701      	adds	r7, #1
 800c49c:	700a      	strb	r2, [r1, #0]
 800c49e:	781a      	ldrb	r2, [r3, #0]
 800c4a0:	3201      	adds	r2, #1
 800c4a2:	701a      	strb	r2, [r3, #0]
 800c4a4:	e790      	b.n	800c3c8 <_dtoa_r+0x608>
 800c4a6:	4ba6      	ldr	r3, [pc, #664]	; (800c740 <_dtoa_r+0x980>)
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f7f4 f91f 	bl	80006ec <__aeabi_dmul>
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	4606      	mov	r6, r0
 800c4b4:	460f      	mov	r7, r1
 800c4b6:	f7f4 fb81 	bl	8000bbc <__aeabi_dcmpeq>
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d09d      	beq.n	800c3fa <_dtoa_r+0x63a>
 800c4be:	e7cf      	b.n	800c460 <_dtoa_r+0x6a0>
 800c4c0:	9a08      	ldr	r2, [sp, #32]
 800c4c2:	2a00      	cmp	r2, #0
 800c4c4:	f000 80d7 	beq.w	800c676 <_dtoa_r+0x8b6>
 800c4c8:	9a06      	ldr	r2, [sp, #24]
 800c4ca:	2a01      	cmp	r2, #1
 800c4cc:	f300 80ba 	bgt.w	800c644 <_dtoa_r+0x884>
 800c4d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4d2:	2a00      	cmp	r2, #0
 800c4d4:	f000 80b2 	beq.w	800c63c <_dtoa_r+0x87c>
 800c4d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c4dc:	9e07      	ldr	r6, [sp, #28]
 800c4de:	9d04      	ldr	r5, [sp, #16]
 800c4e0:	9a04      	ldr	r2, [sp, #16]
 800c4e2:	441a      	add	r2, r3
 800c4e4:	9204      	str	r2, [sp, #16]
 800c4e6:	9a05      	ldr	r2, [sp, #20]
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	441a      	add	r2, r3
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	9205      	str	r2, [sp, #20]
 800c4f0:	f000 fd7e 	bl	800cff0 <__i2b>
 800c4f4:	4607      	mov	r7, r0
 800c4f6:	2d00      	cmp	r5, #0
 800c4f8:	dd0c      	ble.n	800c514 <_dtoa_r+0x754>
 800c4fa:	9b05      	ldr	r3, [sp, #20]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	dd09      	ble.n	800c514 <_dtoa_r+0x754>
 800c500:	42ab      	cmp	r3, r5
 800c502:	9a04      	ldr	r2, [sp, #16]
 800c504:	bfa8      	it	ge
 800c506:	462b      	movge	r3, r5
 800c508:	1ad2      	subs	r2, r2, r3
 800c50a:	9204      	str	r2, [sp, #16]
 800c50c:	9a05      	ldr	r2, [sp, #20]
 800c50e:	1aed      	subs	r5, r5, r3
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	9305      	str	r3, [sp, #20]
 800c514:	9b07      	ldr	r3, [sp, #28]
 800c516:	b31b      	cbz	r3, 800c560 <_dtoa_r+0x7a0>
 800c518:	9b08      	ldr	r3, [sp, #32]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	f000 80af 	beq.w	800c67e <_dtoa_r+0x8be>
 800c520:	2e00      	cmp	r6, #0
 800c522:	dd13      	ble.n	800c54c <_dtoa_r+0x78c>
 800c524:	4639      	mov	r1, r7
 800c526:	4632      	mov	r2, r6
 800c528:	4620      	mov	r0, r4
 800c52a:	f000 fe21 	bl	800d170 <__pow5mult>
 800c52e:	ee18 2a10 	vmov	r2, s16
 800c532:	4601      	mov	r1, r0
 800c534:	4607      	mov	r7, r0
 800c536:	4620      	mov	r0, r4
 800c538:	f000 fd70 	bl	800d01c <__multiply>
 800c53c:	ee18 1a10 	vmov	r1, s16
 800c540:	4680      	mov	r8, r0
 800c542:	4620      	mov	r0, r4
 800c544:	f000 fc9c 	bl	800ce80 <_Bfree>
 800c548:	ee08 8a10 	vmov	s16, r8
 800c54c:	9b07      	ldr	r3, [sp, #28]
 800c54e:	1b9a      	subs	r2, r3, r6
 800c550:	d006      	beq.n	800c560 <_dtoa_r+0x7a0>
 800c552:	ee18 1a10 	vmov	r1, s16
 800c556:	4620      	mov	r0, r4
 800c558:	f000 fe0a 	bl	800d170 <__pow5mult>
 800c55c:	ee08 0a10 	vmov	s16, r0
 800c560:	2101      	movs	r1, #1
 800c562:	4620      	mov	r0, r4
 800c564:	f000 fd44 	bl	800cff0 <__i2b>
 800c568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	4606      	mov	r6, r0
 800c56e:	f340 8088 	ble.w	800c682 <_dtoa_r+0x8c2>
 800c572:	461a      	mov	r2, r3
 800c574:	4601      	mov	r1, r0
 800c576:	4620      	mov	r0, r4
 800c578:	f000 fdfa 	bl	800d170 <__pow5mult>
 800c57c:	9b06      	ldr	r3, [sp, #24]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	4606      	mov	r6, r0
 800c582:	f340 8081 	ble.w	800c688 <_dtoa_r+0x8c8>
 800c586:	f04f 0800 	mov.w	r8, #0
 800c58a:	6933      	ldr	r3, [r6, #16]
 800c58c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c590:	6918      	ldr	r0, [r3, #16]
 800c592:	f000 fcdd 	bl	800cf50 <__hi0bits>
 800c596:	f1c0 0020 	rsb	r0, r0, #32
 800c59a:	9b05      	ldr	r3, [sp, #20]
 800c59c:	4418      	add	r0, r3
 800c59e:	f010 001f 	ands.w	r0, r0, #31
 800c5a2:	f000 8092 	beq.w	800c6ca <_dtoa_r+0x90a>
 800c5a6:	f1c0 0320 	rsb	r3, r0, #32
 800c5aa:	2b04      	cmp	r3, #4
 800c5ac:	f340 808a 	ble.w	800c6c4 <_dtoa_r+0x904>
 800c5b0:	f1c0 001c 	rsb	r0, r0, #28
 800c5b4:	9b04      	ldr	r3, [sp, #16]
 800c5b6:	4403      	add	r3, r0
 800c5b8:	9304      	str	r3, [sp, #16]
 800c5ba:	9b05      	ldr	r3, [sp, #20]
 800c5bc:	4403      	add	r3, r0
 800c5be:	4405      	add	r5, r0
 800c5c0:	9305      	str	r3, [sp, #20]
 800c5c2:	9b04      	ldr	r3, [sp, #16]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	dd07      	ble.n	800c5d8 <_dtoa_r+0x818>
 800c5c8:	ee18 1a10 	vmov	r1, s16
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	f000 fe28 	bl	800d224 <__lshift>
 800c5d4:	ee08 0a10 	vmov	s16, r0
 800c5d8:	9b05      	ldr	r3, [sp, #20]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	dd05      	ble.n	800c5ea <_dtoa_r+0x82a>
 800c5de:	4631      	mov	r1, r6
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f000 fe1e 	bl	800d224 <__lshift>
 800c5e8:	4606      	mov	r6, r0
 800c5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d06e      	beq.n	800c6ce <_dtoa_r+0x90e>
 800c5f0:	ee18 0a10 	vmov	r0, s16
 800c5f4:	4631      	mov	r1, r6
 800c5f6:	f000 fe85 	bl	800d304 <__mcmp>
 800c5fa:	2800      	cmp	r0, #0
 800c5fc:	da67      	bge.n	800c6ce <_dtoa_r+0x90e>
 800c5fe:	9b00      	ldr	r3, [sp, #0]
 800c600:	3b01      	subs	r3, #1
 800c602:	ee18 1a10 	vmov	r1, s16
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	220a      	movs	r2, #10
 800c60a:	2300      	movs	r3, #0
 800c60c:	4620      	mov	r0, r4
 800c60e:	f000 fc59 	bl	800cec4 <__multadd>
 800c612:	9b08      	ldr	r3, [sp, #32]
 800c614:	ee08 0a10 	vmov	s16, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 81b1 	beq.w	800c980 <_dtoa_r+0xbc0>
 800c61e:	2300      	movs	r3, #0
 800c620:	4639      	mov	r1, r7
 800c622:	220a      	movs	r2, #10
 800c624:	4620      	mov	r0, r4
 800c626:	f000 fc4d 	bl	800cec4 <__multadd>
 800c62a:	9b02      	ldr	r3, [sp, #8]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	4607      	mov	r7, r0
 800c630:	f300 808e 	bgt.w	800c750 <_dtoa_r+0x990>
 800c634:	9b06      	ldr	r3, [sp, #24]
 800c636:	2b02      	cmp	r3, #2
 800c638:	dc51      	bgt.n	800c6de <_dtoa_r+0x91e>
 800c63a:	e089      	b.n	800c750 <_dtoa_r+0x990>
 800c63c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c63e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c642:	e74b      	b.n	800c4dc <_dtoa_r+0x71c>
 800c644:	9b03      	ldr	r3, [sp, #12]
 800c646:	1e5e      	subs	r6, r3, #1
 800c648:	9b07      	ldr	r3, [sp, #28]
 800c64a:	42b3      	cmp	r3, r6
 800c64c:	bfbf      	itttt	lt
 800c64e:	9b07      	ldrlt	r3, [sp, #28]
 800c650:	9607      	strlt	r6, [sp, #28]
 800c652:	1af2      	sublt	r2, r6, r3
 800c654:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c656:	bfb6      	itet	lt
 800c658:	189b      	addlt	r3, r3, r2
 800c65a:	1b9e      	subge	r6, r3, r6
 800c65c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c65e:	9b03      	ldr	r3, [sp, #12]
 800c660:	bfb8      	it	lt
 800c662:	2600      	movlt	r6, #0
 800c664:	2b00      	cmp	r3, #0
 800c666:	bfb7      	itett	lt
 800c668:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c66c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c670:	1a9d      	sublt	r5, r3, r2
 800c672:	2300      	movlt	r3, #0
 800c674:	e734      	b.n	800c4e0 <_dtoa_r+0x720>
 800c676:	9e07      	ldr	r6, [sp, #28]
 800c678:	9d04      	ldr	r5, [sp, #16]
 800c67a:	9f08      	ldr	r7, [sp, #32]
 800c67c:	e73b      	b.n	800c4f6 <_dtoa_r+0x736>
 800c67e:	9a07      	ldr	r2, [sp, #28]
 800c680:	e767      	b.n	800c552 <_dtoa_r+0x792>
 800c682:	9b06      	ldr	r3, [sp, #24]
 800c684:	2b01      	cmp	r3, #1
 800c686:	dc18      	bgt.n	800c6ba <_dtoa_r+0x8fa>
 800c688:	f1ba 0f00 	cmp.w	sl, #0
 800c68c:	d115      	bne.n	800c6ba <_dtoa_r+0x8fa>
 800c68e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c692:	b993      	cbnz	r3, 800c6ba <_dtoa_r+0x8fa>
 800c694:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c698:	0d1b      	lsrs	r3, r3, #20
 800c69a:	051b      	lsls	r3, r3, #20
 800c69c:	b183      	cbz	r3, 800c6c0 <_dtoa_r+0x900>
 800c69e:	9b04      	ldr	r3, [sp, #16]
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	9304      	str	r3, [sp, #16]
 800c6a4:	9b05      	ldr	r3, [sp, #20]
 800c6a6:	3301      	adds	r3, #1
 800c6a8:	9305      	str	r3, [sp, #20]
 800c6aa:	f04f 0801 	mov.w	r8, #1
 800c6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f47f af6a 	bne.w	800c58a <_dtoa_r+0x7ca>
 800c6b6:	2001      	movs	r0, #1
 800c6b8:	e76f      	b.n	800c59a <_dtoa_r+0x7da>
 800c6ba:	f04f 0800 	mov.w	r8, #0
 800c6be:	e7f6      	b.n	800c6ae <_dtoa_r+0x8ee>
 800c6c0:	4698      	mov	r8, r3
 800c6c2:	e7f4      	b.n	800c6ae <_dtoa_r+0x8ee>
 800c6c4:	f43f af7d 	beq.w	800c5c2 <_dtoa_r+0x802>
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	301c      	adds	r0, #28
 800c6cc:	e772      	b.n	800c5b4 <_dtoa_r+0x7f4>
 800c6ce:	9b03      	ldr	r3, [sp, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	dc37      	bgt.n	800c744 <_dtoa_r+0x984>
 800c6d4:	9b06      	ldr	r3, [sp, #24]
 800c6d6:	2b02      	cmp	r3, #2
 800c6d8:	dd34      	ble.n	800c744 <_dtoa_r+0x984>
 800c6da:	9b03      	ldr	r3, [sp, #12]
 800c6dc:	9302      	str	r3, [sp, #8]
 800c6de:	9b02      	ldr	r3, [sp, #8]
 800c6e0:	b96b      	cbnz	r3, 800c6fe <_dtoa_r+0x93e>
 800c6e2:	4631      	mov	r1, r6
 800c6e4:	2205      	movs	r2, #5
 800c6e6:	4620      	mov	r0, r4
 800c6e8:	f000 fbec 	bl	800cec4 <__multadd>
 800c6ec:	4601      	mov	r1, r0
 800c6ee:	4606      	mov	r6, r0
 800c6f0:	ee18 0a10 	vmov	r0, s16
 800c6f4:	f000 fe06 	bl	800d304 <__mcmp>
 800c6f8:	2800      	cmp	r0, #0
 800c6fa:	f73f adbb 	bgt.w	800c274 <_dtoa_r+0x4b4>
 800c6fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c700:	9d01      	ldr	r5, [sp, #4]
 800c702:	43db      	mvns	r3, r3
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	f04f 0800 	mov.w	r8, #0
 800c70a:	4631      	mov	r1, r6
 800c70c:	4620      	mov	r0, r4
 800c70e:	f000 fbb7 	bl	800ce80 <_Bfree>
 800c712:	2f00      	cmp	r7, #0
 800c714:	f43f aea4 	beq.w	800c460 <_dtoa_r+0x6a0>
 800c718:	f1b8 0f00 	cmp.w	r8, #0
 800c71c:	d005      	beq.n	800c72a <_dtoa_r+0x96a>
 800c71e:	45b8      	cmp	r8, r7
 800c720:	d003      	beq.n	800c72a <_dtoa_r+0x96a>
 800c722:	4641      	mov	r1, r8
 800c724:	4620      	mov	r0, r4
 800c726:	f000 fbab 	bl	800ce80 <_Bfree>
 800c72a:	4639      	mov	r1, r7
 800c72c:	4620      	mov	r0, r4
 800c72e:	f000 fba7 	bl	800ce80 <_Bfree>
 800c732:	e695      	b.n	800c460 <_dtoa_r+0x6a0>
 800c734:	2600      	movs	r6, #0
 800c736:	4637      	mov	r7, r6
 800c738:	e7e1      	b.n	800c6fe <_dtoa_r+0x93e>
 800c73a:	9700      	str	r7, [sp, #0]
 800c73c:	4637      	mov	r7, r6
 800c73e:	e599      	b.n	800c274 <_dtoa_r+0x4b4>
 800c740:	40240000 	.word	0x40240000
 800c744:	9b08      	ldr	r3, [sp, #32]
 800c746:	2b00      	cmp	r3, #0
 800c748:	f000 80ca 	beq.w	800c8e0 <_dtoa_r+0xb20>
 800c74c:	9b03      	ldr	r3, [sp, #12]
 800c74e:	9302      	str	r3, [sp, #8]
 800c750:	2d00      	cmp	r5, #0
 800c752:	dd05      	ble.n	800c760 <_dtoa_r+0x9a0>
 800c754:	4639      	mov	r1, r7
 800c756:	462a      	mov	r2, r5
 800c758:	4620      	mov	r0, r4
 800c75a:	f000 fd63 	bl	800d224 <__lshift>
 800c75e:	4607      	mov	r7, r0
 800c760:	f1b8 0f00 	cmp.w	r8, #0
 800c764:	d05b      	beq.n	800c81e <_dtoa_r+0xa5e>
 800c766:	6879      	ldr	r1, [r7, #4]
 800c768:	4620      	mov	r0, r4
 800c76a:	f000 fb49 	bl	800ce00 <_Balloc>
 800c76e:	4605      	mov	r5, r0
 800c770:	b928      	cbnz	r0, 800c77e <_dtoa_r+0x9be>
 800c772:	4b87      	ldr	r3, [pc, #540]	; (800c990 <_dtoa_r+0xbd0>)
 800c774:	4602      	mov	r2, r0
 800c776:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c77a:	f7ff bb3b 	b.w	800bdf4 <_dtoa_r+0x34>
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	3202      	adds	r2, #2
 800c782:	0092      	lsls	r2, r2, #2
 800c784:	f107 010c 	add.w	r1, r7, #12
 800c788:	300c      	adds	r0, #12
 800c78a:	f000 fb1e 	bl	800cdca <memcpy>
 800c78e:	2201      	movs	r2, #1
 800c790:	4629      	mov	r1, r5
 800c792:	4620      	mov	r0, r4
 800c794:	f000 fd46 	bl	800d224 <__lshift>
 800c798:	9b01      	ldr	r3, [sp, #4]
 800c79a:	f103 0901 	add.w	r9, r3, #1
 800c79e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	9305      	str	r3, [sp, #20]
 800c7a6:	f00a 0301 	and.w	r3, sl, #1
 800c7aa:	46b8      	mov	r8, r7
 800c7ac:	9304      	str	r3, [sp, #16]
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	ee18 0a10 	vmov	r0, s16
 800c7b6:	f7ff fa75 	bl	800bca4 <quorem>
 800c7ba:	4641      	mov	r1, r8
 800c7bc:	9002      	str	r0, [sp, #8]
 800c7be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c7c2:	ee18 0a10 	vmov	r0, s16
 800c7c6:	f000 fd9d 	bl	800d304 <__mcmp>
 800c7ca:	463a      	mov	r2, r7
 800c7cc:	9003      	str	r0, [sp, #12]
 800c7ce:	4631      	mov	r1, r6
 800c7d0:	4620      	mov	r0, r4
 800c7d2:	f000 fdb3 	bl	800d33c <__mdiff>
 800c7d6:	68c2      	ldr	r2, [r0, #12]
 800c7d8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800c7dc:	4605      	mov	r5, r0
 800c7de:	bb02      	cbnz	r2, 800c822 <_dtoa_r+0xa62>
 800c7e0:	4601      	mov	r1, r0
 800c7e2:	ee18 0a10 	vmov	r0, s16
 800c7e6:	f000 fd8d 	bl	800d304 <__mcmp>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	9207      	str	r2, [sp, #28]
 800c7f2:	f000 fb45 	bl	800ce80 <_Bfree>
 800c7f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c7fa:	ea43 0102 	orr.w	r1, r3, r2
 800c7fe:	9b04      	ldr	r3, [sp, #16]
 800c800:	430b      	orrs	r3, r1
 800c802:	464d      	mov	r5, r9
 800c804:	d10f      	bne.n	800c826 <_dtoa_r+0xa66>
 800c806:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c80a:	d02a      	beq.n	800c862 <_dtoa_r+0xaa2>
 800c80c:	9b03      	ldr	r3, [sp, #12]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	dd02      	ble.n	800c818 <_dtoa_r+0xa58>
 800c812:	9b02      	ldr	r3, [sp, #8]
 800c814:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c818:	f88b a000 	strb.w	sl, [fp]
 800c81c:	e775      	b.n	800c70a <_dtoa_r+0x94a>
 800c81e:	4638      	mov	r0, r7
 800c820:	e7ba      	b.n	800c798 <_dtoa_r+0x9d8>
 800c822:	2201      	movs	r2, #1
 800c824:	e7e2      	b.n	800c7ec <_dtoa_r+0xa2c>
 800c826:	9b03      	ldr	r3, [sp, #12]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	db04      	blt.n	800c836 <_dtoa_r+0xa76>
 800c82c:	9906      	ldr	r1, [sp, #24]
 800c82e:	430b      	orrs	r3, r1
 800c830:	9904      	ldr	r1, [sp, #16]
 800c832:	430b      	orrs	r3, r1
 800c834:	d122      	bne.n	800c87c <_dtoa_r+0xabc>
 800c836:	2a00      	cmp	r2, #0
 800c838:	ddee      	ble.n	800c818 <_dtoa_r+0xa58>
 800c83a:	ee18 1a10 	vmov	r1, s16
 800c83e:	2201      	movs	r2, #1
 800c840:	4620      	mov	r0, r4
 800c842:	f000 fcef 	bl	800d224 <__lshift>
 800c846:	4631      	mov	r1, r6
 800c848:	ee08 0a10 	vmov	s16, r0
 800c84c:	f000 fd5a 	bl	800d304 <__mcmp>
 800c850:	2800      	cmp	r0, #0
 800c852:	dc03      	bgt.n	800c85c <_dtoa_r+0xa9c>
 800c854:	d1e0      	bne.n	800c818 <_dtoa_r+0xa58>
 800c856:	f01a 0f01 	tst.w	sl, #1
 800c85a:	d0dd      	beq.n	800c818 <_dtoa_r+0xa58>
 800c85c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c860:	d1d7      	bne.n	800c812 <_dtoa_r+0xa52>
 800c862:	2339      	movs	r3, #57	; 0x39
 800c864:	f88b 3000 	strb.w	r3, [fp]
 800c868:	462b      	mov	r3, r5
 800c86a:	461d      	mov	r5, r3
 800c86c:	3b01      	subs	r3, #1
 800c86e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c872:	2a39      	cmp	r2, #57	; 0x39
 800c874:	d071      	beq.n	800c95a <_dtoa_r+0xb9a>
 800c876:	3201      	adds	r2, #1
 800c878:	701a      	strb	r2, [r3, #0]
 800c87a:	e746      	b.n	800c70a <_dtoa_r+0x94a>
 800c87c:	2a00      	cmp	r2, #0
 800c87e:	dd07      	ble.n	800c890 <_dtoa_r+0xad0>
 800c880:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c884:	d0ed      	beq.n	800c862 <_dtoa_r+0xaa2>
 800c886:	f10a 0301 	add.w	r3, sl, #1
 800c88a:	f88b 3000 	strb.w	r3, [fp]
 800c88e:	e73c      	b.n	800c70a <_dtoa_r+0x94a>
 800c890:	9b05      	ldr	r3, [sp, #20]
 800c892:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c896:	4599      	cmp	r9, r3
 800c898:	d047      	beq.n	800c92a <_dtoa_r+0xb6a>
 800c89a:	ee18 1a10 	vmov	r1, s16
 800c89e:	2300      	movs	r3, #0
 800c8a0:	220a      	movs	r2, #10
 800c8a2:	4620      	mov	r0, r4
 800c8a4:	f000 fb0e 	bl	800cec4 <__multadd>
 800c8a8:	45b8      	cmp	r8, r7
 800c8aa:	ee08 0a10 	vmov	s16, r0
 800c8ae:	f04f 0300 	mov.w	r3, #0
 800c8b2:	f04f 020a 	mov.w	r2, #10
 800c8b6:	4641      	mov	r1, r8
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	d106      	bne.n	800c8ca <_dtoa_r+0xb0a>
 800c8bc:	f000 fb02 	bl	800cec4 <__multadd>
 800c8c0:	4680      	mov	r8, r0
 800c8c2:	4607      	mov	r7, r0
 800c8c4:	f109 0901 	add.w	r9, r9, #1
 800c8c8:	e772      	b.n	800c7b0 <_dtoa_r+0x9f0>
 800c8ca:	f000 fafb 	bl	800cec4 <__multadd>
 800c8ce:	4639      	mov	r1, r7
 800c8d0:	4680      	mov	r8, r0
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	220a      	movs	r2, #10
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 faf4 	bl	800cec4 <__multadd>
 800c8dc:	4607      	mov	r7, r0
 800c8de:	e7f1      	b.n	800c8c4 <_dtoa_r+0xb04>
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	9302      	str	r3, [sp, #8]
 800c8e4:	9d01      	ldr	r5, [sp, #4]
 800c8e6:	ee18 0a10 	vmov	r0, s16
 800c8ea:	4631      	mov	r1, r6
 800c8ec:	f7ff f9da 	bl	800bca4 <quorem>
 800c8f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c8f4:	9b01      	ldr	r3, [sp, #4]
 800c8f6:	f805 ab01 	strb.w	sl, [r5], #1
 800c8fa:	1aea      	subs	r2, r5, r3
 800c8fc:	9b02      	ldr	r3, [sp, #8]
 800c8fe:	4293      	cmp	r3, r2
 800c900:	dd09      	ble.n	800c916 <_dtoa_r+0xb56>
 800c902:	ee18 1a10 	vmov	r1, s16
 800c906:	2300      	movs	r3, #0
 800c908:	220a      	movs	r2, #10
 800c90a:	4620      	mov	r0, r4
 800c90c:	f000 fada 	bl	800cec4 <__multadd>
 800c910:	ee08 0a10 	vmov	s16, r0
 800c914:	e7e7      	b.n	800c8e6 <_dtoa_r+0xb26>
 800c916:	9b02      	ldr	r3, [sp, #8]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	bfc8      	it	gt
 800c91c:	461d      	movgt	r5, r3
 800c91e:	9b01      	ldr	r3, [sp, #4]
 800c920:	bfd8      	it	le
 800c922:	2501      	movle	r5, #1
 800c924:	441d      	add	r5, r3
 800c926:	f04f 0800 	mov.w	r8, #0
 800c92a:	ee18 1a10 	vmov	r1, s16
 800c92e:	2201      	movs	r2, #1
 800c930:	4620      	mov	r0, r4
 800c932:	f000 fc77 	bl	800d224 <__lshift>
 800c936:	4631      	mov	r1, r6
 800c938:	ee08 0a10 	vmov	s16, r0
 800c93c:	f000 fce2 	bl	800d304 <__mcmp>
 800c940:	2800      	cmp	r0, #0
 800c942:	dc91      	bgt.n	800c868 <_dtoa_r+0xaa8>
 800c944:	d102      	bne.n	800c94c <_dtoa_r+0xb8c>
 800c946:	f01a 0f01 	tst.w	sl, #1
 800c94a:	d18d      	bne.n	800c868 <_dtoa_r+0xaa8>
 800c94c:	462b      	mov	r3, r5
 800c94e:	461d      	mov	r5, r3
 800c950:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c954:	2a30      	cmp	r2, #48	; 0x30
 800c956:	d0fa      	beq.n	800c94e <_dtoa_r+0xb8e>
 800c958:	e6d7      	b.n	800c70a <_dtoa_r+0x94a>
 800c95a:	9a01      	ldr	r2, [sp, #4]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d184      	bne.n	800c86a <_dtoa_r+0xaaa>
 800c960:	9b00      	ldr	r3, [sp, #0]
 800c962:	3301      	adds	r3, #1
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	2331      	movs	r3, #49	; 0x31
 800c968:	7013      	strb	r3, [r2, #0]
 800c96a:	e6ce      	b.n	800c70a <_dtoa_r+0x94a>
 800c96c:	4b09      	ldr	r3, [pc, #36]	; (800c994 <_dtoa_r+0xbd4>)
 800c96e:	f7ff ba95 	b.w	800be9c <_dtoa_r+0xdc>
 800c972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c974:	2b00      	cmp	r3, #0
 800c976:	f47f aa6e 	bne.w	800be56 <_dtoa_r+0x96>
 800c97a:	4b07      	ldr	r3, [pc, #28]	; (800c998 <_dtoa_r+0xbd8>)
 800c97c:	f7ff ba8e 	b.w	800be9c <_dtoa_r+0xdc>
 800c980:	9b02      	ldr	r3, [sp, #8]
 800c982:	2b00      	cmp	r3, #0
 800c984:	dcae      	bgt.n	800c8e4 <_dtoa_r+0xb24>
 800c986:	9b06      	ldr	r3, [sp, #24]
 800c988:	2b02      	cmp	r3, #2
 800c98a:	f73f aea8 	bgt.w	800c6de <_dtoa_r+0x91e>
 800c98e:	e7a9      	b.n	800c8e4 <_dtoa_r+0xb24>
 800c990:	08027043 	.word	0x08027043
 800c994:	0802732c 	.word	0x0802732c
 800c998:	08026fdb 	.word	0x08026fdb

0800c99c <std>:
 800c99c:	2300      	movs	r3, #0
 800c99e:	b510      	push	{r4, lr}
 800c9a0:	4604      	mov	r4, r0
 800c9a2:	e9c0 3300 	strd	r3, r3, [r0]
 800c9a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9aa:	6083      	str	r3, [r0, #8]
 800c9ac:	8181      	strh	r1, [r0, #12]
 800c9ae:	6643      	str	r3, [r0, #100]	; 0x64
 800c9b0:	81c2      	strh	r2, [r0, #14]
 800c9b2:	6183      	str	r3, [r0, #24]
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	2208      	movs	r2, #8
 800c9b8:	305c      	adds	r0, #92	; 0x5c
 800c9ba:	f7fe f8e9 	bl	800ab90 <memset>
 800c9be:	4b05      	ldr	r3, [pc, #20]	; (800c9d4 <std+0x38>)
 800c9c0:	6263      	str	r3, [r4, #36]	; 0x24
 800c9c2:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <std+0x3c>)
 800c9c4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c9c6:	4b05      	ldr	r3, [pc, #20]	; (800c9dc <std+0x40>)
 800c9c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c9ca:	4b05      	ldr	r3, [pc, #20]	; (800c9e0 <std+0x44>)
 800c9cc:	6224      	str	r4, [r4, #32]
 800c9ce:	6323      	str	r3, [r4, #48]	; 0x30
 800c9d0:	bd10      	pop	{r4, pc}
 800c9d2:	bf00      	nop
 800c9d4:	0800daf9 	.word	0x0800daf9
 800c9d8:	0800db1f 	.word	0x0800db1f
 800c9dc:	0800db57 	.word	0x0800db57
 800c9e0:	0800db7b 	.word	0x0800db7b

0800c9e4 <_cleanup_r>:
 800c9e4:	4901      	ldr	r1, [pc, #4]	; (800c9ec <_cleanup_r+0x8>)
 800c9e6:	f000 b8c1 	b.w	800cb6c <_fwalk_reent>
 800c9ea:	bf00      	nop
 800c9ec:	0800dfb1 	.word	0x0800dfb1

0800c9f0 <__sfmoreglue>:
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	2268      	movs	r2, #104	; 0x68
 800c9f4:	1e4d      	subs	r5, r1, #1
 800c9f6:	4355      	muls	r5, r2
 800c9f8:	460e      	mov	r6, r1
 800c9fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9fe:	f7fe f93b 	bl	800ac78 <_malloc_r>
 800ca02:	4604      	mov	r4, r0
 800ca04:	b140      	cbz	r0, 800ca18 <__sfmoreglue+0x28>
 800ca06:	2100      	movs	r1, #0
 800ca08:	e9c0 1600 	strd	r1, r6, [r0]
 800ca0c:	300c      	adds	r0, #12
 800ca0e:	60a0      	str	r0, [r4, #8]
 800ca10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ca14:	f7fe f8bc 	bl	800ab90 <memset>
 800ca18:	4620      	mov	r0, r4
 800ca1a:	bd70      	pop	{r4, r5, r6, pc}

0800ca1c <__sfp_lock_acquire>:
 800ca1c:	4801      	ldr	r0, [pc, #4]	; (800ca24 <__sfp_lock_acquire+0x8>)
 800ca1e:	f000 b9d1 	b.w	800cdc4 <__retarget_lock_acquire_recursive>
 800ca22:	bf00      	nop
 800ca24:	20000b8e 	.word	0x20000b8e

0800ca28 <__sfp_lock_release>:
 800ca28:	4801      	ldr	r0, [pc, #4]	; (800ca30 <__sfp_lock_release+0x8>)
 800ca2a:	f000 b9cd 	b.w	800cdc8 <__retarget_lock_release_recursive>
 800ca2e:	bf00      	nop
 800ca30:	20000b8e 	.word	0x20000b8e

0800ca34 <__sinit_lock_acquire>:
 800ca34:	4801      	ldr	r0, [pc, #4]	; (800ca3c <__sinit_lock_acquire+0x8>)
 800ca36:	f000 b9c5 	b.w	800cdc4 <__retarget_lock_acquire_recursive>
 800ca3a:	bf00      	nop
 800ca3c:	20000b8f 	.word	0x20000b8f

0800ca40 <__sinit_lock_release>:
 800ca40:	4801      	ldr	r0, [pc, #4]	; (800ca48 <__sinit_lock_release+0x8>)
 800ca42:	f000 b9c1 	b.w	800cdc8 <__retarget_lock_release_recursive>
 800ca46:	bf00      	nop
 800ca48:	20000b8f 	.word	0x20000b8f

0800ca4c <__sinit>:
 800ca4c:	b510      	push	{r4, lr}
 800ca4e:	4604      	mov	r4, r0
 800ca50:	f7ff fff0 	bl	800ca34 <__sinit_lock_acquire>
 800ca54:	69a3      	ldr	r3, [r4, #24]
 800ca56:	b11b      	cbz	r3, 800ca60 <__sinit+0x14>
 800ca58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca5c:	f7ff bff0 	b.w	800ca40 <__sinit_lock_release>
 800ca60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca64:	6523      	str	r3, [r4, #80]	; 0x50
 800ca66:	4b13      	ldr	r3, [pc, #76]	; (800cab4 <__sinit+0x68>)
 800ca68:	4a13      	ldr	r2, [pc, #76]	; (800cab8 <__sinit+0x6c>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca6e:	42a3      	cmp	r3, r4
 800ca70:	bf04      	itt	eq
 800ca72:	2301      	moveq	r3, #1
 800ca74:	61a3      	streq	r3, [r4, #24]
 800ca76:	4620      	mov	r0, r4
 800ca78:	f000 f820 	bl	800cabc <__sfp>
 800ca7c:	6060      	str	r0, [r4, #4]
 800ca7e:	4620      	mov	r0, r4
 800ca80:	f000 f81c 	bl	800cabc <__sfp>
 800ca84:	60a0      	str	r0, [r4, #8]
 800ca86:	4620      	mov	r0, r4
 800ca88:	f000 f818 	bl	800cabc <__sfp>
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	60e0      	str	r0, [r4, #12]
 800ca90:	2104      	movs	r1, #4
 800ca92:	6860      	ldr	r0, [r4, #4]
 800ca94:	f7ff ff82 	bl	800c99c <std>
 800ca98:	68a0      	ldr	r0, [r4, #8]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	2109      	movs	r1, #9
 800ca9e:	f7ff ff7d 	bl	800c99c <std>
 800caa2:	68e0      	ldr	r0, [r4, #12]
 800caa4:	2202      	movs	r2, #2
 800caa6:	2112      	movs	r1, #18
 800caa8:	f7ff ff78 	bl	800c99c <std>
 800caac:	2301      	movs	r3, #1
 800caae:	61a3      	str	r3, [r4, #24]
 800cab0:	e7d2      	b.n	800ca58 <__sinit+0xc>
 800cab2:	bf00      	nop
 800cab4:	08026da4 	.word	0x08026da4
 800cab8:	0800c9e5 	.word	0x0800c9e5

0800cabc <__sfp>:
 800cabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cabe:	4607      	mov	r7, r0
 800cac0:	f7ff ffac 	bl	800ca1c <__sfp_lock_acquire>
 800cac4:	4b1e      	ldr	r3, [pc, #120]	; (800cb40 <__sfp+0x84>)
 800cac6:	681e      	ldr	r6, [r3, #0]
 800cac8:	69b3      	ldr	r3, [r6, #24]
 800caca:	b913      	cbnz	r3, 800cad2 <__sfp+0x16>
 800cacc:	4630      	mov	r0, r6
 800cace:	f7ff ffbd 	bl	800ca4c <__sinit>
 800cad2:	3648      	adds	r6, #72	; 0x48
 800cad4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cad8:	3b01      	subs	r3, #1
 800cada:	d503      	bpl.n	800cae4 <__sfp+0x28>
 800cadc:	6833      	ldr	r3, [r6, #0]
 800cade:	b30b      	cbz	r3, 800cb24 <__sfp+0x68>
 800cae0:	6836      	ldr	r6, [r6, #0]
 800cae2:	e7f7      	b.n	800cad4 <__sfp+0x18>
 800cae4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cae8:	b9d5      	cbnz	r5, 800cb20 <__sfp+0x64>
 800caea:	4b16      	ldr	r3, [pc, #88]	; (800cb44 <__sfp+0x88>)
 800caec:	60e3      	str	r3, [r4, #12]
 800caee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800caf2:	6665      	str	r5, [r4, #100]	; 0x64
 800caf4:	f000 f964 	bl	800cdc0 <__retarget_lock_init_recursive>
 800caf8:	f7ff ff96 	bl	800ca28 <__sfp_lock_release>
 800cafc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cb00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cb04:	6025      	str	r5, [r4, #0]
 800cb06:	61a5      	str	r5, [r4, #24]
 800cb08:	2208      	movs	r2, #8
 800cb0a:	4629      	mov	r1, r5
 800cb0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cb10:	f7fe f83e 	bl	800ab90 <memset>
 800cb14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cb18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cb1c:	4620      	mov	r0, r4
 800cb1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb20:	3468      	adds	r4, #104	; 0x68
 800cb22:	e7d9      	b.n	800cad8 <__sfp+0x1c>
 800cb24:	2104      	movs	r1, #4
 800cb26:	4638      	mov	r0, r7
 800cb28:	f7ff ff62 	bl	800c9f0 <__sfmoreglue>
 800cb2c:	4604      	mov	r4, r0
 800cb2e:	6030      	str	r0, [r6, #0]
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d1d5      	bne.n	800cae0 <__sfp+0x24>
 800cb34:	f7ff ff78 	bl	800ca28 <__sfp_lock_release>
 800cb38:	230c      	movs	r3, #12
 800cb3a:	603b      	str	r3, [r7, #0]
 800cb3c:	e7ee      	b.n	800cb1c <__sfp+0x60>
 800cb3e:	bf00      	nop
 800cb40:	08026da4 	.word	0x08026da4
 800cb44:	ffff0001 	.word	0xffff0001

0800cb48 <fiprintf>:
 800cb48:	b40e      	push	{r1, r2, r3}
 800cb4a:	b503      	push	{r0, r1, lr}
 800cb4c:	4601      	mov	r1, r0
 800cb4e:	ab03      	add	r3, sp, #12
 800cb50:	4805      	ldr	r0, [pc, #20]	; (800cb68 <fiprintf+0x20>)
 800cb52:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb56:	6800      	ldr	r0, [r0, #0]
 800cb58:	9301      	str	r3, [sp, #4]
 800cb5a:	f000 fe71 	bl	800d840 <_vfiprintf_r>
 800cb5e:	b002      	add	sp, #8
 800cb60:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb64:	b003      	add	sp, #12
 800cb66:	4770      	bx	lr
 800cb68:	200000cc 	.word	0x200000cc

0800cb6c <_fwalk_reent>:
 800cb6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb70:	4606      	mov	r6, r0
 800cb72:	4688      	mov	r8, r1
 800cb74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb78:	2700      	movs	r7, #0
 800cb7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb7e:	f1b9 0901 	subs.w	r9, r9, #1
 800cb82:	d505      	bpl.n	800cb90 <_fwalk_reent+0x24>
 800cb84:	6824      	ldr	r4, [r4, #0]
 800cb86:	2c00      	cmp	r4, #0
 800cb88:	d1f7      	bne.n	800cb7a <_fwalk_reent+0xe>
 800cb8a:	4638      	mov	r0, r7
 800cb8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb90:	89ab      	ldrh	r3, [r5, #12]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d907      	bls.n	800cba6 <_fwalk_reent+0x3a>
 800cb96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	d003      	beq.n	800cba6 <_fwalk_reent+0x3a>
 800cb9e:	4629      	mov	r1, r5
 800cba0:	4630      	mov	r0, r6
 800cba2:	47c0      	blx	r8
 800cba4:	4307      	orrs	r7, r0
 800cba6:	3568      	adds	r5, #104	; 0x68
 800cba8:	e7e9      	b.n	800cb7e <_fwalk_reent+0x12>
	...

0800cbac <_findenv_r>:
 800cbac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbb0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800cc20 <_findenv_r+0x74>
 800cbb4:	4607      	mov	r7, r0
 800cbb6:	4689      	mov	r9, r1
 800cbb8:	4616      	mov	r6, r2
 800cbba:	f001 f967 	bl	800de8c <__env_lock>
 800cbbe:	f8da 4000 	ldr.w	r4, [sl]
 800cbc2:	b134      	cbz	r4, 800cbd2 <_findenv_r+0x26>
 800cbc4:	464b      	mov	r3, r9
 800cbc6:	4698      	mov	r8, r3
 800cbc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbcc:	b13a      	cbz	r2, 800cbde <_findenv_r+0x32>
 800cbce:	2a3d      	cmp	r2, #61	; 0x3d
 800cbd0:	d1f9      	bne.n	800cbc6 <_findenv_r+0x1a>
 800cbd2:	4638      	mov	r0, r7
 800cbd4:	f001 f960 	bl	800de98 <__env_unlock>
 800cbd8:	2000      	movs	r0, #0
 800cbda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbde:	eba8 0809 	sub.w	r8, r8, r9
 800cbe2:	46a3      	mov	fp, r4
 800cbe4:	f854 0b04 	ldr.w	r0, [r4], #4
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	d0f2      	beq.n	800cbd2 <_findenv_r+0x26>
 800cbec:	4642      	mov	r2, r8
 800cbee:	4649      	mov	r1, r9
 800cbf0:	f000 ffcf 	bl	800db92 <strncmp>
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d1f4      	bne.n	800cbe2 <_findenv_r+0x36>
 800cbf8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800cbfc:	eb03 0508 	add.w	r5, r3, r8
 800cc00:	f813 3008 	ldrb.w	r3, [r3, r8]
 800cc04:	2b3d      	cmp	r3, #61	; 0x3d
 800cc06:	d1ec      	bne.n	800cbe2 <_findenv_r+0x36>
 800cc08:	f8da 3000 	ldr.w	r3, [sl]
 800cc0c:	ebab 0303 	sub.w	r3, fp, r3
 800cc10:	109b      	asrs	r3, r3, #2
 800cc12:	4638      	mov	r0, r7
 800cc14:	6033      	str	r3, [r6, #0]
 800cc16:	f001 f93f 	bl	800de98 <__env_unlock>
 800cc1a:	1c68      	adds	r0, r5, #1
 800cc1c:	e7dd      	b.n	800cbda <_findenv_r+0x2e>
 800cc1e:	bf00      	nop
 800cc20:	20000190 	.word	0x20000190

0800cc24 <_getenv_r>:
 800cc24:	b507      	push	{r0, r1, r2, lr}
 800cc26:	aa01      	add	r2, sp, #4
 800cc28:	f7ff ffc0 	bl	800cbac <_findenv_r>
 800cc2c:	b003      	add	sp, #12
 800cc2e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800cc34 <_gettimeofday_r>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	4d07      	ldr	r5, [pc, #28]	; (800cc54 <_gettimeofday_r+0x20>)
 800cc38:	2300      	movs	r3, #0
 800cc3a:	4604      	mov	r4, r0
 800cc3c:	4608      	mov	r0, r1
 800cc3e:	4611      	mov	r1, r2
 800cc40:	602b      	str	r3, [r5, #0]
 800cc42:	f001 ffd1 	bl	800ebe8 <_gettimeofday>
 800cc46:	1c43      	adds	r3, r0, #1
 800cc48:	d102      	bne.n	800cc50 <_gettimeofday_r+0x1c>
 800cc4a:	682b      	ldr	r3, [r5, #0]
 800cc4c:	b103      	cbz	r3, 800cc50 <_gettimeofday_r+0x1c>
 800cc4e:	6023      	str	r3, [r4, #0]
 800cc50:	bd38      	pop	{r3, r4, r5, pc}
 800cc52:	bf00      	nop
 800cc54:	20000b94 	.word	0x20000b94

0800cc58 <__gettzinfo>:
 800cc58:	4800      	ldr	r0, [pc, #0]	; (800cc5c <__gettzinfo+0x4>)
 800cc5a:	4770      	bx	lr
 800cc5c:	20000138 	.word	0x20000138

0800cc60 <gmtime_r>:
 800cc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc64:	e9d0 6700 	ldrd	r6, r7, [r0]
 800cc68:	460c      	mov	r4, r1
 800cc6a:	4a4f      	ldr	r2, [pc, #316]	; (800cda8 <gmtime_r+0x148>)
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	4630      	mov	r0, r6
 800cc70:	4639      	mov	r1, r7
 800cc72:	f7f4 f863 	bl	8000d3c <__aeabi_ldivmod>
 800cc76:	4639      	mov	r1, r7
 800cc78:	4605      	mov	r5, r0
 800cc7a:	4a4b      	ldr	r2, [pc, #300]	; (800cda8 <gmtime_r+0x148>)
 800cc7c:	4630      	mov	r0, r6
 800cc7e:	2300      	movs	r3, #0
 800cc80:	f7f4 f85c 	bl	8000d3c <__aeabi_ldivmod>
 800cc84:	2a00      	cmp	r2, #0
 800cc86:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800cc8a:	bfb7      	itett	lt
 800cc8c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800cc90:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800cc94:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800cc98:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800cc9c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800cca0:	fbb2 f1f0 	udiv	r1, r2, r0
 800cca4:	fb00 2211 	mls	r2, r0, r1, r2
 800cca8:	203c      	movs	r0, #60	; 0x3c
 800ccaa:	60a1      	str	r1, [r4, #8]
 800ccac:	fbb2 f1f0 	udiv	r1, r2, r0
 800ccb0:	fb00 2211 	mls	r2, r0, r1, r2
 800ccb4:	6061      	str	r1, [r4, #4]
 800ccb6:	6022      	str	r2, [r4, #0]
 800ccb8:	2107      	movs	r1, #7
 800ccba:	1cda      	adds	r2, r3, #3
 800ccbc:	fb92 f1f1 	sdiv	r1, r2, r1
 800ccc0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ccc4:	1a52      	subs	r2, r2, r1
 800ccc6:	bf48      	it	mi
 800ccc8:	3207      	addmi	r2, #7
 800ccca:	4d38      	ldr	r5, [pc, #224]	; (800cdac <gmtime_r+0x14c>)
 800cccc:	4838      	ldr	r0, [pc, #224]	; (800cdb0 <gmtime_r+0x150>)
 800ccce:	61a2      	str	r2, [r4, #24]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	bfb7      	itett	lt
 800ccd4:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800ccd8:	fb93 f5f5 	sdivge	r5, r3, r5
 800ccdc:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800cce0:	fb92 f5f5 	sdivlt	r5, r2, r5
 800cce4:	fb00 3005 	mla	r0, r0, r5, r3
 800cce8:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800ccec:	fbb0 f2f2 	udiv	r2, r0, r2
 800ccf0:	4402      	add	r2, r0
 800ccf2:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800ccf6:	fbb0 f1f3 	udiv	r1, r0, r3
 800ccfa:	1a52      	subs	r2, r2, r1
 800ccfc:	f240 1c6d 	movw	ip, #365	; 0x16d
 800cd00:	492c      	ldr	r1, [pc, #176]	; (800cdb4 <gmtime_r+0x154>)
 800cd02:	fbb0 f1f1 	udiv	r1, r0, r1
 800cd06:	2764      	movs	r7, #100	; 0x64
 800cd08:	1a52      	subs	r2, r2, r1
 800cd0a:	fbb2 f1fc 	udiv	r1, r2, ip
 800cd0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd12:	fbb1 f6f7 	udiv	r6, r1, r7
 800cd16:	1af3      	subs	r3, r6, r3
 800cd18:	4403      	add	r3, r0
 800cd1a:	fb0c 3311 	mls	r3, ip, r1, r3
 800cd1e:	2299      	movs	r2, #153	; 0x99
 800cd20:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800cd24:	f10e 0e02 	add.w	lr, lr, #2
 800cd28:	f103 0c01 	add.w	ip, r3, #1
 800cd2c:	fbbe f0f2 	udiv	r0, lr, r2
 800cd30:	4342      	muls	r2, r0
 800cd32:	3202      	adds	r2, #2
 800cd34:	f04f 0805 	mov.w	r8, #5
 800cd38:	fbb2 f2f8 	udiv	r2, r2, r8
 800cd3c:	ebac 0c02 	sub.w	ip, ip, r2
 800cd40:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800cd44:	4596      	cmp	lr, r2
 800cd46:	bf94      	ite	ls
 800cd48:	2202      	movls	r2, #2
 800cd4a:	f06f 0209 	mvnhi.w	r2, #9
 800cd4e:	4410      	add	r0, r2
 800cd50:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cd54:	fb02 1505 	mla	r5, r2, r5, r1
 800cd58:	2801      	cmp	r0, #1
 800cd5a:	bf98      	it	ls
 800cd5c:	3501      	addls	r5, #1
 800cd5e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800cd62:	d30d      	bcc.n	800cd80 <gmtime_r+0x120>
 800cd64:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800cd68:	61e3      	str	r3, [r4, #28]
 800cd6a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800cd6e:	2300      	movs	r3, #0
 800cd70:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800cd74:	f8c4 c00c 	str.w	ip, [r4, #12]
 800cd78:	6223      	str	r3, [r4, #32]
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd80:	078a      	lsls	r2, r1, #30
 800cd82:	d102      	bne.n	800cd8a <gmtime_r+0x12a>
 800cd84:	fb07 1616 	mls	r6, r7, r6, r1
 800cd88:	b95e      	cbnz	r6, 800cda2 <gmtime_r+0x142>
 800cd8a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800cd8e:	fbb1 f6f2 	udiv	r6, r1, r2
 800cd92:	fb02 1216 	mls	r2, r2, r6, r1
 800cd96:	fab2 f282 	clz	r2, r2
 800cd9a:	0952      	lsrs	r2, r2, #5
 800cd9c:	333b      	adds	r3, #59	; 0x3b
 800cd9e:	4413      	add	r3, r2
 800cda0:	e7e2      	b.n	800cd68 <gmtime_r+0x108>
 800cda2:	2201      	movs	r2, #1
 800cda4:	e7fa      	b.n	800cd9c <gmtime_r+0x13c>
 800cda6:	bf00      	nop
 800cda8:	00015180 	.word	0x00015180
 800cdac:	00023ab1 	.word	0x00023ab1
 800cdb0:	fffdc54f 	.word	0xfffdc54f
 800cdb4:	00023ab0 	.word	0x00023ab0

0800cdb8 <_localeconv_r>:
 800cdb8:	4800      	ldr	r0, [pc, #0]	; (800cdbc <_localeconv_r+0x4>)
 800cdba:	4770      	bx	lr
 800cdbc:	20000284 	.word	0x20000284

0800cdc0 <__retarget_lock_init_recursive>:
 800cdc0:	4770      	bx	lr

0800cdc2 <__retarget_lock_acquire>:
 800cdc2:	4770      	bx	lr

0800cdc4 <__retarget_lock_acquire_recursive>:
 800cdc4:	4770      	bx	lr

0800cdc6 <__retarget_lock_release>:
 800cdc6:	4770      	bx	lr

0800cdc8 <__retarget_lock_release_recursive>:
 800cdc8:	4770      	bx	lr

0800cdca <memcpy>:
 800cdca:	440a      	add	r2, r1
 800cdcc:	4291      	cmp	r1, r2
 800cdce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cdd2:	d100      	bne.n	800cdd6 <memcpy+0xc>
 800cdd4:	4770      	bx	lr
 800cdd6:	b510      	push	{r4, lr}
 800cdd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cde0:	4291      	cmp	r1, r2
 800cde2:	d1f9      	bne.n	800cdd8 <memcpy+0xe>
 800cde4:	bd10      	pop	{r4, pc}
	...

0800cde8 <__malloc_lock>:
 800cde8:	4801      	ldr	r0, [pc, #4]	; (800cdf0 <__malloc_lock+0x8>)
 800cdea:	f7ff bfeb 	b.w	800cdc4 <__retarget_lock_acquire_recursive>
 800cdee:	bf00      	nop
 800cdf0:	20000b8d 	.word	0x20000b8d

0800cdf4 <__malloc_unlock>:
 800cdf4:	4801      	ldr	r0, [pc, #4]	; (800cdfc <__malloc_unlock+0x8>)
 800cdf6:	f7ff bfe7 	b.w	800cdc8 <__retarget_lock_release_recursive>
 800cdfa:	bf00      	nop
 800cdfc:	20000b8d 	.word	0x20000b8d

0800ce00 <_Balloc>:
 800ce00:	b570      	push	{r4, r5, r6, lr}
 800ce02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce04:	4604      	mov	r4, r0
 800ce06:	460d      	mov	r5, r1
 800ce08:	b976      	cbnz	r6, 800ce28 <_Balloc+0x28>
 800ce0a:	2010      	movs	r0, #16
 800ce0c:	f7fd feb0 	bl	800ab70 <malloc>
 800ce10:	4602      	mov	r2, r0
 800ce12:	6260      	str	r0, [r4, #36]	; 0x24
 800ce14:	b920      	cbnz	r0, 800ce20 <_Balloc+0x20>
 800ce16:	4b18      	ldr	r3, [pc, #96]	; (800ce78 <_Balloc+0x78>)
 800ce18:	4818      	ldr	r0, [pc, #96]	; (800ce7c <_Balloc+0x7c>)
 800ce1a:	2166      	movs	r1, #102	; 0x66
 800ce1c:	f7fe ff24 	bl	800bc68 <__assert_func>
 800ce20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce24:	6006      	str	r6, [r0, #0]
 800ce26:	60c6      	str	r6, [r0, #12]
 800ce28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ce2a:	68f3      	ldr	r3, [r6, #12]
 800ce2c:	b183      	cbz	r3, 800ce50 <_Balloc+0x50>
 800ce2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce36:	b9b8      	cbnz	r0, 800ce68 <_Balloc+0x68>
 800ce38:	2101      	movs	r1, #1
 800ce3a:	fa01 f605 	lsl.w	r6, r1, r5
 800ce3e:	1d72      	adds	r2, r6, #5
 800ce40:	0092      	lsls	r2, r2, #2
 800ce42:	4620      	mov	r0, r4
 800ce44:	f000 fb60 	bl	800d508 <_calloc_r>
 800ce48:	b160      	cbz	r0, 800ce64 <_Balloc+0x64>
 800ce4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce4e:	e00e      	b.n	800ce6e <_Balloc+0x6e>
 800ce50:	2221      	movs	r2, #33	; 0x21
 800ce52:	2104      	movs	r1, #4
 800ce54:	4620      	mov	r0, r4
 800ce56:	f000 fb57 	bl	800d508 <_calloc_r>
 800ce5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce5c:	60f0      	str	r0, [r6, #12]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d1e4      	bne.n	800ce2e <_Balloc+0x2e>
 800ce64:	2000      	movs	r0, #0
 800ce66:	bd70      	pop	{r4, r5, r6, pc}
 800ce68:	6802      	ldr	r2, [r0, #0]
 800ce6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ce6e:	2300      	movs	r3, #0
 800ce70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ce74:	e7f7      	b.n	800ce66 <_Balloc+0x66>
 800ce76:	bf00      	nop
 800ce78:	08026da8 	.word	0x08026da8
 800ce7c:	080270b4 	.word	0x080270b4

0800ce80 <_Bfree>:
 800ce80:	b570      	push	{r4, r5, r6, lr}
 800ce82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ce84:	4605      	mov	r5, r0
 800ce86:	460c      	mov	r4, r1
 800ce88:	b976      	cbnz	r6, 800cea8 <_Bfree+0x28>
 800ce8a:	2010      	movs	r0, #16
 800ce8c:	f7fd fe70 	bl	800ab70 <malloc>
 800ce90:	4602      	mov	r2, r0
 800ce92:	6268      	str	r0, [r5, #36]	; 0x24
 800ce94:	b920      	cbnz	r0, 800cea0 <_Bfree+0x20>
 800ce96:	4b09      	ldr	r3, [pc, #36]	; (800cebc <_Bfree+0x3c>)
 800ce98:	4809      	ldr	r0, [pc, #36]	; (800cec0 <_Bfree+0x40>)
 800ce9a:	218a      	movs	r1, #138	; 0x8a
 800ce9c:	f7fe fee4 	bl	800bc68 <__assert_func>
 800cea0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cea4:	6006      	str	r6, [r0, #0]
 800cea6:	60c6      	str	r6, [r0, #12]
 800cea8:	b13c      	cbz	r4, 800ceba <_Bfree+0x3a>
 800ceaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ceac:	6862      	ldr	r2, [r4, #4]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ceb4:	6021      	str	r1, [r4, #0]
 800ceb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ceba:	bd70      	pop	{r4, r5, r6, pc}
 800cebc:	08026da8 	.word	0x08026da8
 800cec0:	080270b4 	.word	0x080270b4

0800cec4 <__multadd>:
 800cec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cec8:	690d      	ldr	r5, [r1, #16]
 800ceca:	4607      	mov	r7, r0
 800cecc:	460c      	mov	r4, r1
 800cece:	461e      	mov	r6, r3
 800ced0:	f101 0c14 	add.w	ip, r1, #20
 800ced4:	2000      	movs	r0, #0
 800ced6:	f8dc 3000 	ldr.w	r3, [ip]
 800ceda:	b299      	uxth	r1, r3
 800cedc:	fb02 6101 	mla	r1, r2, r1, r6
 800cee0:	0c1e      	lsrs	r6, r3, #16
 800cee2:	0c0b      	lsrs	r3, r1, #16
 800cee4:	fb02 3306 	mla	r3, r2, r6, r3
 800cee8:	b289      	uxth	r1, r1
 800ceea:	3001      	adds	r0, #1
 800ceec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cef0:	4285      	cmp	r5, r0
 800cef2:	f84c 1b04 	str.w	r1, [ip], #4
 800cef6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cefa:	dcec      	bgt.n	800ced6 <__multadd+0x12>
 800cefc:	b30e      	cbz	r6, 800cf42 <__multadd+0x7e>
 800cefe:	68a3      	ldr	r3, [r4, #8]
 800cf00:	42ab      	cmp	r3, r5
 800cf02:	dc19      	bgt.n	800cf38 <__multadd+0x74>
 800cf04:	6861      	ldr	r1, [r4, #4]
 800cf06:	4638      	mov	r0, r7
 800cf08:	3101      	adds	r1, #1
 800cf0a:	f7ff ff79 	bl	800ce00 <_Balloc>
 800cf0e:	4680      	mov	r8, r0
 800cf10:	b928      	cbnz	r0, 800cf1e <__multadd+0x5a>
 800cf12:	4602      	mov	r2, r0
 800cf14:	4b0c      	ldr	r3, [pc, #48]	; (800cf48 <__multadd+0x84>)
 800cf16:	480d      	ldr	r0, [pc, #52]	; (800cf4c <__multadd+0x88>)
 800cf18:	21b5      	movs	r1, #181	; 0xb5
 800cf1a:	f7fe fea5 	bl	800bc68 <__assert_func>
 800cf1e:	6922      	ldr	r2, [r4, #16]
 800cf20:	3202      	adds	r2, #2
 800cf22:	f104 010c 	add.w	r1, r4, #12
 800cf26:	0092      	lsls	r2, r2, #2
 800cf28:	300c      	adds	r0, #12
 800cf2a:	f7ff ff4e 	bl	800cdca <memcpy>
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4638      	mov	r0, r7
 800cf32:	f7ff ffa5 	bl	800ce80 <_Bfree>
 800cf36:	4644      	mov	r4, r8
 800cf38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf3c:	3501      	adds	r5, #1
 800cf3e:	615e      	str	r6, [r3, #20]
 800cf40:	6125      	str	r5, [r4, #16]
 800cf42:	4620      	mov	r0, r4
 800cf44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf48:	08027043 	.word	0x08027043
 800cf4c:	080270b4 	.word	0x080270b4

0800cf50 <__hi0bits>:
 800cf50:	0c03      	lsrs	r3, r0, #16
 800cf52:	041b      	lsls	r3, r3, #16
 800cf54:	b9d3      	cbnz	r3, 800cf8c <__hi0bits+0x3c>
 800cf56:	0400      	lsls	r0, r0, #16
 800cf58:	2310      	movs	r3, #16
 800cf5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf5e:	bf04      	itt	eq
 800cf60:	0200      	lsleq	r0, r0, #8
 800cf62:	3308      	addeq	r3, #8
 800cf64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cf68:	bf04      	itt	eq
 800cf6a:	0100      	lsleq	r0, r0, #4
 800cf6c:	3304      	addeq	r3, #4
 800cf6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cf72:	bf04      	itt	eq
 800cf74:	0080      	lsleq	r0, r0, #2
 800cf76:	3302      	addeq	r3, #2
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	db05      	blt.n	800cf88 <__hi0bits+0x38>
 800cf7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cf80:	f103 0301 	add.w	r3, r3, #1
 800cf84:	bf08      	it	eq
 800cf86:	2320      	moveq	r3, #32
 800cf88:	4618      	mov	r0, r3
 800cf8a:	4770      	bx	lr
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	e7e4      	b.n	800cf5a <__hi0bits+0xa>

0800cf90 <__lo0bits>:
 800cf90:	6803      	ldr	r3, [r0, #0]
 800cf92:	f013 0207 	ands.w	r2, r3, #7
 800cf96:	4601      	mov	r1, r0
 800cf98:	d00b      	beq.n	800cfb2 <__lo0bits+0x22>
 800cf9a:	07da      	lsls	r2, r3, #31
 800cf9c:	d423      	bmi.n	800cfe6 <__lo0bits+0x56>
 800cf9e:	0798      	lsls	r0, r3, #30
 800cfa0:	bf49      	itett	mi
 800cfa2:	085b      	lsrmi	r3, r3, #1
 800cfa4:	089b      	lsrpl	r3, r3, #2
 800cfa6:	2001      	movmi	r0, #1
 800cfa8:	600b      	strmi	r3, [r1, #0]
 800cfaa:	bf5c      	itt	pl
 800cfac:	600b      	strpl	r3, [r1, #0]
 800cfae:	2002      	movpl	r0, #2
 800cfb0:	4770      	bx	lr
 800cfb2:	b298      	uxth	r0, r3
 800cfb4:	b9a8      	cbnz	r0, 800cfe2 <__lo0bits+0x52>
 800cfb6:	0c1b      	lsrs	r3, r3, #16
 800cfb8:	2010      	movs	r0, #16
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	b90a      	cbnz	r2, 800cfc2 <__lo0bits+0x32>
 800cfbe:	3008      	adds	r0, #8
 800cfc0:	0a1b      	lsrs	r3, r3, #8
 800cfc2:	071a      	lsls	r2, r3, #28
 800cfc4:	bf04      	itt	eq
 800cfc6:	091b      	lsreq	r3, r3, #4
 800cfc8:	3004      	addeq	r0, #4
 800cfca:	079a      	lsls	r2, r3, #30
 800cfcc:	bf04      	itt	eq
 800cfce:	089b      	lsreq	r3, r3, #2
 800cfd0:	3002      	addeq	r0, #2
 800cfd2:	07da      	lsls	r2, r3, #31
 800cfd4:	d403      	bmi.n	800cfde <__lo0bits+0x4e>
 800cfd6:	085b      	lsrs	r3, r3, #1
 800cfd8:	f100 0001 	add.w	r0, r0, #1
 800cfdc:	d005      	beq.n	800cfea <__lo0bits+0x5a>
 800cfde:	600b      	str	r3, [r1, #0]
 800cfe0:	4770      	bx	lr
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	e7e9      	b.n	800cfba <__lo0bits+0x2a>
 800cfe6:	2000      	movs	r0, #0
 800cfe8:	4770      	bx	lr
 800cfea:	2020      	movs	r0, #32
 800cfec:	4770      	bx	lr
	...

0800cff0 <__i2b>:
 800cff0:	b510      	push	{r4, lr}
 800cff2:	460c      	mov	r4, r1
 800cff4:	2101      	movs	r1, #1
 800cff6:	f7ff ff03 	bl	800ce00 <_Balloc>
 800cffa:	4602      	mov	r2, r0
 800cffc:	b928      	cbnz	r0, 800d00a <__i2b+0x1a>
 800cffe:	4b05      	ldr	r3, [pc, #20]	; (800d014 <__i2b+0x24>)
 800d000:	4805      	ldr	r0, [pc, #20]	; (800d018 <__i2b+0x28>)
 800d002:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d006:	f7fe fe2f 	bl	800bc68 <__assert_func>
 800d00a:	2301      	movs	r3, #1
 800d00c:	6144      	str	r4, [r0, #20]
 800d00e:	6103      	str	r3, [r0, #16]
 800d010:	bd10      	pop	{r4, pc}
 800d012:	bf00      	nop
 800d014:	08027043 	.word	0x08027043
 800d018:	080270b4 	.word	0x080270b4

0800d01c <__multiply>:
 800d01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d020:	4691      	mov	r9, r2
 800d022:	690a      	ldr	r2, [r1, #16]
 800d024:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d028:	429a      	cmp	r2, r3
 800d02a:	bfb8      	it	lt
 800d02c:	460b      	movlt	r3, r1
 800d02e:	460c      	mov	r4, r1
 800d030:	bfbc      	itt	lt
 800d032:	464c      	movlt	r4, r9
 800d034:	4699      	movlt	r9, r3
 800d036:	6927      	ldr	r7, [r4, #16]
 800d038:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d03c:	68a3      	ldr	r3, [r4, #8]
 800d03e:	6861      	ldr	r1, [r4, #4]
 800d040:	eb07 060a 	add.w	r6, r7, sl
 800d044:	42b3      	cmp	r3, r6
 800d046:	b085      	sub	sp, #20
 800d048:	bfb8      	it	lt
 800d04a:	3101      	addlt	r1, #1
 800d04c:	f7ff fed8 	bl	800ce00 <_Balloc>
 800d050:	b930      	cbnz	r0, 800d060 <__multiply+0x44>
 800d052:	4602      	mov	r2, r0
 800d054:	4b44      	ldr	r3, [pc, #272]	; (800d168 <__multiply+0x14c>)
 800d056:	4845      	ldr	r0, [pc, #276]	; (800d16c <__multiply+0x150>)
 800d058:	f240 115d 	movw	r1, #349	; 0x15d
 800d05c:	f7fe fe04 	bl	800bc68 <__assert_func>
 800d060:	f100 0514 	add.w	r5, r0, #20
 800d064:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d068:	462b      	mov	r3, r5
 800d06a:	2200      	movs	r2, #0
 800d06c:	4543      	cmp	r3, r8
 800d06e:	d321      	bcc.n	800d0b4 <__multiply+0x98>
 800d070:	f104 0314 	add.w	r3, r4, #20
 800d074:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d078:	f109 0314 	add.w	r3, r9, #20
 800d07c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d080:	9202      	str	r2, [sp, #8]
 800d082:	1b3a      	subs	r2, r7, r4
 800d084:	3a15      	subs	r2, #21
 800d086:	f022 0203 	bic.w	r2, r2, #3
 800d08a:	3204      	adds	r2, #4
 800d08c:	f104 0115 	add.w	r1, r4, #21
 800d090:	428f      	cmp	r7, r1
 800d092:	bf38      	it	cc
 800d094:	2204      	movcc	r2, #4
 800d096:	9201      	str	r2, [sp, #4]
 800d098:	9a02      	ldr	r2, [sp, #8]
 800d09a:	9303      	str	r3, [sp, #12]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d80c      	bhi.n	800d0ba <__multiply+0x9e>
 800d0a0:	2e00      	cmp	r6, #0
 800d0a2:	dd03      	ble.n	800d0ac <__multiply+0x90>
 800d0a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d05a      	beq.n	800d162 <__multiply+0x146>
 800d0ac:	6106      	str	r6, [r0, #16]
 800d0ae:	b005      	add	sp, #20
 800d0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b4:	f843 2b04 	str.w	r2, [r3], #4
 800d0b8:	e7d8      	b.n	800d06c <__multiply+0x50>
 800d0ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0be:	f1ba 0f00 	cmp.w	sl, #0
 800d0c2:	d024      	beq.n	800d10e <__multiply+0xf2>
 800d0c4:	f104 0e14 	add.w	lr, r4, #20
 800d0c8:	46a9      	mov	r9, r5
 800d0ca:	f04f 0c00 	mov.w	ip, #0
 800d0ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d0d2:	f8d9 1000 	ldr.w	r1, [r9]
 800d0d6:	fa1f fb82 	uxth.w	fp, r2
 800d0da:	b289      	uxth	r1, r1
 800d0dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800d0e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d0e4:	f8d9 2000 	ldr.w	r2, [r9]
 800d0e8:	4461      	add	r1, ip
 800d0ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d0ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800d0f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d0f6:	b289      	uxth	r1, r1
 800d0f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d0fc:	4577      	cmp	r7, lr
 800d0fe:	f849 1b04 	str.w	r1, [r9], #4
 800d102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d106:	d8e2      	bhi.n	800d0ce <__multiply+0xb2>
 800d108:	9a01      	ldr	r2, [sp, #4]
 800d10a:	f845 c002 	str.w	ip, [r5, r2]
 800d10e:	9a03      	ldr	r2, [sp, #12]
 800d110:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d114:	3304      	adds	r3, #4
 800d116:	f1b9 0f00 	cmp.w	r9, #0
 800d11a:	d020      	beq.n	800d15e <__multiply+0x142>
 800d11c:	6829      	ldr	r1, [r5, #0]
 800d11e:	f104 0c14 	add.w	ip, r4, #20
 800d122:	46ae      	mov	lr, r5
 800d124:	f04f 0a00 	mov.w	sl, #0
 800d128:	f8bc b000 	ldrh.w	fp, [ip]
 800d12c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d130:	fb09 220b 	mla	r2, r9, fp, r2
 800d134:	4492      	add	sl, r2
 800d136:	b289      	uxth	r1, r1
 800d138:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d13c:	f84e 1b04 	str.w	r1, [lr], #4
 800d140:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d144:	f8be 1000 	ldrh.w	r1, [lr]
 800d148:	0c12      	lsrs	r2, r2, #16
 800d14a:	fb09 1102 	mla	r1, r9, r2, r1
 800d14e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d152:	4567      	cmp	r7, ip
 800d154:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d158:	d8e6      	bhi.n	800d128 <__multiply+0x10c>
 800d15a:	9a01      	ldr	r2, [sp, #4]
 800d15c:	50a9      	str	r1, [r5, r2]
 800d15e:	3504      	adds	r5, #4
 800d160:	e79a      	b.n	800d098 <__multiply+0x7c>
 800d162:	3e01      	subs	r6, #1
 800d164:	e79c      	b.n	800d0a0 <__multiply+0x84>
 800d166:	bf00      	nop
 800d168:	08027043 	.word	0x08027043
 800d16c:	080270b4 	.word	0x080270b4

0800d170 <__pow5mult>:
 800d170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d174:	4615      	mov	r5, r2
 800d176:	f012 0203 	ands.w	r2, r2, #3
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	d007      	beq.n	800d190 <__pow5mult+0x20>
 800d180:	4c25      	ldr	r4, [pc, #148]	; (800d218 <__pow5mult+0xa8>)
 800d182:	3a01      	subs	r2, #1
 800d184:	2300      	movs	r3, #0
 800d186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d18a:	f7ff fe9b 	bl	800cec4 <__multadd>
 800d18e:	4607      	mov	r7, r0
 800d190:	10ad      	asrs	r5, r5, #2
 800d192:	d03d      	beq.n	800d210 <__pow5mult+0xa0>
 800d194:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d196:	b97c      	cbnz	r4, 800d1b8 <__pow5mult+0x48>
 800d198:	2010      	movs	r0, #16
 800d19a:	f7fd fce9 	bl	800ab70 <malloc>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	6270      	str	r0, [r6, #36]	; 0x24
 800d1a2:	b928      	cbnz	r0, 800d1b0 <__pow5mult+0x40>
 800d1a4:	4b1d      	ldr	r3, [pc, #116]	; (800d21c <__pow5mult+0xac>)
 800d1a6:	481e      	ldr	r0, [pc, #120]	; (800d220 <__pow5mult+0xb0>)
 800d1a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d1ac:	f7fe fd5c 	bl	800bc68 <__assert_func>
 800d1b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1b4:	6004      	str	r4, [r0, #0]
 800d1b6:	60c4      	str	r4, [r0, #12]
 800d1b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d1bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1c0:	b94c      	cbnz	r4, 800d1d6 <__pow5mult+0x66>
 800d1c2:	f240 2171 	movw	r1, #625	; 0x271
 800d1c6:	4630      	mov	r0, r6
 800d1c8:	f7ff ff12 	bl	800cff0 <__i2b>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	6003      	str	r3, [r0, #0]
 800d1d6:	f04f 0900 	mov.w	r9, #0
 800d1da:	07eb      	lsls	r3, r5, #31
 800d1dc:	d50a      	bpl.n	800d1f4 <__pow5mult+0x84>
 800d1de:	4639      	mov	r1, r7
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	4630      	mov	r0, r6
 800d1e4:	f7ff ff1a 	bl	800d01c <__multiply>
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f7ff fe47 	bl	800ce80 <_Bfree>
 800d1f2:	4647      	mov	r7, r8
 800d1f4:	106d      	asrs	r5, r5, #1
 800d1f6:	d00b      	beq.n	800d210 <__pow5mult+0xa0>
 800d1f8:	6820      	ldr	r0, [r4, #0]
 800d1fa:	b938      	cbnz	r0, 800d20c <__pow5mult+0x9c>
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	4621      	mov	r1, r4
 800d200:	4630      	mov	r0, r6
 800d202:	f7ff ff0b 	bl	800d01c <__multiply>
 800d206:	6020      	str	r0, [r4, #0]
 800d208:	f8c0 9000 	str.w	r9, [r0]
 800d20c:	4604      	mov	r4, r0
 800d20e:	e7e4      	b.n	800d1da <__pow5mult+0x6a>
 800d210:	4638      	mov	r0, r7
 800d212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d216:	bf00      	nop
 800d218:	08027200 	.word	0x08027200
 800d21c:	08026da8 	.word	0x08026da8
 800d220:	080270b4 	.word	0x080270b4

0800d224 <__lshift>:
 800d224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d228:	460c      	mov	r4, r1
 800d22a:	6849      	ldr	r1, [r1, #4]
 800d22c:	6923      	ldr	r3, [r4, #16]
 800d22e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d232:	68a3      	ldr	r3, [r4, #8]
 800d234:	4607      	mov	r7, r0
 800d236:	4691      	mov	r9, r2
 800d238:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d23c:	f108 0601 	add.w	r6, r8, #1
 800d240:	42b3      	cmp	r3, r6
 800d242:	db0b      	blt.n	800d25c <__lshift+0x38>
 800d244:	4638      	mov	r0, r7
 800d246:	f7ff fddb 	bl	800ce00 <_Balloc>
 800d24a:	4605      	mov	r5, r0
 800d24c:	b948      	cbnz	r0, 800d262 <__lshift+0x3e>
 800d24e:	4602      	mov	r2, r0
 800d250:	4b2a      	ldr	r3, [pc, #168]	; (800d2fc <__lshift+0xd8>)
 800d252:	482b      	ldr	r0, [pc, #172]	; (800d300 <__lshift+0xdc>)
 800d254:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d258:	f7fe fd06 	bl	800bc68 <__assert_func>
 800d25c:	3101      	adds	r1, #1
 800d25e:	005b      	lsls	r3, r3, #1
 800d260:	e7ee      	b.n	800d240 <__lshift+0x1c>
 800d262:	2300      	movs	r3, #0
 800d264:	f100 0114 	add.w	r1, r0, #20
 800d268:	f100 0210 	add.w	r2, r0, #16
 800d26c:	4618      	mov	r0, r3
 800d26e:	4553      	cmp	r3, sl
 800d270:	db37      	blt.n	800d2e2 <__lshift+0xbe>
 800d272:	6920      	ldr	r0, [r4, #16]
 800d274:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d278:	f104 0314 	add.w	r3, r4, #20
 800d27c:	f019 091f 	ands.w	r9, r9, #31
 800d280:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d284:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d288:	d02f      	beq.n	800d2ea <__lshift+0xc6>
 800d28a:	f1c9 0e20 	rsb	lr, r9, #32
 800d28e:	468a      	mov	sl, r1
 800d290:	f04f 0c00 	mov.w	ip, #0
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	fa02 f209 	lsl.w	r2, r2, r9
 800d29a:	ea42 020c 	orr.w	r2, r2, ip
 800d29e:	f84a 2b04 	str.w	r2, [sl], #4
 800d2a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2a6:	4298      	cmp	r0, r3
 800d2a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d2ac:	d8f2      	bhi.n	800d294 <__lshift+0x70>
 800d2ae:	1b03      	subs	r3, r0, r4
 800d2b0:	3b15      	subs	r3, #21
 800d2b2:	f023 0303 	bic.w	r3, r3, #3
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	f104 0215 	add.w	r2, r4, #21
 800d2bc:	4290      	cmp	r0, r2
 800d2be:	bf38      	it	cc
 800d2c0:	2304      	movcc	r3, #4
 800d2c2:	f841 c003 	str.w	ip, [r1, r3]
 800d2c6:	f1bc 0f00 	cmp.w	ip, #0
 800d2ca:	d001      	beq.n	800d2d0 <__lshift+0xac>
 800d2cc:	f108 0602 	add.w	r6, r8, #2
 800d2d0:	3e01      	subs	r6, #1
 800d2d2:	4638      	mov	r0, r7
 800d2d4:	612e      	str	r6, [r5, #16]
 800d2d6:	4621      	mov	r1, r4
 800d2d8:	f7ff fdd2 	bl	800ce80 <_Bfree>
 800d2dc:	4628      	mov	r0, r5
 800d2de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2e6:	3301      	adds	r3, #1
 800d2e8:	e7c1      	b.n	800d26e <__lshift+0x4a>
 800d2ea:	3904      	subs	r1, #4
 800d2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2f4:	4298      	cmp	r0, r3
 800d2f6:	d8f9      	bhi.n	800d2ec <__lshift+0xc8>
 800d2f8:	e7ea      	b.n	800d2d0 <__lshift+0xac>
 800d2fa:	bf00      	nop
 800d2fc:	08027043 	.word	0x08027043
 800d300:	080270b4 	.word	0x080270b4

0800d304 <__mcmp>:
 800d304:	b530      	push	{r4, r5, lr}
 800d306:	6902      	ldr	r2, [r0, #16]
 800d308:	690c      	ldr	r4, [r1, #16]
 800d30a:	1b12      	subs	r2, r2, r4
 800d30c:	d10e      	bne.n	800d32c <__mcmp+0x28>
 800d30e:	f100 0314 	add.w	r3, r0, #20
 800d312:	3114      	adds	r1, #20
 800d314:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d318:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d31c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d320:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d324:	42a5      	cmp	r5, r4
 800d326:	d003      	beq.n	800d330 <__mcmp+0x2c>
 800d328:	d305      	bcc.n	800d336 <__mcmp+0x32>
 800d32a:	2201      	movs	r2, #1
 800d32c:	4610      	mov	r0, r2
 800d32e:	bd30      	pop	{r4, r5, pc}
 800d330:	4283      	cmp	r3, r0
 800d332:	d3f3      	bcc.n	800d31c <__mcmp+0x18>
 800d334:	e7fa      	b.n	800d32c <__mcmp+0x28>
 800d336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d33a:	e7f7      	b.n	800d32c <__mcmp+0x28>

0800d33c <__mdiff>:
 800d33c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d340:	460c      	mov	r4, r1
 800d342:	4606      	mov	r6, r0
 800d344:	4611      	mov	r1, r2
 800d346:	4620      	mov	r0, r4
 800d348:	4690      	mov	r8, r2
 800d34a:	f7ff ffdb 	bl	800d304 <__mcmp>
 800d34e:	1e05      	subs	r5, r0, #0
 800d350:	d110      	bne.n	800d374 <__mdiff+0x38>
 800d352:	4629      	mov	r1, r5
 800d354:	4630      	mov	r0, r6
 800d356:	f7ff fd53 	bl	800ce00 <_Balloc>
 800d35a:	b930      	cbnz	r0, 800d36a <__mdiff+0x2e>
 800d35c:	4b3a      	ldr	r3, [pc, #232]	; (800d448 <__mdiff+0x10c>)
 800d35e:	4602      	mov	r2, r0
 800d360:	f240 2132 	movw	r1, #562	; 0x232
 800d364:	4839      	ldr	r0, [pc, #228]	; (800d44c <__mdiff+0x110>)
 800d366:	f7fe fc7f 	bl	800bc68 <__assert_func>
 800d36a:	2301      	movs	r3, #1
 800d36c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d374:	bfa4      	itt	ge
 800d376:	4643      	movge	r3, r8
 800d378:	46a0      	movge	r8, r4
 800d37a:	4630      	mov	r0, r6
 800d37c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d380:	bfa6      	itte	ge
 800d382:	461c      	movge	r4, r3
 800d384:	2500      	movge	r5, #0
 800d386:	2501      	movlt	r5, #1
 800d388:	f7ff fd3a 	bl	800ce00 <_Balloc>
 800d38c:	b920      	cbnz	r0, 800d398 <__mdiff+0x5c>
 800d38e:	4b2e      	ldr	r3, [pc, #184]	; (800d448 <__mdiff+0x10c>)
 800d390:	4602      	mov	r2, r0
 800d392:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d396:	e7e5      	b.n	800d364 <__mdiff+0x28>
 800d398:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d39c:	6926      	ldr	r6, [r4, #16]
 800d39e:	60c5      	str	r5, [r0, #12]
 800d3a0:	f104 0914 	add.w	r9, r4, #20
 800d3a4:	f108 0514 	add.w	r5, r8, #20
 800d3a8:	f100 0e14 	add.w	lr, r0, #20
 800d3ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d3b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d3b4:	f108 0210 	add.w	r2, r8, #16
 800d3b8:	46f2      	mov	sl, lr
 800d3ba:	2100      	movs	r1, #0
 800d3bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3c4:	fa1f f883 	uxth.w	r8, r3
 800d3c8:	fa11 f18b 	uxtah	r1, r1, fp
 800d3cc:	0c1b      	lsrs	r3, r3, #16
 800d3ce:	eba1 0808 	sub.w	r8, r1, r8
 800d3d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d3d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d3da:	fa1f f888 	uxth.w	r8, r8
 800d3de:	1419      	asrs	r1, r3, #16
 800d3e0:	454e      	cmp	r6, r9
 800d3e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d3e6:	f84a 3b04 	str.w	r3, [sl], #4
 800d3ea:	d8e7      	bhi.n	800d3bc <__mdiff+0x80>
 800d3ec:	1b33      	subs	r3, r6, r4
 800d3ee:	3b15      	subs	r3, #21
 800d3f0:	f023 0303 	bic.w	r3, r3, #3
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	3415      	adds	r4, #21
 800d3f8:	42a6      	cmp	r6, r4
 800d3fa:	bf38      	it	cc
 800d3fc:	2304      	movcc	r3, #4
 800d3fe:	441d      	add	r5, r3
 800d400:	4473      	add	r3, lr
 800d402:	469e      	mov	lr, r3
 800d404:	462e      	mov	r6, r5
 800d406:	4566      	cmp	r6, ip
 800d408:	d30e      	bcc.n	800d428 <__mdiff+0xec>
 800d40a:	f10c 0203 	add.w	r2, ip, #3
 800d40e:	1b52      	subs	r2, r2, r5
 800d410:	f022 0203 	bic.w	r2, r2, #3
 800d414:	3d03      	subs	r5, #3
 800d416:	45ac      	cmp	ip, r5
 800d418:	bf38      	it	cc
 800d41a:	2200      	movcc	r2, #0
 800d41c:	441a      	add	r2, r3
 800d41e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d422:	b17b      	cbz	r3, 800d444 <__mdiff+0x108>
 800d424:	6107      	str	r7, [r0, #16]
 800d426:	e7a3      	b.n	800d370 <__mdiff+0x34>
 800d428:	f856 8b04 	ldr.w	r8, [r6], #4
 800d42c:	fa11 f288 	uxtah	r2, r1, r8
 800d430:	1414      	asrs	r4, r2, #16
 800d432:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d436:	b292      	uxth	r2, r2
 800d438:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d43c:	f84e 2b04 	str.w	r2, [lr], #4
 800d440:	1421      	asrs	r1, r4, #16
 800d442:	e7e0      	b.n	800d406 <__mdiff+0xca>
 800d444:	3f01      	subs	r7, #1
 800d446:	e7ea      	b.n	800d41e <__mdiff+0xe2>
 800d448:	08027043 	.word	0x08027043
 800d44c:	080270b4 	.word	0x080270b4

0800d450 <__d2b>:
 800d450:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d454:	4689      	mov	r9, r1
 800d456:	2101      	movs	r1, #1
 800d458:	ec57 6b10 	vmov	r6, r7, d0
 800d45c:	4690      	mov	r8, r2
 800d45e:	f7ff fccf 	bl	800ce00 <_Balloc>
 800d462:	4604      	mov	r4, r0
 800d464:	b930      	cbnz	r0, 800d474 <__d2b+0x24>
 800d466:	4602      	mov	r2, r0
 800d468:	4b25      	ldr	r3, [pc, #148]	; (800d500 <__d2b+0xb0>)
 800d46a:	4826      	ldr	r0, [pc, #152]	; (800d504 <__d2b+0xb4>)
 800d46c:	f240 310a 	movw	r1, #778	; 0x30a
 800d470:	f7fe fbfa 	bl	800bc68 <__assert_func>
 800d474:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d478:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d47c:	bb35      	cbnz	r5, 800d4cc <__d2b+0x7c>
 800d47e:	2e00      	cmp	r6, #0
 800d480:	9301      	str	r3, [sp, #4]
 800d482:	d028      	beq.n	800d4d6 <__d2b+0x86>
 800d484:	4668      	mov	r0, sp
 800d486:	9600      	str	r6, [sp, #0]
 800d488:	f7ff fd82 	bl	800cf90 <__lo0bits>
 800d48c:	9900      	ldr	r1, [sp, #0]
 800d48e:	b300      	cbz	r0, 800d4d2 <__d2b+0x82>
 800d490:	9a01      	ldr	r2, [sp, #4]
 800d492:	f1c0 0320 	rsb	r3, r0, #32
 800d496:	fa02 f303 	lsl.w	r3, r2, r3
 800d49a:	430b      	orrs	r3, r1
 800d49c:	40c2      	lsrs	r2, r0
 800d49e:	6163      	str	r3, [r4, #20]
 800d4a0:	9201      	str	r2, [sp, #4]
 800d4a2:	9b01      	ldr	r3, [sp, #4]
 800d4a4:	61a3      	str	r3, [r4, #24]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	bf14      	ite	ne
 800d4aa:	2202      	movne	r2, #2
 800d4ac:	2201      	moveq	r2, #1
 800d4ae:	6122      	str	r2, [r4, #16]
 800d4b0:	b1d5      	cbz	r5, 800d4e8 <__d2b+0x98>
 800d4b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4b6:	4405      	add	r5, r0
 800d4b8:	f8c9 5000 	str.w	r5, [r9]
 800d4bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4c0:	f8c8 0000 	str.w	r0, [r8]
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	b003      	add	sp, #12
 800d4c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4d0:	e7d5      	b.n	800d47e <__d2b+0x2e>
 800d4d2:	6161      	str	r1, [r4, #20]
 800d4d4:	e7e5      	b.n	800d4a2 <__d2b+0x52>
 800d4d6:	a801      	add	r0, sp, #4
 800d4d8:	f7ff fd5a 	bl	800cf90 <__lo0bits>
 800d4dc:	9b01      	ldr	r3, [sp, #4]
 800d4de:	6163      	str	r3, [r4, #20]
 800d4e0:	2201      	movs	r2, #1
 800d4e2:	6122      	str	r2, [r4, #16]
 800d4e4:	3020      	adds	r0, #32
 800d4e6:	e7e3      	b.n	800d4b0 <__d2b+0x60>
 800d4e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d4ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4f0:	f8c9 0000 	str.w	r0, [r9]
 800d4f4:	6918      	ldr	r0, [r3, #16]
 800d4f6:	f7ff fd2b 	bl	800cf50 <__hi0bits>
 800d4fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d4fe:	e7df      	b.n	800d4c0 <__d2b+0x70>
 800d500:	08027043 	.word	0x08027043
 800d504:	080270b4 	.word	0x080270b4

0800d508 <_calloc_r>:
 800d508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d50a:	fba1 2402 	umull	r2, r4, r1, r2
 800d50e:	b94c      	cbnz	r4, 800d524 <_calloc_r+0x1c>
 800d510:	4611      	mov	r1, r2
 800d512:	9201      	str	r2, [sp, #4]
 800d514:	f7fd fbb0 	bl	800ac78 <_malloc_r>
 800d518:	9a01      	ldr	r2, [sp, #4]
 800d51a:	4605      	mov	r5, r0
 800d51c:	b930      	cbnz	r0, 800d52c <_calloc_r+0x24>
 800d51e:	4628      	mov	r0, r5
 800d520:	b003      	add	sp, #12
 800d522:	bd30      	pop	{r4, r5, pc}
 800d524:	220c      	movs	r2, #12
 800d526:	6002      	str	r2, [r0, #0]
 800d528:	2500      	movs	r5, #0
 800d52a:	e7f8      	b.n	800d51e <_calloc_r+0x16>
 800d52c:	4621      	mov	r1, r4
 800d52e:	f7fd fb2f 	bl	800ab90 <memset>
 800d532:	e7f4      	b.n	800d51e <_calloc_r+0x16>

0800d534 <__ssputs_r>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	688e      	ldr	r6, [r1, #8]
 800d53a:	429e      	cmp	r6, r3
 800d53c:	4682      	mov	sl, r0
 800d53e:	460c      	mov	r4, r1
 800d540:	4690      	mov	r8, r2
 800d542:	461f      	mov	r7, r3
 800d544:	d838      	bhi.n	800d5b8 <__ssputs_r+0x84>
 800d546:	898a      	ldrh	r2, [r1, #12]
 800d548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d54c:	d032      	beq.n	800d5b4 <__ssputs_r+0x80>
 800d54e:	6825      	ldr	r5, [r4, #0]
 800d550:	6909      	ldr	r1, [r1, #16]
 800d552:	eba5 0901 	sub.w	r9, r5, r1
 800d556:	6965      	ldr	r5, [r4, #20]
 800d558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d55c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d560:	3301      	adds	r3, #1
 800d562:	444b      	add	r3, r9
 800d564:	106d      	asrs	r5, r5, #1
 800d566:	429d      	cmp	r5, r3
 800d568:	bf38      	it	cc
 800d56a:	461d      	movcc	r5, r3
 800d56c:	0553      	lsls	r3, r2, #21
 800d56e:	d531      	bpl.n	800d5d4 <__ssputs_r+0xa0>
 800d570:	4629      	mov	r1, r5
 800d572:	f7fd fb81 	bl	800ac78 <_malloc_r>
 800d576:	4606      	mov	r6, r0
 800d578:	b950      	cbnz	r0, 800d590 <__ssputs_r+0x5c>
 800d57a:	230c      	movs	r3, #12
 800d57c:	f8ca 3000 	str.w	r3, [sl]
 800d580:	89a3      	ldrh	r3, [r4, #12]
 800d582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d586:	81a3      	strh	r3, [r4, #12]
 800d588:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d58c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d590:	6921      	ldr	r1, [r4, #16]
 800d592:	464a      	mov	r2, r9
 800d594:	f7ff fc19 	bl	800cdca <memcpy>
 800d598:	89a3      	ldrh	r3, [r4, #12]
 800d59a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5a2:	81a3      	strh	r3, [r4, #12]
 800d5a4:	6126      	str	r6, [r4, #16]
 800d5a6:	6165      	str	r5, [r4, #20]
 800d5a8:	444e      	add	r6, r9
 800d5aa:	eba5 0509 	sub.w	r5, r5, r9
 800d5ae:	6026      	str	r6, [r4, #0]
 800d5b0:	60a5      	str	r5, [r4, #8]
 800d5b2:	463e      	mov	r6, r7
 800d5b4:	42be      	cmp	r6, r7
 800d5b6:	d900      	bls.n	800d5ba <__ssputs_r+0x86>
 800d5b8:	463e      	mov	r6, r7
 800d5ba:	6820      	ldr	r0, [r4, #0]
 800d5bc:	4632      	mov	r2, r6
 800d5be:	4641      	mov	r1, r8
 800d5c0:	f000 fdbc 	bl	800e13c <memmove>
 800d5c4:	68a3      	ldr	r3, [r4, #8]
 800d5c6:	1b9b      	subs	r3, r3, r6
 800d5c8:	60a3      	str	r3, [r4, #8]
 800d5ca:	6823      	ldr	r3, [r4, #0]
 800d5cc:	4433      	add	r3, r6
 800d5ce:	6023      	str	r3, [r4, #0]
 800d5d0:	2000      	movs	r0, #0
 800d5d2:	e7db      	b.n	800d58c <__ssputs_r+0x58>
 800d5d4:	462a      	mov	r2, r5
 800d5d6:	f000 fdcb 	bl	800e170 <_realloc_r>
 800d5da:	4606      	mov	r6, r0
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d1e1      	bne.n	800d5a4 <__ssputs_r+0x70>
 800d5e0:	6921      	ldr	r1, [r4, #16]
 800d5e2:	4650      	mov	r0, sl
 800d5e4:	f7fd fadc 	bl	800aba0 <_free_r>
 800d5e8:	e7c7      	b.n	800d57a <__ssputs_r+0x46>
	...

0800d5ec <_svfiprintf_r>:
 800d5ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	4698      	mov	r8, r3
 800d5f2:	898b      	ldrh	r3, [r1, #12]
 800d5f4:	061b      	lsls	r3, r3, #24
 800d5f6:	b09d      	sub	sp, #116	; 0x74
 800d5f8:	4607      	mov	r7, r0
 800d5fa:	460d      	mov	r5, r1
 800d5fc:	4614      	mov	r4, r2
 800d5fe:	d50e      	bpl.n	800d61e <_svfiprintf_r+0x32>
 800d600:	690b      	ldr	r3, [r1, #16]
 800d602:	b963      	cbnz	r3, 800d61e <_svfiprintf_r+0x32>
 800d604:	2140      	movs	r1, #64	; 0x40
 800d606:	f7fd fb37 	bl	800ac78 <_malloc_r>
 800d60a:	6028      	str	r0, [r5, #0]
 800d60c:	6128      	str	r0, [r5, #16]
 800d60e:	b920      	cbnz	r0, 800d61a <_svfiprintf_r+0x2e>
 800d610:	230c      	movs	r3, #12
 800d612:	603b      	str	r3, [r7, #0]
 800d614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d618:	e0d1      	b.n	800d7be <_svfiprintf_r+0x1d2>
 800d61a:	2340      	movs	r3, #64	; 0x40
 800d61c:	616b      	str	r3, [r5, #20]
 800d61e:	2300      	movs	r3, #0
 800d620:	9309      	str	r3, [sp, #36]	; 0x24
 800d622:	2320      	movs	r3, #32
 800d624:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d628:	f8cd 800c 	str.w	r8, [sp, #12]
 800d62c:	2330      	movs	r3, #48	; 0x30
 800d62e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d7d8 <_svfiprintf_r+0x1ec>
 800d632:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d636:	f04f 0901 	mov.w	r9, #1
 800d63a:	4623      	mov	r3, r4
 800d63c:	469a      	mov	sl, r3
 800d63e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d642:	b10a      	cbz	r2, 800d648 <_svfiprintf_r+0x5c>
 800d644:	2a25      	cmp	r2, #37	; 0x25
 800d646:	d1f9      	bne.n	800d63c <_svfiprintf_r+0x50>
 800d648:	ebba 0b04 	subs.w	fp, sl, r4
 800d64c:	d00b      	beq.n	800d666 <_svfiprintf_r+0x7a>
 800d64e:	465b      	mov	r3, fp
 800d650:	4622      	mov	r2, r4
 800d652:	4629      	mov	r1, r5
 800d654:	4638      	mov	r0, r7
 800d656:	f7ff ff6d 	bl	800d534 <__ssputs_r>
 800d65a:	3001      	adds	r0, #1
 800d65c:	f000 80aa 	beq.w	800d7b4 <_svfiprintf_r+0x1c8>
 800d660:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d662:	445a      	add	r2, fp
 800d664:	9209      	str	r2, [sp, #36]	; 0x24
 800d666:	f89a 3000 	ldrb.w	r3, [sl]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	f000 80a2 	beq.w	800d7b4 <_svfiprintf_r+0x1c8>
 800d670:	2300      	movs	r3, #0
 800d672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d676:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d67a:	f10a 0a01 	add.w	sl, sl, #1
 800d67e:	9304      	str	r3, [sp, #16]
 800d680:	9307      	str	r3, [sp, #28]
 800d682:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d686:	931a      	str	r3, [sp, #104]	; 0x68
 800d688:	4654      	mov	r4, sl
 800d68a:	2205      	movs	r2, #5
 800d68c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d690:	4851      	ldr	r0, [pc, #324]	; (800d7d8 <_svfiprintf_r+0x1ec>)
 800d692:	f7f2 fe15 	bl	80002c0 <memchr>
 800d696:	9a04      	ldr	r2, [sp, #16]
 800d698:	b9d8      	cbnz	r0, 800d6d2 <_svfiprintf_r+0xe6>
 800d69a:	06d0      	lsls	r0, r2, #27
 800d69c:	bf44      	itt	mi
 800d69e:	2320      	movmi	r3, #32
 800d6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6a4:	0711      	lsls	r1, r2, #28
 800d6a6:	bf44      	itt	mi
 800d6a8:	232b      	movmi	r3, #43	; 0x2b
 800d6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d6b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b4:	d015      	beq.n	800d6e2 <_svfiprintf_r+0xf6>
 800d6b6:	9a07      	ldr	r2, [sp, #28]
 800d6b8:	4654      	mov	r4, sl
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	f04f 0c0a 	mov.w	ip, #10
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6c6:	3b30      	subs	r3, #48	; 0x30
 800d6c8:	2b09      	cmp	r3, #9
 800d6ca:	d94e      	bls.n	800d76a <_svfiprintf_r+0x17e>
 800d6cc:	b1b0      	cbz	r0, 800d6fc <_svfiprintf_r+0x110>
 800d6ce:	9207      	str	r2, [sp, #28]
 800d6d0:	e014      	b.n	800d6fc <_svfiprintf_r+0x110>
 800d6d2:	eba0 0308 	sub.w	r3, r0, r8
 800d6d6:	fa09 f303 	lsl.w	r3, r9, r3
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	9304      	str	r3, [sp, #16]
 800d6de:	46a2      	mov	sl, r4
 800d6e0:	e7d2      	b.n	800d688 <_svfiprintf_r+0x9c>
 800d6e2:	9b03      	ldr	r3, [sp, #12]
 800d6e4:	1d19      	adds	r1, r3, #4
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	9103      	str	r1, [sp, #12]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	bfbb      	ittet	lt
 800d6ee:	425b      	neglt	r3, r3
 800d6f0:	f042 0202 	orrlt.w	r2, r2, #2
 800d6f4:	9307      	strge	r3, [sp, #28]
 800d6f6:	9307      	strlt	r3, [sp, #28]
 800d6f8:	bfb8      	it	lt
 800d6fa:	9204      	strlt	r2, [sp, #16]
 800d6fc:	7823      	ldrb	r3, [r4, #0]
 800d6fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d700:	d10c      	bne.n	800d71c <_svfiprintf_r+0x130>
 800d702:	7863      	ldrb	r3, [r4, #1]
 800d704:	2b2a      	cmp	r3, #42	; 0x2a
 800d706:	d135      	bne.n	800d774 <_svfiprintf_r+0x188>
 800d708:	9b03      	ldr	r3, [sp, #12]
 800d70a:	1d1a      	adds	r2, r3, #4
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	9203      	str	r2, [sp, #12]
 800d710:	2b00      	cmp	r3, #0
 800d712:	bfb8      	it	lt
 800d714:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d718:	3402      	adds	r4, #2
 800d71a:	9305      	str	r3, [sp, #20]
 800d71c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d7e8 <_svfiprintf_r+0x1fc>
 800d720:	7821      	ldrb	r1, [r4, #0]
 800d722:	2203      	movs	r2, #3
 800d724:	4650      	mov	r0, sl
 800d726:	f7f2 fdcb 	bl	80002c0 <memchr>
 800d72a:	b140      	cbz	r0, 800d73e <_svfiprintf_r+0x152>
 800d72c:	2340      	movs	r3, #64	; 0x40
 800d72e:	eba0 000a 	sub.w	r0, r0, sl
 800d732:	fa03 f000 	lsl.w	r0, r3, r0
 800d736:	9b04      	ldr	r3, [sp, #16]
 800d738:	4303      	orrs	r3, r0
 800d73a:	3401      	adds	r4, #1
 800d73c:	9304      	str	r3, [sp, #16]
 800d73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d742:	4826      	ldr	r0, [pc, #152]	; (800d7dc <_svfiprintf_r+0x1f0>)
 800d744:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d748:	2206      	movs	r2, #6
 800d74a:	f7f2 fdb9 	bl	80002c0 <memchr>
 800d74e:	2800      	cmp	r0, #0
 800d750:	d038      	beq.n	800d7c4 <_svfiprintf_r+0x1d8>
 800d752:	4b23      	ldr	r3, [pc, #140]	; (800d7e0 <_svfiprintf_r+0x1f4>)
 800d754:	bb1b      	cbnz	r3, 800d79e <_svfiprintf_r+0x1b2>
 800d756:	9b03      	ldr	r3, [sp, #12]
 800d758:	3307      	adds	r3, #7
 800d75a:	f023 0307 	bic.w	r3, r3, #7
 800d75e:	3308      	adds	r3, #8
 800d760:	9303      	str	r3, [sp, #12]
 800d762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d764:	4433      	add	r3, r6
 800d766:	9309      	str	r3, [sp, #36]	; 0x24
 800d768:	e767      	b.n	800d63a <_svfiprintf_r+0x4e>
 800d76a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d76e:	460c      	mov	r4, r1
 800d770:	2001      	movs	r0, #1
 800d772:	e7a5      	b.n	800d6c0 <_svfiprintf_r+0xd4>
 800d774:	2300      	movs	r3, #0
 800d776:	3401      	adds	r4, #1
 800d778:	9305      	str	r3, [sp, #20]
 800d77a:	4619      	mov	r1, r3
 800d77c:	f04f 0c0a 	mov.w	ip, #10
 800d780:	4620      	mov	r0, r4
 800d782:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d786:	3a30      	subs	r2, #48	; 0x30
 800d788:	2a09      	cmp	r2, #9
 800d78a:	d903      	bls.n	800d794 <_svfiprintf_r+0x1a8>
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d0c5      	beq.n	800d71c <_svfiprintf_r+0x130>
 800d790:	9105      	str	r1, [sp, #20]
 800d792:	e7c3      	b.n	800d71c <_svfiprintf_r+0x130>
 800d794:	fb0c 2101 	mla	r1, ip, r1, r2
 800d798:	4604      	mov	r4, r0
 800d79a:	2301      	movs	r3, #1
 800d79c:	e7f0      	b.n	800d780 <_svfiprintf_r+0x194>
 800d79e:	ab03      	add	r3, sp, #12
 800d7a0:	9300      	str	r3, [sp, #0]
 800d7a2:	462a      	mov	r2, r5
 800d7a4:	4b0f      	ldr	r3, [pc, #60]	; (800d7e4 <_svfiprintf_r+0x1f8>)
 800d7a6:	a904      	add	r1, sp, #16
 800d7a8:	4638      	mov	r0, r7
 800d7aa:	f7fd fb79 	bl	800aea0 <_printf_float>
 800d7ae:	1c42      	adds	r2, r0, #1
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	d1d6      	bne.n	800d762 <_svfiprintf_r+0x176>
 800d7b4:	89ab      	ldrh	r3, [r5, #12]
 800d7b6:	065b      	lsls	r3, r3, #25
 800d7b8:	f53f af2c 	bmi.w	800d614 <_svfiprintf_r+0x28>
 800d7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7be:	b01d      	add	sp, #116	; 0x74
 800d7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7c4:	ab03      	add	r3, sp, #12
 800d7c6:	9300      	str	r3, [sp, #0]
 800d7c8:	462a      	mov	r2, r5
 800d7ca:	4b06      	ldr	r3, [pc, #24]	; (800d7e4 <_svfiprintf_r+0x1f8>)
 800d7cc:	a904      	add	r1, sp, #16
 800d7ce:	4638      	mov	r0, r7
 800d7d0:	f7fd fe0a 	bl	800b3e8 <_printf_i>
 800d7d4:	e7eb      	b.n	800d7ae <_svfiprintf_r+0x1c2>
 800d7d6:	bf00      	nop
 800d7d8:	0802720c 	.word	0x0802720c
 800d7dc:	08027216 	.word	0x08027216
 800d7e0:	0800aea1 	.word	0x0800aea1
 800d7e4:	0800d535 	.word	0x0800d535
 800d7e8:	08027212 	.word	0x08027212

0800d7ec <__sfputc_r>:
 800d7ec:	6893      	ldr	r3, [r2, #8]
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	b410      	push	{r4}
 800d7f4:	6093      	str	r3, [r2, #8]
 800d7f6:	da08      	bge.n	800d80a <__sfputc_r+0x1e>
 800d7f8:	6994      	ldr	r4, [r2, #24]
 800d7fa:	42a3      	cmp	r3, r4
 800d7fc:	db01      	blt.n	800d802 <__sfputc_r+0x16>
 800d7fe:	290a      	cmp	r1, #10
 800d800:	d103      	bne.n	800d80a <__sfputc_r+0x1e>
 800d802:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d806:	f000 ba57 	b.w	800dcb8 <__swbuf_r>
 800d80a:	6813      	ldr	r3, [r2, #0]
 800d80c:	1c58      	adds	r0, r3, #1
 800d80e:	6010      	str	r0, [r2, #0]
 800d810:	7019      	strb	r1, [r3, #0]
 800d812:	4608      	mov	r0, r1
 800d814:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d818:	4770      	bx	lr

0800d81a <__sfputs_r>:
 800d81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81c:	4606      	mov	r6, r0
 800d81e:	460f      	mov	r7, r1
 800d820:	4614      	mov	r4, r2
 800d822:	18d5      	adds	r5, r2, r3
 800d824:	42ac      	cmp	r4, r5
 800d826:	d101      	bne.n	800d82c <__sfputs_r+0x12>
 800d828:	2000      	movs	r0, #0
 800d82a:	e007      	b.n	800d83c <__sfputs_r+0x22>
 800d82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d830:	463a      	mov	r2, r7
 800d832:	4630      	mov	r0, r6
 800d834:	f7ff ffda 	bl	800d7ec <__sfputc_r>
 800d838:	1c43      	adds	r3, r0, #1
 800d83a:	d1f3      	bne.n	800d824 <__sfputs_r+0xa>
 800d83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d840 <_vfiprintf_r>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	460d      	mov	r5, r1
 800d846:	b09d      	sub	sp, #116	; 0x74
 800d848:	4614      	mov	r4, r2
 800d84a:	4698      	mov	r8, r3
 800d84c:	4606      	mov	r6, r0
 800d84e:	b118      	cbz	r0, 800d858 <_vfiprintf_r+0x18>
 800d850:	6983      	ldr	r3, [r0, #24]
 800d852:	b90b      	cbnz	r3, 800d858 <_vfiprintf_r+0x18>
 800d854:	f7ff f8fa 	bl	800ca4c <__sinit>
 800d858:	4b89      	ldr	r3, [pc, #548]	; (800da80 <_vfiprintf_r+0x240>)
 800d85a:	429d      	cmp	r5, r3
 800d85c:	d11b      	bne.n	800d896 <_vfiprintf_r+0x56>
 800d85e:	6875      	ldr	r5, [r6, #4]
 800d860:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d862:	07d9      	lsls	r1, r3, #31
 800d864:	d405      	bmi.n	800d872 <_vfiprintf_r+0x32>
 800d866:	89ab      	ldrh	r3, [r5, #12]
 800d868:	059a      	lsls	r2, r3, #22
 800d86a:	d402      	bmi.n	800d872 <_vfiprintf_r+0x32>
 800d86c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d86e:	f7ff faa9 	bl	800cdc4 <__retarget_lock_acquire_recursive>
 800d872:	89ab      	ldrh	r3, [r5, #12]
 800d874:	071b      	lsls	r3, r3, #28
 800d876:	d501      	bpl.n	800d87c <_vfiprintf_r+0x3c>
 800d878:	692b      	ldr	r3, [r5, #16]
 800d87a:	b9eb      	cbnz	r3, 800d8b8 <_vfiprintf_r+0x78>
 800d87c:	4629      	mov	r1, r5
 800d87e:	4630      	mov	r0, r6
 800d880:	f000 fa7e 	bl	800dd80 <__swsetup_r>
 800d884:	b1c0      	cbz	r0, 800d8b8 <_vfiprintf_r+0x78>
 800d886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d888:	07dc      	lsls	r4, r3, #31
 800d88a:	d50e      	bpl.n	800d8aa <_vfiprintf_r+0x6a>
 800d88c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d890:	b01d      	add	sp, #116	; 0x74
 800d892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d896:	4b7b      	ldr	r3, [pc, #492]	; (800da84 <_vfiprintf_r+0x244>)
 800d898:	429d      	cmp	r5, r3
 800d89a:	d101      	bne.n	800d8a0 <_vfiprintf_r+0x60>
 800d89c:	68b5      	ldr	r5, [r6, #8]
 800d89e:	e7df      	b.n	800d860 <_vfiprintf_r+0x20>
 800d8a0:	4b79      	ldr	r3, [pc, #484]	; (800da88 <_vfiprintf_r+0x248>)
 800d8a2:	429d      	cmp	r5, r3
 800d8a4:	bf08      	it	eq
 800d8a6:	68f5      	ldreq	r5, [r6, #12]
 800d8a8:	e7da      	b.n	800d860 <_vfiprintf_r+0x20>
 800d8aa:	89ab      	ldrh	r3, [r5, #12]
 800d8ac:	0598      	lsls	r0, r3, #22
 800d8ae:	d4ed      	bmi.n	800d88c <_vfiprintf_r+0x4c>
 800d8b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8b2:	f7ff fa89 	bl	800cdc8 <__retarget_lock_release_recursive>
 800d8b6:	e7e9      	b.n	800d88c <_vfiprintf_r+0x4c>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800d8bc:	2320      	movs	r3, #32
 800d8be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8c6:	2330      	movs	r3, #48	; 0x30
 800d8c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800da8c <_vfiprintf_r+0x24c>
 800d8cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8d0:	f04f 0901 	mov.w	r9, #1
 800d8d4:	4623      	mov	r3, r4
 800d8d6:	469a      	mov	sl, r3
 800d8d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8dc:	b10a      	cbz	r2, 800d8e2 <_vfiprintf_r+0xa2>
 800d8de:	2a25      	cmp	r2, #37	; 0x25
 800d8e0:	d1f9      	bne.n	800d8d6 <_vfiprintf_r+0x96>
 800d8e2:	ebba 0b04 	subs.w	fp, sl, r4
 800d8e6:	d00b      	beq.n	800d900 <_vfiprintf_r+0xc0>
 800d8e8:	465b      	mov	r3, fp
 800d8ea:	4622      	mov	r2, r4
 800d8ec:	4629      	mov	r1, r5
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f7ff ff93 	bl	800d81a <__sfputs_r>
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	f000 80aa 	beq.w	800da4e <_vfiprintf_r+0x20e>
 800d8fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8fc:	445a      	add	r2, fp
 800d8fe:	9209      	str	r2, [sp, #36]	; 0x24
 800d900:	f89a 3000 	ldrb.w	r3, [sl]
 800d904:	2b00      	cmp	r3, #0
 800d906:	f000 80a2 	beq.w	800da4e <_vfiprintf_r+0x20e>
 800d90a:	2300      	movs	r3, #0
 800d90c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d910:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d914:	f10a 0a01 	add.w	sl, sl, #1
 800d918:	9304      	str	r3, [sp, #16]
 800d91a:	9307      	str	r3, [sp, #28]
 800d91c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d920:	931a      	str	r3, [sp, #104]	; 0x68
 800d922:	4654      	mov	r4, sl
 800d924:	2205      	movs	r2, #5
 800d926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92a:	4858      	ldr	r0, [pc, #352]	; (800da8c <_vfiprintf_r+0x24c>)
 800d92c:	f7f2 fcc8 	bl	80002c0 <memchr>
 800d930:	9a04      	ldr	r2, [sp, #16]
 800d932:	b9d8      	cbnz	r0, 800d96c <_vfiprintf_r+0x12c>
 800d934:	06d1      	lsls	r1, r2, #27
 800d936:	bf44      	itt	mi
 800d938:	2320      	movmi	r3, #32
 800d93a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d93e:	0713      	lsls	r3, r2, #28
 800d940:	bf44      	itt	mi
 800d942:	232b      	movmi	r3, #43	; 0x2b
 800d944:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d948:	f89a 3000 	ldrb.w	r3, [sl]
 800d94c:	2b2a      	cmp	r3, #42	; 0x2a
 800d94e:	d015      	beq.n	800d97c <_vfiprintf_r+0x13c>
 800d950:	9a07      	ldr	r2, [sp, #28]
 800d952:	4654      	mov	r4, sl
 800d954:	2000      	movs	r0, #0
 800d956:	f04f 0c0a 	mov.w	ip, #10
 800d95a:	4621      	mov	r1, r4
 800d95c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d960:	3b30      	subs	r3, #48	; 0x30
 800d962:	2b09      	cmp	r3, #9
 800d964:	d94e      	bls.n	800da04 <_vfiprintf_r+0x1c4>
 800d966:	b1b0      	cbz	r0, 800d996 <_vfiprintf_r+0x156>
 800d968:	9207      	str	r2, [sp, #28]
 800d96a:	e014      	b.n	800d996 <_vfiprintf_r+0x156>
 800d96c:	eba0 0308 	sub.w	r3, r0, r8
 800d970:	fa09 f303 	lsl.w	r3, r9, r3
 800d974:	4313      	orrs	r3, r2
 800d976:	9304      	str	r3, [sp, #16]
 800d978:	46a2      	mov	sl, r4
 800d97a:	e7d2      	b.n	800d922 <_vfiprintf_r+0xe2>
 800d97c:	9b03      	ldr	r3, [sp, #12]
 800d97e:	1d19      	adds	r1, r3, #4
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	9103      	str	r1, [sp, #12]
 800d984:	2b00      	cmp	r3, #0
 800d986:	bfbb      	ittet	lt
 800d988:	425b      	neglt	r3, r3
 800d98a:	f042 0202 	orrlt.w	r2, r2, #2
 800d98e:	9307      	strge	r3, [sp, #28]
 800d990:	9307      	strlt	r3, [sp, #28]
 800d992:	bfb8      	it	lt
 800d994:	9204      	strlt	r2, [sp, #16]
 800d996:	7823      	ldrb	r3, [r4, #0]
 800d998:	2b2e      	cmp	r3, #46	; 0x2e
 800d99a:	d10c      	bne.n	800d9b6 <_vfiprintf_r+0x176>
 800d99c:	7863      	ldrb	r3, [r4, #1]
 800d99e:	2b2a      	cmp	r3, #42	; 0x2a
 800d9a0:	d135      	bne.n	800da0e <_vfiprintf_r+0x1ce>
 800d9a2:	9b03      	ldr	r3, [sp, #12]
 800d9a4:	1d1a      	adds	r2, r3, #4
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	9203      	str	r2, [sp, #12]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	bfb8      	it	lt
 800d9ae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d9b2:	3402      	adds	r4, #2
 800d9b4:	9305      	str	r3, [sp, #20]
 800d9b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800da9c <_vfiprintf_r+0x25c>
 800d9ba:	7821      	ldrb	r1, [r4, #0]
 800d9bc:	2203      	movs	r2, #3
 800d9be:	4650      	mov	r0, sl
 800d9c0:	f7f2 fc7e 	bl	80002c0 <memchr>
 800d9c4:	b140      	cbz	r0, 800d9d8 <_vfiprintf_r+0x198>
 800d9c6:	2340      	movs	r3, #64	; 0x40
 800d9c8:	eba0 000a 	sub.w	r0, r0, sl
 800d9cc:	fa03 f000 	lsl.w	r0, r3, r0
 800d9d0:	9b04      	ldr	r3, [sp, #16]
 800d9d2:	4303      	orrs	r3, r0
 800d9d4:	3401      	adds	r4, #1
 800d9d6:	9304      	str	r3, [sp, #16]
 800d9d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9dc:	482c      	ldr	r0, [pc, #176]	; (800da90 <_vfiprintf_r+0x250>)
 800d9de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9e2:	2206      	movs	r2, #6
 800d9e4:	f7f2 fc6c 	bl	80002c0 <memchr>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d03f      	beq.n	800da6c <_vfiprintf_r+0x22c>
 800d9ec:	4b29      	ldr	r3, [pc, #164]	; (800da94 <_vfiprintf_r+0x254>)
 800d9ee:	bb1b      	cbnz	r3, 800da38 <_vfiprintf_r+0x1f8>
 800d9f0:	9b03      	ldr	r3, [sp, #12]
 800d9f2:	3307      	adds	r3, #7
 800d9f4:	f023 0307 	bic.w	r3, r3, #7
 800d9f8:	3308      	adds	r3, #8
 800d9fa:	9303      	str	r3, [sp, #12]
 800d9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9fe:	443b      	add	r3, r7
 800da00:	9309      	str	r3, [sp, #36]	; 0x24
 800da02:	e767      	b.n	800d8d4 <_vfiprintf_r+0x94>
 800da04:	fb0c 3202 	mla	r2, ip, r2, r3
 800da08:	460c      	mov	r4, r1
 800da0a:	2001      	movs	r0, #1
 800da0c:	e7a5      	b.n	800d95a <_vfiprintf_r+0x11a>
 800da0e:	2300      	movs	r3, #0
 800da10:	3401      	adds	r4, #1
 800da12:	9305      	str	r3, [sp, #20]
 800da14:	4619      	mov	r1, r3
 800da16:	f04f 0c0a 	mov.w	ip, #10
 800da1a:	4620      	mov	r0, r4
 800da1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da20:	3a30      	subs	r2, #48	; 0x30
 800da22:	2a09      	cmp	r2, #9
 800da24:	d903      	bls.n	800da2e <_vfiprintf_r+0x1ee>
 800da26:	2b00      	cmp	r3, #0
 800da28:	d0c5      	beq.n	800d9b6 <_vfiprintf_r+0x176>
 800da2a:	9105      	str	r1, [sp, #20]
 800da2c:	e7c3      	b.n	800d9b6 <_vfiprintf_r+0x176>
 800da2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800da32:	4604      	mov	r4, r0
 800da34:	2301      	movs	r3, #1
 800da36:	e7f0      	b.n	800da1a <_vfiprintf_r+0x1da>
 800da38:	ab03      	add	r3, sp, #12
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	462a      	mov	r2, r5
 800da3e:	4b16      	ldr	r3, [pc, #88]	; (800da98 <_vfiprintf_r+0x258>)
 800da40:	a904      	add	r1, sp, #16
 800da42:	4630      	mov	r0, r6
 800da44:	f7fd fa2c 	bl	800aea0 <_printf_float>
 800da48:	4607      	mov	r7, r0
 800da4a:	1c78      	adds	r0, r7, #1
 800da4c:	d1d6      	bne.n	800d9fc <_vfiprintf_r+0x1bc>
 800da4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da50:	07d9      	lsls	r1, r3, #31
 800da52:	d405      	bmi.n	800da60 <_vfiprintf_r+0x220>
 800da54:	89ab      	ldrh	r3, [r5, #12]
 800da56:	059a      	lsls	r2, r3, #22
 800da58:	d402      	bmi.n	800da60 <_vfiprintf_r+0x220>
 800da5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da5c:	f7ff f9b4 	bl	800cdc8 <__retarget_lock_release_recursive>
 800da60:	89ab      	ldrh	r3, [r5, #12]
 800da62:	065b      	lsls	r3, r3, #25
 800da64:	f53f af12 	bmi.w	800d88c <_vfiprintf_r+0x4c>
 800da68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da6a:	e711      	b.n	800d890 <_vfiprintf_r+0x50>
 800da6c:	ab03      	add	r3, sp, #12
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	462a      	mov	r2, r5
 800da72:	4b09      	ldr	r3, [pc, #36]	; (800da98 <_vfiprintf_r+0x258>)
 800da74:	a904      	add	r1, sp, #16
 800da76:	4630      	mov	r0, r6
 800da78:	f7fd fcb6 	bl	800b3e8 <_printf_i>
 800da7c:	e7e4      	b.n	800da48 <_vfiprintf_r+0x208>
 800da7e:	bf00      	nop
 800da80:	08027074 	.word	0x08027074
 800da84:	08027094 	.word	0x08027094
 800da88:	08027054 	.word	0x08027054
 800da8c:	0802720c 	.word	0x0802720c
 800da90:	08027216 	.word	0x08027216
 800da94:	0800aea1 	.word	0x0800aea1
 800da98:	0800d81b 	.word	0x0800d81b
 800da9c:	08027212 	.word	0x08027212

0800daa0 <siscanf>:
 800daa0:	b40e      	push	{r1, r2, r3}
 800daa2:	b510      	push	{r4, lr}
 800daa4:	b09f      	sub	sp, #124	; 0x7c
 800daa6:	ac21      	add	r4, sp, #132	; 0x84
 800daa8:	f44f 7101 	mov.w	r1, #516	; 0x204
 800daac:	f854 2b04 	ldr.w	r2, [r4], #4
 800dab0:	9201      	str	r2, [sp, #4]
 800dab2:	f8ad 101c 	strh.w	r1, [sp, #28]
 800dab6:	9004      	str	r0, [sp, #16]
 800dab8:	9008      	str	r0, [sp, #32]
 800daba:	f7f2 fbf9 	bl	80002b0 <strlen>
 800dabe:	4b0c      	ldr	r3, [pc, #48]	; (800daf0 <siscanf+0x50>)
 800dac0:	9005      	str	r0, [sp, #20]
 800dac2:	9009      	str	r0, [sp, #36]	; 0x24
 800dac4:	930d      	str	r3, [sp, #52]	; 0x34
 800dac6:	480b      	ldr	r0, [pc, #44]	; (800daf4 <siscanf+0x54>)
 800dac8:	9a01      	ldr	r2, [sp, #4]
 800daca:	6800      	ldr	r0, [r0, #0]
 800dacc:	9403      	str	r4, [sp, #12]
 800dace:	2300      	movs	r3, #0
 800dad0:	9311      	str	r3, [sp, #68]	; 0x44
 800dad2:	9316      	str	r3, [sp, #88]	; 0x58
 800dad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dad8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800dadc:	a904      	add	r1, sp, #16
 800dade:	4623      	mov	r3, r4
 800dae0:	f000 fbd0 	bl	800e284 <__ssvfiscanf_r>
 800dae4:	b01f      	add	sp, #124	; 0x7c
 800dae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daea:	b003      	add	sp, #12
 800daec:	4770      	bx	lr
 800daee:	bf00      	nop
 800daf0:	0800db1b 	.word	0x0800db1b
 800daf4:	200000cc 	.word	0x200000cc

0800daf8 <__sread>:
 800daf8:	b510      	push	{r4, lr}
 800dafa:	460c      	mov	r4, r1
 800dafc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db00:	f000 fe8a 	bl	800e818 <_read_r>
 800db04:	2800      	cmp	r0, #0
 800db06:	bfab      	itete	ge
 800db08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db0a:	89a3      	ldrhlt	r3, [r4, #12]
 800db0c:	181b      	addge	r3, r3, r0
 800db0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db12:	bfac      	ite	ge
 800db14:	6563      	strge	r3, [r4, #84]	; 0x54
 800db16:	81a3      	strhlt	r3, [r4, #12]
 800db18:	bd10      	pop	{r4, pc}

0800db1a <__seofread>:
 800db1a:	2000      	movs	r0, #0
 800db1c:	4770      	bx	lr

0800db1e <__swrite>:
 800db1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db22:	461f      	mov	r7, r3
 800db24:	898b      	ldrh	r3, [r1, #12]
 800db26:	05db      	lsls	r3, r3, #23
 800db28:	4605      	mov	r5, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	4616      	mov	r6, r2
 800db2e:	d505      	bpl.n	800db3c <__swrite+0x1e>
 800db30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db34:	2302      	movs	r3, #2
 800db36:	2200      	movs	r2, #0
 800db38:	f000 fa76 	bl	800e028 <_lseek_r>
 800db3c:	89a3      	ldrh	r3, [r4, #12]
 800db3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db46:	81a3      	strh	r3, [r4, #12]
 800db48:	4632      	mov	r2, r6
 800db4a:	463b      	mov	r3, r7
 800db4c:	4628      	mov	r0, r5
 800db4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800db52:	f000 b903 	b.w	800dd5c <_write_r>

0800db56 <__sseek>:
 800db56:	b510      	push	{r4, lr}
 800db58:	460c      	mov	r4, r1
 800db5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db5e:	f000 fa63 	bl	800e028 <_lseek_r>
 800db62:	1c43      	adds	r3, r0, #1
 800db64:	89a3      	ldrh	r3, [r4, #12]
 800db66:	bf15      	itete	ne
 800db68:	6560      	strne	r0, [r4, #84]	; 0x54
 800db6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db72:	81a3      	strheq	r3, [r4, #12]
 800db74:	bf18      	it	ne
 800db76:	81a3      	strhne	r3, [r4, #12]
 800db78:	bd10      	pop	{r4, pc}

0800db7a <__sclose>:
 800db7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db7e:	f000 b975 	b.w	800de6c <_close_r>

0800db82 <strcpy>:
 800db82:	4603      	mov	r3, r0
 800db84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db88:	f803 2b01 	strb.w	r2, [r3], #1
 800db8c:	2a00      	cmp	r2, #0
 800db8e:	d1f9      	bne.n	800db84 <strcpy+0x2>
 800db90:	4770      	bx	lr

0800db92 <strncmp>:
 800db92:	b510      	push	{r4, lr}
 800db94:	b17a      	cbz	r2, 800dbb6 <strncmp+0x24>
 800db96:	4603      	mov	r3, r0
 800db98:	3901      	subs	r1, #1
 800db9a:	1884      	adds	r4, r0, r2
 800db9c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dba0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dba4:	4290      	cmp	r0, r2
 800dba6:	d101      	bne.n	800dbac <strncmp+0x1a>
 800dba8:	42a3      	cmp	r3, r4
 800dbaa:	d101      	bne.n	800dbb0 <strncmp+0x1e>
 800dbac:	1a80      	subs	r0, r0, r2
 800dbae:	bd10      	pop	{r4, pc}
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d1f3      	bne.n	800db9c <strncmp+0xa>
 800dbb4:	e7fa      	b.n	800dbac <strncmp+0x1a>
 800dbb6:	4610      	mov	r0, r2
 800dbb8:	e7f9      	b.n	800dbae <strncmp+0x1c>
	...

0800dbbc <_strtoul_l.constprop.0>:
 800dbbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbc0:	4f36      	ldr	r7, [pc, #216]	; (800dc9c <_strtoul_l.constprop.0+0xe0>)
 800dbc2:	4686      	mov	lr, r0
 800dbc4:	460d      	mov	r5, r1
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbcc:	5de6      	ldrb	r6, [r4, r7]
 800dbce:	f016 0608 	ands.w	r6, r6, #8
 800dbd2:	d1f8      	bne.n	800dbc6 <_strtoul_l.constprop.0+0xa>
 800dbd4:	2c2d      	cmp	r4, #45	; 0x2d
 800dbd6:	d12f      	bne.n	800dc38 <_strtoul_l.constprop.0+0x7c>
 800dbd8:	782c      	ldrb	r4, [r5, #0]
 800dbda:	2601      	movs	r6, #1
 800dbdc:	1c85      	adds	r5, r0, #2
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d057      	beq.n	800dc92 <_strtoul_l.constprop.0+0xd6>
 800dbe2:	2b10      	cmp	r3, #16
 800dbe4:	d109      	bne.n	800dbfa <_strtoul_l.constprop.0+0x3e>
 800dbe6:	2c30      	cmp	r4, #48	; 0x30
 800dbe8:	d107      	bne.n	800dbfa <_strtoul_l.constprop.0+0x3e>
 800dbea:	7828      	ldrb	r0, [r5, #0]
 800dbec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dbf0:	2858      	cmp	r0, #88	; 0x58
 800dbf2:	d149      	bne.n	800dc88 <_strtoul_l.constprop.0+0xcc>
 800dbf4:	786c      	ldrb	r4, [r5, #1]
 800dbf6:	2310      	movs	r3, #16
 800dbf8:	3502      	adds	r5, #2
 800dbfa:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800dbfe:	2700      	movs	r7, #0
 800dc00:	fbb8 f8f3 	udiv	r8, r8, r3
 800dc04:	fb03 f908 	mul.w	r9, r3, r8
 800dc08:	ea6f 0909 	mvn.w	r9, r9
 800dc0c:	4638      	mov	r0, r7
 800dc0e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800dc12:	f1bc 0f09 	cmp.w	ip, #9
 800dc16:	d814      	bhi.n	800dc42 <_strtoul_l.constprop.0+0x86>
 800dc18:	4664      	mov	r4, ip
 800dc1a:	42a3      	cmp	r3, r4
 800dc1c:	dd22      	ble.n	800dc64 <_strtoul_l.constprop.0+0xa8>
 800dc1e:	2f00      	cmp	r7, #0
 800dc20:	db1d      	blt.n	800dc5e <_strtoul_l.constprop.0+0xa2>
 800dc22:	4580      	cmp	r8, r0
 800dc24:	d31b      	bcc.n	800dc5e <_strtoul_l.constprop.0+0xa2>
 800dc26:	d101      	bne.n	800dc2c <_strtoul_l.constprop.0+0x70>
 800dc28:	45a1      	cmp	r9, r4
 800dc2a:	db18      	blt.n	800dc5e <_strtoul_l.constprop.0+0xa2>
 800dc2c:	fb00 4003 	mla	r0, r0, r3, r4
 800dc30:	2701      	movs	r7, #1
 800dc32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc36:	e7ea      	b.n	800dc0e <_strtoul_l.constprop.0+0x52>
 800dc38:	2c2b      	cmp	r4, #43	; 0x2b
 800dc3a:	bf04      	itt	eq
 800dc3c:	782c      	ldrbeq	r4, [r5, #0]
 800dc3e:	1c85      	addeq	r5, r0, #2
 800dc40:	e7cd      	b.n	800dbde <_strtoul_l.constprop.0+0x22>
 800dc42:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800dc46:	f1bc 0f19 	cmp.w	ip, #25
 800dc4a:	d801      	bhi.n	800dc50 <_strtoul_l.constprop.0+0x94>
 800dc4c:	3c37      	subs	r4, #55	; 0x37
 800dc4e:	e7e4      	b.n	800dc1a <_strtoul_l.constprop.0+0x5e>
 800dc50:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800dc54:	f1bc 0f19 	cmp.w	ip, #25
 800dc58:	d804      	bhi.n	800dc64 <_strtoul_l.constprop.0+0xa8>
 800dc5a:	3c57      	subs	r4, #87	; 0x57
 800dc5c:	e7dd      	b.n	800dc1a <_strtoul_l.constprop.0+0x5e>
 800dc5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dc62:	e7e6      	b.n	800dc32 <_strtoul_l.constprop.0+0x76>
 800dc64:	2f00      	cmp	r7, #0
 800dc66:	da07      	bge.n	800dc78 <_strtoul_l.constprop.0+0xbc>
 800dc68:	2322      	movs	r3, #34	; 0x22
 800dc6a:	f8ce 3000 	str.w	r3, [lr]
 800dc6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc72:	b932      	cbnz	r2, 800dc82 <_strtoul_l.constprop.0+0xc6>
 800dc74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc78:	b106      	cbz	r6, 800dc7c <_strtoul_l.constprop.0+0xc0>
 800dc7a:	4240      	negs	r0, r0
 800dc7c:	2a00      	cmp	r2, #0
 800dc7e:	d0f9      	beq.n	800dc74 <_strtoul_l.constprop.0+0xb8>
 800dc80:	b107      	cbz	r7, 800dc84 <_strtoul_l.constprop.0+0xc8>
 800dc82:	1e69      	subs	r1, r5, #1
 800dc84:	6011      	str	r1, [r2, #0]
 800dc86:	e7f5      	b.n	800dc74 <_strtoul_l.constprop.0+0xb8>
 800dc88:	2430      	movs	r4, #48	; 0x30
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d1b5      	bne.n	800dbfa <_strtoul_l.constprop.0+0x3e>
 800dc8e:	2308      	movs	r3, #8
 800dc90:	e7b3      	b.n	800dbfa <_strtoul_l.constprop.0+0x3e>
 800dc92:	2c30      	cmp	r4, #48	; 0x30
 800dc94:	d0a9      	beq.n	800dbea <_strtoul_l.constprop.0+0x2e>
 800dc96:	230a      	movs	r3, #10
 800dc98:	e7af      	b.n	800dbfa <_strtoul_l.constprop.0+0x3e>
 800dc9a:	bf00      	nop
 800dc9c:	0802721e 	.word	0x0802721e

0800dca0 <_strtoul_r>:
 800dca0:	f7ff bf8c 	b.w	800dbbc <_strtoul_l.constprop.0>

0800dca4 <strtoul>:
 800dca4:	4613      	mov	r3, r2
 800dca6:	460a      	mov	r2, r1
 800dca8:	4601      	mov	r1, r0
 800dcaa:	4802      	ldr	r0, [pc, #8]	; (800dcb4 <strtoul+0x10>)
 800dcac:	6800      	ldr	r0, [r0, #0]
 800dcae:	f7ff bf85 	b.w	800dbbc <_strtoul_l.constprop.0>
 800dcb2:	bf00      	nop
 800dcb4:	200000cc 	.word	0x200000cc

0800dcb8 <__swbuf_r>:
 800dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcba:	460e      	mov	r6, r1
 800dcbc:	4614      	mov	r4, r2
 800dcbe:	4605      	mov	r5, r0
 800dcc0:	b118      	cbz	r0, 800dcca <__swbuf_r+0x12>
 800dcc2:	6983      	ldr	r3, [r0, #24]
 800dcc4:	b90b      	cbnz	r3, 800dcca <__swbuf_r+0x12>
 800dcc6:	f7fe fec1 	bl	800ca4c <__sinit>
 800dcca:	4b21      	ldr	r3, [pc, #132]	; (800dd50 <__swbuf_r+0x98>)
 800dccc:	429c      	cmp	r4, r3
 800dcce:	d12b      	bne.n	800dd28 <__swbuf_r+0x70>
 800dcd0:	686c      	ldr	r4, [r5, #4]
 800dcd2:	69a3      	ldr	r3, [r4, #24]
 800dcd4:	60a3      	str	r3, [r4, #8]
 800dcd6:	89a3      	ldrh	r3, [r4, #12]
 800dcd8:	071a      	lsls	r2, r3, #28
 800dcda:	d52f      	bpl.n	800dd3c <__swbuf_r+0x84>
 800dcdc:	6923      	ldr	r3, [r4, #16]
 800dcde:	b36b      	cbz	r3, 800dd3c <__swbuf_r+0x84>
 800dce0:	6923      	ldr	r3, [r4, #16]
 800dce2:	6820      	ldr	r0, [r4, #0]
 800dce4:	1ac0      	subs	r0, r0, r3
 800dce6:	6963      	ldr	r3, [r4, #20]
 800dce8:	b2f6      	uxtb	r6, r6
 800dcea:	4283      	cmp	r3, r0
 800dcec:	4637      	mov	r7, r6
 800dcee:	dc04      	bgt.n	800dcfa <__swbuf_r+0x42>
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	f000 f95c 	bl	800dfb0 <_fflush_r>
 800dcf8:	bb30      	cbnz	r0, 800dd48 <__swbuf_r+0x90>
 800dcfa:	68a3      	ldr	r3, [r4, #8]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	60a3      	str	r3, [r4, #8]
 800dd00:	6823      	ldr	r3, [r4, #0]
 800dd02:	1c5a      	adds	r2, r3, #1
 800dd04:	6022      	str	r2, [r4, #0]
 800dd06:	701e      	strb	r6, [r3, #0]
 800dd08:	6963      	ldr	r3, [r4, #20]
 800dd0a:	3001      	adds	r0, #1
 800dd0c:	4283      	cmp	r3, r0
 800dd0e:	d004      	beq.n	800dd1a <__swbuf_r+0x62>
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	07db      	lsls	r3, r3, #31
 800dd14:	d506      	bpl.n	800dd24 <__swbuf_r+0x6c>
 800dd16:	2e0a      	cmp	r6, #10
 800dd18:	d104      	bne.n	800dd24 <__swbuf_r+0x6c>
 800dd1a:	4621      	mov	r1, r4
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	f000 f947 	bl	800dfb0 <_fflush_r>
 800dd22:	b988      	cbnz	r0, 800dd48 <__swbuf_r+0x90>
 800dd24:	4638      	mov	r0, r7
 800dd26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd28:	4b0a      	ldr	r3, [pc, #40]	; (800dd54 <__swbuf_r+0x9c>)
 800dd2a:	429c      	cmp	r4, r3
 800dd2c:	d101      	bne.n	800dd32 <__swbuf_r+0x7a>
 800dd2e:	68ac      	ldr	r4, [r5, #8]
 800dd30:	e7cf      	b.n	800dcd2 <__swbuf_r+0x1a>
 800dd32:	4b09      	ldr	r3, [pc, #36]	; (800dd58 <__swbuf_r+0xa0>)
 800dd34:	429c      	cmp	r4, r3
 800dd36:	bf08      	it	eq
 800dd38:	68ec      	ldreq	r4, [r5, #12]
 800dd3a:	e7ca      	b.n	800dcd2 <__swbuf_r+0x1a>
 800dd3c:	4621      	mov	r1, r4
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f000 f81e 	bl	800dd80 <__swsetup_r>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d0cb      	beq.n	800dce0 <__swbuf_r+0x28>
 800dd48:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800dd4c:	e7ea      	b.n	800dd24 <__swbuf_r+0x6c>
 800dd4e:	bf00      	nop
 800dd50:	08027074 	.word	0x08027074
 800dd54:	08027094 	.word	0x08027094
 800dd58:	08027054 	.word	0x08027054

0800dd5c <_write_r>:
 800dd5c:	b538      	push	{r3, r4, r5, lr}
 800dd5e:	4d07      	ldr	r5, [pc, #28]	; (800dd7c <_write_r+0x20>)
 800dd60:	4604      	mov	r4, r0
 800dd62:	4608      	mov	r0, r1
 800dd64:	4611      	mov	r1, r2
 800dd66:	2200      	movs	r2, #0
 800dd68:	602a      	str	r2, [r5, #0]
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	f000 ff72 	bl	800ec54 <_write>
 800dd70:	1c43      	adds	r3, r0, #1
 800dd72:	d102      	bne.n	800dd7a <_write_r+0x1e>
 800dd74:	682b      	ldr	r3, [r5, #0]
 800dd76:	b103      	cbz	r3, 800dd7a <_write_r+0x1e>
 800dd78:	6023      	str	r3, [r4, #0]
 800dd7a:	bd38      	pop	{r3, r4, r5, pc}
 800dd7c:	20000b94 	.word	0x20000b94

0800dd80 <__swsetup_r>:
 800dd80:	4b32      	ldr	r3, [pc, #200]	; (800de4c <__swsetup_r+0xcc>)
 800dd82:	b570      	push	{r4, r5, r6, lr}
 800dd84:	681d      	ldr	r5, [r3, #0]
 800dd86:	4606      	mov	r6, r0
 800dd88:	460c      	mov	r4, r1
 800dd8a:	b125      	cbz	r5, 800dd96 <__swsetup_r+0x16>
 800dd8c:	69ab      	ldr	r3, [r5, #24]
 800dd8e:	b913      	cbnz	r3, 800dd96 <__swsetup_r+0x16>
 800dd90:	4628      	mov	r0, r5
 800dd92:	f7fe fe5b 	bl	800ca4c <__sinit>
 800dd96:	4b2e      	ldr	r3, [pc, #184]	; (800de50 <__swsetup_r+0xd0>)
 800dd98:	429c      	cmp	r4, r3
 800dd9a:	d10f      	bne.n	800ddbc <__swsetup_r+0x3c>
 800dd9c:	686c      	ldr	r4, [r5, #4]
 800dd9e:	89a3      	ldrh	r3, [r4, #12]
 800dda0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dda4:	0719      	lsls	r1, r3, #28
 800dda6:	d42c      	bmi.n	800de02 <__swsetup_r+0x82>
 800dda8:	06dd      	lsls	r5, r3, #27
 800ddaa:	d411      	bmi.n	800ddd0 <__swsetup_r+0x50>
 800ddac:	2309      	movs	r3, #9
 800ddae:	6033      	str	r3, [r6, #0]
 800ddb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ddb4:	81a3      	strh	r3, [r4, #12]
 800ddb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddba:	e03e      	b.n	800de3a <__swsetup_r+0xba>
 800ddbc:	4b25      	ldr	r3, [pc, #148]	; (800de54 <__swsetup_r+0xd4>)
 800ddbe:	429c      	cmp	r4, r3
 800ddc0:	d101      	bne.n	800ddc6 <__swsetup_r+0x46>
 800ddc2:	68ac      	ldr	r4, [r5, #8]
 800ddc4:	e7eb      	b.n	800dd9e <__swsetup_r+0x1e>
 800ddc6:	4b24      	ldr	r3, [pc, #144]	; (800de58 <__swsetup_r+0xd8>)
 800ddc8:	429c      	cmp	r4, r3
 800ddca:	bf08      	it	eq
 800ddcc:	68ec      	ldreq	r4, [r5, #12]
 800ddce:	e7e6      	b.n	800dd9e <__swsetup_r+0x1e>
 800ddd0:	0758      	lsls	r0, r3, #29
 800ddd2:	d512      	bpl.n	800ddfa <__swsetup_r+0x7a>
 800ddd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddd6:	b141      	cbz	r1, 800ddea <__swsetup_r+0x6a>
 800ddd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dddc:	4299      	cmp	r1, r3
 800ddde:	d002      	beq.n	800dde6 <__swsetup_r+0x66>
 800dde0:	4630      	mov	r0, r6
 800dde2:	f7fc fedd 	bl	800aba0 <_free_r>
 800dde6:	2300      	movs	r3, #0
 800dde8:	6363      	str	r3, [r4, #52]	; 0x34
 800ddea:	89a3      	ldrh	r3, [r4, #12]
 800ddec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ddf0:	81a3      	strh	r3, [r4, #12]
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	6063      	str	r3, [r4, #4]
 800ddf6:	6923      	ldr	r3, [r4, #16]
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	89a3      	ldrh	r3, [r4, #12]
 800ddfc:	f043 0308 	orr.w	r3, r3, #8
 800de00:	81a3      	strh	r3, [r4, #12]
 800de02:	6923      	ldr	r3, [r4, #16]
 800de04:	b94b      	cbnz	r3, 800de1a <__swsetup_r+0x9a>
 800de06:	89a3      	ldrh	r3, [r4, #12]
 800de08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de10:	d003      	beq.n	800de1a <__swsetup_r+0x9a>
 800de12:	4621      	mov	r1, r4
 800de14:	4630      	mov	r0, r6
 800de16:	f000 f93f 	bl	800e098 <__smakebuf_r>
 800de1a:	89a0      	ldrh	r0, [r4, #12]
 800de1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de20:	f010 0301 	ands.w	r3, r0, #1
 800de24:	d00a      	beq.n	800de3c <__swsetup_r+0xbc>
 800de26:	2300      	movs	r3, #0
 800de28:	60a3      	str	r3, [r4, #8]
 800de2a:	6963      	ldr	r3, [r4, #20]
 800de2c:	425b      	negs	r3, r3
 800de2e:	61a3      	str	r3, [r4, #24]
 800de30:	6923      	ldr	r3, [r4, #16]
 800de32:	b943      	cbnz	r3, 800de46 <__swsetup_r+0xc6>
 800de34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de38:	d1ba      	bne.n	800ddb0 <__swsetup_r+0x30>
 800de3a:	bd70      	pop	{r4, r5, r6, pc}
 800de3c:	0781      	lsls	r1, r0, #30
 800de3e:	bf58      	it	pl
 800de40:	6963      	ldrpl	r3, [r4, #20]
 800de42:	60a3      	str	r3, [r4, #8]
 800de44:	e7f4      	b.n	800de30 <__swsetup_r+0xb0>
 800de46:	2000      	movs	r0, #0
 800de48:	e7f7      	b.n	800de3a <__swsetup_r+0xba>
 800de4a:	bf00      	nop
 800de4c:	200000cc 	.word	0x200000cc
 800de50:	08027074 	.word	0x08027074
 800de54:	08027094 	.word	0x08027094
 800de58:	08027054 	.word	0x08027054

0800de5c <abort>:
 800de5c:	b508      	push	{r3, lr}
 800de5e:	2006      	movs	r0, #6
 800de60:	f000 fd4c 	bl	800e8fc <raise>
 800de64:	2001      	movs	r0, #1
 800de66:	f000 fefd 	bl	800ec64 <_exit>
	...

0800de6c <_close_r>:
 800de6c:	b538      	push	{r3, r4, r5, lr}
 800de6e:	4d06      	ldr	r5, [pc, #24]	; (800de88 <_close_r+0x1c>)
 800de70:	2300      	movs	r3, #0
 800de72:	4604      	mov	r4, r0
 800de74:	4608      	mov	r0, r1
 800de76:	602b      	str	r3, [r5, #0]
 800de78:	f000 fe9e 	bl	800ebb8 <_close>
 800de7c:	1c43      	adds	r3, r0, #1
 800de7e:	d102      	bne.n	800de86 <_close_r+0x1a>
 800de80:	682b      	ldr	r3, [r5, #0]
 800de82:	b103      	cbz	r3, 800de86 <_close_r+0x1a>
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	bd38      	pop	{r3, r4, r5, pc}
 800de88:	20000b94 	.word	0x20000b94

0800de8c <__env_lock>:
 800de8c:	4801      	ldr	r0, [pc, #4]	; (800de94 <__env_lock+0x8>)
 800de8e:	f7fe bf99 	b.w	800cdc4 <__retarget_lock_acquire_recursive>
 800de92:	bf00      	nop
 800de94:	20000b8c 	.word	0x20000b8c

0800de98 <__env_unlock>:
 800de98:	4801      	ldr	r0, [pc, #4]	; (800dea0 <__env_unlock+0x8>)
 800de9a:	f7fe bf95 	b.w	800cdc8 <__retarget_lock_release_recursive>
 800de9e:	bf00      	nop
 800dea0:	20000b8c 	.word	0x20000b8c

0800dea4 <__sflush_r>:
 800dea4:	898a      	ldrh	r2, [r1, #12]
 800dea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deaa:	4605      	mov	r5, r0
 800deac:	0710      	lsls	r0, r2, #28
 800deae:	460c      	mov	r4, r1
 800deb0:	d458      	bmi.n	800df64 <__sflush_r+0xc0>
 800deb2:	684b      	ldr	r3, [r1, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	dc05      	bgt.n	800dec4 <__sflush_r+0x20>
 800deb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800deba:	2b00      	cmp	r3, #0
 800debc:	dc02      	bgt.n	800dec4 <__sflush_r+0x20>
 800debe:	2000      	movs	r0, #0
 800dec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dec6:	2e00      	cmp	r6, #0
 800dec8:	d0f9      	beq.n	800debe <__sflush_r+0x1a>
 800deca:	2300      	movs	r3, #0
 800decc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ded0:	682f      	ldr	r7, [r5, #0]
 800ded2:	602b      	str	r3, [r5, #0]
 800ded4:	d032      	beq.n	800df3c <__sflush_r+0x98>
 800ded6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ded8:	89a3      	ldrh	r3, [r4, #12]
 800deda:	075a      	lsls	r2, r3, #29
 800dedc:	d505      	bpl.n	800deea <__sflush_r+0x46>
 800dede:	6863      	ldr	r3, [r4, #4]
 800dee0:	1ac0      	subs	r0, r0, r3
 800dee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dee4:	b10b      	cbz	r3, 800deea <__sflush_r+0x46>
 800dee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dee8:	1ac0      	subs	r0, r0, r3
 800deea:	2300      	movs	r3, #0
 800deec:	4602      	mov	r2, r0
 800deee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800def0:	6a21      	ldr	r1, [r4, #32]
 800def2:	4628      	mov	r0, r5
 800def4:	47b0      	blx	r6
 800def6:	1c43      	adds	r3, r0, #1
 800def8:	89a3      	ldrh	r3, [r4, #12]
 800defa:	d106      	bne.n	800df0a <__sflush_r+0x66>
 800defc:	6829      	ldr	r1, [r5, #0]
 800defe:	291d      	cmp	r1, #29
 800df00:	d82c      	bhi.n	800df5c <__sflush_r+0xb8>
 800df02:	4a2a      	ldr	r2, [pc, #168]	; (800dfac <__sflush_r+0x108>)
 800df04:	40ca      	lsrs	r2, r1
 800df06:	07d6      	lsls	r6, r2, #31
 800df08:	d528      	bpl.n	800df5c <__sflush_r+0xb8>
 800df0a:	2200      	movs	r2, #0
 800df0c:	6062      	str	r2, [r4, #4]
 800df0e:	04d9      	lsls	r1, r3, #19
 800df10:	6922      	ldr	r2, [r4, #16]
 800df12:	6022      	str	r2, [r4, #0]
 800df14:	d504      	bpl.n	800df20 <__sflush_r+0x7c>
 800df16:	1c42      	adds	r2, r0, #1
 800df18:	d101      	bne.n	800df1e <__sflush_r+0x7a>
 800df1a:	682b      	ldr	r3, [r5, #0]
 800df1c:	b903      	cbnz	r3, 800df20 <__sflush_r+0x7c>
 800df1e:	6560      	str	r0, [r4, #84]	; 0x54
 800df20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df22:	602f      	str	r7, [r5, #0]
 800df24:	2900      	cmp	r1, #0
 800df26:	d0ca      	beq.n	800debe <__sflush_r+0x1a>
 800df28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df2c:	4299      	cmp	r1, r3
 800df2e:	d002      	beq.n	800df36 <__sflush_r+0x92>
 800df30:	4628      	mov	r0, r5
 800df32:	f7fc fe35 	bl	800aba0 <_free_r>
 800df36:	2000      	movs	r0, #0
 800df38:	6360      	str	r0, [r4, #52]	; 0x34
 800df3a:	e7c1      	b.n	800dec0 <__sflush_r+0x1c>
 800df3c:	6a21      	ldr	r1, [r4, #32]
 800df3e:	2301      	movs	r3, #1
 800df40:	4628      	mov	r0, r5
 800df42:	47b0      	blx	r6
 800df44:	1c41      	adds	r1, r0, #1
 800df46:	d1c7      	bne.n	800ded8 <__sflush_r+0x34>
 800df48:	682b      	ldr	r3, [r5, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d0c4      	beq.n	800ded8 <__sflush_r+0x34>
 800df4e:	2b1d      	cmp	r3, #29
 800df50:	d001      	beq.n	800df56 <__sflush_r+0xb2>
 800df52:	2b16      	cmp	r3, #22
 800df54:	d101      	bne.n	800df5a <__sflush_r+0xb6>
 800df56:	602f      	str	r7, [r5, #0]
 800df58:	e7b1      	b.n	800debe <__sflush_r+0x1a>
 800df5a:	89a3      	ldrh	r3, [r4, #12]
 800df5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df60:	81a3      	strh	r3, [r4, #12]
 800df62:	e7ad      	b.n	800dec0 <__sflush_r+0x1c>
 800df64:	690f      	ldr	r7, [r1, #16]
 800df66:	2f00      	cmp	r7, #0
 800df68:	d0a9      	beq.n	800debe <__sflush_r+0x1a>
 800df6a:	0793      	lsls	r3, r2, #30
 800df6c:	680e      	ldr	r6, [r1, #0]
 800df6e:	bf08      	it	eq
 800df70:	694b      	ldreq	r3, [r1, #20]
 800df72:	600f      	str	r7, [r1, #0]
 800df74:	bf18      	it	ne
 800df76:	2300      	movne	r3, #0
 800df78:	eba6 0807 	sub.w	r8, r6, r7
 800df7c:	608b      	str	r3, [r1, #8]
 800df7e:	f1b8 0f00 	cmp.w	r8, #0
 800df82:	dd9c      	ble.n	800debe <__sflush_r+0x1a>
 800df84:	6a21      	ldr	r1, [r4, #32]
 800df86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800df88:	4643      	mov	r3, r8
 800df8a:	463a      	mov	r2, r7
 800df8c:	4628      	mov	r0, r5
 800df8e:	47b0      	blx	r6
 800df90:	2800      	cmp	r0, #0
 800df92:	dc06      	bgt.n	800dfa2 <__sflush_r+0xfe>
 800df94:	89a3      	ldrh	r3, [r4, #12]
 800df96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df9a:	81a3      	strh	r3, [r4, #12]
 800df9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dfa0:	e78e      	b.n	800dec0 <__sflush_r+0x1c>
 800dfa2:	4407      	add	r7, r0
 800dfa4:	eba8 0800 	sub.w	r8, r8, r0
 800dfa8:	e7e9      	b.n	800df7e <__sflush_r+0xda>
 800dfaa:	bf00      	nop
 800dfac:	20400001 	.word	0x20400001

0800dfb0 <_fflush_r>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	690b      	ldr	r3, [r1, #16]
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	b913      	cbnz	r3, 800dfc0 <_fflush_r+0x10>
 800dfba:	2500      	movs	r5, #0
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	bd38      	pop	{r3, r4, r5, pc}
 800dfc0:	b118      	cbz	r0, 800dfca <_fflush_r+0x1a>
 800dfc2:	6983      	ldr	r3, [r0, #24]
 800dfc4:	b90b      	cbnz	r3, 800dfca <_fflush_r+0x1a>
 800dfc6:	f7fe fd41 	bl	800ca4c <__sinit>
 800dfca:	4b14      	ldr	r3, [pc, #80]	; (800e01c <_fflush_r+0x6c>)
 800dfcc:	429c      	cmp	r4, r3
 800dfce:	d11b      	bne.n	800e008 <_fflush_r+0x58>
 800dfd0:	686c      	ldr	r4, [r5, #4]
 800dfd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d0ef      	beq.n	800dfba <_fflush_r+0xa>
 800dfda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfdc:	07d0      	lsls	r0, r2, #31
 800dfde:	d404      	bmi.n	800dfea <_fflush_r+0x3a>
 800dfe0:	0599      	lsls	r1, r3, #22
 800dfe2:	d402      	bmi.n	800dfea <_fflush_r+0x3a>
 800dfe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfe6:	f7fe feed 	bl	800cdc4 <__retarget_lock_acquire_recursive>
 800dfea:	4628      	mov	r0, r5
 800dfec:	4621      	mov	r1, r4
 800dfee:	f7ff ff59 	bl	800dea4 <__sflush_r>
 800dff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dff4:	07da      	lsls	r2, r3, #31
 800dff6:	4605      	mov	r5, r0
 800dff8:	d4e0      	bmi.n	800dfbc <_fflush_r+0xc>
 800dffa:	89a3      	ldrh	r3, [r4, #12]
 800dffc:	059b      	lsls	r3, r3, #22
 800dffe:	d4dd      	bmi.n	800dfbc <_fflush_r+0xc>
 800e000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e002:	f7fe fee1 	bl	800cdc8 <__retarget_lock_release_recursive>
 800e006:	e7d9      	b.n	800dfbc <_fflush_r+0xc>
 800e008:	4b05      	ldr	r3, [pc, #20]	; (800e020 <_fflush_r+0x70>)
 800e00a:	429c      	cmp	r4, r3
 800e00c:	d101      	bne.n	800e012 <_fflush_r+0x62>
 800e00e:	68ac      	ldr	r4, [r5, #8]
 800e010:	e7df      	b.n	800dfd2 <_fflush_r+0x22>
 800e012:	4b04      	ldr	r3, [pc, #16]	; (800e024 <_fflush_r+0x74>)
 800e014:	429c      	cmp	r4, r3
 800e016:	bf08      	it	eq
 800e018:	68ec      	ldreq	r4, [r5, #12]
 800e01a:	e7da      	b.n	800dfd2 <_fflush_r+0x22>
 800e01c:	08027074 	.word	0x08027074
 800e020:	08027094 	.word	0x08027094
 800e024:	08027054 	.word	0x08027054

0800e028 <_lseek_r>:
 800e028:	b538      	push	{r3, r4, r5, lr}
 800e02a:	4d07      	ldr	r5, [pc, #28]	; (800e048 <_lseek_r+0x20>)
 800e02c:	4604      	mov	r4, r0
 800e02e:	4608      	mov	r0, r1
 800e030:	4611      	mov	r1, r2
 800e032:	2200      	movs	r2, #0
 800e034:	602a      	str	r2, [r5, #0]
 800e036:	461a      	mov	r2, r3
 800e038:	f000 fdee 	bl	800ec18 <_lseek>
 800e03c:	1c43      	adds	r3, r0, #1
 800e03e:	d102      	bne.n	800e046 <_lseek_r+0x1e>
 800e040:	682b      	ldr	r3, [r5, #0]
 800e042:	b103      	cbz	r3, 800e046 <_lseek_r+0x1e>
 800e044:	6023      	str	r3, [r4, #0]
 800e046:	bd38      	pop	{r3, r4, r5, pc}
 800e048:	20000b94 	.word	0x20000b94

0800e04c <__swhatbuf_r>:
 800e04c:	b570      	push	{r4, r5, r6, lr}
 800e04e:	460e      	mov	r6, r1
 800e050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e054:	2900      	cmp	r1, #0
 800e056:	b096      	sub	sp, #88	; 0x58
 800e058:	4614      	mov	r4, r2
 800e05a:	461d      	mov	r5, r3
 800e05c:	da08      	bge.n	800e070 <__swhatbuf_r+0x24>
 800e05e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e062:	2200      	movs	r2, #0
 800e064:	602a      	str	r2, [r5, #0]
 800e066:	061a      	lsls	r2, r3, #24
 800e068:	d410      	bmi.n	800e08c <__swhatbuf_r+0x40>
 800e06a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e06e:	e00e      	b.n	800e08e <__swhatbuf_r+0x42>
 800e070:	466a      	mov	r2, sp
 800e072:	f000 fd31 	bl	800ead8 <_fstat_r>
 800e076:	2800      	cmp	r0, #0
 800e078:	dbf1      	blt.n	800e05e <__swhatbuf_r+0x12>
 800e07a:	9a01      	ldr	r2, [sp, #4]
 800e07c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e080:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e084:	425a      	negs	r2, r3
 800e086:	415a      	adcs	r2, r3
 800e088:	602a      	str	r2, [r5, #0]
 800e08a:	e7ee      	b.n	800e06a <__swhatbuf_r+0x1e>
 800e08c:	2340      	movs	r3, #64	; 0x40
 800e08e:	2000      	movs	r0, #0
 800e090:	6023      	str	r3, [r4, #0]
 800e092:	b016      	add	sp, #88	; 0x58
 800e094:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e098 <__smakebuf_r>:
 800e098:	898b      	ldrh	r3, [r1, #12]
 800e09a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e09c:	079d      	lsls	r5, r3, #30
 800e09e:	4606      	mov	r6, r0
 800e0a0:	460c      	mov	r4, r1
 800e0a2:	d507      	bpl.n	800e0b4 <__smakebuf_r+0x1c>
 800e0a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	6123      	str	r3, [r4, #16]
 800e0ac:	2301      	movs	r3, #1
 800e0ae:	6163      	str	r3, [r4, #20]
 800e0b0:	b002      	add	sp, #8
 800e0b2:	bd70      	pop	{r4, r5, r6, pc}
 800e0b4:	ab01      	add	r3, sp, #4
 800e0b6:	466a      	mov	r2, sp
 800e0b8:	f7ff ffc8 	bl	800e04c <__swhatbuf_r>
 800e0bc:	9900      	ldr	r1, [sp, #0]
 800e0be:	4605      	mov	r5, r0
 800e0c0:	4630      	mov	r0, r6
 800e0c2:	f7fc fdd9 	bl	800ac78 <_malloc_r>
 800e0c6:	b948      	cbnz	r0, 800e0dc <__smakebuf_r+0x44>
 800e0c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e0cc:	059a      	lsls	r2, r3, #22
 800e0ce:	d4ef      	bmi.n	800e0b0 <__smakebuf_r+0x18>
 800e0d0:	f023 0303 	bic.w	r3, r3, #3
 800e0d4:	f043 0302 	orr.w	r3, r3, #2
 800e0d8:	81a3      	strh	r3, [r4, #12]
 800e0da:	e7e3      	b.n	800e0a4 <__smakebuf_r+0xc>
 800e0dc:	4b0d      	ldr	r3, [pc, #52]	; (800e114 <__smakebuf_r+0x7c>)
 800e0de:	62b3      	str	r3, [r6, #40]	; 0x28
 800e0e0:	89a3      	ldrh	r3, [r4, #12]
 800e0e2:	6020      	str	r0, [r4, #0]
 800e0e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0e8:	81a3      	strh	r3, [r4, #12]
 800e0ea:	9b00      	ldr	r3, [sp, #0]
 800e0ec:	6163      	str	r3, [r4, #20]
 800e0ee:	9b01      	ldr	r3, [sp, #4]
 800e0f0:	6120      	str	r0, [r4, #16]
 800e0f2:	b15b      	cbz	r3, 800e10c <__smakebuf_r+0x74>
 800e0f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f000 fcff 	bl	800eafc <_isatty_r>
 800e0fe:	b128      	cbz	r0, 800e10c <__smakebuf_r+0x74>
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	f023 0303 	bic.w	r3, r3, #3
 800e106:	f043 0301 	orr.w	r3, r3, #1
 800e10a:	81a3      	strh	r3, [r4, #12]
 800e10c:	89a0      	ldrh	r0, [r4, #12]
 800e10e:	4305      	orrs	r5, r0
 800e110:	81a5      	strh	r5, [r4, #12]
 800e112:	e7cd      	b.n	800e0b0 <__smakebuf_r+0x18>
 800e114:	0800c9e5 	.word	0x0800c9e5

0800e118 <__ascii_mbtowc>:
 800e118:	b082      	sub	sp, #8
 800e11a:	b901      	cbnz	r1, 800e11e <__ascii_mbtowc+0x6>
 800e11c:	a901      	add	r1, sp, #4
 800e11e:	b142      	cbz	r2, 800e132 <__ascii_mbtowc+0x1a>
 800e120:	b14b      	cbz	r3, 800e136 <__ascii_mbtowc+0x1e>
 800e122:	7813      	ldrb	r3, [r2, #0]
 800e124:	600b      	str	r3, [r1, #0]
 800e126:	7812      	ldrb	r2, [r2, #0]
 800e128:	1e10      	subs	r0, r2, #0
 800e12a:	bf18      	it	ne
 800e12c:	2001      	movne	r0, #1
 800e12e:	b002      	add	sp, #8
 800e130:	4770      	bx	lr
 800e132:	4610      	mov	r0, r2
 800e134:	e7fb      	b.n	800e12e <__ascii_mbtowc+0x16>
 800e136:	f06f 0001 	mvn.w	r0, #1
 800e13a:	e7f8      	b.n	800e12e <__ascii_mbtowc+0x16>

0800e13c <memmove>:
 800e13c:	4288      	cmp	r0, r1
 800e13e:	b510      	push	{r4, lr}
 800e140:	eb01 0402 	add.w	r4, r1, r2
 800e144:	d902      	bls.n	800e14c <memmove+0x10>
 800e146:	4284      	cmp	r4, r0
 800e148:	4623      	mov	r3, r4
 800e14a:	d807      	bhi.n	800e15c <memmove+0x20>
 800e14c:	1e43      	subs	r3, r0, #1
 800e14e:	42a1      	cmp	r1, r4
 800e150:	d008      	beq.n	800e164 <memmove+0x28>
 800e152:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e156:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e15a:	e7f8      	b.n	800e14e <memmove+0x12>
 800e15c:	4402      	add	r2, r0
 800e15e:	4601      	mov	r1, r0
 800e160:	428a      	cmp	r2, r1
 800e162:	d100      	bne.n	800e166 <memmove+0x2a>
 800e164:	bd10      	pop	{r4, pc}
 800e166:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e16a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e16e:	e7f7      	b.n	800e160 <memmove+0x24>

0800e170 <_realloc_r>:
 800e170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e174:	4680      	mov	r8, r0
 800e176:	4614      	mov	r4, r2
 800e178:	460e      	mov	r6, r1
 800e17a:	b921      	cbnz	r1, 800e186 <_realloc_r+0x16>
 800e17c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e180:	4611      	mov	r1, r2
 800e182:	f7fc bd79 	b.w	800ac78 <_malloc_r>
 800e186:	b92a      	cbnz	r2, 800e194 <_realloc_r+0x24>
 800e188:	f7fc fd0a 	bl	800aba0 <_free_r>
 800e18c:	4625      	mov	r5, r4
 800e18e:	4628      	mov	r0, r5
 800e190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e194:	f000 fcc2 	bl	800eb1c <_malloc_usable_size_r>
 800e198:	4284      	cmp	r4, r0
 800e19a:	4607      	mov	r7, r0
 800e19c:	d802      	bhi.n	800e1a4 <_realloc_r+0x34>
 800e19e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e1a2:	d812      	bhi.n	800e1ca <_realloc_r+0x5a>
 800e1a4:	4621      	mov	r1, r4
 800e1a6:	4640      	mov	r0, r8
 800e1a8:	f7fc fd66 	bl	800ac78 <_malloc_r>
 800e1ac:	4605      	mov	r5, r0
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d0ed      	beq.n	800e18e <_realloc_r+0x1e>
 800e1b2:	42bc      	cmp	r4, r7
 800e1b4:	4622      	mov	r2, r4
 800e1b6:	4631      	mov	r1, r6
 800e1b8:	bf28      	it	cs
 800e1ba:	463a      	movcs	r2, r7
 800e1bc:	f7fe fe05 	bl	800cdca <memcpy>
 800e1c0:	4631      	mov	r1, r6
 800e1c2:	4640      	mov	r0, r8
 800e1c4:	f7fc fcec 	bl	800aba0 <_free_r>
 800e1c8:	e7e1      	b.n	800e18e <_realloc_r+0x1e>
 800e1ca:	4635      	mov	r5, r6
 800e1cc:	e7df      	b.n	800e18e <_realloc_r+0x1e>

0800e1ce <_sungetc_r>:
 800e1ce:	b538      	push	{r3, r4, r5, lr}
 800e1d0:	1c4b      	adds	r3, r1, #1
 800e1d2:	4614      	mov	r4, r2
 800e1d4:	d103      	bne.n	800e1de <_sungetc_r+0x10>
 800e1d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e1da:	4628      	mov	r0, r5
 800e1dc:	bd38      	pop	{r3, r4, r5, pc}
 800e1de:	8993      	ldrh	r3, [r2, #12]
 800e1e0:	f023 0320 	bic.w	r3, r3, #32
 800e1e4:	8193      	strh	r3, [r2, #12]
 800e1e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1e8:	6852      	ldr	r2, [r2, #4]
 800e1ea:	b2cd      	uxtb	r5, r1
 800e1ec:	b18b      	cbz	r3, 800e212 <_sungetc_r+0x44>
 800e1ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	dd08      	ble.n	800e206 <_sungetc_r+0x38>
 800e1f4:	6823      	ldr	r3, [r4, #0]
 800e1f6:	1e5a      	subs	r2, r3, #1
 800e1f8:	6022      	str	r2, [r4, #0]
 800e1fa:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e1fe:	6863      	ldr	r3, [r4, #4]
 800e200:	3301      	adds	r3, #1
 800e202:	6063      	str	r3, [r4, #4]
 800e204:	e7e9      	b.n	800e1da <_sungetc_r+0xc>
 800e206:	4621      	mov	r1, r4
 800e208:	f000 fc18 	bl	800ea3c <__submore>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	d0f1      	beq.n	800e1f4 <_sungetc_r+0x26>
 800e210:	e7e1      	b.n	800e1d6 <_sungetc_r+0x8>
 800e212:	6921      	ldr	r1, [r4, #16]
 800e214:	6823      	ldr	r3, [r4, #0]
 800e216:	b151      	cbz	r1, 800e22e <_sungetc_r+0x60>
 800e218:	4299      	cmp	r1, r3
 800e21a:	d208      	bcs.n	800e22e <_sungetc_r+0x60>
 800e21c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e220:	42a9      	cmp	r1, r5
 800e222:	d104      	bne.n	800e22e <_sungetc_r+0x60>
 800e224:	3b01      	subs	r3, #1
 800e226:	3201      	adds	r2, #1
 800e228:	6023      	str	r3, [r4, #0]
 800e22a:	6062      	str	r2, [r4, #4]
 800e22c:	e7d5      	b.n	800e1da <_sungetc_r+0xc>
 800e22e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800e232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e236:	6363      	str	r3, [r4, #52]	; 0x34
 800e238:	2303      	movs	r3, #3
 800e23a:	63a3      	str	r3, [r4, #56]	; 0x38
 800e23c:	4623      	mov	r3, r4
 800e23e:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e242:	6023      	str	r3, [r4, #0]
 800e244:	2301      	movs	r3, #1
 800e246:	e7dc      	b.n	800e202 <_sungetc_r+0x34>

0800e248 <__ssrefill_r>:
 800e248:	b510      	push	{r4, lr}
 800e24a:	460c      	mov	r4, r1
 800e24c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e24e:	b169      	cbz	r1, 800e26c <__ssrefill_r+0x24>
 800e250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e254:	4299      	cmp	r1, r3
 800e256:	d001      	beq.n	800e25c <__ssrefill_r+0x14>
 800e258:	f7fc fca2 	bl	800aba0 <_free_r>
 800e25c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e25e:	6063      	str	r3, [r4, #4]
 800e260:	2000      	movs	r0, #0
 800e262:	6360      	str	r0, [r4, #52]	; 0x34
 800e264:	b113      	cbz	r3, 800e26c <__ssrefill_r+0x24>
 800e266:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e268:	6023      	str	r3, [r4, #0]
 800e26a:	bd10      	pop	{r4, pc}
 800e26c:	6923      	ldr	r3, [r4, #16]
 800e26e:	6023      	str	r3, [r4, #0]
 800e270:	2300      	movs	r3, #0
 800e272:	6063      	str	r3, [r4, #4]
 800e274:	89a3      	ldrh	r3, [r4, #12]
 800e276:	f043 0320 	orr.w	r3, r3, #32
 800e27a:	81a3      	strh	r3, [r4, #12]
 800e27c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e280:	e7f3      	b.n	800e26a <__ssrefill_r+0x22>
	...

0800e284 <__ssvfiscanf_r>:
 800e284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e288:	460c      	mov	r4, r1
 800e28a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800e28e:	2100      	movs	r1, #0
 800e290:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800e294:	49a6      	ldr	r1, [pc, #664]	; (800e530 <__ssvfiscanf_r+0x2ac>)
 800e296:	91a0      	str	r1, [sp, #640]	; 0x280
 800e298:	f10d 0804 	add.w	r8, sp, #4
 800e29c:	49a5      	ldr	r1, [pc, #660]	; (800e534 <__ssvfiscanf_r+0x2b0>)
 800e29e:	4fa6      	ldr	r7, [pc, #664]	; (800e538 <__ssvfiscanf_r+0x2b4>)
 800e2a0:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800e53c <__ssvfiscanf_r+0x2b8>
 800e2a4:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800e2a8:	4606      	mov	r6, r0
 800e2aa:	91a1      	str	r1, [sp, #644]	; 0x284
 800e2ac:	9300      	str	r3, [sp, #0]
 800e2ae:	7813      	ldrb	r3, [r2, #0]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f000 815a 	beq.w	800e56a <__ssvfiscanf_r+0x2e6>
 800e2b6:	5dd9      	ldrb	r1, [r3, r7]
 800e2b8:	f011 0108 	ands.w	r1, r1, #8
 800e2bc:	f102 0501 	add.w	r5, r2, #1
 800e2c0:	d019      	beq.n	800e2f6 <__ssvfiscanf_r+0x72>
 800e2c2:	6863      	ldr	r3, [r4, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	dd0f      	ble.n	800e2e8 <__ssvfiscanf_r+0x64>
 800e2c8:	6823      	ldr	r3, [r4, #0]
 800e2ca:	781a      	ldrb	r2, [r3, #0]
 800e2cc:	5cba      	ldrb	r2, [r7, r2]
 800e2ce:	0712      	lsls	r2, r2, #28
 800e2d0:	d401      	bmi.n	800e2d6 <__ssvfiscanf_r+0x52>
 800e2d2:	462a      	mov	r2, r5
 800e2d4:	e7eb      	b.n	800e2ae <__ssvfiscanf_r+0x2a>
 800e2d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e2d8:	3201      	adds	r2, #1
 800e2da:	9245      	str	r2, [sp, #276]	; 0x114
 800e2dc:	6862      	ldr	r2, [r4, #4]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	3a01      	subs	r2, #1
 800e2e2:	6062      	str	r2, [r4, #4]
 800e2e4:	6023      	str	r3, [r4, #0]
 800e2e6:	e7ec      	b.n	800e2c2 <__ssvfiscanf_r+0x3e>
 800e2e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e2ea:	4621      	mov	r1, r4
 800e2ec:	4630      	mov	r0, r6
 800e2ee:	4798      	blx	r3
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	d0e9      	beq.n	800e2c8 <__ssvfiscanf_r+0x44>
 800e2f4:	e7ed      	b.n	800e2d2 <__ssvfiscanf_r+0x4e>
 800e2f6:	2b25      	cmp	r3, #37	; 0x25
 800e2f8:	d012      	beq.n	800e320 <__ssvfiscanf_r+0x9c>
 800e2fa:	469a      	mov	sl, r3
 800e2fc:	6863      	ldr	r3, [r4, #4]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f340 8091 	ble.w	800e426 <__ssvfiscanf_r+0x1a2>
 800e304:	6822      	ldr	r2, [r4, #0]
 800e306:	7813      	ldrb	r3, [r2, #0]
 800e308:	4553      	cmp	r3, sl
 800e30a:	f040 812e 	bne.w	800e56a <__ssvfiscanf_r+0x2e6>
 800e30e:	6863      	ldr	r3, [r4, #4]
 800e310:	3b01      	subs	r3, #1
 800e312:	6063      	str	r3, [r4, #4]
 800e314:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800e316:	3201      	adds	r2, #1
 800e318:	3301      	adds	r3, #1
 800e31a:	6022      	str	r2, [r4, #0]
 800e31c:	9345      	str	r3, [sp, #276]	; 0x114
 800e31e:	e7d8      	b.n	800e2d2 <__ssvfiscanf_r+0x4e>
 800e320:	9141      	str	r1, [sp, #260]	; 0x104
 800e322:	9143      	str	r1, [sp, #268]	; 0x10c
 800e324:	7853      	ldrb	r3, [r2, #1]
 800e326:	2b2a      	cmp	r3, #42	; 0x2a
 800e328:	bf02      	ittt	eq
 800e32a:	2310      	moveq	r3, #16
 800e32c:	1c95      	addeq	r5, r2, #2
 800e32e:	9341      	streq	r3, [sp, #260]	; 0x104
 800e330:	220a      	movs	r2, #10
 800e332:	46aa      	mov	sl, r5
 800e334:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e338:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800e33c:	2b09      	cmp	r3, #9
 800e33e:	d91d      	bls.n	800e37c <__ssvfiscanf_r+0xf8>
 800e340:	487e      	ldr	r0, [pc, #504]	; (800e53c <__ssvfiscanf_r+0x2b8>)
 800e342:	2203      	movs	r2, #3
 800e344:	f7f1 ffbc 	bl	80002c0 <memchr>
 800e348:	b140      	cbz	r0, 800e35c <__ssvfiscanf_r+0xd8>
 800e34a:	2301      	movs	r3, #1
 800e34c:	eba0 0009 	sub.w	r0, r0, r9
 800e350:	fa03 f000 	lsl.w	r0, r3, r0
 800e354:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e356:	4318      	orrs	r0, r3
 800e358:	9041      	str	r0, [sp, #260]	; 0x104
 800e35a:	4655      	mov	r5, sl
 800e35c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e360:	2b78      	cmp	r3, #120	; 0x78
 800e362:	d806      	bhi.n	800e372 <__ssvfiscanf_r+0xee>
 800e364:	2b57      	cmp	r3, #87	; 0x57
 800e366:	d810      	bhi.n	800e38a <__ssvfiscanf_r+0x106>
 800e368:	2b25      	cmp	r3, #37	; 0x25
 800e36a:	d0c6      	beq.n	800e2fa <__ssvfiscanf_r+0x76>
 800e36c:	d856      	bhi.n	800e41c <__ssvfiscanf_r+0x198>
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d064      	beq.n	800e43c <__ssvfiscanf_r+0x1b8>
 800e372:	2303      	movs	r3, #3
 800e374:	9347      	str	r3, [sp, #284]	; 0x11c
 800e376:	230a      	movs	r3, #10
 800e378:	9342      	str	r3, [sp, #264]	; 0x108
 800e37a:	e071      	b.n	800e460 <__ssvfiscanf_r+0x1dc>
 800e37c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800e37e:	fb02 1103 	mla	r1, r2, r3, r1
 800e382:	3930      	subs	r1, #48	; 0x30
 800e384:	9143      	str	r1, [sp, #268]	; 0x10c
 800e386:	4655      	mov	r5, sl
 800e388:	e7d3      	b.n	800e332 <__ssvfiscanf_r+0xae>
 800e38a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800e38e:	2a20      	cmp	r2, #32
 800e390:	d8ef      	bhi.n	800e372 <__ssvfiscanf_r+0xee>
 800e392:	a101      	add	r1, pc, #4	; (adr r1, 800e398 <__ssvfiscanf_r+0x114>)
 800e394:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e398:	0800e44b 	.word	0x0800e44b
 800e39c:	0800e373 	.word	0x0800e373
 800e3a0:	0800e373 	.word	0x0800e373
 800e3a4:	0800e4a9 	.word	0x0800e4a9
 800e3a8:	0800e373 	.word	0x0800e373
 800e3ac:	0800e373 	.word	0x0800e373
 800e3b0:	0800e373 	.word	0x0800e373
 800e3b4:	0800e373 	.word	0x0800e373
 800e3b8:	0800e373 	.word	0x0800e373
 800e3bc:	0800e373 	.word	0x0800e373
 800e3c0:	0800e373 	.word	0x0800e373
 800e3c4:	0800e4bf 	.word	0x0800e4bf
 800e3c8:	0800e495 	.word	0x0800e495
 800e3cc:	0800e423 	.word	0x0800e423
 800e3d0:	0800e423 	.word	0x0800e423
 800e3d4:	0800e423 	.word	0x0800e423
 800e3d8:	0800e373 	.word	0x0800e373
 800e3dc:	0800e499 	.word	0x0800e499
 800e3e0:	0800e373 	.word	0x0800e373
 800e3e4:	0800e373 	.word	0x0800e373
 800e3e8:	0800e373 	.word	0x0800e373
 800e3ec:	0800e373 	.word	0x0800e373
 800e3f0:	0800e4cf 	.word	0x0800e4cf
 800e3f4:	0800e4a1 	.word	0x0800e4a1
 800e3f8:	0800e443 	.word	0x0800e443
 800e3fc:	0800e373 	.word	0x0800e373
 800e400:	0800e373 	.word	0x0800e373
 800e404:	0800e4cb 	.word	0x0800e4cb
 800e408:	0800e373 	.word	0x0800e373
 800e40c:	0800e495 	.word	0x0800e495
 800e410:	0800e373 	.word	0x0800e373
 800e414:	0800e373 	.word	0x0800e373
 800e418:	0800e44b 	.word	0x0800e44b
 800e41c:	3b45      	subs	r3, #69	; 0x45
 800e41e:	2b02      	cmp	r3, #2
 800e420:	d8a7      	bhi.n	800e372 <__ssvfiscanf_r+0xee>
 800e422:	2305      	movs	r3, #5
 800e424:	e01b      	b.n	800e45e <__ssvfiscanf_r+0x1da>
 800e426:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e428:	4621      	mov	r1, r4
 800e42a:	4630      	mov	r0, r6
 800e42c:	4798      	blx	r3
 800e42e:	2800      	cmp	r0, #0
 800e430:	f43f af68 	beq.w	800e304 <__ssvfiscanf_r+0x80>
 800e434:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e436:	2800      	cmp	r0, #0
 800e438:	f040 808d 	bne.w	800e556 <__ssvfiscanf_r+0x2d2>
 800e43c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e440:	e08f      	b.n	800e562 <__ssvfiscanf_r+0x2de>
 800e442:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e444:	f042 0220 	orr.w	r2, r2, #32
 800e448:	9241      	str	r2, [sp, #260]	; 0x104
 800e44a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800e44c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e450:	9241      	str	r2, [sp, #260]	; 0x104
 800e452:	2210      	movs	r2, #16
 800e454:	2b6f      	cmp	r3, #111	; 0x6f
 800e456:	9242      	str	r2, [sp, #264]	; 0x108
 800e458:	bf34      	ite	cc
 800e45a:	2303      	movcc	r3, #3
 800e45c:	2304      	movcs	r3, #4
 800e45e:	9347      	str	r3, [sp, #284]	; 0x11c
 800e460:	6863      	ldr	r3, [r4, #4]
 800e462:	2b00      	cmp	r3, #0
 800e464:	dd42      	ble.n	800e4ec <__ssvfiscanf_r+0x268>
 800e466:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e468:	0659      	lsls	r1, r3, #25
 800e46a:	d404      	bmi.n	800e476 <__ssvfiscanf_r+0x1f2>
 800e46c:	6823      	ldr	r3, [r4, #0]
 800e46e:	781a      	ldrb	r2, [r3, #0]
 800e470:	5cba      	ldrb	r2, [r7, r2]
 800e472:	0712      	lsls	r2, r2, #28
 800e474:	d441      	bmi.n	800e4fa <__ssvfiscanf_r+0x276>
 800e476:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800e478:	2b02      	cmp	r3, #2
 800e47a:	dc50      	bgt.n	800e51e <__ssvfiscanf_r+0x29a>
 800e47c:	466b      	mov	r3, sp
 800e47e:	4622      	mov	r2, r4
 800e480:	a941      	add	r1, sp, #260	; 0x104
 800e482:	4630      	mov	r0, r6
 800e484:	f000 f876 	bl	800e574 <_scanf_chars>
 800e488:	2801      	cmp	r0, #1
 800e48a:	d06e      	beq.n	800e56a <__ssvfiscanf_r+0x2e6>
 800e48c:	2802      	cmp	r0, #2
 800e48e:	f47f af20 	bne.w	800e2d2 <__ssvfiscanf_r+0x4e>
 800e492:	e7cf      	b.n	800e434 <__ssvfiscanf_r+0x1b0>
 800e494:	220a      	movs	r2, #10
 800e496:	e7dd      	b.n	800e454 <__ssvfiscanf_r+0x1d0>
 800e498:	2300      	movs	r3, #0
 800e49a:	9342      	str	r3, [sp, #264]	; 0x108
 800e49c:	2303      	movs	r3, #3
 800e49e:	e7de      	b.n	800e45e <__ssvfiscanf_r+0x1da>
 800e4a0:	2308      	movs	r3, #8
 800e4a2:	9342      	str	r3, [sp, #264]	; 0x108
 800e4a4:	2304      	movs	r3, #4
 800e4a6:	e7da      	b.n	800e45e <__ssvfiscanf_r+0x1da>
 800e4a8:	4629      	mov	r1, r5
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	f000 f9c6 	bl	800e83c <__sccl>
 800e4b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4b6:	9341      	str	r3, [sp, #260]	; 0x104
 800e4b8:	4605      	mov	r5, r0
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e7cf      	b.n	800e45e <__ssvfiscanf_r+0x1da>
 800e4be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800e4c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4c4:	9341      	str	r3, [sp, #260]	; 0x104
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	e7c9      	b.n	800e45e <__ssvfiscanf_r+0x1da>
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	e7c7      	b.n	800e45e <__ssvfiscanf_r+0x1da>
 800e4ce:	9841      	ldr	r0, [sp, #260]	; 0x104
 800e4d0:	06c3      	lsls	r3, r0, #27
 800e4d2:	f53f aefe 	bmi.w	800e2d2 <__ssvfiscanf_r+0x4e>
 800e4d6:	9b00      	ldr	r3, [sp, #0]
 800e4d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e4da:	1d19      	adds	r1, r3, #4
 800e4dc:	9100      	str	r1, [sp, #0]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	f010 0f01 	tst.w	r0, #1
 800e4e4:	bf14      	ite	ne
 800e4e6:	801a      	strhne	r2, [r3, #0]
 800e4e8:	601a      	streq	r2, [r3, #0]
 800e4ea:	e6f2      	b.n	800e2d2 <__ssvfiscanf_r+0x4e>
 800e4ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e4ee:	4621      	mov	r1, r4
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	4798      	blx	r3
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d0b6      	beq.n	800e466 <__ssvfiscanf_r+0x1e2>
 800e4f8:	e79c      	b.n	800e434 <__ssvfiscanf_r+0x1b0>
 800e4fa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800e4fc:	3201      	adds	r2, #1
 800e4fe:	9245      	str	r2, [sp, #276]	; 0x114
 800e500:	6862      	ldr	r2, [r4, #4]
 800e502:	3a01      	subs	r2, #1
 800e504:	2a00      	cmp	r2, #0
 800e506:	6062      	str	r2, [r4, #4]
 800e508:	dd02      	ble.n	800e510 <__ssvfiscanf_r+0x28c>
 800e50a:	3301      	adds	r3, #1
 800e50c:	6023      	str	r3, [r4, #0]
 800e50e:	e7ad      	b.n	800e46c <__ssvfiscanf_r+0x1e8>
 800e510:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800e512:	4621      	mov	r1, r4
 800e514:	4630      	mov	r0, r6
 800e516:	4798      	blx	r3
 800e518:	2800      	cmp	r0, #0
 800e51a:	d0a7      	beq.n	800e46c <__ssvfiscanf_r+0x1e8>
 800e51c:	e78a      	b.n	800e434 <__ssvfiscanf_r+0x1b0>
 800e51e:	2b04      	cmp	r3, #4
 800e520:	dc0e      	bgt.n	800e540 <__ssvfiscanf_r+0x2bc>
 800e522:	466b      	mov	r3, sp
 800e524:	4622      	mov	r2, r4
 800e526:	a941      	add	r1, sp, #260	; 0x104
 800e528:	4630      	mov	r0, r6
 800e52a:	f000 f87d 	bl	800e628 <_scanf_i>
 800e52e:	e7ab      	b.n	800e488 <__ssvfiscanf_r+0x204>
 800e530:	0800e1cf 	.word	0x0800e1cf
 800e534:	0800e249 	.word	0x0800e249
 800e538:	0802721e 	.word	0x0802721e
 800e53c:	08027212 	.word	0x08027212
 800e540:	4b0b      	ldr	r3, [pc, #44]	; (800e570 <__ssvfiscanf_r+0x2ec>)
 800e542:	2b00      	cmp	r3, #0
 800e544:	f43f aec5 	beq.w	800e2d2 <__ssvfiscanf_r+0x4e>
 800e548:	466b      	mov	r3, sp
 800e54a:	4622      	mov	r2, r4
 800e54c:	a941      	add	r1, sp, #260	; 0x104
 800e54e:	4630      	mov	r0, r6
 800e550:	f3af 8000 	nop.w
 800e554:	e798      	b.n	800e488 <__ssvfiscanf_r+0x204>
 800e556:	89a3      	ldrh	r3, [r4, #12]
 800e558:	f013 0f40 	tst.w	r3, #64	; 0x40
 800e55c:	bf18      	it	ne
 800e55e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800e562:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800e566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56a:	9844      	ldr	r0, [sp, #272]	; 0x110
 800e56c:	e7f9      	b.n	800e562 <__ssvfiscanf_r+0x2de>
 800e56e:	bf00      	nop
 800e570:	00000000 	.word	0x00000000

0800e574 <_scanf_chars>:
 800e574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e578:	4615      	mov	r5, r2
 800e57a:	688a      	ldr	r2, [r1, #8]
 800e57c:	4680      	mov	r8, r0
 800e57e:	460c      	mov	r4, r1
 800e580:	b932      	cbnz	r2, 800e590 <_scanf_chars+0x1c>
 800e582:	698a      	ldr	r2, [r1, #24]
 800e584:	2a00      	cmp	r2, #0
 800e586:	bf0c      	ite	eq
 800e588:	2201      	moveq	r2, #1
 800e58a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800e58e:	608a      	str	r2, [r1, #8]
 800e590:	6822      	ldr	r2, [r4, #0]
 800e592:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e624 <_scanf_chars+0xb0>
 800e596:	06d1      	lsls	r1, r2, #27
 800e598:	bf5f      	itttt	pl
 800e59a:	681a      	ldrpl	r2, [r3, #0]
 800e59c:	1d11      	addpl	r1, r2, #4
 800e59e:	6019      	strpl	r1, [r3, #0]
 800e5a0:	6816      	ldrpl	r6, [r2, #0]
 800e5a2:	2700      	movs	r7, #0
 800e5a4:	69a0      	ldr	r0, [r4, #24]
 800e5a6:	b188      	cbz	r0, 800e5cc <_scanf_chars+0x58>
 800e5a8:	2801      	cmp	r0, #1
 800e5aa:	d107      	bne.n	800e5bc <_scanf_chars+0x48>
 800e5ac:	682a      	ldr	r2, [r5, #0]
 800e5ae:	7811      	ldrb	r1, [r2, #0]
 800e5b0:	6962      	ldr	r2, [r4, #20]
 800e5b2:	5c52      	ldrb	r2, [r2, r1]
 800e5b4:	b952      	cbnz	r2, 800e5cc <_scanf_chars+0x58>
 800e5b6:	2f00      	cmp	r7, #0
 800e5b8:	d031      	beq.n	800e61e <_scanf_chars+0xaa>
 800e5ba:	e022      	b.n	800e602 <_scanf_chars+0x8e>
 800e5bc:	2802      	cmp	r0, #2
 800e5be:	d120      	bne.n	800e602 <_scanf_chars+0x8e>
 800e5c0:	682b      	ldr	r3, [r5, #0]
 800e5c2:	781b      	ldrb	r3, [r3, #0]
 800e5c4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800e5c8:	071b      	lsls	r3, r3, #28
 800e5ca:	d41a      	bmi.n	800e602 <_scanf_chars+0x8e>
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	06da      	lsls	r2, r3, #27
 800e5d0:	bf5e      	ittt	pl
 800e5d2:	682b      	ldrpl	r3, [r5, #0]
 800e5d4:	781b      	ldrbpl	r3, [r3, #0]
 800e5d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e5da:	682a      	ldr	r2, [r5, #0]
 800e5dc:	686b      	ldr	r3, [r5, #4]
 800e5de:	3201      	adds	r2, #1
 800e5e0:	602a      	str	r2, [r5, #0]
 800e5e2:	68a2      	ldr	r2, [r4, #8]
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	3a01      	subs	r2, #1
 800e5e8:	606b      	str	r3, [r5, #4]
 800e5ea:	3701      	adds	r7, #1
 800e5ec:	60a2      	str	r2, [r4, #8]
 800e5ee:	b142      	cbz	r2, 800e602 <_scanf_chars+0x8e>
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	dcd7      	bgt.n	800e5a4 <_scanf_chars+0x30>
 800e5f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e5f8:	4629      	mov	r1, r5
 800e5fa:	4640      	mov	r0, r8
 800e5fc:	4798      	blx	r3
 800e5fe:	2800      	cmp	r0, #0
 800e600:	d0d0      	beq.n	800e5a4 <_scanf_chars+0x30>
 800e602:	6823      	ldr	r3, [r4, #0]
 800e604:	f013 0310 	ands.w	r3, r3, #16
 800e608:	d105      	bne.n	800e616 <_scanf_chars+0xa2>
 800e60a:	68e2      	ldr	r2, [r4, #12]
 800e60c:	3201      	adds	r2, #1
 800e60e:	60e2      	str	r2, [r4, #12]
 800e610:	69a2      	ldr	r2, [r4, #24]
 800e612:	b102      	cbz	r2, 800e616 <_scanf_chars+0xa2>
 800e614:	7033      	strb	r3, [r6, #0]
 800e616:	6923      	ldr	r3, [r4, #16]
 800e618:	443b      	add	r3, r7
 800e61a:	6123      	str	r3, [r4, #16]
 800e61c:	2000      	movs	r0, #0
 800e61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e622:	bf00      	nop
 800e624:	0802721e 	.word	0x0802721e

0800e628 <_scanf_i>:
 800e628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62c:	4698      	mov	r8, r3
 800e62e:	4b76      	ldr	r3, [pc, #472]	; (800e808 <_scanf_i+0x1e0>)
 800e630:	460c      	mov	r4, r1
 800e632:	4682      	mov	sl, r0
 800e634:	4616      	mov	r6, r2
 800e636:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e63a:	b087      	sub	sp, #28
 800e63c:	ab03      	add	r3, sp, #12
 800e63e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e642:	4b72      	ldr	r3, [pc, #456]	; (800e80c <_scanf_i+0x1e4>)
 800e644:	69a1      	ldr	r1, [r4, #24]
 800e646:	4a72      	ldr	r2, [pc, #456]	; (800e810 <_scanf_i+0x1e8>)
 800e648:	2903      	cmp	r1, #3
 800e64a:	bf18      	it	ne
 800e64c:	461a      	movne	r2, r3
 800e64e:	68a3      	ldr	r3, [r4, #8]
 800e650:	9201      	str	r2, [sp, #4]
 800e652:	1e5a      	subs	r2, r3, #1
 800e654:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e658:	bf88      	it	hi
 800e65a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e65e:	4627      	mov	r7, r4
 800e660:	bf82      	ittt	hi
 800e662:	eb03 0905 	addhi.w	r9, r3, r5
 800e666:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e66a:	60a3      	strhi	r3, [r4, #8]
 800e66c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e670:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e674:	bf98      	it	ls
 800e676:	f04f 0900 	movls.w	r9, #0
 800e67a:	6023      	str	r3, [r4, #0]
 800e67c:	463d      	mov	r5, r7
 800e67e:	f04f 0b00 	mov.w	fp, #0
 800e682:	6831      	ldr	r1, [r6, #0]
 800e684:	ab03      	add	r3, sp, #12
 800e686:	7809      	ldrb	r1, [r1, #0]
 800e688:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e68c:	2202      	movs	r2, #2
 800e68e:	f7f1 fe17 	bl	80002c0 <memchr>
 800e692:	b328      	cbz	r0, 800e6e0 <_scanf_i+0xb8>
 800e694:	f1bb 0f01 	cmp.w	fp, #1
 800e698:	d159      	bne.n	800e74e <_scanf_i+0x126>
 800e69a:	6862      	ldr	r2, [r4, #4]
 800e69c:	b92a      	cbnz	r2, 800e6aa <_scanf_i+0x82>
 800e69e:	6822      	ldr	r2, [r4, #0]
 800e6a0:	2308      	movs	r3, #8
 800e6a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e6a6:	6063      	str	r3, [r4, #4]
 800e6a8:	6022      	str	r2, [r4, #0]
 800e6aa:	6822      	ldr	r2, [r4, #0]
 800e6ac:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800e6b0:	6022      	str	r2, [r4, #0]
 800e6b2:	68a2      	ldr	r2, [r4, #8]
 800e6b4:	1e51      	subs	r1, r2, #1
 800e6b6:	60a1      	str	r1, [r4, #8]
 800e6b8:	b192      	cbz	r2, 800e6e0 <_scanf_i+0xb8>
 800e6ba:	6832      	ldr	r2, [r6, #0]
 800e6bc:	1c51      	adds	r1, r2, #1
 800e6be:	6031      	str	r1, [r6, #0]
 800e6c0:	7812      	ldrb	r2, [r2, #0]
 800e6c2:	f805 2b01 	strb.w	r2, [r5], #1
 800e6c6:	6872      	ldr	r2, [r6, #4]
 800e6c8:	3a01      	subs	r2, #1
 800e6ca:	2a00      	cmp	r2, #0
 800e6cc:	6072      	str	r2, [r6, #4]
 800e6ce:	dc07      	bgt.n	800e6e0 <_scanf_i+0xb8>
 800e6d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800e6d4:	4631      	mov	r1, r6
 800e6d6:	4650      	mov	r0, sl
 800e6d8:	4790      	blx	r2
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	f040 8085 	bne.w	800e7ea <_scanf_i+0x1c2>
 800e6e0:	f10b 0b01 	add.w	fp, fp, #1
 800e6e4:	f1bb 0f03 	cmp.w	fp, #3
 800e6e8:	d1cb      	bne.n	800e682 <_scanf_i+0x5a>
 800e6ea:	6863      	ldr	r3, [r4, #4]
 800e6ec:	b90b      	cbnz	r3, 800e6f2 <_scanf_i+0xca>
 800e6ee:	230a      	movs	r3, #10
 800e6f0:	6063      	str	r3, [r4, #4]
 800e6f2:	6863      	ldr	r3, [r4, #4]
 800e6f4:	4947      	ldr	r1, [pc, #284]	; (800e814 <_scanf_i+0x1ec>)
 800e6f6:	6960      	ldr	r0, [r4, #20]
 800e6f8:	1ac9      	subs	r1, r1, r3
 800e6fa:	f000 f89f 	bl	800e83c <__sccl>
 800e6fe:	f04f 0b00 	mov.w	fp, #0
 800e702:	68a3      	ldr	r3, [r4, #8]
 800e704:	6822      	ldr	r2, [r4, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d03d      	beq.n	800e786 <_scanf_i+0x15e>
 800e70a:	6831      	ldr	r1, [r6, #0]
 800e70c:	6960      	ldr	r0, [r4, #20]
 800e70e:	f891 c000 	ldrb.w	ip, [r1]
 800e712:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e716:	2800      	cmp	r0, #0
 800e718:	d035      	beq.n	800e786 <_scanf_i+0x15e>
 800e71a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800e71e:	d124      	bne.n	800e76a <_scanf_i+0x142>
 800e720:	0510      	lsls	r0, r2, #20
 800e722:	d522      	bpl.n	800e76a <_scanf_i+0x142>
 800e724:	f10b 0b01 	add.w	fp, fp, #1
 800e728:	f1b9 0f00 	cmp.w	r9, #0
 800e72c:	d003      	beq.n	800e736 <_scanf_i+0x10e>
 800e72e:	3301      	adds	r3, #1
 800e730:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800e734:	60a3      	str	r3, [r4, #8]
 800e736:	6873      	ldr	r3, [r6, #4]
 800e738:	3b01      	subs	r3, #1
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	6073      	str	r3, [r6, #4]
 800e73e:	dd1b      	ble.n	800e778 <_scanf_i+0x150>
 800e740:	6833      	ldr	r3, [r6, #0]
 800e742:	3301      	adds	r3, #1
 800e744:	6033      	str	r3, [r6, #0]
 800e746:	68a3      	ldr	r3, [r4, #8]
 800e748:	3b01      	subs	r3, #1
 800e74a:	60a3      	str	r3, [r4, #8]
 800e74c:	e7d9      	b.n	800e702 <_scanf_i+0xda>
 800e74e:	f1bb 0f02 	cmp.w	fp, #2
 800e752:	d1ae      	bne.n	800e6b2 <_scanf_i+0x8a>
 800e754:	6822      	ldr	r2, [r4, #0]
 800e756:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800e75a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800e75e:	d1bf      	bne.n	800e6e0 <_scanf_i+0xb8>
 800e760:	2310      	movs	r3, #16
 800e762:	6063      	str	r3, [r4, #4]
 800e764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e768:	e7a2      	b.n	800e6b0 <_scanf_i+0x88>
 800e76a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800e76e:	6022      	str	r2, [r4, #0]
 800e770:	780b      	ldrb	r3, [r1, #0]
 800e772:	f805 3b01 	strb.w	r3, [r5], #1
 800e776:	e7de      	b.n	800e736 <_scanf_i+0x10e>
 800e778:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e77c:	4631      	mov	r1, r6
 800e77e:	4650      	mov	r0, sl
 800e780:	4798      	blx	r3
 800e782:	2800      	cmp	r0, #0
 800e784:	d0df      	beq.n	800e746 <_scanf_i+0x11e>
 800e786:	6823      	ldr	r3, [r4, #0]
 800e788:	05db      	lsls	r3, r3, #23
 800e78a:	d50d      	bpl.n	800e7a8 <_scanf_i+0x180>
 800e78c:	42bd      	cmp	r5, r7
 800e78e:	d909      	bls.n	800e7a4 <_scanf_i+0x17c>
 800e790:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e794:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e798:	4632      	mov	r2, r6
 800e79a:	4650      	mov	r0, sl
 800e79c:	4798      	blx	r3
 800e79e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800e7a2:	464d      	mov	r5, r9
 800e7a4:	42bd      	cmp	r5, r7
 800e7a6:	d02d      	beq.n	800e804 <_scanf_i+0x1dc>
 800e7a8:	6822      	ldr	r2, [r4, #0]
 800e7aa:	f012 0210 	ands.w	r2, r2, #16
 800e7ae:	d113      	bne.n	800e7d8 <_scanf_i+0x1b0>
 800e7b0:	702a      	strb	r2, [r5, #0]
 800e7b2:	6863      	ldr	r3, [r4, #4]
 800e7b4:	9e01      	ldr	r6, [sp, #4]
 800e7b6:	4639      	mov	r1, r7
 800e7b8:	4650      	mov	r0, sl
 800e7ba:	47b0      	blx	r6
 800e7bc:	6821      	ldr	r1, [r4, #0]
 800e7be:	f8d8 3000 	ldr.w	r3, [r8]
 800e7c2:	f011 0f20 	tst.w	r1, #32
 800e7c6:	d013      	beq.n	800e7f0 <_scanf_i+0x1c8>
 800e7c8:	1d1a      	adds	r2, r3, #4
 800e7ca:	f8c8 2000 	str.w	r2, [r8]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	6018      	str	r0, [r3, #0]
 800e7d2:	68e3      	ldr	r3, [r4, #12]
 800e7d4:	3301      	adds	r3, #1
 800e7d6:	60e3      	str	r3, [r4, #12]
 800e7d8:	1bed      	subs	r5, r5, r7
 800e7da:	44ab      	add	fp, r5
 800e7dc:	6925      	ldr	r5, [r4, #16]
 800e7de:	445d      	add	r5, fp
 800e7e0:	6125      	str	r5, [r4, #16]
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	b007      	add	sp, #28
 800e7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7ea:	f04f 0b00 	mov.w	fp, #0
 800e7ee:	e7ca      	b.n	800e786 <_scanf_i+0x15e>
 800e7f0:	1d1a      	adds	r2, r3, #4
 800e7f2:	f8c8 2000 	str.w	r2, [r8]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f011 0f01 	tst.w	r1, #1
 800e7fc:	bf14      	ite	ne
 800e7fe:	8018      	strhne	r0, [r3, #0]
 800e800:	6018      	streq	r0, [r3, #0]
 800e802:	e7e6      	b.n	800e7d2 <_scanf_i+0x1aa>
 800e804:	2001      	movs	r0, #1
 800e806:	e7ed      	b.n	800e7e4 <_scanf_i+0x1bc>
 800e808:	0800ed80 	.word	0x0800ed80
 800e80c:	0800dca1 	.word	0x0800dca1
 800e810:	0800ea39 	.word	0x0800ea39
 800e814:	08027341 	.word	0x08027341

0800e818 <_read_r>:
 800e818:	b538      	push	{r3, r4, r5, lr}
 800e81a:	4d07      	ldr	r5, [pc, #28]	; (800e838 <_read_r+0x20>)
 800e81c:	4604      	mov	r4, r0
 800e81e:	4608      	mov	r0, r1
 800e820:	4611      	mov	r1, r2
 800e822:	2200      	movs	r2, #0
 800e824:	602a      	str	r2, [r5, #0]
 800e826:	461a      	mov	r2, r3
 800e828:	f000 f9fe 	bl	800ec28 <_read>
 800e82c:	1c43      	adds	r3, r0, #1
 800e82e:	d102      	bne.n	800e836 <_read_r+0x1e>
 800e830:	682b      	ldr	r3, [r5, #0]
 800e832:	b103      	cbz	r3, 800e836 <_read_r+0x1e>
 800e834:	6023      	str	r3, [r4, #0]
 800e836:	bd38      	pop	{r3, r4, r5, pc}
 800e838:	20000b94 	.word	0x20000b94

0800e83c <__sccl>:
 800e83c:	b570      	push	{r4, r5, r6, lr}
 800e83e:	780b      	ldrb	r3, [r1, #0]
 800e840:	4604      	mov	r4, r0
 800e842:	2b5e      	cmp	r3, #94	; 0x5e
 800e844:	bf0b      	itete	eq
 800e846:	784b      	ldrbeq	r3, [r1, #1]
 800e848:	1c48      	addne	r0, r1, #1
 800e84a:	1c88      	addeq	r0, r1, #2
 800e84c:	2200      	movne	r2, #0
 800e84e:	bf08      	it	eq
 800e850:	2201      	moveq	r2, #1
 800e852:	1e61      	subs	r1, r4, #1
 800e854:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800e858:	f801 2f01 	strb.w	r2, [r1, #1]!
 800e85c:	42a9      	cmp	r1, r5
 800e85e:	d1fb      	bne.n	800e858 <__sccl+0x1c>
 800e860:	b90b      	cbnz	r3, 800e866 <__sccl+0x2a>
 800e862:	3801      	subs	r0, #1
 800e864:	bd70      	pop	{r4, r5, r6, pc}
 800e866:	f082 0201 	eor.w	r2, r2, #1
 800e86a:	54e2      	strb	r2, [r4, r3]
 800e86c:	4605      	mov	r5, r0
 800e86e:	4628      	mov	r0, r5
 800e870:	f810 1b01 	ldrb.w	r1, [r0], #1
 800e874:	292d      	cmp	r1, #45	; 0x2d
 800e876:	d006      	beq.n	800e886 <__sccl+0x4a>
 800e878:	295d      	cmp	r1, #93	; 0x5d
 800e87a:	d0f3      	beq.n	800e864 <__sccl+0x28>
 800e87c:	b909      	cbnz	r1, 800e882 <__sccl+0x46>
 800e87e:	4628      	mov	r0, r5
 800e880:	e7f0      	b.n	800e864 <__sccl+0x28>
 800e882:	460b      	mov	r3, r1
 800e884:	e7f1      	b.n	800e86a <__sccl+0x2e>
 800e886:	786e      	ldrb	r6, [r5, #1]
 800e888:	2e5d      	cmp	r6, #93	; 0x5d
 800e88a:	d0fa      	beq.n	800e882 <__sccl+0x46>
 800e88c:	42b3      	cmp	r3, r6
 800e88e:	dcf8      	bgt.n	800e882 <__sccl+0x46>
 800e890:	3502      	adds	r5, #2
 800e892:	4619      	mov	r1, r3
 800e894:	3101      	adds	r1, #1
 800e896:	428e      	cmp	r6, r1
 800e898:	5462      	strb	r2, [r4, r1]
 800e89a:	dcfb      	bgt.n	800e894 <__sccl+0x58>
 800e89c:	1af1      	subs	r1, r6, r3
 800e89e:	3901      	subs	r1, #1
 800e8a0:	1c58      	adds	r0, r3, #1
 800e8a2:	42b3      	cmp	r3, r6
 800e8a4:	bfa8      	it	ge
 800e8a6:	2100      	movge	r1, #0
 800e8a8:	1843      	adds	r3, r0, r1
 800e8aa:	e7e0      	b.n	800e86e <__sccl+0x32>

0800e8ac <_raise_r>:
 800e8ac:	291f      	cmp	r1, #31
 800e8ae:	b538      	push	{r3, r4, r5, lr}
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	460d      	mov	r5, r1
 800e8b4:	d904      	bls.n	800e8c0 <_raise_r+0x14>
 800e8b6:	2316      	movs	r3, #22
 800e8b8:	6003      	str	r3, [r0, #0]
 800e8ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8be:	bd38      	pop	{r3, r4, r5, pc}
 800e8c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8c2:	b112      	cbz	r2, 800e8ca <_raise_r+0x1e>
 800e8c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8c8:	b94b      	cbnz	r3, 800e8de <_raise_r+0x32>
 800e8ca:	4620      	mov	r0, r4
 800e8cc:	f000 f830 	bl	800e930 <_getpid_r>
 800e8d0:	462a      	mov	r2, r5
 800e8d2:	4601      	mov	r1, r0
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8da:	f000 b817 	b.w	800e90c <_kill_r>
 800e8de:	2b01      	cmp	r3, #1
 800e8e0:	d00a      	beq.n	800e8f8 <_raise_r+0x4c>
 800e8e2:	1c59      	adds	r1, r3, #1
 800e8e4:	d103      	bne.n	800e8ee <_raise_r+0x42>
 800e8e6:	2316      	movs	r3, #22
 800e8e8:	6003      	str	r3, [r0, #0]
 800e8ea:	2001      	movs	r0, #1
 800e8ec:	e7e7      	b.n	800e8be <_raise_r+0x12>
 800e8ee:	2400      	movs	r4, #0
 800e8f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8f4:	4628      	mov	r0, r5
 800e8f6:	4798      	blx	r3
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e7e0      	b.n	800e8be <_raise_r+0x12>

0800e8fc <raise>:
 800e8fc:	4b02      	ldr	r3, [pc, #8]	; (800e908 <raise+0xc>)
 800e8fe:	4601      	mov	r1, r0
 800e900:	6818      	ldr	r0, [r3, #0]
 800e902:	f7ff bfd3 	b.w	800e8ac <_raise_r>
 800e906:	bf00      	nop
 800e908:	200000cc 	.word	0x200000cc

0800e90c <_kill_r>:
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	4d07      	ldr	r5, [pc, #28]	; (800e92c <_kill_r+0x20>)
 800e910:	2300      	movs	r3, #0
 800e912:	4604      	mov	r4, r0
 800e914:	4608      	mov	r0, r1
 800e916:	4611      	mov	r1, r2
 800e918:	602b      	str	r3, [r5, #0]
 800e91a:	f000 f975 	bl	800ec08 <_kill>
 800e91e:	1c43      	adds	r3, r0, #1
 800e920:	d102      	bne.n	800e928 <_kill_r+0x1c>
 800e922:	682b      	ldr	r3, [r5, #0]
 800e924:	b103      	cbz	r3, 800e928 <_kill_r+0x1c>
 800e926:	6023      	str	r3, [r4, #0]
 800e928:	bd38      	pop	{r3, r4, r5, pc}
 800e92a:	bf00      	nop
 800e92c:	20000b94 	.word	0x20000b94

0800e930 <_getpid_r>:
 800e930:	f000 b952 	b.w	800ebd8 <_getpid>

0800e934 <_strtol_l.constprop.0>:
 800e934:	2b01      	cmp	r3, #1
 800e936:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e93a:	d001      	beq.n	800e940 <_strtol_l.constprop.0+0xc>
 800e93c:	2b24      	cmp	r3, #36	; 0x24
 800e93e:	d906      	bls.n	800e94e <_strtol_l.constprop.0+0x1a>
 800e940:	f000 f8c4 	bl	800eacc <__errno>
 800e944:	2316      	movs	r3, #22
 800e946:	6003      	str	r3, [r0, #0]
 800e948:	2000      	movs	r0, #0
 800e94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e94e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ea34 <_strtol_l.constprop.0+0x100>
 800e952:	460d      	mov	r5, r1
 800e954:	462e      	mov	r6, r5
 800e956:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e95a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e95e:	f017 0708 	ands.w	r7, r7, #8
 800e962:	d1f7      	bne.n	800e954 <_strtol_l.constprop.0+0x20>
 800e964:	2c2d      	cmp	r4, #45	; 0x2d
 800e966:	d132      	bne.n	800e9ce <_strtol_l.constprop.0+0x9a>
 800e968:	782c      	ldrb	r4, [r5, #0]
 800e96a:	2701      	movs	r7, #1
 800e96c:	1cb5      	adds	r5, r6, #2
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d05b      	beq.n	800ea2a <_strtol_l.constprop.0+0xf6>
 800e972:	2b10      	cmp	r3, #16
 800e974:	d109      	bne.n	800e98a <_strtol_l.constprop.0+0x56>
 800e976:	2c30      	cmp	r4, #48	; 0x30
 800e978:	d107      	bne.n	800e98a <_strtol_l.constprop.0+0x56>
 800e97a:	782c      	ldrb	r4, [r5, #0]
 800e97c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e980:	2c58      	cmp	r4, #88	; 0x58
 800e982:	d14d      	bne.n	800ea20 <_strtol_l.constprop.0+0xec>
 800e984:	786c      	ldrb	r4, [r5, #1]
 800e986:	2310      	movs	r3, #16
 800e988:	3502      	adds	r5, #2
 800e98a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e98e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e992:	f04f 0c00 	mov.w	ip, #0
 800e996:	fbb8 f9f3 	udiv	r9, r8, r3
 800e99a:	4666      	mov	r6, ip
 800e99c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e9a0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e9a4:	f1be 0f09 	cmp.w	lr, #9
 800e9a8:	d816      	bhi.n	800e9d8 <_strtol_l.constprop.0+0xa4>
 800e9aa:	4674      	mov	r4, lr
 800e9ac:	42a3      	cmp	r3, r4
 800e9ae:	dd24      	ble.n	800e9fa <_strtol_l.constprop.0+0xc6>
 800e9b0:	f1bc 0f00 	cmp.w	ip, #0
 800e9b4:	db1e      	blt.n	800e9f4 <_strtol_l.constprop.0+0xc0>
 800e9b6:	45b1      	cmp	r9, r6
 800e9b8:	d31c      	bcc.n	800e9f4 <_strtol_l.constprop.0+0xc0>
 800e9ba:	d101      	bne.n	800e9c0 <_strtol_l.constprop.0+0x8c>
 800e9bc:	45a2      	cmp	sl, r4
 800e9be:	db19      	blt.n	800e9f4 <_strtol_l.constprop.0+0xc0>
 800e9c0:	fb06 4603 	mla	r6, r6, r3, r4
 800e9c4:	f04f 0c01 	mov.w	ip, #1
 800e9c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e9cc:	e7e8      	b.n	800e9a0 <_strtol_l.constprop.0+0x6c>
 800e9ce:	2c2b      	cmp	r4, #43	; 0x2b
 800e9d0:	bf04      	itt	eq
 800e9d2:	782c      	ldrbeq	r4, [r5, #0]
 800e9d4:	1cb5      	addeq	r5, r6, #2
 800e9d6:	e7ca      	b.n	800e96e <_strtol_l.constprop.0+0x3a>
 800e9d8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e9dc:	f1be 0f19 	cmp.w	lr, #25
 800e9e0:	d801      	bhi.n	800e9e6 <_strtol_l.constprop.0+0xb2>
 800e9e2:	3c37      	subs	r4, #55	; 0x37
 800e9e4:	e7e2      	b.n	800e9ac <_strtol_l.constprop.0+0x78>
 800e9e6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e9ea:	f1be 0f19 	cmp.w	lr, #25
 800e9ee:	d804      	bhi.n	800e9fa <_strtol_l.constprop.0+0xc6>
 800e9f0:	3c57      	subs	r4, #87	; 0x57
 800e9f2:	e7db      	b.n	800e9ac <_strtol_l.constprop.0+0x78>
 800e9f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e9f8:	e7e6      	b.n	800e9c8 <_strtol_l.constprop.0+0x94>
 800e9fa:	f1bc 0f00 	cmp.w	ip, #0
 800e9fe:	da05      	bge.n	800ea0c <_strtol_l.constprop.0+0xd8>
 800ea00:	2322      	movs	r3, #34	; 0x22
 800ea02:	6003      	str	r3, [r0, #0]
 800ea04:	4646      	mov	r6, r8
 800ea06:	b942      	cbnz	r2, 800ea1a <_strtol_l.constprop.0+0xe6>
 800ea08:	4630      	mov	r0, r6
 800ea0a:	e79e      	b.n	800e94a <_strtol_l.constprop.0+0x16>
 800ea0c:	b107      	cbz	r7, 800ea10 <_strtol_l.constprop.0+0xdc>
 800ea0e:	4276      	negs	r6, r6
 800ea10:	2a00      	cmp	r2, #0
 800ea12:	d0f9      	beq.n	800ea08 <_strtol_l.constprop.0+0xd4>
 800ea14:	f1bc 0f00 	cmp.w	ip, #0
 800ea18:	d000      	beq.n	800ea1c <_strtol_l.constprop.0+0xe8>
 800ea1a:	1e69      	subs	r1, r5, #1
 800ea1c:	6011      	str	r1, [r2, #0]
 800ea1e:	e7f3      	b.n	800ea08 <_strtol_l.constprop.0+0xd4>
 800ea20:	2430      	movs	r4, #48	; 0x30
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d1b1      	bne.n	800e98a <_strtol_l.constprop.0+0x56>
 800ea26:	2308      	movs	r3, #8
 800ea28:	e7af      	b.n	800e98a <_strtol_l.constprop.0+0x56>
 800ea2a:	2c30      	cmp	r4, #48	; 0x30
 800ea2c:	d0a5      	beq.n	800e97a <_strtol_l.constprop.0+0x46>
 800ea2e:	230a      	movs	r3, #10
 800ea30:	e7ab      	b.n	800e98a <_strtol_l.constprop.0+0x56>
 800ea32:	bf00      	nop
 800ea34:	0802721e 	.word	0x0802721e

0800ea38 <_strtol_r>:
 800ea38:	f7ff bf7c 	b.w	800e934 <_strtol_l.constprop.0>

0800ea3c <__submore>:
 800ea3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea40:	460c      	mov	r4, r1
 800ea42:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800ea44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea48:	4299      	cmp	r1, r3
 800ea4a:	d11d      	bne.n	800ea88 <__submore+0x4c>
 800ea4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ea50:	f7fc f912 	bl	800ac78 <_malloc_r>
 800ea54:	b918      	cbnz	r0, 800ea5e <__submore+0x22>
 800ea56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea62:	63a3      	str	r3, [r4, #56]	; 0x38
 800ea64:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800ea68:	6360      	str	r0, [r4, #52]	; 0x34
 800ea6a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800ea6e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ea72:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800ea76:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ea7a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800ea7e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ea82:	6020      	str	r0, [r4, #0]
 800ea84:	2000      	movs	r0, #0
 800ea86:	e7e8      	b.n	800ea5a <__submore+0x1e>
 800ea88:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800ea8a:	0077      	lsls	r7, r6, #1
 800ea8c:	463a      	mov	r2, r7
 800ea8e:	f7ff fb6f 	bl	800e170 <_realloc_r>
 800ea92:	4605      	mov	r5, r0
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d0de      	beq.n	800ea56 <__submore+0x1a>
 800ea98:	eb00 0806 	add.w	r8, r0, r6
 800ea9c:	4601      	mov	r1, r0
 800ea9e:	4632      	mov	r2, r6
 800eaa0:	4640      	mov	r0, r8
 800eaa2:	f7fe f992 	bl	800cdca <memcpy>
 800eaa6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800eaaa:	f8c4 8000 	str.w	r8, [r4]
 800eaae:	e7e9      	b.n	800ea84 <__submore+0x48>

0800eab0 <__ascii_wctomb>:
 800eab0:	b149      	cbz	r1, 800eac6 <__ascii_wctomb+0x16>
 800eab2:	2aff      	cmp	r2, #255	; 0xff
 800eab4:	bf85      	ittet	hi
 800eab6:	238a      	movhi	r3, #138	; 0x8a
 800eab8:	6003      	strhi	r3, [r0, #0]
 800eaba:	700a      	strbls	r2, [r1, #0]
 800eabc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800eac0:	bf98      	it	ls
 800eac2:	2001      	movls	r0, #1
 800eac4:	4770      	bx	lr
 800eac6:	4608      	mov	r0, r1
 800eac8:	4770      	bx	lr
	...

0800eacc <__errno>:
 800eacc:	4b01      	ldr	r3, [pc, #4]	; (800ead4 <__errno+0x8>)
 800eace:	6818      	ldr	r0, [r3, #0]
 800ead0:	4770      	bx	lr
 800ead2:	bf00      	nop
 800ead4:	200000cc 	.word	0x200000cc

0800ead8 <_fstat_r>:
 800ead8:	b538      	push	{r3, r4, r5, lr}
 800eada:	4d07      	ldr	r5, [pc, #28]	; (800eaf8 <_fstat_r+0x20>)
 800eadc:	2300      	movs	r3, #0
 800eade:	4604      	mov	r4, r0
 800eae0:	4608      	mov	r0, r1
 800eae2:	4611      	mov	r1, r2
 800eae4:	602b      	str	r3, [r5, #0]
 800eae6:	f000 f86f 	bl	800ebc8 <_fstat>
 800eaea:	1c43      	adds	r3, r0, #1
 800eaec:	d102      	bne.n	800eaf4 <_fstat_r+0x1c>
 800eaee:	682b      	ldr	r3, [r5, #0]
 800eaf0:	b103      	cbz	r3, 800eaf4 <_fstat_r+0x1c>
 800eaf2:	6023      	str	r3, [r4, #0]
 800eaf4:	bd38      	pop	{r3, r4, r5, pc}
 800eaf6:	bf00      	nop
 800eaf8:	20000b94 	.word	0x20000b94

0800eafc <_isatty_r>:
 800eafc:	b538      	push	{r3, r4, r5, lr}
 800eafe:	4d06      	ldr	r5, [pc, #24]	; (800eb18 <_isatty_r+0x1c>)
 800eb00:	2300      	movs	r3, #0
 800eb02:	4604      	mov	r4, r0
 800eb04:	4608      	mov	r0, r1
 800eb06:	602b      	str	r3, [r5, #0]
 800eb08:	f000 f876 	bl	800ebf8 <_isatty>
 800eb0c:	1c43      	adds	r3, r0, #1
 800eb0e:	d102      	bne.n	800eb16 <_isatty_r+0x1a>
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	b103      	cbz	r3, 800eb16 <_isatty_r+0x1a>
 800eb14:	6023      	str	r3, [r4, #0]
 800eb16:	bd38      	pop	{r3, r4, r5, pc}
 800eb18:	20000b94 	.word	0x20000b94

0800eb1c <_malloc_usable_size_r>:
 800eb1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb20:	1f18      	subs	r0, r3, #4
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	bfbc      	itt	lt
 800eb26:	580b      	ldrlt	r3, [r1, r0]
 800eb28:	18c0      	addlt	r0, r0, r3
 800eb2a:	4770      	bx	lr

0800eb2c <roundf>:
 800eb2c:	ee10 0a10 	vmov	r0, s0
 800eb30:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800eb34:	3a7f      	subs	r2, #127	; 0x7f
 800eb36:	2a16      	cmp	r2, #22
 800eb38:	dc15      	bgt.n	800eb66 <roundf+0x3a>
 800eb3a:	2a00      	cmp	r2, #0
 800eb3c:	da08      	bge.n	800eb50 <roundf+0x24>
 800eb3e:	3201      	adds	r2, #1
 800eb40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800eb44:	d101      	bne.n	800eb4a <roundf+0x1e>
 800eb46:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800eb4a:	ee00 3a10 	vmov	s0, r3
 800eb4e:	4770      	bx	lr
 800eb50:	4907      	ldr	r1, [pc, #28]	; (800eb70 <roundf+0x44>)
 800eb52:	4111      	asrs	r1, r2
 800eb54:	4208      	tst	r0, r1
 800eb56:	d0fa      	beq.n	800eb4e <roundf+0x22>
 800eb58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800eb5c:	4113      	asrs	r3, r2
 800eb5e:	4403      	add	r3, r0
 800eb60:	ea23 0301 	bic.w	r3, r3, r1
 800eb64:	e7f1      	b.n	800eb4a <roundf+0x1e>
 800eb66:	2a80      	cmp	r2, #128	; 0x80
 800eb68:	d1f1      	bne.n	800eb4e <roundf+0x22>
 800eb6a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800eb6e:	4770      	bx	lr
 800eb70:	007fffff 	.word	0x007fffff

0800eb74 <sqrtf>:
 800eb74:	b508      	push	{r3, lr}
 800eb76:	ed2d 8b02 	vpush	{d8}
 800eb7a:	eeb0 8a40 	vmov.f32	s16, s0
 800eb7e:	f000 f817 	bl	800ebb0 <__ieee754_sqrtf>
 800eb82:	eeb4 8a48 	vcmp.f32	s16, s16
 800eb86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb8a:	d60c      	bvs.n	800eba6 <sqrtf+0x32>
 800eb8c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ebac <sqrtf+0x38>
 800eb90:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800eb94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb98:	d505      	bpl.n	800eba6 <sqrtf+0x32>
 800eb9a:	f7ff ff97 	bl	800eacc <__errno>
 800eb9e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800eba2:	2321      	movs	r3, #33	; 0x21
 800eba4:	6003      	str	r3, [r0, #0]
 800eba6:	ecbd 8b02 	vpop	{d8}
 800ebaa:	bd08      	pop	{r3, pc}
 800ebac:	00000000 	.word	0x00000000

0800ebb0 <__ieee754_sqrtf>:
 800ebb0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ebb4:	4770      	bx	lr
	...

0800ebb8 <_close>:
 800ebb8:	4b02      	ldr	r3, [pc, #8]	; (800ebc4 <_close+0xc>)
 800ebba:	2258      	movs	r2, #88	; 0x58
 800ebbc:	601a      	str	r2, [r3, #0]
 800ebbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebc2:	4770      	bx	lr
 800ebc4:	20000b94 	.word	0x20000b94

0800ebc8 <_fstat>:
 800ebc8:	4b02      	ldr	r3, [pc, #8]	; (800ebd4 <_fstat+0xc>)
 800ebca:	2258      	movs	r2, #88	; 0x58
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebd2:	4770      	bx	lr
 800ebd4:	20000b94 	.word	0x20000b94

0800ebd8 <_getpid>:
 800ebd8:	4b02      	ldr	r3, [pc, #8]	; (800ebe4 <_getpid+0xc>)
 800ebda:	2258      	movs	r2, #88	; 0x58
 800ebdc:	601a      	str	r2, [r3, #0]
 800ebde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebe2:	4770      	bx	lr
 800ebe4:	20000b94 	.word	0x20000b94

0800ebe8 <_gettimeofday>:
 800ebe8:	4b02      	ldr	r3, [pc, #8]	; (800ebf4 <_gettimeofday+0xc>)
 800ebea:	2258      	movs	r2, #88	; 0x58
 800ebec:	601a      	str	r2, [r3, #0]
 800ebee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebf2:	4770      	bx	lr
 800ebf4:	20000b94 	.word	0x20000b94

0800ebf8 <_isatty>:
 800ebf8:	4b02      	ldr	r3, [pc, #8]	; (800ec04 <_isatty+0xc>)
 800ebfa:	2258      	movs	r2, #88	; 0x58
 800ebfc:	601a      	str	r2, [r3, #0]
 800ebfe:	2000      	movs	r0, #0
 800ec00:	4770      	bx	lr
 800ec02:	bf00      	nop
 800ec04:	20000b94 	.word	0x20000b94

0800ec08 <_kill>:
 800ec08:	4b02      	ldr	r3, [pc, #8]	; (800ec14 <_kill+0xc>)
 800ec0a:	2258      	movs	r2, #88	; 0x58
 800ec0c:	601a      	str	r2, [r3, #0]
 800ec0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec12:	4770      	bx	lr
 800ec14:	20000b94 	.word	0x20000b94

0800ec18 <_lseek>:
 800ec18:	4b02      	ldr	r3, [pc, #8]	; (800ec24 <_lseek+0xc>)
 800ec1a:	2258      	movs	r2, #88	; 0x58
 800ec1c:	601a      	str	r2, [r3, #0]
 800ec1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec22:	4770      	bx	lr
 800ec24:	20000b94 	.word	0x20000b94

0800ec28 <_read>:
 800ec28:	4b02      	ldr	r3, [pc, #8]	; (800ec34 <_read+0xc>)
 800ec2a:	2258      	movs	r2, #88	; 0x58
 800ec2c:	601a      	str	r2, [r3, #0]
 800ec2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec32:	4770      	bx	lr
 800ec34:	20000b94 	.word	0x20000b94

0800ec38 <_sbrk>:
 800ec38:	4a04      	ldr	r2, [pc, #16]	; (800ec4c <_sbrk+0x14>)
 800ec3a:	6811      	ldr	r1, [r2, #0]
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	b909      	cbnz	r1, 800ec44 <_sbrk+0xc>
 800ec40:	4903      	ldr	r1, [pc, #12]	; (800ec50 <_sbrk+0x18>)
 800ec42:	6011      	str	r1, [r2, #0]
 800ec44:	6810      	ldr	r0, [r2, #0]
 800ec46:	4403      	add	r3, r0
 800ec48:	6013      	str	r3, [r2, #0]
 800ec4a:	4770      	bx	lr
 800ec4c:	20000b9c 	.word	0x20000b9c
 800ec50:	20000ba0 	.word	0x20000ba0

0800ec54 <_write>:
 800ec54:	4b02      	ldr	r3, [pc, #8]	; (800ec60 <_write+0xc>)
 800ec56:	2258      	movs	r2, #88	; 0x58
 800ec58:	601a      	str	r2, [r3, #0]
 800ec5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ec5e:	4770      	bx	lr
 800ec60:	20000b94 	.word	0x20000b94

0800ec64 <_exit>:
 800ec64:	e7fe      	b.n	800ec64 <_exit>
	...

0800ec68 <_init>:
 800ec68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec6a:	bf00      	nop
 800ec6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec6e:	bc08      	pop	{r3}
 800ec70:	469e      	mov	lr, r3
 800ec72:	4770      	bx	lr

0800ec74 <_fini>:
 800ec74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec76:	bf00      	nop
 800ec78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec7a:	bc08      	pop	{r3}
 800ec7c:	469e      	mov	lr, r3
 800ec7e:	4770      	bx	lr
