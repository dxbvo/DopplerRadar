
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008578  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c10  08008728  08008728  00018728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b338  0800b338  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b338  0800b338  0001b338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b340  0800b340  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b340  0800b340  0001b340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b344  0800b344  0001b344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800b348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ec  200001f8  0800b540  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015e4  0800b540  000215e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001491a  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032af  00000000  00000000  00034b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00037df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  000391d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a2a  00000000  00000000  0003a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170e8  00000000  00000000  0003ee7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df1f0  00000000  00000000  00055f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135152  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d0  00000000  00000000  001351a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008710 	.word	0x08008710

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	08008710 	.word	0x08008710

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000594:	b598      	push	{r3, r4, r7, lr}
 8000596:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8000598:	f003 fa84 	bl	8003aa4 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 800059c:	f000 f88e 	bl	80006bc <SystemClock_Config>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 80005a0:	f002 f9d6 	bl	8002950 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80005a4:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80005a8:	2001      	movs	r0, #1
 80005aa:	f002 fa5f 	bl	8002a6c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80005ae:	2001      	movs	r0, #1
 80005b0:	f002 fac0 	bl	8002b34 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80005b4:	f002 fd8a 	bl	80030cc <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005bc:	f002 fb16 	bl	8002bec <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80005c0:	f002 fa3c 	bl	8002a3c <BSP_LCD_GetXSize>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b29c      	uxth	r4, r3
 80005c8:	f002 fa44 	bl	8002a54 <BSP_LCD_GetYSize>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29b      	uxth	r3, r3
 80005d0:	4619      	mov	r1, r3
 80005d2:	4620      	mov	r0, r4
 80005d4:	f003 f962 	bl	800389c <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 80005d8:	f001 f870 	bl	80016bc <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 80005dc:	f001 f88e 	bl	80016fc <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 80005e0:	2000      	movs	r0, #0
 80005e2:	f001 fd9d 	bl	8002120 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 80005e6:	2001      	movs	r0, #1
 80005e8:	f001 fd9a 	bl	8002120 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 80005ec:	f000 fe8c 	bl	8001308 <MENU_draw>
	MENU_hint();						// Show hint at startup
 80005f0:	f000 ff38 	bl	8001464 <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 80005f4:	f000 f8e0 	bl	80007b8 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 80005f8:	f000 f9c8 	bl	800098c <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 80005fc:	f000 fa86 	bl	8000b0c <MEAS_timer_init>

	// FFT
	orderSamples();
 8000600:	f000 f99a 	bl	8000938 <orderSamples>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8000604:	2000      	movs	r0, #0
 8000606:	f001 fe13 	bl	8002230 <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <main+0x120>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d004      	beq.n	800061c <main+0x88>
			MEAS_data_ready = false;
 8000612:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <main+0x120>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
			MEAS_show_data();
 8000618:	f000 fd86 	bl	8001128 <MEAS_show_data>
		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 800061c:	f001 f8a0 	bl	8001760 <PB_pressed>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d01d      	beq.n	8000662 <main+0xce>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 8000626:	4b24      	ldr	r3, [pc, #144]	; (80006b8 <main+0x124>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	bf14      	ite	ne
 800062e:	2301      	movne	r3, #1
 8000630:	2300      	moveq	r3, #0
 8000632:	b2db      	uxtb	r3, r3
 8000634:	f083 0301 	eor.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	b2da      	uxtb	r2, r3
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <main+0x124>)
 8000642:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <main+0x124>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d005      	beq.n	8000658 <main+0xc4>
				DAC_init();
 800064c:	f000 fa02 	bl	8000a54 <DAC_init>
				BSP_LED_On(LED4);
 8000650:	2001      	movs	r0, #1
 8000652:	f001 fdb9 	bl	80021c8 <BSP_LED_On>
 8000656:	e004      	b.n	8000662 <main+0xce>
			} else {
				DAC_reset();
 8000658:	f000 f9e6 	bl	8000a28 <DAC_reset>
				BSP_LED_Off(LED4);
 800065c:	2001      	movs	r0, #1
 800065e:	f001 fdcd 	bl	80021fc <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8000662:	f000 ff5f 	bl	8001524 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 8000666:	f000 ff4b 	bl	8001500 <MENU_get_transition>
 800066a:	4603      	mov	r3, r0
 800066c:	2b06      	cmp	r3, #6
 800066e:	d81b      	bhi.n	80006a8 <main+0x114>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <main+0xe4>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	080006a9 	.word	0x080006a9
 800067c:	080006a9 	.word	0x080006a9
 8000680:	080006a9 	.word	0x080006a9
 8000684:	08000695 	.word	0x08000695
 8000688:	0800069f 	.word	0x0800069f
 800068c:	080006a9 	.word	0x080006a9
 8000690:	080006a9 	.word	0x080006a9
		case MENU_ONE:
			break;
		case MENU_TWO:
			break;
		case MENU_THREE:
			ADC1_IN13_ADC2_IN11_dual_init();
 8000694:	f000 fa70 	bl	8000b78 <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN5_dual_start();
 8000698:	f000 fb18 	bl	8000ccc <ADC1_IN13_ADC2_IN5_dual_start>
			break;
 800069c:	e005      	b.n	80006aa <main+0x116>
		case MENU_FOUR:
			ADC2_IN13_IN5_scan_init();
 800069e:	f000 fb3f 	bl	8000d20 <ADC2_IN13_IN5_scan_init>
			ADC2_IN13_IN5_scan_start();
 80006a2:	f000 fbdd 	bl	8000e60 <ADC2_IN13_IN5_scan_start>
			break;
 80006a6:	e000      	b.n	80006aa <main+0x116>
		case MENU_FIVE:
			break;
		default:						// Should never occur
			break;
 80006a8:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 80006aa:	20c8      	movs	r0, #200	; 0xc8
 80006ac:	f003 fa74 	bl	8003b98 <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80006b0:	e7a8      	b.n	8000604 <main+0x70>
 80006b2:	bf00      	nop
 80006b4:	20000214 	.word	0x20000214
 80006b8:	20000215 	.word	0x20000215

080006bc <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0a0      	sub	sp, #128	; 0x80
 80006c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80006c6:	2230      	movs	r2, #48	; 0x30
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f007 fb88 	bl	8007de0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2230      	movs	r2, #48	; 0x30
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f007 fb79 	bl	8007de0 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <SystemClock_Config+0xf0>)
 80006f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f6:	4a2d      	ldr	r2, [pc, #180]	; (80007ac <SystemClock_Config+0xf0>)
 80006f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fc:	6413      	str	r3, [r2, #64]	; 0x40
 80006fe:	4b2b      	ldr	r3, [pc, #172]	; (80007ac <SystemClock_Config+0xf0>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xf4>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a27      	ldr	r2, [pc, #156]	; (80007b0 <SystemClock_Config+0xf4>)
 8000714:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	4b25      	ldr	r3, [pc, #148]	; (80007b0 <SystemClock_Config+0xf4>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000726:	2301      	movs	r3, #1
 8000728:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800072a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072e:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000734:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000738:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800073a:	2308      	movs	r3, #8
 800073c:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 800073e:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000742:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000744:	2302      	movs	r3, #2
 8000746:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000748:	2307      	movs	r3, #7
 800074a:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800074c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000750:	4618      	mov	r0, r3
 8000752:	f005 fc73 	bl	800603c <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000762:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000766:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800076e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000772:	2105      	movs	r1, #5
 8000774:	4618      	mov	r0, r3
 8000776:	f005 fecf 	bl	8006518 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800077a:	2308      	movs	r3, #8
 800077c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800077e:	23c0      	movs	r3, #192	; 0xc0
 8000780:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000782:	2304      	movs	r3, #4
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800078a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4618      	mov	r0, r3
 8000792:	f006 f8cd 	bl	8006930 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000796:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <SystemClock_Config+0xf8>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <SystemClock_Config+0xf8>)
 800079c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a0:	6053      	str	r3, [r2, #4]
}
 80007a2:	bf00      	nop
 80007a4:	3780      	adds	r7, #128	; 0x80
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000
 80007b4:	40012300 	.word	0x40012300

080007b8 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b2a      	ldr	r3, [pc, #168]	; (800086c <gyro_disable+0xb4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a29      	ldr	r2, [pc, #164]	; (800086c <gyro_disable+0xb4>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b27      	ldr	r3, [pc, #156]	; (800086c <gyro_disable+0xb4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <gyro_disable+0xb8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a24      	ldr	r2, [pc, #144]	; (8000870 <gyro_disable+0xb8>)
 80007e0:	f023 030c 	bic.w	r3, r3, #12
 80007e4:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 80007e6:	4b22      	ldr	r3, [pc, #136]	; (8000870 <gyro_disable+0xb8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a21      	ldr	r2, [pc, #132]	; (8000870 <gyro_disable+0xb8>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <gyro_disable+0xb8>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <gyro_disable+0xb8>)
 80007f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007fc:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 80007fe:	200a      	movs	r0, #10
 8000800:	f003 f9ca 	bl	8003b98 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <gyro_disable+0xb8>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a19      	ldr	r2, [pc, #100]	; (8000870 <gyro_disable+0xb8>)
 800080a:	f043 030c 	orr.w	r3, r3, #12
 800080e:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000810:	2300      	movs	r3, #0
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <gyro_disable+0xb4>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	4a14      	ldr	r2, [pc, #80]	; (800086c <gyro_disable+0xb4>)
 800081a:	f043 0320 	orr.w	r3, r3, #32
 800081e:	6313      	str	r3, [r2, #48]	; 0x30
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <gyro_disable+0xb4>)
 8000822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000824:	f003 0320 	and.w	r3, r3, #32
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 800082c:	4b11      	ldr	r3, [pc, #68]	; (8000874 <gyro_disable+0xbc>)
 800082e:	689b      	ldr	r3, [r3, #8]
 8000830:	4a10      	ldr	r2, [pc, #64]	; (8000874 <gyro_disable+0xbc>)
 8000832:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000836:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <gyro_disable+0xbc>)
 800083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <gyro_disable+0xbc>)
 800083e:	f023 030f 	bic.w	r3, r3, #15
 8000842:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <gyro_disable+0xbc>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <gyro_disable+0xbc>)
 800084a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800084e:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8000850:	200a      	movs	r0, #10
 8000852:	f003 f9a1 	bl	8003b98 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 8000856:	4b07      	ldr	r3, [pc, #28]	; (8000874 <gyro_disable+0xbc>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a06      	ldr	r2, [pc, #24]	; (8000874 <gyro_disable+0xbc>)
 800085c:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000860:	6013      	str	r3, [r2, #0]
}
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40020800 	.word	0x40020800
 8000874:	40021400 	.word	0x40021400

08000878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	4603      	mov	r3, r0
 8000880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000886:	2b00      	cmp	r3, #0
 8000888:	db0b      	blt.n	80008a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 021f 	and.w	r2, r3, #31
 8000890:	4907      	ldr	r1, [pc, #28]	; (80008b0 <__NVIC_EnableIRQ+0x38>)
 8000892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000896:	095b      	lsrs	r3, r3, #5
 8000898:	2001      	movs	r0, #1
 800089a:	fa00 f202 	lsl.w	r2, r0, r2
 800089e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008a2:	bf00      	nop
 80008a4:	370c      	adds	r7, #12
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000e100 	.word	0xe000e100

080008b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	db12      	blt.n	80008ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 021f 	and.w	r2, r3, #31
 80008cc:	490a      	ldr	r1, [pc, #40]	; (80008f8 <__NVIC_DisableIRQ+0x44>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f202 	lsl.w	r2, r0, r2
 80008da:	3320      	adds	r3, #32
 80008dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008e0:	f3bf 8f4f 	dsb	sy
}
 80008e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008e6:	f3bf 8f6f 	isb	sy
}
 80008ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000e100 	.word	0xe000e100

080008fc <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0c      	blt.n	8000928 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4907      	ldr	r1, [pc, #28]	; (8000934 <__NVIC_ClearPendingIRQ+0x38>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	3360      	adds	r3, #96	; 0x60
 8000924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100

08000938 <orderSamples>:

/******************************************************************************
 * Functions
 *****************************************************************************/

void orderSamples(void) {
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0

	for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	e015      	b.n	8000970 <orderSamples+0x38>
		FFTReadySamples[2*i] = ADC_samples[i];
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	490e      	ldr	r1, [pc, #56]	; (8000984 <orderSamples+0x4c>)
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000950:	490d      	ldr	r1, [pc, #52]	; (8000988 <orderSamples+0x50>)
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		FFTReadySamples[2*i+1] = ADC_samples[i];
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	3301      	adds	r3, #1
 800095c:	4909      	ldr	r1, [pc, #36]	; (8000984 <orderSamples+0x4c>)
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000964:	4908      	ldr	r1, [pc, #32]	; (8000988 <orderSamples+0x50>)
 8000966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++) {
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3301      	adds	r3, #1
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2b3b      	cmp	r3, #59	; 0x3b
 8000974:	d9e6      	bls.n	8000944 <orderSamples+0xc>
	}
}
 8000976:	bf00      	nop
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	2000021c 	.word	0x2000021c
 8000988:	20000400 	.word	0x20000400

0800098c <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <MEAS_GPIO_analog_init+0x8c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a1f      	ldr	r2, [pc, #124]	; (8000a18 <MEAS_GPIO_analog_init+0x8c>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MEAS_GPIO_analog_init+0x8c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0320 	and.w	r3, r3, #32
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MEAS_GPIO_analog_init+0x90>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a1a      	ldr	r2, [pc, #104]	; (8000a1c <MEAS_GPIO_analog_init+0x90>)
 80009b4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80009b8:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <MEAS_GPIO_analog_init+0x8c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <MEAS_GPIO_analog_init+0x8c>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MEAS_GPIO_analog_init+0x8c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MEAS_GPIO_analog_init+0x94>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <MEAS_GPIO_analog_init+0x94>)
 80009dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80009e0:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MEAS_GPIO_analog_init+0x8c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <MEAS_GPIO_analog_init+0x8c>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MEAS_GPIO_analog_init+0x8c>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MEAS_GPIO_analog_init+0x98>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <MEAS_GPIO_analog_init+0x98>)
 8000a04:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000a08:	6013      	str	r3, [r2, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40021400 	.word	0x40021400
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020000 	.word	0x40020000

08000a28 <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <DAC_reset+0x28>)
 8000a2e:	6a1b      	ldr	r3, [r3, #32]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <DAC_reset+0x28>)
 8000a32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a36:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 8000a38:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <DAC_reset+0x28>)
 8000a3a:	6a1b      	ldr	r3, [r3, #32]
 8000a3c:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <DAC_reset+0x28>)
 8000a3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000a42:	6213      	str	r3, [r2, #32]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <DAC_init+0x3c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <DAC_init+0x3c>)
 8000a64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <DAC_init+0x3c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8000a76:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <DAC_init+0x40>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a06      	ldr	r2, [pc, #24]	; (8000a94 <DAC_init+0x40>)
 8000a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a80:	6013      	str	r3, [r2, #0]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007400 	.word	0x40007400

08000a98 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <DAC_increment+0x30>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3314      	adds	r3, #20
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <DAC_increment+0x30>)
 8000aa4:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8000aa6:	4b08      	ldr	r3, [pc, #32]	; (8000ac8 <DAC_increment+0x30>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000aae:	d302      	bcc.n	8000ab6 <DAC_increment+0x1e>
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <DAC_increment+0x30>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <DAC_increment+0x34>)
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <DAC_increment+0x30>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6153      	str	r3, [r2, #20]
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	200003fc 	.word	0x200003fc
 8000acc:	40007400 	.word	0x40007400

08000ad0 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <ADC_reset+0x38>)
 8000ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <ADC_reset+0x38>)
 8000ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ade:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <ADC_reset+0x38>)
 8000ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae4:	4a08      	ldr	r2, [pc, #32]	; (8000b08 <ADC_reset+0x38>)
 8000ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aea:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8000aec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800

08000b0c <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MEAS_timer_init+0x68>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a16      	ldr	r2, [pc, #88]	; (8000b74 <MEAS_timer_init+0x68>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MEAS_timer_init+0x68>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 8000b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b32:	f243 62af 	movw	r2, #13999	; 0x36af
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8000b38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b3c:	2209      	movs	r2, #9
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8000b40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b4a:	f043 0320 	orr.w	r3, r3, #32
 8000b4e:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8000b50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8000b60:	201c      	movs	r0, #28
 8000b62:	f7ff fecb 	bl	80008fc <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8000b66:	201c      	movs	r0, #28
 8000b68:	f7ff fe86 	bl	8000878 <__NVIC_EnableIRQ>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800

08000b78 <ADC1_IN13_ADC2_IN11_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN11 = GPIO PC1
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_init(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// Only 1 input is converted
 8000b7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ca8 <ADC1_IN13_ADC2_IN11_dual_init+0x130>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	4b48      	ldr	r3, [pc, #288]	; (8000cac <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8c:	4a47      	ldr	r2, [pc, #284]	; (8000cac <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b92:	6453      	str	r3, [r2, #68]	; 0x44
 8000b94:	4b45      	ldr	r3, [pc, #276]	; (8000cac <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9c:	60fb      	str	r3, [r7, #12]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	4b41      	ldr	r3, [pc, #260]	; (8000cac <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	4a40      	ldr	r2, [pc, #256]	; (8000cac <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bae:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb0:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 8000bbc:	4b3c      	ldr	r3, [pc, #240]	; (8000cb0 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a3b      	ldr	r2, [pc, #236]	; (8000cb0 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8000bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc6:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2
 8000bc8:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	4a38      	ldr	r2, [pc, #224]	; (8000cb0 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8000bce:	f043 0306 	orr.w	r3, r3, #6
 8000bd2:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8000bd4:	4b37      	ldr	r3, [pc, #220]	; (8000cb4 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	4a36      	ldr	r2, [pc, #216]	; (8000cb4 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bde:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8000be0:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	4a33      	ldr	r2, [pc, #204]	; (8000cb4 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000be6:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000bea:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8000bec:	4b31      	ldr	r3, [pc, #196]	; (8000cb4 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf0:	4a30      	ldr	r2, [pc, #192]	; (8000cb4 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000bf2:	f043 030d 	orr.w	r3, r3, #13
 8000bf6:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= (11UL << ADC_SQR3_SQ1_Pos);	// Input 11 = first conversion
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	; (8000cb8 <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 8000bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bfc:	4a2e      	ldr	r2, [pc, #184]	; (8000cb8 <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 8000bfe:	f043 030b 	orr.w	r3, r3, #11
 8000c02:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0c:	4a27      	ldr	r2, [pc, #156]	; (8000cac <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000c0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c12:	6313      	str	r3, [r2, #48]	; 0x30
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 8000c20:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a25      	ldr	r2, [pc, #148]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c26:	f023 0301 	bic.w	r3, r3, #1
 8000c2a:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000c2c:	bf00      	nop
 8000c2e:	4b23      	ldr	r3, [pc, #140]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d1f9      	bne.n	8000c2e <ADC1_IN13_ADC2_IN11_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c48:	4a1c      	ldr	r2, [pc, #112]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1a      	ldr	r2, [pc, #104]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c64:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c70:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8000c72:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a11      	ldr	r2, [pc, #68]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c7c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8000c7e:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c84:	f043 0310 	orr.w	r3, r3, #16
 8000c88:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c8c:	223c      	movs	r2, #60	; 0x3c
 8000c8e:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c92:	4a0c      	ldr	r2, [pc, #48]	; (8000cc4 <ADC1_IN13_ADC2_IN11_dual_init+0x14c>)
 8000c94:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000c98:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <ADC1_IN13_ADC2_IN11_dual_init+0x150>)
 8000c9a:	60da      	str	r2, [r3, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40012300 	.word	0x40012300
 8000cb4:	40012000 	.word	0x40012000
 8000cb8:	40012100 	.word	0x40012100
 8000cbc:	40026470 	.word	0x40026470
 8000cc0:	40026400 	.word	0x40026400
 8000cc4:	40012308 	.word	0x40012308
 8000cc8:	2000021c 	.word	0x2000021c

08000ccc <ADC1_IN13_ADC2_IN5_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN5_dual_start(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 8000cd0:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <ADC1_IN13_ADC2_IN5_dual_start+0x48>)
 8000cd6:	f043 0301 	orr.w	r3, r3, #1
 8000cda:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 8000cdc:	203c      	movs	r0, #60	; 0x3c
 8000cde:	f7ff fe0d 	bl	80008fc <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 8000ce2:	203c      	movs	r0, #60	; 0x3c
 8000ce4:	f7ff fdc8 	bl	8000878 <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <ADC1_IN13_ADC2_IN5_dual_start+0x4c>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <ADC1_IN13_ADC2_IN5_dual_start+0x50>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8000d00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40026470 	.word	0x40026470
 8000d18:	40012000 	.word	0x40012000
 8000d1c:	40012100 	.word	0x40012100

08000d20 <ADC2_IN13_IN5_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC12_IN5 = GPIO PA5
 *****************************************************************************/
void ADC2_IN13_IN5_scan_init(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// 2 inputs are converted
 8000d26:	4b47      	ldr	r3, [pc, #284]	; (8000e44 <ADC2_IN13_IN5_scan_init+0x124>)
 8000d28:	2202      	movs	r2, #2
 8000d2a:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <ADC2_IN13_IN5_scan_init+0x128>)
 8000d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d34:	4a44      	ldr	r2, [pc, #272]	; (8000e48 <ADC2_IN13_IN5_scan_init+0x128>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3c:	4b42      	ldr	r3, [pc, #264]	; (8000e48 <ADC2_IN13_IN5_scan_init+0x128>)
 8000d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	687b      	ldr	r3, [r7, #4]
	ADC2->SQR1 |= (1UL << ADC_SQR1_L_Pos);			// Convert 2 inputs
 8000d48:	4b40      	ldr	r3, [pc, #256]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4c:	4a3f      	ldr	r2, [pc, #252]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d52:	62d3      	str	r3, [r2, #44]	; 0x2c
	ADC2->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8000d54:	4b3d      	ldr	r3, [pc, #244]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d58:	4a3c      	ldr	r2, [pc, #240]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d5a:	f043 030d 	orr.w	r3, r3, #13
 8000d5e:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= (5UL << ADC_SQR3_SQ2_Pos);	// Input 5 = second conversion
 8000d60:	4b3a      	ldr	r3, [pc, #232]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d64:	4a39      	ldr	r2, [pc, #228]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d66:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000d6a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 8000d6c:	4b37      	ldr	r3, [pc, #220]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4a36      	ldr	r2, [pc, #216]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6053      	str	r3, [r2, #4]
	ADC2->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8000d78:	4b34      	ldr	r3, [pc, #208]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	4a33      	ldr	r2, [pc, #204]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d82:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8000d84:	4b31      	ldr	r3, [pc, #196]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	4a30      	ldr	r2, [pc, #192]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d8a:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000d8e:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	4a2d      	ldr	r2, [pc, #180]	; (8000e4c <ADC2_IN13_IN5_scan_init+0x12c>)
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <ADC2_IN13_IN5_scan_init+0x128>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <ADC2_IN13_IN5_scan_init+0x128>)
 8000da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b26      	ldr	r3, [pc, #152]	; (8000e48 <ADC2_IN13_IN5_scan_init+0x128>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 3
 8000db8:	4b25      	ldr	r3, [pc, #148]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a24      	ldr	r2, [pc, #144]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000dbe:	f023 0301 	bic.w	r3, r3, #1
 8000dc2:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000dc4:	bf00      	nop
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f9      	bne.n	8000dc6 <ADC2_IN13_IN5_scan_init+0xa6>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3;	// Clear transfer complete interrupt fl.
 8000dd2:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <ADC2_IN13_IN5_scan_init+0x134>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	4a1f      	ldr	r2, [pc, #124]	; (8000e54 <ADC2_IN13_IN5_scan_init+0x134>)
 8000dd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ddc:	6093      	str	r3, [r2, #8]
	DMA2_Stream3->CR |= (1UL << DMA_SxCR_CHSEL_Pos);	// Select channel 1
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a1b      	ldr	r2, [pc, #108]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000de8:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PL_1;		// Priority high
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a18      	ldr	r2, [pc, #96]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e00:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a12      	ldr	r2, [pc, #72]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e0c:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000e14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e18:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000e20:	f043 0310 	orr.w	r3, r3, #16
 8000e24:	6013      	str	r3, [r2, #0]
	DMA2_Stream3->NDTR = 2*ADC_NUMS;	// Number of data items to transfer
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000e28:	2278      	movs	r2, #120	; 0x78
 8000e2a:	605a      	str	r2, [r3, #4]
	DMA2_Stream3->PAR = (uint32_t)&ADC2->DR;	// Peripheral register address
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <ADC2_IN13_IN5_scan_init+0x138>)
 8000e30:	609a      	str	r2, [r3, #8]
	DMA2_Stream3->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <ADC2_IN13_IN5_scan_init+0x130>)
 8000e34:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <ADC2_IN13_IN5_scan_init+0x13c>)
 8000e36:	60da      	str	r2, [r3, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	20000000 	.word	0x20000000
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40012100 	.word	0x40012100
 8000e50:	40026458 	.word	0x40026458
 8000e54:	40026400 	.word	0x40026400
 8000e58:	4001214c 	.word	0x4001214c
 8000e5c:	2000021c 	.word	0x2000021c

08000e60 <ADC2_IN13_IN5_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC2_IN13_IN5_scan_start(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	DMA2_Stream3->CR |= DMA_SxCR_EN;	// Enable DMA
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <ADC2_IN13_IN5_scan_start+0x3c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0c      	ldr	r2, [pc, #48]	; (8000e9c <ADC2_IN13_IN5_scan_start+0x3c>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);	// Clear pending DMA interrupt
 8000e70:	203b      	movs	r0, #59	; 0x3b
 8000e72:	f7ff fd43 	bl	80008fc <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream3_IRQn);	// Enable DMA interrupt in the NVIC
 8000e76:	203b      	movs	r0, #59	; 0x3b
 8000e78:	f7ff fcfe 	bl	8000878 <__NVIC_EnableIRQ>
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <ADC2_IN13_IN5_scan_start+0x40>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <ADC2_IN13_IN5_scan_start+0x40>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8000e88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40026458 	.word	0x40026458
 8000ea0:	40012100 	.word	0x40012100

08000ea4 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8000ea8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <TIM2_IRQHandler+0x24>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8000ec0:	f7ff fdea 	bl	8000a98 <DAC_increment>
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000215 	.word	0x20000215

08000ecc <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <ADC_IRQHandler+0x58>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d020      	beq.n	8000f1e <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8000edc:	4911      	ldr	r1, [pc, #68]	; (8000f24 <ADC_IRQHandler+0x58>)
 8000ede:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <ADC_IRQHandler+0x5c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	1c5a      	adds	r2, r3, #1
 8000ee4:	4810      	ldr	r0, [pc, #64]	; (8000f28 <ADC_IRQHandler+0x5c>)
 8000ee6:	6002      	str	r2, [r0, #0]
 8000ee8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000eea:	4910      	ldr	r1, [pc, #64]	; (8000f2c <ADC_IRQHandler+0x60>)
 8000eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <ADC_IRQHandler+0x5c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b3b      	cmp	r3, #59	; 0x3b
 8000ef6:	d912      	bls.n	8000f1e <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8000ef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <ADC_IRQHandler+0x58>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <ADC_IRQHandler+0x58>)
 8000f0e:	f023 0301 	bic.w	r3, r3, #1
 8000f12:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8000f14:	f7ff fddc 	bl	8000ad0 <ADC_reset>
			MEAS_data_ready = true;
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <ADC_IRQHandler+0x64>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40012200 	.word	0x40012200
 8000f28:	20000218 	.word	0x20000218
 8000f2c:	2000021c 	.word	0x2000021c
 8000f30:	20000214 	.word	0x20000214

08000f34 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8000f38:	4b1c      	ldr	r3, [pc, #112]	; (8000fac <DMA2_Stream1_IRQHandler+0x78>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d031      	beq.n	8000fa8 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8000f44:	2039      	movs	r0, #57	; 0x39
 8000f46:	f7ff fcb5 	bl	80008b4 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8000f4a:	2039      	movs	r0, #57	; 0x39
 8000f4c:	f7ff fcd6 	bl	80008fc <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8000f50:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <DMA2_Stream1_IRQHandler+0x7c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a16      	ldr	r2, [pc, #88]	; (8000fb0 <DMA2_Stream1_IRQHandler+0x7c>)
 8000f56:	f023 0301 	bic.w	r3, r3, #1
 8000f5a:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000f5c:	bf00      	nop
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <DMA2_Stream1_IRQHandler+0x7c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f9      	bne.n	8000f5e <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <DMA2_Stream1_IRQHandler+0x78>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <DMA2_Stream1_IRQHandler+0x78>)
 8000f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f74:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8000f76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <DMA2_Stream1_IRQHandler+0x80>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <DMA2_Stream1_IRQHandler+0x80>)
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <DMA2_Stream1_IRQHandler+0x80>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <DMA2_Stream1_IRQHandler+0x80>)
 8000f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f9c:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8000f9e:	f7ff fd97 	bl	8000ad0 <ADC_reset>
		MEAS_data_ready = true;
 8000fa2:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <DMA2_Stream1_IRQHandler+0x84>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
	}
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40026400 	.word	0x40026400
 8000fb0:	40026428 	.word	0x40026428
 8000fb4:	40012200 	.word	0x40012200
 8000fb8:	20000214 	.word	0x20000214

08000fbc <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <DMA2_Stream3_IRQHandler+0x78>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d031      	beq.n	8001030 <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 8000fcc:	203b      	movs	r0, #59	; 0x3b
 8000fce:	f7ff fc71 	bl	80008b4 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 8000fd2:	203b      	movs	r0, #59	; 0x3b
 8000fd4:	f7ff fc92 	bl	80008fc <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <DMA2_Stream3_IRQHandler+0x7c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a16      	ldr	r2, [pc, #88]	; (8001038 <DMA2_Stream3_IRQHandler+0x7c>)
 8000fde:	f023 0301 	bic.w	r3, r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000fe4:	bf00      	nop
 8000fe6:	4b14      	ldr	r3, [pc, #80]	; (8001038 <DMA2_Stream3_IRQHandler+0x7c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f9      	bne.n	8000fe6 <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <DMA2_Stream3_IRQHandler+0x78>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <DMA2_Stream3_IRQHandler+0x78>)
 8000ff8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000ffc:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8000ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <DMA2_Stream3_IRQHandler+0x80>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <DMA2_Stream3_IRQHandler+0x80>)
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <DMA2_Stream3_IRQHandler+0x80>)
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <DMA2_Stream3_IRQHandler+0x80>)
 8001020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001024:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001026:	f7ff fd53 	bl	8000ad0 <ADC_reset>
		MEAS_data_ready = true;
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <DMA2_Stream3_IRQHandler+0x84>)
 800102c:	2201      	movs	r2, #1
 800102e:	701a      	strb	r2, [r3, #0]
	}
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40026400 	.word	0x40026400
 8001038:	40026458 	.word	0x40026458
 800103c:	40012100 	.word	0x40012100
 8001040:	20000214 	.word	0x20000214

08001044 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <DMA2_Stream4_IRQHandler+0xc8>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	2b00      	cmp	r3, #0
 8001054:	d055      	beq.n	8001102 <DMA2_Stream4_IRQHandler+0xbe>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8001056:	203c      	movs	r0, #60	; 0x3c
 8001058:	f7ff fc2c 	bl	80008b4 <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 800105c:	203c      	movs	r0, #60	; 0x3c
 800105e:	f7ff fc4d 	bl	80008fc <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <DMA2_Stream4_IRQHandler+0xcc>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a2a      	ldr	r2, [pc, #168]	; (8001110 <DMA2_Stream4_IRQHandler+0xcc>)
 8001068:	f023 0301 	bic.w	r3, r3, #1
 800106c:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 800106e:	bf00      	nop
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <DMA2_Stream4_IRQHandler+0xcc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f9      	bne.n	8001070 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <DMA2_Stream4_IRQHandler+0xc8>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <DMA2_Stream4_IRQHandler+0xc8>)
 8001082:	f043 0320 	orr.w	r3, r3, #32
 8001086:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001088:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001092:	f023 0301 	bic.w	r3, r3, #1
 8001096:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8001098:	4b1e      	ldr	r3, [pc, #120]	; (8001114 <DMA2_Stream4_IRQHandler+0xd0>)
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <DMA2_Stream4_IRQHandler+0xd0>)
 800109e:	f023 0301 	bic.w	r3, r3, #1
 80010a2:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 80010a4:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <DMA2_Stream4_IRQHandler+0xd4>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <DMA2_Stream4_IRQHandler+0xd4>)
 80010aa:	f023 0301 	bic.w	r3, r3, #1
 80010ae:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <DMA2_Stream4_IRQHandler+0xd8>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a19      	ldr	r2, [pc, #100]	; (800111c <DMA2_Stream4_IRQHandler+0xd8>)
 80010b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80010ba:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 80010bc:	233b      	movs	r3, #59	; 0x3b
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	e017      	b.n	80010f2 <DMA2_Stream4_IRQHandler+0xae>
			ADC_samples[2*i+1] = (ADC_samples[i] >> 16);
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <DMA2_Stream4_IRQHandler+0xdc>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	3301      	adds	r3, #1
 80010d0:	0c12      	lsrs	r2, r2, #16
 80010d2:	4913      	ldr	r1, [pc, #76]	; (8001120 <DMA2_Stream4_IRQHandler+0xdc>)
 80010d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADC_samples[2*i]   = (ADC_samples[i] & 0xffff);
 80010d8:	4a11      	ldr	r2, [pc, #68]	; (8001120 <DMA2_Stream4_IRQHandler+0xdc>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	b292      	uxth	r2, r2
 80010e6:	490e      	ldr	r1, [pc, #56]	; (8001120 <DMA2_Stream4_IRQHandler+0xdc>)
 80010e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	607b      	str	r3, [r7, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	dae4      	bge.n	80010c2 <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 80010f8:	f7ff fcea 	bl	8000ad0 <ADC_reset>
		MEAS_data_ready = true;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <DMA2_Stream4_IRQHandler+0xe0>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
	}
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40026400 	.word	0x40026400
 8001110:	40026470 	.word	0x40026470
 8001114:	40012000 	.word	0x40012000
 8001118:	40012100 	.word	0x40012100
 800111c:	40012300 	.word	0x40012300
 8001120:	2000021c 	.word	0x2000021c
 8001124:	20000214 	.word	0x20000214

08001128 <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b08d      	sub	sp, #52	; 0x34
 800112c:	af00      	add	r7, sp, #0
	const uint32_t Y_OFFSET = 260;
 800112e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001132:	61fb      	str	r3, [r7, #28]
	const uint32_t X_SIZE = 240;
 8001134:	23f0      	movs	r3, #240	; 0xf0
 8001136:	61bb      	str	r3, [r7, #24]
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 8001138:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001142:	3301      	adds	r3, #1
 8001144:	617b      	str	r3, [r7, #20]
	uint32_t data;
	uint32_t data_last;
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001146:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800114a:	f001 fd03 	bl	8002b54 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	b29a      	uxth	r2, r3
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	b29b      	uxth	r3, r3
 8001156:	3301      	adds	r3, #1
 8001158:	b29b      	uxth	r3, r3
 800115a:	2100      	movs	r1, #0
 800115c:	2000      	movs	r0, #0
 800115e:	f001 ff39 	bl	8002fd4 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font24);
 8001162:	4861      	ldr	r0, [pc, #388]	; (80012e8 <MEAS_show_data+0x1c0>)
 8001164:	f001 fd28 	bl	8002bb8 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800116c:	f001 fd0a 	bl	8002b84 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001170:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001174:	f001 fcee 	bl	8002b54 <BSP_LCD_SetTextColor>
	char text[16];
	snprintf(text, 15, "1. sample %4d", (int)(ADC_samples[0]));
 8001178:	4b5c      	ldr	r3, [pc, #368]	; (80012ec <MEAS_show_data+0x1c4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4638      	mov	r0, r7
 800117e:	4a5c      	ldr	r2, [pc, #368]	; (80012f0 <MEAS_show_data+0x1c8>)
 8001180:	210f      	movs	r1, #15
 8001182:	f006 fe35 	bl	8007df0 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, LEFT_MODE);
 8001186:	463a      	mov	r2, r7
 8001188:	2303      	movs	r3, #3
 800118a:	2132      	movs	r1, #50	; 0x32
 800118c:	2000      	movs	r0, #0
 800118e:	f001 fd99 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
	snprintf(text, 15, "2. sample %4d", (int)(ADC_samples[1]));
 8001192:	4b56      	ldr	r3, [pc, #344]	; (80012ec <MEAS_show_data+0x1c4>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4638      	mov	r0, r7
 8001198:	4a56      	ldr	r2, [pc, #344]	; (80012f4 <MEAS_show_data+0x1cc>)
 800119a:	210f      	movs	r1, #15
 800119c:	f006 fe28 	bl	8007df0 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 80, (uint8_t *)text, LEFT_MODE);
 80011a0:	463a      	mov	r2, r7
 80011a2:	2303      	movs	r3, #3
 80011a4:	2150      	movs	r1, #80	; 0x50
 80011a6:	2000      	movs	r0, #0
 80011a8:	f001 fd8c 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
	/* Draw the  values of input channel 1 as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 80011ac:	4852      	ldr	r0, [pc, #328]	; (80012f8 <MEAS_show_data+0x1d0>)
 80011ae:	f001 fcd1 	bl	8002b54 <BSP_LCD_SetTextColor>
	data = ADC_samples[MEAS_input_count*0] / f;
 80011b2:	4b4e      	ldr	r3, [pc, #312]	; (80012ec <MEAS_show_data+0x1c4>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 80011be:	2301      	movs	r3, #1
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c2:	e02e      	b.n	8001222 <MEAS_show_data+0xfa>
		data_last = data;
 80011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c6:	613b      	str	r3, [r7, #16]
		data = (ADC_samples[MEAS_input_count*i]) / f;
 80011c8:	4b4c      	ldr	r3, [pc, #304]	; (80012fc <MEAS_show_data+0x1d4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011ce:	fb02 f303 	mul.w	r3, r2, r3
 80011d2:	4a46      	ldr	r2, [pc, #280]	; (80012ec <MEAS_show_data+0x1c4>)
 80011d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 80011e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d901      	bls.n	80011ec <MEAS_show_data+0xc4>
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 80011ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ee:	3b01      	subs	r3, #1
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	b298      	uxth	r0, r3
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	b299      	uxth	r1, r3
 8001202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001204:	b29b      	uxth	r3, r3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	b29c      	uxth	r4, r3
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	b29a      	uxth	r2, r3
 800120e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001210:	b29b      	uxth	r3, r3
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	b29b      	uxth	r3, r3
 8001216:	4622      	mov	r2, r4
 8001218:	f001 fe12 	bl	8002e40 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++){
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	3301      	adds	r3, #1
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
 8001222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001224:	2b3b      	cmp	r3, #59	; 0x3b
 8001226:	d9cd      	bls.n	80011c4 <MEAS_show_data+0x9c>
	}
	/* Draw the  values of input channel 2 (if present) as a curve */
	if (MEAS_input_count == 2) {
 8001228:	4b34      	ldr	r3, [pc, #208]	; (80012fc <MEAS_show_data+0x1d4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d13e      	bne.n	80012ae <MEAS_show_data+0x186>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001230:	4833      	ldr	r0, [pc, #204]	; (8001300 <MEAS_show_data+0x1d8>)
 8001232:	f001 fc8f 	bl	8002b54 <BSP_LCD_SetTextColor>
		data = ADC_samples[MEAS_input_count*0+1] / f;
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <MEAS_show_data+0x1c4>)
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 8001242:	2301      	movs	r3, #1
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
 8001246:	e02f      	b.n	80012a8 <MEAS_show_data+0x180>
			data_last = data;
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	613b      	str	r3, [r7, #16]
			data = (ADC_samples[MEAS_input_count*i+1]) / f;
 800124c:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MEAS_show_data+0x1d4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001252:	fb02 f303 	mul.w	r3, r2, r3
 8001256:	3301      	adds	r3, #1
 8001258:	4a24      	ldr	r2, [pc, #144]	; (80012ec <MEAS_show_data+0x1c4>)
 800125a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fbb2 f3f3 	udiv	r3, r2, r3
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	429a      	cmp	r2, r3
 800126c:	d901      	bls.n	8001272 <MEAS_show_data+0x14a>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	3b01      	subs	r3, #1
 8001276:	b29b      	uxth	r3, r3
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	b298      	uxth	r0, r3
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	b29a      	uxth	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	b29b      	uxth	r3, r3
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	b299      	uxth	r1, r3
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	b29b      	uxth	r3, r3
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	b29c      	uxth	r4, r3
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	b29a      	uxth	r2, r3
 8001294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001296:	b29b      	uxth	r3, r3
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29b      	uxth	r3, r3
 800129c:	4622      	mov	r2, r4
 800129e:	f001 fdcf 	bl	8002e40 <BSP_LCD_DrawLine>
		for (uint32_t i = 1; i < ADC_NUMS; i++){
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	3301      	adds	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
 80012a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012aa:	2b3b      	cmp	r3, #59	; 0x3b
 80012ac:	d9cc      	bls.n	8001248 <MEAS_show_data+0x120>
		}
	}
	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
 80012b2:	e00f      	b.n	80012d4 <MEAS_show_data+0x1ac>
		ADC_samples[2*i] = 0;
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <MEAS_show_data+0x1c4>)
 80012ba:	2100      	movs	r1, #0
 80012bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a09      	ldr	r2, [pc, #36]	; (80012ec <MEAS_show_data+0x1c4>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 80012ce:	6a3b      	ldr	r3, [r7, #32]
 80012d0:	3301      	adds	r3, #1
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	2b3b      	cmp	r3, #59	; 0x3b
 80012d8:	d9ec      	bls.n	80012b4 <MEAS_show_data+0x18c>
	}
	ADC_sample_count = 0;
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MEAS_show_data+0x1dc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
}
 80012e0:	bf00      	nop
 80012e2:	3734      	adds	r7, #52	; 0x34
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd90      	pop	{r4, r7, pc}
 80012e8:	20000170 	.word	0x20000170
 80012ec:	2000021c 	.word	0x2000021c
 80012f0:	08008728 	.word	0x08008728
 80012f4:	08008738 	.word	0x08008738
 80012f8:	ff0000ff 	.word	0xff0000ff
 80012fc:	20000000 	.word	0x20000000
 8001300:	ffff0000 	.word	0xffff0000
 8001304:	20000218 	.word	0x20000218

08001308 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 800130e:	4852      	ldr	r0, [pc, #328]	; (8001458 <MENU_draw+0x150>)
 8001310:	f001 fc52 	bl	8002bb8 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8001314:	f001 fb9e 	bl	8002a54 <BSP_LCD_GetYSize>
 8001318:	4603      	mov	r3, r0
 800131a:	3b28      	subs	r3, #40	; 0x28
 800131c:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 800131e:	2302      	movs	r3, #2
 8001320:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8001322:	f001 fb8b 	bl	8002a3c <BSP_LCD_GetXSize>
 8001326:	4603      	mov	r3, r0
 8001328:	4a4c      	ldr	r2, [pc, #304]	; (800145c <MENU_draw+0x154>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	089b      	lsrs	r3, r3, #2
 8001330:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 8001332:	2328      	movs	r3, #40	; 0x28
 8001334:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e084      	b.n	8001446 <MENU_draw+0x13e>
		x = i*w;
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8001346:	4946      	ldr	r1, [pc, #280]	; (8001460 <MENU_draw+0x158>)
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	440b      	add	r3, r1
 8001354:	3324      	adds	r3, #36	; 0x24
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fbfb 	bl	8002b54 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b29a      	uxth	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	b29b      	uxth	r3, r3
 8001366:	4413      	add	r3, r2
 8001368:	b298      	uxth	r0, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	b29a      	uxth	r2, r3
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	b29b      	uxth	r3, r3
 8001372:	4413      	add	r3, r2
 8001374:	b299      	uxth	r1, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	b29a      	uxth	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	b29b      	uxth	r3, r3
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	b29b      	uxth	r3, r3
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b29c      	uxth	r4, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	b29a      	uxth	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	b29b      	uxth	r3, r3
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	b29b      	uxth	r3, r3
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	b29b      	uxth	r3, r3
 8001396:	4622      	mov	r2, r4
 8001398:	f001 fe1c 	bl	8002fd4 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 800139c:	4930      	ldr	r1, [pc, #192]	; (8001460 <MENU_draw+0x158>)
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	4613      	mov	r3, r2
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	3324      	adds	r3, #36	; 0x24
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fbe8 	bl	8002b84 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 80013b4:	492a      	ldr	r1, [pc, #168]	; (8001460 <MENU_draw+0x158>)
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	440b      	add	r3, r1
 80013c2:	3320      	adds	r3, #32
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 fbc4 	bl	8002b54 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	0052      	lsls	r2, r2, #1
 80013d4:	4413      	add	r3, r2
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	4413      	add	r3, r2
 80013de:	b298      	uxth	r0, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	0052      	lsls	r2, r2, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	00db      	lsls	r3, r3, #3
 80013fe:	4a18      	ldr	r2, [pc, #96]	; (8001460 <MENU_draw+0x158>)
 8001400:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8001402:	2303      	movs	r3, #3
 8001404:	f001 fc5e 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	b29b      	uxth	r3, r3
 800140c:	461a      	mov	r2, r3
 800140e:	0052      	lsls	r2, r2, #1
 8001410:	4413      	add	r3, r2
 8001412:	b29a      	uxth	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b29b      	uxth	r3, r3
 8001418:	4413      	add	r3, r2
 800141a:	b298      	uxth	r0, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	085b      	lsrs	r3, r3, #1
 8001420:	b29a      	uxth	r2, r3
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	b29b      	uxth	r3, r3
 8001426:	4413      	add	r3, r2
 8001428:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	3310      	adds	r3, #16
 8001436:	4a0a      	ldr	r2, [pc, #40]	; (8001460 <MENU_draw+0x158>)
 8001438:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 800143a:	2303      	movs	r3, #3
 800143c:	f001 fc42 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3301      	adds	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b05      	cmp	r3, #5
 800144a:	f67f af77 	bls.w	800133c <MENU_draw+0x34>
	}
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	20000180 	.word	0x20000180
 800145c:	aaaaaaab 	.word	0xaaaaaaab
 8001460:	20000008 	.word	0x20000008

08001464 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800146c:	f001 fb8a 	bl	8002b84 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001470:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001474:	f001 fb6e 	bl	8002b54 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8001478:	4818      	ldr	r0, [pc, #96]	; (80014dc <MENU_hint+0x78>)
 800147a:	f001 fb9d 	bl	8002bb8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"DEMO-CODE", LEFT_MODE);
 800147e:	2303      	movs	r3, #3
 8001480:	4a17      	ldr	r2, [pc, #92]	; (80014e0 <MENU_hint+0x7c>)
 8001482:	210a      	movs	r1, #10
 8001484:	2005      	movs	r0, #5
 8001486:	f001 fc1d 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <MENU_hint+0x80>)
 800148c:	f001 fb94 	bl	8002bb8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item", LEFT_MODE);
 8001490:	2303      	movs	r3, #3
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <MENU_hint+0x84>)
 8001494:	213c      	movs	r1, #60	; 0x3c
 8001496:	2005      	movs	r0, #5
 8001498:	f001 fc14 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start an ADC demo", LEFT_MODE);
 800149c:	2303      	movs	r3, #3
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <MENU_hint+0x88>)
 80014a0:	2150      	movs	r1, #80	; 0x50
 80014a2:	2005      	movs	r0, #5
 80014a4:	f001 fc0e 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 80014a8:	2303      	movs	r3, #3
 80014aa:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <MENU_hint+0x8c>)
 80014ac:	216e      	movs	r1, #110	; 0x6e
 80014ae:	2005      	movs	r0, #5
 80014b0:	f001 fc08 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 80014b4:	2303      	movs	r3, #3
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <MENU_hint+0x90>)
 80014b8:	2182      	movs	r1, #130	; 0x82
 80014ba:	2005      	movs	r0, #5
 80014bc:	f001 fc02 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
 80014c0:	2303      	movs	r3, #3
 80014c2:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <MENU_hint+0x94>)
 80014c4:	21a0      	movs	r1, #160	; 0xa0
 80014c6:	2005      	movs	r0, #5
 80014c8:	f001 fbfc 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
 80014cc:	2303      	movs	r3, #3
 80014ce:	4a0b      	ldr	r2, [pc, #44]	; (80014fc <MENU_hint+0x98>)
 80014d0:	21a0      	movs	r1, #160	; 0xa0
 80014d2:	2005      	movs	r0, #5
 80014d4:	f001 fbf6 	bl	8002cc4 <BSP_LCD_DisplayStringAt>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000170 	.word	0x20000170
 80014e0:	08008748 	.word	0x08008748
 80014e4:	20000178 	.word	0x20000178
 80014e8:	08008754 	.word	0x08008754
 80014ec:	08008768 	.word	0x08008768
 80014f0:	08008780 	.word	0x08008780
 80014f4:	08008794 	.word	0x08008794
 80014f8:	080087ac 	.word	0x080087ac
 80014fc:	080087c0 	.word	0x080087c0

08001500 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MENU_get_transition+0x20>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <MENU_get_transition+0x20>)
 800150e:	2206      	movs	r2, #6
 8001510:	701a      	strb	r2, [r3, #0]
	return item;
 8001512:	79fb      	ldrb	r3, [r7, #7]
}
 8001514:	4618      	mov	r0, r3
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	20000004 	.word	0x20000004

08001524 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8001524:	b598      	push	{r3, r4, r7, lr}
 8001526:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8001528:	4830      	ldr	r0, [pc, #192]	; (80015ec <MENU_check_transition+0xc8>)
 800152a:	f002 f9fd 	bl	8003928 <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 800152e:	f001 fa91 	bl	8002a54 <BSP_LCD_GetYSize>
 8001532:	4603      	mov	r3, r0
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <MENU_check_transition+0xc8>)
 8001538:	889b      	ldrh	r3, [r3, #4]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <MENU_check_transition+0xc8>)
 8001540:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 8001542:	f001 fa7b 	bl	8002a3c <BSP_LCD_GetXSize>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	4b28      	ldr	r3, [pc, #160]	; (80015ec <MENU_check_transition+0xc8>)
 800154c:	885b      	ldrh	r3, [r3, #2]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <MENU_check_transition+0xc8>)
 8001554:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001556:	f001 fa7d 	bl	8002a54 <BSP_LCD_GetYSize>
 800155a:	4603      	mov	r3, r0
 800155c:	b29a      	uxth	r2, r3
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <MENU_check_transition+0xc8>)
 8001560:	889b      	ldrh	r3, [r3, #4]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	b29a      	uxth	r2, r3
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <MENU_check_transition+0xc8>)
 8001568:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <MENU_check_transition+0xc8>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d039      	beq.n	80015e6 <MENU_check_transition+0xc2>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <MENU_check_transition+0xcc>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b06      	cmp	r3, #6
 8001578:	d135      	bne.n	80015e6 <MENU_check_transition+0xc2>
			item_old = item_new;		// Store old item
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <MENU_check_transition+0xd0>)
 800157c:	781a      	ldrb	r2, [r3, #0]
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <MENU_check_transition+0xd4>)
 8001580:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8001582:	f001 fa67 	bl	8002a54 <BSP_LCD_GetYSize>
 8001586:	4603      	mov	r3, r0
 8001588:	3b28      	subs	r3, #40	; 0x28
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <MENU_check_transition+0xc8>)
 800158c:	8892      	ldrh	r2, [r2, #4]
 800158e:	4293      	cmp	r3, r2
 8001590:	d229      	bcs.n	80015e6 <MENU_check_transition+0xc2>
 8001592:	f001 fa5f 	bl	8002a54 <BSP_LCD_GetYSize>
 8001596:	4603      	mov	r3, r0
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <MENU_check_transition+0xc8>)
 800159a:	8892      	ldrh	r2, [r2, #4]
 800159c:	4293      	cmp	r3, r2
 800159e:	d922      	bls.n	80015e6 <MENU_check_transition+0xc2>
				item_new = TS_State.X	// Calculate new item
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <MENU_check_transition+0xc8>)
 80015a2:	885b      	ldrh	r3, [r3, #2]
 80015a4:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 80015a6:	f001 fa49 	bl	8002a3c <BSP_LCD_GetXSize>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <MENU_check_transition+0xd8>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	fbb4 f3f3 	udiv	r3, r4, r3
 80015b8:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 80015ba:	4b0e      	ldr	r3, [pc, #56]	; (80015f4 <MENU_check_transition+0xd0>)
 80015bc:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 80015be:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <MENU_check_transition+0xd0>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d902      	bls.n	80015cc <MENU_check_transition+0xa8>
					item_new = MENU_NONE;	// Out of bounds
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <MENU_check_transition+0xd0>)
 80015c8:	2206      	movs	r2, #6
 80015ca:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 80015cc:	4b09      	ldr	r3, [pc, #36]	; (80015f4 <MENU_check_transition+0xd0>)
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <MENU_check_transition+0xd4>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d106      	bne.n	80015e6 <MENU_check_transition+0xc2>
					item_new = MENU_NONE;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <MENU_check_transition+0xd0>)
 80015da:	2206      	movs	r2, #6
 80015dc:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <MENU_check_transition+0xd4>)
 80015e0:	781a      	ldrb	r2, [r3, #0]
 80015e2:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <MENU_check_transition+0xcc>)
 80015e4:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 80015e6:	bf00      	nop
 80015e8:	bd98      	pop	{r3, r4, r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20001300 	.word	0x20001300
 80015f0:	20000004 	.word	0x20000004
 80015f4:	200000f8 	.word	0x200000f8
 80015f8:	200000f9 	.word	0x200000f9
 80015fc:	aaaaaaab 	.word	0xaaaaaaab

08001600 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8001604:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <EXTI15_10_IRQHandler+0x40>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d014      	beq.n	800163a <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <EXTI15_10_IRQHandler+0x40>)
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	4a0a      	ldr	r2, [pc, #40]	; (8001640 <EXTI15_10_IRQHandler+0x40>)
 8001616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161a:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 800161c:	f002 f978 	bl	8003910 <BSP_TS_ITGetStatus>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8001626:	f002 fa31 	bl	8003a8c <BSP_TS_ITClear>
			MENU_check_transition();
 800162a:	f7ff ff7b 	bl	8001524 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 800162e:	4b04      	ldr	r3, [pc, #16]	; (8001640 <EXTI15_10_IRQHandler+0x40>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	4a03      	ldr	r2, [pc, #12]	; (8001640 <EXTI15_10_IRQHandler+0x40>)
 8001634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001638:	6153      	str	r3, [r2, #20]
	}
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40013c00 	.word	0x40013c00

08001644 <__NVIC_EnableIRQ>:
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_ClearPendingIRQ>:
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0c      	blt.n	80016ac <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <__NVIC_ClearPendingIRQ+0x38>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	3360      	adds	r3, #96	; 0x60
 80016a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100

080016bc <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <PB_init+0x38>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <PB_init+0x38>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <PB_init+0x38>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <PB_init+0x3c>)
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <PB_init+0x3c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6013      	str	r3, [r2, #0]
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000

080016fc <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <PB_enableIRQ+0x58>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <PB_enableIRQ+0x58>)
 800170c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <PB_enableIRQ+0x58>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <PB_enableIRQ+0x5c>)
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <PB_enableIRQ+0x5c>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <PB_enableIRQ+0x60>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	4a0c      	ldr	r2, [pc, #48]	; (800175c <PB_enableIRQ+0x60>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <PB_enableIRQ+0x60>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a09      	ldr	r2, [pc, #36]	; (800175c <PB_enableIRQ+0x60>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 800173e:	2006      	movs	r0, #6
 8001740:	f7ff ff9e 	bl	8001680 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8001744:	2006      	movs	r0, #6
 8001746:	f7ff ff7d 	bl	8001644 <__NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800
 8001758:	40013800 	.word	0x40013800
 800175c:	40013c00 	.word	0x40013c00

08001760 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <PB_pressed+0x20>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <PB_pressed+0x20>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
	return pressed;
 8001772:	79fb      	ldrb	r3, [r7, #7]
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	20001308 	.word	0x20001308

08001784 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8001788:	4b09      	ldr	r3, [pc, #36]	; (80017b0 <EXTI0_IRQHandler+0x2c>)
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <EXTI0_IRQHandler+0x2c>)
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <EXTI0_IRQHandler+0x2c>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <EXTI0_IRQHandler+0x30>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	701a      	strb	r2, [r3, #0]
	}
}
 80017a6:	bf00      	nop
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	40013c00 	.word	0x40013c00
 80017b4:	20001308 	.word	0x20001308

080017b8 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 80017ca:	e7fe      	b.n	80017ca <HardFault_Handler+0x4>

080017cc <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler+0x4>

080017d2 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 80017d6:	e7fe      	b.n	80017d6 <BusFault_Handler+0x4>

080017d8 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 80017dc:	e7fe      	b.n	80017dc <UsageFault_Handler+0x4>

080017de <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 800180c:	f002 f9a4 	bl	8003b58 <HAL_IncTick>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}

08001814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <SystemInit+0x60>)
 800181a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800181e:	4a15      	ldr	r2, [pc, #84]	; (8001874 <SystemInit+0x60>)
 8001820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <SystemInit+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a12      	ldr	r2, [pc, #72]	; (8001878 <SystemInit+0x64>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <SystemInit+0x64>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <SystemInit+0x64>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a0e      	ldr	r2, [pc, #56]	; (8001878 <SystemInit+0x64>)
 8001840:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <SystemInit+0x64>)
 800184c:	4a0b      	ldr	r2, [pc, #44]	; (800187c <SystemInit+0x68>)
 800184e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <SystemInit+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a08      	ldr	r2, [pc, #32]	; (8001878 <SystemInit+0x64>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SystemInit+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SystemInit+0x60>)
 8001864:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001868:	609a      	str	r2, [r3, #8]
#endif
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00
 8001878:	40023800 	.word	0x40023800
 800187c:	24003010 	.word	0x24003010

08001880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001884:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001886:	e003      	b.n	8001890 <LoopCopyDataInit>

08001888 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001888:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800188a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800188c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800188e:	3104      	adds	r1, #4

08001890 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001890:	480b      	ldr	r0, [pc, #44]	; (80018c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001894:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001896:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001898:	d3f6      	bcc.n	8001888 <CopyDataInit>
  ldr  r2, =_sbss
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800189c:	e002      	b.n	80018a4 <LoopFillZerobss>

0800189e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800189e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018a0:	f842 3b04 	str.w	r3, [r2], #4

080018a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018a8:	d3f9      	bcc.n	800189e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018aa:	f7ff ffb3 	bl	8001814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ae:	f006 fa73 	bl	8007d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b2:	f7fe fe6f 	bl	8000594 <main>
  bx  lr    
 80018b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018b8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80018bc:	0800b348 	.word	0x0800b348
  ldr  r0, =_sdata
 80018c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018c4:	200001f8 	.word	0x200001f8
  ldr  r2, =_sbss
 80018c8:	200001f8 	.word	0x200001f8
  ldr  r3, = _ebss
 80018cc:	200015e4 	.word	0x200015e4

080018d0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <CAN1_RX0_IRQHandler>

080018d2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80018d6:	f000 feed 	bl	80026b4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80018da:	20ca      	movs	r0, #202	; 0xca
 80018dc:	f000 f95d 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80018e0:	20c3      	movs	r0, #195	; 0xc3
 80018e2:	f000 f967 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80018e6:	2008      	movs	r0, #8
 80018e8:	f000 f964 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80018ec:	2050      	movs	r0, #80	; 0x50
 80018ee:	f000 f961 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80018f2:	20cf      	movs	r0, #207	; 0xcf
 80018f4:	f000 f951 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 f95b 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80018fe:	20c1      	movs	r0, #193	; 0xc1
 8001900:	f000 f958 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001904:	2030      	movs	r0, #48	; 0x30
 8001906:	f000 f955 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800190a:	20ed      	movs	r0, #237	; 0xed
 800190c:	f000 f945 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001910:	2064      	movs	r0, #100	; 0x64
 8001912:	f000 f94f 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001916:	2003      	movs	r0, #3
 8001918:	f000 f94c 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800191c:	2012      	movs	r0, #18
 800191e:	f000 f949 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001922:	2081      	movs	r0, #129	; 0x81
 8001924:	f000 f946 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001928:	20e8      	movs	r0, #232	; 0xe8
 800192a:	f000 f936 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800192e:	2085      	movs	r0, #133	; 0x85
 8001930:	f000 f940 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001934:	2000      	movs	r0, #0
 8001936:	f000 f93d 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800193a:	2078      	movs	r0, #120	; 0x78
 800193c:	f000 f93a 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001940:	20cb      	movs	r0, #203	; 0xcb
 8001942:	f000 f92a 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001946:	2039      	movs	r0, #57	; 0x39
 8001948:	f000 f934 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800194c:	202c      	movs	r0, #44	; 0x2c
 800194e:	f000 f931 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f92e 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001958:	2034      	movs	r0, #52	; 0x34
 800195a:	f000 f92b 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800195e:	2002      	movs	r0, #2
 8001960:	f000 f928 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001964:	20f7      	movs	r0, #247	; 0xf7
 8001966:	f000 f918 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800196a:	2020      	movs	r0, #32
 800196c:	f000 f922 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001970:	20ea      	movs	r0, #234	; 0xea
 8001972:	f000 f912 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f91c 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800197c:	2000      	movs	r0, #0
 800197e:	f000 f919 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001982:	20b1      	movs	r0, #177	; 0xb1
 8001984:	f000 f909 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001988:	2000      	movs	r0, #0
 800198a:	f000 f913 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800198e:	201b      	movs	r0, #27
 8001990:	f000 f910 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001994:	20b6      	movs	r0, #182	; 0xb6
 8001996:	f000 f900 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800199a:	200a      	movs	r0, #10
 800199c:	f000 f90a 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80019a0:	20a2      	movs	r0, #162	; 0xa2
 80019a2:	f000 f907 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80019a6:	20c0      	movs	r0, #192	; 0xc0
 80019a8:	f000 f8f7 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019ac:	2010      	movs	r0, #16
 80019ae:	f000 f901 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80019b2:	20c1      	movs	r0, #193	; 0xc1
 80019b4:	f000 f8f1 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80019b8:	2010      	movs	r0, #16
 80019ba:	f000 f8fb 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80019be:	20c5      	movs	r0, #197	; 0xc5
 80019c0:	f000 f8eb 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80019c4:	2045      	movs	r0, #69	; 0x45
 80019c6:	f000 f8f5 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80019ca:	2015      	movs	r0, #21
 80019cc:	f000 f8f2 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80019d0:	20c7      	movs	r0, #199	; 0xc7
 80019d2:	f000 f8e2 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80019d6:	2090      	movs	r0, #144	; 0x90
 80019d8:	f000 f8ec 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80019dc:	2036      	movs	r0, #54	; 0x36
 80019de:	f000 f8dc 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80019e2:	20c8      	movs	r0, #200	; 0xc8
 80019e4:	f000 f8e6 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80019e8:	20f2      	movs	r0, #242	; 0xf2
 80019ea:	f000 f8d6 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019ee:	2000      	movs	r0, #0
 80019f0:	f000 f8e0 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80019f4:	20b0      	movs	r0, #176	; 0xb0
 80019f6:	f000 f8d0 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80019fa:	20c2      	movs	r0, #194	; 0xc2
 80019fc:	f000 f8da 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001a00:	20b6      	movs	r0, #182	; 0xb6
 8001a02:	f000 f8ca 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001a06:	200a      	movs	r0, #10
 8001a08:	f000 f8d4 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001a0c:	20a7      	movs	r0, #167	; 0xa7
 8001a0e:	f000 f8d1 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001a12:	2027      	movs	r0, #39	; 0x27
 8001a14:	f000 f8ce 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a18:	2004      	movs	r0, #4
 8001a1a:	f000 f8cb 	bl	8001bb4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001a1e:	202a      	movs	r0, #42	; 0x2a
 8001a20:	f000 f8bb 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 f8c5 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f000 f8c2 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a30:	2000      	movs	r0, #0
 8001a32:	f000 f8bf 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001a36:	20ef      	movs	r0, #239	; 0xef
 8001a38:	f000 f8bc 	bl	8001bb4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001a3c:	202b      	movs	r0, #43	; 0x2b
 8001a3e:	f000 f8ac 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a42:	2000      	movs	r0, #0
 8001a44:	f000 f8b6 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f000 f8b3 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001a4e:	2001      	movs	r0, #1
 8001a50:	f000 f8b0 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001a54:	203f      	movs	r0, #63	; 0x3f
 8001a56:	f000 f8ad 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001a5a:	20f6      	movs	r0, #246	; 0xf6
 8001a5c:	f000 f89d 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f000 f8a7 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f000 f8a4 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001a6c:	2006      	movs	r0, #6
 8001a6e:	f000 f8a1 	bl	8001bb4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001a72:	202c      	movs	r0, #44	; 0x2c
 8001a74:	f000 f891 	bl	8001b9a <ili9341_WriteReg>
  LCD_Delay(200);
 8001a78:	20c8      	movs	r0, #200	; 0xc8
 8001a7a:	f000 ff09 	bl	8002890 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001a7e:	2026      	movs	r0, #38	; 0x26
 8001a80:	f000 f88b 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a84:	2001      	movs	r0, #1
 8001a86:	f000 f895 	bl	8001bb4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001a8a:	20e0      	movs	r0, #224	; 0xe0
 8001a8c:	f000 f885 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001a90:	200f      	movs	r0, #15
 8001a92:	f000 f88f 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001a96:	2029      	movs	r0, #41	; 0x29
 8001a98:	f000 f88c 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001a9c:	2024      	movs	r0, #36	; 0x24
 8001a9e:	f000 f889 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001aa2:	200c      	movs	r0, #12
 8001aa4:	f000 f886 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001aa8:	200e      	movs	r0, #14
 8001aaa:	f000 f883 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001aae:	2009      	movs	r0, #9
 8001ab0:	f000 f880 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001ab4:	204e      	movs	r0, #78	; 0x4e
 8001ab6:	f000 f87d 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001aba:	2078      	movs	r0, #120	; 0x78
 8001abc:	f000 f87a 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001ac0:	203c      	movs	r0, #60	; 0x3c
 8001ac2:	f000 f877 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001ac6:	2009      	movs	r0, #9
 8001ac8:	f000 f874 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001acc:	2013      	movs	r0, #19
 8001ace:	f000 f871 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001ad2:	2005      	movs	r0, #5
 8001ad4:	f000 f86e 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001ad8:	2017      	movs	r0, #23
 8001ada:	f000 f86b 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ade:	2011      	movs	r0, #17
 8001ae0:	f000 f868 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f000 f865 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001aea:	20e1      	movs	r0, #225	; 0xe1
 8001aec:	f000 f855 	bl	8001b9a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001af0:	2000      	movs	r0, #0
 8001af2:	f000 f85f 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001af6:	2016      	movs	r0, #22
 8001af8:	f000 f85c 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001afc:	201b      	movs	r0, #27
 8001afe:	f000 f859 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001b02:	2004      	movs	r0, #4
 8001b04:	f000 f856 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001b08:	2011      	movs	r0, #17
 8001b0a:	f000 f853 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001b0e:	2007      	movs	r0, #7
 8001b10:	f000 f850 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001b14:	2031      	movs	r0, #49	; 0x31
 8001b16:	f000 f84d 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001b1a:	2033      	movs	r0, #51	; 0x33
 8001b1c:	f000 f84a 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001b20:	2042      	movs	r0, #66	; 0x42
 8001b22:	f000 f847 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001b26:	2005      	movs	r0, #5
 8001b28:	f000 f844 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b2c:	200c      	movs	r0, #12
 8001b2e:	f000 f841 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001b32:	200a      	movs	r0, #10
 8001b34:	f000 f83e 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001b38:	2028      	movs	r0, #40	; 0x28
 8001b3a:	f000 f83b 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001b3e:	202f      	movs	r0, #47	; 0x2f
 8001b40:	f000 f838 	bl	8001bb4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001b44:	200f      	movs	r0, #15
 8001b46:	f000 f835 	bl	8001bb4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001b4a:	2011      	movs	r0, #17
 8001b4c:	f000 f825 	bl	8001b9a <ili9341_WriteReg>
  LCD_Delay(200);
 8001b50:	20c8      	movs	r0, #200	; 0xc8
 8001b52:	f000 fe9d 	bl	8002890 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b56:	2029      	movs	r0, #41	; 0x29
 8001b58:	f000 f81f 	bl	8001b9a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001b5c:	202c      	movs	r0, #44	; 0x2c
 8001b5e:	f000 f81c 	bl	8001b9a <ili9341_WriteReg>
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001b6a:	f000 fda3 	bl	80026b4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001b6e:	2103      	movs	r1, #3
 8001b70:	20d3      	movs	r0, #211	; 0xd3
 8001b72:	f000 f82c 	bl	8001bce <ili9341_ReadData>
 8001b76:	4603      	mov	r3, r0
 8001b78:	b29b      	uxth	r3, r3
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b82:	2029      	movs	r0, #41	; 0x29
 8001b84:	f000 f809 	bl	8001b9a <ili9341_WriteReg>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001b90:	2028      	movs	r0, #40	; 0x28
 8001b92:	f000 f802 	bl	8001b9a <ili9341_WriteReg>
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 fe1e 	bl	80027e8 <LCD_IO_WriteReg>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 fdef 	bl	80027a4 <LCD_IO_WriteData>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b082      	sub	sp, #8
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	460a      	mov	r2, r1
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001bde:	797a      	ldrb	r2, [r7, #5]
 8001be0:	88fb      	ldrh	r3, [r7, #6]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fe21 	bl	800282c <LCD_IO_ReadData>
 8001bea:	4603      	mov	r3, r0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001bf8:	23f0      	movs	r3, #240	; 0xf0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001c08:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001c22:	88fb      	ldrh	r3, [r7, #6]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fa59 	bl	80020dc <stmpe811_GetInstance>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	2bff      	cmp	r3, #255	; 0xff
 8001c32:	d112      	bne.n	8001c5a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001c34:	2000      	movs	r0, #0
 8001c36:	f000 fa51 	bl	80020dc <stmpe811_GetInstance>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001c3e:	7bbb      	ldrb	r3, [r7, #14]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d80a      	bhi.n	8001c5a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001c44:	7bbb      	ldrb	r3, [r7, #14]
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	b2d1      	uxtb	r1, r2
 8001c4a:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <stmpe811_Init+0x4c>)
 8001c4c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001c4e:	f000 fe2a 	bl	80028a6 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f000 f807 	bl	8001c68 <stmpe811_Reset>
    }
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	2000130c 	.word	0x2000130c

08001c68 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2202      	movs	r2, #2
 8001c78:	2103      	movs	r1, #3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fe1f 	bl	80028be <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001c80:	200a      	movs	r0, #10
 8001c82:	f000 fe59 	bl	8002938 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fe15 	bl	80028be <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001c94:	2002      	movs	r0, #2
 8001c96:	f000 fe4f 	bl	8002938 <IOE_Delay>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001ca2:	b590      	push	{r4, r7, lr}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001cac:	f000 fdfb 	bl	80028a6 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 fe14 	bl	80028e4 <IOE_Read>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 fe0b 	bl	80028e4 <IOE_Read>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001cd2:	4323      	orrs	r3, r4
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	b29b      	uxth	r3, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd90      	pop	{r4, r7, pc}

08001ce0 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2109      	movs	r1, #9
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fdf5 	bl	80028e4 <IOE_Read>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	2109      	movs	r1, #9
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fdd5 	bl	80028be <IOE_Write>
}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2109      	movs	r1, #9
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fdd7 	bl	80028e4 <IOE_Read>
 8001d36:	4603      	mov	r3, r0
 8001d38:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	2109      	movs	r1, #9
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 fdb7 	bl	80028be <IOE_Write>
    
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460a      	mov	r2, r1
 8001d62:	80fb      	strh	r3, [r7, #6]
 8001d64:	4613      	mov	r3, r2
 8001d66:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	210a      	movs	r1, #10
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 fdb6 	bl	80028e4 <IOE_Read>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	797b      	ldrb	r3, [r7, #5]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	210a      	movs	r1, #10
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fd96 	bl	80028be <IOE_Write>
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	4603      	mov	r3, r0
 8001da2:	460a      	mov	r2, r1
 8001da4:	80fb      	strh	r3, [r7, #6]
 8001da6:	4613      	mov	r3, r2
 8001da8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	210a      	movs	r1, #10
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fd95 	bl	80028e4 <IOE_Read>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001dbe:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	b25a      	sxtb	r2, r3
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	b25b      	sxtb	r3, r3
 8001dce:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	210a      	movs	r1, #10
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 fd70 	bl	80028be <IOE_Write>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	460a      	mov	r2, r1
 8001df0:	80fb      	strh	r3, [r7, #6]
 8001df2:	4613      	mov	r3, r2
 8001df4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	210b      	movs	r1, #11
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 fd71 	bl	80028e4 <IOE_Read>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	797b      	ldrb	r3, [r7, #5]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	b2db      	uxtb	r3, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	460a      	mov	r2, r1
 8001e1e:	80fb      	strh	r3, [r7, #6]
 8001e20:	4613      	mov	r3, r2
 8001e22:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	797a      	ldrb	r2, [r7, #5]
 8001e2a:	210b      	movs	r1, #11
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f000 fd46 	bl	80028be <IOE_Write>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	4603      	mov	r3, r0
 8001e42:	6039      	str	r1, [r7, #0]
 8001e44:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2117      	movs	r1, #23
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fd47 	bl	80028e4 <IOE_Read>
 8001e56:	4603      	mov	r3, r0
 8001e58:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b25b      	sxtb	r3, r3
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	b25a      	sxtb	r2, r3
 8001e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e66:	4013      	ands	r3, r2
 8001e68:	b25b      	sxtb	r3, r3
 8001e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	2117      	movs	r1, #23
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fd22 	bl	80028be <IOE_Write>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b084      	sub	sp, #16
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001e8c:	88fb      	ldrh	r3, [r7, #6]
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2104      	movs	r1, #4
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fd26 	bl	80028e4 <IOE_Read>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	f023 0304 	bic.w	r3, r3, #4
 8001ea2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	2104      	movs	r1, #4
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fd06 	bl	80028be <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	21f0      	movs	r1, #240	; 0xf0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff ffbf 	bl	8001e3a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001ebc:	7bfb      	ldrb	r3, [r7, #15]
 8001ebe:	f023 0303 	bic.w	r3, r3, #3
 8001ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	7bfa      	ldrb	r2, [r7, #15]
 8001eca:	2104      	movs	r1, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 fcf6 	bl	80028be <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2249      	movs	r2, #73	; 0x49
 8001ed8:	2120      	movs	r1, #32
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fcef 	bl	80028be <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	f000 fd29 	bl	8002938 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2201      	movs	r2, #1
 8001eec:	2121      	movs	r1, #33	; 0x21
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fce5 	bl	80028be <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	229a      	movs	r2, #154	; 0x9a
 8001efa:	2141      	movs	r1, #65	; 0x41
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fcde 	bl	80028be <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2201      	movs	r2, #1
 8001f08:	214a      	movs	r1, #74	; 0x4a
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fcd7 	bl	80028be <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2201      	movs	r2, #1
 8001f16:	214b      	movs	r1, #75	; 0x4b
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 fcd0 	bl	80028be <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2200      	movs	r2, #0
 8001f24:	214b      	movs	r1, #75	; 0x4b
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fcc9 	bl	80028be <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2201      	movs	r2, #1
 8001f32:	2156      	movs	r1, #86	; 0x56
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 fcc2 	bl	80028be <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2201      	movs	r2, #1
 8001f40:	2158      	movs	r1, #88	; 0x58
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fcbb 	bl	80028be <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	2140      	movs	r1, #64	; 0x40
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 fcb4 	bl	80028be <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	22ff      	movs	r2, #255	; 0xff
 8001f5c:	210b      	movs	r1, #11
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 fcad 	bl	80028be <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001f64:	2002      	movs	r0, #2
 8001f66:	f000 fce7 	bl	8002938 <IOE_Delay>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001f80:	88fb      	ldrh	r3, [r7, #6]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2140      	movs	r1, #64	; 0x40
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fcac 	bl	80028e4 <IOE_Read>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	bf0c      	ite	eq
 8001f96:	2301      	moveq	r3, #1
 8001f98:	2300      	movne	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001f9e:	7bbb      	ldrb	r3, [r7, #14]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	214c      	movs	r1, #76	; 0x4c
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fc9a 	bl	80028e4 <IOE_Read>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d010      	beq.n	8001fd8 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e00d      	b.n	8001fd8 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001fbc:	88fb      	ldrh	r3, [r7, #6]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	214b      	movs	r1, #75	; 0x4b
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fc7a 	bl	80028be <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2200      	movs	r2, #0
 8001fd0:	214b      	movs	r1, #75	; 0x4b
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 fc73 	bl	80028be <IOE_Write>
  }
  
  return ret;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b086      	sub	sp, #24
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	4603      	mov	r3, r0
 8001fea:	60b9      	str	r1, [r7, #8]
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001ff0:	89fb      	ldrh	r3, [r7, #14]
 8001ff2:	b2d8      	uxtb	r0, r3
 8001ff4:	f107 0210 	add.w	r2, r7, #16
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	21d7      	movs	r1, #215	; 0xd7
 8001ffc:	f000 fc85 	bl	800290a <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002000:	7c3b      	ldrb	r3, [r7, #16]
 8002002:	061a      	lsls	r2, r3, #24
 8002004:	7c7b      	ldrb	r3, [r7, #17]
 8002006:	041b      	lsls	r3, r3, #16
 8002008:	431a      	orrs	r2, r3
 800200a:	7cbb      	ldrb	r3, [r7, #18]
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	4313      	orrs	r3, r2
 8002010:	7cfa      	ldrb	r2, [r7, #19]
 8002012:	4313      	orrs	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	0d1b      	lsrs	r3, r3, #20
 800201a:	b29a      	uxth	r2, r3
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	0a1b      	lsrs	r3, r3, #8
 8002024:	b29b      	uxth	r3, r3
 8002026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800202a:	b29a      	uxth	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002030:	89fb      	ldrh	r3, [r7, #14]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2201      	movs	r2, #1
 8002036:	214b      	movs	r1, #75	; 0x4b
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fc40 	bl	80028be <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800203e:	89fb      	ldrh	r3, [r7, #14]
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2200      	movs	r2, #0
 8002044:	214b      	movs	r1, #75	; 0x4b
 8002046:	4618      	mov	r0, r3
 8002048:	f000 fc39 	bl	80028be <IOE_Write>
}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800205e:	f000 fc28 	bl	80028b2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	211f      	movs	r1, #31
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fe76 	bl	8001d58 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fe36 	bl	8001ce0 <stmpe811_EnableGlobalIT>
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fe47 	bl	8001d1c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	211f      	movs	r1, #31
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fe81 	bl	8001d9a <stmpe811_DisableITSource>
}
 8002098:	bf00      	nop
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80020aa:	88fb      	ldrh	r3, [r7, #6]
 80020ac:	211f      	movs	r1, #31
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fe99 	bl	8001de6 <stmpe811_ReadGITStatus>
 80020b4:	4603      	mov	r3, r0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80020c8:	88fb      	ldrh	r3, [r7, #6]
 80020ca:	211f      	movs	r1, #31
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fea1 	bl	8001e14 <stmpe811_ClearGlobalIT>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
	...

080020dc <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	e00b      	b.n	8002108 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	4a0a      	ldr	r2, [pc, #40]	; (800211c <stmpe811_GetInstance+0x40>)
 80020f4:	5cd3      	ldrb	r3, [r2, r3]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	88fa      	ldrh	r2, [r7, #6]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d101      	bne.n	8002102 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
 8002100:	e006      	b.n	8002110 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	3301      	adds	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d9f0      	bls.n	80020f0 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800210e:	23ff      	movs	r3, #255	; 0xff
}
 8002110:	4618      	mov	r0, r3
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	2000130c 	.word	0x2000130c

08002120 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	; 0x28
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10e      	bne.n	800214e <BSP_LED_Init+0x2e>
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <BSP_LED_Init+0x9c>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	4a20      	ldr	r2, [pc, #128]	; (80021bc <BSP_LED_Init+0x9c>)
 800213a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213e:	6313      	str	r3, [r2, #48]	; 0x30
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <BSP_LED_Init+0x9c>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	e010      	b.n	8002170 <BSP_LED_Init+0x50>
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d10d      	bne.n	8002170 <BSP_LED_Init+0x50>
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	4b18      	ldr	r3, [pc, #96]	; (80021bc <BSP_LED_Init+0x9c>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	4a17      	ldr	r2, [pc, #92]	; (80021bc <BSP_LED_Init+0x9c>)
 800215e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002162:	6313      	str	r3, [r2, #48]	; 0x30
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <BSP_LED_Init+0x9c>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <BSP_LED_Init+0xa0>)
 8002174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800217a:	2301      	movs	r3, #1
 800217c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800217e:	2301      	movs	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002182:	2302      	movs	r3, #2
 8002184:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <BSP_LED_Init+0xa4>)
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	f107 0214 	add.w	r2, r7, #20
 8002192:	4611      	mov	r1, r2
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fa89 	bl	80046ac <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <BSP_LED_Init+0xa4>)
 800219e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <BSP_LED_Init+0xa0>)
 80021a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021aa:	2200      	movs	r2, #0
 80021ac:	4619      	mov	r1, r3
 80021ae:	f002 fc29 	bl	8004a04 <HAL_GPIO_WritePin>
}
 80021b2:	bf00      	nop
 80021b4:	3728      	adds	r7, #40	; 0x28
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	080087ec 	.word	0x080087ec
 80021c4:	20000160 	.word	0x20000160

080021c8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <BSP_LED_On+0x2c>)
 80021d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	4a06      	ldr	r2, [pc, #24]	; (80021f8 <BSP_LED_On+0x30>)
 80021de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021e2:	2201      	movs	r2, #1
 80021e4:	4619      	mov	r1, r3
 80021e6:	f002 fc0d 	bl	8004a04 <HAL_GPIO_WritePin>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	20000160 	.word	0x20000160
 80021f8:	080087ec 	.word	0x080087ec

080021fc <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	4a07      	ldr	r2, [pc, #28]	; (8002228 <BSP_LED_Off+0x2c>)
 800220a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	4a06      	ldr	r2, [pc, #24]	; (800222c <BSP_LED_Off+0x30>)
 8002212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002216:	2200      	movs	r2, #0
 8002218:	4619      	mov	r1, r3
 800221a:	f002 fbf3 	bl	8004a04 <HAL_GPIO_WritePin>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000160 	.word	0x20000160
 800222c:	080087ec 	.word	0x080087ec

08002230 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <BSP_LED_Toggle+0x2c>)
 800223e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	4906      	ldr	r1, [pc, #24]	; (8002260 <BSP_LED_Toggle+0x30>)
 8002246:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800224a:	4619      	mov	r1, r3
 800224c:	4610      	mov	r0, r2
 800224e:	f002 fbf2 	bl	8004a36 <HAL_GPIO_TogglePin>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000160 	.word	0x20000160
 8002260:	080087ec 	.word	0x080087ec

08002264 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a33      	ldr	r2, [pc, #204]	; (8002340 <I2Cx_MspInit+0xdc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d15f      	bne.n	8002336 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	4b32      	ldr	r3, [pc, #200]	; (8002344 <I2Cx_MspInit+0xe0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	4a31      	ldr	r2, [pc, #196]	; (8002344 <I2Cx_MspInit+0xe0>)
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	6313      	str	r3, [r2, #48]	; 0x30
 8002286:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <I2Cx_MspInit+0xe0>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
 8002296:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <I2Cx_MspInit+0xe0>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <I2Cx_MspInit+0xe0>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6313      	str	r3, [r2, #48]	; 0x30
 80022a2:	4b28      	ldr	r3, [pc, #160]	; (8002344 <I2Cx_MspInit+0xe0>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80022ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80022b4:	2312      	movs	r3, #18
 80022b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80022bc:	2302      	movs	r3, #2
 80022be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80022c0:	2304      	movs	r3, #4
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	4619      	mov	r1, r3
 80022ca:	481f      	ldr	r0, [pc, #124]	; (8002348 <I2Cx_MspInit+0xe4>)
 80022cc:	f002 f9ee 	bl	80046ac <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80022d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022d4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	481b      	ldr	r0, [pc, #108]	; (800234c <I2Cx_MspInit+0xe8>)
 80022de:	f002 f9e5 	bl	80046ac <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	4b17      	ldr	r3, [pc, #92]	; (8002344 <I2Cx_MspInit+0xe0>)
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	4a16      	ldr	r2, [pc, #88]	; (8002344 <I2Cx_MspInit+0xe0>)
 80022ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022f0:	6413      	str	r3, [r2, #64]	; 0x40
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <I2Cx_MspInit+0xe0>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <I2Cx_MspInit+0xe0>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a10      	ldr	r2, [pc, #64]	; (8002344 <I2Cx_MspInit+0xe0>)
 8002304:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002308:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <I2Cx_MspInit+0xe0>)
 800230c:	6a1b      	ldr	r3, [r3, #32]
 800230e:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <I2Cx_MspInit+0xe0>)
 8002310:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002314:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	210f      	movs	r1, #15
 800231a:	2048      	movs	r0, #72	; 0x48
 800231c:	f001 fd3b 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002320:	2048      	movs	r0, #72	; 0x48
 8002322:	f001 fd54 	bl	8003dce <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	210f      	movs	r1, #15
 800232a:	2049      	movs	r0, #73	; 0x49
 800232c:	f001 fd33 	bl	8003d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002330:	2049      	movs	r0, #73	; 0x49
 8002332:	f001 fd4c 	bl	8003dce <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40005c00 	.word	0x40005c00
 8002344:	40023800 	.word	0x40023800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020800 	.word	0x40020800

08002350 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002354:	4814      	ldr	r0, [pc, #80]	; (80023a8 <I2Cx_Init+0x58>)
 8002356:	f003 f831 	bl	80053bc <HAL_I2C_GetState>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d121      	bne.n	80023a4 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <I2Cx_Init+0x58>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <I2Cx_Init+0x5c>)
 8002364:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <I2Cx_Init+0x58>)
 8002368:	4a11      	ldr	r2, [pc, #68]	; (80023b0 <I2Cx_Init+0x60>)
 800236a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <I2Cx_Init+0x58>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <I2Cx_Init+0x58>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <I2Cx_Init+0x58>)
 800237a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800237e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <I2Cx_Init+0x58>)
 8002382:	2200      	movs	r2, #0
 8002384:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <I2Cx_Init+0x58>)
 8002388:	2200      	movs	r2, #0
 800238a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 800238c:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <I2Cx_Init+0x58>)
 800238e:	2200      	movs	r2, #0
 8002390:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002392:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <I2Cx_Init+0x58>)
 8002394:	2200      	movs	r2, #0
 8002396:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <I2Cx_Init+0x58>)
 800239a:	f7ff ff63 	bl	8002264 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800239e:	4802      	ldr	r0, [pc, #8]	; (80023a8 <I2Cx_Init+0x58>)
 80023a0:	f002 fb64 	bl	8004a6c <HAL_I2C_Init>
  }
}
 80023a4:	bf00      	nop
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20001310 	.word	0x20001310
 80023ac:	40005c00 	.word	0x40005c00
 80023b0:	000186a0 	.word	0x000186a0

080023b4 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	603b      	str	r3, [r7, #0]
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <I2Cx_ITConfig+0x58>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <I2Cx_ITConfig+0x58>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <I2Cx_ITConfig+0x58>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80023d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80023dc:	2301      	movs	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <I2Cx_ITConfig+0x5c>)
 80023e6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	4809      	ldr	r0, [pc, #36]	; (8002414 <I2Cx_ITConfig+0x60>)
 80023ee:	f002 f95d 	bl	80046ac <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80023f2:	2200      	movs	r2, #0
 80023f4:	210f      	movs	r1, #15
 80023f6:	2028      	movs	r0, #40	; 0x28
 80023f8:	f001 fccd 	bl	8003d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80023fc:	2028      	movs	r0, #40	; 0x28
 80023fe:	f001 fce6 	bl	8003dce <HAL_NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800
 8002410:	10210000 	.word	0x10210000
 8002414:	40020000 	.word	0x40020000

08002418 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002418:	b580      	push	{r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af04      	add	r7, sp, #16
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
 8002422:	460b      	mov	r3, r1
 8002424:	71bb      	strb	r3, [r7, #6]
 8002426:	4613      	mov	r3, r2
 8002428:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	b299      	uxth	r1, r3
 8002432:	79bb      	ldrb	r3, [r7, #6]
 8002434:	b29a      	uxth	r2, r3
 8002436:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <I2Cx_WriteData+0x4c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	9302      	str	r3, [sp, #8]
 800243c:	2301      	movs	r3, #1
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	1d7b      	adds	r3, r7, #5
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2301      	movs	r3, #1
 8002446:	4808      	ldr	r0, [pc, #32]	; (8002468 <I2Cx_WriteData+0x50>)
 8002448:	f002 fc98 	bl	8004d7c <HAL_I2C_Mem_Write>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002456:	f000 f863 	bl	8002520 <I2Cx_Error>
  }        
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000168 	.word	0x20000168
 8002468:	20001310 	.word	0x20001310

0800246c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af04      	add	r7, sp, #16
 8002472:	4603      	mov	r3, r0
 8002474:	460a      	mov	r2, r1
 8002476:	71fb      	strb	r3, [r7, #7]
 8002478:	4613      	mov	r3, r2
 800247a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	b299      	uxth	r1, r3
 8002488:	79bb      	ldrb	r3, [r7, #6]
 800248a:	b29a      	uxth	r2, r3
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <I2Cx_ReadData+0x50>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	9302      	str	r3, [sp, #8]
 8002492:	2301      	movs	r3, #1
 8002494:	9301      	str	r3, [sp, #4]
 8002496:	f107 030e 	add.w	r3, r7, #14
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	2301      	movs	r3, #1
 800249e:	4808      	ldr	r0, [pc, #32]	; (80024c0 <I2Cx_ReadData+0x54>)
 80024a0:	f002 fd66 	bl	8004f70 <HAL_I2C_Mem_Read>
 80024a4:	4603      	mov	r3, r0
 80024a6:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80024a8:	7bfb      	ldrb	r3, [r7, #15]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80024ae:	f000 f837 	bl	8002520 <I2Cx_Error>
  
  }
  return value;
 80024b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20000168 	.word	0x20000168
 80024c0:	20001310 	.word	0x20001310

080024c4 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af04      	add	r7, sp, #16
 80024ca:	603a      	str	r2, [r7, #0]
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	71fb      	strb	r3, [r7, #7]
 80024d2:	460b      	mov	r3, r1
 80024d4:	71bb      	strb	r3, [r7, #6]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	b299      	uxth	r1, r3
 80024e2:	79bb      	ldrb	r3, [r7, #6]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <I2Cx_ReadBuffer+0x54>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	9302      	str	r3, [sp, #8]
 80024ec:	88bb      	ldrh	r3, [r7, #4]
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2301      	movs	r3, #1
 80024f6:	4809      	ldr	r0, [pc, #36]	; (800251c <I2Cx_ReadBuffer+0x58>)
 80024f8:	f002 fd3a 	bl	8004f70 <HAL_I2C_Mem_Read>
 80024fc:	4603      	mov	r3, r0
 80024fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002506:	2300      	movs	r3, #0
 8002508:	e002      	b.n	8002510 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800250a:	f000 f809 	bl	8002520 <I2Cx_Error>

    return 1;
 800250e:	2301      	movs	r3, #1
  }
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000168 	.word	0x20000168
 800251c:	20001310 	.word	0x20001310

08002520 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002524:	4803      	ldr	r0, [pc, #12]	; (8002534 <I2Cx_Error+0x14>)
 8002526:	f002 fbe5 	bl	8004cf4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 800252a:	f7ff ff11 	bl	8002350 <I2Cx_Init>
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20001310 	.word	0x20001310

08002538 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800253c:	4819      	ldr	r0, [pc, #100]	; (80025a4 <SPIx_Init+0x6c>)
 800253e:	f005 f9ca 	bl	80078d6 <HAL_SPI_GetState>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d12b      	bne.n	80025a0 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <SPIx_Init+0x6c>)
 800254a:	4a17      	ldr	r2, [pc, #92]	; (80025a8 <SPIx_Init+0x70>)
 800254c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <SPIx_Init+0x6c>)
 8002550:	2218      	movs	r2, #24
 8002552:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <SPIx_Init+0x6c>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <SPIx_Init+0x6c>)
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002560:	4b10      	ldr	r3, [pc, #64]	; (80025a4 <SPIx_Init+0x6c>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <SPIx_Init+0x6c>)
 8002568:	2200      	movs	r2, #0
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 800256c:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <SPIx_Init+0x6c>)
 800256e:	2207      	movs	r2, #7
 8002570:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <SPIx_Init+0x6c>)
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002578:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <SPIx_Init+0x6c>)
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <SPIx_Init+0x6c>)
 8002580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002584:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <SPIx_Init+0x6c>)
 8002588:	2200      	movs	r2, #0
 800258a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <SPIx_Init+0x6c>)
 800258e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002592:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002594:	4803      	ldr	r0, [pc, #12]	; (80025a4 <SPIx_Init+0x6c>)
 8002596:	f000 f853 	bl	8002640 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800259a:	4802      	ldr	r0, [pc, #8]	; (80025a4 <SPIx_Init+0x6c>)
 800259c:	f004 fc11 	bl	8006dc2 <HAL_SPI_Init>
  } 
}
 80025a0:	bf00      	nop
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20001364 	.word	0x20001364
 80025a8:	40015000 	.word	0x40015000

080025ac <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <SPIx_Read+0x38>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f107 0108 	add.w	r1, r7, #8
 80025c6:	4808      	ldr	r0, [pc, #32]	; (80025e8 <SPIx_Read+0x3c>)
 80025c8:	f004 fdf8 	bl	80071bc <HAL_SPI_Receive>
 80025cc:	4603      	mov	r3, r0
 80025ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80025d6:	f000 f827 	bl	8002628 <SPIx_Error>
  }
  
  return readvalue;
 80025da:	68bb      	ldr	r3, [r7, #8]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	2000016c 	.word	0x2000016c
 80025e8:	20001364 	.word	0x20001364

080025ec <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <SPIx_Write+0x34>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1db9      	adds	r1, r7, #6
 8002600:	2201      	movs	r2, #1
 8002602:	4808      	ldr	r0, [pc, #32]	; (8002624 <SPIx_Write+0x38>)
 8002604:	f004 fc84 	bl	8006f10 <HAL_SPI_Transmit>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002612:	f000 f809 	bl	8002628 <SPIx_Error>
  }
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	2000016c 	.word	0x2000016c
 8002624:	20001364 	.word	0x20001364

08002628 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800262c:	4803      	ldr	r0, [pc, #12]	; (800263c <SPIx_Error+0x14>)
 800262e:	f004 fc33 	bl	8006e98 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002632:	f7ff ff81 	bl	8002538 <SPIx_Init>
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20001364 	.word	0x20001364

08002640 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	4b17      	ldr	r3, [pc, #92]	; (80026ac <SPIx_MspInit+0x6c>)
 800264e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002650:	4a16      	ldr	r2, [pc, #88]	; (80026ac <SPIx_MspInit+0x6c>)
 8002652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002656:	6453      	str	r3, [r2, #68]	; 0x44
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <SPIx_MspInit+0x6c>)
 800265a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <SPIx_MspInit+0x6c>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4a0f      	ldr	r2, [pc, #60]	; (80026ac <SPIx_MspInit+0x6c>)
 800266e:	f043 0320 	orr.w	r3, r3, #32
 8002672:	6313      	str	r3, [r2, #48]	; 0x30
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <SPIx_MspInit+0x6c>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f003 0320 	and.w	r3, r3, #32
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002680:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002684:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002686:	2302      	movs	r3, #2
 8002688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800268a:	2302      	movs	r3, #2
 800268c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800268e:	2301      	movs	r3, #1
 8002690:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002692:	2305      	movs	r3, #5
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	4619      	mov	r1, r3
 800269c:	4804      	ldr	r0, [pc, #16]	; (80026b0 <SPIx_MspInit+0x70>)
 800269e:	f002 f805 	bl	80046ac <HAL_GPIO_Init>
}
 80026a2:	bf00      	nop
 80026a4:	3728      	adds	r7, #40	; 0x28
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40021400 	.word	0x40021400

080026b4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b088      	sub	sp, #32
 80026b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80026ba:	4b36      	ldr	r3, [pc, #216]	; (8002794 <LCD_IO_Init+0xe0>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d164      	bne.n	800278c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80026c2:	4b34      	ldr	r3, [pc, #208]	; (8002794 <LCD_IO_Init+0xe0>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	4b32      	ldr	r3, [pc, #200]	; (8002798 <LCD_IO_Init+0xe4>)
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	4a31      	ldr	r2, [pc, #196]	; (8002798 <LCD_IO_Init+0xe4>)
 80026d2:	f043 0308 	orr.w	r3, r3, #8
 80026d6:	6313      	str	r3, [r2, #48]	; 0x30
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <LCD_IO_Init+0xe4>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80026e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026ea:	2301      	movs	r3, #1
 80026ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026f2:	2302      	movs	r3, #2
 80026f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80026f6:	f107 030c 	add.w	r3, r7, #12
 80026fa:	4619      	mov	r1, r3
 80026fc:	4827      	ldr	r0, [pc, #156]	; (800279c <LCD_IO_Init+0xe8>)
 80026fe:	f001 ffd5 	bl	80046ac <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	607b      	str	r3, [r7, #4]
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <LCD_IO_Init+0xe4>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a23      	ldr	r2, [pc, #140]	; (8002798 <LCD_IO_Init+0xe4>)
 800270c:	f043 0308 	orr.w	r3, r3, #8
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <LCD_IO_Init+0xe4>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	607b      	str	r3, [r7, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800271e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002722:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800272c:	2302      	movs	r3, #2
 800272e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	4619      	mov	r1, r3
 8002736:	4819      	ldr	r0, [pc, #100]	; (800279c <LCD_IO_Init+0xe8>)
 8002738:	f001 ffb8 	bl	80046ac <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	4b15      	ldr	r3, [pc, #84]	; (8002798 <LCD_IO_Init+0xe4>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <LCD_IO_Init+0xe4>)
 8002746:	f043 0304 	orr.w	r3, r3, #4
 800274a:	6313      	str	r3, [r2, #48]	; 0x30
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <LCD_IO_Init+0xe4>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002758:	2304      	movs	r3, #4
 800275a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800275c:	2301      	movs	r3, #1
 800275e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002764:	2302      	movs	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002768:	f107 030c 	add.w	r3, r7, #12
 800276c:	4619      	mov	r1, r3
 800276e:	480c      	ldr	r0, [pc, #48]	; (80027a0 <LCD_IO_Init+0xec>)
 8002770:	f001 ff9c 	bl	80046ac <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002774:	2200      	movs	r2, #0
 8002776:	2104      	movs	r1, #4
 8002778:	4809      	ldr	r0, [pc, #36]	; (80027a0 <LCD_IO_Init+0xec>)
 800277a:	f002 f943 	bl	8004a04 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800277e:	2201      	movs	r2, #1
 8002780:	2104      	movs	r1, #4
 8002782:	4807      	ldr	r0, [pc, #28]	; (80027a0 <LCD_IO_Init+0xec>)
 8002784:	f002 f93e 	bl	8004a04 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002788:	f7ff fed6 	bl	8002538 <SPIx_Init>
  }
}
 800278c:	bf00      	nop
 800278e:	3720      	adds	r7, #32
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	200013bc 	.word	0x200013bc
 8002798:	40023800 	.word	0x40023800
 800279c:	40020c00 	.word	0x40020c00
 80027a0:	40020800 	.word	0x40020800

080027a4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80027ae:	2201      	movs	r2, #1
 80027b0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027b4:	480a      	ldr	r0, [pc, #40]	; (80027e0 <LCD_IO_WriteData+0x3c>)
 80027b6:	f002 f925 	bl	8004a04 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80027ba:	2200      	movs	r2, #0
 80027bc:	2104      	movs	r1, #4
 80027be:	4809      	ldr	r0, [pc, #36]	; (80027e4 <LCD_IO_WriteData+0x40>)
 80027c0:	f002 f920 	bl	8004a04 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ff10 	bl	80025ec <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80027cc:	2201      	movs	r2, #1
 80027ce:	2104      	movs	r1, #4
 80027d0:	4804      	ldr	r0, [pc, #16]	; (80027e4 <LCD_IO_WriteData+0x40>)
 80027d2:	f002 f917 	bl	8004a04 <HAL_GPIO_WritePin>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40020c00 	.word	0x40020c00
 80027e4:	40020800 	.word	0x40020800

080027e8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80027f2:	2200      	movs	r2, #0
 80027f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027f8:	480a      	ldr	r0, [pc, #40]	; (8002824 <LCD_IO_WriteReg+0x3c>)
 80027fa:	f002 f903 	bl	8004a04 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80027fe:	2200      	movs	r2, #0
 8002800:	2104      	movs	r1, #4
 8002802:	4809      	ldr	r0, [pc, #36]	; (8002828 <LCD_IO_WriteReg+0x40>)
 8002804:	f002 f8fe 	bl	8004a04 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	b29b      	uxth	r3, r3
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff feed 	bl	80025ec <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002812:	2201      	movs	r2, #1
 8002814:	2104      	movs	r1, #4
 8002816:	4804      	ldr	r0, [pc, #16]	; (8002828 <LCD_IO_WriteReg+0x40>)
 8002818:	f002 f8f4 	bl	8004a04 <HAL_GPIO_WritePin>
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40020c00 	.word	0x40020c00
 8002828:	40020800 	.word	0x40020800

0800282c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	460a      	mov	r2, r1
 8002836:	80fb      	strh	r3, [r7, #6]
 8002838:	4613      	mov	r3, r2
 800283a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002840:	2200      	movs	r2, #0
 8002842:	2104      	movs	r1, #4
 8002844:	4810      	ldr	r0, [pc, #64]	; (8002888 <LCD_IO_ReadData+0x5c>)
 8002846:	f002 f8dd 	bl	8004a04 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800284a:	2200      	movs	r2, #0
 800284c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002850:	480e      	ldr	r0, [pc, #56]	; (800288c <LCD_IO_ReadData+0x60>)
 8002852:	f002 f8d7 	bl	8004a04 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002856:	88fb      	ldrh	r3, [r7, #6]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff fec7 	bl	80025ec <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800285e:	797b      	ldrb	r3, [r7, #5]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fea3 	bl	80025ac <SPIx_Read>
 8002866:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002868:	2201      	movs	r2, #1
 800286a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800286e:	4807      	ldr	r0, [pc, #28]	; (800288c <LCD_IO_ReadData+0x60>)
 8002870:	f002 f8c8 	bl	8004a04 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002874:	2201      	movs	r2, #1
 8002876:	2104      	movs	r1, #4
 8002878:	4803      	ldr	r0, [pc, #12]	; (8002888 <LCD_IO_ReadData+0x5c>)
 800287a:	f002 f8c3 	bl	8004a04 <HAL_GPIO_WritePin>
  
  return readvalue;
 800287e:	68fb      	ldr	r3, [r7, #12]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40020800 	.word	0x40020800
 800288c:	40020c00 	.word	0x40020c00

08002890 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f001 f97d 	bl	8003b98 <HAL_Delay>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80028aa:	f7ff fd51 	bl	8002350 <I2Cx_Init>
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80028b6:	f7ff fd7d 	bl	80023b4 <I2Cx_ITConfig>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}

080028be <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	4603      	mov	r3, r0
 80028c6:	71fb      	strb	r3, [r7, #7]
 80028c8:	460b      	mov	r3, r1
 80028ca:	71bb      	strb	r3, [r7, #6]
 80028cc:	4613      	mov	r3, r2
 80028ce:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80028d0:	797a      	ldrb	r2, [r7, #5]
 80028d2:	79b9      	ldrb	r1, [r7, #6]
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff fd9e 	bl	8002418 <I2Cx_WriteData>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	460a      	mov	r2, r1
 80028ee:	71fb      	strb	r3, [r7, #7]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80028f4:	79ba      	ldrb	r2, [r7, #6]
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fdb6 	bl	800246c <I2Cx_ReadData>
 8002900:	4603      	mov	r3, r0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800290a:	b580      	push	{r7, lr}
 800290c:	b082      	sub	sp, #8
 800290e:	af00      	add	r7, sp, #0
 8002910:	603a      	str	r2, [r7, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	4603      	mov	r3, r0
 8002916:	71fb      	strb	r3, [r7, #7]
 8002918:	460b      	mov	r3, r1
 800291a:	71bb      	strb	r3, [r7, #6]
 800291c:	4613      	mov	r3, r2
 800291e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002920:	88bb      	ldrh	r3, [r7, #4]
 8002922:	79b9      	ldrb	r1, [r7, #6]
 8002924:	79f8      	ldrb	r0, [r7, #7]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	f7ff fdcc 	bl	80024c4 <I2Cx_ReadBuffer>
 800292c:	4603      	mov	r3, r0
 800292e:	b29b      	uxth	r3, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f001 f929 	bl	8003b98 <HAL_Delay>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
	...

08002950 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <BSP_LCD_Init_Flipped+0x14>)
 8002956:	2201      	movs	r2, #1
 8002958:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 800295a:	f000 f805 	bl	8002968 <BSP_LCD_Init>
 800295e:	4603      	mov	r3, r0
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}
 8002964:	200014f8 	.word	0x200014f8

08002968 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800296c:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <BSP_LCD_Init+0xbc>)
 800296e:	4a2e      	ldr	r2, [pc, #184]	; (8002a28 <BSP_LCD_Init+0xc0>)
 8002970:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <BSP_LCD_Init+0xbc>)
 8002974:	2209      	movs	r2, #9
 8002976:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002978:	4b2a      	ldr	r3, [pc, #168]	; (8002a24 <BSP_LCD_Init+0xbc>)
 800297a:	2201      	movs	r2, #1
 800297c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800297e:	4b29      	ldr	r3, [pc, #164]	; (8002a24 <BSP_LCD_Init+0xbc>)
 8002980:	221d      	movs	r2, #29
 8002982:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <BSP_LCD_Init+0xbc>)
 8002986:	2203      	movs	r2, #3
 8002988:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800298a:	4b26      	ldr	r3, [pc, #152]	; (8002a24 <BSP_LCD_Init+0xbc>)
 800298c:	f240 120d 	movw	r2, #269	; 0x10d
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002992:	4b24      	ldr	r3, [pc, #144]	; (8002a24 <BSP_LCD_Init+0xbc>)
 8002994:	f240 1243 	movw	r2, #323	; 0x143
 8002998:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800299a:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <BSP_LCD_Init+0xbc>)
 800299c:	f240 1217 	movw	r2, #279	; 0x117
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <BSP_LCD_Init+0xbc>)
 80029a4:	f240 1247 	movw	r2, #327	; 0x147
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80029aa:	4b1e      	ldr	r3, [pc, #120]	; (8002a24 <BSP_LCD_Init+0xbc>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80029b2:	4b1c      	ldr	r3, [pc, #112]	; (8002a24 <BSP_LCD_Init+0xbc>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <BSP_LCD_Init+0xbc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80029c2:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <BSP_LCD_Init+0xc4>)
 80029c4:	2208      	movs	r2, #8
 80029c6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80029c8:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <BSP_LCD_Init+0xc4>)
 80029ca:	22c0      	movs	r2, #192	; 0xc0
 80029cc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80029ce:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <BSP_LCD_Init+0xc4>)
 80029d0:	2204      	movs	r2, #4
 80029d2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80029d4:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <BSP_LCD_Init+0xc4>)
 80029d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029da:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80029dc:	4813      	ldr	r0, [pc, #76]	; (8002a2c <BSP_LCD_Init+0xc4>)
 80029de:	f003 ffa7 	bl	8006930 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80029e2:	4b10      	ldr	r3, [pc, #64]	; (8002a24 <BSP_LCD_Init+0xbc>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <BSP_LCD_Init+0xbc>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <BSP_LCD_Init+0xbc>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <BSP_LCD_Init+0xbc>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80029fa:	f000 fb77 	bl	80030ec <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80029fe:	4809      	ldr	r0, [pc, #36]	; (8002a24 <BSP_LCD_Init+0xbc>)
 8002a00:	f003 f842 	bl	8005a88 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002a04:	4b0a      	ldr	r3, [pc, #40]	; (8002a30 <BSP_LCD_Init+0xc8>)
 8002a06:	4a0b      	ldr	r2, [pc, #44]	; (8002a34 <BSP_LCD_Init+0xcc>)
 8002a08:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002a0a:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <BSP_LCD_Init+0xc8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002a12:	f000 fd79 	bl	8003508 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002a16:	4808      	ldr	r0, [pc, #32]	; (8002a38 <BSP_LCD_Init+0xd0>)
 8002a18:	f000 f8ce 	bl	8002bb8 <BSP_LCD_SetFont>

  return LCD_OK;
 8002a1c:	2300      	movs	r3, #0
}  
 8002a1e:	4618      	mov	r0, r3
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200013c0 	.word	0x200013c0
 8002a28:	40016800 	.word	0x40016800
 8002a2c:	200014a8 	.word	0x200014a8
 8002a30:	200014f4 	.word	0x200014f4
 8002a34:	20000100 	.word	0x20000100
 8002a38:	20000170 	.word	0x20000170

08002a3c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <BSP_LCD_GetXSize+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	4798      	blx	r3
 8002a48:	4603      	mov	r3, r0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200014f4 	.word	0x200014f4

08002a54 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <BSP_LCD_GetYSize+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5e:	4798      	blx	r3
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	200014f4 	.word	0x200014f4

08002a6c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b090      	sub	sp, #64	; 0x40
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002a7c:	f7ff ffde 	bl	8002a3c <BSP_LCD_GetXSize>
 8002a80:	4603      	mov	r3, r0
 8002a82:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002a88:	f7ff ffe4 	bl	8002a54 <BSP_LCD_GetYSize>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002a98:	23ff      	movs	r3, #255	; 0xff
 8002a9a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002ab2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002ab8:	2307      	movs	r3, #7
 8002aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002abc:	f7ff ffbe 	bl	8002a3c <BSP_LCD_GetXSize>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002ac4:	f7ff ffc6 	bl	8002a54 <BSP_LCD_GetYSize>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002acc:	88fa      	ldrh	r2, [r7, #6]
 8002ace:	f107 030c 	add.w	r3, r7, #12
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4814      	ldr	r0, [pc, #80]	; (8002b28 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002ad6:	f003 f8b1 	bl	8005c3c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	4913      	ldr	r1, [pc, #76]	; (8002b2c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002ade:	4613      	mov	r3, r2
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	3304      	adds	r3, #4
 8002aea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002af0:	88fa      	ldrh	r2, [r7, #6]
 8002af2:	490e      	ldr	r1, [pc, #56]	; (8002b2c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002af4:	4613      	mov	r3, r2
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3308      	adds	r3, #8
 8002b00:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002b02:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002b04:	88fa      	ldrh	r2, [r7, #6]
 8002b06:	4909      	ldr	r1, [pc, #36]	; (8002b2c <BSP_LCD_LayerDefaultInit+0xc0>)
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002b16:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002b18:	4803      	ldr	r0, [pc, #12]	; (8002b28 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002b1a:	f003 f8cd 	bl	8005cb8 <HAL_LTDC_EnableDither>
}
 8002b1e:	bf00      	nop
 8002b20:	3740      	adds	r7, #64	; 0x40
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200013c0 	.word	0x200013c0
 8002b2c:	200014dc 	.word	0x200014dc
 8002b30:	20000170 	.word	0x20000170

08002b34 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <BSP_LCD_SelectLayer+0x1c>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6013      	str	r3, [r2, #0]
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	200014d8 	.word	0x200014d8

08002b54 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <BSP_LCD_SetTextColor+0x28>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4907      	ldr	r1, [pc, #28]	; (8002b80 <BSP_LCD_SetTextColor+0x2c>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	601a      	str	r2, [r3, #0]
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	200014d8 	.word	0x200014d8
 8002b80:	200014dc 	.word	0x200014dc

08002b84 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <BSP_LCD_SetBackColor+0x2c>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <BSP_LCD_SetBackColor+0x30>)
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	200014d8 	.word	0x200014d8
 8002bb4:	200014dc 	.word	0x200014dc

08002bb8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <BSP_LCD_SetFont+0x2c>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4908      	ldr	r1, [pc, #32]	; (8002be8 <BSP_LCD_SetFont+0x30>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	200014d8 	.word	0x200014d8
 8002be8:	200014dc 	.word	0x200014dc

08002bec <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <BSP_LCD_Clear+0x48>)
 8002bf6:	681c      	ldr	r4, [r3, #0]
 8002bf8:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <BSP_LCD_Clear+0x48>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0e      	ldr	r2, [pc, #56]	; (8002c38 <BSP_LCD_Clear+0x4c>)
 8002bfe:	2134      	movs	r1, #52	; 0x34
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	335c      	adds	r3, #92	; 0x5c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461e      	mov	r6, r3
 8002c0c:	f7ff ff16 	bl	8002a3c <BSP_LCD_GetXSize>
 8002c10:	4605      	mov	r5, r0
 8002c12:	f7ff ff1f 	bl	8002a54 <BSP_LCD_GetYSize>
 8002c16:	4602      	mov	r2, r0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	462a      	mov	r2, r5
 8002c24:	4631      	mov	r1, r6
 8002c26:	4620      	mov	r0, r4
 8002c28:	f000 fc36 	bl	8003498 <FillBuffer>
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	200014d8 	.word	0x200014d8
 8002c38:	200013c0 	.word	0x200013c0

08002c3c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	80fb      	strh	r3, [r7, #6]
 8002c46:	460b      	mov	r3, r1
 8002c48:	80bb      	strh	r3, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c4e:	4b1b      	ldr	r3, [pc, #108]	; (8002cbc <BSP_LCD_DisplayChar+0x80>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	491b      	ldr	r1, [pc, #108]	; (8002cc0 <BSP_LCD_DisplayChar+0x84>)
 8002c54:	4613      	mov	r3, r2
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4413      	add	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3308      	adds	r3, #8
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <BSP_LCD_DisplayChar+0x80>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4c14      	ldr	r4, [pc, #80]	; (8002cc0 <BSP_LCD_DisplayChar+0x84>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4423      	add	r3, r4
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c80:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002c84:	4b0d      	ldr	r3, [pc, #52]	; (8002cbc <BSP_LCD_DisplayChar+0x80>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4c0d      	ldr	r4, [pc, #52]	; (8002cc0 <BSP_LCD_DisplayChar+0x84>)
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4423      	add	r3, r4
 8002c94:	3308      	adds	r3, #8
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	889b      	ldrh	r3, [r3, #4]
 8002c9a:	3307      	adds	r3, #7
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	da00      	bge.n	8002ca2 <BSP_LCD_DisplayChar+0x66>
 8002ca0:	3307      	adds	r3, #7
 8002ca2:	10db      	asrs	r3, r3, #3
 8002ca4:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ca8:	18ca      	adds	r2, r1, r3
 8002caa:	88b9      	ldrh	r1, [r7, #4]
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fb38 	bl	8003324 <DrawChar>
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	200014d8 	.word	0x200014d8
 8002cc0:	200014dc 	.word	0x200014dc

08002cc4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002cc4:	b5b0      	push	{r4, r5, r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60ba      	str	r2, [r7, #8]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	81fb      	strh	r3, [r7, #14]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	81bb      	strh	r3, [r7, #12]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	83fb      	strh	r3, [r7, #30]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002cee:	e002      	b.n	8002cf6 <BSP_LCD_DisplayStringAt+0x32>
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	617a      	str	r2, [r7, #20]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f6      	bne.n	8002cf0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002d02:	f7ff fe9b 	bl	8002a3c <BSP_LCD_GetXSize>
 8002d06:	4601      	mov	r1, r0
 8002d08:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <BSP_LCD_DisplayStringAt+0x174>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	484b      	ldr	r0, [pc, #300]	; (8002e3c <BSP_LCD_DisplayStringAt+0x178>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4403      	add	r3, r0
 8002d18:	3308      	adds	r3, #8
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	889b      	ldrh	r3, [r3, #4]
 8002d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d22:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	d01c      	beq.n	8002d64 <BSP_LCD_DisplayStringAt+0xa0>
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	dc33      	bgt.n	8002d96 <BSP_LCD_DisplayStringAt+0xd2>
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d002      	beq.n	8002d38 <BSP_LCD_DisplayStringAt+0x74>
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d019      	beq.n	8002d6a <BSP_LCD_DisplayStringAt+0xa6>
 8002d36:	e02e      	b.n	8002d96 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	1ad1      	subs	r1, r2, r3
 8002d3e:	4b3e      	ldr	r3, [pc, #248]	; (8002e38 <BSP_LCD_DisplayStringAt+0x174>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	483e      	ldr	r0, [pc, #248]	; (8002e3c <BSP_LCD_DisplayStringAt+0x178>)
 8002d44:	4613      	mov	r3, r2
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4403      	add	r3, r0
 8002d4e:	3308      	adds	r3, #8
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	889b      	ldrh	r3, [r3, #4]
 8002d54:	fb01 f303 	mul.w	r3, r1, r3
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	89fb      	ldrh	r3, [r7, #14]
 8002d5e:	4413      	add	r3, r2
 8002d60:	83fb      	strh	r3, [r7, #30]
      break;
 8002d62:	e01b      	b.n	8002d9c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002d64:	89fb      	ldrh	r3, [r7, #14]
 8002d66:	83fb      	strh	r3, [r7, #30]
      break;
 8002d68:	e018      	b.n	8002d9c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	b299      	uxth	r1, r3
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <BSP_LCD_DisplayStringAt+0x174>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4831      	ldr	r0, [pc, #196]	; (8002e3c <BSP_LCD_DisplayStringAt+0x178>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4403      	add	r3, r0
 8002d82:	3308      	adds	r3, #8
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	889b      	ldrh	r3, [r3, #4]
 8002d88:	fb11 f303 	smulbb	r3, r1, r3
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	89fb      	ldrh	r3, [r7, #14]
 8002d90:	4413      	add	r3, r2
 8002d92:	83fb      	strh	r3, [r7, #30]
      break;
 8002d94:	e002      	b.n	8002d9c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002d96:	89fb      	ldrh	r3, [r7, #14]
 8002d98:	83fb      	strh	r3, [r7, #30]
      break;
 8002d9a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002d9c:	e01a      	b.n	8002dd4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	89b9      	ldrh	r1, [r7, #12]
 8002da4:	8bfb      	ldrh	r3, [r7, #30]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff ff48 	bl	8002c3c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002dac:	4b22      	ldr	r3, [pc, #136]	; (8002e38 <BSP_LCD_DisplayStringAt+0x174>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4922      	ldr	r1, [pc, #136]	; (8002e3c <BSP_LCD_DisplayStringAt+0x178>)
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	889a      	ldrh	r2, [r3, #4]
 8002dc2:	8bfb      	ldrh	r3, [r7, #30]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
    i++;
 8002dce:	8bbb      	ldrh	r3, [r7, #28]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2dc      	uxtb	r4, r3
 8002de2:	f7ff fe2b 	bl	8002a3c <BSP_LCD_GetXSize>
 8002de6:	8bb9      	ldrh	r1, [r7, #28]
 8002de8:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <BSP_LCD_DisplayStringAt+0x174>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4d13      	ldr	r5, [pc, #76]	; (8002e3c <BSP_LCD_DisplayStringAt+0x178>)
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	442b      	add	r3, r5
 8002df8:	3308      	adds	r3, #8
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	889b      	ldrh	r3, [r3, #4]
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	1ac3      	subs	r3, r0, r3
 8002e04:	b299      	uxth	r1, r3
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <BSP_LCD_DisplayStringAt+0x174>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	480c      	ldr	r0, [pc, #48]	; (8002e3c <BSP_LCD_DisplayStringAt+0x178>)
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4403      	add	r3, r0
 8002e16:	3308      	adds	r3, #8
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	889b      	ldrh	r3, [r3, #4]
 8002e1c:	4299      	cmp	r1, r3
 8002e1e:	bf2c      	ite	cs
 8002e20:	2301      	movcs	r3, #1
 8002e22:	2300      	movcc	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	4023      	ands	r3, r4
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1b7      	bne.n	8002d9e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002e2e:	bf00      	nop
 8002e30:	bf00      	nop
 8002e32:	3720      	adds	r7, #32
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bdb0      	pop	{r4, r5, r7, pc}
 8002e38:	200014d8 	.word	0x200014d8
 8002e3c:	200014dc 	.word	0x200014dc

08002e40 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b08b      	sub	sp, #44	; 0x2c
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4604      	mov	r4, r0
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4623      	mov	r3, r4
 8002e50:	80fb      	strh	r3, [r7, #6]
 8002e52:	4603      	mov	r3, r0
 8002e54:	80bb      	strh	r3, [r7, #4]
 8002e56:	460b      	mov	r3, r1
 8002e58:	807b      	strh	r3, [r7, #2]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002e5e:	2300      	movs	r3, #0
 8002e60:	823b      	strh	r3, [r7, #16]
 8002e62:	2300      	movs	r3, #0
 8002e64:	81fb      	strh	r3, [r7, #14]
 8002e66:	2300      	movs	r3, #0
 8002e68:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e6e:	2300      	movs	r3, #0
 8002e70:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e72:	2300      	movs	r3, #0
 8002e74:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002e76:	2300      	movs	r3, #0
 8002e78:	83fb      	strh	r3, [r7, #30]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	83bb      	strh	r3, [r7, #28]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	837b      	strh	r3, [r7, #26]
 8002e82:	2300      	movs	r3, #0
 8002e84:	833b      	strh	r3, [r7, #24]
 8002e86:	2300      	movs	r3, #0
 8002e88:	82fb      	strh	r3, [r7, #22]
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	88fb      	ldrh	r3, [r7, #6]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bfb8      	it	lt
 8002e9c:	425b      	neglt	r3, r3
 8002e9e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002ea0:	883a      	ldrh	r2, [r7, #0]
 8002ea2:	88bb      	ldrh	r3, [r7, #4]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bfb8      	it	lt
 8002eaa:	425b      	neglt	r3, r3
 8002eac:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8002eb2:	88bb      	ldrh	r3, [r7, #4]
 8002eb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 8002eb6:	887a      	ldrh	r2, [r7, #2]
 8002eb8:	88fb      	ldrh	r3, [r7, #6]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d304      	bcc.n	8002ec8 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	843b      	strh	r3, [r7, #32]
 8002ec6:	e005      	b.n	8002ed4 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ecc:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed2:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002ed4:	883a      	ldrh	r2, [r7, #0]
 8002ed6:	88bb      	ldrh	r3, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d304      	bcc.n	8002ee6 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002edc:	2301      	movs	r3, #1
 8002ede:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	83bb      	strh	r3, [r7, #28]
 8002ee4:	e005      	b.n	8002ef2 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eea:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ef0:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002ef2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	db10      	blt.n	8002f20 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002efe:	2300      	movs	r3, #0
 8002f00:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002f02:	2300      	movs	r3, #0
 8002f04:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002f06:	8a3b      	ldrh	r3, [r7, #16]
 8002f08:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002f0a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f0e:	0fda      	lsrs	r2, r3, #31
 8002f10:	4413      	add	r3, r2
 8002f12:	105b      	asrs	r3, r3, #1
 8002f14:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002f16:	89fb      	ldrh	r3, [r7, #14]
 8002f18:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002f1a:	8a3b      	ldrh	r3, [r7, #16]
 8002f1c:	82bb      	strh	r3, [r7, #20]
 8002f1e:	e00f      	b.n	8002f40 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002f20:	2300      	movs	r3, #0
 8002f22:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002f24:	2300      	movs	r3, #0
 8002f26:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002f28:	89fb      	ldrh	r3, [r7, #14]
 8002f2a:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002f2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f30:	0fda      	lsrs	r2, r3, #31
 8002f32:	4413      	add	r3, r2
 8002f34:	105b      	asrs	r3, r3, #1
 8002f36:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002f38:	8a3b      	ldrh	r3, [r7, #16]
 8002f3a:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002f3c:	89fb      	ldrh	r3, [r7, #14]
 8002f3e:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002f40:	2300      	movs	r3, #0
 8002f42:	827b      	strh	r3, [r7, #18]
 8002f44:	e037      	b.n	8002fb6 <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002f46:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002f48:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <BSP_LCD_DrawLine+0x18c>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4c20      	ldr	r4, [pc, #128]	; (8002fd0 <BSP_LCD_DrawLine+0x190>)
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4423      	add	r3, r4
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	f000 f99b 	bl	8003298 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8002f62:	8b3a      	ldrh	r2, [r7, #24]
 8002f64:	8afb      	ldrh	r3, [r7, #22]
 8002f66:	4413      	add	r3, r2
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002f6c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002f70:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	db0e      	blt.n	8002f96 <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002f78:	8b3a      	ldrh	r2, [r7, #24]
 8002f7a:	8b7b      	ldrh	r3, [r7, #26]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002f82:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f86:	4413      	add	r3, r2
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002f8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f8e:	8bfb      	ldrh	r3, [r7, #30]
 8002f90:	4413      	add	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002f96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f98:	8c3b      	ldrh	r3, [r7, #32]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002fa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fa2:	8bbb      	ldrh	r3, [r7, #28]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002faa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	827b      	strh	r3, [r7, #18]
 8002fb6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	ddc1      	ble.n	8002f46 <BSP_LCD_DrawLine+0x106>
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
 8002fc6:	372c      	adds	r7, #44	; 0x2c
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd90      	pop	{r4, r7, pc}
 8002fcc:	200014d8 	.word	0x200014d8
 8002fd0:	200014dc 	.word	0x200014dc

08002fd4 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd8:	b086      	sub	sp, #24
 8002fda:	af02      	add	r7, sp, #8
 8002fdc:	4604      	mov	r4, r0
 8002fde:	4608      	mov	r0, r1
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4623      	mov	r3, r4
 8002fe6:	80fb      	strh	r3, [r7, #6]
 8002fe8:	4603      	mov	r3, r0
 8002fea:	80bb      	strh	r3, [r7, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	807b      	strh	r3, [r7, #2]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002ff8:	4b30      	ldr	r3, [pc, #192]	; (80030bc <BSP_LCD_FillRect+0xe8>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4930      	ldr	r1, [pc, #192]	; (80030c0 <BSP_LCD_FillRect+0xec>)
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fda2 	bl	8002b54 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <BSP_LCD_FillRect+0xf0>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d01b      	beq.n	8003050 <BSP_LCD_FillRect+0x7c>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +76800); //Rotate by 180°
 8003018:	4b28      	ldr	r3, [pc, #160]	; (80030bc <BSP_LCD_FillRect+0xe8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a2a      	ldr	r2, [pc, #168]	; (80030c8 <BSP_LCD_FillRect+0xf4>)
 800301e:	2134      	movs	r1, #52	; 0x34
 8003020:	fb01 f303 	mul.w	r3, r1, r3
 8003024:	4413      	add	r3, r2
 8003026:	335c      	adds	r3, #92	; 0x5c
 8003028:	681c      	ldr	r4, [r3, #0]
 800302a:	f7ff fd07 	bl	8002a3c <BSP_LCD_GetXSize>
 800302e:	4603      	mov	r3, r0
 8003030:	425b      	negs	r3, r3
 8003032:	88b9      	ldrh	r1, [r7, #4]
 8003034:	883a      	ldrh	r2, [r7, #0]
 8003036:	440a      	add	r2, r1
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	88f9      	ldrh	r1, [r7, #6]
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	440a      	add	r2, r1
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4423      	add	r3, r4
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	e013      	b.n	8003078 <BSP_LCD_FillRect+0xa4>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003050:	4b1a      	ldr	r3, [pc, #104]	; (80030bc <BSP_LCD_FillRect+0xe8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <BSP_LCD_FillRect+0xf4>)
 8003056:	2134      	movs	r1, #52	; 0x34
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	4413      	add	r3, r2
 800305e:	335c      	adds	r3, #92	; 0x5c
 8003060:	681c      	ldr	r4, [r3, #0]
 8003062:	f7ff fceb 	bl	8002a3c <BSP_LCD_GetXSize>
 8003066:	4602      	mov	r2, r0
 8003068:	88bb      	ldrh	r3, [r7, #4]
 800306a:	fb03 f202 	mul.w	r2, r3, r2
 800306e:	88fb      	ldrh	r3, [r7, #6]
 8003070:	4413      	add	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4423      	add	r3, r4
 8003076:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003078:	4b10      	ldr	r3, [pc, #64]	; (80030bc <BSP_LCD_FillRect+0xe8>)
 800307a:	681c      	ldr	r4, [r3, #0]
 800307c:	68fd      	ldr	r5, [r7, #12]
 800307e:	887e      	ldrh	r6, [r7, #2]
 8003080:	f8b7 8000 	ldrh.w	r8, [r7]
 8003084:	f7ff fcda 	bl	8002a3c <BSP_LCD_GetXSize>
 8003088:	4602      	mov	r2, r0
 800308a:	887b      	ldrh	r3, [r7, #2]
 800308c:	1ad1      	subs	r1, r2, r3
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <BSP_LCD_FillRect+0xe8>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	480b      	ldr	r0, [pc, #44]	; (80030c0 <BSP_LCD_FillRect+0xec>)
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4403      	add	r3, r0
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	9100      	str	r1, [sp, #0]
 80030a4:	4643      	mov	r3, r8
 80030a6:	4632      	mov	r2, r6
 80030a8:	4629      	mov	r1, r5
 80030aa:	4620      	mov	r0, r4
 80030ac:	f000 f9f4 	bl	8003498 <FillBuffer>
}
 80030b0:	bf00      	nop
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80030ba:	bf00      	nop
 80030bc:	200014d8 	.word	0x200014d8
 80030c0:	200014dc 	.word	0x200014dc
 80030c4:	200014f8 	.word	0x200014f8
 80030c8:	200013c0 	.word	0x200013c0

080030cc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <BSP_LCD_DisplayOn+0x1c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80030da:	4b03      	ldr	r3, [pc, #12]	; (80030e8 <BSP_LCD_DisplayOn+0x1c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4798      	blx	r3
  }
}
 80030e2:	bf00      	nop
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	200014f4 	.word	0x200014f4

080030ec <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
 80030f6:	4b61      	ldr	r3, [pc, #388]	; (800327c <BSP_LCD_MspInit+0x190>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	4a60      	ldr	r2, [pc, #384]	; (800327c <BSP_LCD_MspInit+0x190>)
 80030fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003100:	6453      	str	r3, [r2, #68]	; 0x44
 8003102:	4b5e      	ldr	r3, [pc, #376]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800310a:	623b      	str	r3, [r7, #32]
 800310c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	4b5a      	ldr	r3, [pc, #360]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a59      	ldr	r2, [pc, #356]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003118:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b57      	ldr	r3, [pc, #348]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	4b53      	ldr	r3, [pc, #332]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a52      	ldr	r2, [pc, #328]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <BSP_LCD_MspInit+0x190>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	61bb      	str	r3, [r7, #24]
 8003144:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	4b4c      	ldr	r3, [pc, #304]	; (800327c <BSP_LCD_MspInit+0x190>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4a4b      	ldr	r2, [pc, #300]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003150:	f043 0302 	orr.w	r3, r3, #2
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b49      	ldr	r3, [pc, #292]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	4b45      	ldr	r3, [pc, #276]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	4a44      	ldr	r2, [pc, #272]	; (800327c <BSP_LCD_MspInit+0x190>)
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	6313      	str	r3, [r2, #48]	; 0x30
 8003172:	4b42      	ldr	r3, [pc, #264]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
 8003182:	4b3e      	ldr	r3, [pc, #248]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	4a3d      	ldr	r2, [pc, #244]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003188:	f043 0308 	orr.w	r3, r3, #8
 800318c:	6313      	str	r3, [r2, #48]	; 0x30
 800318e:	4b3b      	ldr	r3, [pc, #236]	; (800327c <BSP_LCD_MspInit+0x190>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	4b37      	ldr	r3, [pc, #220]	; (800327c <BSP_LCD_MspInit+0x190>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	4a36      	ldr	r2, [pc, #216]	; (800327c <BSP_LCD_MspInit+0x190>)
 80031a4:	f043 0320 	orr.w	r3, r3, #32
 80031a8:	6313      	str	r3, [r2, #48]	; 0x30
 80031aa:	4b34      	ldr	r3, [pc, #208]	; (800327c <BSP_LCD_MspInit+0x190>)
 80031ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
 80031ba:	4b30      	ldr	r3, [pc, #192]	; (800327c <BSP_LCD_MspInit+0x190>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a2f      	ldr	r2, [pc, #188]	; (800327c <BSP_LCD_MspInit+0x190>)
 80031c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b2d      	ldr	r3, [pc, #180]	; (800327c <BSP_LCD_MspInit+0x190>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	607b      	str	r3, [r7, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80031d2:	f641 0358 	movw	r3, #6232	; 0x1858
 80031d6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80031d8:	2302      	movs	r3, #2
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80031e0:	2302      	movs	r3, #2
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80031e4:	230e      	movs	r3, #14
 80031e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80031e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031ec:	4619      	mov	r1, r3
 80031ee:	4824      	ldr	r0, [pc, #144]	; (8003280 <BSP_LCD_MspInit+0x194>)
 80031f0:	f001 fa5c 	bl	80046ac <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80031f4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80031fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fe:	4619      	mov	r1, r3
 8003200:	4820      	ldr	r0, [pc, #128]	; (8003284 <BSP_LCD_MspInit+0x198>)
 8003202:	f001 fa53 	bl	80046ac <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003206:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800320c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003210:	4619      	mov	r1, r3
 8003212:	481d      	ldr	r0, [pc, #116]	; (8003288 <BSP_LCD_MspInit+0x19c>)
 8003214:	f001 fa4a 	bl	80046ac <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003218:	2348      	movs	r3, #72	; 0x48
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800321c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003220:	4619      	mov	r1, r3
 8003222:	481a      	ldr	r0, [pc, #104]	; (800328c <BSP_LCD_MspInit+0x1a0>)
 8003224:	f001 fa42 	bl	80046ac <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800322e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003232:	4619      	mov	r1, r3
 8003234:	4816      	ldr	r0, [pc, #88]	; (8003290 <BSP_LCD_MspInit+0x1a4>)
 8003236:	f001 fa39 	bl	80046ac <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800323a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003244:	4619      	mov	r1, r3
 8003246:	4813      	ldr	r0, [pc, #76]	; (8003294 <BSP_LCD_MspInit+0x1a8>)
 8003248:	f001 fa30 	bl	80046ac <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800324c:	2303      	movs	r3, #3
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003250:	2309      	movs	r3, #9
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003258:	4619      	mov	r1, r3
 800325a:	480a      	ldr	r0, [pc, #40]	; (8003284 <BSP_LCD_MspInit+0x198>)
 800325c:	f001 fa26 	bl	80046ac <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003260:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326a:	4619      	mov	r1, r3
 800326c:	4809      	ldr	r0, [pc, #36]	; (8003294 <BSP_LCD_MspInit+0x1a8>)
 800326e:	f001 fa1d 	bl	80046ac <HAL_GPIO_Init>
}
 8003272:	bf00      	nop
 8003274:	3738      	adds	r7, #56	; 0x38
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
 8003280:	40020000 	.word	0x40020000
 8003284:	40020400 	.word	0x40020400
 8003288:	40020800 	.word	0x40020800
 800328c:	40020c00 	.word	0x40020c00
 8003290:	40021400 	.word	0x40021400
 8003294:	40021800 	.word	0x40021800

08003298 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	603a      	str	r2, [r7, #0]
 80032a2:	80fb      	strh	r3, [r7, #6]
 80032a4:	460b      	mov	r3, r1
 80032a6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 80032a8:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <BSP_LCD_DrawPixel+0x80>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d018      	beq.n	80032e2 <BSP_LCD_DrawPixel+0x4a>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (76800 - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 80032b0:	4b1a      	ldr	r3, [pc, #104]	; (800331c <BSP_LCD_DrawPixel+0x84>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1a      	ldr	r2, [pc, #104]	; (8003320 <BSP_LCD_DrawPixel+0x88>)
 80032b6:	2134      	movs	r1, #52	; 0x34
 80032b8:	fb01 f303 	mul.w	r3, r1, r3
 80032bc:	4413      	add	r3, r2
 80032be:	335c      	adds	r3, #92	; 0x5c
 80032c0:	681c      	ldr	r4, [r3, #0]
 80032c2:	88fd      	ldrh	r5, [r7, #6]
 80032c4:	f7ff fbba 	bl	8002a3c <BSP_LCD_GetXSize>
 80032c8:	4602      	mov	r2, r0
 80032ca:	88bb      	ldrh	r3, [r7, #4]
 80032cc:	fb02 f303 	mul.w	r3, r2, r3
 80032d0:	442b      	add	r3, r5
 80032d2:	f5c3 3396 	rsb	r3, r3, #76800	; 0x12c00
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4423      	add	r3, r4
 80032da:	461a      	mov	r2, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80032e0:	e015      	b.n	800330e <BSP_LCD_DrawPixel+0x76>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <BSP_LCD_DrawPixel+0x84>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a0e      	ldr	r2, [pc, #56]	; (8003320 <BSP_LCD_DrawPixel+0x88>)
 80032e8:	2134      	movs	r1, #52	; 0x34
 80032ea:	fb01 f303 	mul.w	r3, r1, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	335c      	adds	r3, #92	; 0x5c
 80032f2:	681c      	ldr	r4, [r3, #0]
 80032f4:	88bd      	ldrh	r5, [r7, #4]
 80032f6:	f7ff fba1 	bl	8002a3c <BSP_LCD_GetXSize>
 80032fa:	4603      	mov	r3, r0
 80032fc:	fb03 f205 	mul.w	r2, r3, r5
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	4413      	add	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4423      	add	r3, r4
 8003308:	461a      	mov	r2, r3
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	6013      	str	r3, [r2, #0]
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bdb0      	pop	{r4, r5, r7, pc}
 8003316:	bf00      	nop
 8003318:	200014f8 	.word	0x200014f8
 800331c:	200014d8 	.word	0x200014d8
 8003320:	200013c0 	.word	0x200013c0

08003324 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	603a      	str	r2, [r7, #0]
 800332e:	80fb      	strh	r3, [r7, #6]
 8003330:	460b      	mov	r3, r1
 8003332:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	2300      	movs	r3, #0
 800333a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003340:	4b53      	ldr	r3, [pc, #332]	; (8003490 <DrawChar+0x16c>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4953      	ldr	r1, [pc, #332]	; (8003494 <DrawChar+0x170>)
 8003346:	4613      	mov	r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	3308      	adds	r3, #8
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	88db      	ldrh	r3, [r3, #6]
 8003356:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003358:	4b4d      	ldr	r3, [pc, #308]	; (8003490 <DrawChar+0x16c>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	494d      	ldr	r1, [pc, #308]	; (8003494 <DrawChar+0x170>)
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	3308      	adds	r3, #8
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	889b      	ldrh	r3, [r3, #4]
 800336e:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003370:	8a3b      	ldrh	r3, [r7, #16]
 8003372:	3307      	adds	r3, #7
 8003374:	2b00      	cmp	r3, #0
 8003376:	da00      	bge.n	800337a <DrawChar+0x56>
 8003378:	3307      	adds	r3, #7
 800337a:	10db      	asrs	r3, r3, #3
 800337c:	b2db      	uxtb	r3, r3
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	b2da      	uxtb	r2, r3
 8003382:	8a3b      	ldrh	r3, [r7, #16]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	e076      	b.n	800347e <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003390:	8a3b      	ldrh	r3, [r7, #16]
 8003392:	3307      	adds	r3, #7
 8003394:	2b00      	cmp	r3, #0
 8003396:	da00      	bge.n	800339a <DrawChar+0x76>
 8003398:	3307      	adds	r3, #7
 800339a:	10db      	asrs	r3, r3, #3
 800339c:	461a      	mov	r2, r3
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fb02 f303 	mul.w	r3, r2, r3
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80033aa:	8a3b      	ldrh	r3, [r7, #16]
 80033ac:	3307      	adds	r3, #7
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da00      	bge.n	80033b4 <DrawChar+0x90>
 80033b2:	3307      	adds	r3, #7
 80033b4:	10db      	asrs	r3, r3, #3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d002      	beq.n	80033c0 <DrawChar+0x9c>
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d004      	beq.n	80033c8 <DrawChar+0xa4>
 80033be:	e00c      	b.n	80033da <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	617b      	str	r3, [r7, #20]
      break;
 80033c6:	e016      	b.n	80033f6 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	3201      	adds	r2, #1
 80033d2:	7812      	ldrb	r2, [r2, #0]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
      break;
 80033d8:	e00d      	b.n	80033f6 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	041a      	lsls	r2, r3, #16
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	3301      	adds	r3, #1
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	4313      	orrs	r3, r2
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	3202      	adds	r2, #2
 80033ee:	7812      	ldrb	r2, [r2, #0]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
      break;
 80033f4:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	e036      	b.n	800346a <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80033fc:	8a3a      	ldrh	r2, [r7, #16]
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	1ad2      	subs	r2, r2, r3
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	4413      	add	r3, r2
 8003406:	3b01      	subs	r3, #1
 8003408:	2201      	movs	r2, #1
 800340a:	fa02 f303 	lsl.w	r3, r2, r3
 800340e:	461a      	mov	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	4013      	ands	r3, r2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d012      	beq.n	800343e <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	b29a      	uxth	r2, r3
 800341c:	88fb      	ldrh	r3, [r7, #6]
 800341e:	4413      	add	r3, r2
 8003420:	b298      	uxth	r0, r3
 8003422:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <DrawChar+0x16c>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	491b      	ldr	r1, [pc, #108]	; (8003494 <DrawChar+0x170>)
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	88bb      	ldrh	r3, [r7, #4]
 8003436:	4619      	mov	r1, r3
 8003438:	f7ff ff2e 	bl	8003298 <BSP_LCD_DrawPixel>
 800343c:	e012      	b.n	8003464 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	b29a      	uxth	r2, r3
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	4413      	add	r3, r2
 8003446:	b298      	uxth	r0, r3
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <DrawChar+0x16c>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4911      	ldr	r1, [pc, #68]	; (8003494 <DrawChar+0x170>)
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	3304      	adds	r3, #4
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	88bb      	ldrh	r3, [r7, #4]
 800345e:	4619      	mov	r1, r3
 8003460:	f7ff ff1a 	bl	8003298 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	3301      	adds	r3, #1
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	8a3b      	ldrh	r3, [r7, #16]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	429a      	cmp	r2, r3
 8003470:	d3c4      	bcc.n	80033fc <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003472:	88bb      	ldrh	r3, [r7, #4]
 8003474:	3301      	adds	r3, #1
 8003476:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3301      	adds	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	8a7b      	ldrh	r3, [r7, #18]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	429a      	cmp	r2, r3
 8003484:	d384      	bcc.n	8003390 <DrawChar+0x6c>
  }
}
 8003486:	bf00      	nop
 8003488:	bf00      	nop
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	200014d8 	.word	0x200014d8
 8003494:	200014dc 	.word	0x200014dc

08003498 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
 80034a4:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80034a6:	4b16      	ldr	r3, [pc, #88]	; (8003500 <FillBuffer+0x68>)
 80034a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034ac:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80034ae:	4b14      	ldr	r3, [pc, #80]	; (8003500 <FillBuffer+0x68>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80034b4:	4a12      	ldr	r2, [pc, #72]	; (8003500 <FillBuffer+0x68>)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80034ba:	4b11      	ldr	r3, [pc, #68]	; (8003500 <FillBuffer+0x68>)
 80034bc:	4a11      	ldr	r2, [pc, #68]	; (8003504 <FillBuffer+0x6c>)
 80034be:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80034c0:	480f      	ldr	r0, [pc, #60]	; (8003500 <FillBuffer+0x68>)
 80034c2:	f000 fe5d 	bl	8004180 <HAL_DMA2D_Init>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d115      	bne.n	80034f8 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80034cc:	68f9      	ldr	r1, [r7, #12]
 80034ce:	480c      	ldr	r0, [pc, #48]	; (8003500 <FillBuffer+0x68>)
 80034d0:	f000 ffbe 	bl	8004450 <HAL_DMA2D_ConfigLayer>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10e      	bne.n	80034f8 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69f9      	ldr	r1, [r7, #28]
 80034e4:	4806      	ldr	r0, [pc, #24]	; (8003500 <FillBuffer+0x68>)
 80034e6:	f000 fe9e 	bl	8004226 <HAL_DMA2D_Start>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d103      	bne.n	80034f8 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80034f0:	210a      	movs	r1, #10
 80034f2:	4803      	ldr	r0, [pc, #12]	; (8003500 <FillBuffer+0x68>)
 80034f4:	f000 fec2 	bl	800427c <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	20001468 	.word	0x20001468
 8003504:	4002b000 	.word	0x4002b000

08003508 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800350c:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800350e:	4a2a      	ldr	r2, [pc, #168]	; (80035b8 <BSP_SDRAM_Init+0xb0>)
 8003510:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003512:	4b2a      	ldr	r3, [pc, #168]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003514:	2202      	movs	r2, #2
 8003516:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003518:	4b28      	ldr	r3, [pc, #160]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 800351a:	2207      	movs	r2, #7
 800351c:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003520:	2204      	movs	r2, #4
 8003522:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003524:	4b25      	ldr	r3, [pc, #148]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003526:	2207      	movs	r2, #7
 8003528:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 800352c:	2202      	movs	r2, #2
 800352e:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003530:	4b22      	ldr	r3, [pc, #136]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003532:	2202      	movs	r2, #2
 8003534:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003536:	4b21      	ldr	r3, [pc, #132]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003538:	2202      	movs	r2, #2
 800353a:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800353e:	2201      	movs	r2, #1
 8003540:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003542:	4b1c      	ldr	r3, [pc, #112]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003544:	2200      	movs	r2, #0
 8003546:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003548:	4b1a      	ldr	r3, [pc, #104]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800354a:	2204      	movs	r2, #4
 800354c:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800354e:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003550:	2210      	movs	r2, #16
 8003552:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003554:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003556:	2240      	movs	r2, #64	; 0x40
 8003558:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800355a:	4b16      	ldr	r3, [pc, #88]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800355c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003560:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003562:	4b14      	ldr	r3, [pc, #80]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003564:	2200      	movs	r2, #0
 8003566:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800356a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800356e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003570:	4b10      	ldr	r3, [pc, #64]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003572:	2200      	movs	r2, #0
 8003574:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003576:	4b0f      	ldr	r3, [pc, #60]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003578:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800357c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 800357e:	2100      	movs	r1, #0
 8003580:	480c      	ldr	r0, [pc, #48]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 8003582:	f000 f87f 	bl	8003684 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003586:	490d      	ldr	r1, [pc, #52]	; (80035bc <BSP_SDRAM_Init+0xb4>)
 8003588:	480a      	ldr	r0, [pc, #40]	; (80035b4 <BSP_SDRAM_Init+0xac>)
 800358a:	f003 fb91 	bl	8006cb0 <HAL_SDRAM_Init>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <BSP_SDRAM_Init+0xb8>)
 8003596:	2201      	movs	r2, #1
 8003598:	701a      	strb	r2, [r3, #0]
 800359a:	e002      	b.n	80035a2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800359c:	4b08      	ldr	r3, [pc, #32]	; (80035c0 <BSP_SDRAM_Init+0xb8>)
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80035a2:	f240 506a 	movw	r0, #1386	; 0x56a
 80035a6:	f000 f80d 	bl	80035c4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <BSP_SDRAM_Init+0xb8>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200014fc 	.word	0x200014fc
 80035b8:	a0000140 	.word	0xa0000140
 80035bc:	20001530 	.word	0x20001530
 80035c0:	20000188 	.word	0x20000188

080035c4 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80035d0:	4b2a      	ldr	r3, [pc, #168]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80035d6:	4b29      	ldr	r3, [pc, #164]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035d8:	2208      	movs	r2, #8
 80035da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80035dc:	4b27      	ldr	r3, [pc, #156]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035de:	2201      	movs	r2, #1
 80035e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80035e2:	4b26      	ldr	r3, [pc, #152]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80035e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ec:	4923      	ldr	r1, [pc, #140]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035ee:	4824      	ldr	r0, [pc, #144]	; (8003680 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80035f0:	f003 fb9c 	bl	8006d2c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80035f4:	2001      	movs	r0, #1
 80035f6:	f000 facf 	bl	8003b98 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80035fa:	4b20      	ldr	r3, [pc, #128]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80035fc:	2202      	movs	r2, #2
 80035fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003600:	4b1e      	ldr	r3, [pc, #120]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003602:	2208      	movs	r2, #8
 8003604:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003608:	2201      	movs	r2, #1
 800360a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800360c:	4b1b      	ldr	r3, [pc, #108]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003616:	4919      	ldr	r1, [pc, #100]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003618:	4819      	ldr	r0, [pc, #100]	; (8003680 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800361a:	f003 fb87 	bl	8006d2c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800361e:	4b17      	ldr	r3, [pc, #92]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003620:	2203      	movs	r2, #3
 8003622:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003626:	2208      	movs	r2, #8
 8003628:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800362c:	2204      	movs	r2, #4
 800362e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800363a:	4910      	ldr	r1, [pc, #64]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800363c:	4810      	ldr	r0, [pc, #64]	; (8003680 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800363e:	f003 fb75 	bl	8006d2c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003642:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003646:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003648:	4b0c      	ldr	r3, [pc, #48]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800364a:	2204      	movs	r2, #4
 800364c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800364e:	4b0b      	ldr	r3, [pc, #44]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003650:	2208      	movs	r2, #8
 8003652:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003654:	4b09      	ldr	r3, [pc, #36]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003656:	2201      	movs	r2, #1
 8003658:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a07      	ldr	r2, [pc, #28]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800365e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003664:	4905      	ldr	r1, [pc, #20]	; (800367c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003666:	4806      	ldr	r0, [pc, #24]	; (8003680 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003668:	f003 fb60 	bl	8006d2c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4804      	ldr	r0, [pc, #16]	; (8003680 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003670:	f003 fb87 	bl	8006d82 <HAL_SDRAM_ProgramRefreshRate>
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	2000154c 	.word	0x2000154c
 8003680:	200014fc 	.word	0x200014fc

08003684 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b090      	sub	sp, #64	; 0x40
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80ec 	beq.w	800386e <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
 800369a:	4b77      	ldr	r3, [pc, #476]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	4a76      	ldr	r2, [pc, #472]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036a0:	f043 0301 	orr.w	r3, r3, #1
 80036a4:	6393      	str	r3, [r2, #56]	; 0x38
 80036a6:	4b74      	ldr	r3, [pc, #464]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80036b2:	2300      	movs	r3, #0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
 80036b6:	4b70      	ldr	r3, [pc, #448]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a6f      	ldr	r2, [pc, #444]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b6d      	ldr	r3, [pc, #436]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ce:	2300      	movs	r3, #0
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	4b69      	ldr	r3, [pc, #420]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	4a68      	ldr	r2, [pc, #416]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	6313      	str	r3, [r2, #48]	; 0x30
 80036de:	4b66      	ldr	r3, [pc, #408]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	623b      	str	r3, [r7, #32]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
 80036ee:	4b62      	ldr	r3, [pc, #392]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	4a61      	ldr	r2, [pc, #388]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036f4:	f043 0304 	orr.w	r3, r3, #4
 80036f8:	6313      	str	r3, [r2, #48]	; 0x30
 80036fa:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f003 0304 	and.w	r3, r3, #4
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003706:	2300      	movs	r3, #0
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	4b5b      	ldr	r3, [pc, #364]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	4a5a      	ldr	r2, [pc, #360]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 8003710:	f043 0308 	orr.w	r3, r3, #8
 8003714:	6313      	str	r3, [r2, #48]	; 0x30
 8003716:	4b58      	ldr	r3, [pc, #352]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	61bb      	str	r3, [r7, #24]
 8003720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	4b54      	ldr	r3, [pc, #336]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	4a53      	ldr	r2, [pc, #332]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 800372c:	f043 0310 	orr.w	r3, r3, #16
 8003730:	6313      	str	r3, [r2, #48]	; 0x30
 8003732:	4b51      	ldr	r3, [pc, #324]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]
 8003742:	4b4d      	ldr	r3, [pc, #308]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a4c      	ldr	r2, [pc, #304]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 8003748:	f043 0320 	orr.w	r3, r3, #32
 800374c:	6313      	str	r3, [r2, #48]	; 0x30
 800374e:	4b4a      	ldr	r3, [pc, #296]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800375a:	2300      	movs	r3, #0
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	4b46      	ldr	r3, [pc, #280]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4a45      	ldr	r2, [pc, #276]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 8003764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003768:	6313      	str	r3, [r2, #48]	; 0x30
 800376a:	4b43      	ldr	r3, [pc, #268]	; (8003878 <BSP_SDRAM_MspInit+0x1f4>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003776:	2302      	movs	r3, #2
 8003778:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800377a:	2302      	movs	r3, #2
 800377c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800377e:	2300      	movs	r3, #0
 8003780:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003782:	230c      	movs	r3, #12
 8003784:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003786:	2360      	movs	r3, #96	; 0x60
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800378a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800378e:	4619      	mov	r1, r3
 8003790:	483a      	ldr	r0, [pc, #232]	; (800387c <BSP_SDRAM_MspInit+0x1f8>)
 8003792:	f000 ff8b 	bl	80046ac <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003796:	2301      	movs	r3, #1
 8003798:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800379a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800379e:	4619      	mov	r1, r3
 80037a0:	4837      	ldr	r0, [pc, #220]	; (8003880 <BSP_SDRAM_MspInit+0x1fc>)
 80037a2:	f000 ff83 	bl	80046ac <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80037a6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80037ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037b0:	4619      	mov	r1, r3
 80037b2:	4834      	ldr	r0, [pc, #208]	; (8003884 <BSP_SDRAM_MspInit+0x200>)
 80037b4:	f000 ff7a 	bl	80046ac <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80037b8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80037be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037c2:	4619      	mov	r1, r3
 80037c4:	4830      	ldr	r0, [pc, #192]	; (8003888 <BSP_SDRAM_MspInit+0x204>)
 80037c6:	f000 ff71 	bl	80046ac <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80037ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80037d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037d4:	4619      	mov	r1, r3
 80037d6:	482d      	ldr	r0, [pc, #180]	; (800388c <BSP_SDRAM_MspInit+0x208>)
 80037d8:	f000 ff68 	bl	80046ac <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80037dc:	f248 1333 	movw	r3, #33075	; 0x8133
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80037e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037e6:	4619      	mov	r1, r3
 80037e8:	4829      	ldr	r0, [pc, #164]	; (8003890 <BSP_SDRAM_MspInit+0x20c>)
 80037ea:	f000 ff5f 	bl	80046ac <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80037ee:	4b29      	ldr	r3, [pc, #164]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80037f4:	4b27      	ldr	r3, [pc, #156]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80037fa:	4b26      	ldr	r3, [pc, #152]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 80037fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003800:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 8003804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003808:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800380a:	4b22      	ldr	r3, [pc, #136]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 800380c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003810:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003812:	4b20      	ldr	r3, [pc, #128]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 8003814:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003818:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 800381c:	2200      	movs	r2, #0
 800381e:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003820:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 8003822:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003826:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003828:	4b1a      	ldr	r3, [pc, #104]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 800382a:	2200      	movs	r2, #0
 800382c:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 8003830:	2203      	movs	r2, #3
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 8003836:	2200      	movs	r2, #0
 8003838:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 8003842:	4a15      	ldr	r2, [pc, #84]	; (8003898 <BSP_SDRAM_MspInit+0x214>)
 8003844:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a12      	ldr	r2, [pc, #72]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
 800384c:	4a11      	ldr	r2, [pc, #68]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003852:	4810      	ldr	r0, [pc, #64]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 8003854:	f000 fb84 	bl	8003f60 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003858:	480e      	ldr	r0, [pc, #56]	; (8003894 <BSP_SDRAM_MspInit+0x210>)
 800385a:	f000 fad3 	bl	8003e04 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800385e:	2200      	movs	r2, #0
 8003860:	210f      	movs	r1, #15
 8003862:	2038      	movs	r0, #56	; 0x38
 8003864:	f000 fa97 	bl	8003d96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003868:	2038      	movs	r0, #56	; 0x38
 800386a:	f000 fab0 	bl	8003dce <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800386e:	bf00      	nop
 8003870:	3740      	adds	r7, #64	; 0x40
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800
 800387c:	40020400 	.word	0x40020400
 8003880:	40020800 	.word	0x40020800
 8003884:	40020c00 	.word	0x40020c00
 8003888:	40021000 	.word	0x40021000
 800388c:	40021400 	.word	0x40021400
 8003890:	40021800 	.word	0x40021800
 8003894:	2000155c 	.word	0x2000155c
 8003898:	40026410 	.word	0x40026410

0800389c <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	460a      	mov	r2, r1
 80038a6:	80fb      	strh	r3, [r7, #6]
 80038a8:	4613      	mov	r3, r2
 80038aa:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80038b0:	4a13      	ldr	r2, [pc, #76]	; (8003900 <BSP_TS_Init+0x64>)
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <BSP_TS_Init+0x68>)
 80038b8:	88bb      	ldrh	r3, [r7, #4]
 80038ba:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <BSP_TS_Init+0x6c>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2082      	movs	r0, #130	; 0x82
 80038c2:	4798      	blx	r3
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	f640 0311 	movw	r3, #2065	; 0x811
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d104      	bne.n	80038da <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80038d0:	4b0e      	ldr	r3, [pc, #56]	; (800390c <BSP_TS_Init+0x70>)
 80038d2:	4a0d      	ldr	r2, [pc, #52]	; (8003908 <BSP_TS_Init+0x6c>)
 80038d4:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80038da:	7bfb      	ldrb	r3, [r7, #15]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <BSP_TS_Init+0x70>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2082      	movs	r0, #130	; 0x82
 80038e8:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <BSP_TS_Init+0x70>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2082      	movs	r0, #130	; 0x82
 80038f2:	4798      	blx	r3
  }

  return ret;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200015c0 	.word	0x200015c0
 8003904:	200015c2 	.word	0x200015c2
 8003908:	20000138 	.word	0x20000138
 800390c:	200015bc 	.word	0x200015bc

08003910 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <BSP_TS_ITGetStatus+0x14>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	2082      	movs	r0, #130	; 0x82
 800391c:	4798      	blx	r3
 800391e:	4603      	mov	r3, r0
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	200015bc 	.word	0x200015bc

08003928 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003930:	4b4f      	ldr	r3, [pc, #316]	; (8003a70 <BSP_TS_GetState+0x148>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2082      	movs	r0, #130	; 0x82
 8003938:	4798      	blx	r3
 800393a:	4603      	mov	r3, r0
 800393c:	b29a      	uxth	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 808d 	beq.w	8003a66 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 800394c:	4b48      	ldr	r3, [pc, #288]	; (8003a70 <BSP_TS_GetState+0x148>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	f107 020c 	add.w	r2, r7, #12
 8003956:	f107 010e 	add.w	r1, r7, #14
 800395a:	2082      	movs	r0, #130	; 0x82
 800395c:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 800395e:	89bb      	ldrh	r3, [r7, #12]
 8003960:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003964:	b29b      	uxth	r3, r3
 8003966:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003968:	89bb      	ldrh	r3, [r7, #12]
 800396a:	4a42      	ldr	r2, [pc, #264]	; (8003a74 <BSP_TS_GetState+0x14c>)
 800396c:	fba2 2303 	umull	r2, r3, r2, r3
 8003970:	08db      	lsrs	r3, r3, #3
 8003972:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003974:	8abb      	ldrh	r3, [r7, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	82bb      	strh	r3, [r7, #20]
 800397e:	e008      	b.n	8003992 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003980:	4b3d      	ldr	r3, [pc, #244]	; (8003a78 <BSP_TS_GetState+0x150>)
 8003982:	881b      	ldrh	r3, [r3, #0]
 8003984:	8aba      	ldrh	r2, [r7, #20]
 8003986:	429a      	cmp	r2, r3
 8003988:	d903      	bls.n	8003992 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800398a:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <BSP_TS_GetState+0x150>)
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	3b01      	subs	r3, #1
 8003990:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003992:	8abb      	ldrh	r3, [r7, #20]
 8003994:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003996:	89fb      	ldrh	r3, [r7, #14]
 8003998:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800399c:	4293      	cmp	r3, r2
 800399e:	d806      	bhi.n	80039ae <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80039a0:	89fb      	ldrh	r3, [r7, #14]
 80039a2:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80039a6:	330e      	adds	r3, #14
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	81fb      	strh	r3, [r7, #14]
 80039ac:	e005      	b.n	80039ba <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 80039ae:	89fb      	ldrh	r3, [r7, #14]
 80039b0:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80039b4:	3308      	adds	r3, #8
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 80039ba:	89fb      	ldrh	r3, [r7, #14]
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <BSP_TS_GetState+0x154>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	08db      	lsrs	r3, r3, #3
 80039c4:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 80039c6:	8afb      	ldrh	r3, [r7, #22]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	82fb      	strh	r3, [r7, #22]
 80039d0:	e008      	b.n	80039e4 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80039d2:	4b2b      	ldr	r3, [pc, #172]	; (8003a80 <BSP_TS_GetState+0x158>)
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	8afa      	ldrh	r2, [r7, #22]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d903      	bls.n	80039e4 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80039dc:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <BSP_TS_GetState+0x158>)
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	3b01      	subs	r3, #1
 80039e2:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 80039e4:	8afb      	ldrh	r3, [r7, #22]
 80039e6:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 80039e8:	89fb      	ldrh	r3, [r7, #14]
 80039ea:	461a      	mov	r2, r3
 80039ec:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <BSP_TS_GetState+0x15c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d906      	bls.n	8003a02 <BSP_TS_GetState+0xda>
 80039f4:	89fa      	ldrh	r2, [r7, #14]
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <BSP_TS_GetState+0x15c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	e005      	b.n	8003a0e <BSP_TS_GetState+0xe6>
 8003a02:	4b20      	ldr	r3, [pc, #128]	; (8003a84 <BSP_TS_GetState+0x15c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	89fb      	ldrh	r3, [r7, #14]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003a10:	89bb      	ldrh	r3, [r7, #12]
 8003a12:	461a      	mov	r2, r3
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <BSP_TS_GetState+0x160>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d906      	bls.n	8003a2a <BSP_TS_GetState+0x102>
 8003a1c:	89ba      	ldrh	r2, [r7, #12]
 8003a1e:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <BSP_TS_GetState+0x160>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	e005      	b.n	8003a36 <BSP_TS_GetState+0x10e>
 8003a2a:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <BSP_TS_GetState+0x160>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	89bb      	ldrh	r3, [r7, #12]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003a38:	8a7a      	ldrh	r2, [r7, #18]
 8003a3a:	8a3b      	ldrh	r3, [r7, #16]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	2b05      	cmp	r3, #5
 8003a40:	dd07      	ble.n	8003a52 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003a42:	89fb      	ldrh	r3, [r7, #14]
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <BSP_TS_GetState+0x15c>)
 8003a48:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003a4a:	89bb      	ldrh	r3, [r7, #12]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <BSP_TS_GetState+0x160>)
 8003a50:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <BSP_TS_GetState+0x15c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <BSP_TS_GetState+0x160>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	809a      	strh	r2, [r3, #4]
  }
}
 8003a66:	bf00      	nop
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200015bc 	.word	0x200015bc
 8003a74:	ba2e8ba3 	.word	0xba2e8ba3
 8003a78:	200015c2 	.word	0x200015c2
 8003a7c:	88888889 	.word	0x88888889
 8003a80:	200015c0 	.word	0x200015c0
 8003a84:	200015c4 	.word	0x200015c4
 8003a88:	200015c8 	.word	0x200015c8

08003a8c <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8003a90:	4b03      	ldr	r3, [pc, #12]	; (8003aa0 <BSP_TS_ITClear+0x14>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	2082      	movs	r0, #130	; 0x82
 8003a98:	4798      	blx	r3
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	200015bc 	.word	0x200015bc

08003aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003aa8:	4b0e      	ldr	r3, [pc, #56]	; (8003ae4 <HAL_Init+0x40>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a0d      	ldr	r2, [pc, #52]	; (8003ae4 <HAL_Init+0x40>)
 8003aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ab4:	4b0b      	ldr	r3, [pc, #44]	; (8003ae4 <HAL_Init+0x40>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <HAL_Init+0x40>)
 8003aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ac0:	4b08      	ldr	r3, [pc, #32]	; (8003ae4 <HAL_Init+0x40>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a07      	ldr	r2, [pc, #28]	; (8003ae4 <HAL_Init+0x40>)
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003acc:	2003      	movs	r0, #3
 8003ace:	f000 f957 	bl	8003d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ad2:	200f      	movs	r0, #15
 8003ad4:	f000 f810 	bl	8003af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ad8:	f000 f806 	bl	8003ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023c00 	.word	0x40023c00

08003ae8 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
	...

08003af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b00:	4b12      	ldr	r3, [pc, #72]	; (8003b4c <HAL_InitTick+0x54>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <HAL_InitTick+0x58>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	4618      	mov	r0, r3
 8003b18:	f000 f967 	bl	8003dea <HAL_SYSTICK_Config>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e00e      	b.n	8003b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b0f      	cmp	r3, #15
 8003b2a:	d80a      	bhi.n	8003b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b34:	f000 f92f 	bl	8003d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b38:	4a06      	ldr	r2, [pc, #24]	; (8003b54 <HAL_InitTick+0x5c>)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e000      	b.n	8003b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	200000fc 	.word	0x200000fc
 8003b50:	20000190 	.word	0x20000190
 8003b54:	2000018c 	.word	0x2000018c

08003b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_IncTick+0x20>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_IncTick+0x24>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4413      	add	r3, r2
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_IncTick+0x24>)
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000190 	.word	0x20000190
 8003b7c:	200015cc 	.word	0x200015cc

08003b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  return uwTick;
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <HAL_GetTick+0x14>)
 8003b86:	681b      	ldr	r3, [r3, #0]
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	200015cc 	.word	0x200015cc

08003b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba0:	f7ff ffee 	bl	8003b80 <HAL_GetTick>
 8003ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb0:	d005      	beq.n	8003bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_Delay+0x44>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	4413      	add	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bbe:	bf00      	nop
 8003bc0:	f7ff ffde 	bl	8003b80 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d8f7      	bhi.n	8003bc0 <HAL_Delay+0x28>
  {
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000190 	.word	0x20000190

08003be0 <__NVIC_SetPriorityGrouping>:
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c12:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <__NVIC_SetPriorityGrouping+0x44>)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	60d3      	str	r3, [r2, #12]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	e000ed00 	.word	0xe000ed00

08003c28 <__NVIC_GetPriorityGrouping>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <__NVIC_GetPriorityGrouping+0x18>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	0a1b      	lsrs	r3, r3, #8
 8003c32:	f003 0307 	and.w	r3, r3, #7
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_EnableIRQ>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	db0b      	blt.n	8003c6e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	f003 021f 	and.w	r2, r3, #31
 8003c5c:	4907      	ldr	r1, [pc, #28]	; (8003c7c <__NVIC_EnableIRQ+0x38>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	095b      	lsrs	r3, r3, #5
 8003c64:	2001      	movs	r0, #1
 8003c66:	fa00 f202 	lsl.w	r2, r0, r2
 8003c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	e000e100 	.word	0xe000e100

08003c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	6039      	str	r1, [r7, #0]
 8003c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	db0a      	blt.n	8003caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	490c      	ldr	r1, [pc, #48]	; (8003ccc <__NVIC_SetPriority+0x4c>)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ca8:	e00a      	b.n	8003cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	4908      	ldr	r1, [pc, #32]	; (8003cd0 <__NVIC_SetPriority+0x50>)
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	3b04      	subs	r3, #4
 8003cb8:	0112      	lsls	r2, r2, #4
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	761a      	strb	r2, [r3, #24]
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000e100 	.word	0xe000e100
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	; 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f1c3 0307 	rsb	r3, r3, #7
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	bf28      	it	cs
 8003cf2:	2304      	movcs	r3, #4
 8003cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d902      	bls.n	8003d04 <NVIC_EncodePriority+0x30>
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3b03      	subs	r3, #3
 8003d02:	e000      	b.n	8003d06 <NVIC_EncodePriority+0x32>
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43da      	mvns	r2, r3
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	401a      	ands	r2, r3
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	fa01 f303 	lsl.w	r3, r1, r3
 8003d26:	43d9      	mvns	r1, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	4313      	orrs	r3, r2
         );
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3724      	adds	r7, #36	; 0x24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d4c:	d301      	bcc.n	8003d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e00f      	b.n	8003d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d52:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <SysTick_Config+0x40>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d5a:	210f      	movs	r1, #15
 8003d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d60:	f7ff ff8e 	bl	8003c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d64:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <SysTick_Config+0x40>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d6a:	4b04      	ldr	r3, [pc, #16]	; (8003d7c <SysTick_Config+0x40>)
 8003d6c:	2207      	movs	r2, #7
 8003d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	e000e010 	.word	0xe000e010

08003d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff ff29 	bl	8003be0 <__NVIC_SetPriorityGrouping>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003da8:	f7ff ff3e 	bl	8003c28 <__NVIC_GetPriorityGrouping>
 8003dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	6978      	ldr	r0, [r7, #20]
 8003db4:	f7ff ff8e 	bl	8003cd4 <NVIC_EncodePriority>
 8003db8:	4602      	mov	r2, r0
 8003dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff ff5d 	bl	8003c80 <__NVIC_SetPriority>
}
 8003dc6:	bf00      	nop
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b082      	sub	sp, #8
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff31 	bl	8003c44 <__NVIC_EnableIRQ>
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff ffa2 	bl	8003d3c <SysTick_Config>
 8003df8:	4603      	mov	r3, r0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e10:	f7ff feb6 	bl	8003b80 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e099      	b.n	8003f54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0201 	bic.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e40:	e00f      	b.n	8003e62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e42:	f7ff fe9d 	bl	8003b80 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b05      	cmp	r3, #5
 8003e4e:	d908      	bls.n	8003e62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2220      	movs	r2, #32
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2203      	movs	r2, #3
 8003e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e078      	b.n	8003f54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1e8      	bne.n	8003e42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4b38      	ldr	r3, [pc, #224]	; (8003f5c <HAL_DMA_Init+0x158>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d107      	bne.n	8003ecc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f023 0307 	bic.w	r3, r3, #7
 8003ee2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d117      	bne.n	8003f26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00e      	beq.n	8003f26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f8bd 	bl	8004088 <DMA_CheckFifoParam>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d008      	beq.n	8003f26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2240      	movs	r2, #64	; 0x40
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f22:	2301      	movs	r3, #1
 8003f24:	e016      	b.n	8003f54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f874 	bl	800401c <DMA_CalcBaseAndBitshift>
 8003f34:	4603      	mov	r3, r0
 8003f36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3c:	223f      	movs	r2, #63	; 0x3f
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	f010803f 	.word	0xf010803f

08003f60 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e050      	b.n	8004014 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d101      	bne.n	8003f82 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e048      	b.n	8004014 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2200      	movs	r2, #0
 8003f98:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2221      	movs	r2, #33	; 0x21
 8003fc0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f82a 	bl	800401c <DMA_CalcBaseAndBitshift>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff4:	223f      	movs	r2, #63	; 0x3f
 8003ff6:	409a      	lsls	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	3b10      	subs	r3, #16
 800402c:	4a14      	ldr	r2, [pc, #80]	; (8004080 <DMA_CalcBaseAndBitshift+0x64>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004036:	4a13      	ldr	r2, [pc, #76]	; (8004084 <DMA_CalcBaseAndBitshift+0x68>)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d909      	bls.n	800405e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	1d1a      	adds	r2, r3, #4
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	659a      	str	r2, [r3, #88]	; 0x58
 800405c:	e007      	b.n	800406e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004066:	f023 0303 	bic.w	r3, r3, #3
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	aaaaaaab 	.word	0xaaaaaaab
 8004084:	0800b2fc 	.word	0x0800b2fc

08004088 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004098:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d11f      	bne.n	80040e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d856      	bhi.n	8004156 <DMA_CheckFifoParam+0xce>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <DMA_CheckFifoParam+0x28>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040c1 	.word	0x080040c1
 80040b4:	080040d3 	.word	0x080040d3
 80040b8:	080040c1 	.word	0x080040c1
 80040bc:	08004157 	.word	0x08004157
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d046      	beq.n	800415a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d0:	e043      	b.n	800415a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040da:	d140      	bne.n	800415e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e0:	e03d      	b.n	800415e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ea:	d121      	bne.n	8004130 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d837      	bhi.n	8004162 <DMA_CheckFifoParam+0xda>
 80040f2:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <DMA_CheckFifoParam+0x70>)
 80040f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f8:	08004109 	.word	0x08004109
 80040fc:	0800410f 	.word	0x0800410f
 8004100:	08004109 	.word	0x08004109
 8004104:	08004121 	.word	0x08004121
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	73fb      	strb	r3, [r7, #15]
      break;
 800410c:	e030      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d025      	beq.n	8004166 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800411e:	e022      	b.n	8004166 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004128:	d11f      	bne.n	800416a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800412e:	e01c      	b.n	800416a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d903      	bls.n	800413e <DMA_CheckFifoParam+0xb6>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b03      	cmp	r3, #3
 800413a:	d003      	beq.n	8004144 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800413c:	e018      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      break;
 8004142:	e015      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00e      	beq.n	800416e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	73fb      	strb	r3, [r7, #15]
      break;
 8004154:	e00b      	b.n	800416e <DMA_CheckFifoParam+0xe6>
      break;
 8004156:	bf00      	nop
 8004158:	e00a      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;
 800415a:	bf00      	nop
 800415c:	e008      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;
 800415e:	bf00      	nop
 8004160:	e006      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;
 8004162:	bf00      	nop
 8004164:	e004      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;
 8004166:	bf00      	nop
 8004168:	e002      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;   
 800416a:	bf00      	nop
 800416c:	e000      	b.n	8004170 <DMA_CheckFifoParam+0xe8>
      break;
 800416e:	bf00      	nop
    }
  } 
  
  return status; 
 8004170:	7bfb      	ldrb	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop

08004180 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e03b      	b.n	800420a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f833 	bl	8004212 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	f023 0107 	bic.w	r1, r3, #7
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	68d1      	ldr	r1, [r2, #12]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	430b      	orrs	r3, r1
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af02      	add	r7, sp, #8
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
 8004232:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800423a:	2b01      	cmp	r3, #1
 800423c:	d101      	bne.n	8004242 <HAL_DMA2D_Start+0x1c>
 800423e:	2302      	movs	r3, #2
 8004240:	e018      	b.n	8004274 <HAL_DMA2D_Start+0x4e>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2202      	movs	r2, #2
 800424e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	68b9      	ldr	r1, [r7, #8]
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 f989 	bl	8004574 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004286:	2300      	movs	r3, #0
 8004288:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d056      	beq.n	8004346 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004298:	f7ff fc72 	bl	8003b80 <HAL_GetTick>
 800429c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800429e:	e04b      	b.n	8004338 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d023      	beq.n	80042fa <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c0:	f043 0202 	orr.w	r2, r3, #2
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d005      	beq.n	80042de <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	f043 0201 	orr.w	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2221      	movs	r2, #33	; 0x21
 80042e4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2204      	movs	r2, #4
 80042ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0a5      	b.n	8004446 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004300:	d01a      	beq.n	8004338 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004302:	f7ff fc3d 	bl	8003b80 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d302      	bcc.n	8004318 <HAL_DMA2D_PollForTransfer+0x9c>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10f      	bne.n	8004338 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2203      	movs	r2, #3
 8004328:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e086      	b.n	8004446 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0ac      	beq.n	80042a0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	f003 0320 	and.w	r3, r3, #32
 8004350:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d061      	beq.n	800442c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004368:	f7ff fc0a 	bl	8003b80 <HAL_GetTick>
 800436c:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800436e:	e056      	b.n	800441e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800437e:	2b00      	cmp	r3, #0
 8004380:	d02e      	beq.n	80043e0 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	f043 0204 	orr.w	r2, r3, #4
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	f043 0202 	orr.w	r2, r3, #2
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043bc:	f043 0201 	orr.w	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2229      	movs	r2, #41	; 0x29
 80043ca:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2204      	movs	r2, #4
 80043d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e032      	b.n	8004446 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e6:	d01a      	beq.n	800441e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80043e8:	f7ff fbca 	bl	8003b80 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d302      	bcc.n	80043fe <HAL_DMA2D_PollForTransfer+0x182>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10f      	bne.n	800441e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	f043 0220 	orr.w	r2, r3, #32
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2203      	movs	r2, #3
 800440e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e013      	b.n	8004446 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0a1      	beq.n	8004370 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2212      	movs	r2, #18
 8004432:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_DMA2D_ConfigLayer+0x20>
 800446c:	2302      	movs	r3, #2
 800446e:	e079      	b.n	8004564 <HAL_DMA2D_ConfigLayer+0x114>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	3318      	adds	r3, #24
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	041b      	lsls	r3, r3, #16
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800449a:	4b35      	ldr	r3, [pc, #212]	; (8004570 <HAL_DMA2D_ConfigLayer+0x120>)
 800449c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b0a      	cmp	r3, #10
 80044a4:	d003      	beq.n	80044ae <HAL_DMA2D_ConfigLayer+0x5e>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b09      	cmp	r3, #9
 80044ac:	d107      	bne.n	80044be <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	e005      	b.n	80044ca <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	061b      	lsls	r3, r3, #24
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d120      	bne.n	8004512 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	43db      	mvns	r3, r3
 80044da:	ea02 0103 	and.w	r1, r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	430a      	orrs	r2, r1
 80044e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b0a      	cmp	r3, #10
 80044f8:	d003      	beq.n	8004502 <HAL_DMA2D_ConfigLayer+0xb2>
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b09      	cmp	r3, #9
 8004500:	d127      	bne.n	8004552 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800450e:	629a      	str	r2, [r3, #40]	; 0x28
 8004510:	e01f      	b.n	8004552 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	43db      	mvns	r3, r3
 800451c:	ea02 0103 	and.w	r1, r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	430a      	orrs	r2, r1
 8004528:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b0a      	cmp	r3, #10
 800453a:	d003      	beq.n	8004544 <HAL_DMA2D_ConfigLayer+0xf4>
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b09      	cmp	r3, #9
 8004542:	d106      	bne.n	8004552 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004550:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	371c      	adds	r7, #28
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	ff03000f 	.word	0xff03000f

08004574 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004574:	b480      	push	{r7}
 8004576:	b08b      	sub	sp, #44	; 0x2c
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
 8004580:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004588:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	041a      	lsls	r2, r3, #16
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	431a      	orrs	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80045ac:	d174      	bne.n	8004698 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80045b4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045bc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80045c4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d108      	bne.n	80045e6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	431a      	orrs	r2, r3
 80045da:	6a3b      	ldr	r3, [r7, #32]
 80045dc:	4313      	orrs	r3, r2
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
 80045e4:	e053      	b.n	800468e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d106      	bne.n	80045fc <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
 80045fa:	e048      	b.n	800468e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d111      	bne.n	8004628 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	0cdb      	lsrs	r3, r3, #19
 8004608:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	0a9b      	lsrs	r3, r3, #10
 800460e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	08db      	lsrs	r3, r3, #3
 8004614:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004616:	69bb      	ldr	r3, [r7, #24]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	02db      	lsls	r3, r3, #11
 800461e:	4313      	orrs	r3, r2
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	4313      	orrs	r3, r2
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
 8004626:	e032      	b.n	800468e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	2b03      	cmp	r3, #3
 800462e:	d117      	bne.n	8004660 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	0fdb      	lsrs	r3, r3, #31
 8004634:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	0cdb      	lsrs	r3, r3, #19
 800463a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	0adb      	lsrs	r3, r3, #11
 8004640:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	08db      	lsrs	r3, r3, #3
 8004646:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	431a      	orrs	r2, r3
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	03db      	lsls	r3, r3, #15
 8004656:	4313      	orrs	r3, r2
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	4313      	orrs	r3, r2
 800465c:	627b      	str	r3, [r7, #36]	; 0x24
 800465e:	e016      	b.n	800468e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	0f1b      	lsrs	r3, r3, #28
 8004664:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	0d1b      	lsrs	r3, r3, #20
 800466a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	0b1b      	lsrs	r3, r3, #12
 8004670:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	011a      	lsls	r2, r3, #4
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	431a      	orrs	r2, r3
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	031b      	lsls	r3, r3, #12
 8004686:	4313      	orrs	r3, r2
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004694:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004696:	e003      	b.n	80046a0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	60da      	str	r2, [r3, #12]
}
 80046a0:	bf00      	nop
 80046a2:	372c      	adds	r7, #44	; 0x2c
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e177      	b.n	80049b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c8:	2201      	movs	r2, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f040 8166 	bne.w	80049b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d00b      	beq.n	8004706 <HAL_GPIO_Init+0x5a>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d007      	beq.n	8004706 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046fa:	2b11      	cmp	r3, #17
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b12      	cmp	r3, #18
 8004704:	d130      	bne.n	8004768 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	2203      	movs	r2, #3
 8004712:	fa02 f303 	lsl.w	r3, r2, r3
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4313      	orrs	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800473c:	2201      	movs	r2, #1
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	43db      	mvns	r3, r3
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	4013      	ands	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	f003 0201 	and.w	r2, r3, #1
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b02      	cmp	r3, #2
 800479e:	d003      	beq.n	80047a8 <HAL_GPIO_Init+0xfc>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b12      	cmp	r3, #18
 80047a6:	d123      	bne.n	80047f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	08da      	lsrs	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3208      	adds	r2, #8
 80047b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	220f      	movs	r2, #15
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	08da      	lsrs	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80c0 	beq.w	80049b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	4b66      	ldr	r3, [pc, #408]	; (80049d0 <HAL_GPIO_Init+0x324>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	4a65      	ldr	r2, [pc, #404]	; (80049d0 <HAL_GPIO_Init+0x324>)
 800483c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004840:	6453      	str	r3, [r2, #68]	; 0x44
 8004842:	4b63      	ldr	r3, [pc, #396]	; (80049d0 <HAL_GPIO_Init+0x324>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800484e:	4a61      	ldr	r2, [pc, #388]	; (80049d4 <HAL_GPIO_Init+0x328>)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	220f      	movs	r2, #15
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a58      	ldr	r2, [pc, #352]	; (80049d8 <HAL_GPIO_Init+0x32c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d037      	beq.n	80048ea <HAL_GPIO_Init+0x23e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a57      	ldr	r2, [pc, #348]	; (80049dc <HAL_GPIO_Init+0x330>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d031      	beq.n	80048e6 <HAL_GPIO_Init+0x23a>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a56      	ldr	r2, [pc, #344]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d02b      	beq.n	80048e2 <HAL_GPIO_Init+0x236>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a55      	ldr	r2, [pc, #340]	; (80049e4 <HAL_GPIO_Init+0x338>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d025      	beq.n	80048de <HAL_GPIO_Init+0x232>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a54      	ldr	r2, [pc, #336]	; (80049e8 <HAL_GPIO_Init+0x33c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d01f      	beq.n	80048da <HAL_GPIO_Init+0x22e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a53      	ldr	r2, [pc, #332]	; (80049ec <HAL_GPIO_Init+0x340>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d019      	beq.n	80048d6 <HAL_GPIO_Init+0x22a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a52      	ldr	r2, [pc, #328]	; (80049f0 <HAL_GPIO_Init+0x344>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <HAL_GPIO_Init+0x226>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a51      	ldr	r2, [pc, #324]	; (80049f4 <HAL_GPIO_Init+0x348>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00d      	beq.n	80048ce <HAL_GPIO_Init+0x222>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a50      	ldr	r2, [pc, #320]	; (80049f8 <HAL_GPIO_Init+0x34c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <HAL_GPIO_Init+0x21e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a4f      	ldr	r2, [pc, #316]	; (80049fc <HAL_GPIO_Init+0x350>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d101      	bne.n	80048c6 <HAL_GPIO_Init+0x21a>
 80048c2:	2309      	movs	r3, #9
 80048c4:	e012      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048c6:	230a      	movs	r3, #10
 80048c8:	e010      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048ca:	2308      	movs	r3, #8
 80048cc:	e00e      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048ce:	2307      	movs	r3, #7
 80048d0:	e00c      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048d2:	2306      	movs	r3, #6
 80048d4:	e00a      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048d6:	2305      	movs	r3, #5
 80048d8:	e008      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048da:	2304      	movs	r3, #4
 80048dc:	e006      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048de:	2303      	movs	r3, #3
 80048e0:	e004      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048e2:	2302      	movs	r3, #2
 80048e4:	e002      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <HAL_GPIO_Init+0x240>
 80048ea:	2300      	movs	r3, #0
 80048ec:	69fa      	ldr	r2, [r7, #28]
 80048ee:	f002 0203 	and.w	r2, r2, #3
 80048f2:	0092      	lsls	r2, r2, #2
 80048f4:	4093      	lsls	r3, r2
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048fc:	4935      	ldr	r1, [pc, #212]	; (80049d4 <HAL_GPIO_Init+0x328>)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	3302      	adds	r3, #2
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800490a:	4b3d      	ldr	r3, [pc, #244]	; (8004a00 <HAL_GPIO_Init+0x354>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4313      	orrs	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800492e:	4a34      	ldr	r2, [pc, #208]	; (8004a00 <HAL_GPIO_Init+0x354>)
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004934:	4b32      	ldr	r3, [pc, #200]	; (8004a00 <HAL_GPIO_Init+0x354>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	43db      	mvns	r3, r3
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	4013      	ands	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004958:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <HAL_GPIO_Init+0x354>)
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <HAL_GPIO_Init+0x354>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	43db      	mvns	r3, r3
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	4013      	ands	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004982:	4a1f      	ldr	r2, [pc, #124]	; (8004a00 <HAL_GPIO_Init+0x354>)
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004988:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <HAL_GPIO_Init+0x354>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	43db      	mvns	r3, r3
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	4013      	ands	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049ac:	4a14      	ldr	r2, [pc, #80]	; (8004a00 <HAL_GPIO_Init+0x354>)
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	3301      	adds	r3, #1
 80049b6:	61fb      	str	r3, [r7, #28]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	f67f ae84 	bls.w	80046c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	3724      	adds	r7, #36	; 0x24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40013800 	.word	0x40013800
 80049d8:	40020000 	.word	0x40020000
 80049dc:	40020400 	.word	0x40020400
 80049e0:	40020800 	.word	0x40020800
 80049e4:	40020c00 	.word	0x40020c00
 80049e8:	40021000 	.word	0x40021000
 80049ec:	40021400 	.word	0x40021400
 80049f0:	40021800 	.word	0x40021800
 80049f4:	40021c00 	.word	0x40021c00
 80049f8:	40022000 	.word	0x40022000
 80049fc:	40022400 	.word	0x40022400
 8004a00:	40013c00 	.word	0x40013c00

08004a04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	807b      	strh	r3, [r7, #2]
 8004a10:	4613      	mov	r3, r2
 8004a12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a14:	787b      	ldrb	r3, [r7, #1]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a1a:	887a      	ldrh	r2, [r7, #2]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a20:	e003      	b.n	8004a2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a22:	887b      	ldrh	r3, [r7, #2]
 8004a24:	041a      	lsls	r2, r3, #16
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	619a      	str	r2, [r3, #24]
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a36:	b480      	push	{r7}
 8004a38:	b083      	sub	sp, #12
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	401a      	ands	r2, r3
 8004a4a:	887b      	ldrh	r3, [r7, #2]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d104      	bne.n	8004a5a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004a50:	887b      	ldrh	r3, [r7, #2]
 8004a52:	041a      	lsls	r2, r3, #16
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004a58:	e002      	b.n	8004a60 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004a5a:	887a      	ldrh	r2, [r7, #2]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	619a      	str	r2, [r3, #24]
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e12b      	b.n	8004cd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f95d 	bl	8004d52 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2224      	movs	r2, #36	; 0x24
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0201 	bic.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004abe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ace:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ad0:	f001 ff1a 	bl	8006908 <HAL_RCC_GetPCLK1Freq>
 8004ad4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4a81      	ldr	r2, [pc, #516]	; (8004ce0 <HAL_I2C_Init+0x274>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d807      	bhi.n	8004af0 <HAL_I2C_Init+0x84>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a80      	ldr	r2, [pc, #512]	; (8004ce4 <HAL_I2C_Init+0x278>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	bf94      	ite	ls
 8004ae8:	2301      	movls	r3, #1
 8004aea:	2300      	movhi	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e006      	b.n	8004afe <HAL_I2C_Init+0x92>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4a7d      	ldr	r2, [pc, #500]	; (8004ce8 <HAL_I2C_Init+0x27c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	bf94      	ite	ls
 8004af8:	2301      	movls	r3, #1
 8004afa:	2300      	movhi	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0e7      	b.n	8004cd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a78      	ldr	r2, [pc, #480]	; (8004cec <HAL_I2C_Init+0x280>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	0c9b      	lsrs	r3, r3, #18
 8004b10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4a6a      	ldr	r2, [pc, #424]	; (8004ce0 <HAL_I2C_Init+0x274>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d802      	bhi.n	8004b40 <HAL_I2C_Init+0xd4>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	e009      	b.n	8004b54 <HAL_I2C_Init+0xe8>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	4a69      	ldr	r2, [pc, #420]	; (8004cf0 <HAL_I2C_Init+0x284>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	3301      	adds	r3, #1
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	495c      	ldr	r1, [pc, #368]	; (8004ce0 <HAL_I2C_Init+0x274>)
 8004b70:	428b      	cmp	r3, r1
 8004b72:	d819      	bhi.n	8004ba8 <HAL_I2C_Init+0x13c>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1e59      	subs	r1, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b82:	1c59      	adds	r1, r3, #1
 8004b84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b88:	400b      	ands	r3, r1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_I2C_Init+0x138>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	1e59      	subs	r1, r3, #1
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba2:	e051      	b.n	8004c48 <HAL_I2C_Init+0x1dc>
 8004ba4:	2304      	movs	r3, #4
 8004ba6:	e04f      	b.n	8004c48 <HAL_I2C_Init+0x1dc>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d111      	bne.n	8004bd4 <HAL_I2C_Init+0x168>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1e58      	subs	r0, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	005b      	lsls	r3, r3, #1
 8004bbc:	440b      	add	r3, r1
 8004bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e012      	b.n	8004bfa <HAL_I2C_Init+0x18e>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	1e58      	subs	r0, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6859      	ldr	r1, [r3, #4]
 8004bdc:	460b      	mov	r3, r1
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	0099      	lsls	r1, r3, #2
 8004be4:	440b      	add	r3, r1
 8004be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bea:	3301      	adds	r3, #1
 8004bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	bf0c      	ite	eq
 8004bf4:	2301      	moveq	r3, #1
 8004bf6:	2300      	movne	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_I2C_Init+0x196>
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e022      	b.n	8004c48 <HAL_I2C_Init+0x1dc>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10e      	bne.n	8004c28 <HAL_I2C_Init+0x1bc>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1e58      	subs	r0, r3, #1
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6859      	ldr	r1, [r3, #4]
 8004c12:	460b      	mov	r3, r1
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	440b      	add	r3, r1
 8004c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c26:	e00f      	b.n	8004c48 <HAL_I2C_Init+0x1dc>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	1e58      	subs	r0, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6859      	ldr	r1, [r3, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	0099      	lsls	r1, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c48:	6879      	ldr	r1, [r7, #4]
 8004c4a:	6809      	ldr	r1, [r1, #0]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6911      	ldr	r1, [r2, #16]
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	68d2      	ldr	r2, [r2, #12]
 8004c82:	4311      	orrs	r1, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	695a      	ldr	r2, [r3, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	000186a0 	.word	0x000186a0
 8004ce4:	001e847f 	.word	0x001e847f
 8004ce8:	003d08ff 	.word	0x003d08ff
 8004cec:	431bde83 	.word	0x431bde83
 8004cf0:	10624dd3 	.word	0x10624dd3

08004cf4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e021      	b.n	8004d4a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2224      	movs	r2, #36	; 0x24
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f022 0201 	bic.w	r2, r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f821 	bl	8004d66 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	4608      	mov	r0, r1
 8004d86:	4611      	mov	r1, r2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	817b      	strh	r3, [r7, #10]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	813b      	strh	r3, [r7, #8]
 8004d92:	4613      	mov	r3, r2
 8004d94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d96:	f7fe fef3 	bl	8003b80 <HAL_GetTick>
 8004d9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	f040 80d9 	bne.w	8004f5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	2319      	movs	r3, #25
 8004db0:	2201      	movs	r2, #1
 8004db2:	496d      	ldr	r1, [pc, #436]	; (8004f68 <HAL_I2C_Mem_Write+0x1ec>)
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fc89 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e0cc      	b.n	8004f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_I2C_Mem_Write+0x56>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e0c5      	b.n	8004f5e <HAL_I2C_Mem_Write+0x1e2>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0301 	and.w	r3, r3, #1
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d007      	beq.n	8004df8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0201 	orr.w	r2, r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2221      	movs	r2, #33	; 0x21
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2240      	movs	r2, #64	; 0x40
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004e28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a4d      	ldr	r2, [pc, #308]	; (8004f6c <HAL_I2C_Mem_Write+0x1f0>)
 8004e38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e3a:	88f8      	ldrh	r0, [r7, #6]
 8004e3c:	893a      	ldrh	r2, [r7, #8]
 8004e3e:	8979      	ldrh	r1, [r7, #10]
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	4603      	mov	r3, r0
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 fac4 	bl	80053d8 <I2C_RequestMemoryWrite>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d052      	beq.n	8004efc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e081      	b.n	8004f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fd0a 	bl	8005878 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00d      	beq.n	8004e86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d107      	bne.n	8004e82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e06b      	b.n	8004f5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	781a      	ldrb	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d11b      	bne.n	8004efc <HAL_I2C_Mem_Write+0x180>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d017      	beq.n	8004efc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1aa      	bne.n	8004e5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 fcf6 	bl	80058fa <I2C_WaitOnBTFFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00d      	beq.n	8004f30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d107      	bne.n	8004f2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e016      	b.n	8004f5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	00100002 	.word	0x00100002
 8004f6c:	ffff0000 	.word	0xffff0000

08004f70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08c      	sub	sp, #48	; 0x30
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	4608      	mov	r0, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	4603      	mov	r3, r0
 8004f80:	817b      	strh	r3, [r7, #10]
 8004f82:	460b      	mov	r3, r1
 8004f84:	813b      	strh	r3, [r7, #8]
 8004f86:	4613      	mov	r3, r2
 8004f88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f8a:	f7fe fdf9 	bl	8003b80 <HAL_GetTick>
 8004f8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	f040 8208 	bne.w	80053ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	2319      	movs	r3, #25
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	497b      	ldr	r1, [pc, #492]	; (8005194 <HAL_I2C_Mem_Read+0x224>)
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 fb8f 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e1fb      	b.n	80053b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d101      	bne.n	8004fc6 <HAL_I2C_Mem_Read+0x56>
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	e1f4      	b.n	80053b0 <HAL_I2C_Mem_Read+0x440>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d007      	beq.n	8004fec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2222      	movs	r2, #34	; 0x22
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2240      	movs	r2, #64	; 0x40
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800501c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a5b      	ldr	r2, [pc, #364]	; (8005198 <HAL_I2C_Mem_Read+0x228>)
 800502c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800502e:	88f8      	ldrh	r0, [r7, #6]
 8005030:	893a      	ldrh	r2, [r7, #8]
 8005032:	8979      	ldrh	r1, [r7, #10]
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	4603      	mov	r3, r0
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fa5e 	bl	8005500 <I2C_RequestMemoryRead>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e1b0      	b.n	80053b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d113      	bne.n	800507e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005056:	2300      	movs	r3, #0
 8005058:	623b      	str	r3, [r7, #32]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	623b      	str	r3, [r7, #32]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	623b      	str	r3, [r7, #32]
 800506a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	e184      	b.n	8005388 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005082:	2b01      	cmp	r3, #1
 8005084:	d11b      	bne.n	80050be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005094:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	61fb      	str	r3, [r7, #28]
 80050aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e164      	b.n	8005388 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d11b      	bne.n	80050fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e6:	2300      	movs	r3, #0
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	695b      	ldr	r3, [r3, #20]
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	e144      	b.n	8005388 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005114:	e138      	b.n	8005388 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511a:	2b03      	cmp	r3, #3
 800511c:	f200 80f1 	bhi.w	8005302 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005124:	2b01      	cmp	r3, #1
 8005126:	d123      	bne.n	8005170 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800512a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fc25 	bl	800597c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e139      	b.n	80053b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800516e:	e10b      	b.n	8005388 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	2b02      	cmp	r3, #2
 8005176:	d14e      	bne.n	8005216 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517e:	2200      	movs	r2, #0
 8005180:	4906      	ldr	r1, [pc, #24]	; (800519c <HAL_I2C_Mem_Read+0x22c>)
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 faa2 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e10e      	b.n	80053b0 <HAL_I2C_Mem_Read+0x440>
 8005192:	bf00      	nop
 8005194:	00100002 	.word	0x00100002
 8005198:	ffff0000 	.word	0xffff0000
 800519c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005214:	e0b8      	b.n	8005388 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521c:	2200      	movs	r2, #0
 800521e:	4966      	ldr	r1, [pc, #408]	; (80053b8 <HAL_I2C_Mem_Read+0x448>)
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fa53 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0bf      	b.n	80053b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800523e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	2200      	movs	r2, #0
 800527a:	494f      	ldr	r1, [pc, #316]	; (80053b8 <HAL_I2C_Mem_Read+0x448>)
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 fa25 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e091      	b.n	80053b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005300:	e042      	b.n	8005388 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005304:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 fb38 	bl	800597c <I2C_WaitOnRXNEFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e04c      	b.n	80053b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d118      	bne.n	8005388 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538c:	2b00      	cmp	r3, #0
 800538e:	f47f aec2 	bne.w	8005116 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	e000      	b.n	80053b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053ae:	2302      	movs	r3, #2
  }
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3728      	adds	r7, #40	; 0x28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	00010004 	.word	0x00010004

080053bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ca:	b2db      	uxtb	r3, r3
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	461a      	mov	r2, r3
 80053e6:	4603      	mov	r3, r0
 80053e8:	817b      	strh	r3, [r7, #10]
 80053ea:	460b      	mov	r3, r1
 80053ec:	813b      	strh	r3, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005400:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	2200      	movs	r2, #0
 800540a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f95c 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00c      	beq.n	8005434 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d003      	beq.n	8005430 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800542e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e05f      	b.n	80054f4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005434:	897b      	ldrh	r3, [r7, #10]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	461a      	mov	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005442:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	6a3a      	ldr	r2, [r7, #32]
 8005448:	492c      	ldr	r1, [pc, #176]	; (80054fc <I2C_RequestMemoryWrite+0x124>)
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	f000 f995 	bl	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e04c      	b.n	80054f4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695b      	ldr	r3, [r3, #20]
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005472:	6a39      	ldr	r1, [r7, #32]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f9ff 	bl	8005878 <I2C_WaitOnTXEFlagUntilTimeout>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00d      	beq.n	800549c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	2b04      	cmp	r3, #4
 8005486:	d107      	bne.n	8005498 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005496:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e02b      	b.n	80054f4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800549c:	88fb      	ldrh	r3, [r7, #6]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d105      	bne.n	80054ae <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054a2:	893b      	ldrh	r3, [r7, #8]
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	611a      	str	r2, [r3, #16]
 80054ac:	e021      	b.n	80054f2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80054ae:	893b      	ldrh	r3, [r7, #8]
 80054b0:	0a1b      	lsrs	r3, r3, #8
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054be:	6a39      	ldr	r1, [r7, #32]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f9d9 	bl	8005878 <I2C_WaitOnTXEFlagUntilTimeout>
 80054c6:	4603      	mov	r3, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00d      	beq.n	80054e8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d107      	bne.n	80054e4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e005      	b.n	80054f4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054e8:	893b      	ldrh	r3, [r7, #8]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	00010002 	.word	0x00010002

08005500 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af02      	add	r7, sp, #8
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	4608      	mov	r0, r1
 800550a:	4611      	mov	r1, r2
 800550c:	461a      	mov	r2, r3
 800550e:	4603      	mov	r3, r0
 8005510:	817b      	strh	r3, [r7, #10]
 8005512:	460b      	mov	r3, r1
 8005514:	813b      	strh	r3, [r7, #8]
 8005516:	4613      	mov	r3, r2
 8005518:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005528:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005538:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	2200      	movs	r2, #0
 8005542:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f8c0 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005566:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e0a9      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800556c:	897b      	ldrh	r3, [r7, #10]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800557a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	6a3a      	ldr	r2, [r7, #32]
 8005580:	4951      	ldr	r1, [pc, #324]	; (80056c8 <I2C_RequestMemoryRead+0x1c8>)
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f8f9 	bl	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e096      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055aa:	6a39      	ldr	r1, [r7, #32]
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 f963 	bl	8005878 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00d      	beq.n	80055d4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d107      	bne.n	80055d0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e075      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055d4:	88fb      	ldrh	r3, [r7, #6]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d105      	bne.n	80055e6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055da:	893b      	ldrh	r3, [r7, #8]
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	611a      	str	r2, [r3, #16]
 80055e4:	e021      	b.n	800562a <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055e6:	893b      	ldrh	r3, [r7, #8]
 80055e8:	0a1b      	lsrs	r3, r3, #8
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	6a39      	ldr	r1, [r7, #32]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f93d 	bl	8005878 <I2C_WaitOnTXEFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00d      	beq.n	8005620 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005608:	2b04      	cmp	r3, #4
 800560a:	d107      	bne.n	800561c <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800561a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e04f      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005620:	893b      	ldrh	r3, [r7, #8]
 8005622:	b2da      	uxtb	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	6a39      	ldr	r1, [r7, #32]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 f922 	bl	8005878 <I2C_WaitOnTXEFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00d      	beq.n	8005656 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	2b04      	cmp	r3, #4
 8005640:	d107      	bne.n	8005652 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005650:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e034      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005664:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	2200      	movs	r2, #0
 800566e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f000 f82a 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00c      	beq.n	8005698 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005688:	2b00      	cmp	r3, #0
 800568a:	d003      	beq.n	8005694 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e013      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005698:	897b      	ldrh	r3, [r7, #10]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	4906      	ldr	r1, [pc, #24]	; (80056c8 <I2C_RequestMemoryRead+0x1c8>)
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f863 	bl	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	00010002 	.word	0x00010002

080056cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056dc:	e025      	b.n	800572a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056e4:	d021      	beq.n	800572a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fe fa4b 	bl	8003b80 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d116      	bne.n	800572a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e023      	b.n	8005772 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d10d      	bne.n	8005750 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	43da      	mvns	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	e00c      	b.n	800576a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	43da      	mvns	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	bf0c      	ite	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	2300      	movne	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	429a      	cmp	r2, r3
 800576e:	d0b6      	beq.n	80056de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005788:	e051      	b.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d123      	bne.n	80057e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f043 0204 	orr.w	r2, r3, #4
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e046      	b.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057e8:	d021      	beq.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fe f9c9 	bl	8003b80 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d116      	bne.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e020      	b.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	0c1b      	lsrs	r3, r3, #16
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d10c      	bne.n	8005852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	43da      	mvns	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4013      	ands	r3, r2
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	e00b      	b.n	800586a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	43da      	mvns	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4013      	ands	r3, r2
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d18d      	bne.n	800578a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005884:	e02d      	b.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f8ce 	bl	8005a28 <I2C_IsAcknowledgeFailed>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e02d      	b.n	80058f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800589c:	d021      	beq.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589e:	f7fe f96f 	bl	8003b80 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d116      	bne.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f043 0220 	orr.w	r2, r3, #32
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e007      	b.n	80058f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d1ca      	bne.n	8005886 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005906:	e02d      	b.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f88d 	bl	8005a28 <I2C_IsAcknowledgeFailed>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e02d      	b.n	8005974 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800591e:	d021      	beq.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005920:	f7fe f92e 	bl	8003b80 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	429a      	cmp	r2, r3
 800592e:	d302      	bcc.n	8005936 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d116      	bne.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e007      	b.n	8005974 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b04      	cmp	r3, #4
 8005970:	d1ca      	bne.n	8005908 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005988:	e042      	b.n	8005a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b10      	cmp	r3, #16
 8005996:	d119      	bne.n	80059cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0210 	mvn.w	r2, #16
 80059a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e029      	b.n	8005a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059cc:	f7fe f8d8 	bl	8003b80 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d302      	bcc.n	80059e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d116      	bne.n	8005a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e007      	b.n	8005a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d1b5      	bne.n	800598a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3e:	d11b      	bne.n	8005a78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	f043 0204 	orr.w	r2, r3, #4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e0bf      	b.n	8005c1a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f8ba 	bl	8005c28 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005aca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6999      	ldr	r1, [r3, #24]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ae0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6899      	ldr	r1, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b4a      	ldr	r3, [pc, #296]	; (8005c24 <HAL_LTDC_Init+0x19c>)
 8005afc:	400b      	ands	r3, r1
 8005afe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6899      	ldr	r1, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	431a      	orrs	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68d9      	ldr	r1, [r3, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	4b3e      	ldr	r3, [pc, #248]	; (8005c24 <HAL_LTDC_Init+0x19c>)
 8005b2a:	400b      	ands	r3, r1
 8005b2c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	041b      	lsls	r3, r3, #16
 8005b34:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68d9      	ldr	r1, [r3, #12]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1a      	ldr	r2, [r3, #32]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	431a      	orrs	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6919      	ldr	r1, [r3, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	4b33      	ldr	r3, [pc, #204]	; (8005c24 <HAL_LTDC_Init+0x19c>)
 8005b58:	400b      	ands	r3, r1
 8005b5a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	041b      	lsls	r3, r3, #16
 8005b62:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6919      	ldr	r1, [r3, #16]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6959      	ldr	r1, [r3, #20]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4b27      	ldr	r3, [pc, #156]	; (8005c24 <HAL_LTDC_Init+0x19c>)
 8005b86:	400b      	ands	r3, r1
 8005b88:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6959      	ldr	r1, [r3, #20]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0206 	orr.w	r2, r2, #6
 8005bf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	f000f800 	.word	0xf000f800

08005c28 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c3c:	b5b0      	push	{r4, r5, r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d101      	bne.n	8005c56 <HAL_LTDC_ConfigLayer+0x1a>
 8005c52:	2302      	movs	r3, #2
 8005c54:	e02c      	b.n	8005cb0 <HAL_LTDC_ConfigLayer+0x74>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2202      	movs	r2, #2
 8005c62:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2134      	movs	r1, #52	; 0x34
 8005c6c:	fb01 f303 	mul.w	r3, r1, r3
 8005c70:	4413      	add	r3, r2
 8005c72:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	4614      	mov	r4, r2
 8005c7a:	461d      	mov	r5, r3
 8005c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c88:	682b      	ldr	r3, [r5, #0]
 8005c8a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f83b 	bl	8005d0c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bdb0      	pop	{r4, r5, r7, pc}

08005cb8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d101      	bne.n	8005cce <HAL_LTDC_EnableDither+0x16>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	e016      	b.n	8005cfc <HAL_LTDC_EnableDither+0x44>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2202      	movs	r2, #2
 8005cda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <HAL_LTDC_EnableDither+0x50>)
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <HAL_LTDC_EnableDither+0x50>)
 8005ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr
 8005d08:	40016800 	.word	0x40016800

08005d0c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b089      	sub	sp, #36	; 0x24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	0c1b      	lsrs	r3, r3, #16
 8005d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d28:	4413      	add	r3, r2
 8005d2a:	041b      	lsls	r3, r3, #16
 8005d2c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	461a      	mov	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	01db      	lsls	r3, r3, #7
 8005d38:	4413      	add	r3, r2
 8005d3a:	3384      	adds	r3, #132	; 0x84
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	4611      	mov	r1, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	01d2      	lsls	r2, r2, #7
 8005d48:	440a      	add	r2, r1
 8005d4a:	3284      	adds	r2, #132	; 0x84
 8005d4c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d50:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d62:	4413      	add	r3, r2
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	01db      	lsls	r3, r3, #7
 8005d70:	440b      	add	r3, r1
 8005d72:	3384      	adds	r3, #132	; 0x84
 8005d74:	4619      	mov	r1, r3
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d8a:	4413      	add	r3, r2
 8005d8c:	041b      	lsls	r3, r3, #16
 8005d8e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	461a      	mov	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	01db      	lsls	r3, r3, #7
 8005d9a:	4413      	add	r3, r2
 8005d9c:	3384      	adds	r3, #132	; 0x84
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	4611      	mov	r1, r2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	01d2      	lsls	r2, r2, #7
 8005daa:	440a      	add	r2, r1
 8005dac:	3284      	adds	r2, #132	; 0x84
 8005dae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005db2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dc2:	4413      	add	r3, r2
 8005dc4:	1c5a      	adds	r2, r3, #1
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	01db      	lsls	r3, r3, #7
 8005dd0:	440b      	add	r3, r1
 8005dd2:	3384      	adds	r3, #132	; 0x84
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	461a      	mov	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	01db      	lsls	r3, r3, #7
 8005de6:	4413      	add	r3, r2
 8005de8:	3384      	adds	r3, #132	; 0x84
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	6812      	ldr	r2, [r2, #0]
 8005df0:	4611      	mov	r1, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	01d2      	lsls	r2, r2, #7
 8005df6:	440a      	add	r2, r1
 8005df8:	3284      	adds	r2, #132	; 0x84
 8005dfa:	f023 0307 	bic.w	r3, r3, #7
 8005dfe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	461a      	mov	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	01db      	lsls	r3, r3, #7
 8005e0a:	4413      	add	r3, r2
 8005e0c:	3384      	adds	r3, #132	; 0x84
 8005e0e:	461a      	mov	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005e1c:	021b      	lsls	r3, r3, #8
 8005e1e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	061b      	lsls	r3, r3, #24
 8005e30:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	01db      	lsls	r3, r3, #7
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3384      	adds	r3, #132	; 0x84
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	01db      	lsls	r3, r3, #7
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3384      	adds	r3, #132	; 0x84
 8005e50:	461a      	mov	r2, r3
 8005e52:	2300      	movs	r3, #0
 8005e54:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	01db      	lsls	r3, r3, #7
 8005e70:	440b      	add	r3, r1
 8005e72:	3384      	adds	r3, #132	; 0x84
 8005e74:	4619      	mov	r1, r3
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	01db      	lsls	r3, r3, #7
 8005e86:	4413      	add	r3, r2
 8005e88:	3384      	adds	r3, #132	; 0x84
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	6812      	ldr	r2, [r2, #0]
 8005e90:	4611      	mov	r1, r2
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	01d2      	lsls	r2, r2, #7
 8005e96:	440a      	add	r2, r1
 8005e98:	3284      	adds	r2, #132	; 0x84
 8005e9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e9e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	01db      	lsls	r3, r3, #7
 8005eaa:	4413      	add	r3, r2
 8005eac:	3384      	adds	r3, #132	; 0x84
 8005eae:	461a      	mov	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	01db      	lsls	r3, r3, #7
 8005ec0:	4413      	add	r3, r2
 8005ec2:	3384      	adds	r3, #132	; 0x84
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	4611      	mov	r1, r2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	01d2      	lsls	r2, r2, #7
 8005ed0:	440a      	add	r2, r1
 8005ed2:	3284      	adds	r2, #132	; 0x84
 8005ed4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005ed8:	f023 0307 	bic.w	r3, r3, #7
 8005edc:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	69da      	ldr	r2, [r3, #28]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	68f9      	ldr	r1, [r7, #12]
 8005ee8:	6809      	ldr	r1, [r1, #0]
 8005eea:	4608      	mov	r0, r1
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	01c9      	lsls	r1, r1, #7
 8005ef0:	4401      	add	r1, r0
 8005ef2:	3184      	adds	r1, #132	; 0x84
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	01db      	lsls	r3, r3, #7
 8005f02:	4413      	add	r3, r2
 8005f04:	3384      	adds	r3, #132	; 0x84
 8005f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	01db      	lsls	r3, r3, #7
 8005f12:	4413      	add	r3, r2
 8005f14:	3384      	adds	r3, #132	; 0x84
 8005f16:	461a      	mov	r2, r3
 8005f18:	2300      	movs	r3, #0
 8005f1a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	461a      	mov	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	01db      	lsls	r3, r3, #7
 8005f26:	4413      	add	r3, r2
 8005f28:	3384      	adds	r3, #132	; 0x84
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d102      	bne.n	8005f40 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005f3a:	2304      	movs	r3, #4
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	e01b      	b.n	8005f78 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d102      	bne.n	8005f4e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	e014      	b.n	8005f78 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	d00b      	beq.n	8005f6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d007      	beq.n	8005f6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d003      	beq.n	8005f6e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f6a:	2b07      	cmp	r3, #7
 8005f6c:	d102      	bne.n	8005f74 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	e001      	b.n	8005f78 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005f74:	2301      	movs	r3, #1
 8005f76:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	01db      	lsls	r3, r3, #7
 8005f82:	4413      	add	r3, r2
 8005f84:	3384      	adds	r3, #132	; 0x84
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	6812      	ldr	r2, [r2, #0]
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	01d2      	lsls	r2, r2, #7
 8005f92:	440a      	add	r2, r1
 8005f94:	3284      	adds	r2, #132	; 0x84
 8005f96:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005f9a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
 8005fa6:	041a      	lsls	r2, r3, #16
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	6859      	ldr	r1, [r3, #4]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	1acb      	subs	r3, r1, r3
 8005fb2:	69f9      	ldr	r1, [r7, #28]
 8005fb4:	fb01 f303 	mul.w	r3, r1, r3
 8005fb8:	3303      	adds	r3, #3
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	6809      	ldr	r1, [r1, #0]
 8005fbe:	4608      	mov	r0, r1
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	01c9      	lsls	r1, r1, #7
 8005fc4:	4401      	add	r1, r0
 8005fc6:	3184      	adds	r1, #132	; 0x84
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	01db      	lsls	r3, r3, #7
 8005fd6:	4413      	add	r3, r2
 8005fd8:	3384      	adds	r3, #132	; 0x84
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	4611      	mov	r1, r2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	01d2      	lsls	r2, r2, #7
 8005fe6:	440a      	add	r2, r1
 8005fe8:	3284      	adds	r2, #132	; 0x84
 8005fea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fee:	f023 0307 	bic.w	r3, r3, #7
 8005ff2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	01db      	lsls	r3, r3, #7
 8005ffe:	4413      	add	r3, r2
 8006000:	3384      	adds	r3, #132	; 0x84
 8006002:	461a      	mov	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	01db      	lsls	r3, r3, #7
 8006014:	4413      	add	r3, r2
 8006016:	3384      	adds	r3, #132	; 0x84
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	6812      	ldr	r2, [r2, #0]
 800601e:	4611      	mov	r1, r2
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	01d2      	lsls	r2, r2, #7
 8006024:	440a      	add	r2, r1
 8006026:	3284      	adds	r2, #132	; 0x84
 8006028:	f043 0301 	orr.w	r3, r3, #1
 800602c:	6013      	str	r3, [r2, #0]
}
 800602e:	bf00      	nop
 8006030:	3724      	adds	r7, #36	; 0x24
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e25e      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d075      	beq.n	8006146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800605a:	4b88      	ldr	r3, [pc, #544]	; (800627c <HAL_RCC_OscConfig+0x240>)
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 030c 	and.w	r3, r3, #12
 8006062:	2b04      	cmp	r3, #4
 8006064:	d00c      	beq.n	8006080 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006066:	4b85      	ldr	r3, [pc, #532]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800606e:	2b08      	cmp	r3, #8
 8006070:	d112      	bne.n	8006098 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006072:	4b82      	ldr	r3, [pc, #520]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800607a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800607e:	d10b      	bne.n	8006098 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006080:	4b7e      	ldr	r3, [pc, #504]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d05b      	beq.n	8006144 <HAL_RCC_OscConfig+0x108>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d157      	bne.n	8006144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e239      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060a0:	d106      	bne.n	80060b0 <HAL_RCC_OscConfig+0x74>
 80060a2:	4b76      	ldr	r3, [pc, #472]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a75      	ldr	r2, [pc, #468]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e01d      	b.n	80060ec <HAL_RCC_OscConfig+0xb0>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060b8:	d10c      	bne.n	80060d4 <HAL_RCC_OscConfig+0x98>
 80060ba:	4b70      	ldr	r3, [pc, #448]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a6f      	ldr	r2, [pc, #444]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060c4:	6013      	str	r3, [r2, #0]
 80060c6:	4b6d      	ldr	r3, [pc, #436]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a6c      	ldr	r2, [pc, #432]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e00b      	b.n	80060ec <HAL_RCC_OscConfig+0xb0>
 80060d4:	4b69      	ldr	r3, [pc, #420]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a68      	ldr	r2, [pc, #416]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060de:	6013      	str	r3, [r2, #0]
 80060e0:	4b66      	ldr	r3, [pc, #408]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a65      	ldr	r2, [pc, #404]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80060e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d013      	beq.n	800611c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f4:	f7fd fd44 	bl	8003b80 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060fa:	e008      	b.n	800610e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060fc:	f7fd fd40 	bl	8003b80 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b64      	cmp	r3, #100	; 0x64
 8006108:	d901      	bls.n	800610e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e1fe      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800610e:	4b5b      	ldr	r3, [pc, #364]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0f0      	beq.n	80060fc <HAL_RCC_OscConfig+0xc0>
 800611a:	e014      	b.n	8006146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800611c:	f7fd fd30 	bl	8003b80 <HAL_GetTick>
 8006120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006122:	e008      	b.n	8006136 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006124:	f7fd fd2c 	bl	8003b80 <HAL_GetTick>
 8006128:	4602      	mov	r2, r0
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	2b64      	cmp	r3, #100	; 0x64
 8006130:	d901      	bls.n	8006136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006132:	2303      	movs	r3, #3
 8006134:	e1ea      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006136:	4b51      	ldr	r3, [pc, #324]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1f0      	bne.n	8006124 <HAL_RCC_OscConfig+0xe8>
 8006142:	e000      	b.n	8006146 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d063      	beq.n	800621a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006152:	4b4a      	ldr	r3, [pc, #296]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f003 030c 	and.w	r3, r3, #12
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00b      	beq.n	8006176 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800615e:	4b47      	ldr	r3, [pc, #284]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006166:	2b08      	cmp	r3, #8
 8006168:	d11c      	bne.n	80061a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800616a:	4b44      	ldr	r3, [pc, #272]	; (800627c <HAL_RCC_OscConfig+0x240>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d116      	bne.n	80061a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006176:	4b41      	ldr	r3, [pc, #260]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d005      	beq.n	800618e <HAL_RCC_OscConfig+0x152>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d001      	beq.n	800618e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e1be      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800618e:	4b3b      	ldr	r3, [pc, #236]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	4937      	ldr	r1, [pc, #220]	; (800627c <HAL_RCC_OscConfig+0x240>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061a2:	e03a      	b.n	800621a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d020      	beq.n	80061ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061ac:	4b34      	ldr	r3, [pc, #208]	; (8006280 <HAL_RCC_OscConfig+0x244>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b2:	f7fd fce5 	bl	8003b80 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ba:	f7fd fce1 	bl	8003b80 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e19f      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061cc:	4b2b      	ldr	r3, [pc, #172]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061d8:	4b28      	ldr	r3, [pc, #160]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	00db      	lsls	r3, r3, #3
 80061e6:	4925      	ldr	r1, [pc, #148]	; (800627c <HAL_RCC_OscConfig+0x240>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	600b      	str	r3, [r1, #0]
 80061ec:	e015      	b.n	800621a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061ee:	4b24      	ldr	r3, [pc, #144]	; (8006280 <HAL_RCC_OscConfig+0x244>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061f4:	f7fd fcc4 	bl	8003b80 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061fc:	f7fd fcc0 	bl	8003b80 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e17e      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800620e:	4b1b      	ldr	r3, [pc, #108]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1f0      	bne.n	80061fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d036      	beq.n	8006294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d016      	beq.n	800625c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800622e:	4b15      	ldr	r3, [pc, #84]	; (8006284 <HAL_RCC_OscConfig+0x248>)
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006234:	f7fd fca4 	bl	8003b80 <HAL_GetTick>
 8006238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800623a:	e008      	b.n	800624e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800623c:	f7fd fca0 	bl	8003b80 <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	2b02      	cmp	r3, #2
 8006248:	d901      	bls.n	800624e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e15e      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800624e:	4b0b      	ldr	r3, [pc, #44]	; (800627c <HAL_RCC_OscConfig+0x240>)
 8006250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0f0      	beq.n	800623c <HAL_RCC_OscConfig+0x200>
 800625a:	e01b      	b.n	8006294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800625c:	4b09      	ldr	r3, [pc, #36]	; (8006284 <HAL_RCC_OscConfig+0x248>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006262:	f7fd fc8d 	bl	8003b80 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006268:	e00e      	b.n	8006288 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800626a:	f7fd fc89 	bl	8003b80 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d907      	bls.n	8006288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e147      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
 800627c:	40023800 	.word	0x40023800
 8006280:	42470000 	.word	0x42470000
 8006284:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006288:	4b88      	ldr	r3, [pc, #544]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800628a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1ea      	bne.n	800626a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0304 	and.w	r3, r3, #4
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 8097 	beq.w	80063d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062a6:	4b81      	ldr	r3, [pc, #516]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80062a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10f      	bne.n	80062d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062b2:	2300      	movs	r3, #0
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	4b7d      	ldr	r3, [pc, #500]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	4a7c      	ldr	r2, [pc, #496]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80062bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062c0:	6413      	str	r3, [r2, #64]	; 0x40
 80062c2:	4b7a      	ldr	r3, [pc, #488]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80062c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ca:	60bb      	str	r3, [r7, #8]
 80062cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ce:	2301      	movs	r3, #1
 80062d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062d2:	4b77      	ldr	r3, [pc, #476]	; (80064b0 <HAL_RCC_OscConfig+0x474>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d118      	bne.n	8006310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062de:	4b74      	ldr	r3, [pc, #464]	; (80064b0 <HAL_RCC_OscConfig+0x474>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a73      	ldr	r2, [pc, #460]	; (80064b0 <HAL_RCC_OscConfig+0x474>)
 80062e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062ea:	f7fd fc49 	bl	8003b80 <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062f0:	e008      	b.n	8006304 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062f2:	f7fd fc45 	bl	8003b80 <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d901      	bls.n	8006304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e103      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006304:	4b6a      	ldr	r3, [pc, #424]	; (80064b0 <HAL_RCC_OscConfig+0x474>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0f0      	beq.n	80062f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d106      	bne.n	8006326 <HAL_RCC_OscConfig+0x2ea>
 8006318:	4b64      	ldr	r3, [pc, #400]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800631a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631c:	4a63      	ldr	r2, [pc, #396]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800631e:	f043 0301 	orr.w	r3, r3, #1
 8006322:	6713      	str	r3, [r2, #112]	; 0x70
 8006324:	e01c      	b.n	8006360 <HAL_RCC_OscConfig+0x324>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	2b05      	cmp	r3, #5
 800632c:	d10c      	bne.n	8006348 <HAL_RCC_OscConfig+0x30c>
 800632e:	4b5f      	ldr	r3, [pc, #380]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006332:	4a5e      	ldr	r2, [pc, #376]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006334:	f043 0304 	orr.w	r3, r3, #4
 8006338:	6713      	str	r3, [r2, #112]	; 0x70
 800633a:	4b5c      	ldr	r3, [pc, #368]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800633c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800633e:	4a5b      	ldr	r2, [pc, #364]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006340:	f043 0301 	orr.w	r3, r3, #1
 8006344:	6713      	str	r3, [r2, #112]	; 0x70
 8006346:	e00b      	b.n	8006360 <HAL_RCC_OscConfig+0x324>
 8006348:	4b58      	ldr	r3, [pc, #352]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	4a57      	ldr	r2, [pc, #348]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	6713      	str	r3, [r2, #112]	; 0x70
 8006354:	4b55      	ldr	r3, [pc, #340]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006358:	4a54      	ldr	r2, [pc, #336]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 800635a:	f023 0304 	bic.w	r3, r3, #4
 800635e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d015      	beq.n	8006394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006368:	f7fd fc0a 	bl	8003b80 <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800636e:	e00a      	b.n	8006386 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006370:	f7fd fc06 	bl	8003b80 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	f241 3288 	movw	r2, #5000	; 0x1388
 800637e:	4293      	cmp	r3, r2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e0c2      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006386:	4b49      	ldr	r3, [pc, #292]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0ee      	beq.n	8006370 <HAL_RCC_OscConfig+0x334>
 8006392:	e014      	b.n	80063be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006394:	f7fd fbf4 	bl	8003b80 <HAL_GetTick>
 8006398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800639a:	e00a      	b.n	80063b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800639c:	f7fd fbf0 	bl	8003b80 <HAL_GetTick>
 80063a0:	4602      	mov	r2, r0
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e0ac      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063b2:	4b3e      	ldr	r3, [pc, #248]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d1ee      	bne.n	800639c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d105      	bne.n	80063d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063c4:	4b39      	ldr	r3, [pc, #228]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80063c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c8:	4a38      	ldr	r2, [pc, #224]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80063ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8098 	beq.w	800650a <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063da:	4b34      	ldr	r3, [pc, #208]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 030c 	and.w	r3, r3, #12
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d05c      	beq.n	80064a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d141      	bne.n	8006472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ee:	4b31      	ldr	r3, [pc, #196]	; (80064b4 <HAL_RCC_OscConfig+0x478>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f4:	f7fd fbc4 	bl	8003b80 <HAL_GetTick>
 80063f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fa:	e008      	b.n	800640e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063fc:	f7fd fbc0 	bl	8003b80 <HAL_GetTick>
 8006400:	4602      	mov	r2, r0
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	1ad3      	subs	r3, r2, r3
 8006406:	2b02      	cmp	r3, #2
 8006408:	d901      	bls.n	800640e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e07e      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640e:	4b27      	ldr	r3, [pc, #156]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f0      	bne.n	80063fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	69da      	ldr	r2, [r3, #28]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	019b      	lsls	r3, r3, #6
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	085b      	lsrs	r3, r3, #1
 8006432:	3b01      	subs	r3, #1
 8006434:	041b      	lsls	r3, r3, #16
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	061b      	lsls	r3, r3, #24
 800643e:	491b      	ldr	r1, [pc, #108]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006440:	4313      	orrs	r3, r2
 8006442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006444:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <HAL_RCC_OscConfig+0x478>)
 8006446:	2201      	movs	r2, #1
 8006448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644a:	f7fd fb99 	bl	8003b80 <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006450:	e008      	b.n	8006464 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006452:	f7fd fb95 	bl	8003b80 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e053      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006464:	4b11      	ldr	r3, [pc, #68]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0f0      	beq.n	8006452 <HAL_RCC_OscConfig+0x416>
 8006470:	e04b      	b.n	800650a <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006472:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <HAL_RCC_OscConfig+0x478>)
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006478:	f7fd fb82 	bl	8003b80 <HAL_GetTick>
 800647c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800647e:	e008      	b.n	8006492 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006480:	f7fd fb7e 	bl	8003b80 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e03c      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <HAL_RCC_OscConfig+0x470>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1f0      	bne.n	8006480 <HAL_RCC_OscConfig+0x444>
 800649e:	e034      	b.n	800650a <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d107      	bne.n	80064b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e02f      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
 80064ac:	40023800 	.word	0x40023800
 80064b0:	40007000 	.word	0x40007000
 80064b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064b8:	4b16      	ldr	r3, [pc, #88]	; (8006514 <HAL_RCC_OscConfig+0x4d8>)
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d11c      	bne.n	8006506 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d115      	bne.n	8006506 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064e0:	4013      	ands	r3, r2
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d10d      	bne.n	8006506 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d106      	bne.n	8006506 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006502:	429a      	cmp	r2, r3
 8006504:	d001      	beq.n	800650a <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e000      	b.n	800650c <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3718      	adds	r7, #24
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	40023800 	.word	0x40023800

08006518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0cc      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800652c:	4b68      	ldr	r3, [pc, #416]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 030f 	and.w	r3, r3, #15
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d90c      	bls.n	8006554 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800653a:	4b65      	ldr	r3, [pc, #404]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	b2d2      	uxtb	r2, r2
 8006540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006542:	4b63      	ldr	r3, [pc, #396]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	683a      	ldr	r2, [r7, #0]
 800654c:	429a      	cmp	r2, r3
 800654e:	d001      	beq.n	8006554 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e0b8      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d020      	beq.n	80065a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d005      	beq.n	8006578 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800656c:	4b59      	ldr	r3, [pc, #356]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	4a58      	ldr	r2, [pc, #352]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006572:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006576:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 0308 	and.w	r3, r3, #8
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006584:	4b53      	ldr	r3, [pc, #332]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4a52      	ldr	r2, [pc, #328]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800658a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800658e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006590:	4b50      	ldr	r3, [pc, #320]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	494d      	ldr	r1, [pc, #308]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800659e:	4313      	orrs	r3, r2
 80065a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d044      	beq.n	8006638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d107      	bne.n	80065c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065b6:	4b47      	ldr	r3, [pc, #284]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d119      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	e07f      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d003      	beq.n	80065d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80065d2:	2b03      	cmp	r3, #3
 80065d4:	d107      	bne.n	80065e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065d6:	4b3f      	ldr	r3, [pc, #252]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d109      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e06f      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065e6:	4b3b      	ldr	r3, [pc, #236]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0302 	and.w	r3, r3, #2
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e067      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065f6:	4b37      	ldr	r3, [pc, #220]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f023 0203 	bic.w	r2, r3, #3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	4934      	ldr	r1, [pc, #208]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006604:	4313      	orrs	r3, r2
 8006606:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006608:	f7fd faba 	bl	8003b80 <HAL_GetTick>
 800660c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800660e:	e00a      	b.n	8006626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006610:	f7fd fab6 	bl	8003b80 <HAL_GetTick>
 8006614:	4602      	mov	r2, r0
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	f241 3288 	movw	r2, #5000	; 0x1388
 800661e:	4293      	cmp	r3, r2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e04f      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006626:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 020c 	and.w	r2, r3, #12
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	429a      	cmp	r2, r3
 8006636:	d1eb      	bne.n	8006610 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006638:	4b25      	ldr	r3, [pc, #148]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	683a      	ldr	r2, [r7, #0]
 8006642:	429a      	cmp	r2, r3
 8006644:	d20c      	bcs.n	8006660 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006646:	4b22      	ldr	r3, [pc, #136]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006648:	683a      	ldr	r2, [r7, #0]
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800664e:	4b20      	ldr	r3, [pc, #128]	; (80066d0 <HAL_RCC_ClockConfig+0x1b8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	683a      	ldr	r2, [r7, #0]
 8006658:	429a      	cmp	r2, r3
 800665a:	d001      	beq.n	8006660 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e032      	b.n	80066c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0304 	and.w	r3, r3, #4
 8006668:	2b00      	cmp	r3, #0
 800666a:	d008      	beq.n	800667e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800666c:	4b19      	ldr	r3, [pc, #100]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	4916      	ldr	r1, [pc, #88]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800667a:	4313      	orrs	r3, r2
 800667c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0308 	and.w	r3, r3, #8
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800668a:	4b12      	ldr	r3, [pc, #72]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	490e      	ldr	r1, [pc, #56]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 800669a:	4313      	orrs	r3, r2
 800669c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800669e:	f000 f821 	bl	80066e4 <HAL_RCC_GetSysClockFreq>
 80066a2:	4602      	mov	r2, r0
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <HAL_RCC_ClockConfig+0x1bc>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	091b      	lsrs	r3, r3, #4
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	490a      	ldr	r1, [pc, #40]	; (80066d8 <HAL_RCC_ClockConfig+0x1c0>)
 80066b0:	5ccb      	ldrb	r3, [r1, r3]
 80066b2:	fa22 f303 	lsr.w	r3, r2, r3
 80066b6:	4a09      	ldr	r2, [pc, #36]	; (80066dc <HAL_RCC_ClockConfig+0x1c4>)
 80066b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80066ba:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <HAL_RCC_ClockConfig+0x1c8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fd fa1a 	bl	8003af8 <HAL_InitTick>

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40023c00 	.word	0x40023c00
 80066d4:	40023800 	.word	0x40023800
 80066d8:	080087d4 	.word	0x080087d4
 80066dc:	200000fc 	.word	0x200000fc
 80066e0:	2000018c 	.word	0x2000018c

080066e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e8:	b094      	sub	sp, #80	; 0x50
 80066ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	647b      	str	r3, [r7, #68]	; 0x44
 80066f0:	2300      	movs	r3, #0
 80066f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066f4:	2300      	movs	r3, #0
 80066f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066fc:	4b79      	ldr	r3, [pc, #484]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f003 030c 	and.w	r3, r3, #12
 8006704:	2b08      	cmp	r3, #8
 8006706:	d00d      	beq.n	8006724 <HAL_RCC_GetSysClockFreq+0x40>
 8006708:	2b08      	cmp	r3, #8
 800670a:	f200 80e1 	bhi.w	80068d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_RCC_GetSysClockFreq+0x34>
 8006712:	2b04      	cmp	r3, #4
 8006714:	d003      	beq.n	800671e <HAL_RCC_GetSysClockFreq+0x3a>
 8006716:	e0db      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006718:	4b73      	ldr	r3, [pc, #460]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800671a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800671c:	e0db      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800671e:	4b73      	ldr	r3, [pc, #460]	; (80068ec <HAL_RCC_GetSysClockFreq+0x208>)
 8006720:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006722:	e0d8      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006724:	4b6f      	ldr	r3, [pc, #444]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800672c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800672e:	4b6d      	ldr	r3, [pc, #436]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d063      	beq.n	8006802 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800673a:	4b6a      	ldr	r3, [pc, #424]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	099b      	lsrs	r3, r3, #6
 8006740:	2200      	movs	r2, #0
 8006742:	63bb      	str	r3, [r7, #56]	; 0x38
 8006744:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674c:	633b      	str	r3, [r7, #48]	; 0x30
 800674e:	2300      	movs	r3, #0
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
 8006752:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006756:	4622      	mov	r2, r4
 8006758:	462b      	mov	r3, r5
 800675a:	f04f 0000 	mov.w	r0, #0
 800675e:	f04f 0100 	mov.w	r1, #0
 8006762:	0159      	lsls	r1, r3, #5
 8006764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006768:	0150      	lsls	r0, r2, #5
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4621      	mov	r1, r4
 8006770:	1a51      	subs	r1, r2, r1
 8006772:	6139      	str	r1, [r7, #16]
 8006774:	4629      	mov	r1, r5
 8006776:	eb63 0301 	sbc.w	r3, r3, r1
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006788:	4659      	mov	r1, fp
 800678a:	018b      	lsls	r3, r1, #6
 800678c:	4651      	mov	r1, sl
 800678e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006792:	4651      	mov	r1, sl
 8006794:	018a      	lsls	r2, r1, #6
 8006796:	4651      	mov	r1, sl
 8006798:	ebb2 0801 	subs.w	r8, r2, r1
 800679c:	4659      	mov	r1, fp
 800679e:	eb63 0901 	sbc.w	r9, r3, r1
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067b6:	4690      	mov	r8, r2
 80067b8:	4699      	mov	r9, r3
 80067ba:	4623      	mov	r3, r4
 80067bc:	eb18 0303 	adds.w	r3, r8, r3
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	462b      	mov	r3, r5
 80067c4:	eb49 0303 	adc.w	r3, r9, r3
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067d6:	4629      	mov	r1, r5
 80067d8:	024b      	lsls	r3, r1, #9
 80067da:	4621      	mov	r1, r4
 80067dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067e0:	4621      	mov	r1, r4
 80067e2:	024a      	lsls	r2, r1, #9
 80067e4:	4610      	mov	r0, r2
 80067e6:	4619      	mov	r1, r3
 80067e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067ea:	2200      	movs	r2, #0
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067f4:	f7f9 fd4c 	bl	8000290 <__aeabi_uldivmod>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4613      	mov	r3, r2
 80067fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006800:	e058      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006802:	4b38      	ldr	r3, [pc, #224]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	099b      	lsrs	r3, r3, #6
 8006808:	2200      	movs	r2, #0
 800680a:	4618      	mov	r0, r3
 800680c:	4611      	mov	r1, r2
 800680e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006812:	623b      	str	r3, [r7, #32]
 8006814:	2300      	movs	r3, #0
 8006816:	627b      	str	r3, [r7, #36]	; 0x24
 8006818:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800681c:	4642      	mov	r2, r8
 800681e:	464b      	mov	r3, r9
 8006820:	f04f 0000 	mov.w	r0, #0
 8006824:	f04f 0100 	mov.w	r1, #0
 8006828:	0159      	lsls	r1, r3, #5
 800682a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800682e:	0150      	lsls	r0, r2, #5
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4641      	mov	r1, r8
 8006836:	ebb2 0a01 	subs.w	sl, r2, r1
 800683a:	4649      	mov	r1, r9
 800683c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	f04f 0300 	mov.w	r3, #0
 8006848:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800684c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006850:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006854:	ebb2 040a 	subs.w	r4, r2, sl
 8006858:	eb63 050b 	sbc.w	r5, r3, fp
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	00eb      	lsls	r3, r5, #3
 8006866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800686a:	00e2      	lsls	r2, r4, #3
 800686c:	4614      	mov	r4, r2
 800686e:	461d      	mov	r5, r3
 8006870:	4643      	mov	r3, r8
 8006872:	18e3      	adds	r3, r4, r3
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	464b      	mov	r3, r9
 8006878:	eb45 0303 	adc.w	r3, r5, r3
 800687c:	607b      	str	r3, [r7, #4]
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800688a:	4629      	mov	r1, r5
 800688c:	028b      	lsls	r3, r1, #10
 800688e:	4621      	mov	r1, r4
 8006890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006894:	4621      	mov	r1, r4
 8006896:	028a      	lsls	r2, r1, #10
 8006898:	4610      	mov	r0, r2
 800689a:	4619      	mov	r1, r3
 800689c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800689e:	2200      	movs	r2, #0
 80068a0:	61bb      	str	r3, [r7, #24]
 80068a2:	61fa      	str	r2, [r7, #28]
 80068a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068a8:	f7f9 fcf2 	bl	8000290 <__aeabi_uldivmod>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4613      	mov	r3, r2
 80068b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	0c1b      	lsrs	r3, r3, #16
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	3301      	adds	r3, #1
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80068c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068ce:	e002      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068d0:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80068d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3750      	adds	r7, #80	; 0x50
 80068dc:	46bd      	mov	sp, r7
 80068de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068e2:	bf00      	nop
 80068e4:	40023800 	.word	0x40023800
 80068e8:	00f42400 	.word	0x00f42400
 80068ec:	007a1200 	.word	0x007a1200

080068f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f4:	4b03      	ldr	r3, [pc, #12]	; (8006904 <HAL_RCC_GetHCLKFreq+0x14>)
 80068f6:	681b      	ldr	r3, [r3, #0]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	200000fc 	.word	0x200000fc

08006908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800690c:	f7ff fff0 	bl	80068f0 <HAL_RCC_GetHCLKFreq>
 8006910:	4602      	mov	r2, r0
 8006912:	4b05      	ldr	r3, [pc, #20]	; (8006928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	0a9b      	lsrs	r3, r3, #10
 8006918:	f003 0307 	and.w	r3, r3, #7
 800691c:	4903      	ldr	r1, [pc, #12]	; (800692c <HAL_RCC_GetPCLK1Freq+0x24>)
 800691e:	5ccb      	ldrb	r3, [r1, r3]
 8006920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006924:	4618      	mov	r0, r3
 8006926:	bd80      	pop	{r7, pc}
 8006928:	40023800 	.word	0x40023800
 800692c:	080087e4 	.word	0x080087e4

08006930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0301 	and.w	r3, r3, #1
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10b      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006954:	2b00      	cmp	r3, #0
 8006956:	d105      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006960:	2b00      	cmp	r3, #0
 8006962:	d075      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006964:	4b91      	ldr	r3, [pc, #580]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800696a:	f7fd f909 	bl	8003b80 <HAL_GetTick>
 800696e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006970:	e008      	b.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006972:	f7fd f905 	bl	8003b80 <HAL_GetTick>
 8006976:	4602      	mov	r2, r0
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e189      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006984:	4b8a      	ldr	r3, [pc, #552]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f0      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d009      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	019a      	lsls	r2, r3, #6
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	071b      	lsls	r3, r3, #28
 80069a8:	4981      	ldr	r1, [pc, #516]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0302 	and.w	r3, r3, #2
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01f      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80069bc:	4b7c      	ldr	r3, [pc, #496]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c2:	0f1b      	lsrs	r3, r3, #28
 80069c4:	f003 0307 	and.w	r3, r3, #7
 80069c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	019a      	lsls	r2, r3, #6
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	061b      	lsls	r3, r3, #24
 80069d6:	431a      	orrs	r2, r3
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	071b      	lsls	r3, r3, #28
 80069dc:	4974      	ldr	r1, [pc, #464]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80069e4:	4b72      	ldr	r3, [pc, #456]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069ea:	f023 021f 	bic.w	r2, r3, #31
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	496e      	ldr	r1, [pc, #440]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00d      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	019a      	lsls	r2, r3, #6
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	061b      	lsls	r3, r3, #24
 8006a14:	431a      	orrs	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	071b      	lsls	r3, r3, #28
 8006a1c:	4964      	ldr	r1, [pc, #400]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a24:	4b61      	ldr	r3, [pc, #388]	; (8006bac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006a26:	2201      	movs	r2, #1
 8006a28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a2a:	f7fd f8a9 	bl	8003b80 <HAL_GetTick>
 8006a2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a30:	e008      	b.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a32:	f7fd f8a5 	bl	8003b80 <HAL_GetTick>
 8006a36:	4602      	mov	r2, r0
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d901      	bls.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a40:	2303      	movs	r3, #3
 8006a42:	e129      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a44:	4b5a      	ldr	r3, [pc, #360]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d0f0      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d105      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d079      	beq.n	8006b5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006a68:	4b52      	ldr	r3, [pc, #328]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a6e:	f7fd f887 	bl	8003b80 <HAL_GetTick>
 8006a72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a74:	e008      	b.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006a76:	f7fd f883 	bl	8003b80 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e107      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006a88:	4b49      	ldr	r3, [pc, #292]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a94:	d0ef      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d020      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006aa2:	4b43      	ldr	r3, [pc, #268]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa8:	0f1b      	lsrs	r3, r3, #28
 8006aaa:	f003 0307 	and.w	r3, r3, #7
 8006aae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	019a      	lsls	r2, r3, #6
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	061b      	lsls	r3, r3, #24
 8006abc:	431a      	orrs	r2, r3
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	071b      	lsls	r3, r3, #28
 8006ac2:	493b      	ldr	r1, [pc, #236]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006aca:	4b39      	ldr	r3, [pc, #228]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ad0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	4934      	ldr	r1, [pc, #208]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d01e      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006af0:	4b2f      	ldr	r3, [pc, #188]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af6:	0e1b      	lsrs	r3, r3, #24
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	019a      	lsls	r2, r3, #6
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	061b      	lsls	r3, r3, #24
 8006b08:	431a      	orrs	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	071b      	lsls	r3, r3, #28
 8006b10:	4927      	ldr	r1, [pc, #156]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b18:	4b25      	ldr	r3, [pc, #148]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b26:	4922      	ldr	r1, [pc, #136]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b2e:	4b21      	ldr	r3, [pc, #132]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b34:	f7fd f824 	bl	8003b80 <HAL_GetTick>
 8006b38:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006b3c:	f7fd f820 	bl	8003b80 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e0a4      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b4e:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b5a:	d1ef      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0320 	and.w	r3, r3, #32
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 808b 	beq.w	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60fb      	str	r3, [r7, #12]
 8006b6e:	4b10      	ldr	r3, [pc, #64]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	4a0f      	ldr	r2, [pc, #60]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b78:	6413      	str	r3, [r2, #64]	; 0x40
 8006b7a:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b82:	60fb      	str	r3, [r7, #12]
 8006b84:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b86:	4b0c      	ldr	r3, [pc, #48]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a0b      	ldr	r2, [pc, #44]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b90:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b92:	f7fc fff5 	bl	8003b80 <HAL_GetTick>
 8006b96:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b98:	e010      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b9a:	f7fc fff1 	bl	8003b80 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d909      	bls.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e075      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006bac:	42470068 	.word	0x42470068
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	42470070 	.word	0x42470070
 8006bb8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bbc:	4b38      	ldr	r3, [pc, #224]	; (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0e8      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bc8:	4b36      	ldr	r3, [pc, #216]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bd0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d02f      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d028      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be6:	4b2f      	ldr	r3, [pc, #188]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006bf0:	4b2d      	ldr	r3, [pc, #180]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf6:	4b2c      	ldr	r3, [pc, #176]	; (8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006bfc:	4a29      	ldr	r2, [pc, #164]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c02:	4b28      	ldr	r3, [pc, #160]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d114      	bne.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c0e:	f7fc ffb7 	bl	8003b80 <HAL_GetTick>
 8006c12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c14:	e00a      	b.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c16:	f7fc ffb3 	bl	8003b80 <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e035      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2c:	4b1d      	ldr	r3, [pc, #116]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0ee      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c44:	d10d      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006c46:	4b17      	ldr	r3, [pc, #92]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c5a:	4912      	ldr	r1, [pc, #72]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	608b      	str	r3, [r1, #8]
 8006c60:	e005      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006c62:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	4a0f      	ldr	r2, [pc, #60]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c6c:	6093      	str	r3, [r2, #8]
 8006c6e:	4b0d      	ldr	r3, [pc, #52]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c7a:	490a      	ldr	r1, [pc, #40]	; (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 0310 	and.w	r3, r3, #16
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d004      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006c92:	4b06      	ldr	r3, [pc, #24]	; (8006cac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006c94:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40007000 	.word	0x40007000
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	42470e40 	.word	0x42470e40
 8006cac:	424711e0 	.word	0x424711e0

08006cb0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e025      	b.n	8006d10 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d106      	bne.n	8006cde <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f81d 	bl	8006d18 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4619      	mov	r1, r3
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	f000 ff0f 	bl	8007b14 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	f000 ff7a 	bl	8007bfa <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d101      	bne.n	8006d48 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8006d44:	2302      	movs	r3, #2
 8006d46:	e018      	b.n	8006d7a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 ffcd 	bl	8007cf8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d104      	bne.n	8006d70 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2205      	movs	r2, #5
 8006d6a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006d6e:	e003      	b.n	8006d78 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d101      	bne.n	8006d9c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e00e      	b.n	8006dba <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2202      	movs	r2, #2
 8006da0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 ffe0 	bl	8007d70 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3708      	adds	r7, #8
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b082      	sub	sp, #8
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	e05d      	b.n	8006e90 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d106      	bne.n	8006dee <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 f87d 	bl	8006ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2202      	movs	r2, #2
 8006df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e04:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	431a      	orrs	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	431a      	orrs	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	431a      	orrs	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	ea42 0103 	orr.w	r1, r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	0c1b      	lsrs	r3, r3, #16
 8006e4c:	f003 0104 	and.w	r1, r3, #4
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e64:	d104      	bne.n	8006e70 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e6e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	69da      	ldr	r2, [r3, #28]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e01a      	b.n	8006ee0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2202      	movs	r2, #2
 8006eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f81a 	bl	8006efc <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f20:	2300      	movs	r3, #0
 8006f22:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d101      	bne.n	8006f32 <HAL_SPI_Transmit+0x22>
 8006f2e:	2302      	movs	r3, #2
 8006f30:	e140      	b.n	80071b4 <HAL_SPI_Transmit+0x2a4>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2201      	movs	r2, #1
 8006f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f3a:	f7fc fe21 	bl	8003b80 <HAL_GetTick>
 8006f3e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f40:	88fb      	ldrh	r3, [r7, #6]
 8006f42:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d002      	beq.n	8006f56 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f50:	2302      	movs	r3, #2
 8006f52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f54:	e125      	b.n	80071a2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <HAL_SPI_Transmit+0x52>
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d102      	bne.n	8006f68 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f66:	e11c      	b.n	80071a2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	88fa      	ldrh	r2, [r7, #6]
 8006f80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	88fa      	ldrh	r2, [r7, #6]
 8006f86:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2200      	movs	r2, #0
 8006f98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fae:	d107      	bne.n	8006fc0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fbe:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fc8:	d10f      	bne.n	8006fea <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006fe8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff4:	2b40      	cmp	r3, #64	; 0x40
 8006ff6:	d007      	beq.n	8007008 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007006:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007010:	d14b      	bne.n	80070aa <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <HAL_SPI_Transmit+0x110>
 800701a:	8afb      	ldrh	r3, [r7, #22]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d13e      	bne.n	800709e <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007024:	881a      	ldrh	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007030:	1c9a      	adds	r2, r3, #2
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800703a:	b29b      	uxth	r3, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	b29a      	uxth	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007044:	e02b      	b.n	800709e <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b02      	cmp	r3, #2
 8007052:	d112      	bne.n	800707a <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	881a      	ldrh	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	1c9a      	adds	r2, r3, #2
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	86da      	strh	r2, [r3, #54]	; 0x36
 8007078:	e011      	b.n	800709e <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800707a:	f7fc fd81 	bl	8003b80 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	429a      	cmp	r2, r3
 8007088:	d803      	bhi.n	8007092 <HAL_SPI_Transmit+0x182>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007090:	d102      	bne.n	8007098 <HAL_SPI_Transmit+0x188>
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d102      	bne.n	800709e <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800709c:	e081      	b.n	80071a2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1ce      	bne.n	8007046 <HAL_SPI_Transmit+0x136>
 80070a8:	e04c      	b.n	8007144 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <HAL_SPI_Transmit+0x1a8>
 80070b2:	8afb      	ldrh	r3, [r7, #22]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d140      	bne.n	800713a <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	330c      	adds	r3, #12
 80070c2:	7812      	ldrb	r2, [r2, #0]
 80070c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070de:	e02c      	b.n	800713a <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d113      	bne.n	8007116 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	330c      	adds	r3, #12
 80070f8:	7812      	ldrb	r2, [r2, #0]
 80070fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800710a:	b29b      	uxth	r3, r3
 800710c:	3b01      	subs	r3, #1
 800710e:	b29a      	uxth	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	86da      	strh	r2, [r3, #54]	; 0x36
 8007114:	e011      	b.n	800713a <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007116:	f7fc fd33 	bl	8003b80 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d803      	bhi.n	800712e <HAL_SPI_Transmit+0x21e>
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800712c:	d102      	bne.n	8007134 <HAL_SPI_Transmit+0x224>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007138:	e033      	b.n	80071a2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1cd      	bne.n	80070e0 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714c:	d107      	bne.n	800715e <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800715c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800715e:	69ba      	ldr	r2, [r7, #24]
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 fc94 	bl	8007a90 <SPI_EndRxTxTransaction>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2220      	movs	r2, #32
 8007172:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10a      	bne.n	8007192 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	77fb      	strb	r3, [r7, #31]
 800719e:	e000      	b.n	80071a2 <HAL_SPI_Transmit+0x292>
  }

error:
 80071a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3720      	adds	r7, #32
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af02      	add	r7, sp, #8
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	603b      	str	r3, [r7, #0]
 80071c8:	4613      	mov	r3, r2
 80071ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071d8:	d112      	bne.n	8007200 <HAL_SPI_Receive+0x44>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10e      	bne.n	8007200 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2204      	movs	r2, #4
 80071e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071ea:	88fa      	ldrh	r2, [r7, #6]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	9300      	str	r3, [sp, #0]
 80071f0:	4613      	mov	r3, r2
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 f95f 	bl	80074ba <HAL_SPI_TransmitReceive>
 80071fc:	4603      	mov	r3, r0
 80071fe:	e158      	b.n	80074b2 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007206:	2b01      	cmp	r3, #1
 8007208:	d101      	bne.n	800720e <HAL_SPI_Receive+0x52>
 800720a:	2302      	movs	r3, #2
 800720c:	e151      	b.n	80074b2 <HAL_SPI_Receive+0x2f6>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007216:	f7fc fcb3 	bl	8003b80 <HAL_GetTick>
 800721a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007222:	b2db      	uxtb	r3, r3
 8007224:	2b01      	cmp	r3, #1
 8007226:	d002      	beq.n	800722e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007228:	2302      	movs	r3, #2
 800722a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800722c:	e138      	b.n	80074a0 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_SPI_Receive+0x7e>
 8007234:	88fb      	ldrh	r3, [r7, #6]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d102      	bne.n	8007240 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800723e:	e12f      	b.n	80074a0 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2204      	movs	r2, #4
 8007244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	88fa      	ldrh	r2, [r7, #6]
 800725e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2200      	movs	r2, #0
 800726a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2200      	movs	r2, #0
 800727c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007286:	d116      	bne.n	80072b6 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007296:	601a      	str	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072a6:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	3b01      	subs	r3, #1
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	689b      	ldr	r3, [r3, #8]
 80072ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072be:	d107      	bne.n	80072d0 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072ce:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d007      	beq.n	80072ee <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ec:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d162      	bne.n	80073bc <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80072f6:	e02e      	b.n	8007356 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 0301 	and.w	r3, r3, #1
 8007302:	2b01      	cmp	r3, #1
 8007304:	d115      	bne.n	8007332 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f103 020c 	add.w	r2, r3, #12
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	b2d2      	uxtb	r2, r2
 8007316:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007326:	b29b      	uxth	r3, r3
 8007328:	3b01      	subs	r3, #1
 800732a:	b29a      	uxth	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007330:	e011      	b.n	8007356 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007332:	f7fc fc25 	bl	8003b80 <HAL_GetTick>
 8007336:	4602      	mov	r2, r0
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	1ad3      	subs	r3, r2, r3
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	429a      	cmp	r2, r3
 8007340:	d803      	bhi.n	800734a <HAL_SPI_Receive+0x18e>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007348:	d102      	bne.n	8007350 <HAL_SPI_Receive+0x194>
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8007350:	2303      	movs	r3, #3
 8007352:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007354:	e0a4      	b.n	80074a0 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800735a:	b29b      	uxth	r3, r3
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1cb      	bne.n	80072f8 <HAL_SPI_Receive+0x13c>
 8007360:	e031      	b.n	80073c6 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b01      	cmp	r3, #1
 800736e:	d113      	bne.n	8007398 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	b292      	uxth	r2, r2
 800737c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	1c9a      	adds	r2, r3, #2
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800738c:	b29b      	uxth	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007396:	e011      	b.n	80073bc <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007398:	f7fc fbf2 	bl	8003b80 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d803      	bhi.n	80073b0 <HAL_SPI_Receive+0x1f4>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ae:	d102      	bne.n	80073b6 <HAL_SPI_Receive+0x1fa>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d102      	bne.n	80073bc <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073ba:	e071      	b.n	80074a0 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1cd      	bne.n	8007362 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ce:	d142      	bne.n	8007456 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073de:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	9300      	str	r3, [sp, #0]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2201      	movs	r2, #1
 80073e8:	2101      	movs	r1, #1
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fa81 	bl	80078f2 <SPI_WaitFlagStateUntilTimeout>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	75fb      	strb	r3, [r7, #23]
      goto error;
 80073fa:	e051      	b.n	80074a0 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007404:	d107      	bne.n	8007416 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007410:	b292      	uxth	r2, r2
 8007412:	801a      	strh	r2, [r3, #0]
 8007414:	e008      	b.n	8007428 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f103 020c 	add.w	r2, r3, #12
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	7812      	ldrb	r2, [r2, #0]
 8007424:	b2d2      	uxtb	r2, r2
 8007426:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2201      	movs	r2, #1
 8007430:	2101      	movs	r1, #1
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f000 fa5d 	bl	80078f2 <SPI_WaitFlagStateUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d008      	beq.n	8007450 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007442:	f043 0202 	orr.w	r2, r3, #2
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	75fb      	strb	r3, [r7, #23]
      goto error;
 800744e:	e027      	b.n	80074a0 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fab3 	bl	80079c6 <SPI_EndRxTransaction>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2220      	movs	r2, #32
 800746a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 0310 	and.w	r3, r3, #16
 8007476:	2b10      	cmp	r3, #16
 8007478:	d10a      	bne.n	8007490 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800747e:	f043 0202 	orr.w	r2, r3, #2
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800748e:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007494:	2b00      	cmp	r3, #0
 8007496:	d002      	beq.n	800749e <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	75fb      	strb	r3, [r7, #23]
 800749c:	e000      	b.n	80074a0 <HAL_SPI_Receive+0x2e4>
  }

error :
 800749e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2201      	movs	r2, #1
 80074a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3718      	adds	r7, #24
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b08e      	sub	sp, #56	; 0x38
 80074be:	af02      	add	r7, sp, #8
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	607a      	str	r2, [r7, #4]
 80074c6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074c8:	2301      	movs	r3, #1
 80074ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_SPI_TransmitReceive+0x26>
 80074dc:	2302      	movs	r3, #2
 80074de:	e1f6      	b.n	80078ce <HAL_SPI_TransmitReceive+0x414>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074e8:	f7fc fb4a 	bl	8003b80 <HAL_GetTick>
 80074ec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074fe:	887b      	ldrh	r3, [r7, #2]
 8007500:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007502:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007506:	2b01      	cmp	r3, #1
 8007508:	d00f      	beq.n	800752a <HAL_SPI_TransmitReceive+0x70>
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007510:	d107      	bne.n	8007522 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <HAL_SPI_TransmitReceive+0x68>
 800751a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800751e:	2b04      	cmp	r3, #4
 8007520:	d003      	beq.n	800752a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007522:	2302      	movs	r3, #2
 8007524:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007528:	e1c7      	b.n	80078ba <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <HAL_SPI_TransmitReceive+0x82>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d002      	beq.n	800753c <HAL_SPI_TransmitReceive+0x82>
 8007536:	887b      	ldrh	r3, [r7, #2]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d103      	bne.n	8007544 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007542:	e1ba      	b.n	80078ba <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b04      	cmp	r3, #4
 800754e:	d003      	beq.n	8007558 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2205      	movs	r2, #5
 8007554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	887a      	ldrh	r2, [r7, #2]
 8007568:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	887a      	ldrh	r2, [r7, #2]
 800756e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	887a      	ldrh	r2, [r7, #2]
 800757a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	887a      	ldrh	r2, [r7, #2]
 8007580:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007596:	d10f      	bne.n	80075b8 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075b6:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c2:	2b40      	cmp	r3, #64	; 0x40
 80075c4:	d007      	beq.n	80075d6 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075de:	f040 808b 	bne.w	80076f8 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_SPI_TransmitReceive+0x136>
 80075ea:	8b7b      	ldrh	r3, [r7, #26]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d178      	bne.n	80076e2 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f4:	881a      	ldrh	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	1c9a      	adds	r2, r3, #2
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007614:	e065      	b.n	80076e2 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f003 0302 	and.w	r3, r3, #2
 8007620:	2b02      	cmp	r3, #2
 8007622:	d12d      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x1c6>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d028      	beq.n	8007680 <HAL_SPI_TransmitReceive+0x1c6>
 800762e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007630:	2b01      	cmp	r3, #1
 8007632:	d125      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	881a      	ldrh	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007644:	1c9a      	adds	r2, r3, #2
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10c      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x1c6>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800766a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800766e:	d107      	bne.n	8007680 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800767e:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b01      	cmp	r3, #1
 800768c:	d119      	bne.n	80076c2 <HAL_SPI_TransmitReceive+0x208>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d014      	beq.n	80076c2 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	b292      	uxth	r2, r2
 80076a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	1c9a      	adds	r2, r3, #2
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	b29a      	uxth	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076be:	2301      	movs	r3, #1
 80076c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80076c2:	f7fc fa5d 	bl	8003b80 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d807      	bhi.n	80076e2 <HAL_SPI_TransmitReceive+0x228>
 80076d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076d8:	d003      	beq.n	80076e2 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80076e0:	e0eb      	b.n	80078ba <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d194      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x15c>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d18f      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x15c>
 80076f6:	e08e      	b.n	8007816 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <HAL_SPI_TransmitReceive+0x24c>
 8007700:	8b7b      	ldrh	r3, [r7, #26]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d17d      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	330c      	adds	r3, #12
 8007710:	7812      	ldrb	r2, [r2, #0]
 8007712:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007722:	b29b      	uxth	r3, r3
 8007724:	3b01      	subs	r3, #1
 8007726:	b29a      	uxth	r2, r3
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800772c:	e069      	b.n	8007802 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b02      	cmp	r3, #2
 800773a:	d12e      	bne.n	800779a <HAL_SPI_TransmitReceive+0x2e0>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007740:	b29b      	uxth	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d029      	beq.n	800779a <HAL_SPI_TransmitReceive+0x2e0>
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	2b01      	cmp	r3, #1
 800774a:	d126      	bne.n	800779a <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	330c      	adds	r3, #12
 8007756:	7812      	ldrb	r2, [r2, #0]
 8007758:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007768:	b29b      	uxth	r3, r3
 800776a:	3b01      	subs	r3, #1
 800776c:	b29a      	uxth	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d10c      	bne.n	800779a <HAL_SPI_TransmitReceive+0x2e0>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007788:	d107      	bne.n	800779a <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007798:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d119      	bne.n	80077dc <HAL_SPI_TransmitReceive+0x322>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d014      	beq.n	80077dc <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	b2d2      	uxtb	r2, r2
 80077be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	1c5a      	adds	r2, r3, #1
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077d8:	2301      	movs	r3, #1
 80077da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80077dc:	f7fc f9d0 	bl	8003b80 <HAL_GetTick>
 80077e0:	4602      	mov	r2, r0
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d803      	bhi.n	80077f4 <HAL_SPI_TransmitReceive+0x33a>
 80077ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077f2:	d102      	bne.n	80077fa <HAL_SPI_TransmitReceive+0x340>
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007800:	e05b      	b.n	80078ba <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007806:	b29b      	uxth	r3, r3
 8007808:	2b00      	cmp	r3, #0
 800780a:	d190      	bne.n	800772e <HAL_SPI_TransmitReceive+0x274>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	d18b      	bne.n	800772e <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800781e:	d117      	bne.n	8007850 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007826:	2201      	movs	r2, #1
 8007828:	2101      	movs	r1, #1
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f861 	bl	80078f2 <SPI_WaitFlagStateUntilTimeout>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d009      	beq.n	800784a <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783a:	f043 0202 	orr.w	r2, r3, #2
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8007848:	e037      	b.n	80078ba <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 0310 	and.w	r3, r3, #16
 800785a:	2b10      	cmp	r3, #16
 800785c:	d10d      	bne.n	800787a <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007862:	f043 0202 	orr.w	r2, r3, #2
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007872:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800787a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800787c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f906 	bl	8007a90 <SPI_EndRxTxTransaction>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d006      	beq.n	8007898 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2220      	movs	r2, #32
 8007894:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007896:	e010      	b.n	80078ba <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10b      	bne.n	80078b8 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078a0:	2300      	movs	r3, #0
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	e000      	b.n	80078ba <HAL_SPI_TransmitReceive+0x400>
  }

error :
 80078b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3730      	adds	r7, #48	; 0x30
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80078e4:	b2db      	uxtb	r3, r3
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	370c      	adds	r7, #12
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr

080078f2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	603b      	str	r3, [r7, #0]
 80078fe:	4613      	mov	r3, r2
 8007900:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007902:	e04c      	b.n	800799e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800790a:	d048      	beq.n	800799e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800790c:	f7fc f938 	bl	8003b80 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	683a      	ldr	r2, [r7, #0]
 8007918:	429a      	cmp	r2, r3
 800791a:	d902      	bls.n	8007922 <SPI_WaitFlagStateUntilTimeout+0x30>
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d13d      	bne.n	800799e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685a      	ldr	r2, [r3, #4]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007930:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800793a:	d111      	bne.n	8007960 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007944:	d004      	beq.n	8007950 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800794e:	d107      	bne.n	8007960 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800795e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007968:	d10f      	bne.n	800798a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007978:	601a      	str	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007988:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800799a:	2303      	movs	r3, #3
 800799c:	e00f      	b.n	80079be <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	689a      	ldr	r2, [r3, #8]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	4013      	ands	r3, r2
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	bf0c      	ite	eq
 80079ae:	2301      	moveq	r3, #1
 80079b0:	2300      	movne	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d1a3      	bne.n	8007904 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af02      	add	r7, sp, #8
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	60b9      	str	r1, [r7, #8]
 80079d0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079da:	d111      	bne.n	8007a00 <SPI_EndRxTransaction+0x3a>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e4:	d004      	beq.n	80079f0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079ee:	d107      	bne.n	8007a00 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079fe:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a08:	d12a      	bne.n	8007a60 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a12:	d012      	beq.n	8007a3a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2180      	movs	r1, #128	; 0x80
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f7ff ff67 	bl	80078f2 <SPI_WaitFlagStateUntilTimeout>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d02d      	beq.n	8007a86 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2e:	f043 0220 	orr.w	r2, r3, #32
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e026      	b.n	8007a88 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2200      	movs	r2, #0
 8007a42:	2101      	movs	r1, #1
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f7ff ff54 	bl	80078f2 <SPI_WaitFlagStateUntilTimeout>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d01a      	beq.n	8007a86 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a54:	f043 0220 	orr.w	r2, r3, #32
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e013      	b.n	8007a88 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2200      	movs	r2, #0
 8007a68:	2101      	movs	r1, #1
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f7ff ff41 	bl	80078f2 <SPI_WaitFlagStateUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d007      	beq.n	8007a86 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7a:	f043 0220 	orr.w	r2, r3, #32
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007a82:	2303      	movs	r3, #3
 8007a84:	e000      	b.n	8007a88 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b088      	sub	sp, #32
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007a9c:	4b1b      	ldr	r3, [pc, #108]	; (8007b0c <SPI_EndRxTxTransaction+0x7c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1b      	ldr	r2, [pc, #108]	; (8007b10 <SPI_EndRxTxTransaction+0x80>)
 8007aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa6:	0d5b      	lsrs	r3, r3, #21
 8007aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007aac:	fb02 f303 	mul.w	r3, r2, r3
 8007ab0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aba:	d112      	bne.n	8007ae2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2180      	movs	r1, #128	; 0x80
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff ff13 	bl	80078f2 <SPI_WaitFlagStateUntilTimeout>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d016      	beq.n	8007b00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad6:	f043 0220 	orr.w	r2, r3, #32
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e00f      	b.n	8007b02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007af8:	2b80      	cmp	r3, #128	; 0x80
 8007afa:	d0f2      	beq.n	8007ae2 <SPI_EndRxTxTransaction+0x52>
 8007afc:	e000      	b.n	8007b00 <SPI_EndRxTxTransaction+0x70>
        break;
 8007afe:	bf00      	nop
  }

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3718      	adds	r7, #24
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	200000fc 	.word	0x200000fc
 8007b10:	165e9f81 	.word	0x165e9f81

08007b14 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d029      	beq.n	8007b82 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007b3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b3e:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b48:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8007b4e:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8007b54:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8007b5a:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8007b60:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8007b66:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8007b6c:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007b72:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	e034      	b.n	8007bec <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b8e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007b98:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007b9e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007bb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bb6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007bc0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8007bc6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007bcc:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007bd2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8007bd8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b087      	sub	sp, #28
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	60f8      	str	r0, [r7, #12]
 8007c02:	60b9      	str	r1, [r7, #8]
 8007c04:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d02e      	beq.n	8007c72 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007c20:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007c30:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007c3a:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007c44:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007c4e:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8007c58:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007c62:	4313      	orrs	r3, r2
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	609a      	str	r2, [r3, #8]
 8007c70:	e03b      	b.n	8007cea <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007c7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c82:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	695b      	ldr	r3, [r3, #20]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007c94:	4313      	orrs	r3, r2
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007ca8:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007cb8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007cc2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007ccc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	699b      	ldr	r3, [r3, #24]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	371c      	adds	r7, #28
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007d14:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8007d1e:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007d30:	f7fb ff26 	bl	8003b80 <HAL_GetTick>
 8007d34:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007d36:	e010      	b.n	8007d5a <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d3e:	d00c      	beq.n	8007d5a <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d007      	beq.n	8007d56 <FMC_SDRAM_SendCommand+0x5e>
 8007d46:	f7fb ff1b 	bl	8003b80 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d201      	bcs.n	8007d5a <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e006      	b.n	8007d68 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	699b      	ldr	r3, [r3, #24]
 8007d5e:	f003 0320 	and.w	r3, r3, #32
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d0e8      	beq.n	8007d38 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8007d66:	2300      	movs	r3, #0
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	695a      	ldr	r2, [r3, #20]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr
	...

08007d98 <__libc_init_array>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4d0d      	ldr	r5, [pc, #52]	; (8007dd0 <__libc_init_array+0x38>)
 8007d9c:	4c0d      	ldr	r4, [pc, #52]	; (8007dd4 <__libc_init_array+0x3c>)
 8007d9e:	1b64      	subs	r4, r4, r5
 8007da0:	10a4      	asrs	r4, r4, #2
 8007da2:	2600      	movs	r6, #0
 8007da4:	42a6      	cmp	r6, r4
 8007da6:	d109      	bne.n	8007dbc <__libc_init_array+0x24>
 8007da8:	4d0b      	ldr	r5, [pc, #44]	; (8007dd8 <__libc_init_array+0x40>)
 8007daa:	4c0c      	ldr	r4, [pc, #48]	; (8007ddc <__libc_init_array+0x44>)
 8007dac:	f000 fcb0 	bl	8008710 <_init>
 8007db0:	1b64      	subs	r4, r4, r5
 8007db2:	10a4      	asrs	r4, r4, #2
 8007db4:	2600      	movs	r6, #0
 8007db6:	42a6      	cmp	r6, r4
 8007db8:	d105      	bne.n	8007dc6 <__libc_init_array+0x2e>
 8007dba:	bd70      	pop	{r4, r5, r6, pc}
 8007dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dc0:	4798      	blx	r3
 8007dc2:	3601      	adds	r6, #1
 8007dc4:	e7ee      	b.n	8007da4 <__libc_init_array+0xc>
 8007dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dca:	4798      	blx	r3
 8007dcc:	3601      	adds	r6, #1
 8007dce:	e7f2      	b.n	8007db6 <__libc_init_array+0x1e>
 8007dd0:	0800b340 	.word	0x0800b340
 8007dd4:	0800b340 	.word	0x0800b340
 8007dd8:	0800b340 	.word	0x0800b340
 8007ddc:	0800b344 	.word	0x0800b344

08007de0 <memset>:
 8007de0:	4402      	add	r2, r0
 8007de2:	4603      	mov	r3, r0
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d100      	bne.n	8007dea <memset+0xa>
 8007de8:	4770      	bx	lr
 8007dea:	f803 1b01 	strb.w	r1, [r3], #1
 8007dee:	e7f9      	b.n	8007de4 <memset+0x4>

08007df0 <sniprintf>:
 8007df0:	b40c      	push	{r2, r3}
 8007df2:	b530      	push	{r4, r5, lr}
 8007df4:	4b17      	ldr	r3, [pc, #92]	; (8007e54 <sniprintf+0x64>)
 8007df6:	1e0c      	subs	r4, r1, #0
 8007df8:	681d      	ldr	r5, [r3, #0]
 8007dfa:	b09d      	sub	sp, #116	; 0x74
 8007dfc:	da08      	bge.n	8007e10 <sniprintf+0x20>
 8007dfe:	238b      	movs	r3, #139	; 0x8b
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e06:	b01d      	add	sp, #116	; 0x74
 8007e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e0c:	b002      	add	sp, #8
 8007e0e:	4770      	bx	lr
 8007e10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007e14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e18:	bf14      	ite	ne
 8007e1a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007e1e:	4623      	moveq	r3, r4
 8007e20:	9304      	str	r3, [sp, #16]
 8007e22:	9307      	str	r3, [sp, #28]
 8007e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e28:	9002      	str	r0, [sp, #8]
 8007e2a:	9006      	str	r0, [sp, #24]
 8007e2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007e30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007e32:	ab21      	add	r3, sp, #132	; 0x84
 8007e34:	a902      	add	r1, sp, #8
 8007e36:	4628      	mov	r0, r5
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	f000 f869 	bl	8007f10 <_svfiprintf_r>
 8007e3e:	1c43      	adds	r3, r0, #1
 8007e40:	bfbc      	itt	lt
 8007e42:	238b      	movlt	r3, #139	; 0x8b
 8007e44:	602b      	strlt	r3, [r5, #0]
 8007e46:	2c00      	cmp	r4, #0
 8007e48:	d0dd      	beq.n	8007e06 <sniprintf+0x16>
 8007e4a:	9b02      	ldr	r3, [sp, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	e7d9      	b.n	8007e06 <sniprintf+0x16>
 8007e52:	bf00      	nop
 8007e54:	20000194 	.word	0x20000194

08007e58 <__ssputs_r>:
 8007e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5c:	688e      	ldr	r6, [r1, #8]
 8007e5e:	429e      	cmp	r6, r3
 8007e60:	4682      	mov	sl, r0
 8007e62:	460c      	mov	r4, r1
 8007e64:	4690      	mov	r8, r2
 8007e66:	461f      	mov	r7, r3
 8007e68:	d838      	bhi.n	8007edc <__ssputs_r+0x84>
 8007e6a:	898a      	ldrh	r2, [r1, #12]
 8007e6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e70:	d032      	beq.n	8007ed8 <__ssputs_r+0x80>
 8007e72:	6825      	ldr	r5, [r4, #0]
 8007e74:	6909      	ldr	r1, [r1, #16]
 8007e76:	eba5 0901 	sub.w	r9, r5, r1
 8007e7a:	6965      	ldr	r5, [r4, #20]
 8007e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e84:	3301      	adds	r3, #1
 8007e86:	444b      	add	r3, r9
 8007e88:	106d      	asrs	r5, r5, #1
 8007e8a:	429d      	cmp	r5, r3
 8007e8c:	bf38      	it	cc
 8007e8e:	461d      	movcc	r5, r3
 8007e90:	0553      	lsls	r3, r2, #21
 8007e92:	d531      	bpl.n	8007ef8 <__ssputs_r+0xa0>
 8007e94:	4629      	mov	r1, r5
 8007e96:	f000 fb63 	bl	8008560 <_malloc_r>
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	b950      	cbnz	r0, 8007eb4 <__ssputs_r+0x5c>
 8007e9e:	230c      	movs	r3, #12
 8007ea0:	f8ca 3000 	str.w	r3, [sl]
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eaa:	81a3      	strh	r3, [r4, #12]
 8007eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007eb4:	6921      	ldr	r1, [r4, #16]
 8007eb6:	464a      	mov	r2, r9
 8007eb8:	f000 fabe 	bl	8008438 <memcpy>
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	6126      	str	r6, [r4, #16]
 8007eca:	6165      	str	r5, [r4, #20]
 8007ecc:	444e      	add	r6, r9
 8007ece:	eba5 0509 	sub.w	r5, r5, r9
 8007ed2:	6026      	str	r6, [r4, #0]
 8007ed4:	60a5      	str	r5, [r4, #8]
 8007ed6:	463e      	mov	r6, r7
 8007ed8:	42be      	cmp	r6, r7
 8007eda:	d900      	bls.n	8007ede <__ssputs_r+0x86>
 8007edc:	463e      	mov	r6, r7
 8007ede:	6820      	ldr	r0, [r4, #0]
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	4641      	mov	r1, r8
 8007ee4:	f000 fab6 	bl	8008454 <memmove>
 8007ee8:	68a3      	ldr	r3, [r4, #8]
 8007eea:	1b9b      	subs	r3, r3, r6
 8007eec:	60a3      	str	r3, [r4, #8]
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	4433      	add	r3, r6
 8007ef2:	6023      	str	r3, [r4, #0]
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	e7db      	b.n	8007eb0 <__ssputs_r+0x58>
 8007ef8:	462a      	mov	r2, r5
 8007efa:	f000 fba5 	bl	8008648 <_realloc_r>
 8007efe:	4606      	mov	r6, r0
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d1e1      	bne.n	8007ec8 <__ssputs_r+0x70>
 8007f04:	6921      	ldr	r1, [r4, #16]
 8007f06:	4650      	mov	r0, sl
 8007f08:	f000 fabe 	bl	8008488 <_free_r>
 8007f0c:	e7c7      	b.n	8007e9e <__ssputs_r+0x46>
	...

08007f10 <_svfiprintf_r>:
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	4698      	mov	r8, r3
 8007f16:	898b      	ldrh	r3, [r1, #12]
 8007f18:	061b      	lsls	r3, r3, #24
 8007f1a:	b09d      	sub	sp, #116	; 0x74
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	460d      	mov	r5, r1
 8007f20:	4614      	mov	r4, r2
 8007f22:	d50e      	bpl.n	8007f42 <_svfiprintf_r+0x32>
 8007f24:	690b      	ldr	r3, [r1, #16]
 8007f26:	b963      	cbnz	r3, 8007f42 <_svfiprintf_r+0x32>
 8007f28:	2140      	movs	r1, #64	; 0x40
 8007f2a:	f000 fb19 	bl	8008560 <_malloc_r>
 8007f2e:	6028      	str	r0, [r5, #0]
 8007f30:	6128      	str	r0, [r5, #16]
 8007f32:	b920      	cbnz	r0, 8007f3e <_svfiprintf_r+0x2e>
 8007f34:	230c      	movs	r3, #12
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f3c:	e0d1      	b.n	80080e2 <_svfiprintf_r+0x1d2>
 8007f3e:	2340      	movs	r3, #64	; 0x40
 8007f40:	616b      	str	r3, [r5, #20]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9309      	str	r3, [sp, #36]	; 0x24
 8007f46:	2320      	movs	r3, #32
 8007f48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f50:	2330      	movs	r3, #48	; 0x30
 8007f52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080fc <_svfiprintf_r+0x1ec>
 8007f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f5a:	f04f 0901 	mov.w	r9, #1
 8007f5e:	4623      	mov	r3, r4
 8007f60:	469a      	mov	sl, r3
 8007f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f66:	b10a      	cbz	r2, 8007f6c <_svfiprintf_r+0x5c>
 8007f68:	2a25      	cmp	r2, #37	; 0x25
 8007f6a:	d1f9      	bne.n	8007f60 <_svfiprintf_r+0x50>
 8007f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007f70:	d00b      	beq.n	8007f8a <_svfiprintf_r+0x7a>
 8007f72:	465b      	mov	r3, fp
 8007f74:	4622      	mov	r2, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	4638      	mov	r0, r7
 8007f7a:	f7ff ff6d 	bl	8007e58 <__ssputs_r>
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f000 80aa 	beq.w	80080d8 <_svfiprintf_r+0x1c8>
 8007f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f86:	445a      	add	r2, fp
 8007f88:	9209      	str	r2, [sp, #36]	; 0x24
 8007f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80a2 	beq.w	80080d8 <_svfiprintf_r+0x1c8>
 8007f94:	2300      	movs	r3, #0
 8007f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f9e:	f10a 0a01 	add.w	sl, sl, #1
 8007fa2:	9304      	str	r3, [sp, #16]
 8007fa4:	9307      	str	r3, [sp, #28]
 8007fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007faa:	931a      	str	r3, [sp, #104]	; 0x68
 8007fac:	4654      	mov	r4, sl
 8007fae:	2205      	movs	r2, #5
 8007fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb4:	4851      	ldr	r0, [pc, #324]	; (80080fc <_svfiprintf_r+0x1ec>)
 8007fb6:	f7f8 f91b 	bl	80001f0 <memchr>
 8007fba:	9a04      	ldr	r2, [sp, #16]
 8007fbc:	b9d8      	cbnz	r0, 8007ff6 <_svfiprintf_r+0xe6>
 8007fbe:	06d0      	lsls	r0, r2, #27
 8007fc0:	bf44      	itt	mi
 8007fc2:	2320      	movmi	r3, #32
 8007fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc8:	0711      	lsls	r1, r2, #28
 8007fca:	bf44      	itt	mi
 8007fcc:	232b      	movmi	r3, #43	; 0x2b
 8007fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd8:	d015      	beq.n	8008006 <_svfiprintf_r+0xf6>
 8007fda:	9a07      	ldr	r2, [sp, #28]
 8007fdc:	4654      	mov	r4, sl
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f04f 0c0a 	mov.w	ip, #10
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fea:	3b30      	subs	r3, #48	; 0x30
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	d94e      	bls.n	800808e <_svfiprintf_r+0x17e>
 8007ff0:	b1b0      	cbz	r0, 8008020 <_svfiprintf_r+0x110>
 8007ff2:	9207      	str	r2, [sp, #28]
 8007ff4:	e014      	b.n	8008020 <_svfiprintf_r+0x110>
 8007ff6:	eba0 0308 	sub.w	r3, r0, r8
 8007ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	9304      	str	r3, [sp, #16]
 8008002:	46a2      	mov	sl, r4
 8008004:	e7d2      	b.n	8007fac <_svfiprintf_r+0x9c>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	1d19      	adds	r1, r3, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	9103      	str	r1, [sp, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfbb      	ittet	lt
 8008012:	425b      	neglt	r3, r3
 8008014:	f042 0202 	orrlt.w	r2, r2, #2
 8008018:	9307      	strge	r3, [sp, #28]
 800801a:	9307      	strlt	r3, [sp, #28]
 800801c:	bfb8      	it	lt
 800801e:	9204      	strlt	r2, [sp, #16]
 8008020:	7823      	ldrb	r3, [r4, #0]
 8008022:	2b2e      	cmp	r3, #46	; 0x2e
 8008024:	d10c      	bne.n	8008040 <_svfiprintf_r+0x130>
 8008026:	7863      	ldrb	r3, [r4, #1]
 8008028:	2b2a      	cmp	r3, #42	; 0x2a
 800802a:	d135      	bne.n	8008098 <_svfiprintf_r+0x188>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	1d1a      	adds	r2, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	9203      	str	r2, [sp, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfb8      	it	lt
 8008038:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800803c:	3402      	adds	r4, #2
 800803e:	9305      	str	r3, [sp, #20]
 8008040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800810c <_svfiprintf_r+0x1fc>
 8008044:	7821      	ldrb	r1, [r4, #0]
 8008046:	2203      	movs	r2, #3
 8008048:	4650      	mov	r0, sl
 800804a:	f7f8 f8d1 	bl	80001f0 <memchr>
 800804e:	b140      	cbz	r0, 8008062 <_svfiprintf_r+0x152>
 8008050:	2340      	movs	r3, #64	; 0x40
 8008052:	eba0 000a 	sub.w	r0, r0, sl
 8008056:	fa03 f000 	lsl.w	r0, r3, r0
 800805a:	9b04      	ldr	r3, [sp, #16]
 800805c:	4303      	orrs	r3, r0
 800805e:	3401      	adds	r4, #1
 8008060:	9304      	str	r3, [sp, #16]
 8008062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008066:	4826      	ldr	r0, [pc, #152]	; (8008100 <_svfiprintf_r+0x1f0>)
 8008068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800806c:	2206      	movs	r2, #6
 800806e:	f7f8 f8bf 	bl	80001f0 <memchr>
 8008072:	2800      	cmp	r0, #0
 8008074:	d038      	beq.n	80080e8 <_svfiprintf_r+0x1d8>
 8008076:	4b23      	ldr	r3, [pc, #140]	; (8008104 <_svfiprintf_r+0x1f4>)
 8008078:	bb1b      	cbnz	r3, 80080c2 <_svfiprintf_r+0x1b2>
 800807a:	9b03      	ldr	r3, [sp, #12]
 800807c:	3307      	adds	r3, #7
 800807e:	f023 0307 	bic.w	r3, r3, #7
 8008082:	3308      	adds	r3, #8
 8008084:	9303      	str	r3, [sp, #12]
 8008086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008088:	4433      	add	r3, r6
 800808a:	9309      	str	r3, [sp, #36]	; 0x24
 800808c:	e767      	b.n	8007f5e <_svfiprintf_r+0x4e>
 800808e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008092:	460c      	mov	r4, r1
 8008094:	2001      	movs	r0, #1
 8008096:	e7a5      	b.n	8007fe4 <_svfiprintf_r+0xd4>
 8008098:	2300      	movs	r3, #0
 800809a:	3401      	adds	r4, #1
 800809c:	9305      	str	r3, [sp, #20]
 800809e:	4619      	mov	r1, r3
 80080a0:	f04f 0c0a 	mov.w	ip, #10
 80080a4:	4620      	mov	r0, r4
 80080a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080aa:	3a30      	subs	r2, #48	; 0x30
 80080ac:	2a09      	cmp	r2, #9
 80080ae:	d903      	bls.n	80080b8 <_svfiprintf_r+0x1a8>
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d0c5      	beq.n	8008040 <_svfiprintf_r+0x130>
 80080b4:	9105      	str	r1, [sp, #20]
 80080b6:	e7c3      	b.n	8008040 <_svfiprintf_r+0x130>
 80080b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80080bc:	4604      	mov	r4, r0
 80080be:	2301      	movs	r3, #1
 80080c0:	e7f0      	b.n	80080a4 <_svfiprintf_r+0x194>
 80080c2:	ab03      	add	r3, sp, #12
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	462a      	mov	r2, r5
 80080c8:	4b0f      	ldr	r3, [pc, #60]	; (8008108 <_svfiprintf_r+0x1f8>)
 80080ca:	a904      	add	r1, sp, #16
 80080cc:	4638      	mov	r0, r7
 80080ce:	f3af 8000 	nop.w
 80080d2:	1c42      	adds	r2, r0, #1
 80080d4:	4606      	mov	r6, r0
 80080d6:	d1d6      	bne.n	8008086 <_svfiprintf_r+0x176>
 80080d8:	89ab      	ldrh	r3, [r5, #12]
 80080da:	065b      	lsls	r3, r3, #25
 80080dc:	f53f af2c 	bmi.w	8007f38 <_svfiprintf_r+0x28>
 80080e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080e2:	b01d      	add	sp, #116	; 0x74
 80080e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e8:	ab03      	add	r3, sp, #12
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	462a      	mov	r2, r5
 80080ee:	4b06      	ldr	r3, [pc, #24]	; (8008108 <_svfiprintf_r+0x1f8>)
 80080f0:	a904      	add	r1, sp, #16
 80080f2:	4638      	mov	r0, r7
 80080f4:	f000 f87a 	bl	80081ec <_printf_i>
 80080f8:	e7eb      	b.n	80080d2 <_svfiprintf_r+0x1c2>
 80080fa:	bf00      	nop
 80080fc:	0800b304 	.word	0x0800b304
 8008100:	0800b30e 	.word	0x0800b30e
 8008104:	00000000 	.word	0x00000000
 8008108:	08007e59 	.word	0x08007e59
 800810c:	0800b30a 	.word	0x0800b30a

08008110 <_printf_common>:
 8008110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	4616      	mov	r6, r2
 8008116:	4699      	mov	r9, r3
 8008118:	688a      	ldr	r2, [r1, #8]
 800811a:	690b      	ldr	r3, [r1, #16]
 800811c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008120:	4293      	cmp	r3, r2
 8008122:	bfb8      	it	lt
 8008124:	4613      	movlt	r3, r2
 8008126:	6033      	str	r3, [r6, #0]
 8008128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800812c:	4607      	mov	r7, r0
 800812e:	460c      	mov	r4, r1
 8008130:	b10a      	cbz	r2, 8008136 <_printf_common+0x26>
 8008132:	3301      	adds	r3, #1
 8008134:	6033      	str	r3, [r6, #0]
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	0699      	lsls	r1, r3, #26
 800813a:	bf42      	ittt	mi
 800813c:	6833      	ldrmi	r3, [r6, #0]
 800813e:	3302      	addmi	r3, #2
 8008140:	6033      	strmi	r3, [r6, #0]
 8008142:	6825      	ldr	r5, [r4, #0]
 8008144:	f015 0506 	ands.w	r5, r5, #6
 8008148:	d106      	bne.n	8008158 <_printf_common+0x48>
 800814a:	f104 0a19 	add.w	sl, r4, #25
 800814e:	68e3      	ldr	r3, [r4, #12]
 8008150:	6832      	ldr	r2, [r6, #0]
 8008152:	1a9b      	subs	r3, r3, r2
 8008154:	42ab      	cmp	r3, r5
 8008156:	dc26      	bgt.n	80081a6 <_printf_common+0x96>
 8008158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800815c:	1e13      	subs	r3, r2, #0
 800815e:	6822      	ldr	r2, [r4, #0]
 8008160:	bf18      	it	ne
 8008162:	2301      	movne	r3, #1
 8008164:	0692      	lsls	r2, r2, #26
 8008166:	d42b      	bmi.n	80081c0 <_printf_common+0xb0>
 8008168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800816c:	4649      	mov	r1, r9
 800816e:	4638      	mov	r0, r7
 8008170:	47c0      	blx	r8
 8008172:	3001      	adds	r0, #1
 8008174:	d01e      	beq.n	80081b4 <_printf_common+0xa4>
 8008176:	6823      	ldr	r3, [r4, #0]
 8008178:	68e5      	ldr	r5, [r4, #12]
 800817a:	6832      	ldr	r2, [r6, #0]
 800817c:	f003 0306 	and.w	r3, r3, #6
 8008180:	2b04      	cmp	r3, #4
 8008182:	bf08      	it	eq
 8008184:	1aad      	subeq	r5, r5, r2
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	6922      	ldr	r2, [r4, #16]
 800818a:	bf0c      	ite	eq
 800818c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008190:	2500      	movne	r5, #0
 8008192:	4293      	cmp	r3, r2
 8008194:	bfc4      	itt	gt
 8008196:	1a9b      	subgt	r3, r3, r2
 8008198:	18ed      	addgt	r5, r5, r3
 800819a:	2600      	movs	r6, #0
 800819c:	341a      	adds	r4, #26
 800819e:	42b5      	cmp	r5, r6
 80081a0:	d11a      	bne.n	80081d8 <_printf_common+0xc8>
 80081a2:	2000      	movs	r0, #0
 80081a4:	e008      	b.n	80081b8 <_printf_common+0xa8>
 80081a6:	2301      	movs	r3, #1
 80081a8:	4652      	mov	r2, sl
 80081aa:	4649      	mov	r1, r9
 80081ac:	4638      	mov	r0, r7
 80081ae:	47c0      	blx	r8
 80081b0:	3001      	adds	r0, #1
 80081b2:	d103      	bne.n	80081bc <_printf_common+0xac>
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081bc:	3501      	adds	r5, #1
 80081be:	e7c6      	b.n	800814e <_printf_common+0x3e>
 80081c0:	18e1      	adds	r1, r4, r3
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	2030      	movs	r0, #48	; 0x30
 80081c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081ca:	4422      	add	r2, r4
 80081cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081d4:	3302      	adds	r3, #2
 80081d6:	e7c7      	b.n	8008168 <_printf_common+0x58>
 80081d8:	2301      	movs	r3, #1
 80081da:	4622      	mov	r2, r4
 80081dc:	4649      	mov	r1, r9
 80081de:	4638      	mov	r0, r7
 80081e0:	47c0      	blx	r8
 80081e2:	3001      	adds	r0, #1
 80081e4:	d0e6      	beq.n	80081b4 <_printf_common+0xa4>
 80081e6:	3601      	adds	r6, #1
 80081e8:	e7d9      	b.n	800819e <_printf_common+0x8e>
	...

080081ec <_printf_i>:
 80081ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081f0:	7e0f      	ldrb	r7, [r1, #24]
 80081f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081f4:	2f78      	cmp	r7, #120	; 0x78
 80081f6:	4691      	mov	r9, r2
 80081f8:	4680      	mov	r8, r0
 80081fa:	460c      	mov	r4, r1
 80081fc:	469a      	mov	sl, r3
 80081fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008202:	d807      	bhi.n	8008214 <_printf_i+0x28>
 8008204:	2f62      	cmp	r7, #98	; 0x62
 8008206:	d80a      	bhi.n	800821e <_printf_i+0x32>
 8008208:	2f00      	cmp	r7, #0
 800820a:	f000 80d8 	beq.w	80083be <_printf_i+0x1d2>
 800820e:	2f58      	cmp	r7, #88	; 0x58
 8008210:	f000 80a3 	beq.w	800835a <_printf_i+0x16e>
 8008214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800821c:	e03a      	b.n	8008294 <_printf_i+0xa8>
 800821e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008222:	2b15      	cmp	r3, #21
 8008224:	d8f6      	bhi.n	8008214 <_printf_i+0x28>
 8008226:	a101      	add	r1, pc, #4	; (adr r1, 800822c <_printf_i+0x40>)
 8008228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800822c:	08008285 	.word	0x08008285
 8008230:	08008299 	.word	0x08008299
 8008234:	08008215 	.word	0x08008215
 8008238:	08008215 	.word	0x08008215
 800823c:	08008215 	.word	0x08008215
 8008240:	08008215 	.word	0x08008215
 8008244:	08008299 	.word	0x08008299
 8008248:	08008215 	.word	0x08008215
 800824c:	08008215 	.word	0x08008215
 8008250:	08008215 	.word	0x08008215
 8008254:	08008215 	.word	0x08008215
 8008258:	080083a5 	.word	0x080083a5
 800825c:	080082c9 	.word	0x080082c9
 8008260:	08008387 	.word	0x08008387
 8008264:	08008215 	.word	0x08008215
 8008268:	08008215 	.word	0x08008215
 800826c:	080083c7 	.word	0x080083c7
 8008270:	08008215 	.word	0x08008215
 8008274:	080082c9 	.word	0x080082c9
 8008278:	08008215 	.word	0x08008215
 800827c:	08008215 	.word	0x08008215
 8008280:	0800838f 	.word	0x0800838f
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	1d1a      	adds	r2, r3, #4
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	602a      	str	r2, [r5, #0]
 800828c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008294:	2301      	movs	r3, #1
 8008296:	e0a3      	b.n	80083e0 <_printf_i+0x1f4>
 8008298:	6820      	ldr	r0, [r4, #0]
 800829a:	6829      	ldr	r1, [r5, #0]
 800829c:	0606      	lsls	r6, r0, #24
 800829e:	f101 0304 	add.w	r3, r1, #4
 80082a2:	d50a      	bpl.n	80082ba <_printf_i+0xce>
 80082a4:	680e      	ldr	r6, [r1, #0]
 80082a6:	602b      	str	r3, [r5, #0]
 80082a8:	2e00      	cmp	r6, #0
 80082aa:	da03      	bge.n	80082b4 <_printf_i+0xc8>
 80082ac:	232d      	movs	r3, #45	; 0x2d
 80082ae:	4276      	negs	r6, r6
 80082b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082b4:	485e      	ldr	r0, [pc, #376]	; (8008430 <_printf_i+0x244>)
 80082b6:	230a      	movs	r3, #10
 80082b8:	e019      	b.n	80082ee <_printf_i+0x102>
 80082ba:	680e      	ldr	r6, [r1, #0]
 80082bc:	602b      	str	r3, [r5, #0]
 80082be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082c2:	bf18      	it	ne
 80082c4:	b236      	sxthne	r6, r6
 80082c6:	e7ef      	b.n	80082a8 <_printf_i+0xbc>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	6820      	ldr	r0, [r4, #0]
 80082cc:	1d19      	adds	r1, r3, #4
 80082ce:	6029      	str	r1, [r5, #0]
 80082d0:	0601      	lsls	r1, r0, #24
 80082d2:	d501      	bpl.n	80082d8 <_printf_i+0xec>
 80082d4:	681e      	ldr	r6, [r3, #0]
 80082d6:	e002      	b.n	80082de <_printf_i+0xf2>
 80082d8:	0646      	lsls	r6, r0, #25
 80082da:	d5fb      	bpl.n	80082d4 <_printf_i+0xe8>
 80082dc:	881e      	ldrh	r6, [r3, #0]
 80082de:	4854      	ldr	r0, [pc, #336]	; (8008430 <_printf_i+0x244>)
 80082e0:	2f6f      	cmp	r7, #111	; 0x6f
 80082e2:	bf0c      	ite	eq
 80082e4:	2308      	moveq	r3, #8
 80082e6:	230a      	movne	r3, #10
 80082e8:	2100      	movs	r1, #0
 80082ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082ee:	6865      	ldr	r5, [r4, #4]
 80082f0:	60a5      	str	r5, [r4, #8]
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	bfa2      	ittt	ge
 80082f6:	6821      	ldrge	r1, [r4, #0]
 80082f8:	f021 0104 	bicge.w	r1, r1, #4
 80082fc:	6021      	strge	r1, [r4, #0]
 80082fe:	b90e      	cbnz	r6, 8008304 <_printf_i+0x118>
 8008300:	2d00      	cmp	r5, #0
 8008302:	d04d      	beq.n	80083a0 <_printf_i+0x1b4>
 8008304:	4615      	mov	r5, r2
 8008306:	fbb6 f1f3 	udiv	r1, r6, r3
 800830a:	fb03 6711 	mls	r7, r3, r1, r6
 800830e:	5dc7      	ldrb	r7, [r0, r7]
 8008310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008314:	4637      	mov	r7, r6
 8008316:	42bb      	cmp	r3, r7
 8008318:	460e      	mov	r6, r1
 800831a:	d9f4      	bls.n	8008306 <_printf_i+0x11a>
 800831c:	2b08      	cmp	r3, #8
 800831e:	d10b      	bne.n	8008338 <_printf_i+0x14c>
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	07de      	lsls	r6, r3, #31
 8008324:	d508      	bpl.n	8008338 <_printf_i+0x14c>
 8008326:	6923      	ldr	r3, [r4, #16]
 8008328:	6861      	ldr	r1, [r4, #4]
 800832a:	4299      	cmp	r1, r3
 800832c:	bfde      	ittt	le
 800832e:	2330      	movle	r3, #48	; 0x30
 8008330:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008334:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008338:	1b52      	subs	r2, r2, r5
 800833a:	6122      	str	r2, [r4, #16]
 800833c:	f8cd a000 	str.w	sl, [sp]
 8008340:	464b      	mov	r3, r9
 8008342:	aa03      	add	r2, sp, #12
 8008344:	4621      	mov	r1, r4
 8008346:	4640      	mov	r0, r8
 8008348:	f7ff fee2 	bl	8008110 <_printf_common>
 800834c:	3001      	adds	r0, #1
 800834e:	d14c      	bne.n	80083ea <_printf_i+0x1fe>
 8008350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008354:	b004      	add	sp, #16
 8008356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800835a:	4835      	ldr	r0, [pc, #212]	; (8008430 <_printf_i+0x244>)
 800835c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008360:	6829      	ldr	r1, [r5, #0]
 8008362:	6823      	ldr	r3, [r4, #0]
 8008364:	f851 6b04 	ldr.w	r6, [r1], #4
 8008368:	6029      	str	r1, [r5, #0]
 800836a:	061d      	lsls	r5, r3, #24
 800836c:	d514      	bpl.n	8008398 <_printf_i+0x1ac>
 800836e:	07df      	lsls	r7, r3, #31
 8008370:	bf44      	itt	mi
 8008372:	f043 0320 	orrmi.w	r3, r3, #32
 8008376:	6023      	strmi	r3, [r4, #0]
 8008378:	b91e      	cbnz	r6, 8008382 <_printf_i+0x196>
 800837a:	6823      	ldr	r3, [r4, #0]
 800837c:	f023 0320 	bic.w	r3, r3, #32
 8008380:	6023      	str	r3, [r4, #0]
 8008382:	2310      	movs	r3, #16
 8008384:	e7b0      	b.n	80082e8 <_printf_i+0xfc>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	f043 0320 	orr.w	r3, r3, #32
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	2378      	movs	r3, #120	; 0x78
 8008390:	4828      	ldr	r0, [pc, #160]	; (8008434 <_printf_i+0x248>)
 8008392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008396:	e7e3      	b.n	8008360 <_printf_i+0x174>
 8008398:	0659      	lsls	r1, r3, #25
 800839a:	bf48      	it	mi
 800839c:	b2b6      	uxthmi	r6, r6
 800839e:	e7e6      	b.n	800836e <_printf_i+0x182>
 80083a0:	4615      	mov	r5, r2
 80083a2:	e7bb      	b.n	800831c <_printf_i+0x130>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	6826      	ldr	r6, [r4, #0]
 80083a8:	6961      	ldr	r1, [r4, #20]
 80083aa:	1d18      	adds	r0, r3, #4
 80083ac:	6028      	str	r0, [r5, #0]
 80083ae:	0635      	lsls	r5, r6, #24
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	d501      	bpl.n	80083b8 <_printf_i+0x1cc>
 80083b4:	6019      	str	r1, [r3, #0]
 80083b6:	e002      	b.n	80083be <_printf_i+0x1d2>
 80083b8:	0670      	lsls	r0, r6, #25
 80083ba:	d5fb      	bpl.n	80083b4 <_printf_i+0x1c8>
 80083bc:	8019      	strh	r1, [r3, #0]
 80083be:	2300      	movs	r3, #0
 80083c0:	6123      	str	r3, [r4, #16]
 80083c2:	4615      	mov	r5, r2
 80083c4:	e7ba      	b.n	800833c <_printf_i+0x150>
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	1d1a      	adds	r2, r3, #4
 80083ca:	602a      	str	r2, [r5, #0]
 80083cc:	681d      	ldr	r5, [r3, #0]
 80083ce:	6862      	ldr	r2, [r4, #4]
 80083d0:	2100      	movs	r1, #0
 80083d2:	4628      	mov	r0, r5
 80083d4:	f7f7 ff0c 	bl	80001f0 <memchr>
 80083d8:	b108      	cbz	r0, 80083de <_printf_i+0x1f2>
 80083da:	1b40      	subs	r0, r0, r5
 80083dc:	6060      	str	r0, [r4, #4]
 80083de:	6863      	ldr	r3, [r4, #4]
 80083e0:	6123      	str	r3, [r4, #16]
 80083e2:	2300      	movs	r3, #0
 80083e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083e8:	e7a8      	b.n	800833c <_printf_i+0x150>
 80083ea:	6923      	ldr	r3, [r4, #16]
 80083ec:	462a      	mov	r2, r5
 80083ee:	4649      	mov	r1, r9
 80083f0:	4640      	mov	r0, r8
 80083f2:	47d0      	blx	sl
 80083f4:	3001      	adds	r0, #1
 80083f6:	d0ab      	beq.n	8008350 <_printf_i+0x164>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	079b      	lsls	r3, r3, #30
 80083fc:	d413      	bmi.n	8008426 <_printf_i+0x23a>
 80083fe:	68e0      	ldr	r0, [r4, #12]
 8008400:	9b03      	ldr	r3, [sp, #12]
 8008402:	4298      	cmp	r0, r3
 8008404:	bfb8      	it	lt
 8008406:	4618      	movlt	r0, r3
 8008408:	e7a4      	b.n	8008354 <_printf_i+0x168>
 800840a:	2301      	movs	r3, #1
 800840c:	4632      	mov	r2, r6
 800840e:	4649      	mov	r1, r9
 8008410:	4640      	mov	r0, r8
 8008412:	47d0      	blx	sl
 8008414:	3001      	adds	r0, #1
 8008416:	d09b      	beq.n	8008350 <_printf_i+0x164>
 8008418:	3501      	adds	r5, #1
 800841a:	68e3      	ldr	r3, [r4, #12]
 800841c:	9903      	ldr	r1, [sp, #12]
 800841e:	1a5b      	subs	r3, r3, r1
 8008420:	42ab      	cmp	r3, r5
 8008422:	dcf2      	bgt.n	800840a <_printf_i+0x21e>
 8008424:	e7eb      	b.n	80083fe <_printf_i+0x212>
 8008426:	2500      	movs	r5, #0
 8008428:	f104 0619 	add.w	r6, r4, #25
 800842c:	e7f5      	b.n	800841a <_printf_i+0x22e>
 800842e:	bf00      	nop
 8008430:	0800b315 	.word	0x0800b315
 8008434:	0800b326 	.word	0x0800b326

08008438 <memcpy>:
 8008438:	440a      	add	r2, r1
 800843a:	4291      	cmp	r1, r2
 800843c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008440:	d100      	bne.n	8008444 <memcpy+0xc>
 8008442:	4770      	bx	lr
 8008444:	b510      	push	{r4, lr}
 8008446:	f811 4b01 	ldrb.w	r4, [r1], #1
 800844a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800844e:	4291      	cmp	r1, r2
 8008450:	d1f9      	bne.n	8008446 <memcpy+0xe>
 8008452:	bd10      	pop	{r4, pc}

08008454 <memmove>:
 8008454:	4288      	cmp	r0, r1
 8008456:	b510      	push	{r4, lr}
 8008458:	eb01 0402 	add.w	r4, r1, r2
 800845c:	d902      	bls.n	8008464 <memmove+0x10>
 800845e:	4284      	cmp	r4, r0
 8008460:	4623      	mov	r3, r4
 8008462:	d807      	bhi.n	8008474 <memmove+0x20>
 8008464:	1e43      	subs	r3, r0, #1
 8008466:	42a1      	cmp	r1, r4
 8008468:	d008      	beq.n	800847c <memmove+0x28>
 800846a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800846e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008472:	e7f8      	b.n	8008466 <memmove+0x12>
 8008474:	4402      	add	r2, r0
 8008476:	4601      	mov	r1, r0
 8008478:	428a      	cmp	r2, r1
 800847a:	d100      	bne.n	800847e <memmove+0x2a>
 800847c:	bd10      	pop	{r4, pc}
 800847e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008486:	e7f7      	b.n	8008478 <memmove+0x24>

08008488 <_free_r>:
 8008488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800848a:	2900      	cmp	r1, #0
 800848c:	d044      	beq.n	8008518 <_free_r+0x90>
 800848e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008492:	9001      	str	r0, [sp, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	f1a1 0404 	sub.w	r4, r1, #4
 800849a:	bfb8      	it	lt
 800849c:	18e4      	addlt	r4, r4, r3
 800849e:	f000 f913 	bl	80086c8 <__malloc_lock>
 80084a2:	4a1e      	ldr	r2, [pc, #120]	; (800851c <_free_r+0x94>)
 80084a4:	9801      	ldr	r0, [sp, #4]
 80084a6:	6813      	ldr	r3, [r2, #0]
 80084a8:	b933      	cbnz	r3, 80084b8 <_free_r+0x30>
 80084aa:	6063      	str	r3, [r4, #4]
 80084ac:	6014      	str	r4, [r2, #0]
 80084ae:	b003      	add	sp, #12
 80084b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084b4:	f000 b90e 	b.w	80086d4 <__malloc_unlock>
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	d908      	bls.n	80084ce <_free_r+0x46>
 80084bc:	6825      	ldr	r5, [r4, #0]
 80084be:	1961      	adds	r1, r4, r5
 80084c0:	428b      	cmp	r3, r1
 80084c2:	bf01      	itttt	eq
 80084c4:	6819      	ldreq	r1, [r3, #0]
 80084c6:	685b      	ldreq	r3, [r3, #4]
 80084c8:	1949      	addeq	r1, r1, r5
 80084ca:	6021      	streq	r1, [r4, #0]
 80084cc:	e7ed      	b.n	80084aa <_free_r+0x22>
 80084ce:	461a      	mov	r2, r3
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	b10b      	cbz	r3, 80084d8 <_free_r+0x50>
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	d9fa      	bls.n	80084ce <_free_r+0x46>
 80084d8:	6811      	ldr	r1, [r2, #0]
 80084da:	1855      	adds	r5, r2, r1
 80084dc:	42a5      	cmp	r5, r4
 80084de:	d10b      	bne.n	80084f8 <_free_r+0x70>
 80084e0:	6824      	ldr	r4, [r4, #0]
 80084e2:	4421      	add	r1, r4
 80084e4:	1854      	adds	r4, r2, r1
 80084e6:	42a3      	cmp	r3, r4
 80084e8:	6011      	str	r1, [r2, #0]
 80084ea:	d1e0      	bne.n	80084ae <_free_r+0x26>
 80084ec:	681c      	ldr	r4, [r3, #0]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	6053      	str	r3, [r2, #4]
 80084f2:	4421      	add	r1, r4
 80084f4:	6011      	str	r1, [r2, #0]
 80084f6:	e7da      	b.n	80084ae <_free_r+0x26>
 80084f8:	d902      	bls.n	8008500 <_free_r+0x78>
 80084fa:	230c      	movs	r3, #12
 80084fc:	6003      	str	r3, [r0, #0]
 80084fe:	e7d6      	b.n	80084ae <_free_r+0x26>
 8008500:	6825      	ldr	r5, [r4, #0]
 8008502:	1961      	adds	r1, r4, r5
 8008504:	428b      	cmp	r3, r1
 8008506:	bf04      	itt	eq
 8008508:	6819      	ldreq	r1, [r3, #0]
 800850a:	685b      	ldreq	r3, [r3, #4]
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	bf04      	itt	eq
 8008510:	1949      	addeq	r1, r1, r5
 8008512:	6021      	streq	r1, [r4, #0]
 8008514:	6054      	str	r4, [r2, #4]
 8008516:	e7ca      	b.n	80084ae <_free_r+0x26>
 8008518:	b003      	add	sp, #12
 800851a:	bd30      	pop	{r4, r5, pc}
 800851c:	200015d0 	.word	0x200015d0

08008520 <sbrk_aligned>:
 8008520:	b570      	push	{r4, r5, r6, lr}
 8008522:	4e0e      	ldr	r6, [pc, #56]	; (800855c <sbrk_aligned+0x3c>)
 8008524:	460c      	mov	r4, r1
 8008526:	6831      	ldr	r1, [r6, #0]
 8008528:	4605      	mov	r5, r0
 800852a:	b911      	cbnz	r1, 8008532 <sbrk_aligned+0x12>
 800852c:	f000 f8bc 	bl	80086a8 <_sbrk_r>
 8008530:	6030      	str	r0, [r6, #0]
 8008532:	4621      	mov	r1, r4
 8008534:	4628      	mov	r0, r5
 8008536:	f000 f8b7 	bl	80086a8 <_sbrk_r>
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	d00a      	beq.n	8008554 <sbrk_aligned+0x34>
 800853e:	1cc4      	adds	r4, r0, #3
 8008540:	f024 0403 	bic.w	r4, r4, #3
 8008544:	42a0      	cmp	r0, r4
 8008546:	d007      	beq.n	8008558 <sbrk_aligned+0x38>
 8008548:	1a21      	subs	r1, r4, r0
 800854a:	4628      	mov	r0, r5
 800854c:	f000 f8ac 	bl	80086a8 <_sbrk_r>
 8008550:	3001      	adds	r0, #1
 8008552:	d101      	bne.n	8008558 <sbrk_aligned+0x38>
 8008554:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008558:	4620      	mov	r0, r4
 800855a:	bd70      	pop	{r4, r5, r6, pc}
 800855c:	200015d4 	.word	0x200015d4

08008560 <_malloc_r>:
 8008560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008564:	1ccd      	adds	r5, r1, #3
 8008566:	f025 0503 	bic.w	r5, r5, #3
 800856a:	3508      	adds	r5, #8
 800856c:	2d0c      	cmp	r5, #12
 800856e:	bf38      	it	cc
 8008570:	250c      	movcc	r5, #12
 8008572:	2d00      	cmp	r5, #0
 8008574:	4607      	mov	r7, r0
 8008576:	db01      	blt.n	800857c <_malloc_r+0x1c>
 8008578:	42a9      	cmp	r1, r5
 800857a:	d905      	bls.n	8008588 <_malloc_r+0x28>
 800857c:	230c      	movs	r3, #12
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	2600      	movs	r6, #0
 8008582:	4630      	mov	r0, r6
 8008584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008588:	4e2e      	ldr	r6, [pc, #184]	; (8008644 <_malloc_r+0xe4>)
 800858a:	f000 f89d 	bl	80086c8 <__malloc_lock>
 800858e:	6833      	ldr	r3, [r6, #0]
 8008590:	461c      	mov	r4, r3
 8008592:	bb34      	cbnz	r4, 80085e2 <_malloc_r+0x82>
 8008594:	4629      	mov	r1, r5
 8008596:	4638      	mov	r0, r7
 8008598:	f7ff ffc2 	bl	8008520 <sbrk_aligned>
 800859c:	1c43      	adds	r3, r0, #1
 800859e:	4604      	mov	r4, r0
 80085a0:	d14d      	bne.n	800863e <_malloc_r+0xde>
 80085a2:	6834      	ldr	r4, [r6, #0]
 80085a4:	4626      	mov	r6, r4
 80085a6:	2e00      	cmp	r6, #0
 80085a8:	d140      	bne.n	800862c <_malloc_r+0xcc>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	4631      	mov	r1, r6
 80085ae:	4638      	mov	r0, r7
 80085b0:	eb04 0803 	add.w	r8, r4, r3
 80085b4:	f000 f878 	bl	80086a8 <_sbrk_r>
 80085b8:	4580      	cmp	r8, r0
 80085ba:	d13a      	bne.n	8008632 <_malloc_r+0xd2>
 80085bc:	6821      	ldr	r1, [r4, #0]
 80085be:	3503      	adds	r5, #3
 80085c0:	1a6d      	subs	r5, r5, r1
 80085c2:	f025 0503 	bic.w	r5, r5, #3
 80085c6:	3508      	adds	r5, #8
 80085c8:	2d0c      	cmp	r5, #12
 80085ca:	bf38      	it	cc
 80085cc:	250c      	movcc	r5, #12
 80085ce:	4629      	mov	r1, r5
 80085d0:	4638      	mov	r0, r7
 80085d2:	f7ff ffa5 	bl	8008520 <sbrk_aligned>
 80085d6:	3001      	adds	r0, #1
 80085d8:	d02b      	beq.n	8008632 <_malloc_r+0xd2>
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	442b      	add	r3, r5
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	e00e      	b.n	8008600 <_malloc_r+0xa0>
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	1b52      	subs	r2, r2, r5
 80085e6:	d41e      	bmi.n	8008626 <_malloc_r+0xc6>
 80085e8:	2a0b      	cmp	r2, #11
 80085ea:	d916      	bls.n	800861a <_malloc_r+0xba>
 80085ec:	1961      	adds	r1, r4, r5
 80085ee:	42a3      	cmp	r3, r4
 80085f0:	6025      	str	r5, [r4, #0]
 80085f2:	bf18      	it	ne
 80085f4:	6059      	strne	r1, [r3, #4]
 80085f6:	6863      	ldr	r3, [r4, #4]
 80085f8:	bf08      	it	eq
 80085fa:	6031      	streq	r1, [r6, #0]
 80085fc:	5162      	str	r2, [r4, r5]
 80085fe:	604b      	str	r3, [r1, #4]
 8008600:	4638      	mov	r0, r7
 8008602:	f104 060b 	add.w	r6, r4, #11
 8008606:	f000 f865 	bl	80086d4 <__malloc_unlock>
 800860a:	f026 0607 	bic.w	r6, r6, #7
 800860e:	1d23      	adds	r3, r4, #4
 8008610:	1af2      	subs	r2, r6, r3
 8008612:	d0b6      	beq.n	8008582 <_malloc_r+0x22>
 8008614:	1b9b      	subs	r3, r3, r6
 8008616:	50a3      	str	r3, [r4, r2]
 8008618:	e7b3      	b.n	8008582 <_malloc_r+0x22>
 800861a:	6862      	ldr	r2, [r4, #4]
 800861c:	42a3      	cmp	r3, r4
 800861e:	bf0c      	ite	eq
 8008620:	6032      	streq	r2, [r6, #0]
 8008622:	605a      	strne	r2, [r3, #4]
 8008624:	e7ec      	b.n	8008600 <_malloc_r+0xa0>
 8008626:	4623      	mov	r3, r4
 8008628:	6864      	ldr	r4, [r4, #4]
 800862a:	e7b2      	b.n	8008592 <_malloc_r+0x32>
 800862c:	4634      	mov	r4, r6
 800862e:	6876      	ldr	r6, [r6, #4]
 8008630:	e7b9      	b.n	80085a6 <_malloc_r+0x46>
 8008632:	230c      	movs	r3, #12
 8008634:	603b      	str	r3, [r7, #0]
 8008636:	4638      	mov	r0, r7
 8008638:	f000 f84c 	bl	80086d4 <__malloc_unlock>
 800863c:	e7a1      	b.n	8008582 <_malloc_r+0x22>
 800863e:	6025      	str	r5, [r4, #0]
 8008640:	e7de      	b.n	8008600 <_malloc_r+0xa0>
 8008642:	bf00      	nop
 8008644:	200015d0 	.word	0x200015d0

08008648 <_realloc_r>:
 8008648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864c:	4680      	mov	r8, r0
 800864e:	4614      	mov	r4, r2
 8008650:	460e      	mov	r6, r1
 8008652:	b921      	cbnz	r1, 800865e <_realloc_r+0x16>
 8008654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	4611      	mov	r1, r2
 800865a:	f7ff bf81 	b.w	8008560 <_malloc_r>
 800865e:	b92a      	cbnz	r2, 800866c <_realloc_r+0x24>
 8008660:	f7ff ff12 	bl	8008488 <_free_r>
 8008664:	4625      	mov	r5, r4
 8008666:	4628      	mov	r0, r5
 8008668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800866c:	f000 f838 	bl	80086e0 <_malloc_usable_size_r>
 8008670:	4284      	cmp	r4, r0
 8008672:	4607      	mov	r7, r0
 8008674:	d802      	bhi.n	800867c <_realloc_r+0x34>
 8008676:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800867a:	d812      	bhi.n	80086a2 <_realloc_r+0x5a>
 800867c:	4621      	mov	r1, r4
 800867e:	4640      	mov	r0, r8
 8008680:	f7ff ff6e 	bl	8008560 <_malloc_r>
 8008684:	4605      	mov	r5, r0
 8008686:	2800      	cmp	r0, #0
 8008688:	d0ed      	beq.n	8008666 <_realloc_r+0x1e>
 800868a:	42bc      	cmp	r4, r7
 800868c:	4622      	mov	r2, r4
 800868e:	4631      	mov	r1, r6
 8008690:	bf28      	it	cs
 8008692:	463a      	movcs	r2, r7
 8008694:	f7ff fed0 	bl	8008438 <memcpy>
 8008698:	4631      	mov	r1, r6
 800869a:	4640      	mov	r0, r8
 800869c:	f7ff fef4 	bl	8008488 <_free_r>
 80086a0:	e7e1      	b.n	8008666 <_realloc_r+0x1e>
 80086a2:	4635      	mov	r5, r6
 80086a4:	e7df      	b.n	8008666 <_realloc_r+0x1e>
	...

080086a8 <_sbrk_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4d06      	ldr	r5, [pc, #24]	; (80086c4 <_sbrk_r+0x1c>)
 80086ac:	2300      	movs	r3, #0
 80086ae:	4604      	mov	r4, r0
 80086b0:	4608      	mov	r0, r1
 80086b2:	602b      	str	r3, [r5, #0]
 80086b4:	f000 f81e 	bl	80086f4 <_sbrk>
 80086b8:	1c43      	adds	r3, r0, #1
 80086ba:	d102      	bne.n	80086c2 <_sbrk_r+0x1a>
 80086bc:	682b      	ldr	r3, [r5, #0]
 80086be:	b103      	cbz	r3, 80086c2 <_sbrk_r+0x1a>
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	bd38      	pop	{r3, r4, r5, pc}
 80086c4:	200015d8 	.word	0x200015d8

080086c8 <__malloc_lock>:
 80086c8:	4801      	ldr	r0, [pc, #4]	; (80086d0 <__malloc_lock+0x8>)
 80086ca:	f000 b811 	b.w	80086f0 <__retarget_lock_acquire_recursive>
 80086ce:	bf00      	nop
 80086d0:	200015dc 	.word	0x200015dc

080086d4 <__malloc_unlock>:
 80086d4:	4801      	ldr	r0, [pc, #4]	; (80086dc <__malloc_unlock+0x8>)
 80086d6:	f000 b80c 	b.w	80086f2 <__retarget_lock_release_recursive>
 80086da:	bf00      	nop
 80086dc:	200015dc 	.word	0x200015dc

080086e0 <_malloc_usable_size_r>:
 80086e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e4:	1f18      	subs	r0, r3, #4
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	bfbc      	itt	lt
 80086ea:	580b      	ldrlt	r3, [r1, r0]
 80086ec:	18c0      	addlt	r0, r0, r3
 80086ee:	4770      	bx	lr

080086f0 <__retarget_lock_acquire_recursive>:
 80086f0:	4770      	bx	lr

080086f2 <__retarget_lock_release_recursive>:
 80086f2:	4770      	bx	lr

080086f4 <_sbrk>:
 80086f4:	4a04      	ldr	r2, [pc, #16]	; (8008708 <_sbrk+0x14>)
 80086f6:	6811      	ldr	r1, [r2, #0]
 80086f8:	4603      	mov	r3, r0
 80086fa:	b909      	cbnz	r1, 8008700 <_sbrk+0xc>
 80086fc:	4903      	ldr	r1, [pc, #12]	; (800870c <_sbrk+0x18>)
 80086fe:	6011      	str	r1, [r2, #0]
 8008700:	6810      	ldr	r0, [r2, #0]
 8008702:	4403      	add	r3, r0
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	4770      	bx	lr
 8008708:	200015e0 	.word	0x200015e0
 800870c:	200015e8 	.word	0x200015e8

08008710 <_init>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	bf00      	nop
 8008714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008716:	bc08      	pop	{r3}
 8008718:	469e      	mov	lr, r3
 800871a:	4770      	bx	lr

0800871c <_fini>:
 800871c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871e:	bf00      	nop
 8008720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008722:	bc08      	pop	{r3}
 8008724:	469e      	mov	lr, r3
 8008726:	4770      	bx	lr
