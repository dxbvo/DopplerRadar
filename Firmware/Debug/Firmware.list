
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008614  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000180a4  080087c0  080087c0  000187c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020864  08020864  00040194  2**0
                  CONTENTS
  4 .ARM          00000008  08020864  08020864  00030864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802086c  0802086c  00040194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802086c  0802086c  0003086c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020870  08020870  00030870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08020874  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000194  08020a08  00040194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08020a08  0004059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016fd4  00000000  00000000  000401c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003748  00000000  00000000  00057198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  0005a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0005bd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d6d  00000000  00000000  0005d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bcf  00000000  00000000  00083d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e05af  00000000  00000000  0009c944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0017cef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005414  00000000  00000000  0017cfb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00001908  00000000  00000000  001823c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000194 	.word	0x20000194
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080087a8 	.word	0x080087a8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000198 	.word	0x20000198
 80001e8:	080087a8 	.word	0x080087a8

080001ec <arm_bitreversal_32>:
 80001ec:	1c4b      	adds	r3, r1, #1
 80001ee:	2b01      	cmp	r3, #1
 80001f0:	bf98      	it	ls
 80001f2:	4770      	bxls	lr
 80001f4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001f8:	1c91      	adds	r1, r2, #2
 80001fa:	089b      	lsrs	r3, r3, #2

080001fc <arm_bitreversal_32_0>:
 80001fc:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000200:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000204:	880a      	ldrh	r2, [r1, #0]
 8000206:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020a:	4480      	add	r8, r0
 800020c:	4481      	add	r9, r0
 800020e:	4402      	add	r2, r0
 8000210:	4484      	add	ip, r0
 8000212:	f8d9 7000 	ldr.w	r7, [r9]
 8000216:	f8d8 6000 	ldr.w	r6, [r8]
 800021a:	6815      	ldr	r5, [r2, #0]
 800021c:	f8dc 4000 	ldr.w	r4, [ip]
 8000220:	f8c9 6000 	str.w	r6, [r9]
 8000224:	f8c8 7000 	str.w	r7, [r8]
 8000228:	f8cc 5000 	str.w	r5, [ip]
 800022c:	6014      	str	r4, [r2, #0]
 800022e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000232:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000236:	6855      	ldr	r5, [r2, #4]
 8000238:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800023c:	f8c9 6004 	str.w	r6, [r9, #4]
 8000240:	f8c8 7004 	str.w	r7, [r8, #4]
 8000244:	f8cc 5004 	str.w	r5, [ip, #4]
 8000248:	6054      	str	r4, [r2, #4]
 800024a:	3108      	adds	r1, #8
 800024c:	3b01      	subs	r3, #1
 800024e:	d1d5      	bne.n	80001fc <arm_bitreversal_32_0>
 8000250:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000254:	4770      	bx	lr

08000256 <arm_bitreversal_16>:
 8000256:	1c4b      	adds	r3, r1, #1
 8000258:	2b01      	cmp	r3, #1
 800025a:	bf98      	it	ls
 800025c:	4770      	bxls	lr
 800025e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000262:	1c91      	adds	r1, r2, #2
 8000264:	089b      	lsrs	r3, r3, #2

08000266 <arm_bitreversal_16_0>:
 8000266:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026a:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800026e:	880a      	ldrh	r2, [r1, #0]
 8000270:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000274:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000278:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 800027c:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000280:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000284:	f8d9 7000 	ldr.w	r7, [r9]
 8000288:	f8d8 6000 	ldr.w	r6, [r8]
 800028c:	6815      	ldr	r5, [r2, #0]
 800028e:	f8dc 4000 	ldr.w	r4, [ip]
 8000292:	f8c9 6000 	str.w	r6, [r9]
 8000296:	f8c8 7000 	str.w	r7, [r8]
 800029a:	f8cc 5000 	str.w	r5, [ip]
 800029e:	6014      	str	r4, [r2, #0]
 80002a0:	3108      	adds	r1, #8
 80002a2:	3b01      	subs	r3, #1
 80002a4:	d1df      	bne.n	8000266 <arm_bitreversal_16_0>
 80002a6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002aa:	4770      	bx	lr

080002ac <__aeabi_uldivmod>:
 80002ac:	b953      	cbnz	r3, 80002c4 <__aeabi_uldivmod+0x18>
 80002ae:	b94a      	cbnz	r2, 80002c4 <__aeabi_uldivmod+0x18>
 80002b0:	2900      	cmp	r1, #0
 80002b2:	bf08      	it	eq
 80002b4:	2800      	cmpeq	r0, #0
 80002b6:	bf1c      	itt	ne
 80002b8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002bc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c0:	f000 b974 	b.w	80005ac <__aeabi_idiv0>
 80002c4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002cc:	f000 f806 	bl	80002dc <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4770      	bx	lr

080002dc <__udivmoddi4>:
 80002dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e0:	9d08      	ldr	r5, [sp, #32]
 80002e2:	4604      	mov	r4, r0
 80002e4:	468e      	mov	lr, r1
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d14d      	bne.n	8000386 <__udivmoddi4+0xaa>
 80002ea:	428a      	cmp	r2, r1
 80002ec:	4694      	mov	ip, r2
 80002ee:	d969      	bls.n	80003c4 <__udivmoddi4+0xe8>
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	b152      	cbz	r2, 800030c <__udivmoddi4+0x30>
 80002f6:	fa01 f302 	lsl.w	r3, r1, r2
 80002fa:	f1c2 0120 	rsb	r1, r2, #32
 80002fe:	fa20 f101 	lsr.w	r1, r0, r1
 8000302:	fa0c fc02 	lsl.w	ip, ip, r2
 8000306:	ea41 0e03 	orr.w	lr, r1, r3
 800030a:	4094      	lsls	r4, r2
 800030c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000310:	0c21      	lsrs	r1, r4, #16
 8000312:	fbbe f6f8 	udiv	r6, lr, r8
 8000316:	fa1f f78c 	uxth.w	r7, ip
 800031a:	fb08 e316 	mls	r3, r8, r6, lr
 800031e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000322:	fb06 f107 	mul.w	r1, r6, r7
 8000326:	4299      	cmp	r1, r3
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x64>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000332:	f080 811f 	bcs.w	8000574 <__udivmoddi4+0x298>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 811c 	bls.w	8000574 <__udivmoddi4+0x298>
 800033c:	3e02      	subs	r6, #2
 800033e:	4463      	add	r3, ip
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 f707 	mul.w	r7, r0, r7
 8000354:	42a7      	cmp	r7, r4
 8000356:	d90a      	bls.n	800036e <__udivmoddi4+0x92>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000360:	f080 810a 	bcs.w	8000578 <__udivmoddi4+0x29c>
 8000364:	42a7      	cmp	r7, r4
 8000366:	f240 8107 	bls.w	8000578 <__udivmoddi4+0x29c>
 800036a:	4464      	add	r4, ip
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000372:	1be4      	subs	r4, r4, r7
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa4>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xc2>
 800038a:	2d00      	cmp	r5, #0
 800038c:	f000 80ef 	beq.w	800056e <__udivmoddi4+0x292>
 8000390:	2600      	movs	r6, #0
 8000392:	e9c5 0100 	strd	r0, r1, [r5]
 8000396:	4630      	mov	r0, r6
 8000398:	4631      	mov	r1, r6
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f683 	clz	r6, r3
 80003a2:	2e00      	cmp	r6, #0
 80003a4:	d14a      	bne.n	800043c <__udivmoddi4+0x160>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd4>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80f9 	bhi.w	80005a2 <__udivmoddi4+0x2c6>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	469e      	mov	lr, r3
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa4>
 80003be:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa4>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xec>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 8092 	bne.w	80004f6 <__udivmoddi4+0x21a>
 80003d2:	eba1 010c 	sub.w	r1, r1, ip
 80003d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	2601      	movs	r6, #1
 80003e0:	0c20      	lsrs	r0, r4, #16
 80003e2:	fbb1 f3f7 	udiv	r3, r1, r7
 80003e6:	fb07 1113 	mls	r1, r7, r3, r1
 80003ea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ee:	fb0e f003 	mul.w	r0, lr, r3
 80003f2:	4288      	cmp	r0, r1
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x12c>
 80003f6:	eb1c 0101 	adds.w	r1, ip, r1
 80003fa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x12a>
 8000400:	4288      	cmp	r0, r1
 8000402:	f200 80cb 	bhi.w	800059c <__udivmoddi4+0x2c0>
 8000406:	4643      	mov	r3, r8
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000410:	fb07 1110 	mls	r1, r7, r0, r1
 8000414:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000418:	fb0e fe00 	mul.w	lr, lr, r0
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x156>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000428:	d202      	bcs.n	8000430 <__udivmoddi4+0x154>
 800042a:	45a6      	cmp	lr, r4
 800042c:	f200 80bb 	bhi.w	80005a6 <__udivmoddi4+0x2ca>
 8000430:	4608      	mov	r0, r1
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043a:	e79c      	b.n	8000376 <__udivmoddi4+0x9a>
 800043c:	f1c6 0720 	rsb	r7, r6, #32
 8000440:	40b3      	lsls	r3, r6
 8000442:	fa22 fc07 	lsr.w	ip, r2, r7
 8000446:	ea4c 0c03 	orr.w	ip, ip, r3
 800044a:	fa20 f407 	lsr.w	r4, r0, r7
 800044e:	fa01 f306 	lsl.w	r3, r1, r6
 8000452:	431c      	orrs	r4, r3
 8000454:	40f9      	lsrs	r1, r7
 8000456:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045a:	fa00 f306 	lsl.w	r3, r0, r6
 800045e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000462:	0c20      	lsrs	r0, r4, #16
 8000464:	fa1f fe8c 	uxth.w	lr, ip
 8000468:	fb09 1118 	mls	r1, r9, r8, r1
 800046c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000470:	fb08 f00e 	mul.w	r0, r8, lr
 8000474:	4288      	cmp	r0, r1
 8000476:	fa02 f206 	lsl.w	r2, r2, r6
 800047a:	d90b      	bls.n	8000494 <__udivmoddi4+0x1b8>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000484:	f080 8088 	bcs.w	8000598 <__udivmoddi4+0x2bc>
 8000488:	4288      	cmp	r0, r1
 800048a:	f240 8085 	bls.w	8000598 <__udivmoddi4+0x2bc>
 800048e:	f1a8 0802 	sub.w	r8, r8, #2
 8000492:	4461      	add	r1, ip
 8000494:	1a09      	subs	r1, r1, r0
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb1 f0f9 	udiv	r0, r1, r9
 800049c:	fb09 1110 	mls	r1, r9, r0, r1
 80004a0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004a8:	458e      	cmp	lr, r1
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1e2>
 80004ac:	eb1c 0101 	adds.w	r1, ip, r1
 80004b0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b4:	d26c      	bcs.n	8000590 <__udivmoddi4+0x2b4>
 80004b6:	458e      	cmp	lr, r1
 80004b8:	d96a      	bls.n	8000590 <__udivmoddi4+0x2b4>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4461      	add	r1, ip
 80004be:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c2:	fba0 9402 	umull	r9, r4, r0, r2
 80004c6:	eba1 010e 	sub.w	r1, r1, lr
 80004ca:	42a1      	cmp	r1, r4
 80004cc:	46c8      	mov	r8, r9
 80004ce:	46a6      	mov	lr, r4
 80004d0:	d356      	bcc.n	8000580 <__udivmoddi4+0x2a4>
 80004d2:	d053      	beq.n	800057c <__udivmoddi4+0x2a0>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x212>
 80004d6:	ebb3 0208 	subs.w	r2, r3, r8
 80004da:	eb61 010e 	sbc.w	r1, r1, lr
 80004de:	fa01 f707 	lsl.w	r7, r1, r7
 80004e2:	fa22 f306 	lsr.w	r3, r2, r6
 80004e6:	40f1      	lsrs	r1, r6
 80004e8:	431f      	orrs	r7, r3
 80004ea:	e9c5 7100 	strd	r7, r1, [r5]
 80004ee:	2600      	movs	r6, #0
 80004f0:	4631      	mov	r1, r6
 80004f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f6:	f1c2 0320 	rsb	r3, r2, #32
 80004fa:	40d8      	lsrs	r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa21 f303 	lsr.w	r3, r1, r3
 8000504:	4091      	lsls	r1, r2
 8000506:	4301      	orrs	r1, r0
 8000508:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800050c:	fa1f fe8c 	uxth.w	lr, ip
 8000510:	fbb3 f0f7 	udiv	r0, r3, r7
 8000514:	fb07 3610 	mls	r6, r7, r0, r3
 8000518:	0c0b      	lsrs	r3, r1, #16
 800051a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800051e:	fb00 f60e 	mul.w	r6, r0, lr
 8000522:	429e      	cmp	r6, r3
 8000524:	fa04 f402 	lsl.w	r4, r4, r2
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x260>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000532:	d22f      	bcs.n	8000594 <__udivmoddi4+0x2b8>
 8000534:	429e      	cmp	r6, r3
 8000536:	d92d      	bls.n	8000594 <__udivmoddi4+0x2b8>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1b9b      	subs	r3, r3, r6
 800053e:	b289      	uxth	r1, r1
 8000540:	fbb3 f6f7 	udiv	r6, r3, r7
 8000544:	fb07 3316 	mls	r3, r7, r6, r3
 8000548:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054c:	fb06 f30e 	mul.w	r3, r6, lr
 8000550:	428b      	cmp	r3, r1
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x28a>
 8000554:	eb1c 0101 	adds.w	r1, ip, r1
 8000558:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800055c:	d216      	bcs.n	800058c <__udivmoddi4+0x2b0>
 800055e:	428b      	cmp	r3, r1
 8000560:	d914      	bls.n	800058c <__udivmoddi4+0x2b0>
 8000562:	3e02      	subs	r6, #2
 8000564:	4461      	add	r1, ip
 8000566:	1ac9      	subs	r1, r1, r3
 8000568:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800056c:	e738      	b.n	80003e0 <__udivmoddi4+0x104>
 800056e:	462e      	mov	r6, r5
 8000570:	4628      	mov	r0, r5
 8000572:	e705      	b.n	8000380 <__udivmoddi4+0xa4>
 8000574:	4606      	mov	r6, r0
 8000576:	e6e3      	b.n	8000340 <__udivmoddi4+0x64>
 8000578:	4618      	mov	r0, r3
 800057a:	e6f8      	b.n	800036e <__udivmoddi4+0x92>
 800057c:	454b      	cmp	r3, r9
 800057e:	d2a9      	bcs.n	80004d4 <__udivmoddi4+0x1f8>
 8000580:	ebb9 0802 	subs.w	r8, r9, r2
 8000584:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000588:	3801      	subs	r0, #1
 800058a:	e7a3      	b.n	80004d4 <__udivmoddi4+0x1f8>
 800058c:	4646      	mov	r6, r8
 800058e:	e7ea      	b.n	8000566 <__udivmoddi4+0x28a>
 8000590:	4620      	mov	r0, r4
 8000592:	e794      	b.n	80004be <__udivmoddi4+0x1e2>
 8000594:	4640      	mov	r0, r8
 8000596:	e7d1      	b.n	800053c <__udivmoddi4+0x260>
 8000598:	46d0      	mov	r8, sl
 800059a:	e77b      	b.n	8000494 <__udivmoddi4+0x1b8>
 800059c:	3b02      	subs	r3, #2
 800059e:	4461      	add	r1, ip
 80005a0:	e732      	b.n	8000408 <__udivmoddi4+0x12c>
 80005a2:	4630      	mov	r0, r6
 80005a4:	e709      	b.n	80003ba <__udivmoddi4+0xde>
 80005a6:	4464      	add	r4, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e742      	b.n	8000432 <__udivmoddi4+0x156>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	460b      	mov	r3, r1
 80005ba:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	887a      	ldrh	r2, [r7, #2]
 80005c4:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005d4:	d02c      	beq.n	8000630 <arm_cfft_init_f32+0x80>
 80005d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005da:	f300 809e 	bgt.w	800071a <arm_cfft_init_f32+0x16a>
 80005de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005e2:	d032      	beq.n	800064a <arm_cfft_init_f32+0x9a>
 80005e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005e8:	f300 8097 	bgt.w	800071a <arm_cfft_init_f32+0x16a>
 80005ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005f0:	d038      	beq.n	8000664 <arm_cfft_init_f32+0xb4>
 80005f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005f6:	f300 8090 	bgt.w	800071a <arm_cfft_init_f32+0x16a>
 80005fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005fe:	d03e      	beq.n	800067e <arm_cfft_init_f32+0xce>
 8000600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000604:	f300 8089 	bgt.w	800071a <arm_cfft_init_f32+0x16a>
 8000608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800060c:	d044      	beq.n	8000698 <arm_cfft_init_f32+0xe8>
 800060e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000612:	f300 8082 	bgt.w	800071a <arm_cfft_init_f32+0x16a>
 8000616:	2b80      	cmp	r3, #128	; 0x80
 8000618:	d04b      	beq.n	80006b2 <arm_cfft_init_f32+0x102>
 800061a:	2b80      	cmp	r3, #128	; 0x80
 800061c:	dc7d      	bgt.n	800071a <arm_cfft_init_f32+0x16a>
 800061e:	2b40      	cmp	r3, #64	; 0x40
 8000620:	d054      	beq.n	80006cc <arm_cfft_init_f32+0x11c>
 8000622:	2b40      	cmp	r3, #64	; 0x40
 8000624:	dc79      	bgt.n	800071a <arm_cfft_init_f32+0x16a>
 8000626:	2b10      	cmp	r3, #16
 8000628:	d06a      	beq.n	8000700 <arm_cfft_init_f32+0x150>
 800062a:	2b20      	cmp	r3, #32
 800062c:	d05b      	beq.n	80006e6 <arm_cfft_init_f32+0x136>
 800062e:	e074      	b.n	800071a <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 8000630:	4b3f      	ldr	r3, [pc, #252]	; (8000730 <arm_cfft_init_f32+0x180>)
 8000632:	899a      	ldrh	r2, [r3, #12]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	819a      	strh	r2, [r3, #12]
 8000638:	4b3d      	ldr	r3, [pc, #244]	; (8000730 <arm_cfft_init_f32+0x180>)
 800063a:	689a      	ldr	r2, [r3, #8]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <arm_cfft_init_f32+0x180>)
 8000642:	685a      	ldr	r2, [r3, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	605a      	str	r2, [r3, #4]
            break;
 8000648:	e06a      	b.n	8000720 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 800064a:	4b3a      	ldr	r3, [pc, #232]	; (8000734 <arm_cfft_init_f32+0x184>)
 800064c:	899a      	ldrh	r2, [r3, #12]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	819a      	strh	r2, [r3, #12]
 8000652:	4b38      	ldr	r3, [pc, #224]	; (8000734 <arm_cfft_init_f32+0x184>)
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	4b36      	ldr	r3, [pc, #216]	; (8000734 <arm_cfft_init_f32+0x184>)
 800065c:	685a      	ldr	r2, [r3, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	605a      	str	r2, [r3, #4]

            break;
 8000662:	e05d      	b.n	8000720 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 8000664:	4b34      	ldr	r3, [pc, #208]	; (8000738 <arm_cfft_init_f32+0x188>)
 8000666:	899a      	ldrh	r2, [r3, #12]
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	819a      	strh	r2, [r3, #12]
 800066c:	4b32      	ldr	r3, [pc, #200]	; (8000738 <arm_cfft_init_f32+0x188>)
 800066e:	689a      	ldr	r2, [r3, #8]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	4b30      	ldr	r3, [pc, #192]	; (8000738 <arm_cfft_init_f32+0x188>)
 8000676:	685a      	ldr	r2, [r3, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	605a      	str	r2, [r3, #4]

            break;
 800067c:	e050      	b.n	8000720 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 800067e:	4b2f      	ldr	r3, [pc, #188]	; (800073c <arm_cfft_init_f32+0x18c>)
 8000680:	899a      	ldrh	r2, [r3, #12]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	819a      	strh	r2, [r3, #12]
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <arm_cfft_init_f32+0x18c>)
 8000688:	689a      	ldr	r2, [r3, #8]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <arm_cfft_init_f32+0x18c>)
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	605a      	str	r2, [r3, #4]
            break;
 8000696:	e043      	b.n	8000720 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8000698:	4b29      	ldr	r3, [pc, #164]	; (8000740 <arm_cfft_init_f32+0x190>)
 800069a:	899a      	ldrh	r2, [r3, #12]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	819a      	strh	r2, [r3, #12]
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <arm_cfft_init_f32+0x190>)
 80006a2:	689a      	ldr	r2, [r3, #8]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	4b25      	ldr	r3, [pc, #148]	; (8000740 <arm_cfft_init_f32+0x190>)
 80006aa:	685a      	ldr	r2, [r3, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	605a      	str	r2, [r3, #4]
            break;
 80006b0:	e036      	b.n	8000720 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 80006b2:	4b24      	ldr	r3, [pc, #144]	; (8000744 <arm_cfft_init_f32+0x194>)
 80006b4:	899a      	ldrh	r2, [r3, #12]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	819a      	strh	r2, [r3, #12]
 80006ba:	4b22      	ldr	r3, [pc, #136]	; (8000744 <arm_cfft_init_f32+0x194>)
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	609a      	str	r2, [r3, #8]
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <arm_cfft_init_f32+0x194>)
 80006c4:	685a      	ldr	r2, [r3, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	605a      	str	r2, [r3, #4]
            break;
 80006ca:	e029      	b.n	8000720 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 80006cc:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <arm_cfft_init_f32+0x198>)
 80006ce:	899a      	ldrh	r2, [r3, #12]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	819a      	strh	r2, [r3, #12]
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <arm_cfft_init_f32+0x198>)
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <arm_cfft_init_f32+0x198>)
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	605a      	str	r2, [r3, #4]
            break;
 80006e4:	e01c      	b.n	8000720 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <arm_cfft_init_f32+0x19c>)
 80006e8:	899a      	ldrh	r2, [r3, #12]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	819a      	strh	r2, [r3, #12]
 80006ee:	4b17      	ldr	r3, [pc, #92]	; (800074c <arm_cfft_init_f32+0x19c>)
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <arm_cfft_init_f32+0x19c>)
 80006f8:	685a      	ldr	r2, [r3, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	605a      	str	r2, [r3, #4]
            break;
 80006fe:	e00f      	b.n	8000720 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <arm_cfft_init_f32+0x1a0>)
 8000702:	899a      	ldrh	r2, [r3, #12]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	819a      	strh	r2, [r3, #12]
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <arm_cfft_init_f32+0x1a0>)
 800070a:	689a      	ldr	r2, [r3, #8]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <arm_cfft_init_f32+0x1a0>)
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	605a      	str	r2, [r3, #4]
            break;
 8000718:	e002      	b.n	8000720 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 800071a:	23ff      	movs	r3, #255	; 0xff
 800071c:	73fb      	strb	r3, [r7, #15]
            break;
 800071e:	bf00      	nop
        }


        return (status);
 8000720:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr
 8000730:	0800b3ac 	.word	0x0800b3ac
 8000734:	0800b3dc 	.word	0x0800b3dc
 8000738:	0800b37c 	.word	0x0800b37c
 800073c:	0800b3bc 	.word	0x0800b3bc
 8000740:	0800b3ec 	.word	0x0800b3ec
 8000744:	0800b39c 	.word	0x0800b39c
 8000748:	0800b38c 	.word	0x0800b38c
 800074c:	0800b3fc 	.word	0x0800b3fc
 8000750:	0800b3cc 	.word	0x0800b3cc

08000754 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b0c7      	sub	sp, #284	; 0x11c
 8000758:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 800075a:	f002 ffe5 	bl	8003728 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 800075e:	f000 f909 	bl	8000974 <SystemClock_Config>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 8000762:	f002 f801 	bl	8002768 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000766:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 800076a:	2001      	movs	r0, #1
 800076c:	f002 f88a 	bl	8002884 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000770:	2001      	movs	r0, #1
 8000772:	f002 f8eb 	bl	800294c <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000776:	f002 faeb 	bl	8002d50 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 800077a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800077e:	f002 f941 	bl	8002a04 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8000782:	f002 f867 	bl	8002854 <BSP_LCD_GetXSize>
 8000786:	4603      	mov	r3, r0
 8000788:	b29c      	uxth	r4, r3
 800078a:	f002 f86f 	bl	800286c <BSP_LCD_GetYSize>
 800078e:	4603      	mov	r3, r0
 8000790:	b29b      	uxth	r3, r3
 8000792:	4619      	mov	r1, r3
 8000794:	4620      	mov	r0, r4
 8000796:	f002 fec3 	bl	8003520 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 800079a:	f000 fe9b 	bl	80014d4 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 800079e:	f000 feb9 	bl	8001514 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 80007a2:	2000      	movs	r0, #0
 80007a4:	f001 fbc8 	bl	8001f38 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 80007a8:	2001      	movs	r0, #1
 80007aa:	f001 fbc5 	bl	8001f38 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 80007ae:	f000 fcb7 	bl	8001120 <MENU_draw>
	MENU_hint();						// Show hint at startup
 80007b2:	f000 fd63 	bl	800127c <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 80007b6:	f000 f95b 	bl	8000a70 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 80007ba:	f000 fa19 	bl	8000bf0 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 80007be:	f000 fad7 	bl	8000d70 <MEAS_timer_init>

    // Initialize the FFT instance
    arm_cfft_init_f32(&fftInstance, FFT_SIZE);
 80007c2:	2180      	movs	r1, #128	; 0x80
 80007c4:	4868      	ldr	r0, [pc, #416]	; (8000968 <main+0x214>)
 80007c6:	f7ff fef3 	bl	80005b0 <arm_cfft_init_f32>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80007ca:	2000      	movs	r0, #0
 80007cc:	f001 fc3c 	bl	8002048 <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 80007d0:	4b66      	ldr	r3, [pc, #408]	; (800096c <main+0x218>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d07a      	beq.n	80008ce <main+0x17a>
			MEAS_data_ready = false;
 80007d8:	4b64      	ldr	r3, [pc, #400]	; (800096c <main+0x218>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
			//MEAS_show_data();

			// test array (use ADC_samples instead of testArray when not testing)
			float32_t testArray[64];
		    for (int i = 0; i < 64; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80007e4:	e018      	b.n	8000818 <main+0xc4>
		    	testArray[i] = (float32_t)i / 10.0f;
 80007e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80007ea:	ee07 3a90 	vmov	s15, r3
 80007ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007f2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80007f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007fe:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8000802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	edc3 7a00 	vstr	s15, [r3]
		    for (int i = 0; i < 64; i++) {
 800080e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000812:	3301      	adds	r3, #1
 8000814:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000818:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800081c:	2b3f      	cmp	r3, #63	; 0x3f
 800081e:	dde2      	ble.n	80007e6 <main+0x92>
		    }

		    // Perform the FFT, 1 indicates forward FFT, 0 is not used
		    arm_cfft_f32(&fftInstance, testArray, 0, 1);
 8000820:	4639      	mov	r1, r7
 8000822:	2301      	movs	r3, #1
 8000824:	2200      	movs	r2, #0
 8000826:	4850      	ldr	r0, [pc, #320]	; (8000968 <main+0x214>)
 8000828:	f007 fc26 	bl	8008078 <arm_cfft_f32>

		    // print highest value in ADC_samples
		    int arr_size = sizeof(testArray) / sizeof(float32_t);
 800082c:	2340      	movs	r3, #64	; 0x40
 800082e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		    int max_val = testArray[0];
 8000832:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000836:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800083a:	edd3 7a00 	vldr	s15, [r3]
 800083e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000842:	ee17 3a90 	vmov	r3, s15
 8000846:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

		    // get max value which corresponds to Doppler frequency
		    for (int i = 1; i < arr_size; i++) {
 800084a:	2301      	movs	r3, #1
 800084c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000850:	e029      	b.n	80008a6 <main+0x152>
		        if (testArray[i] > max_val) {
 8000852:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000856:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800085a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4413      	add	r3, r2
 8000862:	ed93 7a00 	vldr	s14, [r3]
 8000866:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800086a:	ee07 3a90 	vmov	s15, r3
 800086e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800087a:	dd0f      	ble.n	800089c <main+0x148>
		            max_val = testArray[i];
 800087c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000880:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8000884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	4413      	add	r3, r2
 800088c:	edd3 7a00 	vldr	s15, [r3]
 8000890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000894:	ee17 3a90 	vmov	r3, s15
 8000898:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
		    for (int i = 1; i < arr_size; i++) {
 800089c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80008a0:	3301      	adds	r3, #1
 80008a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80008a6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80008aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80008ae:	429a      	cmp	r2, r3
 80008b0:	dbcf      	blt.n	8000852 <main+0xfe>
		        }
		    }

		    // Calculate velocity
		    int lambda = c / fc;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		    int v = (max_val*lambda) / 2;
 80008b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80008bc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80008c0:	fb02 f303 	mul.w	r3, r2, r3
 80008c4:	0fda      	lsrs	r2, r3, #31
 80008c6:	4413      	add	r3, r2
 80008c8:	105b      	asrs	r3, r3, #1
 80008ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 80008ce:	f000 fe53 	bl	8001578 <PB_pressed>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d01d      	beq.n	8000914 <main+0x1c0>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <main+0x21c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	f083 0301 	eor.w	r3, r3, #1
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <main+0x21c>)
 80008f4:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 80008f6:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <main+0x21c>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d005      	beq.n	800090a <main+0x1b6>
				DAC_init();
 80008fe:	f000 f9db 	bl	8000cb8 <DAC_init>
				BSP_LED_On(LED4);
 8000902:	2001      	movs	r0, #1
 8000904:	f001 fb6c 	bl	8001fe0 <BSP_LED_On>
 8000908:	e004      	b.n	8000914 <main+0x1c0>
			} else {
				DAC_reset();
 800090a:	f000 f9bf 	bl	8000c8c <DAC_reset>
				BSP_LED_Off(LED4);
 800090e:	2001      	movs	r0, #1
 8000910:	f001 fb80 	bl	8002014 <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8000914:	f000 fd12 	bl	800133c <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 8000918:	f000 fcfe 	bl	8001318 <MENU_get_transition>
 800091c:	4603      	mov	r3, r0
 800091e:	2b06      	cmp	r3, #6
 8000920:	d81c      	bhi.n	800095c <main+0x208>
 8000922:	a201      	add	r2, pc, #4	; (adr r2, 8000928 <main+0x1d4>)
 8000924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000928:	08000945 	.word	0x08000945
 800092c:	0800095d 	.word	0x0800095d
 8000930:	0800095d 	.word	0x0800095d
 8000934:	08000953 	.word	0x08000953
 8000938:	0800095d 	.word	0x0800095d
 800093c:	0800095d 	.word	0x0800095d
 8000940:	0800095d 	.word	0x0800095d
		case MENU_NONE:					// No transition => do nothing
			break;
		case MENU_ZERO:
			ADC1_IN13_ADC2_IN11_dual_init();
 8000944:	f000 fa4a 	bl	8000ddc <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN11_dual_start();
 8000948:	f000 faf2 	bl	8000f30 <ADC1_IN13_ADC2_IN11_dual_start>
			DMA2_Stream4_IRQHandler();
 800094c:	f000 fb68 	bl	8001020 <DMA2_Stream4_IRQHandler>

			break;
 8000950:	e005      	b.n	800095e <main+0x20a>
		case MENU_ONE:
			break;
		case MENU_TWO:
			break;
		case MENU_THREE:
			ADC1_IN13_ADC2_IN11_dual_init();
 8000952:	f000 fa43 	bl	8000ddc <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN11_dual_start();
 8000956:	f000 faeb 	bl	8000f30 <ADC1_IN13_ADC2_IN11_dual_start>
			break;
 800095a:	e000      	b.n	800095e <main+0x20a>
		case MENU_FOUR:
			break;
		case MENU_FIVE:
			break;
		default:						// Should never occur
			break;
 800095c:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 800095e:	20c8      	movs	r0, #200	; 0xc8
 8000960:	f002 ff5c 	bl	800381c <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8000964:	e731      	b.n	80007ca <main+0x76>
 8000966:	bf00      	nop
 8000968:	200001b0 	.word	0x200001b0
 800096c:	200001c0 	.word	0x200001c0
 8000970:	200001c1 	.word	0x200001c1

08000974 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8000974:	b580      	push	{r7, lr}
 8000976:	b0a0      	sub	sp, #128	; 0x80
 8000978:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800097e:	2230      	movs	r2, #48	; 0x30
 8000980:	2100      	movs	r1, #0
 8000982:	4618      	mov	r0, r3
 8000984:	f007 ff08 	bl	8008798 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000988:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	2230      	movs	r2, #48	; 0x30
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f007 fef9 	bl	8008798 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	4b2e      	ldr	r3, [pc, #184]	; (8000a64 <SystemClock_Config+0xf0>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a2d      	ldr	r2, [pc, #180]	; (8000a64 <SystemClock_Config+0xf0>)
 80009b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b2b      	ldr	r3, [pc, #172]	; (8000a64 <SystemClock_Config+0xf0>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <SystemClock_Config+0xf4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a27      	ldr	r2, [pc, #156]	; (8000a68 <SystemClock_Config+0xf4>)
 80009cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009d0:	6013      	str	r3, [r2, #0]
 80009d2:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <SystemClock_Config+0xf4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009de:	2301      	movs	r3, #1
 80009e0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009e6:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e8:	2302      	movs	r3, #2
 80009ea:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f0:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80009f2:	2308      	movs	r3, #8
 80009f4:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 80009f6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009fa:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a00:	2307      	movs	r3, #7
 8000a02:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000a04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f005 f959 	bl	8005cc0 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a0e:	230f      	movs	r3, #15
 8000a10:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a12:	2302      	movs	r3, #2
 8000a14:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a16:	2300      	movs	r3, #0
 8000a18:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a1a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a24:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8000a26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a2a:	2105      	movs	r1, #5
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f005 fbb5 	bl	800619c <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000a32:	2308      	movs	r3, #8
 8000a34:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000a36:	23c0      	movs	r3, #192	; 0xc0
 8000a38:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000a3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f005 fdb3 	bl	80065b4 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <SystemClock_Config+0xf8>)
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <SystemClock_Config+0xf8>)
 8000a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a58:	6053      	str	r3, [r2, #4]
}
 8000a5a:	bf00      	nop
 8000a5c:	3780      	adds	r7, #128	; 0x80
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40007000 	.word	0x40007000
 8000a6c:	40012300 	.word	0x40012300

08000a70 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b2a      	ldr	r3, [pc, #168]	; (8000b24 <gyro_disable+0xb4>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	4a29      	ldr	r2, [pc, #164]	; (8000b24 <gyro_disable+0xb4>)
 8000a80:	f043 0304 	orr.w	r3, r3, #4
 8000a84:	6313      	str	r3, [r2, #48]	; 0x30
 8000a86:	4b27      	ldr	r3, [pc, #156]	; (8000b24 <gyro_disable+0xb4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	f003 0304 	and.w	r3, r3, #4
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8000a92:	4b25      	ldr	r3, [pc, #148]	; (8000b28 <gyro_disable+0xb8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a24      	ldr	r2, [pc, #144]	; (8000b28 <gyro_disable+0xb8>)
 8000a98:	f023 030c 	bic.w	r3, r3, #12
 8000a9c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <gyro_disable+0xb8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <gyro_disable+0xb8>)
 8000aa4:	f043 0304 	orr.w	r3, r3, #4
 8000aa8:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 8000aaa:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <gyro_disable+0xb8>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	4a1e      	ldr	r2, [pc, #120]	; (8000b28 <gyro_disable+0xb8>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8000ab6:	200a      	movs	r0, #10
 8000ab8:	f002 feb0 	bl	800381c <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 8000abc:	4b1a      	ldr	r3, [pc, #104]	; (8000b28 <gyro_disable+0xb8>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <gyro_disable+0xb8>)
 8000ac2:	f043 030c 	orr.w	r3, r3, #12
 8000ac6:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000ac8:	2300      	movs	r3, #0
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <gyro_disable+0xb4>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <gyro_disable+0xb4>)
 8000ad2:	f043 0320 	orr.w	r3, r3, #32
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <gyro_disable+0xb4>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0320 	and.w	r3, r3, #32
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <gyro_disable+0xbc>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	4a10      	ldr	r2, [pc, #64]	; (8000b2c <gyro_disable+0xbc>)
 8000aea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000aee:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <gyro_disable+0xbc>)
 8000af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <gyro_disable+0xbc>)
 8000af6:	f023 030f 	bic.w	r3, r3, #15
 8000afa:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <gyro_disable+0xbc>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <gyro_disable+0xbc>)
 8000b02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000b06:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f002 fe87 	bl	800381c <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <gyro_disable+0xbc>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <gyro_disable+0xbc>)
 8000b14:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000b18:	6013      	str	r3, [r2, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40021400 	.word	0x40021400

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db12      	blt.n	8000ba4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f003 021f 	and.w	r2, r3, #31
 8000b84:	490a      	ldr	r1, [pc, #40]	; (8000bb0 <__NVIC_DisableIRQ+0x44>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	095b      	lsrs	r3, r3, #5
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b92:	3320      	adds	r3, #32
 8000b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b98:	f3bf 8f4f 	dsb	sy
}
 8000b9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b9e:	f3bf 8f6f 	isb	sy
}
 8000ba2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100

08000bb4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0c      	blt.n	8000be0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4907      	ldr	r1, [pc, #28]	; (8000bec <__NVIC_ClearPendingIRQ+0x38>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	3360      	adds	r3, #96	; 0x60
 8000bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100

08000bf0 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b20      	ldr	r3, [pc, #128]	; (8000c7c <MEAS_GPIO_analog_init+0x8c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <MEAS_GPIO_analog_init+0x8c>)
 8000c00:	f043 0320 	orr.w	r3, r3, #32
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MEAS_GPIO_analog_init+0x8c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0320 	and.w	r3, r3, #32
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 8000c12:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MEAS_GPIO_analog_init+0x90>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a1a      	ldr	r2, [pc, #104]	; (8000c80 <MEAS_GPIO_analog_init+0x90>)
 8000c18:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000c1c:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MEAS_GPIO_analog_init+0x8c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <MEAS_GPIO_analog_init+0x8c>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MEAS_GPIO_analog_init+0x8c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MEAS_GPIO_analog_init+0x94>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a11      	ldr	r2, [pc, #68]	; (8000c84 <MEAS_GPIO_analog_init+0x94>)
 8000c40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000c44:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MEAS_GPIO_analog_init+0x8c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <MEAS_GPIO_analog_init+0x8c>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MEAS_GPIO_analog_init+0x8c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MEAS_GPIO_analog_init+0x98>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <MEAS_GPIO_analog_init+0x98>)
 8000c68:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000c6c:	6013      	str	r3, [r2, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40021400 	.word	0x40021400
 8000c84:	40020800 	.word	0x40020800
 8000c88:	40020000 	.word	0x40020000

08000c8c <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <DAC_reset+0x28>)
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <DAC_reset+0x28>)
 8000c96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c9a:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <DAC_reset+0x28>)
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <DAC_reset+0x28>)
 8000ca2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000ca6:	6213      	str	r3, [r2, #32]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <DAC_init+0x3c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <DAC_init+0x3c>)
 8000cc8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <DAC_init+0x3c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <DAC_init+0x40>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <DAC_init+0x40>)
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40007400 	.word	0x40007400

08000cfc <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <DAC_increment+0x30>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3314      	adds	r3, #20
 8000d06:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <DAC_increment+0x30>)
 8000d08:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <DAC_increment+0x30>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d12:	d302      	bcc.n	8000d1a <DAC_increment+0x1e>
 8000d14:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <DAC_increment+0x30>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 8000d1a:	4a05      	ldr	r2, [pc, #20]	; (8000d30 <DAC_increment+0x34>)
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <DAC_increment+0x30>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6153      	str	r3, [r2, #20]
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	200002c8 	.word	0x200002c8
 8000d30:	40007400 	.word	0x40007400

08000d34 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <ADC_reset+0x38>)
 8000d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3c:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <ADC_reset+0x38>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <ADC_reset+0x38>)
 8000d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d48:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <ADC_reset+0x38>)
 8000d4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d4e:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8000d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d5a:	f023 0301 	bic.w	r3, r3, #1
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40023800 	.word	0x40023800

08000d70 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8000d76:	2300      	movs	r3, #0
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <MEAS_timer_init+0x68>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a16      	ldr	r2, [pc, #88]	; (8000dd8 <MEAS_timer_init+0x68>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <MEAS_timer_init+0x68>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 8000d92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d96:	f243 62af 	movw	r2, #13999	; 0x36af
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8000d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da0:	2209      	movs	r2, #9
 8000da2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 8000da4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dae:	f043 0320 	orr.w	r3, r3, #32
 8000db2:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 8000db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 8000dc4:	201c      	movs	r0, #28
 8000dc6:	f7ff fef5 	bl	8000bb4 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8000dca:	201c      	movs	r0, #28
 8000dcc:	f7ff feb0 	bl	8000b30 <__NVIC_EnableIRQ>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40023800 	.word	0x40023800

08000ddc <ADC1_IN13_ADC2_IN11_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN11 = GPIO PC1
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_init(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// Only 1 input is converted
 8000de2:	4b4a      	ldr	r3, [pc, #296]	; (8000f0c <ADC1_IN13_ADC2_IN11_dual_init+0x130>)
 8000de4:	2202      	movs	r2, #2
 8000de6:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4b48      	ldr	r3, [pc, #288]	; (8000f10 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	4a47      	ldr	r2, [pc, #284]	; (8000f10 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df6:	6453      	str	r3, [r2, #68]	; 0x44
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b41      	ldr	r3, [pc, #260]	; (8000f10 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	4a40      	ldr	r2, [pc, #256]	; (8000f10 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e12:	6453      	str	r3, [r2, #68]	; 0x44
 8000e14:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 8000e20:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	4a3b      	ldr	r2, [pc, #236]	; (8000f14 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8000e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e2a:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	4a38      	ldr	r2, [pc, #224]	; (8000f14 <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 8000e32:	f043 0306 	orr.w	r3, r3, #6
 8000e36:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8000e38:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	4a36      	ldr	r2, [pc, #216]	; (8000f18 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000e3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e42:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8000e44:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	4a33      	ldr	r2, [pc, #204]	; (8000f18 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000e4a:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000e4e:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 8000e50:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e54:	4a30      	ldr	r2, [pc, #192]	; (8000f18 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 8000e56:	f043 030d 	orr.w	r3, r3, #13
 8000e5a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= (11UL << ADC_SQR3_SQ1_Pos);	// Input 11 = first conversion
 8000e5c:	4b2f      	ldr	r3, [pc, #188]	; (8000f1c <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 8000e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e60:	4a2e      	ldr	r2, [pc, #184]	; (8000f1c <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 8000e62:	f043 030b 	orr.w	r3, r3, #11
 8000e66:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000e72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a25      	ldr	r2, [pc, #148]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000e8a:	f023 0301 	bic.w	r3, r3, #1
 8000e8e:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8000e90:	bf00      	nop
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d1f9      	bne.n	8000e92 <ADC1_IN13_ADC2_IN11_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 8000ea0:	68db      	ldr	r3, [r3, #12]
 8000ea2:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
 8000ea8:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000eac:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a17      	ldr	r2, [pc, #92]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000ed0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ed4:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ee0:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000ee8:	f043 0310 	orr.w	r3, r3, #16
 8000eec:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000ef0:	2240      	movs	r2, #64	; 0x40
 8000ef2:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000ef6:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <ADC1_IN13_ADC2_IN11_dual_init+0x14c>)
 8000ef8:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <ADC1_IN13_ADC2_IN11_dual_init+0x150>)
 8000efe:	60da      	str	r2, [r3, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40012300 	.word	0x40012300
 8000f18:	40012000 	.word	0x40012000
 8000f1c:	40012100 	.word	0x40012100
 8000f20:	40026470 	.word	0x40026470
 8000f24:	40026400 	.word	0x40026400
 8000f28:	40012308 	.word	0x40012308
 8000f2c:	200001c8 	.word	0x200001c8

08000f30 <ADC1_IN13_ADC2_IN11_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_start(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 8000f34:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <ADC1_IN13_ADC2_IN11_dual_start+0x48>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <ADC1_IN13_ADC2_IN11_dual_start+0x48>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 8000f40:	203c      	movs	r0, #60	; 0x3c
 8000f42:	f7ff fe37 	bl	8000bb4 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 8000f46:	203c      	movs	r0, #60	; 0x3c
 8000f48:	f7ff fdf2 	bl	8000b30 <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <ADC1_IN13_ADC2_IN11_dual_start+0x4c>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <ADC1_IN13_ADC2_IN11_dual_start+0x4c>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <ADC1_IN13_ADC2_IN11_dual_start+0x50>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <ADC1_IN13_ADC2_IN11_dual_start+0x50>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8000f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f6e:	f043 0301 	orr.w	r3, r3, #1
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40026470 	.word	0x40026470
 8000f7c:	40012000 	.word	0x40012000
 8000f80:	40012100 	.word	0x40012100

08000f84 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8000f88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f8c:	691b      	ldr	r3, [r3, #16]
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	f023 0301 	bic.w	r3, r3, #1
 8000f96:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8000f98:	4b03      	ldr	r3, [pc, #12]	; (8000fa8 <TIM2_IRQHandler+0x24>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <TIM2_IRQHandler+0x20>
		DAC_increment();
 8000fa0:	f7ff feac 	bl	8000cfc <DAC_increment>
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200001c1 	.word	0x200001c1

08000fac <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8000fb0:	4b17      	ldr	r3, [pc, #92]	; (8001010 <ADC_IRQHandler+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d026      	beq.n	800100a <ADC_IRQHandler+0x5e>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <ADC_IRQHandler+0x64>)
 8000fbe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <ADC_IRQHandler+0x68>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	4913      	ldr	r1, [pc, #76]	; (8001014 <ADC_IRQHandler+0x68>)
 8000fc8:	600a      	str	r2, [r1, #0]
 8000fca:	ee07 0a90 	vmov	s15, r0
 8000fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fd2:	4a11      	ldr	r2, [pc, #68]	; (8001018 <ADC_IRQHandler+0x6c>)
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <ADC_IRQHandler+0x68>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b3f      	cmp	r3, #63	; 0x3f
 8000fe2:	d912      	bls.n	800100a <ADC_IRQHandler+0x5e>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8000fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fee:	f023 0301 	bic.w	r3, r3, #1
 8000ff2:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <ADC_IRQHandler+0x64>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	4a05      	ldr	r2, [pc, #20]	; (8001010 <ADC_IRQHandler+0x64>)
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001000:	f7ff fe98 	bl	8000d34 <ADC_reset>
			MEAS_data_ready = true;
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <ADC_IRQHandler+0x70>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
		}

	}
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40012200 	.word	0x40012200
 8001014:	200001c4 	.word	0x200001c4
 8001018:	200001c8 	.word	0x200001c8
 800101c:	200001c0 	.word	0x200001c0

08001020 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8001026:	4b37      	ldr	r3, [pc, #220]	; (8001104 <DMA2_Stream4_IRQHandler+0xe4>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0320 	and.w	r3, r3, #32
 800102e:	2b00      	cmp	r3, #0
 8001030:	d063      	beq.n	80010fa <DMA2_Stream4_IRQHandler+0xda>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8001032:	203c      	movs	r0, #60	; 0x3c
 8001034:	f7ff fd9a 	bl	8000b6c <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8001038:	203c      	movs	r0, #60	; 0x3c
 800103a:	f7ff fdbb 	bl	8000bb4 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <DMA2_Stream4_IRQHandler+0xe8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a31      	ldr	r2, [pc, #196]	; (8001108 <DMA2_Stream4_IRQHandler+0xe8>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 800104a:	bf00      	nop
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <DMA2_Stream4_IRQHandler+0xe8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1f9      	bne.n	800104c <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8001058:	4b2a      	ldr	r3, [pc, #168]	; (8001104 <DMA2_Stream4_IRQHandler+0xe4>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4a29      	ldr	r2, [pc, #164]	; (8001104 <DMA2_Stream4_IRQHandler+0xe4>)
 800105e:	f043 0320 	orr.w	r3, r3, #32
 8001062:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001064:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800106e:	f023 0301 	bic.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <DMA2_Stream4_IRQHandler+0xec>)
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	4a24      	ldr	r2, [pc, #144]	; (800110c <DMA2_Stream4_IRQHandler+0xec>)
 800107a:	f023 0301 	bic.w	r3, r3, #1
 800107e:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <DMA2_Stream4_IRQHandler+0xf0>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4a22      	ldr	r2, [pc, #136]	; (8001110 <DMA2_Stream4_IRQHandler+0xf0>)
 8001086:	f023 0301 	bic.w	r3, r3, #1
 800108a:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 800108c:	4b21      	ldr	r3, [pc, #132]	; (8001114 <DMA2_Stream4_IRQHandler+0xf4>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a20      	ldr	r2, [pc, #128]	; (8001114 <DMA2_Stream4_IRQHandler+0xf4>)
 8001092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001096:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--) {
 8001098:	233f      	movs	r3, #63	; 0x3f
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	e025      	b.n	80010ea <DMA2_Stream4_IRQHandler+0xca>
		    ADC_samples[2*i+1] = (*(int32_t*)&ADC_samples[i] >> 16);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <DMA2_Stream4_IRQHandler+0xf8>)
 80010a4:	4413      	add	r3, r2
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	141a      	asrs	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	3301      	adds	r3, #1
 80010b0:	ee07 2a90 	vmov	s15, r2
 80010b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <DMA2_Stream4_IRQHandler+0xf8>)
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	edc3 7a00 	vstr	s15, [r3]
		    ADC_samples[2*i]   = (*(int32_t*)&ADC_samples[i] & 0xffff);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4a14      	ldr	r2, [pc, #80]	; (8001118 <DMA2_Stream4_IRQHandler+0xf8>)
 80010c8:	4413      	add	r3, r2
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	ee07 2a90 	vmov	s15, r2
 80010d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <DMA2_Stream4_IRQHandler+0xf8>)
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	edc3 7a00 	vstr	s15, [r3]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	dad6      	bge.n	800109e <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 80010f0:	f7ff fe20 	bl	8000d34 <ADC_reset>
		MEAS_data_ready = true;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <DMA2_Stream4_IRQHandler+0xfc>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
	}
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40026400 	.word	0x40026400
 8001108:	40026470 	.word	0x40026470
 800110c:	40012000 	.word	0x40012000
 8001110:	40012100 	.word	0x40012100
 8001114:	40012300 	.word	0x40012300
 8001118:	200001c8 	.word	0x200001c8
 800111c:	200001c0 	.word	0x200001c0

08001120 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8001126:	4852      	ldr	r0, [pc, #328]	; (8001270 <MENU_draw+0x150>)
 8001128:	f001 fc52 	bl	80029d0 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 800112c:	f001 fb9e 	bl	800286c <BSP_LCD_GetYSize>
 8001130:	4603      	mov	r3, r0
 8001132:	3b28      	subs	r3, #40	; 0x28
 8001134:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8001136:	2302      	movs	r3, #2
 8001138:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 800113a:	f001 fb8b 	bl	8002854 <BSP_LCD_GetXSize>
 800113e:	4603      	mov	r3, r0
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <MENU_draw+0x154>)
 8001142:	fba2 2303 	umull	r2, r3, r2, r3
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 800114a:	2328      	movs	r3, #40	; 0x28
 800114c:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
 8001152:	e084      	b.n	800125e <MENU_draw+0x13e>
		x = i*w;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	fb02 f303 	mul.w	r3, r2, r3
 800115c:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 800115e:	4946      	ldr	r1, [pc, #280]	; (8001278 <MENU_draw+0x158>)
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	4613      	mov	r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	440b      	add	r3, r1
 800116c:	3324      	adds	r3, #36	; 0x24
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fbfb 	bl	800296c <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	b29a      	uxth	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	b29b      	uxth	r3, r3
 800117e:	4413      	add	r3, r2
 8001180:	b298      	uxth	r0, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	b29a      	uxth	r2, r3
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	b29b      	uxth	r3, r3
 800118a:	4413      	add	r3, r2
 800118c:	b299      	uxth	r1, r3
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	b29a      	uxth	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	b29b      	uxth	r3, r3
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	b29b      	uxth	r3, r3
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b29c      	uxth	r4, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	4622      	mov	r2, r4
 80011b0:	f001 fd52 	bl	8002c58 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 80011b4:	4930      	ldr	r1, [pc, #192]	; (8001278 <MENU_draw+0x158>)
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	440b      	add	r3, r1
 80011c2:	3324      	adds	r3, #36	; 0x24
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fbe8 	bl	800299c <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 80011cc:	492a      	ldr	r1, [pc, #168]	; (8001278 <MENU_draw+0x158>)
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	440b      	add	r3, r1
 80011da:	3320      	adds	r3, #32
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fbc4 	bl	800296c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	0052      	lsls	r2, r2, #1
 80011ec:	4413      	add	r3, r2
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4413      	add	r3, r2
 80011f6:	b298      	uxth	r0, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	0052      	lsls	r2, r2, #1
 8001200:	4413      	add	r3, r2
 8001202:	b29a      	uxth	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	b29b      	uxth	r3, r3
 8001208:	4413      	add	r3, r2
 800120a:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	4613      	mov	r3, r2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4a18      	ldr	r2, [pc, #96]	; (8001278 <MENU_draw+0x158>)
 8001218:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 800121a:	2303      	movs	r3, #3
 800121c:	f001 fc5e 	bl	8002adc <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	b29b      	uxth	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	0052      	lsls	r2, r2, #1
 8001228:	4413      	add	r3, r2
 800122a:	b29a      	uxth	r2, r3
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b29b      	uxth	r3, r3
 8001230:	4413      	add	r3, r2
 8001232:	b298      	uxth	r0, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	085b      	lsrs	r3, r3, #1
 8001238:	b29a      	uxth	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4413      	add	r3, r2
 8001240:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	00db      	lsls	r3, r3, #3
 800124c:	3310      	adds	r3, #16
 800124e:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <MENU_draw+0x158>)
 8001250:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8001252:	2303      	movs	r3, #3
 8001254:	f001 fc42 	bl	8002adc <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2b05      	cmp	r3, #5
 8001262:	f67f af77 	bls.w	8001154 <MENU_draw+0x34>
	}
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	371c      	adds	r7, #28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	20000180 	.word	0x20000180
 8001274:	aaaaaaab 	.word	0xaaaaaaab
 8001278:	20000008 	.word	0x20000008

0800127c <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001284:	f001 fb8a 	bl	800299c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001288:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800128c:	f001 fb6e 	bl	800296c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8001290:	4818      	ldr	r0, [pc, #96]	; (80012f4 <MENU_hint+0x78>)
 8001292:	f001 fb9d 	bl	80029d0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"DEMO-CODE", LEFT_MODE);
 8001296:	2303      	movs	r3, #3
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <MENU_hint+0x7c>)
 800129a:	210a      	movs	r1, #10
 800129c:	2005      	movs	r0, #5
 800129e:	f001 fc1d 	bl	8002adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 80012a2:	4816      	ldr	r0, [pc, #88]	; (80012fc <MENU_hint+0x80>)
 80012a4:	f001 fb94 	bl	80029d0 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item", LEFT_MODE);
 80012a8:	2303      	movs	r3, #3
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <MENU_hint+0x84>)
 80012ac:	213c      	movs	r1, #60	; 0x3c
 80012ae:	2005      	movs	r0, #5
 80012b0:	f001 fc14 	bl	8002adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start an ADC demo", LEFT_MODE);
 80012b4:	2303      	movs	r3, #3
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <MENU_hint+0x88>)
 80012b8:	2150      	movs	r1, #80	; 0x50
 80012ba:	2005      	movs	r0, #5
 80012bc:	f001 fc0e 	bl	8002adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 80012c0:	2303      	movs	r3, #3
 80012c2:	4a11      	ldr	r2, [pc, #68]	; (8001308 <MENU_hint+0x8c>)
 80012c4:	216e      	movs	r1, #110	; 0x6e
 80012c6:	2005      	movs	r0, #5
 80012c8:	f001 fc08 	bl	8002adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 80012cc:	2303      	movs	r3, #3
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <MENU_hint+0x90>)
 80012d0:	2182      	movs	r1, #130	; 0x82
 80012d2:	2005      	movs	r0, #5
 80012d4:	f001 fc02 	bl	8002adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
 80012d8:	2303      	movs	r3, #3
 80012da:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <MENU_hint+0x94>)
 80012dc:	21a0      	movs	r1, #160	; 0xa0
 80012de:	2005      	movs	r0, #5
 80012e0:	f001 fbfc 	bl	8002adc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
 80012e4:	2303      	movs	r3, #3
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <MENU_hint+0x98>)
 80012e8:	21a0      	movs	r1, #160	; 0xa0
 80012ea:	2005      	movs	r0, #5
 80012ec:	f001 fbf6 	bl	8002adc <BSP_LCD_DisplayStringAt>
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000170 	.word	0x20000170
 80012f8:	080087c0 	.word	0x080087c0
 80012fc:	20000178 	.word	0x20000178
 8001300:	080087cc 	.word	0x080087cc
 8001304:	080087e0 	.word	0x080087e0
 8001308:	080087f8 	.word	0x080087f8
 800130c:	0800880c 	.word	0x0800880c
 8001310:	08008824 	.word	0x08008824
 8001314:	08008838 	.word	0x08008838

08001318 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MENU_get_transition+0x20>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <MENU_get_transition+0x20>)
 8001326:	2206      	movs	r2, #6
 8001328:	701a      	strb	r2, [r3, #0]
	return item;
 800132a:	79fb      	ldrb	r3, [r7, #7]
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20000004 	.word	0x20000004

0800133c <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 800133c:	b598      	push	{r3, r4, r7, lr}
 800133e:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8001340:	4830      	ldr	r0, [pc, #192]	; (8001404 <MENU_check_transition+0xc8>)
 8001342:	f002 f933 	bl	80035ac <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001346:	f001 fa91 	bl	800286c <BSP_LCD_GetYSize>
 800134a:	4603      	mov	r3, r0
 800134c:	b29a      	uxth	r2, r3
 800134e:	4b2d      	ldr	r3, [pc, #180]	; (8001404 <MENU_check_transition+0xc8>)
 8001350:	889b      	ldrh	r3, [r3, #4]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	b29a      	uxth	r2, r3
 8001356:	4b2b      	ldr	r3, [pc, #172]	; (8001404 <MENU_check_transition+0xc8>)
 8001358:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 800135a:	f001 fa7b 	bl	8002854 <BSP_LCD_GetXSize>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b28      	ldr	r3, [pc, #160]	; (8001404 <MENU_check_transition+0xc8>)
 8001364:	885b      	ldrh	r3, [r3, #2]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MENU_check_transition+0xc8>)
 800136c:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 800136e:	f001 fa7d 	bl	800286c <BSP_LCD_GetYSize>
 8001372:	4603      	mov	r3, r0
 8001374:	b29a      	uxth	r2, r3
 8001376:	4b23      	ldr	r3, [pc, #140]	; (8001404 <MENU_check_transition+0xc8>)
 8001378:	889b      	ldrh	r3, [r3, #4]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	b29a      	uxth	r2, r3
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MENU_check_transition+0xc8>)
 8001380:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8001382:	4b20      	ldr	r3, [pc, #128]	; (8001404 <MENU_check_transition+0xc8>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d039      	beq.n	80013fe <MENU_check_transition+0xc2>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 800138a:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MENU_check_transition+0xcc>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b06      	cmp	r3, #6
 8001390:	d135      	bne.n	80013fe <MENU_check_transition+0xc2>
			item_old = item_new;		// Store old item
 8001392:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MENU_check_transition+0xd0>)
 8001394:	781a      	ldrb	r2, [r3, #0]
 8001396:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <MENU_check_transition+0xd4>)
 8001398:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 800139a:	f001 fa67 	bl	800286c <BSP_LCD_GetYSize>
 800139e:	4603      	mov	r3, r0
 80013a0:	3b28      	subs	r3, #40	; 0x28
 80013a2:	4a18      	ldr	r2, [pc, #96]	; (8001404 <MENU_check_transition+0xc8>)
 80013a4:	8892      	ldrh	r2, [r2, #4]
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d229      	bcs.n	80013fe <MENU_check_transition+0xc2>
 80013aa:	f001 fa5f 	bl	800286c <BSP_LCD_GetYSize>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a14      	ldr	r2, [pc, #80]	; (8001404 <MENU_check_transition+0xc8>)
 80013b2:	8892      	ldrh	r2, [r2, #4]
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d922      	bls.n	80013fe <MENU_check_transition+0xc2>
				item_new = TS_State.X	// Calculate new item
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MENU_check_transition+0xc8>)
 80013ba:	885b      	ldrh	r3, [r3, #2]
 80013bc:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 80013be:	f001 fa49 	bl	8002854 <BSP_LCD_GetXSize>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MENU_check_transition+0xd8>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	089b      	lsrs	r3, r3, #2
 80013cc:	fbb4 f3f3 	udiv	r3, r4, r3
 80013d0:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MENU_check_transition+0xd0>)
 80013d4:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <MENU_check_transition+0xd0>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b05      	cmp	r3, #5
 80013dc:	d902      	bls.n	80013e4 <MENU_check_transition+0xa8>
					item_new = MENU_NONE;	// Out of bounds
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MENU_check_transition+0xd0>)
 80013e0:	2206      	movs	r2, #6
 80013e2:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MENU_check_transition+0xd0>)
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	4b09      	ldr	r3, [pc, #36]	; (8001410 <MENU_check_transition+0xd4>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d106      	bne.n	80013fe <MENU_check_transition+0xc2>
					item_new = MENU_NONE;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MENU_check_transition+0xd0>)
 80013f2:	2206      	movs	r2, #6
 80013f4:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <MENU_check_transition+0xd4>)
 80013f8:	781a      	ldrb	r2, [r3, #0]
 80013fa:	4b03      	ldr	r3, [pc, #12]	; (8001408 <MENU_check_transition+0xcc>)
 80013fc:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 80013fe:	bf00      	nop
 8001400:	bd98      	pop	{r3, r4, r7, pc}
 8001402:	bf00      	nop
 8001404:	200002cc 	.word	0x200002cc
 8001408:	20000004 	.word	0x20000004
 800140c:	200000f8 	.word	0x200000f8
 8001410:	200000f9 	.word	0x200000f9
 8001414:	aaaaaaab 	.word	0xaaaaaaab

08001418 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <EXTI15_10_IRQHandler+0x40>)
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d014      	beq.n	8001452 <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <EXTI15_10_IRQHandler+0x40>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <EXTI15_10_IRQHandler+0x40>)
 800142e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001432:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8001434:	f002 f8ae 	bl	8003594 <BSP_TS_ITGetStatus>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 800143e:	f002 f967 	bl	8003710 <BSP_TS_ITClear>
			MENU_check_transition();
 8001442:	f7ff ff7b 	bl	800133c <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <EXTI15_10_IRQHandler+0x40>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	4a03      	ldr	r2, [pc, #12]	; (8001458 <EXTI15_10_IRQHandler+0x40>)
 800144c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001450:	6153      	str	r3, [r2, #20]
	}
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40013c00 	.word	0x40013c00

0800145c <__NVIC_EnableIRQ>:
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_ClearPendingIRQ>:
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0c      	blt.n	80014c4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <__NVIC_ClearPendingIRQ+0x38>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	3360      	adds	r3, #96	; 0x60
 80014c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <PB_init+0x38>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <PB_init+0x38>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <PB_init+0x38>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <PB_init+0x3c>)
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <PB_init+0x3c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6013      	str	r3, [r2, #0]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	40020000 	.word	0x40020000

08001514 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 800151a:	2300      	movs	r3, #0
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <PB_enableIRQ+0x58>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	4a12      	ldr	r2, [pc, #72]	; (800156c <PB_enableIRQ+0x58>)
 8001524:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001528:	6453      	str	r3, [r2, #68]	; 0x44
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <PB_enableIRQ+0x58>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <PB_enableIRQ+0x5c>)
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <PB_enableIRQ+0x5c>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 800153e:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <PB_enableIRQ+0x60>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	4a0c      	ldr	r2, [pc, #48]	; (8001574 <PB_enableIRQ+0x60>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <PB_enableIRQ+0x60>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <PB_enableIRQ+0x60>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8001556:	2006      	movs	r0, #6
 8001558:	f7ff ff9e 	bl	8001498 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 800155c:	2006      	movs	r0, #6
 800155e:	f7ff ff7d 	bl	800145c <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40013800 	.word	0x40013800
 8001574:	40013c00 	.word	0x40013c00

08001578 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <PB_pressed+0x20>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <PB_pressed+0x20>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
	return pressed;
 800158a:	79fb      	ldrb	r3, [r7, #7]
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	200002d4 	.word	0x200002d4

0800159c <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 80015a0:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <EXTI0_IRQHandler+0x2c>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <EXTI0_IRQHandler+0x2c>)
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	4a05      	ldr	r2, [pc, #20]	; (80015c8 <EXTI0_IRQHandler+0x2c>)
 80015b2:	f043 0301 	orr.w	r3, r3, #1
 80015b6:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <EXTI0_IRQHandler+0x30>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
	}
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40013c00 	.word	0x40013c00
 80015cc:	200002d4 	.word	0x200002d4

080015d0 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001624:	f002 f8da 	bl	80037dc <HAL_IncTick>
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b16      	ldr	r3, [pc, #88]	; (800168c <SystemInit+0x60>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <SystemInit+0x60>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <SystemInit+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <SystemInit+0x64>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <SystemInit+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <SystemInit+0x64>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <SystemInit+0x64>)
 8001658:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800165c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <SystemInit+0x64>)
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <SystemInit+0x68>)
 8001666:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <SystemInit+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a08      	ldr	r2, [pc, #32]	; (8001690 <SystemInit+0x64>)
 800166e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001672:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SystemInit+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800167a:	4b04      	ldr	r3, [pc, #16]	; (800168c <SystemInit+0x60>)
 800167c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001680:	609a      	str	r2, [r3, #8]
#endif
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	40023800 	.word	0x40023800
 8001694:	24003010 	.word	0x24003010

08001698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800169c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800169e:	e003      	b.n	80016a8 <LoopCopyDataInit>

080016a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016a0:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016a6:	3104      	adds	r1, #4

080016a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016a8:	480b      	ldr	r0, [pc, #44]	; (80016d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016b0:	d3f6      	bcc.n	80016a0 <CopyDataInit>
  ldr  r2, =_sbss
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016b4:	e002      	b.n	80016bc <LoopFillZerobss>

080016b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016b8:	f842 3b04 	str.w	r3, [r2], #4

080016bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016c0:	d3f9      	bcc.n	80016b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016c2:	f7ff ffb3 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f007 f843 	bl	8008750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ca:	f7ff f843 	bl	8000754 <main>
  bx  lr    
 80016ce:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016d0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80016d4:	08020874 	.word	0x08020874
  ldr  r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016dc:	20000194 	.word	0x20000194
  ldr  r2, =_sbss
 80016e0:	20000194 	.word	0x20000194
  ldr  r3, = _ebss
 80016e4:	2000059c 	.word	0x2000059c

080016e8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <CAN1_RX0_IRQHandler>

080016ea <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80016ee:	f000 feed 	bl	80024cc <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80016f2:	20ca      	movs	r0, #202	; 0xca
 80016f4:	f000 f95d 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80016f8:	20c3      	movs	r0, #195	; 0xc3
 80016fa:	f000 f967 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80016fe:	2008      	movs	r0, #8
 8001700:	f000 f964 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001704:	2050      	movs	r0, #80	; 0x50
 8001706:	f000 f961 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800170a:	20cf      	movs	r0, #207	; 0xcf
 800170c:	f000 f951 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001710:	2000      	movs	r0, #0
 8001712:	f000 f95b 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001716:	20c1      	movs	r0, #193	; 0xc1
 8001718:	f000 f958 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800171c:	2030      	movs	r0, #48	; 0x30
 800171e:	f000 f955 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001722:	20ed      	movs	r0, #237	; 0xed
 8001724:	f000 f945 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001728:	2064      	movs	r0, #100	; 0x64
 800172a:	f000 f94f 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800172e:	2003      	movs	r0, #3
 8001730:	f000 f94c 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001734:	2012      	movs	r0, #18
 8001736:	f000 f949 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800173a:	2081      	movs	r0, #129	; 0x81
 800173c:	f000 f946 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001740:	20e8      	movs	r0, #232	; 0xe8
 8001742:	f000 f936 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001746:	2085      	movs	r0, #133	; 0x85
 8001748:	f000 f940 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800174c:	2000      	movs	r0, #0
 800174e:	f000 f93d 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001752:	2078      	movs	r0, #120	; 0x78
 8001754:	f000 f93a 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001758:	20cb      	movs	r0, #203	; 0xcb
 800175a:	f000 f92a 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800175e:	2039      	movs	r0, #57	; 0x39
 8001760:	f000 f934 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001764:	202c      	movs	r0, #44	; 0x2c
 8001766:	f000 f931 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f92e 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001770:	2034      	movs	r0, #52	; 0x34
 8001772:	f000 f92b 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001776:	2002      	movs	r0, #2
 8001778:	f000 f928 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800177c:	20f7      	movs	r0, #247	; 0xf7
 800177e:	f000 f918 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001782:	2020      	movs	r0, #32
 8001784:	f000 f922 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001788:	20ea      	movs	r0, #234	; 0xea
 800178a:	f000 f912 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800178e:	2000      	movs	r0, #0
 8001790:	f000 f91c 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001794:	2000      	movs	r0, #0
 8001796:	f000 f919 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800179a:	20b1      	movs	r0, #177	; 0xb1
 800179c:	f000 f909 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f000 f913 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80017a6:	201b      	movs	r0, #27
 80017a8:	f000 f910 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80017ac:	20b6      	movs	r0, #182	; 0xb6
 80017ae:	f000 f900 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80017b2:	200a      	movs	r0, #10
 80017b4:	f000 f90a 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80017b8:	20a2      	movs	r0, #162	; 0xa2
 80017ba:	f000 f907 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80017be:	20c0      	movs	r0, #192	; 0xc0
 80017c0:	f000 f8f7 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80017c4:	2010      	movs	r0, #16
 80017c6:	f000 f901 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80017ca:	20c1      	movs	r0, #193	; 0xc1
 80017cc:	f000 f8f1 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80017d0:	2010      	movs	r0, #16
 80017d2:	f000 f8fb 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80017d6:	20c5      	movs	r0, #197	; 0xc5
 80017d8:	f000 f8eb 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80017dc:	2045      	movs	r0, #69	; 0x45
 80017de:	f000 f8f5 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80017e2:	2015      	movs	r0, #21
 80017e4:	f000 f8f2 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80017e8:	20c7      	movs	r0, #199	; 0xc7
 80017ea:	f000 f8e2 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80017ee:	2090      	movs	r0, #144	; 0x90
 80017f0:	f000 f8ec 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80017f4:	2036      	movs	r0, #54	; 0x36
 80017f6:	f000 f8dc 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80017fa:	20c8      	movs	r0, #200	; 0xc8
 80017fc:	f000 f8e6 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001800:	20f2      	movs	r0, #242	; 0xf2
 8001802:	f000 f8d6 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f8e0 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800180c:	20b0      	movs	r0, #176	; 0xb0
 800180e:	f000 f8d0 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001812:	20c2      	movs	r0, #194	; 0xc2
 8001814:	f000 f8da 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001818:	20b6      	movs	r0, #182	; 0xb6
 800181a:	f000 f8ca 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800181e:	200a      	movs	r0, #10
 8001820:	f000 f8d4 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001824:	20a7      	movs	r0, #167	; 0xa7
 8001826:	f000 f8d1 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800182a:	2027      	movs	r0, #39	; 0x27
 800182c:	f000 f8ce 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001830:	2004      	movs	r0, #4
 8001832:	f000 f8cb 	bl	80019cc <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001836:	202a      	movs	r0, #42	; 0x2a
 8001838:	f000 f8bb 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800183c:	2000      	movs	r0, #0
 800183e:	f000 f8c5 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f8c2 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001848:	2000      	movs	r0, #0
 800184a:	f000 f8bf 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800184e:	20ef      	movs	r0, #239	; 0xef
 8001850:	f000 f8bc 	bl	80019cc <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001854:	202b      	movs	r0, #43	; 0x2b
 8001856:	f000 f8ac 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f8b6 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001860:	2000      	movs	r0, #0
 8001862:	f000 f8b3 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001866:	2001      	movs	r0, #1
 8001868:	f000 f8b0 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 800186c:	203f      	movs	r0, #63	; 0x3f
 800186e:	f000 f8ad 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001872:	20f6      	movs	r0, #246	; 0xf6
 8001874:	f000 f89d 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001878:	2001      	movs	r0, #1
 800187a:	f000 f8a7 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800187e:	2000      	movs	r0, #0
 8001880:	f000 f8a4 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001884:	2006      	movs	r0, #6
 8001886:	f000 f8a1 	bl	80019cc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800188a:	202c      	movs	r0, #44	; 0x2c
 800188c:	f000 f891 	bl	80019b2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001890:	20c8      	movs	r0, #200	; 0xc8
 8001892:	f000 ff09 	bl	80026a8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001896:	2026      	movs	r0, #38	; 0x26
 8001898:	f000 f88b 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800189c:	2001      	movs	r0, #1
 800189e:	f000 f895 	bl	80019cc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80018a2:	20e0      	movs	r0, #224	; 0xe0
 80018a4:	f000 f885 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80018a8:	200f      	movs	r0, #15
 80018aa:	f000 f88f 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80018ae:	2029      	movs	r0, #41	; 0x29
 80018b0:	f000 f88c 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80018b4:	2024      	movs	r0, #36	; 0x24
 80018b6:	f000 f889 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80018ba:	200c      	movs	r0, #12
 80018bc:	f000 f886 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80018c0:	200e      	movs	r0, #14
 80018c2:	f000 f883 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80018c6:	2009      	movs	r0, #9
 80018c8:	f000 f880 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80018cc:	204e      	movs	r0, #78	; 0x4e
 80018ce:	f000 f87d 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80018d2:	2078      	movs	r0, #120	; 0x78
 80018d4:	f000 f87a 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80018d8:	203c      	movs	r0, #60	; 0x3c
 80018da:	f000 f877 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80018de:	2009      	movs	r0, #9
 80018e0:	f000 f874 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80018e4:	2013      	movs	r0, #19
 80018e6:	f000 f871 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80018ea:	2005      	movs	r0, #5
 80018ec:	f000 f86e 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80018f0:	2017      	movs	r0, #23
 80018f2:	f000 f86b 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80018f6:	2011      	movs	r0, #17
 80018f8:	f000 f868 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018fc:	2000      	movs	r0, #0
 80018fe:	f000 f865 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001902:	20e1      	movs	r0, #225	; 0xe1
 8001904:	f000 f855 	bl	80019b2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001908:	2000      	movs	r0, #0
 800190a:	f000 f85f 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800190e:	2016      	movs	r0, #22
 8001910:	f000 f85c 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001914:	201b      	movs	r0, #27
 8001916:	f000 f859 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800191a:	2004      	movs	r0, #4
 800191c:	f000 f856 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001920:	2011      	movs	r0, #17
 8001922:	f000 f853 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001926:	2007      	movs	r0, #7
 8001928:	f000 f850 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800192c:	2031      	movs	r0, #49	; 0x31
 800192e:	f000 f84d 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001932:	2033      	movs	r0, #51	; 0x33
 8001934:	f000 f84a 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001938:	2042      	movs	r0, #66	; 0x42
 800193a:	f000 f847 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800193e:	2005      	movs	r0, #5
 8001940:	f000 f844 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001944:	200c      	movs	r0, #12
 8001946:	f000 f841 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800194a:	200a      	movs	r0, #10
 800194c:	f000 f83e 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001950:	2028      	movs	r0, #40	; 0x28
 8001952:	f000 f83b 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001956:	202f      	movs	r0, #47	; 0x2f
 8001958:	f000 f838 	bl	80019cc <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800195c:	200f      	movs	r0, #15
 800195e:	f000 f835 	bl	80019cc <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001962:	2011      	movs	r0, #17
 8001964:	f000 f825 	bl	80019b2 <ili9341_WriteReg>
  LCD_Delay(200);
 8001968:	20c8      	movs	r0, #200	; 0xc8
 800196a:	f000 fe9d 	bl	80026a8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800196e:	2029      	movs	r0, #41	; 0x29
 8001970:	f000 f81f 	bl	80019b2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001974:	202c      	movs	r0, #44	; 0x2c
 8001976:	f000 f81c 	bl	80019b2 <ili9341_WriteReg>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}

0800197e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001982:	f000 fda3 	bl	80024cc <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001986:	2103      	movs	r1, #3
 8001988:	20d3      	movs	r0, #211	; 0xd3
 800198a:	f000 f82c 	bl	80019e6 <ili9341_ReadData>
 800198e:	4603      	mov	r3, r0
 8001990:	b29b      	uxth	r3, r3
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}

08001996 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800199a:	2029      	movs	r0, #41	; 0x29
 800199c:	f000 f809 	bl	80019b2 <ili9341_WriteReg>
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80019a8:	2028      	movs	r0, #40	; 0x28
 80019aa:	f000 f802 	bl	80019b2 <ili9341_WriteReg>
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b082      	sub	sp, #8
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fe1e 	bl	8002600 <LCD_IO_WriteReg>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80019d6:	88fb      	ldrh	r3, [r7, #6]
 80019d8:	4618      	mov	r0, r3
 80019da:	f000 fdef 	bl	80025bc <LCD_IO_WriteData>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	460a      	mov	r2, r1
 80019f0:	80fb      	strh	r3, [r7, #6]
 80019f2:	4613      	mov	r3, r2
 80019f4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80019f6:	797a      	ldrb	r2, [r7, #5]
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fe21 	bl	8002644 <LCD_IO_ReadData>
 8001a02:	4603      	mov	r3, r0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001a10:	23f0      	movs	r3, #240	; 0xf0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001a20:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fa59 	bl	8001ef4 <stmpe811_GetInstance>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2bff      	cmp	r3, #255	; 0xff
 8001a4a:	d112      	bne.n	8001a72 <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f000 fa51 	bl	8001ef4 <stmpe811_GetInstance>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8001a56:	7bbb      	ldrb	r3, [r7, #14]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d80a      	bhi.n	8001a72 <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8001a5c:	7bbb      	ldrb	r3, [r7, #14]
 8001a5e:	88fa      	ldrh	r2, [r7, #6]
 8001a60:	b2d1      	uxtb	r1, r2
 8001a62:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <stmpe811_Init+0x4c>)
 8001a64:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8001a66:	f000 fe2a 	bl	80026be <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f000 f807 	bl	8001a80 <stmpe811_Reset>
    }
  }
}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200002d8 	.word	0x200002d8

08001a80 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2202      	movs	r2, #2
 8001a90:	2103      	movs	r1, #3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fe1f 	bl	80026d6 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8001a98:	200a      	movs	r0, #10
 8001a9a:	f000 fe59 	bl	8002750 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2103      	movs	r1, #3
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f000 fe15 	bl	80026d6 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8001aac:	2002      	movs	r0, #2
 8001aae:	f000 fe4f 	bl	8002750 <IOE_Delay>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8001aba:	b590      	push	{r4, r7, lr}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8001ac4:	f000 fdfb 	bl	80026be <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001ac8:	88fb      	ldrh	r3, [r7, #6]
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 fe14 	bl	80026fc <IOE_Read>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	021b      	lsls	r3, r3, #8
 8001ad8:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2101      	movs	r1, #1
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 fe0b 	bl	80026fc <IOE_Read>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001aea:	4323      	orrs	r3, r4
 8001aec:	b21b      	sxth	r3, r3
 8001aee:	b29b      	uxth	r3, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}

08001af8 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2109      	movs	r1, #9
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 fdf5 	bl	80026fc <IOE_Read>
 8001b12:	4603      	mov	r3, r0
 8001b14:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	2109      	movs	r1, #9
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fdd5 	bl	80026d6 <IOE_Write>
}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2109      	movs	r1, #9
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 fdd7 	bl	80026fc <IOE_Read>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	2109      	movs	r1, #9
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 fdb7 	bl	80026d6 <IOE_Write>
    
}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	460a      	mov	r2, r1
 8001b7a:	80fb      	strh	r3, [r7, #6]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	210a      	movs	r1, #10
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 fdb6 	bl	80026fc <IOE_Read>
 8001b90:	4603      	mov	r3, r0
 8001b92:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	797b      	ldrb	r3, [r7, #5]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	210a      	movs	r1, #10
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f000 fd96 	bl	80026d6 <IOE_Write>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	4603      	mov	r3, r0
 8001bba:	460a      	mov	r2, r1
 8001bbc:	80fb      	strh	r3, [r7, #6]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	210a      	movs	r1, #10
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f000 fd95 	bl	80026fc <IOE_Read>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8001bd6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	b25a      	sxtb	r2, r3
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4013      	ands	r3, r2
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	210a      	movs	r1, #10
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f000 fd70 	bl	80026d6 <IOE_Write>
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	460a      	mov	r2, r1
 8001c08:	80fb      	strh	r3, [r7, #6]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	210b      	movs	r1, #11
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fd71 	bl	80026fc <IOE_Read>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	797b      	ldrb	r3, [r7, #5]
 8001c20:	4013      	ands	r3, r2
 8001c22:	b2db      	uxtb	r3, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	460a      	mov	r2, r1
 8001c36:	80fb      	strh	r3, [r7, #6]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	797a      	ldrb	r2, [r7, #5]
 8001c42:	210b      	movs	r1, #11
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 fd46 	bl	80026d6 <IOE_Write>
}
 8001c4a:	bf00      	nop
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	4603      	mov	r3, r0
 8001c5a:	6039      	str	r1, [r7, #0]
 8001c5c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2117      	movs	r1, #23
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f000 fd47 	bl	80026fc <IOE_Read>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b25b      	sxtb	r3, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	b25a      	sxtb	r2, r3
 8001c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	b25b      	sxtb	r3, r3
 8001c82:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001c84:	88fb      	ldrh	r3, [r7, #6]
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	7bfa      	ldrb	r2, [r7, #15]
 8001c8a:	2117      	movs	r1, #23
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fd22 	bl	80026d6 <IOE_Write>
}
 8001c92:	bf00      	nop
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2104      	movs	r1, #4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fd26 	bl	80026fc <IOE_Read>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
 8001cb6:	f023 0304 	bic.w	r3, r3, #4
 8001cba:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fd06 	bl	80026d6 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	21f0      	movs	r1, #240	; 0xf0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff ffbf 	bl	8001c52 <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	f023 0303 	bic.w	r3, r3, #3
 8001cda:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f000 fcf6 	bl	80026d6 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2249      	movs	r2, #73	; 0x49
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fcef 	bl	80026d6 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f000 fd29 	bl	8002750 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2201      	movs	r2, #1
 8001d04:	2121      	movs	r1, #33	; 0x21
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fce5 	bl	80026d6 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	229a      	movs	r2, #154	; 0x9a
 8001d12:	2141      	movs	r1, #65	; 0x41
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fcde 	bl	80026d6 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2201      	movs	r2, #1
 8001d20:	214a      	movs	r1, #74	; 0x4a
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fcd7 	bl	80026d6 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	214b      	movs	r1, #75	; 0x4b
 8001d30:	4618      	mov	r0, r3
 8001d32:	f000 fcd0 	bl	80026d6 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	214b      	movs	r1, #75	; 0x4b
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f000 fcc9 	bl	80026d6 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2201      	movs	r2, #1
 8001d4a:	2156      	movs	r1, #86	; 0x56
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f000 fcc2 	bl	80026d6 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2201      	movs	r2, #1
 8001d58:	2158      	movs	r1, #88	; 0x58
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f000 fcbb 	bl	80026d6 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2201      	movs	r2, #1
 8001d66:	2140      	movs	r1, #64	; 0x40
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 fcb4 	bl	80026d6 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8001d6e:	88fb      	ldrh	r3, [r7, #6]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	22ff      	movs	r2, #255	; 0xff
 8001d74:	210b      	movs	r1, #11
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fcad 	bl	80026d6 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8001d7c:	2002      	movs	r0, #2
 8001d7e:	f000 fce7 	bl	8002750 <IOE_Delay>
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b084      	sub	sp, #16
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	2140      	movs	r1, #64	; 0x40
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fcac 	bl	80026fc <IOE_Read>
 8001da4:	4603      	mov	r3, r0
 8001da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001daa:	2b80      	cmp	r3, #128	; 0x80
 8001dac:	bf0c      	ite	eq
 8001dae:	2301      	moveq	r3, #1
 8001db0:	2300      	movne	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8001db6:	7bbb      	ldrb	r3, [r7, #14]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8001dbc:	88fb      	ldrh	r3, [r7, #6]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	214c      	movs	r1, #76	; 0x4c
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 fc9a 	bl	80026fc <IOE_Read>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d010      	beq.n	8001df0 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	e00d      	b.n	8001df0 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2201      	movs	r2, #1
 8001dda:	214b      	movs	r1, #75	; 0x4b
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fc7a 	bl	80026d6 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2200      	movs	r2, #0
 8001de8:	214b      	movs	r1, #75	; 0x4b
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fc73 	bl	80026d6 <IOE_Write>
  }
  
  return ret;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8001e08:	89fb      	ldrh	r3, [r7, #14]
 8001e0a:	b2d8      	uxtb	r0, r3
 8001e0c:	f107 0210 	add.w	r2, r7, #16
 8001e10:	2304      	movs	r3, #4
 8001e12:	21d7      	movs	r1, #215	; 0xd7
 8001e14:	f000 fc85 	bl	8002722 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8001e18:	7c3b      	ldrb	r3, [r7, #16]
 8001e1a:	061a      	lsls	r2, r3, #24
 8001e1c:	7c7b      	ldrb	r3, [r7, #17]
 8001e1e:	041b      	lsls	r3, r3, #16
 8001e20:	431a      	orrs	r2, r3
 8001e22:	7cbb      	ldrb	r3, [r7, #18]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	4313      	orrs	r3, r2
 8001e28:	7cfa      	ldrb	r2, [r7, #19]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	0d1b      	lsrs	r3, r3, #20
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8001e48:	89fb      	ldrh	r3, [r7, #14]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	214b      	movs	r1, #75	; 0x4b
 8001e50:	4618      	mov	r0, r3
 8001e52:	f000 fc40 	bl	80026d6 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	214b      	movs	r1, #75	; 0x4b
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fc39 	bl	80026d6 <IOE_Write>
}
 8001e64:	bf00      	nop
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8001e76:	f000 fc28 	bl	80026ca <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	211f      	movs	r1, #31
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff fe76 	bl	8001b70 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fe36 	bl	8001af8 <stmpe811_EnableGlobalIT>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff fe47 	bl	8001b34 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	211f      	movs	r1, #31
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fe81 	bl	8001bb2 <stmpe811_DisableITSource>
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	211f      	movs	r1, #31
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fe99 	bl	8001bfe <stmpe811_ReadGITStatus>
 8001ecc:	4603      	mov	r3, r0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	4603      	mov	r3, r0
 8001ede:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	211f      	movs	r1, #31
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff fea1 	bl	8001c2c <stmpe811_ClearGlobalIT>
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	e00b      	b.n	8001f20 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <stmpe811_GetInstance+0x40>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	88fa      	ldrh	r2, [r7, #6]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d101      	bne.n	8001f1a <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	e006      	b.n	8001f28 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8001f1a:	7bfb      	ldrb	r3, [r7, #15]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d9f0      	bls.n	8001f08 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001f26:	23ff      	movs	r3, #255	; 0xff
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	200002d8 	.word	0x200002d8

08001f38 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10e      	bne.n	8001f66 <BSP_LED_Init+0x2e>
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <BSP_LED_Init+0x9c>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <BSP_LED_Init+0x9c>)
 8001f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f56:	6313      	str	r3, [r2, #48]	; 0x30
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <BSP_LED_Init+0x9c>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	e010      	b.n	8001f88 <BSP_LED_Init+0x50>
 8001f66:	79fb      	ldrb	r3, [r7, #7]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d10d      	bne.n	8001f88 <BSP_LED_Init+0x50>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60fb      	str	r3, [r7, #12]
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <BSP_LED_Init+0x9c>)
 8001f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f74:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <BSP_LED_Init+0x9c>)
 8001f76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <BSP_LED_Init+0x9c>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <BSP_LED_Init+0xa0>)
 8001f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001f90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <BSP_LED_Init+0xa4>)
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	f107 0214 	add.w	r2, r7, #20
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 f9bf 	bl	8004330 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <BSP_LED_Init+0xa4>)
 8001fb6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <BSP_LED_Init+0xa0>)
 8001fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f002 fb5f 	bl	8004688 <HAL_GPIO_WritePin>
}
 8001fca:	bf00      	nop
 8001fcc:	3728      	adds	r7, #40	; 0x28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	08008864 	.word	0x08008864
 8001fdc:	20000160 	.word	0x20000160

08001fe0 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8001fea:	79fb      	ldrb	r3, [r7, #7]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <BSP_LED_On+0x2c>)
 8001fee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <BSP_LED_On+0x30>)
 8001ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f002 fb43 	bl	8004688 <HAL_GPIO_WritePin>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000160 	.word	0x20000160
 8002010:	08008864 	.word	0x08008864

08002014 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	4a07      	ldr	r2, [pc, #28]	; (8002040 <BSP_LED_Off+0x2c>)
 8002022:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <BSP_LED_Off+0x30>)
 800202a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800202e:	2200      	movs	r2, #0
 8002030:	4619      	mov	r1, r3
 8002032:	f002 fb29 	bl	8004688 <HAL_GPIO_WritePin>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000160 	.word	0x20000160
 8002044:	08008864 	.word	0x08008864

08002048 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <BSP_LED_Toggle+0x2c>)
 8002056:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4906      	ldr	r1, [pc, #24]	; (8002078 <BSP_LED_Toggle+0x30>)
 800205e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f002 fb28 	bl	80046ba <HAL_GPIO_TogglePin>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000160 	.word	0x20000160
 8002078:	08008864 	.word	0x08008864

0800207c <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a33      	ldr	r2, [pc, #204]	; (8002158 <I2Cx_MspInit+0xdc>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d15f      	bne.n	800214e <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	4b32      	ldr	r3, [pc, #200]	; (800215c <I2Cx_MspInit+0xe0>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a31      	ldr	r2, [pc, #196]	; (800215c <I2Cx_MspInit+0xe0>)
 8002098:	f043 0304 	orr.w	r3, r3, #4
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b2f      	ldr	r3, [pc, #188]	; (800215c <I2Cx_MspInit+0xe0>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b2b      	ldr	r3, [pc, #172]	; (800215c <I2Cx_MspInit+0xe0>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a2a      	ldr	r2, [pc, #168]	; (800215c <I2Cx_MspInit+0xe0>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b28      	ldr	r3, [pc, #160]	; (800215c <I2Cx_MspInit+0xe0>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 80020c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 80020cc:	2312      	movs	r3, #18
 80020ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80020d8:	2304      	movs	r3, #4
 80020da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	4619      	mov	r1, r3
 80020e2:	481f      	ldr	r0, [pc, #124]	; (8002160 <I2Cx_MspInit+0xe4>)
 80020e4:	f002 f924 	bl	8004330 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 80020e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ec:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	481b      	ldr	r0, [pc, #108]	; (8002164 <I2Cx_MspInit+0xe8>)
 80020f6:	f002 f91b 	bl	8004330 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <I2Cx_MspInit+0xe0>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a16      	ldr	r2, [pc, #88]	; (800215c <I2Cx_MspInit+0xe0>)
 8002104:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
 800210a:	4b14      	ldr	r3, [pc, #80]	; (800215c <I2Cx_MspInit+0xe0>)
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002116:	4b11      	ldr	r3, [pc, #68]	; (800215c <I2Cx_MspInit+0xe0>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <I2Cx_MspInit+0xe0>)
 800211c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002120:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <I2Cx_MspInit+0xe0>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a0d      	ldr	r2, [pc, #52]	; (800215c <I2Cx_MspInit+0xe0>)
 8002128:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800212c:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800212e:	2200      	movs	r2, #0
 8002130:	210f      	movs	r1, #15
 8002132:	2048      	movs	r0, #72	; 0x48
 8002134:	f001 fc71 	bl	8003a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002138:	2048      	movs	r0, #72	; 0x48
 800213a:	f001 fc8a 	bl	8003a52 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	210f      	movs	r1, #15
 8002142:	2049      	movs	r0, #73	; 0x49
 8002144:	f001 fc69 	bl	8003a1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002148:	2049      	movs	r0, #73	; 0x49
 800214a:	f001 fc82 	bl	8003a52 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 800214e:	bf00      	nop
 8002150:	3728      	adds	r7, #40	; 0x28
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40005c00 	.word	0x40005c00
 800215c:	40023800 	.word	0x40023800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020800 	.word	0x40020800

08002168 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 800216c:	4814      	ldr	r0, [pc, #80]	; (80021c0 <I2Cx_Init+0x58>)
 800216e:	f002 ff67 	bl	8005040 <HAL_I2C_GetState>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d121      	bne.n	80021bc <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002178:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <I2Cx_Init+0x58>)
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <I2Cx_Init+0x5c>)
 800217c:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 800217e:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <I2Cx_Init+0x58>)
 8002180:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <I2Cx_Init+0x60>)
 8002182:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002184:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <I2Cx_Init+0x58>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <I2Cx_Init+0x58>)
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002190:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <I2Cx_Init+0x58>)
 8002192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002196:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <I2Cx_Init+0x58>)
 800219a:	2200      	movs	r2, #0
 800219c:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <I2Cx_Init+0x58>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <I2Cx_Init+0x58>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <I2Cx_Init+0x58>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 80021b0:	4803      	ldr	r0, [pc, #12]	; (80021c0 <I2Cx_Init+0x58>)
 80021b2:	f7ff ff63 	bl	800207c <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 80021b6:	4802      	ldr	r0, [pc, #8]	; (80021c0 <I2Cx_Init+0x58>)
 80021b8:	f002 fa9a 	bl	80046f0 <HAL_I2C_Init>
  }
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200002dc 	.word	0x200002dc
 80021c4:	40005c00 	.word	0x40005c00
 80021c8:	000186a0 	.word	0x000186a0

080021cc <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	603b      	str	r3, [r7, #0]
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <I2Cx_ITConfig+0x58>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <I2Cx_ITConfig+0x58>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b10      	ldr	r3, [pc, #64]	; (8002224 <I2Cx_ITConfig+0x58>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	603b      	str	r3, [r7, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80021ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80021f4:	2301      	movs	r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80021f8:	2300      	movs	r3, #0
 80021fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <I2Cx_ITConfig+0x5c>)
 80021fe:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002200:	1d3b      	adds	r3, r7, #4
 8002202:	4619      	mov	r1, r3
 8002204:	4809      	ldr	r0, [pc, #36]	; (800222c <I2Cx_ITConfig+0x60>)
 8002206:	f002 f893 	bl	8004330 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 800220a:	2200      	movs	r2, #0
 800220c:	210f      	movs	r1, #15
 800220e:	2028      	movs	r0, #40	; 0x28
 8002210:	f001 fc03 	bl	8003a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002214:	2028      	movs	r0, #40	; 0x28
 8002216:	f001 fc1c 	bl	8003a52 <HAL_NVIC_EnableIRQ>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	10210000 	.word	0x10210000
 800222c:	40020000 	.word	0x40020000

08002230 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002230:	b580      	push	{r7, lr}
 8002232:	b088      	sub	sp, #32
 8002234:	af04      	add	r7, sp, #16
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
 800223a:	460b      	mov	r3, r1
 800223c:	71bb      	strb	r3, [r7, #6]
 800223e:	4613      	mov	r3, r2
 8002240:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	b299      	uxth	r1, r3
 800224a:	79bb      	ldrb	r3, [r7, #6]
 800224c:	b29a      	uxth	r2, r3
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <I2Cx_WriteData+0x4c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	9302      	str	r3, [sp, #8]
 8002254:	2301      	movs	r3, #1
 8002256:	9301      	str	r3, [sp, #4]
 8002258:	1d7b      	adds	r3, r7, #5
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	2301      	movs	r3, #1
 800225e:	4808      	ldr	r0, [pc, #32]	; (8002280 <I2Cx_WriteData+0x50>)
 8002260:	f002 fbce 	bl	8004a00 <HAL_I2C_Mem_Write>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800226e:	f000 f863 	bl	8002338 <I2Cx_Error>
  }        
}
 8002272:	bf00      	nop
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000168 	.word	0x20000168
 8002280:	200002dc 	.word	0x200002dc

08002284 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b088      	sub	sp, #32
 8002288:	af04      	add	r7, sp, #16
 800228a:	4603      	mov	r3, r0
 800228c:	460a      	mov	r2, r1
 800228e:	71fb      	strb	r3, [r7, #7]
 8002290:	4613      	mov	r3, r2
 8002292:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002298:	2300      	movs	r3, #0
 800229a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	b299      	uxth	r1, r3
 80022a0:	79bb      	ldrb	r3, [r7, #6]
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <I2Cx_ReadData+0x50>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	9302      	str	r3, [sp, #8]
 80022aa:	2301      	movs	r3, #1
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	f107 030e 	add.w	r3, r7, #14
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2301      	movs	r3, #1
 80022b6:	4808      	ldr	r0, [pc, #32]	; (80022d8 <I2Cx_ReadData+0x54>)
 80022b8:	f002 fc9c 	bl	8004bf4 <HAL_I2C_Mem_Read>
 80022bc:	4603      	mov	r3, r0
 80022be:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80022c6:	f000 f837 	bl	8002338 <I2Cx_Error>
  
  }
  return value;
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000168 	.word	0x20000168
 80022d8:	200002dc 	.word	0x200002dc

080022dc <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af04      	add	r7, sp, #16
 80022e2:	603a      	str	r2, [r7, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	460b      	mov	r3, r1
 80022ec:	71bb      	strb	r3, [r7, #6]
 80022ee:	4613      	mov	r3, r2
 80022f0:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	b299      	uxth	r1, r3
 80022fa:	79bb      	ldrb	r3, [r7, #6]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <I2Cx_ReadBuffer+0x54>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	88bb      	ldrh	r3, [r7, #4]
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	2301      	movs	r3, #1
 800230e:	4809      	ldr	r0, [pc, #36]	; (8002334 <I2Cx_ReadBuffer+0x58>)
 8002310:	f002 fc70 	bl	8004bf4 <HAL_I2C_Mem_Read>
 8002314:	4603      	mov	r3, r0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 800231e:	2300      	movs	r3, #0
 8002320:	e002      	b.n	8002328 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002322:	f000 f809 	bl	8002338 <I2Cx_Error>

    return 1;
 8002326:	2301      	movs	r3, #1
  }
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20000168 	.word	0x20000168
 8002334:	200002dc 	.word	0x200002dc

08002338 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 800233c:	4803      	ldr	r0, [pc, #12]	; (800234c <I2Cx_Error+0x14>)
 800233e:	f002 fb1b 	bl	8004978 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002342:	f7ff ff11 	bl	8002168 <I2Cx_Init>
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200002dc 	.word	0x200002dc

08002350 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002354:	4819      	ldr	r0, [pc, #100]	; (80023bc <SPIx_Init+0x6c>)
 8002356:	f005 f900 	bl	800755a <HAL_SPI_GetState>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d12b      	bne.n	80023b8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002360:	4b16      	ldr	r3, [pc, #88]	; (80023bc <SPIx_Init+0x6c>)
 8002362:	4a17      	ldr	r2, [pc, #92]	; (80023c0 <SPIx_Init+0x70>)
 8002364:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <SPIx_Init+0x6c>)
 8002368:	2218      	movs	r2, #24
 800236a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800236c:	4b13      	ldr	r3, [pc, #76]	; (80023bc <SPIx_Init+0x6c>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <SPIx_Init+0x6c>)
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002378:	4b10      	ldr	r3, [pc, #64]	; (80023bc <SPIx_Init+0x6c>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <SPIx_Init+0x6c>)
 8002380:	2200      	movs	r2, #0
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002384:	4b0d      	ldr	r3, [pc, #52]	; (80023bc <SPIx_Init+0x6c>)
 8002386:	2207      	movs	r2, #7
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <SPIx_Init+0x6c>)
 800238c:	2200      	movs	r2, #0
 800238e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002390:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <SPIx_Init+0x6c>)
 8002392:	2200      	movs	r2, #0
 8002394:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <SPIx_Init+0x6c>)
 8002398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800239e:	4b07      	ldr	r3, [pc, #28]	; (80023bc <SPIx_Init+0x6c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80023a4:	4b05      	ldr	r3, [pc, #20]	; (80023bc <SPIx_Init+0x6c>)
 80023a6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023aa:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80023ac:	4803      	ldr	r0, [pc, #12]	; (80023bc <SPIx_Init+0x6c>)
 80023ae:	f000 f853 	bl	8002458 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80023b2:	4802      	ldr	r0, [pc, #8]	; (80023bc <SPIx_Init+0x6c>)
 80023b4:	f004 fb47 	bl	8006a46 <HAL_SPI_Init>
  } 
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000330 	.word	0x20000330
 80023c0:	40015000 	.word	0x40015000

080023c4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <SPIx_Read+0x38>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f107 0108 	add.w	r1, r7, #8
 80023de:	4808      	ldr	r0, [pc, #32]	; (8002400 <SPIx_Read+0x3c>)
 80023e0:	f004 fd2e 	bl	8006e40 <HAL_SPI_Receive>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 80023ee:	f000 f827 	bl	8002440 <SPIx_Error>
  }
  
  return readvalue;
 80023f2:	68bb      	ldr	r3, [r7, #8]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	2000016c 	.word	0x2000016c
 8002400:	20000330 	.word	0x20000330

08002404 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <SPIx_Write+0x34>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1db9      	adds	r1, r7, #6
 8002418:	2201      	movs	r2, #1
 800241a:	4808      	ldr	r0, [pc, #32]	; (800243c <SPIx_Write+0x38>)
 800241c:	f004 fbba 	bl	8006b94 <HAL_SPI_Transmit>
 8002420:	4603      	mov	r3, r0
 8002422:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002424:	7bfb      	ldrb	r3, [r7, #15]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800242a:	f000 f809 	bl	8002440 <SPIx_Error>
  }
}
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	2000016c 	.word	0x2000016c
 800243c:	20000330 	.word	0x20000330

08002440 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <SPIx_Error+0x14>)
 8002446:	f004 fb69 	bl	8006b1c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 800244a:	f7ff ff81 	bl	8002350 <SPIx_Init>
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000330 	.word	0x20000330

08002458 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <SPIx_MspInit+0x6c>)
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	4a16      	ldr	r2, [pc, #88]	; (80024c4 <SPIx_MspInit+0x6c>)
 800246a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800246e:	6453      	str	r3, [r2, #68]	; 0x44
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <SPIx_MspInit+0x6c>)
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <SPIx_MspInit+0x6c>)
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	4a0f      	ldr	r2, [pc, #60]	; (80024c4 <SPIx_MspInit+0x6c>)
 8002486:	f043 0320 	orr.w	r3, r3, #32
 800248a:	6313      	str	r3, [r2, #48]	; 0x30
 800248c:	4b0d      	ldr	r3, [pc, #52]	; (80024c4 <SPIx_MspInit+0x6c>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002498:	f44f 7360 	mov.w	r3, #896	; 0x380
 800249c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80024a2:	2302      	movs	r3, #2
 80024a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80024a6:	2301      	movs	r3, #1
 80024a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80024aa:	2305      	movs	r3, #5
 80024ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80024ae:	f107 0314 	add.w	r3, r7, #20
 80024b2:	4619      	mov	r1, r3
 80024b4:	4804      	ldr	r0, [pc, #16]	; (80024c8 <SPIx_MspInit+0x70>)
 80024b6:	f001 ff3b 	bl	8004330 <HAL_GPIO_Init>
}
 80024ba:	bf00      	nop
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40021400 	.word	0x40021400

080024cc <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <LCD_IO_Init+0xe0>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d164      	bne.n	80025a4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 80024da:	4b34      	ldr	r3, [pc, #208]	; (80025ac <LCD_IO_Init+0xe0>)
 80024dc:	2201      	movs	r2, #1
 80024de:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 80024e0:	2300      	movs	r3, #0
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	4b32      	ldr	r3, [pc, #200]	; (80025b0 <LCD_IO_Init+0xe4>)
 80024e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e8:	4a31      	ldr	r2, [pc, #196]	; (80025b0 <LCD_IO_Init+0xe4>)
 80024ea:	f043 0308 	orr.w	r3, r3, #8
 80024ee:	6313      	str	r3, [r2, #48]	; 0x30
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <LCD_IO_Init+0xe4>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80024fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002500:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002502:	2301      	movs	r3, #1
 8002504:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800250a:	2302      	movs	r3, #2
 800250c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	4619      	mov	r1, r3
 8002514:	4827      	ldr	r0, [pc, #156]	; (80025b4 <LCD_IO_Init+0xe8>)
 8002516:	f001 ff0b 	bl	8004330 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <LCD_IO_Init+0xe4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <LCD_IO_Init+0xe4>)
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b21      	ldr	r3, [pc, #132]	; (80025b0 <LCD_IO_Init+0xe4>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800253a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002544:	2302      	movs	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002548:	f107 030c 	add.w	r3, r7, #12
 800254c:	4619      	mov	r1, r3
 800254e:	4819      	ldr	r0, [pc, #100]	; (80025b4 <LCD_IO_Init+0xe8>)
 8002550:	f001 feee 	bl	8004330 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <LCD_IO_Init+0xe4>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <LCD_IO_Init+0xe4>)
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	6313      	str	r3, [r2, #48]	; 0x30
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <LCD_IO_Init+0xe4>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	603b      	str	r3, [r7, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002570:	2304      	movs	r3, #4
 8002572:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002574:	2301      	movs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800257c:	2302      	movs	r3, #2
 800257e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	4619      	mov	r1, r3
 8002586:	480c      	ldr	r0, [pc, #48]	; (80025b8 <LCD_IO_Init+0xec>)
 8002588:	f001 fed2 	bl	8004330 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 800258c:	2200      	movs	r2, #0
 800258e:	2104      	movs	r1, #4
 8002590:	4809      	ldr	r0, [pc, #36]	; (80025b8 <LCD_IO_Init+0xec>)
 8002592:	f002 f879 	bl	8004688 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002596:	2201      	movs	r2, #1
 8002598:	2104      	movs	r1, #4
 800259a:	4807      	ldr	r0, [pc, #28]	; (80025b8 <LCD_IO_Init+0xec>)
 800259c:	f002 f874 	bl	8004688 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80025a0:	f7ff fed6 	bl	8002350 <SPIx_Init>
  }
}
 80025a4:	bf00      	nop
 80025a6:	3720      	adds	r7, #32
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000388 	.word	0x20000388
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020c00 	.word	0x40020c00
 80025b8:	40020800 	.word	0x40020800

080025bc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025cc:	480a      	ldr	r0, [pc, #40]	; (80025f8 <LCD_IO_WriteData+0x3c>)
 80025ce:	f002 f85b 	bl	8004688 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80025d2:	2200      	movs	r2, #0
 80025d4:	2104      	movs	r1, #4
 80025d6:	4809      	ldr	r0, [pc, #36]	; (80025fc <LCD_IO_WriteData+0x40>)
 80025d8:	f002 f856 	bl	8004688 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff ff10 	bl	8002404 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80025e4:	2201      	movs	r2, #1
 80025e6:	2104      	movs	r1, #4
 80025e8:	4804      	ldr	r0, [pc, #16]	; (80025fc <LCD_IO_WriteData+0x40>)
 80025ea:	f002 f84d 	bl	8004688 <HAL_GPIO_WritePin>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40020c00 	.word	0x40020c00
 80025fc:	40020800 	.word	0x40020800

08002600 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800260a:	2200      	movs	r2, #0
 800260c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002610:	480a      	ldr	r0, [pc, #40]	; (800263c <LCD_IO_WriteReg+0x3c>)
 8002612:	f002 f839 	bl	8004688 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002616:	2200      	movs	r2, #0
 8002618:	2104      	movs	r1, #4
 800261a:	4809      	ldr	r0, [pc, #36]	; (8002640 <LCD_IO_WriteReg+0x40>)
 800261c:	f002 f834 	bl	8004688 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	b29b      	uxth	r3, r3
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff feed 	bl	8002404 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800262a:	2201      	movs	r2, #1
 800262c:	2104      	movs	r1, #4
 800262e:	4804      	ldr	r0, [pc, #16]	; (8002640 <LCD_IO_WriteReg+0x40>)
 8002630:	f002 f82a 	bl	8004688 <HAL_GPIO_WritePin>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40020c00 	.word	0x40020c00
 8002640:	40020800 	.word	0x40020800

08002644 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	460a      	mov	r2, r1
 800264e:	80fb      	strh	r3, [r7, #6]
 8002650:	4613      	mov	r3, r2
 8002652:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002658:	2200      	movs	r2, #0
 800265a:	2104      	movs	r1, #4
 800265c:	4810      	ldr	r0, [pc, #64]	; (80026a0 <LCD_IO_ReadData+0x5c>)
 800265e:	f002 f813 	bl	8004688 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002662:	2200      	movs	r2, #0
 8002664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002668:	480e      	ldr	r0, [pc, #56]	; (80026a4 <LCD_IO_ReadData+0x60>)
 800266a:	f002 f80d 	bl	8004688 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800266e:	88fb      	ldrh	r3, [r7, #6]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff fec7 	bl	8002404 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002676:	797b      	ldrb	r3, [r7, #5]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff fea3 	bl	80023c4 <SPIx_Read>
 800267e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <LCD_IO_ReadData+0x60>)
 8002688:	f001 fffe 	bl	8004688 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800268c:	2201      	movs	r2, #1
 800268e:	2104      	movs	r1, #4
 8002690:	4803      	ldr	r0, [pc, #12]	; (80026a0 <LCD_IO_ReadData+0x5c>)
 8002692:	f001 fff9 	bl	8004688 <HAL_GPIO_WritePin>
  
  return readvalue;
 8002696:	68fb      	ldr	r3, [r7, #12]
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020c00 	.word	0x40020c00

080026a8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f001 f8b3 	bl	800381c <HAL_Delay>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	af00      	add	r7, sp, #0
  I2Cx_Init();
 80026c2:	f7ff fd51 	bl	8002168 <I2Cx_Init>
}
 80026c6:	bf00      	nop
 80026c8:	bd80      	pop	{r7, pc}

080026ca <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80026ce:	f7ff fd7d 	bl	80021cc <I2Cx_ITConfig>
}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	71fb      	strb	r3, [r7, #7]
 80026e0:	460b      	mov	r3, r1
 80026e2:	71bb      	strb	r3, [r7, #6]
 80026e4:	4613      	mov	r3, r2
 80026e6:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80026e8:	797a      	ldrb	r2, [r7, #5]
 80026ea:	79b9      	ldrb	r1, [r7, #6]
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fd9e 	bl	8002230 <I2Cx_WriteData>
}
 80026f4:	bf00      	nop
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	460a      	mov	r2, r1
 8002706:	71fb      	strb	r3, [r7, #7]
 8002708:	4613      	mov	r3, r2
 800270a:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 800270c:	79ba      	ldrb	r2, [r7, #6]
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fdb6 	bl	8002284 <I2Cx_ReadData>
 8002718:	4603      	mov	r3, r0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	603a      	str	r2, [r7, #0]
 800272a:	461a      	mov	r2, r3
 800272c:	4603      	mov	r3, r0
 800272e:	71fb      	strb	r3, [r7, #7]
 8002730:	460b      	mov	r3, r1
 8002732:	71bb      	strb	r3, [r7, #6]
 8002734:	4613      	mov	r3, r2
 8002736:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002738:	88bb      	ldrh	r3, [r7, #4]
 800273a:	79b9      	ldrb	r1, [r7, #6]
 800273c:	79f8      	ldrb	r0, [r7, #7]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	f7ff fdcc 	bl	80022dc <I2Cx_ReadBuffer>
 8002744:	4603      	mov	r3, r0
 8002746:	b29b      	uxth	r3, r3
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f001 f85f 	bl	800381c <HAL_Delay>
}
 800275e:	bf00      	nop
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
	flippedLcd = true;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <BSP_LCD_Init_Flipped+0x14>)
 800276e:	2201      	movs	r2, #1
 8002770:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 8002772:	f000 f805 	bl	8002780 <BSP_LCD_Init>
 8002776:	4603      	mov	r3, r0
}
 8002778:	4618      	mov	r0, r3
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200004c4 	.word	0x200004c4

08002780 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <BSP_LCD_Init+0xbc>)
 8002786:	4a2e      	ldr	r2, [pc, #184]	; (8002840 <BSP_LCD_Init+0xc0>)
 8002788:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <BSP_LCD_Init+0xbc>)
 800278c:	2209      	movs	r2, #9
 800278e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <BSP_LCD_Init+0xbc>)
 8002792:	2201      	movs	r2, #1
 8002794:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002796:	4b29      	ldr	r3, [pc, #164]	; (800283c <BSP_LCD_Init+0xbc>)
 8002798:	221d      	movs	r2, #29
 800279a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <BSP_LCD_Init+0xbc>)
 800279e:	2203      	movs	r2, #3
 80027a0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 80027a2:	4b26      	ldr	r3, [pc, #152]	; (800283c <BSP_LCD_Init+0xbc>)
 80027a4:	f240 120d 	movw	r2, #269	; 0x10d
 80027a8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <BSP_LCD_Init+0xbc>)
 80027ac:	f240 1243 	movw	r2, #323	; 0x143
 80027b0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 80027b2:	4b22      	ldr	r3, [pc, #136]	; (800283c <BSP_LCD_Init+0xbc>)
 80027b4:	f240 1217 	movw	r2, #279	; 0x117
 80027b8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <BSP_LCD_Init+0xbc>)
 80027bc:	f240 1247 	movw	r2, #327	; 0x147
 80027c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 80027c2:	4b1e      	ldr	r3, [pc, #120]	; (800283c <BSP_LCD_Init+0xbc>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80027ca:	4b1c      	ldr	r3, [pc, #112]	; (800283c <BSP_LCD_Init+0xbc>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80027d2:	4b1a      	ldr	r3, [pc, #104]	; (800283c <BSP_LCD_Init+0xbc>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <BSP_LCD_Init+0xc4>)
 80027dc:	2208      	movs	r2, #8
 80027de:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80027e0:	4b18      	ldr	r3, [pc, #96]	; (8002844 <BSP_LCD_Init+0xc4>)
 80027e2:	22c0      	movs	r2, #192	; 0xc0
 80027e4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <BSP_LCD_Init+0xc4>)
 80027e8:	2204      	movs	r2, #4
 80027ea:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80027ec:	4b15      	ldr	r3, [pc, #84]	; (8002844 <BSP_LCD_Init+0xc4>)
 80027ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80027f4:	4813      	ldr	r0, [pc, #76]	; (8002844 <BSP_LCD_Init+0xc4>)
 80027f6:	f003 fedd 	bl	80065b4 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80027fa:	4b10      	ldr	r3, [pc, #64]	; (800283c <BSP_LCD_Init+0xbc>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <BSP_LCD_Init+0xbc>)
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <BSP_LCD_Init+0xbc>)
 8002808:	2200      	movs	r2, #0
 800280a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800280c:	4b0b      	ldr	r3, [pc, #44]	; (800283c <BSP_LCD_Init+0xbc>)
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002812:	f000 faad 	bl	8002d70 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002816:	4809      	ldr	r0, [pc, #36]	; (800283c <BSP_LCD_Init+0xbc>)
 8002818:	f002 ff78 	bl	800570c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <BSP_LCD_Init+0xc8>)
 800281e:	4a0b      	ldr	r2, [pc, #44]	; (800284c <BSP_LCD_Init+0xcc>)
 8002820:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <BSP_LCD_Init+0xc8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 800282a:	f000 fcaf 	bl	800318c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800282e:	4808      	ldr	r0, [pc, #32]	; (8002850 <BSP_LCD_Init+0xd0>)
 8002830:	f000 f8ce 	bl	80029d0 <BSP_LCD_SetFont>

  return LCD_OK;
 8002834:	2300      	movs	r3, #0
}  
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	2000038c 	.word	0x2000038c
 8002840:	40016800 	.word	0x40016800
 8002844:	20000474 	.word	0x20000474
 8002848:	200004c0 	.word	0x200004c0
 800284c:	20000100 	.word	0x20000100
 8002850:	20000170 	.word	0x20000170

08002854 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <BSP_LCD_GetXSize+0x14>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	4798      	blx	r3
 8002860:	4603      	mov	r3, r0
}
 8002862:	4618      	mov	r0, r3
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200004c0 	.word	0x200004c0

0800286c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002870:	4b03      	ldr	r3, [pc, #12]	; (8002880 <BSP_LCD_GetYSize+0x14>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	4798      	blx	r3
 8002878:	4603      	mov	r3, r0
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200004c0 	.word	0x200004c0

08002884 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002884:	b580      	push	{r7, lr}
 8002886:	b090      	sub	sp, #64	; 0x40
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	6039      	str	r1, [r7, #0]
 800288e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002894:	f7ff ffde 	bl	8002854 <BSP_LCD_GetXSize>
 8002898:	4603      	mov	r3, r0
 800289a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80028a0:	f7ff ffe4 	bl	800286c <BSP_LCD_GetYSize>
 80028a4:	4603      	mov	r3, r0
 80028a6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80028b0:	23ff      	movs	r3, #255	; 0xff
 80028b2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80028ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80028d0:	2307      	movs	r3, #7
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80028d4:	f7ff ffbe 	bl	8002854 <BSP_LCD_GetXSize>
 80028d8:	4603      	mov	r3, r0
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80028dc:	f7ff ffc6 	bl	800286c <BSP_LCD_GetYSize>
 80028e0:	4603      	mov	r3, r0
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80028e4:	88fa      	ldrh	r2, [r7, #6]
 80028e6:	f107 030c 	add.w	r3, r7, #12
 80028ea:	4619      	mov	r1, r3
 80028ec:	4814      	ldr	r0, [pc, #80]	; (8002940 <BSP_LCD_LayerDefaultInit+0xbc>)
 80028ee:	f002 ffe7 	bl	80058c0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80028f2:	88fa      	ldrh	r2, [r7, #6]
 80028f4:	4913      	ldr	r1, [pc, #76]	; (8002944 <BSP_LCD_LayerDefaultInit+0xc0>)
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3304      	adds	r3, #4
 8002902:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002906:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002908:	88fa      	ldrh	r2, [r7, #6]
 800290a:	490e      	ldr	r1, [pc, #56]	; (8002944 <BSP_LCD_LayerDefaultInit+0xc0>)
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3308      	adds	r3, #8
 8002918:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <BSP_LCD_LayerDefaultInit+0xc4>)
 800291a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800291c:	88fa      	ldrh	r2, [r7, #6]
 800291e:	4909      	ldr	r1, [pc, #36]	; (8002944 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002920:	4613      	mov	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800292e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002930:	4803      	ldr	r0, [pc, #12]	; (8002940 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002932:	f003 f803 	bl	800593c <HAL_LTDC_EnableDither>
}
 8002936:	bf00      	nop
 8002938:	3740      	adds	r7, #64	; 0x40
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000038c 	.word	0x2000038c
 8002944:	200004a8 	.word	0x200004a8
 8002948:	20000170 	.word	0x20000170

0800294c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002954:	4a04      	ldr	r2, [pc, #16]	; (8002968 <BSP_LCD_SelectLayer+0x1c>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6013      	str	r3, [r2, #0]
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	200004a4 	.word	0x200004a4

0800296c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <BSP_LCD_SetTextColor+0x28>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4907      	ldr	r1, [pc, #28]	; (8002998 <BSP_LCD_SetTextColor+0x2c>)
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	601a      	str	r2, [r3, #0]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	200004a4 	.word	0x200004a4
 8002998:	200004a8 	.word	0x200004a8

0800299c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <BSP_LCD_SetBackColor+0x2c>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4908      	ldr	r1, [pc, #32]	; (80029cc <BSP_LCD_SetBackColor+0x30>)
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	3304      	adds	r3, #4
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	601a      	str	r2, [r3, #0]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	200004a4 	.word	0x200004a4
 80029cc:	200004a8 	.word	0x200004a8

080029d0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <BSP_LCD_SetFont+0x2c>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4908      	ldr	r1, [pc, #32]	; (8002a00 <BSP_LCD_SetFont+0x30>)
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3308      	adds	r3, #8
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	601a      	str	r2, [r3, #0]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	200004a4 	.word	0x200004a4
 8002a00:	200004a8 	.word	0x200004a8

08002a04 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002a0c:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <BSP_LCD_Clear+0x48>)
 8002a0e:	681c      	ldr	r4, [r3, #0]
 8002a10:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <BSP_LCD_Clear+0x48>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a0e      	ldr	r2, [pc, #56]	; (8002a50 <BSP_LCD_Clear+0x4c>)
 8002a16:	2134      	movs	r1, #52	; 0x34
 8002a18:	fb01 f303 	mul.w	r3, r1, r3
 8002a1c:	4413      	add	r3, r2
 8002a1e:	335c      	adds	r3, #92	; 0x5c
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461e      	mov	r6, r3
 8002a24:	f7ff ff16 	bl	8002854 <BSP_LCD_GetXSize>
 8002a28:	4605      	mov	r5, r0
 8002a2a:	f7ff ff1f 	bl	800286c <BSP_LCD_GetYSize>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	9301      	str	r3, [sp, #4]
 8002a34:	2300      	movs	r3, #0
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	462a      	mov	r2, r5
 8002a3c:	4631      	mov	r1, r6
 8002a3e:	4620      	mov	r0, r4
 8002a40:	f000 fb6c 	bl	800311c <FillBuffer>
}
 8002a44:	bf00      	nop
 8002a46:	370c      	adds	r7, #12
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a4c:	200004a4 	.word	0x200004a4
 8002a50:	2000038c 	.word	0x2000038c

08002a54 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002a54:	b590      	push	{r4, r7, lr}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	80fb      	strh	r3, [r7, #6]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	80bb      	strh	r3, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <BSP_LCD_DisplayChar+0x80>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	491b      	ldr	r1, [pc, #108]	; (8002ad8 <BSP_LCD_DisplayChar+0x84>)
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	4413      	add	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3308      	adds	r3, #8
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6819      	ldr	r1, [r3, #0]
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <BSP_LCD_DisplayChar+0x80>)
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	4c14      	ldr	r4, [pc, #80]	; (8002ad8 <BSP_LCD_DisplayChar+0x84>)
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4423      	add	r3, r4
 8002a92:	3308      	adds	r3, #8
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a98:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <BSP_LCD_DisplayChar+0x80>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4c0d      	ldr	r4, [pc, #52]	; (8002ad8 <BSP_LCD_DisplayChar+0x84>)
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4423      	add	r3, r4
 8002aac:	3308      	adds	r3, #8
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	889b      	ldrh	r3, [r3, #4]
 8002ab2:	3307      	adds	r3, #7
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	da00      	bge.n	8002aba <BSP_LCD_DisplayChar+0x66>
 8002ab8:	3307      	adds	r3, #7
 8002aba:	10db      	asrs	r3, r3, #3
 8002abc:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ac0:	18ca      	adds	r2, r1, r3
 8002ac2:	88b9      	ldrh	r1, [r7, #4]
 8002ac4:	88fb      	ldrh	r3, [r7, #6]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fa6e 	bl	8002fa8 <DrawChar>
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd90      	pop	{r4, r7, pc}
 8002ad4:	200004a4 	.word	0x200004a4
 8002ad8:	200004a8 	.word	0x200004a8

08002adc <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002adc:	b5b0      	push	{r4, r5, r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60ba      	str	r2, [r7, #8]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	81fb      	strh	r3, [r7, #14]
 8002aea:	460b      	mov	r3, r1
 8002aec:	81bb      	strh	r3, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002af2:	2301      	movs	r3, #1
 8002af4:	83fb      	strh	r3, [r7, #30]
 8002af6:	2300      	movs	r3, #0
 8002af8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002b06:	e002      	b.n	8002b0e <BSP_LCD_DisplayStringAt+0x32>
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	617a      	str	r2, [r7, #20]
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f6      	bne.n	8002b08 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002b1a:	f7ff fe9b 	bl	8002854 <BSP_LCD_GetXSize>
 8002b1e:	4601      	mov	r1, r0
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <BSP_LCD_DisplayStringAt+0x174>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	484b      	ldr	r0, [pc, #300]	; (8002c54 <BSP_LCD_DisplayStringAt+0x178>)
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	4403      	add	r3, r0
 8002b30:	3308      	adds	r3, #8
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	889b      	ldrh	r3, [r3, #4]
 8002b36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b3a:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d01c      	beq.n	8002b7c <BSP_LCD_DisplayStringAt+0xa0>
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	dc33      	bgt.n	8002bae <BSP_LCD_DisplayStringAt+0xd2>
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d002      	beq.n	8002b50 <BSP_LCD_DisplayStringAt+0x74>
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d019      	beq.n	8002b82 <BSP_LCD_DisplayStringAt+0xa6>
 8002b4e:	e02e      	b.n	8002bae <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	1ad1      	subs	r1, r2, r3
 8002b56:	4b3e      	ldr	r3, [pc, #248]	; (8002c50 <BSP_LCD_DisplayStringAt+0x174>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	483e      	ldr	r0, [pc, #248]	; (8002c54 <BSP_LCD_DisplayStringAt+0x178>)
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4403      	add	r3, r0
 8002b66:	3308      	adds	r3, #8
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	889b      	ldrh	r3, [r3, #4]
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	085b      	lsrs	r3, r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	89fb      	ldrh	r3, [r7, #14]
 8002b76:	4413      	add	r3, r2
 8002b78:	83fb      	strh	r3, [r7, #30]
      break;
 8002b7a:	e01b      	b.n	8002bb4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002b7c:	89fb      	ldrh	r3, [r7, #14]
 8002b7e:	83fb      	strh	r3, [r7, #30]
      break;
 8002b80:	e018      	b.n	8002bb4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	b299      	uxth	r1, r3
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <BSP_LCD_DisplayStringAt+0x174>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4831      	ldr	r0, [pc, #196]	; (8002c54 <BSP_LCD_DisplayStringAt+0x178>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4403      	add	r3, r0
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	889b      	ldrh	r3, [r3, #4]
 8002ba0:	fb11 f303 	smulbb	r3, r1, r3
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	89fb      	ldrh	r3, [r7, #14]
 8002ba8:	4413      	add	r3, r2
 8002baa:	83fb      	strh	r3, [r7, #30]
      break;
 8002bac:	e002      	b.n	8002bb4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002bae:	89fb      	ldrh	r3, [r7, #14]
 8002bb0:	83fb      	strh	r3, [r7, #30]
      break;
 8002bb2:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002bb4:	e01a      	b.n	8002bec <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	89b9      	ldrh	r1, [r7, #12]
 8002bbc:	8bfb      	ldrh	r3, [r7, #30]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff ff48 	bl	8002a54 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002bc4:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <BSP_LCD_DisplayStringAt+0x174>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4922      	ldr	r1, [pc, #136]	; (8002c54 <BSP_LCD_DisplayStringAt+0x178>)
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	889a      	ldrh	r2, [r3, #4]
 8002bda:	8bfb      	ldrh	r3, [r7, #30]
 8002bdc:	4413      	add	r3, r2
 8002bde:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	3301      	adds	r3, #1
 8002be4:	60bb      	str	r3, [r7, #8]
    i++;
 8002be6:	8bbb      	ldrh	r3, [r7, #28]
 8002be8:	3301      	adds	r3, #1
 8002bea:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2dc      	uxtb	r4, r3
 8002bfa:	f7ff fe2b 	bl	8002854 <BSP_LCD_GetXSize>
 8002bfe:	8bb9      	ldrh	r1, [r7, #28]
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <BSP_LCD_DisplayStringAt+0x174>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4d13      	ldr	r5, [pc, #76]	; (8002c54 <BSP_LCD_DisplayStringAt+0x178>)
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	442b      	add	r3, r5
 8002c10:	3308      	adds	r3, #8
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	889b      	ldrh	r3, [r3, #4]
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	1ac3      	subs	r3, r0, r3
 8002c1c:	b299      	uxth	r1, r3
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <BSP_LCD_DisplayStringAt+0x174>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	480c      	ldr	r0, [pc, #48]	; (8002c54 <BSP_LCD_DisplayStringAt+0x178>)
 8002c24:	4613      	mov	r3, r2
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4403      	add	r3, r0
 8002c2e:	3308      	adds	r3, #8
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	889b      	ldrh	r3, [r3, #4]
 8002c34:	4299      	cmp	r1, r3
 8002c36:	bf2c      	ite	cs
 8002c38:	2301      	movcs	r3, #1
 8002c3a:	2300      	movcc	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	4023      	ands	r3, r4
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1b7      	bne.n	8002bb6 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c50:	200004a4 	.word	0x200004a4
 8002c54:	200004a8 	.word	0x200004a8

08002c58 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c5c:	b086      	sub	sp, #24
 8002c5e:	af02      	add	r7, sp, #8
 8002c60:	4604      	mov	r4, r0
 8002c62:	4608      	mov	r0, r1
 8002c64:	4611      	mov	r1, r2
 8002c66:	461a      	mov	r2, r3
 8002c68:	4623      	mov	r3, r4
 8002c6a:	80fb      	strh	r3, [r7, #6]
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	80bb      	strh	r3, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	807b      	strh	r3, [r7, #2]
 8002c74:	4613      	mov	r3, r2
 8002c76:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002c7c:	4b30      	ldr	r3, [pc, #192]	; (8002d40 <BSP_LCD_FillRect+0xe8>)
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	4930      	ldr	r1, [pc, #192]	; (8002d44 <BSP_LCD_FillRect+0xec>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fe6c 	bl	800296c <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 8002c94:	4b2c      	ldr	r3, [pc, #176]	; (8002d48 <BSP_LCD_FillRect+0xf0>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01b      	beq.n	8002cd4 <BSP_LCD_FillRect+0x7c>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +76800); //Rotate by 180°
 8002c9c:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <BSP_LCD_FillRect+0xe8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2a      	ldr	r2, [pc, #168]	; (8002d4c <BSP_LCD_FillRect+0xf4>)
 8002ca2:	2134      	movs	r1, #52	; 0x34
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	335c      	adds	r3, #92	; 0x5c
 8002cac:	681c      	ldr	r4, [r3, #0]
 8002cae:	f7ff fdd1 	bl	8002854 <BSP_LCD_GetXSize>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	425b      	negs	r3, r3
 8002cb6:	88b9      	ldrh	r1, [r7, #4]
 8002cb8:	883a      	ldrh	r2, [r7, #0]
 8002cba:	440a      	add	r2, r1
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	88f9      	ldrh	r1, [r7, #6]
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	440a      	add	r2, r1
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4423      	add	r3, r4
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e013      	b.n	8002cfc <BSP_LCD_FillRect+0xa4>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <BSP_LCD_FillRect+0xe8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1c      	ldr	r2, [pc, #112]	; (8002d4c <BSP_LCD_FillRect+0xf4>)
 8002cda:	2134      	movs	r1, #52	; 0x34
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	335c      	adds	r3, #92	; 0x5c
 8002ce4:	681c      	ldr	r4, [r3, #0]
 8002ce6:	f7ff fdb5 	bl	8002854 <BSP_LCD_GetXSize>
 8002cea:	4602      	mov	r2, r0
 8002cec:	88bb      	ldrh	r3, [r7, #4]
 8002cee:	fb03 f202 	mul.w	r2, r3, r2
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4423      	add	r3, r4
 8002cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <BSP_LCD_FillRect+0xe8>)
 8002cfe:	681c      	ldr	r4, [r3, #0]
 8002d00:	68fd      	ldr	r5, [r7, #12]
 8002d02:	887e      	ldrh	r6, [r7, #2]
 8002d04:	f8b7 8000 	ldrh.w	r8, [r7]
 8002d08:	f7ff fda4 	bl	8002854 <BSP_LCD_GetXSize>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	887b      	ldrh	r3, [r7, #2]
 8002d10:	1ad1      	subs	r1, r2, r3
 8002d12:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <BSP_LCD_FillRect+0xe8>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	480b      	ldr	r0, [pc, #44]	; (8002d44 <BSP_LCD_FillRect+0xec>)
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4403      	add	r3, r0
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	9301      	str	r3, [sp, #4]
 8002d26:	9100      	str	r1, [sp, #0]
 8002d28:	4643      	mov	r3, r8
 8002d2a:	4632      	mov	r2, r6
 8002d2c:	4629      	mov	r1, r5
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f000 f9f4 	bl	800311c <FillBuffer>
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d3e:	bf00      	nop
 8002d40:	200004a4 	.word	0x200004a4
 8002d44:	200004a8 	.word	0x200004a8
 8002d48:	200004c4 	.word	0x200004c4
 8002d4c:	2000038c 	.word	0x2000038c

08002d50 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <BSP_LCD_DisplayOn+0x1c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002d5e:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <BSP_LCD_DisplayOn+0x1c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	4798      	blx	r3
  }
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200004c0 	.word	0x200004c0

08002d70 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08e      	sub	sp, #56	; 0x38
 8002d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	623b      	str	r3, [r7, #32]
 8002d7a:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4a60      	ldr	r2, [pc, #384]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002d80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d84:	6453      	str	r3, [r2, #68]	; 0x44
 8002d86:	4b5e      	ldr	r3, [pc, #376]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002d92:	2300      	movs	r3, #0
 8002d94:	61fb      	str	r3, [r7, #28]
 8002d96:	4b5a      	ldr	r3, [pc, #360]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	4a59      	ldr	r2, [pc, #356]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002d9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002da0:	6313      	str	r3, [r2, #48]	; 0x30
 8002da2:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dae:	2300      	movs	r3, #0
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	4b53      	ldr	r3, [pc, #332]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	4a52      	ldr	r2, [pc, #328]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002db8:	f043 0301 	orr.w	r3, r3, #1
 8002dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbe:	4b50      	ldr	r3, [pc, #320]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	4a4b      	ldr	r2, [pc, #300]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002dd4:	f043 0302 	orr.w	r3, r3, #2
 8002dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dda:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	4b45      	ldr	r3, [pc, #276]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	4a44      	ldr	r2, [pc, #272]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002df0:	f043 0304 	orr.w	r3, r3, #4
 8002df4:	6313      	str	r3, [r2, #48]	; 0x30
 8002df6:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]
 8002e06:	4b3e      	ldr	r3, [pc, #248]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a3d      	ldr	r2, [pc, #244]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002e0c:	f043 0308 	orr.w	r3, r3, #8
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0308 	and.w	r3, r3, #8
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60bb      	str	r3, [r7, #8]
 8002e22:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	4a36      	ldr	r2, [pc, #216]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002e28:	f043 0320 	orr.w	r3, r3, #32
 8002e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e2e:	4b34      	ldr	r3, [pc, #208]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	60bb      	str	r3, [r7, #8]
 8002e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	4b30      	ldr	r3, [pc, #192]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a2f      	ldr	r2, [pc, #188]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <BSP_LCD_MspInit+0x190>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002e56:	f641 0358 	movw	r3, #6232	; 0x1858
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002e64:	2302      	movs	r3, #2
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002e68:	230e      	movs	r3, #14
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e70:	4619      	mov	r1, r3
 8002e72:	4824      	ldr	r0, [pc, #144]	; (8002f04 <BSP_LCD_MspInit+0x194>)
 8002e74:	f001 fa5c 	bl	8004330 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002e78:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e82:	4619      	mov	r1, r3
 8002e84:	4820      	ldr	r0, [pc, #128]	; (8002f08 <BSP_LCD_MspInit+0x198>)
 8002e86:	f001 fa53 	bl	8004330 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002e8a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e94:	4619      	mov	r1, r3
 8002e96:	481d      	ldr	r0, [pc, #116]	; (8002f0c <BSP_LCD_MspInit+0x19c>)
 8002e98:	f001 fa4a 	bl	8004330 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002e9c:	2348      	movs	r3, #72	; 0x48
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	481a      	ldr	r0, [pc, #104]	; (8002f10 <BSP_LCD_MspInit+0x1a0>)
 8002ea8:	f001 fa42 	bl	8004330 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4816      	ldr	r0, [pc, #88]	; (8002f14 <BSP_LCD_MspInit+0x1a4>)
 8002eba:	f001 fa39 	bl	8004330 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002ebe:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002ec4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4813      	ldr	r0, [pc, #76]	; (8002f18 <BSP_LCD_MspInit+0x1a8>)
 8002ecc:	f001 fa30 	bl	8004330 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002ed4:	2309      	movs	r3, #9
 8002ed6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002edc:	4619      	mov	r1, r3
 8002ede:	480a      	ldr	r0, [pc, #40]	; (8002f08 <BSP_LCD_MspInit+0x198>)
 8002ee0:	f001 fa26 	bl	8004330 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002ee4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002ee8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4809      	ldr	r0, [pc, #36]	; (8002f18 <BSP_LCD_MspInit+0x1a8>)
 8002ef2:	f001 fa1d 	bl	8004330 <HAL_GPIO_Init>
}
 8002ef6:	bf00      	nop
 8002ef8:	3738      	adds	r7, #56	; 0x38
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40023800 	.word	0x40023800
 8002f04:	40020000 	.word	0x40020000
 8002f08:	40020400 	.word	0x40020400
 8002f0c:	40020800 	.word	0x40020800
 8002f10:	40020c00 	.word	0x40020c00
 8002f14:	40021400 	.word	0x40021400
 8002f18:	40021800 	.word	0x40021800

08002f1c <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002f1c:	b5b0      	push	{r4, r5, r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	603a      	str	r2, [r7, #0]
 8002f26:	80fb      	strh	r3, [r7, #6]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <BSP_LCD_DrawPixel+0x80>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d018      	beq.n	8002f66 <BSP_LCD_DrawPixel+0x4a>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (76800 - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 8002f34:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <BSP_LCD_DrawPixel+0x84>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a1a      	ldr	r2, [pc, #104]	; (8002fa4 <BSP_LCD_DrawPixel+0x88>)
 8002f3a:	2134      	movs	r1, #52	; 0x34
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	335c      	adds	r3, #92	; 0x5c
 8002f44:	681c      	ldr	r4, [r3, #0]
 8002f46:	88fd      	ldrh	r5, [r7, #6]
 8002f48:	f7ff fc84 	bl	8002854 <BSP_LCD_GetXSize>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	88bb      	ldrh	r3, [r7, #4]
 8002f50:	fb02 f303 	mul.w	r3, r2, r3
 8002f54:	442b      	add	r3, r5
 8002f56:	f5c3 3396 	rsb	r3, r3, #76800	; 0x12c00
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4423      	add	r3, r4
 8002f5e:	461a      	mov	r2, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002f64:	e015      	b.n	8002f92 <BSP_LCD_DrawPixel+0x76>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <BSP_LCD_DrawPixel+0x84>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <BSP_LCD_DrawPixel+0x88>)
 8002f6c:	2134      	movs	r1, #52	; 0x34
 8002f6e:	fb01 f303 	mul.w	r3, r1, r3
 8002f72:	4413      	add	r3, r2
 8002f74:	335c      	adds	r3, #92	; 0x5c
 8002f76:	681c      	ldr	r4, [r3, #0]
 8002f78:	88bd      	ldrh	r5, [r7, #4]
 8002f7a:	f7ff fc6b 	bl	8002854 <BSP_LCD_GetXSize>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	fb03 f205 	mul.w	r2, r3, r5
 8002f84:	88fb      	ldrh	r3, [r7, #6]
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4423      	add	r3, r4
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6013      	str	r3, [r2, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bdb0      	pop	{r4, r5, r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200004c4 	.word	0x200004c4
 8002fa0:	200004a4 	.word	0x200004a4
 8002fa4:	2000038c 	.word	0x2000038c

08002fa8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b088      	sub	sp, #32
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	603a      	str	r2, [r7, #0]
 8002fb2:	80fb      	strh	r3, [r7, #6]
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002fc4:	4b53      	ldr	r3, [pc, #332]	; (8003114 <DrawChar+0x16c>)
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4953      	ldr	r1, [pc, #332]	; (8003118 <DrawChar+0x170>)
 8002fca:	4613      	mov	r3, r2
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	88db      	ldrh	r3, [r3, #6]
 8002fda:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002fdc:	4b4d      	ldr	r3, [pc, #308]	; (8003114 <DrawChar+0x16c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	494d      	ldr	r1, [pc, #308]	; (8003118 <DrawChar+0x170>)
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	3308      	adds	r3, #8
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	889b      	ldrh	r3, [r3, #4]
 8002ff2:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8002ff4:	8a3b      	ldrh	r3, [r7, #16]
 8002ff6:	3307      	adds	r3, #7
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	da00      	bge.n	8002ffe <DrawChar+0x56>
 8002ffc:	3307      	adds	r3, #7
 8002ffe:	10db      	asrs	r3, r3, #3
 8003000:	b2db      	uxtb	r3, r3
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	b2da      	uxtb	r2, r3
 8003006:	8a3b      	ldrh	r3, [r7, #16]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
 8003012:	e076      	b.n	8003102 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003014:	8a3b      	ldrh	r3, [r7, #16]
 8003016:	3307      	adds	r3, #7
 8003018:	2b00      	cmp	r3, #0
 800301a:	da00      	bge.n	800301e <DrawChar+0x76>
 800301c:	3307      	adds	r3, #7
 800301e:	10db      	asrs	r3, r3, #3
 8003020:	461a      	mov	r2, r3
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	fb02 f303 	mul.w	r3, r2, r3
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	4413      	add	r3, r2
 800302c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800302e:	8a3b      	ldrh	r3, [r7, #16]
 8003030:	3307      	adds	r3, #7
 8003032:	2b00      	cmp	r3, #0
 8003034:	da00      	bge.n	8003038 <DrawChar+0x90>
 8003036:	3307      	adds	r3, #7
 8003038:	10db      	asrs	r3, r3, #3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d002      	beq.n	8003044 <DrawChar+0x9c>
 800303e:	2b02      	cmp	r3, #2
 8003040:	d004      	beq.n	800304c <DrawChar+0xa4>
 8003042:	e00c      	b.n	800305e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	617b      	str	r3, [r7, #20]
      break;
 800304a:	e016      	b.n	800307a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	3201      	adds	r2, #1
 8003056:	7812      	ldrb	r2, [r2, #0]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
      break;
 800305c:	e00d      	b.n	800307a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	041a      	lsls	r2, r3, #16
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3301      	adds	r3, #1
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	021b      	lsls	r3, r3, #8
 800306c:	4313      	orrs	r3, r2
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	3202      	adds	r2, #2
 8003072:	7812      	ldrb	r2, [r2, #0]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]
      break;
 8003078:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e036      	b.n	80030ee <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003080:	8a3a      	ldrh	r2, [r7, #16]
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	1ad2      	subs	r2, r2, r3
 8003086:	7bfb      	ldrb	r3, [r7, #15]
 8003088:	4413      	add	r3, r2
 800308a:	3b01      	subs	r3, #1
 800308c:	2201      	movs	r2, #1
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	461a      	mov	r2, r3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d012      	beq.n	80030c2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	4413      	add	r3, r2
 80030a4:	b298      	uxth	r0, r3
 80030a6:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <DrawChar+0x16c>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	491b      	ldr	r1, [pc, #108]	; (8003118 <DrawChar+0x170>)
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	88bb      	ldrh	r3, [r7, #4]
 80030ba:	4619      	mov	r1, r3
 80030bc:	f7ff ff2e 	bl	8002f1c <BSP_LCD_DrawPixel>
 80030c0:	e012      	b.n	80030e8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	4413      	add	r3, r2
 80030ca:	b298      	uxth	r0, r3
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <DrawChar+0x16c>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4911      	ldr	r1, [pc, #68]	; (8003118 <DrawChar+0x170>)
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3304      	adds	r3, #4
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	88bb      	ldrh	r3, [r7, #4]
 80030e2:	4619      	mov	r1, r3
 80030e4:	f7ff ff1a 	bl	8002f1c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	3301      	adds	r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
 80030ee:	8a3b      	ldrh	r3, [r7, #16]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d3c4      	bcc.n	8003080 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80030f6:	88bb      	ldrh	r3, [r7, #4]
 80030f8:	3301      	adds	r3, #1
 80030fa:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	3301      	adds	r3, #1
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	8a7b      	ldrh	r3, [r7, #18]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	429a      	cmp	r2, r3
 8003108:	d384      	bcc.n	8003014 <DrawChar+0x6c>
  }
}
 800310a:	bf00      	nop
 800310c:	bf00      	nop
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	200004a4 	.word	0x200004a4
 8003118:	200004a8 	.word	0x200004a8

0800311c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800312a:	4b16      	ldr	r3, [pc, #88]	; (8003184 <FillBuffer+0x68>)
 800312c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003130:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003132:	4b14      	ldr	r3, [pc, #80]	; (8003184 <FillBuffer+0x68>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003138:	4a12      	ldr	r2, [pc, #72]	; (8003184 <FillBuffer+0x68>)
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800313e:	4b11      	ldr	r3, [pc, #68]	; (8003184 <FillBuffer+0x68>)
 8003140:	4a11      	ldr	r2, [pc, #68]	; (8003188 <FillBuffer+0x6c>)
 8003142:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003144:	480f      	ldr	r0, [pc, #60]	; (8003184 <FillBuffer+0x68>)
 8003146:	f000 fe5d 	bl	8003e04 <HAL_DMA2D_Init>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d115      	bne.n	800317c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003150:	68f9      	ldr	r1, [r7, #12]
 8003152:	480c      	ldr	r0, [pc, #48]	; (8003184 <FillBuffer+0x68>)
 8003154:	f000 ffbe 	bl	80040d4 <HAL_DMA2D_ConfigLayer>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10e      	bne.n	800317c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69f9      	ldr	r1, [r7, #28]
 8003168:	4806      	ldr	r0, [pc, #24]	; (8003184 <FillBuffer+0x68>)
 800316a:	f000 fe9e 	bl	8003eaa <HAL_DMA2D_Start>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d103      	bne.n	800317c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003174:	210a      	movs	r1, #10
 8003176:	4803      	ldr	r0, [pc, #12]	; (8003184 <FillBuffer+0x68>)
 8003178:	f000 fec2 	bl	8003f00 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20000434 	.word	0x20000434
 8003188:	4002b000 	.word	0x4002b000

0800318c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003190:	4b29      	ldr	r3, [pc, #164]	; (8003238 <BSP_SDRAM_Init+0xac>)
 8003192:	4a2a      	ldr	r2, [pc, #168]	; (800323c <BSP_SDRAM_Init+0xb0>)
 8003194:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003196:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <BSP_SDRAM_Init+0xb4>)
 8003198:	2202      	movs	r2, #2
 800319a:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800319c:	4b28      	ldr	r3, [pc, #160]	; (8003240 <BSP_SDRAM_Init+0xb4>)
 800319e:	2207      	movs	r2, #7
 80031a0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <BSP_SDRAM_Init+0xb4>)
 80031a4:	2204      	movs	r2, #4
 80031a6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <BSP_SDRAM_Init+0xb4>)
 80031aa:	2207      	movs	r2, #7
 80031ac:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80031ae:	4b24      	ldr	r3, [pc, #144]	; (8003240 <BSP_SDRAM_Init+0xb4>)
 80031b0:	2202      	movs	r2, #2
 80031b2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80031b4:	4b22      	ldr	r3, [pc, #136]	; (8003240 <BSP_SDRAM_Init+0xb4>)
 80031b6:	2202      	movs	r2, #2
 80031b8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80031ba:	4b21      	ldr	r3, [pc, #132]	; (8003240 <BSP_SDRAM_Init+0xb4>)
 80031bc:	2202      	movs	r2, #2
 80031be:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80031c0:	4b1d      	ldr	r3, [pc, #116]	; (8003238 <BSP_SDRAM_Init+0xac>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80031c6:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <BSP_SDRAM_Init+0xac>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80031cc:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <BSP_SDRAM_Init+0xac>)
 80031ce:	2204      	movs	r2, #4
 80031d0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <BSP_SDRAM_Init+0xac>)
 80031d4:	2210      	movs	r2, #16
 80031d6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80031d8:	4b17      	ldr	r3, [pc, #92]	; (8003238 <BSP_SDRAM_Init+0xac>)
 80031da:	2240      	movs	r2, #64	; 0x40
 80031dc:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80031de:	4b16      	ldr	r3, [pc, #88]	; (8003238 <BSP_SDRAM_Init+0xac>)
 80031e0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80031e4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <BSP_SDRAM_Init+0xac>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80031ec:	4b12      	ldr	r3, [pc, #72]	; (8003238 <BSP_SDRAM_Init+0xac>)
 80031ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031f2:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80031f4:	4b10      	ldr	r3, [pc, #64]	; (8003238 <BSP_SDRAM_Init+0xac>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <BSP_SDRAM_Init+0xac>)
 80031fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003202:	2100      	movs	r1, #0
 8003204:	480c      	ldr	r0, [pc, #48]	; (8003238 <BSP_SDRAM_Init+0xac>)
 8003206:	f000 f87f 	bl	8003308 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800320a:	490d      	ldr	r1, [pc, #52]	; (8003240 <BSP_SDRAM_Init+0xb4>)
 800320c:	480a      	ldr	r0, [pc, #40]	; (8003238 <BSP_SDRAM_Init+0xac>)
 800320e:	f003 fb91 	bl	8006934 <HAL_SDRAM_Init>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <BSP_SDRAM_Init+0xb8>)
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e002      	b.n	8003226 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003220:	4b08      	ldr	r3, [pc, #32]	; (8003244 <BSP_SDRAM_Init+0xb8>)
 8003222:	2200      	movs	r2, #0
 8003224:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003226:	f240 506a 	movw	r0, #1386	; 0x56a
 800322a:	f000 f80d 	bl	8003248 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <BSP_SDRAM_Init+0xb8>)
 8003230:	781b      	ldrb	r3, [r3, #0]
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200004c8 	.word	0x200004c8
 800323c:	a0000140 	.word	0xa0000140
 8003240:	200004fc 	.word	0x200004fc
 8003244:	20000188 	.word	0x20000188

08003248 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003250:	2300      	movs	r3, #0
 8003252:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003254:	4b2a      	ldr	r3, [pc, #168]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003256:	2201      	movs	r2, #1
 8003258:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800325a:	4b29      	ldr	r3, [pc, #164]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800325c:	2208      	movs	r2, #8
 800325e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003260:	4b27      	ldr	r3, [pc, #156]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003262:	2201      	movs	r2, #1
 8003264:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003268:	2200      	movs	r2, #0
 800326a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800326c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003270:	4923      	ldr	r1, [pc, #140]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003272:	4824      	ldr	r0, [pc, #144]	; (8003304 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003274:	f003 fb9c 	bl	80069b0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003278:	2001      	movs	r0, #1
 800327a:	f000 facf 	bl	800381c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003280:	2202      	movs	r2, #2
 8003282:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003286:	2208      	movs	r2, #8
 8003288:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800328c:	2201      	movs	r2, #1
 800328e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003292:	2200      	movs	r2, #0
 8003294:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003296:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800329a:	4919      	ldr	r1, [pc, #100]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800329c:	4819      	ldr	r0, [pc, #100]	; (8003304 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800329e:	f003 fb87 	bl	80069b0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80032a2:	4b17      	ldr	r3, [pc, #92]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032a4:	2203      	movs	r2, #3
 80032a6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80032a8:	4b15      	ldr	r3, [pc, #84]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032aa:	2208      	movs	r2, #8
 80032ac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80032ae:	4b14      	ldr	r3, [pc, #80]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032b0:	2204      	movs	r2, #4
 80032b2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80032ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032be:	4910      	ldr	r1, [pc, #64]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032c0:	4810      	ldr	r0, [pc, #64]	; (8003304 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032c2:	f003 fb75 	bl	80069b0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80032c6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80032ca:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032ce:	2204      	movs	r2, #4
 80032d0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032d4:	2208      	movs	r2, #8
 80032d6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032da:	2201      	movs	r2, #1
 80032dc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a07      	ldr	r2, [pc, #28]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032e2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80032e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e8:	4905      	ldr	r1, [pc, #20]	; (8003300 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032ea:	4806      	ldr	r0, [pc, #24]	; (8003304 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032ec:	f003 fb60 	bl	80069b0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4804      	ldr	r0, [pc, #16]	; (8003304 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80032f4:	f003 fb87 	bl	8006a06 <HAL_SDRAM_ProgramRefreshRate>
}
 80032f8:	bf00      	nop
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000518 	.word	0x20000518
 8003304:	200004c8 	.word	0x200004c8

08003308 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b090      	sub	sp, #64	; 0x40
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80ec 	beq.w	80034f2 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	62bb      	str	r3, [r7, #40]	; 0x28
 800331e:	4b77      	ldr	r3, [pc, #476]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003322:	4a76      	ldr	r2, [pc, #472]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6393      	str	r3, [r2, #56]	; 0x38
 800332a:	4b74      	ldr	r3, [pc, #464]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 800332c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
 800333a:	4b70      	ldr	r3, [pc, #448]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333e:	4a6f      	ldr	r2, [pc, #444]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003340:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003344:	6313      	str	r3, [r2, #48]	; 0x30
 8003346:	4b6d      	ldr	r3, [pc, #436]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	623b      	str	r3, [r7, #32]
 8003356:	4b69      	ldr	r3, [pc, #420]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a68      	ldr	r2, [pc, #416]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b66      	ldr	r3, [pc, #408]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	623b      	str	r3, [r7, #32]
 800336c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	4b62      	ldr	r3, [pc, #392]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a61      	ldr	r2, [pc, #388]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003378:	f043 0304 	orr.w	r3, r3, #4
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b5f      	ldr	r3, [pc, #380]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	61fb      	str	r3, [r7, #28]
 8003388:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	4b5b      	ldr	r3, [pc, #364]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a5a      	ldr	r2, [pc, #360]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 8003394:	f043 0308 	orr.w	r3, r3, #8
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b58      	ldr	r3, [pc, #352]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	4b54      	ldr	r3, [pc, #336]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a53      	ldr	r2, [pc, #332]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 80033b0:	f043 0310 	orr.w	r3, r3, #16
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b51      	ldr	r3, [pc, #324]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	4b4d      	ldr	r3, [pc, #308]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4a4c      	ldr	r2, [pc, #304]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 80033cc:	f043 0320 	orr.w	r3, r3, #32
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	4b46      	ldr	r3, [pc, #280]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a45      	ldr	r2, [pc, #276]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 80033e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b43      	ldr	r3, [pc, #268]	; (80034fc <BSP_SDRAM_MspInit+0x1f4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80033fe:	2302      	movs	r3, #2
 8003400:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003402:	2300      	movs	r3, #0
 8003404:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003406:	230c      	movs	r3, #12
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800340a:	2360      	movs	r3, #96	; 0x60
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800340e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003412:	4619      	mov	r1, r3
 8003414:	483a      	ldr	r0, [pc, #232]	; (8003500 <BSP_SDRAM_MspInit+0x1f8>)
 8003416:	f000 ff8b 	bl	8004330 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800341a:	2301      	movs	r3, #1
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800341e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003422:	4619      	mov	r1, r3
 8003424:	4837      	ldr	r0, [pc, #220]	; (8003504 <BSP_SDRAM_MspInit+0x1fc>)
 8003426:	f000 ff83 	bl	8004330 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800342a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800342e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003430:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003434:	4619      	mov	r1, r3
 8003436:	4834      	ldr	r0, [pc, #208]	; (8003508 <BSP_SDRAM_MspInit+0x200>)
 8003438:	f000 ff7a 	bl	8004330 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800343c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003442:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003446:	4619      	mov	r1, r3
 8003448:	4830      	ldr	r0, [pc, #192]	; (800350c <BSP_SDRAM_MspInit+0x204>)
 800344a:	f000 ff71 	bl	8004330 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800344e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003458:	4619      	mov	r1, r3
 800345a:	482d      	ldr	r0, [pc, #180]	; (8003510 <BSP_SDRAM_MspInit+0x208>)
 800345c:	f000 ff68 	bl	8004330 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003460:	f248 1333 	movw	r3, #33075	; 0x8133
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800346a:	4619      	mov	r1, r3
 800346c:	4829      	ldr	r0, [pc, #164]	; (8003514 <BSP_SDRAM_MspInit+0x20c>)
 800346e:	f000 ff5f 	bl	8004330 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003472:	4b29      	ldr	r3, [pc, #164]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 8003474:	2200      	movs	r2, #0
 8003476:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003478:	4b27      	ldr	r3, [pc, #156]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 800347a:	2280      	movs	r2, #128	; 0x80
 800347c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800347e:	4b26      	ldr	r3, [pc, #152]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 8003480:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003484:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003486:	4b24      	ldr	r3, [pc, #144]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 8003488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800348c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800348e:	4b22      	ldr	r3, [pc, #136]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 8003490:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003494:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 8003498:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800349c:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80034a4:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034aa:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80034ac:	4b1a      	ldr	r3, [pc, #104]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80034b2:	4b19      	ldr	r3, [pc, #100]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034b4:	2203      	movs	r2, #3
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80034b8:	4b17      	ldr	r3, [pc, #92]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80034be:	4b16      	ldr	r3, [pc, #88]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 80034c4:	4b14      	ldr	r3, [pc, #80]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034c6:	4a15      	ldr	r2, [pc, #84]	; (800351c <BSP_SDRAM_MspInit+0x214>)
 80034c8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a12      	ldr	r2, [pc, #72]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
 80034d0:	4a11      	ldr	r2, [pc, #68]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 80034d6:	4810      	ldr	r0, [pc, #64]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034d8:	f000 fb84 	bl	8003be4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 80034dc:	480e      	ldr	r0, [pc, #56]	; (8003518 <BSP_SDRAM_MspInit+0x210>)
 80034de:	f000 fad3 	bl	8003a88 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80034e2:	2200      	movs	r2, #0
 80034e4:	210f      	movs	r1, #15
 80034e6:	2038      	movs	r0, #56	; 0x38
 80034e8:	f000 fa97 	bl	8003a1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80034ec:	2038      	movs	r0, #56	; 0x38
 80034ee:	f000 fab0 	bl	8003a52 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80034f2:	bf00      	nop
 80034f4:	3740      	adds	r7, #64	; 0x40
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	40020400 	.word	0x40020400
 8003504:	40020800 	.word	0x40020800
 8003508:	40020c00 	.word	0x40020c00
 800350c:	40021000 	.word	0x40021000
 8003510:	40021400 	.word	0x40021400
 8003514:	40021800 	.word	0x40021800
 8003518:	20000528 	.word	0x20000528
 800351c:	40026410 	.word	0x40026410

08003520 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	460a      	mov	r2, r1
 800352a:	80fb      	strh	r3, [r7, #6]
 800352c:	4613      	mov	r3, r2
 800352e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003534:	4a13      	ldr	r2, [pc, #76]	; (8003584 <BSP_TS_Init+0x64>)
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800353a:	4a13      	ldr	r2, [pc, #76]	; (8003588 <BSP_TS_Init+0x68>)
 800353c:	88bb      	ldrh	r3, [r7, #4]
 800353e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <BSP_TS_Init+0x6c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2082      	movs	r0, #130	; 0x82
 8003546:	4798      	blx	r3
 8003548:	4603      	mov	r3, r0
 800354a:	461a      	mov	r2, r3
 800354c:	f640 0311 	movw	r3, #2065	; 0x811
 8003550:	429a      	cmp	r2, r3
 8003552:	d104      	bne.n	800355e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <BSP_TS_Init+0x70>)
 8003556:	4a0d      	ldr	r2, [pc, #52]	; (800358c <BSP_TS_Init+0x6c>)
 8003558:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d109      	bne.n	8003578 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003564:	4b0a      	ldr	r3, [pc, #40]	; (8003590 <BSP_TS_Init+0x70>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2082      	movs	r0, #130	; 0x82
 800356c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 800356e:	4b08      	ldr	r3, [pc, #32]	; (8003590 <BSP_TS_Init+0x70>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	2082      	movs	r0, #130	; 0x82
 8003576:	4798      	blx	r3
  }

  return ret;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	2000058c 	.word	0x2000058c
 8003588:	2000058e 	.word	0x2000058e
 800358c:	20000138 	.word	0x20000138
 8003590:	20000588 	.word	0x20000588

08003594 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8003598:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <BSP_TS_ITGetStatus+0x14>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	2082      	movs	r0, #130	; 0x82
 80035a0:	4798      	blx	r3
 80035a2:	4603      	mov	r3, r0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20000588 	.word	0x20000588

080035ac <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 80035b4:	4b4f      	ldr	r3, [pc, #316]	; (80036f4 <BSP_TS_GetState+0x148>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2082      	movs	r0, #130	; 0x82
 80035bc:	4798      	blx	r3
 80035be:	4603      	mov	r3, r0
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 808d 	beq.w	80036ea <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80035d0:	4b48      	ldr	r3, [pc, #288]	; (80036f4 <BSP_TS_GetState+0x148>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	f107 020c 	add.w	r2, r7, #12
 80035da:	f107 010e 	add.w	r1, r7, #14
 80035de:	2082      	movs	r0, #130	; 0x82
 80035e0:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80035e2:	89bb      	ldrh	r3, [r7, #12]
 80035e4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80035ec:	89bb      	ldrh	r3, [r7, #12]
 80035ee:	4a42      	ldr	r2, [pc, #264]	; (80036f8 <BSP_TS_GetState+0x14c>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	08db      	lsrs	r3, r3, #3
 80035f6:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80035f8:	8abb      	ldrh	r3, [r7, #20]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	82bb      	strh	r3, [r7, #20]
 8003602:	e008      	b.n	8003616 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003604:	4b3d      	ldr	r3, [pc, #244]	; (80036fc <BSP_TS_GetState+0x150>)
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	8aba      	ldrh	r2, [r7, #20]
 800360a:	429a      	cmp	r2, r3
 800360c:	d903      	bls.n	8003616 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <BSP_TS_GetState+0x150>)
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	3b01      	subs	r3, #1
 8003614:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003616:	8abb      	ldrh	r3, [r7, #20]
 8003618:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800361a:	89fb      	ldrh	r3, [r7, #14]
 800361c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003620:	4293      	cmp	r3, r2
 8003622:	d806      	bhi.n	8003632 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003624:	89fb      	ldrh	r3, [r7, #14]
 8003626:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800362a:	330e      	adds	r3, #14
 800362c:	b29b      	uxth	r3, r3
 800362e:	81fb      	strh	r3, [r7, #14]
 8003630:	e005      	b.n	800363e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003632:	89fb      	ldrh	r3, [r7, #14]
 8003634:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003638:	3308      	adds	r3, #8
 800363a:	b29b      	uxth	r3, r3
 800363c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800363e:	89fb      	ldrh	r3, [r7, #14]
 8003640:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <BSP_TS_GetState+0x154>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	08db      	lsrs	r3, r3, #3
 8003648:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800364a:	8afb      	ldrh	r3, [r7, #22]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	82fb      	strh	r3, [r7, #22]
 8003654:	e008      	b.n	8003668 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003656:	4b2b      	ldr	r3, [pc, #172]	; (8003704 <BSP_TS_GetState+0x158>)
 8003658:	881b      	ldrh	r3, [r3, #0]
 800365a:	8afa      	ldrh	r2, [r7, #22]
 800365c:	429a      	cmp	r2, r3
 800365e:	d903      	bls.n	8003668 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003660:	4b28      	ldr	r3, [pc, #160]	; (8003704 <BSP_TS_GetState+0x158>)
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	3b01      	subs	r3, #1
 8003666:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003668:	8afb      	ldrh	r3, [r7, #22]
 800366a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 800366c:	89fb      	ldrh	r3, [r7, #14]
 800366e:	461a      	mov	r2, r3
 8003670:	4b25      	ldr	r3, [pc, #148]	; (8003708 <BSP_TS_GetState+0x15c>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d906      	bls.n	8003686 <BSP_TS_GetState+0xda>
 8003678:	89fa      	ldrh	r2, [r7, #14]
 800367a:	4b23      	ldr	r3, [pc, #140]	; (8003708 <BSP_TS_GetState+0x15c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	b29b      	uxth	r3, r3
 8003684:	e005      	b.n	8003692 <BSP_TS_GetState+0xe6>
 8003686:	4b20      	ldr	r3, [pc, #128]	; (8003708 <BSP_TS_GetState+0x15c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	b29a      	uxth	r2, r3
 800368c:	89fb      	ldrh	r3, [r7, #14]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	b29b      	uxth	r3, r3
 8003692:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003694:	89bb      	ldrh	r3, [r7, #12]
 8003696:	461a      	mov	r2, r3
 8003698:	4b1c      	ldr	r3, [pc, #112]	; (800370c <BSP_TS_GetState+0x160>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d906      	bls.n	80036ae <BSP_TS_GetState+0x102>
 80036a0:	89ba      	ldrh	r2, [r7, #12]
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <BSP_TS_GetState+0x160>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	e005      	b.n	80036ba <BSP_TS_GetState+0x10e>
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <BSP_TS_GetState+0x160>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	89bb      	ldrh	r3, [r7, #12]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 80036bc:	8a7a      	ldrh	r2, [r7, #18]
 80036be:	8a3b      	ldrh	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	dd07      	ble.n	80036d6 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 80036c6:	89fb      	ldrh	r3, [r7, #14]
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <BSP_TS_GetState+0x15c>)
 80036cc:	601a      	str	r2, [r3, #0]
      _y = y; 
 80036ce:	89bb      	ldrh	r3, [r7, #12]
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b0e      	ldr	r3, [pc, #56]	; (800370c <BSP_TS_GetState+0x160>)
 80036d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80036d6:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <BSP_TS_GetState+0x15c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b29a      	uxth	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <BSP_TS_GetState+0x160>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	809a      	strh	r2, [r3, #4]
  }
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20000588 	.word	0x20000588
 80036f8:	ba2e8ba3 	.word	0xba2e8ba3
 80036fc:	2000058e 	.word	0x2000058e
 8003700:	88888889 	.word	0x88888889
 8003704:	2000058c 	.word	0x2000058c
 8003708:	20000590 	.word	0x20000590
 800370c:	20000594 	.word	0x20000594

08003710 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8003714:	4b03      	ldr	r3, [pc, #12]	; (8003724 <BSP_TS_ITClear+0x14>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	2082      	movs	r0, #130	; 0x82
 800371c:	4798      	blx	r3
}
 800371e:	bf00      	nop
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20000588 	.word	0x20000588

08003728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800372c:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <HAL_Init+0x40>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_Init+0x40>)
 8003732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_Init+0x40>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_Init+0x40>)
 800373e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_Init+0x40>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_Init+0x40>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003750:	2003      	movs	r0, #3
 8003752:	f000 f957 	bl	8003a04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003756:	200f      	movs	r0, #15
 8003758:	f000 f810 	bl	800377c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800375c:	f000 f806 	bl	800376c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40023c00 	.word	0x40023c00

0800376c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003784:	4b12      	ldr	r3, [pc, #72]	; (80037d0 <HAL_InitTick+0x54>)
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b12      	ldr	r3, [pc, #72]	; (80037d4 <HAL_InitTick+0x58>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	4619      	mov	r1, r3
 800378e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003792:	fbb3 f3f1 	udiv	r3, r3, r1
 8003796:	fbb2 f3f3 	udiv	r3, r2, r3
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f967 	bl	8003a6e <HAL_SYSTICK_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e00e      	b.n	80037c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b0f      	cmp	r3, #15
 80037ae:	d80a      	bhi.n	80037c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037b0:	2200      	movs	r2, #0
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037b8:	f000 f92f 	bl	8003a1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037bc:	4a06      	ldr	r2, [pc, #24]	; (80037d8 <HAL_InitTick+0x5c>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	e000      	b.n	80037c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3708      	adds	r7, #8
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	200000fc 	.word	0x200000fc
 80037d4:	20000190 	.word	0x20000190
 80037d8:	2000018c 	.word	0x2000018c

080037dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <HAL_IncTick+0x20>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_IncTick+0x24>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <HAL_IncTick+0x24>)
 80037ee:	6013      	str	r3, [r2, #0]
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20000190 	.word	0x20000190
 8003800:	20000598 	.word	0x20000598

08003804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return uwTick;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <HAL_GetTick+0x14>)
 800380a:	681b      	ldr	r3, [r3, #0]
}
 800380c:	4618      	mov	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000598 	.word	0x20000598

0800381c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003824:	f7ff ffee 	bl	8003804 <HAL_GetTick>
 8003828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003834:	d005      	beq.n	8003842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003836:	4b0a      	ldr	r3, [pc, #40]	; (8003860 <HAL_Delay+0x44>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003842:	bf00      	nop
 8003844:	f7ff ffde 	bl	8003804 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	429a      	cmp	r2, r3
 8003852:	d8f7      	bhi.n	8003844 <HAL_Delay+0x28>
  {
  }
}
 8003854:	bf00      	nop
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000190 	.word	0x20000190

08003864 <__NVIC_SetPriorityGrouping>:
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f003 0307 	and.w	r3, r3, #7
 8003872:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003874:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003880:	4013      	ands	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800388c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003896:	4a04      	ldr	r2, [pc, #16]	; (80038a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	60d3      	str	r3, [r2, #12]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	e000ed00 	.word	0xe000ed00

080038ac <__NVIC_GetPriorityGrouping>:
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b0:	4b04      	ldr	r3, [pc, #16]	; (80038c4 <__NVIC_GetPriorityGrouping+0x18>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	0a1b      	lsrs	r3, r3, #8
 80038b6:	f003 0307 	and.w	r3, r3, #7
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <__NVIC_EnableIRQ>:
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	db0b      	blt.n	80038f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	f003 021f 	and.w	r2, r3, #31
 80038e0:	4907      	ldr	r1, [pc, #28]	; (8003900 <__NVIC_EnableIRQ+0x38>)
 80038e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2001      	movs	r0, #1
 80038ea:	fa00 f202 	lsl.w	r2, r0, r2
 80038ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	e000e100 	.word	0xe000e100

08003904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	6039      	str	r1, [r7, #0]
 800390e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	2b00      	cmp	r3, #0
 8003916:	db0a      	blt.n	800392e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	b2da      	uxtb	r2, r3
 800391c:	490c      	ldr	r1, [pc, #48]	; (8003950 <__NVIC_SetPriority+0x4c>)
 800391e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003922:	0112      	lsls	r2, r2, #4
 8003924:	b2d2      	uxtb	r2, r2
 8003926:	440b      	add	r3, r1
 8003928:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800392c:	e00a      	b.n	8003944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	b2da      	uxtb	r2, r3
 8003932:	4908      	ldr	r1, [pc, #32]	; (8003954 <__NVIC_SetPriority+0x50>)
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	3b04      	subs	r3, #4
 800393c:	0112      	lsls	r2, r2, #4
 800393e:	b2d2      	uxtb	r2, r2
 8003940:	440b      	add	r3, r1
 8003942:	761a      	strb	r2, [r3, #24]
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000e100 	.word	0xe000e100
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f1c3 0307 	rsb	r3, r3, #7
 8003972:	2b04      	cmp	r3, #4
 8003974:	bf28      	it	cs
 8003976:	2304      	movcs	r3, #4
 8003978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	3304      	adds	r3, #4
 800397e:	2b06      	cmp	r3, #6
 8003980:	d902      	bls.n	8003988 <NVIC_EncodePriority+0x30>
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	3b03      	subs	r3, #3
 8003986:	e000      	b.n	800398a <NVIC_EncodePriority+0x32>
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800398c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	fa02 f303 	lsl.w	r3, r2, r3
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	401a      	ands	r2, r3
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa01 f303 	lsl.w	r3, r1, r3
 80039aa:	43d9      	mvns	r1, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	4313      	orrs	r3, r2
         );
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3724      	adds	r7, #36	; 0x24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039d0:	d301      	bcc.n	80039d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039d2:	2301      	movs	r3, #1
 80039d4:	e00f      	b.n	80039f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039d6:	4a0a      	ldr	r2, [pc, #40]	; (8003a00 <SysTick_Config+0x40>)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3b01      	subs	r3, #1
 80039dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039de:	210f      	movs	r1, #15
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e4:	f7ff ff8e 	bl	8003904 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <SysTick_Config+0x40>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ee:	4b04      	ldr	r3, [pc, #16]	; (8003a00 <SysTick_Config+0x40>)
 80039f0:	2207      	movs	r2, #7
 80039f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	e000e010 	.word	0xe000e010

08003a04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7ff ff29 	bl	8003864 <__NVIC_SetPriorityGrouping>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	4603      	mov	r3, r0
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	607a      	str	r2, [r7, #4]
 8003a26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a2c:	f7ff ff3e 	bl	80038ac <__NVIC_GetPriorityGrouping>
 8003a30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	6978      	ldr	r0, [r7, #20]
 8003a38:	f7ff ff8e 	bl	8003958 <NVIC_EncodePriority>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a42:	4611      	mov	r1, r2
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7ff ff5d 	bl	8003904 <__NVIC_SetPriority>
}
 8003a4a:	bf00      	nop
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	4603      	mov	r3, r0
 8003a5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ff31 	bl	80038c8 <__NVIC_EnableIRQ>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ffa2 	bl	80039c0 <SysTick_Config>
 8003a7c:	4603      	mov	r3, r0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a94:	f7ff feb6 	bl	8003804 <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e099      	b.n	8003bd8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac4:	e00f      	b.n	8003ae6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ac6:	f7ff fe9d 	bl	8003804 <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b05      	cmp	r3, #5
 8003ad2:	d908      	bls.n	8003ae6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2203      	movs	r2, #3
 8003ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e078      	b.n	8003bd8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d1e8      	bne.n	8003ac6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4b38      	ldr	r3, [pc, #224]	; (8003be0 <HAL_DMA_Init+0x158>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a1b      	ldr	r3, [r3, #32]
 8003b30:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d107      	bne.n	8003b50 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 0307 	bic.w	r3, r3, #7
 8003b66:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d117      	bne.n	8003baa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00e      	beq.n	8003baa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8bd 	bl	8003d0c <DMA_CheckFifoParam>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e016      	b.n	8003bd8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 f874 	bl	8003ca0 <DMA_CalcBaseAndBitshift>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	223f      	movs	r2, #63	; 0x3f
 8003bc2:	409a      	lsls	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	f010803f 	.word	0xf010803f

08003be4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e050      	b.n	8003c98 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d101      	bne.n	8003c06 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
 8003c04:	e048      	b.n	8003c98 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2200      	movs	r2, #0
 8003c24:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2200      	movs	r2, #0
 8003c34:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2221      	movs	r2, #33	; 0x21
 8003c44:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f82a 	bl	8003ca0 <DMA_CalcBaseAndBitshift>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	223f      	movs	r2, #63	; 0x3f
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	3b10      	subs	r3, #16
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <DMA_CalcBaseAndBitshift+0x64>)
 8003cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb6:	091b      	lsrs	r3, r3, #4
 8003cb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cba:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <DMA_CalcBaseAndBitshift+0x68>)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2b03      	cmp	r3, #3
 8003ccc:	d909      	bls.n	8003ce2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cd6:	f023 0303 	bic.w	r3, r3, #3
 8003cda:	1d1a      	adds	r2, r3, #4
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	659a      	str	r2, [r3, #88]	; 0x58
 8003ce0:	e007      	b.n	8003cf2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cea:	f023 0303 	bic.w	r3, r3, #3
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	aaaaaaab 	.word	0xaaaaaaab
 8003d08:	0800b374 	.word	0x0800b374

08003d0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d11f      	bne.n	8003d66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d856      	bhi.n	8003dda <DMA_CheckFifoParam+0xce>
 8003d2c:	a201      	add	r2, pc, #4	; (adr r2, 8003d34 <DMA_CheckFifoParam+0x28>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d45 	.word	0x08003d45
 8003d38:	08003d57 	.word	0x08003d57
 8003d3c:	08003d45 	.word	0x08003d45
 8003d40:	08003ddb 	.word	0x08003ddb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d046      	beq.n	8003dde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d54:	e043      	b.n	8003dde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d5e:	d140      	bne.n	8003de2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d64:	e03d      	b.n	8003de2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6e:	d121      	bne.n	8003db4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d837      	bhi.n	8003de6 <DMA_CheckFifoParam+0xda>
 8003d76:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <DMA_CheckFifoParam+0x70>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d93 	.word	0x08003d93
 8003d84:	08003d8d 	.word	0x08003d8d
 8003d88:	08003da5 	.word	0x08003da5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d90:	e030      	b.n	8003df4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d025      	beq.n	8003dea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da2:	e022      	b.n	8003dea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003dac:	d11f      	bne.n	8003dee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003db2:	e01c      	b.n	8003dee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d903      	bls.n	8003dc2 <DMA_CheckFifoParam+0xb6>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d003      	beq.n	8003dc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dc0:	e018      	b.n	8003df4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc6:	e015      	b.n	8003df4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00e      	beq.n	8003df2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd8:	e00b      	b.n	8003df2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e00a      	b.n	8003df4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dde:	bf00      	nop
 8003de0:	e008      	b.n	8003df4 <DMA_CheckFifoParam+0xe8>
      break;
 8003de2:	bf00      	nop
 8003de4:	e006      	b.n	8003df4 <DMA_CheckFifoParam+0xe8>
      break;
 8003de6:	bf00      	nop
 8003de8:	e004      	b.n	8003df4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dea:	bf00      	nop
 8003dec:	e002      	b.n	8003df4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <DMA_CheckFifoParam+0xe8>
      break;
 8003df2:	bf00      	nop
    }
  } 
  
  return status; 
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop

08003e04 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e03b      	b.n	8003e8e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d106      	bne.n	8003e30 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f833 	bl	8003e96 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e54:	f023 0107 	bic.w	r1, r3, #7
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003e6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68d1      	ldr	r1, [r2, #12]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b086      	sub	sp, #24
 8003eae:	af02      	add	r7, sp, #8
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_DMA2D_Start+0x1c>
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	e018      	b.n	8003ef8 <HAL_DMA2D_Start+0x4e>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 f989 	bl	80041f8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0201 	orr.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d056      	beq.n	8003fca <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8003f1c:	f7ff fc72 	bl	8003804 <HAL_GetTick>
 8003f20:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003f22:	e04b      	b.n	8003fbc <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d023      	beq.n	8003f7e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	f043 0202 	orr.w	r2, r3, #2
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2221      	movs	r2, #33	; 0x21
 8003f68:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e0a5      	b.n	80040ca <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f84:	d01a      	beq.n	8003fbc <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8003f86:	f7ff fc3d 	bl	8003804 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <HAL_DMA2D_PollForTransfer+0x9c>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10f      	bne.n	8003fbc <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa0:	f043 0220 	orr.w	r2, r3, #32
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2203      	movs	r2, #3
 8003fac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e086      	b.n	80040ca <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0ac      	beq.n	8003f24 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d061      	beq.n	80040b0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fec:	f7ff fc0a 	bl	8003804 <HAL_GetTick>
 8003ff0:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003ff2:	e056      	b.n	80040a2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004002:	2b00      	cmp	r3, #0
 8004004:	d02e      	beq.n	8004064 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	f043 0204 	orr.w	r2, r3, #4
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	f043 0202 	orr.w	r2, r3, #2
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004040:	f043 0201 	orr.w	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2229      	movs	r2, #41	; 0x29
 800404e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2204      	movs	r2, #4
 8004054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e032      	b.n	80040ca <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800406a:	d01a      	beq.n	80040a2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 800406c:	f7ff fbca 	bl	8003804 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d302      	bcc.n	8004082 <HAL_DMA2D_PollForTransfer+0x182>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2203      	movs	r2, #3
 8004092:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e013      	b.n	80040ca <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0a1      	beq.n	8003ff4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2212      	movs	r2, #18
 80040b6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_DMA2D_ConfigLayer+0x20>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e079      	b.n	80041e8 <HAL_DMA2D_ConfigLayer+0x114>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	011b      	lsls	r3, r3, #4
 8004108:	3318      	adds	r3, #24
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800411e:	4b35      	ldr	r3, [pc, #212]	; (80041f4 <HAL_DMA2D_ConfigLayer+0x120>)
 8004120:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b0a      	cmp	r3, #10
 8004128:	d003      	beq.n	8004132 <HAL_DMA2D_ConfigLayer+0x5e>
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b09      	cmp	r3, #9
 8004130:	d107      	bne.n	8004142 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800413a:	697a      	ldr	r2, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	e005      	b.n	800414e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	061b      	lsls	r3, r3, #24
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d120      	bne.n	8004196 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	43db      	mvns	r3, r3
 800415e:	ea02 0103 	and.w	r1, r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	430a      	orrs	r2, r1
 800416a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	6812      	ldr	r2, [r2, #0]
 8004174:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b0a      	cmp	r3, #10
 800417c:	d003      	beq.n	8004186 <HAL_DMA2D_ConfigLayer+0xb2>
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b09      	cmp	r3, #9
 8004184:	d127      	bne.n	80041d6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
 8004194:	e01f      	b.n	80041d6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69da      	ldr	r2, [r3, #28]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	43db      	mvns	r3, r3
 80041a0:	ea02 0103 	and.w	r1, r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b0a      	cmp	r3, #10
 80041be:	d003      	beq.n	80041c8 <HAL_DMA2D_ConfigLayer+0xf4>
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b09      	cmp	r3, #9
 80041c6:	d106      	bne.n	80041d6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80041d4:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	371c      	adds	r7, #28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	ff03000f 	.word	0xff03000f

080041f8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b08b      	sub	sp, #44	; 0x2c
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	041a      	lsls	r2, r3, #16
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	431a      	orrs	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004230:	d174      	bne.n	800431c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004238:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004240:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004248:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d108      	bne.n	800426a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	431a      	orrs	r2, r3
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	4313      	orrs	r3, r2
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	627b      	str	r3, [r7, #36]	; 0x24
 8004268:	e053      	b.n	8004312 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d106      	bne.n	8004280 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4313      	orrs	r3, r2
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
 800427e:	e048      	b.n	8004312 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b02      	cmp	r3, #2
 8004286:	d111      	bne.n	80042ac <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	0cdb      	lsrs	r3, r3, #19
 800428c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	0a9b      	lsrs	r3, r3, #10
 8004292:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	08db      	lsrs	r3, r3, #3
 8004298:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	02db      	lsls	r3, r3, #11
 80042a2:	4313      	orrs	r3, r2
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
 80042aa:	e032      	b.n	8004312 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	2b03      	cmp	r3, #3
 80042b2:	d117      	bne.n	80042e4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	0fdb      	lsrs	r3, r3, #31
 80042b8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	0cdb      	lsrs	r3, r3, #19
 80042be:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	0adb      	lsrs	r3, r3, #11
 80042c4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	08db      	lsrs	r3, r3, #3
 80042ca:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	029b      	lsls	r3, r3, #10
 80042d4:	431a      	orrs	r2, r3
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	03db      	lsls	r3, r3, #15
 80042da:	4313      	orrs	r3, r2
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
 80042e2:	e016      	b.n	8004312 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	0f1b      	lsrs	r3, r3, #28
 80042e8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	0d1b      	lsrs	r3, r3, #20
 80042ee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	0b1b      	lsrs	r3, r3, #12
 80042f4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	011a      	lsls	r2, r3, #4
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	431a      	orrs	r2, r3
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	031b      	lsls	r3, r3, #12
 800430a:	4313      	orrs	r3, r2
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004318:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800431a:	e003      	b.n	8004324 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	60da      	str	r2, [r3, #12]
}
 8004324:	bf00      	nop
 8004326:	372c      	adds	r7, #44	; 0x2c
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004330:	b480      	push	{r7}
 8004332:	b089      	sub	sp, #36	; 0x24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
 800434a:	e177      	b.n	800463c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800434c:	2201      	movs	r2, #1
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4013      	ands	r3, r2
 800435e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	429a      	cmp	r2, r3
 8004366:	f040 8166 	bne.w	8004636 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d00b      	beq.n	800438a <HAL_GPIO_Init+0x5a>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d007      	beq.n	800438a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800437e:	2b11      	cmp	r3, #17
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b12      	cmp	r3, #18
 8004388:	d130      	bne.n	80043ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	2203      	movs	r2, #3
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43db      	mvns	r3, r3
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	4013      	ands	r3, r2
 80043a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043c0:	2201      	movs	r2, #1
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	4013      	ands	r3, r2
 80043ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 0201 	and.w	r2, r3, #1
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	2203      	movs	r2, #3
 80043f8:	fa02 f303 	lsl.w	r3, r2, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d003      	beq.n	800442c <HAL_GPIO_Init+0xfc>
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b12      	cmp	r3, #18
 800442a:	d123      	bne.n	8004474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	08da      	lsrs	r2, r3, #3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3208      	adds	r2, #8
 8004434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	220f      	movs	r2, #15
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	fa02 f303 	lsl.w	r3, r2, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4313      	orrs	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	08da      	lsrs	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3208      	adds	r2, #8
 800446e:	69b9      	ldr	r1, [r7, #24]
 8004470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 0203 	and.w	r2, r3, #3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80c0 	beq.w	8004636 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	4b66      	ldr	r3, [pc, #408]	; (8004654 <HAL_GPIO_Init+0x324>)
 80044bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044be:	4a65      	ldr	r2, [pc, #404]	; (8004654 <HAL_GPIO_Init+0x324>)
 80044c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044c4:	6453      	str	r3, [r2, #68]	; 0x44
 80044c6:	4b63      	ldr	r3, [pc, #396]	; (8004654 <HAL_GPIO_Init+0x324>)
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044d2:	4a61      	ldr	r2, [pc, #388]	; (8004658 <HAL_GPIO_Init+0x328>)
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	089b      	lsrs	r3, r3, #2
 80044d8:	3302      	adds	r3, #2
 80044da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	220f      	movs	r2, #15
 80044ea:	fa02 f303 	lsl.w	r3, r2, r3
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a58      	ldr	r2, [pc, #352]	; (800465c <HAL_GPIO_Init+0x32c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d037      	beq.n	800456e <HAL_GPIO_Init+0x23e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a57      	ldr	r2, [pc, #348]	; (8004660 <HAL_GPIO_Init+0x330>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d031      	beq.n	800456a <HAL_GPIO_Init+0x23a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a56      	ldr	r2, [pc, #344]	; (8004664 <HAL_GPIO_Init+0x334>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d02b      	beq.n	8004566 <HAL_GPIO_Init+0x236>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a55      	ldr	r2, [pc, #340]	; (8004668 <HAL_GPIO_Init+0x338>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d025      	beq.n	8004562 <HAL_GPIO_Init+0x232>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a54      	ldr	r2, [pc, #336]	; (800466c <HAL_GPIO_Init+0x33c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01f      	beq.n	800455e <HAL_GPIO_Init+0x22e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a53      	ldr	r2, [pc, #332]	; (8004670 <HAL_GPIO_Init+0x340>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d019      	beq.n	800455a <HAL_GPIO_Init+0x22a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a52      	ldr	r2, [pc, #328]	; (8004674 <HAL_GPIO_Init+0x344>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <HAL_GPIO_Init+0x226>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a51      	ldr	r2, [pc, #324]	; (8004678 <HAL_GPIO_Init+0x348>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00d      	beq.n	8004552 <HAL_GPIO_Init+0x222>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a50      	ldr	r2, [pc, #320]	; (800467c <HAL_GPIO_Init+0x34c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d007      	beq.n	800454e <HAL_GPIO_Init+0x21e>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a4f      	ldr	r2, [pc, #316]	; (8004680 <HAL_GPIO_Init+0x350>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d101      	bne.n	800454a <HAL_GPIO_Init+0x21a>
 8004546:	2309      	movs	r3, #9
 8004548:	e012      	b.n	8004570 <HAL_GPIO_Init+0x240>
 800454a:	230a      	movs	r3, #10
 800454c:	e010      	b.n	8004570 <HAL_GPIO_Init+0x240>
 800454e:	2308      	movs	r3, #8
 8004550:	e00e      	b.n	8004570 <HAL_GPIO_Init+0x240>
 8004552:	2307      	movs	r3, #7
 8004554:	e00c      	b.n	8004570 <HAL_GPIO_Init+0x240>
 8004556:	2306      	movs	r3, #6
 8004558:	e00a      	b.n	8004570 <HAL_GPIO_Init+0x240>
 800455a:	2305      	movs	r3, #5
 800455c:	e008      	b.n	8004570 <HAL_GPIO_Init+0x240>
 800455e:	2304      	movs	r3, #4
 8004560:	e006      	b.n	8004570 <HAL_GPIO_Init+0x240>
 8004562:	2303      	movs	r3, #3
 8004564:	e004      	b.n	8004570 <HAL_GPIO_Init+0x240>
 8004566:	2302      	movs	r3, #2
 8004568:	e002      	b.n	8004570 <HAL_GPIO_Init+0x240>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <HAL_GPIO_Init+0x240>
 800456e:	2300      	movs	r3, #0
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	f002 0203 	and.w	r2, r2, #3
 8004576:	0092      	lsls	r2, r2, #2
 8004578:	4093      	lsls	r3, r2
 800457a:	69ba      	ldr	r2, [r7, #24]
 800457c:	4313      	orrs	r3, r2
 800457e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004580:	4935      	ldr	r1, [pc, #212]	; (8004658 <HAL_GPIO_Init+0x328>)
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	089b      	lsrs	r3, r3, #2
 8004586:	3302      	adds	r3, #2
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800458e:	4b3d      	ldr	r3, [pc, #244]	; (8004684 <HAL_GPIO_Init+0x354>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b2:	4a34      	ldr	r2, [pc, #208]	; (8004684 <HAL_GPIO_Init+0x354>)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045b8:	4b32      	ldr	r3, [pc, #200]	; (8004684 <HAL_GPIO_Init+0x354>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045dc:	4a29      	ldr	r2, [pc, #164]	; (8004684 <HAL_GPIO_Init+0x354>)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045e2:	4b28      	ldr	r3, [pc, #160]	; (8004684 <HAL_GPIO_Init+0x354>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	43db      	mvns	r3, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4013      	ands	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004606:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <HAL_GPIO_Init+0x354>)
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800460c:	4b1d      	ldr	r3, [pc, #116]	; (8004684 <HAL_GPIO_Init+0x354>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004630:	4a14      	ldr	r2, [pc, #80]	; (8004684 <HAL_GPIO_Init+0x354>)
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	3301      	adds	r3, #1
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b0f      	cmp	r3, #15
 8004640:	f67f ae84 	bls.w	800434c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop
 8004648:	3724      	adds	r7, #36	; 0x24
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40023800 	.word	0x40023800
 8004658:	40013800 	.word	0x40013800
 800465c:	40020000 	.word	0x40020000
 8004660:	40020400 	.word	0x40020400
 8004664:	40020800 	.word	0x40020800
 8004668:	40020c00 	.word	0x40020c00
 800466c:	40021000 	.word	0x40021000
 8004670:	40021400 	.word	0x40021400
 8004674:	40021800 	.word	0x40021800
 8004678:	40021c00 	.word	0x40021c00
 800467c:	40022000 	.word	0x40022000
 8004680:	40022400 	.word	0x40022400
 8004684:	40013c00 	.word	0x40013c00

08004688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
 8004694:	4613      	mov	r3, r2
 8004696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004698:	787b      	ldrb	r3, [r7, #1]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046a4:	e003      	b.n	80046ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046a6:	887b      	ldrh	r3, [r7, #2]
 80046a8:	041a      	lsls	r2, r3, #16
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	619a      	str	r2, [r3, #24]
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695a      	ldr	r2, [r3, #20]
 80046ca:	887b      	ldrh	r3, [r7, #2]
 80046cc:	401a      	ands	r2, r3
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d104      	bne.n	80046de <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80046d4:	887b      	ldrh	r3, [r7, #2]
 80046d6:	041a      	lsls	r2, r3, #16
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80046dc:	e002      	b.n	80046e4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80046de:	887a      	ldrh	r2, [r7, #2]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	619a      	str	r2, [r3, #24]
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e12b      	b.n	800495a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d106      	bne.n	800471c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 f95d 	bl	80049d6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2224      	movs	r2, #36	; 0x24
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f022 0201 	bic.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004742:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004752:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004754:	f001 ff1a 	bl	800658c <HAL_RCC_GetPCLK1Freq>
 8004758:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	4a81      	ldr	r2, [pc, #516]	; (8004964 <HAL_I2C_Init+0x274>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d807      	bhi.n	8004774 <HAL_I2C_Init+0x84>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a80      	ldr	r2, [pc, #512]	; (8004968 <HAL_I2C_Init+0x278>)
 8004768:	4293      	cmp	r3, r2
 800476a:	bf94      	ite	ls
 800476c:	2301      	movls	r3, #1
 800476e:	2300      	movhi	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	e006      	b.n	8004782 <HAL_I2C_Init+0x92>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a7d      	ldr	r2, [pc, #500]	; (800496c <HAL_I2C_Init+0x27c>)
 8004778:	4293      	cmp	r3, r2
 800477a:	bf94      	ite	ls
 800477c:	2301      	movls	r3, #1
 800477e:	2300      	movhi	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e0e7      	b.n	800495a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	4a78      	ldr	r2, [pc, #480]	; (8004970 <HAL_I2C_Init+0x280>)
 800478e:	fba2 2303 	umull	r2, r3, r2, r3
 8004792:	0c9b      	lsrs	r3, r3, #18
 8004794:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	4a6a      	ldr	r2, [pc, #424]	; (8004964 <HAL_I2C_Init+0x274>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d802      	bhi.n	80047c4 <HAL_I2C_Init+0xd4>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	3301      	adds	r3, #1
 80047c2:	e009      	b.n	80047d8 <HAL_I2C_Init+0xe8>
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	4a69      	ldr	r2, [pc, #420]	; (8004974 <HAL_I2C_Init+0x284>)
 80047d0:	fba2 2303 	umull	r2, r3, r2, r3
 80047d4:	099b      	lsrs	r3, r3, #6
 80047d6:	3301      	adds	r3, #1
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	430b      	orrs	r3, r1
 80047de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	495c      	ldr	r1, [pc, #368]	; (8004964 <HAL_I2C_Init+0x274>)
 80047f4:	428b      	cmp	r3, r1
 80047f6:	d819      	bhi.n	800482c <HAL_I2C_Init+0x13c>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	1e59      	subs	r1, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	fbb1 f3f3 	udiv	r3, r1, r3
 8004806:	1c59      	adds	r1, r3, #1
 8004808:	f640 73fc 	movw	r3, #4092	; 0xffc
 800480c:	400b      	ands	r3, r1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <HAL_I2C_Init+0x138>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1e59      	subs	r1, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004820:	3301      	adds	r3, #1
 8004822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004826:	e051      	b.n	80048cc <HAL_I2C_Init+0x1dc>
 8004828:	2304      	movs	r3, #4
 800482a:	e04f      	b.n	80048cc <HAL_I2C_Init+0x1dc>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d111      	bne.n	8004858 <HAL_I2C_Init+0x168>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1e58      	subs	r0, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6859      	ldr	r1, [r3, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	440b      	add	r3, r1
 8004842:	fbb0 f3f3 	udiv	r3, r0, r3
 8004846:	3301      	adds	r3, #1
 8004848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800484c:	2b00      	cmp	r3, #0
 800484e:	bf0c      	ite	eq
 8004850:	2301      	moveq	r3, #1
 8004852:	2300      	movne	r3, #0
 8004854:	b2db      	uxtb	r3, r3
 8004856:	e012      	b.n	800487e <HAL_I2C_Init+0x18e>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1e58      	subs	r0, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6859      	ldr	r1, [r3, #4]
 8004860:	460b      	mov	r3, r1
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	0099      	lsls	r1, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	fbb0 f3f3 	udiv	r3, r0, r3
 800486e:	3301      	adds	r3, #1
 8004870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004874:	2b00      	cmp	r3, #0
 8004876:	bf0c      	ite	eq
 8004878:	2301      	moveq	r3, #1
 800487a:	2300      	movne	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <HAL_I2C_Init+0x196>
 8004882:	2301      	movs	r3, #1
 8004884:	e022      	b.n	80048cc <HAL_I2C_Init+0x1dc>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10e      	bne.n	80048ac <HAL_I2C_Init+0x1bc>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	1e58      	subs	r0, r3, #1
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	440b      	add	r3, r1
 800489c:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a0:	3301      	adds	r3, #1
 80048a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048aa:	e00f      	b.n	80048cc <HAL_I2C_Init+0x1dc>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	1e58      	subs	r0, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	440b      	add	r3, r1
 80048ba:	0099      	lsls	r1, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	fbb0 f3f3 	udiv	r3, r0, r3
 80048c2:	3301      	adds	r3, #1
 80048c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	6809      	ldr	r1, [r1, #0]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69da      	ldr	r2, [r3, #28]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	430a      	orrs	r2, r1
 80048ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80048fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6911      	ldr	r1, [r2, #16]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68d2      	ldr	r2, [r2, #12]
 8004906:	4311      	orrs	r1, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	430b      	orrs	r3, r1
 800490e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	695a      	ldr	r2, [r3, #20]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	000186a0 	.word	0x000186a0
 8004968:	001e847f 	.word	0x001e847f
 800496c:	003d08ff 	.word	0x003d08ff
 8004970:	431bde83 	.word	0x431bde83
 8004974:	10624dd3 	.word	0x10624dd3

08004978 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e021      	b.n	80049ce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2224      	movs	r2, #36	; 0x24
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0201 	bic.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f821 	bl	80049ea <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af02      	add	r7, sp, #8
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	4608      	mov	r0, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4603      	mov	r3, r0
 8004a10:	817b      	strh	r3, [r7, #10]
 8004a12:	460b      	mov	r3, r1
 8004a14:	813b      	strh	r3, [r7, #8]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a1a:	f7fe fef3 	bl	8003804 <HAL_GetTick>
 8004a1e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	f040 80d9 	bne.w	8004be0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	2319      	movs	r3, #25
 8004a34:	2201      	movs	r2, #1
 8004a36:	496d      	ldr	r1, [pc, #436]	; (8004bec <HAL_I2C_Mem_Write+0x1ec>)
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fc89 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004a44:	2302      	movs	r3, #2
 8004a46:	e0cc      	b.n	8004be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <HAL_I2C_Mem_Write+0x56>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e0c5      	b.n	8004be2 <HAL_I2C_Mem_Write+0x1e2>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d007      	beq.n	8004a7c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2221      	movs	r2, #33	; 0x21
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2240      	movs	r2, #64	; 0x40
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a3a      	ldr	r2, [r7, #32]
 8004aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a4d      	ldr	r2, [pc, #308]	; (8004bf0 <HAL_I2C_Mem_Write+0x1f0>)
 8004abc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004abe:	88f8      	ldrh	r0, [r7, #6]
 8004ac0:	893a      	ldrh	r2, [r7, #8]
 8004ac2:	8979      	ldrh	r1, [r7, #10]
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	9301      	str	r3, [sp, #4]
 8004ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aca:	9300      	str	r3, [sp, #0]
 8004acc:	4603      	mov	r3, r0
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fac4 	bl	800505c <I2C_RequestMemoryWrite>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d052      	beq.n	8004b80 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e081      	b.n	8004be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 fd0a 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00d      	beq.n	8004b0a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d107      	bne.n	8004b06 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e06b      	b.n	8004be2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	781a      	ldrb	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d11b      	bne.n	8004b80 <HAL_I2C_Mem_Write+0x180>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d017      	beq.n	8004b80 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1aa      	bne.n	8004ade <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 fcf6 	bl	800557e <I2C_WaitOnBTFFlagUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00d      	beq.n	8004bb4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d107      	bne.n	8004bb0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e016      	b.n	8004be2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e000      	b.n	8004be2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004be0:	2302      	movs	r3, #2
  }
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	00100002 	.word	0x00100002
 8004bf0:	ffff0000 	.word	0xffff0000

08004bf4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08c      	sub	sp, #48	; 0x30
 8004bf8:	af02      	add	r7, sp, #8
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	4611      	mov	r1, r2
 8004c00:	461a      	mov	r2, r3
 8004c02:	4603      	mov	r3, r0
 8004c04:	817b      	strh	r3, [r7, #10]
 8004c06:	460b      	mov	r3, r1
 8004c08:	813b      	strh	r3, [r7, #8]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c0e:	f7fe fdf9 	bl	8003804 <HAL_GetTick>
 8004c12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	f040 8208 	bne.w	8005032 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	2319      	movs	r3, #25
 8004c28:	2201      	movs	r2, #1
 8004c2a:	497b      	ldr	r1, [pc, #492]	; (8004e18 <HAL_I2C_Mem_Read+0x224>)
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 fb8f 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e1fb      	b.n	8005034 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_I2C_Mem_Read+0x56>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e1f4      	b.n	8005034 <HAL_I2C_Mem_Read+0x440>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d007      	beq.n	8004c70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2222      	movs	r2, #34	; 0x22
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2240      	movs	r2, #64	; 0x40
 8004c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ca0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4a5b      	ldr	r2, [pc, #364]	; (8004e1c <HAL_I2C_Mem_Read+0x228>)
 8004cb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cb2:	88f8      	ldrh	r0, [r7, #6]
 8004cb4:	893a      	ldrh	r2, [r7, #8]
 8004cb6:	8979      	ldrh	r1, [r7, #10]
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	9301      	str	r3, [sp, #4]
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 fa5e 	bl	8005184 <I2C_RequestMemoryRead>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e1b0      	b.n	8005034 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d113      	bne.n	8004d02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	623b      	str	r3, [r7, #32]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	623b      	str	r3, [r7, #32]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e184      	b.n	800500c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d11b      	bne.n	8004d42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61fb      	str	r3, [r7, #28]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e164      	b.n	800500c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d11b      	bne.n	8004d82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695b      	ldr	r3, [r3, #20]
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	e144      	b.n	800500c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	617b      	str	r3, [r7, #20]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	617b      	str	r3, [r7, #20]
 8004d96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004d98:	e138      	b.n	800500c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	f200 80f1 	bhi.w	8004f86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d123      	bne.n	8004df4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f000 fc25 	bl	8005600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e139      	b.n	8005034 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004df2:	e10b      	b.n	800500c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d14e      	bne.n	8004e9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	2200      	movs	r2, #0
 8004e04:	4906      	ldr	r1, [pc, #24]	; (8004e20 <HAL_I2C_Mem_Read+0x22c>)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 faa2 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d008      	beq.n	8004e24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e10e      	b.n	8005034 <HAL_I2C_Mem_Read+0x440>
 8004e16:	bf00      	nop
 8004e18:	00100002 	.word	0x00100002
 8004e1c:	ffff0000 	.word	0xffff0000
 8004e20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	b29a      	uxth	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	b2d2      	uxtb	r2, r2
 8004e72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e98:	e0b8      	b.n	800500c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4966      	ldr	r1, [pc, #408]	; (800503c <HAL_I2C_Mem_Read+0x448>)
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fa53 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0bf      	b.n	8005034 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efc:	2200      	movs	r2, #0
 8004efe:	494f      	ldr	r1, [pc, #316]	; (800503c <HAL_I2C_Mem_Read+0x448>)
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fa25 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e091      	b.n	8005034 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	691a      	ldr	r2, [r3, #16]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	b2d2      	uxtb	r2, r2
 8004f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f84:	e042      	b.n	800500c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fb38 	bl	8005600 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e04c      	b.n	8005034 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691a      	ldr	r2, [r3, #16]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	1c5a      	adds	r2, r3, #1
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d118      	bne.n	800500c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005002:	b29b      	uxth	r3, r3
 8005004:	3b01      	subs	r3, #1
 8005006:	b29a      	uxth	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005010:	2b00      	cmp	r3, #0
 8005012:	f47f aec2 	bne.w	8004d9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005032:	2302      	movs	r3, #2
  }
}
 8005034:	4618      	mov	r0, r3
 8005036:	3728      	adds	r7, #40	; 0x28
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	00010004 	.word	0x00010004

08005040 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504e:	b2db      	uxtb	r3, r3
}
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	4608      	mov	r0, r1
 8005066:	4611      	mov	r1, r2
 8005068:	461a      	mov	r2, r3
 800506a:	4603      	mov	r3, r0
 800506c:	817b      	strh	r3, [r7, #10]
 800506e:	460b      	mov	r3, r1
 8005070:	813b      	strh	r3, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005084:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	2200      	movs	r2, #0
 800508e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005092:	68f8      	ldr	r0, [r7, #12]
 8005094:	f000 f95c 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00c      	beq.n	80050b8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e05f      	b.n	8005178 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050b8:	897b      	ldrh	r3, [r7, #10]
 80050ba:	b2db      	uxtb	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	6a3a      	ldr	r2, [r7, #32]
 80050cc:	492c      	ldr	r1, [pc, #176]	; (8005180 <I2C_RequestMemoryWrite+0x124>)
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 f995 	bl	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e04c      	b.n	8005178 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f6:	6a39      	ldr	r1, [r7, #32]
 80050f8:	68f8      	ldr	r0, [r7, #12]
 80050fa:	f000 f9ff 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00d      	beq.n	8005120 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	2b04      	cmp	r3, #4
 800510a:	d107      	bne.n	800511c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e02b      	b.n	8005178 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005120:	88fb      	ldrh	r3, [r7, #6]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d105      	bne.n	8005132 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005126:	893b      	ldrh	r3, [r7, #8]
 8005128:	b2da      	uxtb	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	611a      	str	r2, [r3, #16]
 8005130:	e021      	b.n	8005176 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005132:	893b      	ldrh	r3, [r7, #8]
 8005134:	0a1b      	lsrs	r3, r3, #8
 8005136:	b29b      	uxth	r3, r3
 8005138:	b2da      	uxtb	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005142:	6a39      	ldr	r1, [r7, #32]
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f000 f9d9 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005154:	2b04      	cmp	r3, #4
 8005156:	d107      	bne.n	8005168 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005166:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e005      	b.n	8005178 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800516c:	893b      	ldrh	r3, [r7, #8]
 800516e:	b2da      	uxtb	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	00010002 	.word	0x00010002

08005184 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af02      	add	r7, sp, #8
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	4608      	mov	r0, r1
 800518e:	4611      	mov	r1, r2
 8005190:	461a      	mov	r2, r3
 8005192:	4603      	mov	r3, r0
 8005194:	817b      	strh	r3, [r7, #10]
 8005196:	460b      	mov	r3, r1
 8005198:	813b      	strh	r3, [r7, #8]
 800519a:	4613      	mov	r3, r2
 800519c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 f8c0 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00c      	beq.n	80051f0 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d003      	beq.n	80051ec <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e0a9      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051f0:	897b      	ldrh	r3, [r7, #10]
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	4951      	ldr	r1, [pc, #324]	; (800534c <I2C_RequestMemoryRead+0x1c8>)
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 f8f9 	bl	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e096      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800522c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522e:	6a39      	ldr	r1, [r7, #32]
 8005230:	68f8      	ldr	r0, [r7, #12]
 8005232:	f000 f963 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00d      	beq.n	8005258 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b04      	cmp	r3, #4
 8005242:	d107      	bne.n	8005254 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005252:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e075      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005258:	88fb      	ldrh	r3, [r7, #6]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d105      	bne.n	800526a <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800525e:	893b      	ldrh	r3, [r7, #8]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]
 8005268:	e021      	b.n	80052ae <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800526a:	893b      	ldrh	r3, [r7, #8]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	b29b      	uxth	r3, r3
 8005270:	b2da      	uxtb	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527a:	6a39      	ldr	r1, [r7, #32]
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f93d 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00d      	beq.n	80052a4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	2b04      	cmp	r3, #4
 800528e:	d107      	bne.n	80052a0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800529e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e04f      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052a4:	893b      	ldrh	r3, [r7, #8]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	6a39      	ldr	r1, [r7, #32]
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f000 f922 	bl	80054fc <I2C_WaitOnTXEFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d107      	bne.n	80052d6 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e034      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	f000 f82a 	bl	8005350 <I2C_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530c:	2b00      	cmp	r3, #0
 800530e:	d003      	beq.n	8005318 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005316:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e013      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800531c:	897b      	ldrh	r3, [r7, #10]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	f043 0301 	orr.w	r3, r3, #1
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	6a3a      	ldr	r2, [r7, #32]
 8005330:	4906      	ldr	r1, [pc, #24]	; (800534c <I2C_RequestMemoryRead+0x1c8>)
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 f863 	bl	80053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	00010002 	.word	0x00010002

08005350 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	4613      	mov	r3, r2
 800535e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005360:	e025      	b.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005368:	d021      	beq.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536a:	f7fe fa4b 	bl	8003804 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d302      	bcc.n	8005380 <I2C_WaitOnFlagUntilTimeout+0x30>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d116      	bne.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f043 0220 	orr.w	r2, r3, #32
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e023      	b.n	80053f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	0c1b      	lsrs	r3, r3, #16
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d10d      	bne.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	43da      	mvns	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4013      	ands	r3, r2
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bf0c      	ite	eq
 80053ca:	2301      	moveq	r3, #1
 80053cc:	2300      	movne	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	e00c      	b.n	80053ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	43da      	mvns	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d0b6      	beq.n	8005362 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	60f8      	str	r0, [r7, #12]
 8005406:	60b9      	str	r1, [r7, #8]
 8005408:	607a      	str	r2, [r7, #4]
 800540a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800540c:	e051      	b.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541c:	d123      	bne.n	8005466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005436:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f043 0204 	orr.w	r2, r3, #4
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e046      	b.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800546c:	d021      	beq.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800546e:	f7fe f9c9 	bl	8003804 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	429a      	cmp	r2, r3
 800547c:	d302      	bcc.n	8005484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d116      	bne.n	80054b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e020      	b.n	80054f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	0c1b      	lsrs	r3, r3, #16
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d10c      	bne.n	80054d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	43da      	mvns	r2, r3
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf14      	ite	ne
 80054ce:	2301      	movne	r3, #1
 80054d0:	2300      	moveq	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	e00b      	b.n	80054ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	43da      	mvns	r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	4013      	ands	r3, r2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d18d      	bne.n	800540e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3710      	adds	r7, #16
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005508:	e02d      	b.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 f8ce 	bl	80056ac <I2C_IsAcknowledgeFailed>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e02d      	b.n	8005576 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005520:	d021      	beq.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005522:	f7fe f96f 	bl	8003804 <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	68ba      	ldr	r2, [r7, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	d302      	bcc.n	8005538 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d116      	bne.n	8005566 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e007      	b.n	8005576 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005570:	2b80      	cmp	r3, #128	; 0x80
 8005572:	d1ca      	bne.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800558a:	e02d      	b.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f88d 	bl	80056ac <I2C_IsAcknowledgeFailed>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e02d      	b.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a2:	d021      	beq.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055a4:	f7fe f92e 	bl	8003804 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d116      	bne.n	80055e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e007      	b.n	80055f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	d1ca      	bne.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3710      	adds	r7, #16
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800560c:	e042      	b.n	8005694 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b10      	cmp	r3, #16
 800561a:	d119      	bne.n	8005650 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0210 	mvn.w	r2, #16
 8005624:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e029      	b.n	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005650:	f7fe f8d8 	bl	8003804 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	429a      	cmp	r2, r3
 800565e:	d302      	bcc.n	8005666 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d116      	bne.n	8005694 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005680:	f043 0220 	orr.w	r2, r3, #32
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e007      	b.n	80056a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d1b5      	bne.n	800560e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c2:	d11b      	bne.n	80056fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	f043 0204 	orr.w	r2, r3, #4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e0bf      	b.n	800589e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005724:	b2db      	uxtb	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d106      	bne.n	8005738 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f8ba 	bl	80058ac <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800574e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6999      	ldr	r1, [r3, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005764:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6899      	ldr	r1, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b4a      	ldr	r3, [pc, #296]	; (80058a8 <HAL_LTDC_Init+0x19c>)
 8005780:	400b      	ands	r3, r1
 8005782:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	041b      	lsls	r3, r3, #16
 800578a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6899      	ldr	r1, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699a      	ldr	r2, [r3, #24]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68d9      	ldr	r1, [r3, #12]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4b3e      	ldr	r3, [pc, #248]	; (80058a8 <HAL_LTDC_Init+0x19c>)
 80057ae:	400b      	ands	r3, r1
 80057b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	041b      	lsls	r3, r3, #16
 80057b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68d9      	ldr	r1, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6919      	ldr	r1, [r3, #16]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <HAL_LTDC_Init+0x19c>)
 80057dc:	400b      	ands	r3, r1
 80057de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	041b      	lsls	r3, r3, #16
 80057e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6919      	ldr	r1, [r3, #16]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6959      	ldr	r1, [r3, #20]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b27      	ldr	r3, [pc, #156]	; (80058a8 <HAL_LTDC_Init+0x19c>)
 800580a:	400b      	ands	r3, r1
 800580c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005812:	041b      	lsls	r3, r3, #16
 8005814:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6959      	ldr	r1, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	431a      	orrs	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800583c:	041b      	lsls	r3, r3, #16
 800583e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800584e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4313      	orrs	r3, r2
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	430a      	orrs	r2, r1
 800586a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0206 	orr.w	r2, r2, #6
 800587a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	f000f800 	.word	0xf000f800

080058ac <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80058c0:	b5b0      	push	{r4, r5, r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d101      	bne.n	80058da <HAL_LTDC_ConfigLayer+0x1a>
 80058d6:	2302      	movs	r3, #2
 80058d8:	e02c      	b.n	8005934 <HAL_LTDC_ConfigLayer+0x74>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2202      	movs	r2, #2
 80058e6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2134      	movs	r1, #52	; 0x34
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	4413      	add	r3, r2
 80058f6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4614      	mov	r4, r2
 80058fe:	461d      	mov	r5, r3
 8005900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800590a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	68b9      	ldr	r1, [r7, #8]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f83b 	bl	8005990 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2201      	movs	r2, #1
 8005920:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bdb0      	pop	{r4, r5, r7, pc}

0800593c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800594a:	2b01      	cmp	r3, #1
 800594c:	d101      	bne.n	8005952 <HAL_LTDC_EnableDither+0x16>
 800594e:	2302      	movs	r3, #2
 8005950:	e016      	b.n	8005980 <HAL_LTDC_EnableDither+0x44>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8005962:	4b0a      	ldr	r3, [pc, #40]	; (800598c <HAL_LTDC_EnableDither+0x50>)
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	4a09      	ldr	r2, [pc, #36]	; (800598c <HAL_LTDC_EnableDither+0x50>)
 8005968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800596c:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	40016800 	.word	0x40016800

08005990 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005990:	b480      	push	{r7}
 8005992:	b089      	sub	sp, #36	; 0x24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	0c1b      	lsrs	r3, r3, #16
 80059a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ac:	4413      	add	r3, r2
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	01db      	lsls	r3, r3, #7
 80059bc:	4413      	add	r3, r2
 80059be:	3384      	adds	r3, #132	; 0x84
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	4611      	mov	r1, r2
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	01d2      	lsls	r2, r2, #7
 80059cc:	440a      	add	r2, r1
 80059ce:	3284      	adds	r2, #132	; 0x84
 80059d0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80059d4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	0c1b      	lsrs	r3, r3, #16
 80059e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e6:	4413      	add	r3, r2
 80059e8:	1c5a      	adds	r2, r3, #1
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4619      	mov	r1, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	01db      	lsls	r3, r3, #7
 80059f4:	440b      	add	r3, r1
 80059f6:	3384      	adds	r3, #132	; 0x84
 80059f8:	4619      	mov	r1, r3
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	68da      	ldr	r2, [r3, #12]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a0e:	4413      	add	r3, r2
 8005a10:	041b      	lsls	r3, r3, #16
 8005a12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	01db      	lsls	r3, r3, #7
 8005a1e:	4413      	add	r3, r2
 8005a20:	3384      	adds	r3, #132	; 0x84
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	4611      	mov	r1, r2
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	01d2      	lsls	r2, r2, #7
 8005a2e:	440a      	add	r2, r1
 8005a30:	3284      	adds	r2, #132	; 0x84
 8005a32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005a36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a46:	4413      	add	r3, r2
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	01db      	lsls	r3, r3, #7
 8005a54:	440b      	add	r3, r1
 8005a56:	3384      	adds	r3, #132	; 0x84
 8005a58:	4619      	mov	r1, r3
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	461a      	mov	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	01db      	lsls	r3, r3, #7
 8005a6a:	4413      	add	r3, r2
 8005a6c:	3384      	adds	r3, #132	; 0x84
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	6812      	ldr	r2, [r2, #0]
 8005a74:	4611      	mov	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	01d2      	lsls	r2, r2, #7
 8005a7a:	440a      	add	r2, r1
 8005a7c:	3284      	adds	r2, #132	; 0x84
 8005a7e:	f023 0307 	bic.w	r3, r3, #7
 8005a82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	01db      	lsls	r3, r3, #7
 8005a8e:	4413      	add	r3, r2
 8005a90:	3384      	adds	r3, #132	; 0x84
 8005a92:	461a      	mov	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005aaa:	041b      	lsls	r3, r3, #16
 8005aac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	061b      	lsls	r3, r3, #24
 8005ab4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	01db      	lsls	r3, r3, #7
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3384      	adds	r3, #132	; 0x84
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	01db      	lsls	r3, r3, #7
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3384      	adds	r3, #132	; 0x84
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4619      	mov	r1, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	01db      	lsls	r3, r3, #7
 8005af4:	440b      	add	r3, r1
 8005af6:	3384      	adds	r3, #132	; 0x84
 8005af8:	4619      	mov	r1, r3
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	01db      	lsls	r3, r3, #7
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3384      	adds	r3, #132	; 0x84
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	4611      	mov	r1, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	01d2      	lsls	r2, r2, #7
 8005b1a:	440a      	add	r2, r1
 8005b1c:	3284      	adds	r2, #132	; 0x84
 8005b1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	01db      	lsls	r3, r3, #7
 8005b2e:	4413      	add	r3, r2
 8005b30:	3384      	adds	r3, #132	; 0x84
 8005b32:	461a      	mov	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	01db      	lsls	r3, r3, #7
 8005b44:	4413      	add	r3, r2
 8005b46:	3384      	adds	r3, #132	; 0x84
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	6812      	ldr	r2, [r2, #0]
 8005b4e:	4611      	mov	r1, r2
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	01d2      	lsls	r2, r2, #7
 8005b54:	440a      	add	r2, r1
 8005b56:	3284      	adds	r2, #132	; 0x84
 8005b58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005b5c:	f023 0307 	bic.w	r3, r3, #7
 8005b60:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	69da      	ldr	r2, [r3, #28]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	68f9      	ldr	r1, [r7, #12]
 8005b6c:	6809      	ldr	r1, [r1, #0]
 8005b6e:	4608      	mov	r0, r1
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	01c9      	lsls	r1, r1, #7
 8005b74:	4401      	add	r1, r0
 8005b76:	3184      	adds	r1, #132	; 0x84
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	01db      	lsls	r3, r3, #7
 8005b86:	4413      	add	r3, r2
 8005b88:	3384      	adds	r3, #132	; 0x84
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	01db      	lsls	r3, r3, #7
 8005b96:	4413      	add	r3, r2
 8005b98:	3384      	adds	r3, #132	; 0x84
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	01db      	lsls	r3, r3, #7
 8005baa:	4413      	add	r3, r2
 8005bac:	3384      	adds	r3, #132	; 0x84
 8005bae:	461a      	mov	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d102      	bne.n	8005bc4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005bbe:	2304      	movs	r3, #4
 8005bc0:	61fb      	str	r3, [r7, #28]
 8005bc2:	e01b      	b.n	8005bfc <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d102      	bne.n	8005bd2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	61fb      	str	r3, [r7, #28]
 8005bd0:	e014      	b.n	8005bfc <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d00b      	beq.n	8005bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d007      	beq.n	8005bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d003      	beq.n	8005bf2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005bee:	2b07      	cmp	r3, #7
 8005bf0:	d102      	bne.n	8005bf8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	61fb      	str	r3, [r7, #28]
 8005bf6:	e001      	b.n	8005bfc <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	461a      	mov	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	01db      	lsls	r3, r3, #7
 8005c06:	4413      	add	r3, r2
 8005c08:	3384      	adds	r3, #132	; 0x84
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	6812      	ldr	r2, [r2, #0]
 8005c10:	4611      	mov	r1, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	01d2      	lsls	r2, r2, #7
 8005c16:	440a      	add	r2, r1
 8005c18:	3284      	adds	r2, #132	; 0x84
 8005c1a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	fb02 f303 	mul.w	r3, r2, r3
 8005c2a:	041a      	lsls	r2, r3, #16
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	6859      	ldr	r1, [r3, #4]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	1acb      	subs	r3, r1, r3
 8005c36:	69f9      	ldr	r1, [r7, #28]
 8005c38:	fb01 f303 	mul.w	r3, r1, r3
 8005c3c:	3303      	adds	r3, #3
 8005c3e:	68f9      	ldr	r1, [r7, #12]
 8005c40:	6809      	ldr	r1, [r1, #0]
 8005c42:	4608      	mov	r0, r1
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	01c9      	lsls	r1, r1, #7
 8005c48:	4401      	add	r1, r0
 8005c4a:	3184      	adds	r1, #132	; 0x84
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	461a      	mov	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	01db      	lsls	r3, r3, #7
 8005c5a:	4413      	add	r3, r2
 8005c5c:	3384      	adds	r3, #132	; 0x84
 8005c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	6812      	ldr	r2, [r2, #0]
 8005c64:	4611      	mov	r1, r2
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	01d2      	lsls	r2, r2, #7
 8005c6a:	440a      	add	r2, r1
 8005c6c:	3284      	adds	r2, #132	; 0x84
 8005c6e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c72:	f023 0307 	bic.w	r3, r3, #7
 8005c76:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	01db      	lsls	r3, r3, #7
 8005c82:	4413      	add	r3, r2
 8005c84:	3384      	adds	r3, #132	; 0x84
 8005c86:	461a      	mov	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c8c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	461a      	mov	r2, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	01db      	lsls	r3, r3, #7
 8005c98:	4413      	add	r3, r2
 8005c9a:	3384      	adds	r3, #132	; 0x84
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	6812      	ldr	r2, [r2, #0]
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	01d2      	lsls	r2, r2, #7
 8005ca8:	440a      	add	r2, r1
 8005caa:	3284      	adds	r2, #132	; 0x84
 8005cac:	f043 0301 	orr.w	r3, r3, #1
 8005cb0:	6013      	str	r3, [r2, #0]
}
 8005cb2:	bf00      	nop
 8005cb4:	3724      	adds	r7, #36	; 0x24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e25e      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d075      	beq.n	8005dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cde:	4b88      	ldr	r3, [pc, #544]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d00c      	beq.n	8005d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cea:	4b85      	ldr	r3, [pc, #532]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d112      	bne.n	8005d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cf6:	4b82      	ldr	r3, [pc, #520]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d02:	d10b      	bne.n	8005d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d04:	4b7e      	ldr	r3, [pc, #504]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d05b      	beq.n	8005dc8 <HAL_RCC_OscConfig+0x108>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d157      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e239      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d24:	d106      	bne.n	8005d34 <HAL_RCC_OscConfig+0x74>
 8005d26:	4b76      	ldr	r3, [pc, #472]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a75      	ldr	r2, [pc, #468]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d30:	6013      	str	r3, [r2, #0]
 8005d32:	e01d      	b.n	8005d70 <HAL_RCC_OscConfig+0xb0>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d3c:	d10c      	bne.n	8005d58 <HAL_RCC_OscConfig+0x98>
 8005d3e:	4b70      	ldr	r3, [pc, #448]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a6f      	ldr	r2, [pc, #444]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	4b6d      	ldr	r3, [pc, #436]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a6c      	ldr	r2, [pc, #432]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	e00b      	b.n	8005d70 <HAL_RCC_OscConfig+0xb0>
 8005d58:	4b69      	ldr	r3, [pc, #420]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a68      	ldr	r2, [pc, #416]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d62:	6013      	str	r3, [r2, #0]
 8005d64:	4b66      	ldr	r3, [pc, #408]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a65      	ldr	r2, [pc, #404]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d013      	beq.n	8005da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7fd fd44 	bl	8003804 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d80:	f7fd fd40 	bl	8003804 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b64      	cmp	r3, #100	; 0x64
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e1fe      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d92:	4b5b      	ldr	r3, [pc, #364]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0f0      	beq.n	8005d80 <HAL_RCC_OscConfig+0xc0>
 8005d9e:	e014      	b.n	8005dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005da0:	f7fd fd30 	bl	8003804 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005da8:	f7fd fd2c 	bl	8003804 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b64      	cmp	r3, #100	; 0x64
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e1ea      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dba:	4b51      	ldr	r3, [pc, #324]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1f0      	bne.n	8005da8 <HAL_RCC_OscConfig+0xe8>
 8005dc6:	e000      	b.n	8005dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d063      	beq.n	8005e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dd6:	4b4a      	ldr	r3, [pc, #296]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 030c 	and.w	r3, r3, #12
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00b      	beq.n	8005dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005de2:	4b47      	ldr	r3, [pc, #284]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dea:	2b08      	cmp	r3, #8
 8005dec:	d11c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dee:	4b44      	ldr	r3, [pc, #272]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d116      	bne.n	8005e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dfa:	4b41      	ldr	r3, [pc, #260]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d005      	beq.n	8005e12 <HAL_RCC_OscConfig+0x152>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d001      	beq.n	8005e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e1be      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e12:	4b3b      	ldr	r3, [pc, #236]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	00db      	lsls	r3, r3, #3
 8005e20:	4937      	ldr	r1, [pc, #220]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e26:	e03a      	b.n	8005e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d020      	beq.n	8005e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e30:	4b34      	ldr	r3, [pc, #208]	; (8005f04 <HAL_RCC_OscConfig+0x244>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e36:	f7fd fce5 	bl	8003804 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e3e:	f7fd fce1 	bl	8003804 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e19f      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e50:	4b2b      	ldr	r3, [pc, #172]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f0      	beq.n	8005e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5c:	4b28      	ldr	r3, [pc, #160]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4925      	ldr	r1, [pc, #148]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]
 8005e70:	e015      	b.n	8005e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e72:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <HAL_RCC_OscConfig+0x244>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fd fcc4 	bl	8003804 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e80:	f7fd fcc0 	bl	8003804 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e17e      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e92:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d036      	beq.n	8005f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d016      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <HAL_RCC_OscConfig+0x248>)
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb8:	f7fd fca4 	bl	8003804 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec0:	f7fd fca0 	bl	8003804 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e15e      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d0f0      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x200>
 8005ede:	e01b      	b.n	8005f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ee0:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <HAL_RCC_OscConfig+0x248>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ee6:	f7fd fc8d 	bl	8003804 <HAL_GetTick>
 8005eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eec:	e00e      	b.n	8005f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eee:	f7fd fc89 	bl	8003804 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d907      	bls.n	8005f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e147      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
 8005f00:	40023800 	.word	0x40023800
 8005f04:	42470000 	.word	0x42470000
 8005f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f0c:	4b88      	ldr	r3, [pc, #544]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1ea      	bne.n	8005eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0304 	and.w	r3, r3, #4
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8097 	beq.w	8006054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f26:	2300      	movs	r3, #0
 8005f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f2a:	4b81      	ldr	r3, [pc, #516]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10f      	bne.n	8005f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	4b7d      	ldr	r3, [pc, #500]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	4a7c      	ldr	r2, [pc, #496]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f44:	6413      	str	r3, [r2, #64]	; 0x40
 8005f46:	4b7a      	ldr	r3, [pc, #488]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	60bb      	str	r3, [r7, #8]
 8005f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f52:	2301      	movs	r3, #1
 8005f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f56:	4b77      	ldr	r3, [pc, #476]	; (8006134 <HAL_RCC_OscConfig+0x474>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d118      	bne.n	8005f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f62:	4b74      	ldr	r3, [pc, #464]	; (8006134 <HAL_RCC_OscConfig+0x474>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a73      	ldr	r2, [pc, #460]	; (8006134 <HAL_RCC_OscConfig+0x474>)
 8005f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f6e:	f7fd fc49 	bl	8003804 <HAL_GetTick>
 8005f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f74:	e008      	b.n	8005f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f76:	f7fd fc45 	bl	8003804 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e103      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f88:	4b6a      	ldr	r3, [pc, #424]	; (8006134 <HAL_RCC_OscConfig+0x474>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0f0      	beq.n	8005f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d106      	bne.n	8005faa <HAL_RCC_OscConfig+0x2ea>
 8005f9c:	4b64      	ldr	r3, [pc, #400]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	4a63      	ldr	r2, [pc, #396]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa8:	e01c      	b.n	8005fe4 <HAL_RCC_OscConfig+0x324>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d10c      	bne.n	8005fcc <HAL_RCC_OscConfig+0x30c>
 8005fb2:	4b5f      	ldr	r3, [pc, #380]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb6:	4a5e      	ldr	r2, [pc, #376]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005fb8:	f043 0304 	orr.w	r3, r3, #4
 8005fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fbe:	4b5c      	ldr	r3, [pc, #368]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc2:	4a5b      	ldr	r2, [pc, #364]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005fc4:	f043 0301 	orr.w	r3, r3, #1
 8005fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005fca:	e00b      	b.n	8005fe4 <HAL_RCC_OscConfig+0x324>
 8005fcc:	4b58      	ldr	r3, [pc, #352]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	4a57      	ldr	r2, [pc, #348]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005fd8:	4b55      	ldr	r3, [pc, #340]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fdc:	4a54      	ldr	r2, [pc, #336]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8005fde:	f023 0304 	bic.w	r3, r3, #4
 8005fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d015      	beq.n	8006018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fec:	f7fd fc0a 	bl	8003804 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ff2:	e00a      	b.n	800600a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff4:	f7fd fc06 	bl	8003804 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006002:	4293      	cmp	r3, r2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e0c2      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800600a:	4b49      	ldr	r3, [pc, #292]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	f003 0302 	and.w	r3, r3, #2
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0ee      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x334>
 8006016:	e014      	b.n	8006042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006018:	f7fd fbf4 	bl	8003804 <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800601e:	e00a      	b.n	8006036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006020:	f7fd fbf0 	bl	8003804 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	; 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e0ac      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006036:	4b3e      	ldr	r3, [pc, #248]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	f003 0302 	and.w	r3, r3, #2
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1ee      	bne.n	8006020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d105      	bne.n	8006054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006048:	4b39      	ldr	r3, [pc, #228]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	4a38      	ldr	r2, [pc, #224]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 800604e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8098 	beq.w	800618e <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800605e:	4b34      	ldr	r3, [pc, #208]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
 8006066:	2b08      	cmp	r3, #8
 8006068:	d05c      	beq.n	8006124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d141      	bne.n	80060f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006072:	4b31      	ldr	r3, [pc, #196]	; (8006138 <HAL_RCC_OscConfig+0x478>)
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006078:	f7fd fbc4 	bl	8003804 <HAL_GetTick>
 800607c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006080:	f7fd fbc0 	bl	8003804 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e07e      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006092:	4b27      	ldr	r3, [pc, #156]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69da      	ldr	r2, [r3, #28]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ac:	019b      	lsls	r3, r3, #6
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	3b01      	subs	r3, #1
 80060b8:	041b      	lsls	r3, r3, #16
 80060ba:	431a      	orrs	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	061b      	lsls	r3, r3, #24
 80060c2:	491b      	ldr	r1, [pc, #108]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060c8:	4b1b      	ldr	r3, [pc, #108]	; (8006138 <HAL_RCC_OscConfig+0x478>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ce:	f7fd fb99 	bl	8003804 <HAL_GetTick>
 80060d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060d4:	e008      	b.n	80060e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060d6:	f7fd fb95 	bl	8003804 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d901      	bls.n	80060e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e053      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060e8:	4b11      	ldr	r3, [pc, #68]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0f0      	beq.n	80060d6 <HAL_RCC_OscConfig+0x416>
 80060f4:	e04b      	b.n	800618e <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f6:	4b10      	ldr	r3, [pc, #64]	; (8006138 <HAL_RCC_OscConfig+0x478>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060fc:	f7fd fb82 	bl	8003804 <HAL_GetTick>
 8006100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006104:	f7fd fb7e 	bl	8003804 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e03c      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006116:	4b06      	ldr	r3, [pc, #24]	; (8006130 <HAL_RCC_OscConfig+0x470>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f0      	bne.n	8006104 <HAL_RCC_OscConfig+0x444>
 8006122:	e034      	b.n	800618e <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	2b01      	cmp	r3, #1
 800612a:	d107      	bne.n	800613c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e02f      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
 8006130:	40023800 	.word	0x40023800
 8006134:	40007000 	.word	0x40007000
 8006138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800613c:	4b16      	ldr	r3, [pc, #88]	; (8006198 <HAL_RCC_OscConfig+0x4d8>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	429a      	cmp	r2, r3
 800614e:	d11c      	bne.n	800618a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800615a:	429a      	cmp	r2, r3
 800615c:	d115      	bne.n	800618a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006164:	4013      	ands	r3, r2
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800616a:	4293      	cmp	r3, r2
 800616c:	d10d      	bne.n	800618a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006178:	429a      	cmp	r2, r3
 800617a:	d106      	bne.n	800618a <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006186:	429a      	cmp	r2, r3
 8006188:	d001      	beq.n	800618e <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e000      	b.n	8006190 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40023800 	.word	0x40023800

0800619c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e0cc      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061b0:	4b68      	ldr	r3, [pc, #416]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d90c      	bls.n	80061d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061be:	4b65      	ldr	r3, [pc, #404]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061c6:	4b63      	ldr	r3, [pc, #396]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d001      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e0b8      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d020      	beq.n	8006226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061f0:	4b59      	ldr	r3, [pc, #356]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	4a58      	ldr	r2, [pc, #352]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0308 	and.w	r3, r3, #8
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006208:	4b53      	ldr	r3, [pc, #332]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	4a52      	ldr	r2, [pc, #328]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006214:	4b50      	ldr	r3, [pc, #320]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	494d      	ldr	r1, [pc, #308]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 8006222:	4313      	orrs	r3, r2
 8006224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d044      	beq.n	80062bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d107      	bne.n	800624a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623a:	4b47      	ldr	r3, [pc, #284]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d119      	bne.n	800627a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e07f      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	2b02      	cmp	r3, #2
 8006250:	d003      	beq.n	800625a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006256:	2b03      	cmp	r3, #3
 8006258:	d107      	bne.n	800626a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625a:	4b3f      	ldr	r3, [pc, #252]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d109      	bne.n	800627a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e06f      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800626a:	4b3b      	ldr	r3, [pc, #236]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d101      	bne.n	800627a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	e067      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800627a:	4b37      	ldr	r3, [pc, #220]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f023 0203 	bic.w	r2, r3, #3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	4934      	ldr	r1, [pc, #208]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 8006288:	4313      	orrs	r3, r2
 800628a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800628c:	f7fd faba 	bl	8003804 <HAL_GetTick>
 8006290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006292:	e00a      	b.n	80062aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006294:	f7fd fab6 	bl	8003804 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e04f      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062aa:	4b2b      	ldr	r3, [pc, #172]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	f003 020c 	and.w	r2, r3, #12
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d1eb      	bne.n	8006294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062bc:	4b25      	ldr	r3, [pc, #148]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 030f 	and.w	r3, r3, #15
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d20c      	bcs.n	80062e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ca:	4b22      	ldr	r3, [pc, #136]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d2:	4b20      	ldr	r3, [pc, #128]	; (8006354 <HAL_RCC_ClockConfig+0x1b8>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d001      	beq.n	80062e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e032      	b.n	800634a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d008      	beq.n	8006302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062f0:	4b19      	ldr	r3, [pc, #100]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4916      	ldr	r1, [pc, #88]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 0308 	and.w	r3, r3, #8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d009      	beq.n	8006322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800630e:	4b12      	ldr	r3, [pc, #72]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	00db      	lsls	r3, r3, #3
 800631c:	490e      	ldr	r1, [pc, #56]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800631e:	4313      	orrs	r3, r2
 8006320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006322:	f000 f821 	bl	8006368 <HAL_RCC_GetSysClockFreq>
 8006326:	4602      	mov	r2, r0
 8006328:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <HAL_RCC_ClockConfig+0x1bc>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	091b      	lsrs	r3, r3, #4
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	490a      	ldr	r1, [pc, #40]	; (800635c <HAL_RCC_ClockConfig+0x1c0>)
 8006334:	5ccb      	ldrb	r3, [r1, r3]
 8006336:	fa22 f303 	lsr.w	r3, r2, r3
 800633a:	4a09      	ldr	r2, [pc, #36]	; (8006360 <HAL_RCC_ClockConfig+0x1c4>)
 800633c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800633e:	4b09      	ldr	r3, [pc, #36]	; (8006364 <HAL_RCC_ClockConfig+0x1c8>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f7fd fa1a 	bl	800377c <HAL_InitTick>

  return HAL_OK;
 8006348:	2300      	movs	r3, #0
}
 800634a:	4618      	mov	r0, r3
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	40023c00 	.word	0x40023c00
 8006358:	40023800 	.word	0x40023800
 800635c:	0800884c 	.word	0x0800884c
 8006360:	200000fc 	.word	0x200000fc
 8006364:	2000018c 	.word	0x2000018c

08006368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800636c:	b094      	sub	sp, #80	; 0x50
 800636e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006370:	2300      	movs	r3, #0
 8006372:	647b      	str	r3, [r7, #68]	; 0x44
 8006374:	2300      	movs	r3, #0
 8006376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006378:	2300      	movs	r3, #0
 800637a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006380:	4b79      	ldr	r3, [pc, #484]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	f003 030c 	and.w	r3, r3, #12
 8006388:	2b08      	cmp	r3, #8
 800638a:	d00d      	beq.n	80063a8 <HAL_RCC_GetSysClockFreq+0x40>
 800638c:	2b08      	cmp	r3, #8
 800638e:	f200 80e1 	bhi.w	8006554 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <HAL_RCC_GetSysClockFreq+0x34>
 8006396:	2b04      	cmp	r3, #4
 8006398:	d003      	beq.n	80063a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800639a:	e0db      	b.n	8006554 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800639c:	4b73      	ldr	r3, [pc, #460]	; (800656c <HAL_RCC_GetSysClockFreq+0x204>)
 800639e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063a0:	e0db      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063a2:	4b73      	ldr	r3, [pc, #460]	; (8006570 <HAL_RCC_GetSysClockFreq+0x208>)
 80063a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80063a6:	e0d8      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063a8:	4b6f      	ldr	r3, [pc, #444]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063b2:	4b6d      	ldr	r3, [pc, #436]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d063      	beq.n	8006486 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063be:	4b6a      	ldr	r3, [pc, #424]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	099b      	lsrs	r3, r3, #6
 80063c4:	2200      	movs	r2, #0
 80063c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80063c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d0:	633b      	str	r3, [r7, #48]	; 0x30
 80063d2:	2300      	movs	r3, #0
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
 80063d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063da:	4622      	mov	r2, r4
 80063dc:	462b      	mov	r3, r5
 80063de:	f04f 0000 	mov.w	r0, #0
 80063e2:	f04f 0100 	mov.w	r1, #0
 80063e6:	0159      	lsls	r1, r3, #5
 80063e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063ec:	0150      	lsls	r0, r2, #5
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	4621      	mov	r1, r4
 80063f4:	1a51      	subs	r1, r2, r1
 80063f6:	6139      	str	r1, [r7, #16]
 80063f8:	4629      	mov	r1, r5
 80063fa:	eb63 0301 	sbc.w	r3, r3, r1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800640c:	4659      	mov	r1, fp
 800640e:	018b      	lsls	r3, r1, #6
 8006410:	4651      	mov	r1, sl
 8006412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006416:	4651      	mov	r1, sl
 8006418:	018a      	lsls	r2, r1, #6
 800641a:	4651      	mov	r1, sl
 800641c:	ebb2 0801 	subs.w	r8, r2, r1
 8006420:	4659      	mov	r1, fp
 8006422:	eb63 0901 	sbc.w	r9, r3, r1
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800643a:	4690      	mov	r8, r2
 800643c:	4699      	mov	r9, r3
 800643e:	4623      	mov	r3, r4
 8006440:	eb18 0303 	adds.w	r3, r8, r3
 8006444:	60bb      	str	r3, [r7, #8]
 8006446:	462b      	mov	r3, r5
 8006448:	eb49 0303 	adc.w	r3, r9, r3
 800644c:	60fb      	str	r3, [r7, #12]
 800644e:	f04f 0200 	mov.w	r2, #0
 8006452:	f04f 0300 	mov.w	r3, #0
 8006456:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800645a:	4629      	mov	r1, r5
 800645c:	024b      	lsls	r3, r1, #9
 800645e:	4621      	mov	r1, r4
 8006460:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006464:	4621      	mov	r1, r4
 8006466:	024a      	lsls	r2, r1, #9
 8006468:	4610      	mov	r0, r2
 800646a:	4619      	mov	r1, r3
 800646c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646e:	2200      	movs	r2, #0
 8006470:	62bb      	str	r3, [r7, #40]	; 0x28
 8006472:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006474:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006478:	f7f9 ff18 	bl	80002ac <__aeabi_uldivmod>
 800647c:	4602      	mov	r2, r0
 800647e:	460b      	mov	r3, r1
 8006480:	4613      	mov	r3, r2
 8006482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006484:	e058      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006486:	4b38      	ldr	r3, [pc, #224]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	099b      	lsrs	r3, r3, #6
 800648c:	2200      	movs	r2, #0
 800648e:	4618      	mov	r0, r3
 8006490:	4611      	mov	r1, r2
 8006492:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006496:	623b      	str	r3, [r7, #32]
 8006498:	2300      	movs	r3, #0
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
 800649c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064a0:	4642      	mov	r2, r8
 80064a2:	464b      	mov	r3, r9
 80064a4:	f04f 0000 	mov.w	r0, #0
 80064a8:	f04f 0100 	mov.w	r1, #0
 80064ac:	0159      	lsls	r1, r3, #5
 80064ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064b2:	0150      	lsls	r0, r2, #5
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4641      	mov	r1, r8
 80064ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80064be:	4649      	mov	r1, r9
 80064c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064d8:	ebb2 040a 	subs.w	r4, r2, sl
 80064dc:	eb63 050b 	sbc.w	r5, r3, fp
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	00eb      	lsls	r3, r5, #3
 80064ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ee:	00e2      	lsls	r2, r4, #3
 80064f0:	4614      	mov	r4, r2
 80064f2:	461d      	mov	r5, r3
 80064f4:	4643      	mov	r3, r8
 80064f6:	18e3      	adds	r3, r4, r3
 80064f8:	603b      	str	r3, [r7, #0]
 80064fa:	464b      	mov	r3, r9
 80064fc:	eb45 0303 	adc.w	r3, r5, r3
 8006500:	607b      	str	r3, [r7, #4]
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800650e:	4629      	mov	r1, r5
 8006510:	028b      	lsls	r3, r1, #10
 8006512:	4621      	mov	r1, r4
 8006514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006518:	4621      	mov	r1, r4
 800651a:	028a      	lsls	r2, r1, #10
 800651c:	4610      	mov	r0, r2
 800651e:	4619      	mov	r1, r3
 8006520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006522:	2200      	movs	r2, #0
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	61fa      	str	r2, [r7, #28]
 8006528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800652c:	f7f9 febe 	bl	80002ac <__aeabi_uldivmod>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	4613      	mov	r3, r2
 8006536:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_RCC_GetSysClockFreq+0x200>)
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	0c1b      	lsrs	r3, r3, #16
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	3301      	adds	r3, #1
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006548:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800654a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006552:	e002      	b.n	800655a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006554:	4b05      	ldr	r3, [pc, #20]	; (800656c <HAL_RCC_GetSysClockFreq+0x204>)
 8006556:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800655a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800655c:	4618      	mov	r0, r3
 800655e:	3750      	adds	r7, #80	; 0x50
 8006560:	46bd      	mov	sp, r7
 8006562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006566:	bf00      	nop
 8006568:	40023800 	.word	0x40023800
 800656c:	00f42400 	.word	0x00f42400
 8006570:	007a1200 	.word	0x007a1200

08006574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <HAL_RCC_GetHCLKFreq+0x14>)
 800657a:	681b      	ldr	r3, [r3, #0]
}
 800657c:	4618      	mov	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	200000fc 	.word	0x200000fc

0800658c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006590:	f7ff fff0 	bl	8006574 <HAL_RCC_GetHCLKFreq>
 8006594:	4602      	mov	r2, r0
 8006596:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	0a9b      	lsrs	r3, r3, #10
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	4903      	ldr	r1, [pc, #12]	; (80065b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065a2:	5ccb      	ldrb	r3, [r1, r3]
 80065a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	0800885c 	.word	0x0800885c

080065b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10b      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d075      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065e8:	4b91      	ldr	r3, [pc, #580]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065ee:	f7fd f909 	bl	8003804 <HAL_GetTick>
 80065f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065f4:	e008      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065f6:	f7fd f905 	bl	8003804 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e189      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006608:	4b8a      	ldr	r3, [pc, #552]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1f0      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d009      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	019a      	lsls	r2, r3, #6
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	071b      	lsls	r3, r3, #28
 800662c:	4981      	ldr	r1, [pc, #516]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800662e:	4313      	orrs	r3, r2
 8006630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01f      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006640:	4b7c      	ldr	r3, [pc, #496]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006646:	0f1b      	lsrs	r3, r3, #28
 8006648:	f003 0307 	and.w	r3, r3, #7
 800664c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	019a      	lsls	r2, r3, #6
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	061b      	lsls	r3, r3, #24
 800665a:	431a      	orrs	r2, r3
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	071b      	lsls	r3, r3, #28
 8006660:	4974      	ldr	r1, [pc, #464]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006662:	4313      	orrs	r3, r2
 8006664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006668:	4b72      	ldr	r3, [pc, #456]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800666a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800666e:	f023 021f 	bic.w	r2, r3, #31
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	69db      	ldr	r3, [r3, #28]
 8006676:	3b01      	subs	r3, #1
 8006678:	496e      	ldr	r1, [pc, #440]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00d      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	019a      	lsls	r2, r3, #6
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	061b      	lsls	r3, r3, #24
 8006698:	431a      	orrs	r2, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	071b      	lsls	r3, r3, #28
 80066a0:	4964      	ldr	r1, [pc, #400]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80066a8:	4b61      	ldr	r3, [pc, #388]	; (8006830 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80066aa:	2201      	movs	r2, #1
 80066ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ae:	f7fd f8a9 	bl	8003804 <HAL_GetTick>
 80066b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066b4:	e008      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066b6:	f7fd f8a5 	bl	8003804 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e129      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066c8:	4b5a      	ldr	r3, [pc, #360]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d0f0      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d105      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d079      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066ec:	4b52      	ldr	r3, [pc, #328]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066f2:	f7fd f887 	bl	8003804 <HAL_GetTick>
 80066f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066f8:	e008      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80066fa:	f7fd f883 	bl	8003804 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e107      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800670c:	4b49      	ldr	r3, [pc, #292]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006718:	d0ef      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b00      	cmp	r3, #0
 8006724:	d020      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006726:	4b43      	ldr	r3, [pc, #268]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672c:	0f1b      	lsrs	r3, r3, #28
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	019a      	lsls	r2, r3, #6
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	061b      	lsls	r3, r3, #24
 8006740:	431a      	orrs	r2, r3
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	071b      	lsls	r3, r3, #28
 8006746:	493b      	ldr	r1, [pc, #236]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006748:	4313      	orrs	r3, r2
 800674a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800674e:	4b39      	ldr	r3, [pc, #228]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006754:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	3b01      	subs	r3, #1
 800675e:	021b      	lsls	r3, r3, #8
 8006760:	4934      	ldr	r1, [pc, #208]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01e      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006774:	4b2f      	ldr	r3, [pc, #188]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	0e1b      	lsrs	r3, r3, #24
 800677c:	f003 030f 	and.w	r3, r3, #15
 8006780:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	019a      	lsls	r2, r3, #6
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	061b      	lsls	r3, r3, #24
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	071b      	lsls	r3, r3, #28
 8006794:	4927      	ldr	r1, [pc, #156]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800679c:	4b25      	ldr	r3, [pc, #148]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800679e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	4922      	ldr	r1, [pc, #136]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80067b2:	4b21      	ldr	r3, [pc, #132]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067b4:	2201      	movs	r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067b8:	f7fd f824 	bl	8003804 <HAL_GetTick>
 80067bc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067be:	e008      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067c0:	f7fd f820 	bl	8003804 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e0a4      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067d2:	4b18      	ldr	r3, [pc, #96]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067de:	d1ef      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0320 	and.w	r3, r3, #32
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f000 808b 	beq.w	8006904 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
 80067f2:	4b10      	ldr	r3, [pc, #64]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f6:	4a0f      	ldr	r2, [pc, #60]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067fc:	6413      	str	r3, [r2, #64]	; 0x40
 80067fe:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800680a:	4b0c      	ldr	r3, [pc, #48]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a0b      	ldr	r2, [pc, #44]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006814:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006816:	f7fc fff5 	bl	8003804 <HAL_GetTick>
 800681a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800681c:	e010      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800681e:	f7fc fff1 	bl	8003804 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d909      	bls.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e075      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006830:	42470068 	.word	0x42470068
 8006834:	40023800 	.word	0x40023800
 8006838:	42470070 	.word	0x42470070
 800683c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006840:	4b38      	ldr	r3, [pc, #224]	; (8006924 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0e8      	beq.n	800681e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800684c:	4b36      	ldr	r3, [pc, #216]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800684e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006854:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d02f      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	429a      	cmp	r2, r3
 8006868:	d028      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800686a:	4b2f      	ldr	r3, [pc, #188]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006872:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006874:	4b2d      	ldr	r3, [pc, #180]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006876:	2201      	movs	r2, #1
 8006878:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800687a:	4b2c      	ldr	r3, [pc, #176]	; (800692c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006880:	4a29      	ldr	r2, [pc, #164]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006886:	4b28      	ldr	r3, [pc, #160]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b01      	cmp	r3, #1
 8006890:	d114      	bne.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006892:	f7fc ffb7 	bl	8003804 <HAL_GetTick>
 8006896:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006898:	e00a      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800689a:	f7fc ffb3 	bl	8003804 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d901      	bls.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e035      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b0:	4b1d      	ldr	r3, [pc, #116]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0ee      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c8:	d10d      	bne.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80068ca:	4b17      	ldr	r3, [pc, #92]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80068da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068de:	4912      	ldr	r1, [pc, #72]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	608b      	str	r3, [r1, #8]
 80068e4:	e005      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80068e6:	4b10      	ldr	r3, [pc, #64]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	4a0f      	ldr	r2, [pc, #60]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80068f0:	6093      	str	r3, [r2, #8]
 80068f2:	4b0d      	ldr	r3, [pc, #52]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80068f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068fe:	490a      	ldr	r1, [pc, #40]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006900:	4313      	orrs	r3, r2
 8006902:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	d004      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006916:	4b06      	ldr	r3, [pc, #24]	; (8006930 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006918:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3718      	adds	r7, #24
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40007000 	.word	0x40007000
 8006928:	40023800 	.word	0x40023800
 800692c:	42470e40 	.word	0x42470e40
 8006930:	424711e0 	.word	0x424711e0

08006934 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e025      	b.n	8006994 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d106      	bne.n	8006962 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f81d 	bl	800699c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f000 ff0f 	bl	8007798 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	461a      	mov	r2, r3
 8006984:	6839      	ldr	r1, [r7, #0]
 8006986:	f000 ff7a 	bl	800787e <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d101      	bne.n	80069cc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80069c8:	2302      	movs	r3, #2
 80069ca:	e018      	b.n	80069fe <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 ffcd 	bl	800797c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d104      	bne.n	80069f4 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2205      	movs	r2, #5
 80069ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80069f2:	e003      	b.n	80069fc <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d101      	bne.n	8006a20 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e00e      	b.n	8006a3e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f000 ffe0 	bl	80079f4 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e05d      	b.n	8006b14 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d106      	bne.n	8006a72 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f87d 	bl	8006b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2202      	movs	r2, #2
 8006a76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a88:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	431a      	orrs	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	431a      	orrs	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	ea42 0103 	orr.w	r1, r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	0c1b      	lsrs	r3, r3, #16
 8006ad0:	f003 0104 	and.w	r1, r3, #4
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ae8:	d104      	bne.n	8006af4 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006af2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	69da      	ldr	r2, [r3, #28]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e01a      	b.n	8006b64 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2202      	movs	r2, #2
 8006b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b44:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f81a 	bl	8006b80 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <HAL_SPI_Transmit+0x22>
 8006bb2:	2302      	movs	r3, #2
 8006bb4:	e140      	b.n	8006e38 <HAL_SPI_Transmit+0x2a4>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bbe:	f7fc fe21 	bl	8003804 <HAL_GetTick>
 8006bc2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d002      	beq.n	8006bda <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bd8:	e125      	b.n	8006e26 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d002      	beq.n	8006be6 <HAL_SPI_Transmit+0x52>
 8006be0:	88fb      	ldrh	r3, [r7, #6]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d102      	bne.n	8006bec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bea:	e11c      	b.n	8006e26 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2203      	movs	r2, #3
 8006bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	88fa      	ldrh	r2, [r7, #6]
 8006c04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	88fa      	ldrh	r2, [r7, #6]
 8006c0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2200      	movs	r2, #0
 8006c16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c32:	d107      	bne.n	8006c44 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c42:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4c:	d10f      	bne.n	8006c6e <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c6c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d007      	beq.n	8006c8c <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c94:	d14b      	bne.n	8006d2e <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_SPI_Transmit+0x110>
 8006c9e:	8afb      	ldrh	r3, [r7, #22]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d13e      	bne.n	8006d22 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca8:	881a      	ldrh	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb4:	1c9a      	adds	r2, r3, #2
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cc8:	e02b      	b.n	8006d22 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d112      	bne.n	8006cfe <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	881a      	ldrh	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	1c9a      	adds	r2, r3, #2
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cfc:	e011      	b.n	8006d22 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cfe:	f7fc fd81 	bl	8003804 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d803      	bhi.n	8006d16 <HAL_SPI_Transmit+0x182>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d14:	d102      	bne.n	8006d1c <HAL_SPI_Transmit+0x188>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d20:	e081      	b.n	8006e26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1ce      	bne.n	8006cca <HAL_SPI_Transmit+0x136>
 8006d2c:	e04c      	b.n	8006dc8 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_SPI_Transmit+0x1a8>
 8006d36:	8afb      	ldrh	r3, [r7, #22]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d140      	bne.n	8006dbe <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	330c      	adds	r3, #12
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d62:	e02c      	b.n	8006dbe <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d113      	bne.n	8006d9a <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	7812      	ldrb	r2, [r2, #0]
 8006d7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	3b01      	subs	r3, #1
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d98:	e011      	b.n	8006dbe <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d9a:	f7fc fd33 	bl	8003804 <HAL_GetTick>
 8006d9e:	4602      	mov	r2, r0
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	1ad3      	subs	r3, r2, r3
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d803      	bhi.n	8006db2 <HAL_SPI_Transmit+0x21e>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006db0:	d102      	bne.n	8006db8 <HAL_SPI_Transmit+0x224>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d102      	bne.n	8006dbe <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dbc:	e033      	b.n	8006e26 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1cd      	bne.n	8006d64 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd0:	d107      	bne.n	8006de2 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006de0:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fc94 	bl	8007714 <SPI_EndRxTxTransaction>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2220      	movs	r2, #32
 8006df6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10a      	bne.n	8006e16 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e00:	2300      	movs	r3, #0
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	613b      	str	r3, [r7, #16]
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	613b      	str	r3, [r7, #16]
 8006e14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	77fb      	strb	r3, [r7, #31]
 8006e22:	e000      	b.n	8006e26 <HAL_SPI_Transmit+0x292>
  }

error:
 8006e24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e36:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e5c:	d112      	bne.n	8006e84 <HAL_SPI_Receive+0x44>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10e      	bne.n	8006e84 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2204      	movs	r2, #4
 8006e6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e6e:	88fa      	ldrh	r2, [r7, #6]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	4613      	mov	r3, r2
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f000 f95f 	bl	800713e <HAL_SPI_TransmitReceive>
 8006e80:	4603      	mov	r3, r0
 8006e82:	e158      	b.n	8007136 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d101      	bne.n	8006e92 <HAL_SPI_Receive+0x52>
 8006e8e:	2302      	movs	r3, #2
 8006e90:	e151      	b.n	8007136 <HAL_SPI_Receive+0x2f6>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e9a:	f7fc fcb3 	bl	8003804 <HAL_GetTick>
 8006e9e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d002      	beq.n	8006eb2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006eac:	2302      	movs	r3, #2
 8006eae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006eb0:	e138      	b.n	8007124 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <HAL_SPI_Receive+0x7e>
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d102      	bne.n	8006ec4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006ec2:	e12f      	b.n	8007124 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2204      	movs	r2, #4
 8006ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	88fa      	ldrh	r2, [r7, #6]
 8006edc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	88fa      	ldrh	r2, [r7, #6]
 8006ee2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2200      	movs	r2, #0
 8006eee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f0a:	d116      	bne.n	8006f3a <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	681a      	ldr	r2, [r3, #0]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f2a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f42:	d107      	bne.n	8006f54 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f52:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5e:	2b40      	cmp	r3, #64	; 0x40
 8006f60:	d007      	beq.n	8006f72 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f70:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d162      	bne.n	8007040 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f7a:	e02e      	b.n	8006fda <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d115      	bne.n	8006fb6 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f103 020c 	add.w	r2, r3, #12
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	7812      	ldrb	r2, [r2, #0]
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	3b01      	subs	r3, #1
 8006fae:	b29a      	uxth	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fb4:	e011      	b.n	8006fda <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb6:	f7fc fc25 	bl	8003804 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d803      	bhi.n	8006fce <HAL_SPI_Receive+0x18e>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fcc:	d102      	bne.n	8006fd4 <HAL_SPI_Receive+0x194>
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fd8:	e0a4      	b.n	8007124 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1cb      	bne.n	8006f7c <HAL_SPI_Receive+0x13c>
 8006fe4:	e031      	b.n	800704a <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d113      	bne.n	800701c <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffe:	b292      	uxth	r2, r2
 8007000:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007006:	1c9a      	adds	r2, r3, #2
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007010:	b29b      	uxth	r3, r3
 8007012:	3b01      	subs	r3, #1
 8007014:	b29a      	uxth	r2, r3
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	87da      	strh	r2, [r3, #62]	; 0x3e
 800701a:	e011      	b.n	8007040 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800701c:	f7fc fbf2 	bl	8003804 <HAL_GetTick>
 8007020:	4602      	mov	r2, r0
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d803      	bhi.n	8007034 <HAL_SPI_Receive+0x1f4>
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007032:	d102      	bne.n	800703a <HAL_SPI_Receive+0x1fa>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d102      	bne.n	8007040 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800703e:	e071      	b.n	8007124 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1cd      	bne.n	8006fe6 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007052:	d142      	bne.n	80070da <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007062:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2201      	movs	r2, #1
 800706c:	2101      	movs	r1, #1
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 fa81 	bl	8007576 <SPI_WaitFlagStateUntilTimeout>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	75fb      	strb	r3, [r7, #23]
      goto error;
 800707e:	e051      	b.n	8007124 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007088:	d107      	bne.n	800709a <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68da      	ldr	r2, [r3, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007094:	b292      	uxth	r2, r2
 8007096:	801a      	strh	r2, [r3, #0]
 8007098:	e008      	b.n	80070ac <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f103 020c 	add.w	r2, r3, #12
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	7812      	ldrb	r2, [r2, #0]
 80070a8:	b2d2      	uxtb	r2, r2
 80070aa:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2201      	movs	r2, #1
 80070b4:	2101      	movs	r1, #1
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f000 fa5d 	bl	8007576 <SPI_WaitFlagStateUntilTimeout>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d008      	beq.n	80070d4 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c6:	f043 0202 	orr.w	r2, r3, #2
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	75fb      	strb	r3, [r7, #23]
      goto error;
 80070d2:	e027      	b.n	8007124 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 fab3 	bl	800764a <SPI_EndRxTransaction>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2220      	movs	r2, #32
 80070ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d10a      	bne.n	8007114 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007102:	f043 0202 	orr.w	r2, r3, #2
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007112:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	75fb      	strb	r3, [r7, #23]
 8007120:	e000      	b.n	8007124 <HAL_SPI_Receive+0x2e4>
  }

error :
 8007122:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3718      	adds	r7, #24
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b08e      	sub	sp, #56	; 0x38
 8007142:	af02      	add	r7, sp, #8
 8007144:	60f8      	str	r0, [r7, #12]
 8007146:	60b9      	str	r1, [r7, #8]
 8007148:	607a      	str	r2, [r7, #4]
 800714a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800714c:	2301      	movs	r3, #1
 800714e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007150:	2300      	movs	r3, #0
 8007152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_SPI_TransmitReceive+0x26>
 8007160:	2302      	movs	r3, #2
 8007162:	e1f6      	b.n	8007552 <HAL_SPI_TransmitReceive+0x414>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800716c:	f7fc fb4a 	bl	8003804 <HAL_GetTick>
 8007170:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007182:	887b      	ldrh	r3, [r7, #2]
 8007184:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800718a:	2b01      	cmp	r3, #1
 800718c:	d00f      	beq.n	80071ae <HAL_SPI_TransmitReceive+0x70>
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007194:	d107      	bne.n	80071a6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d103      	bne.n	80071a6 <HAL_SPI_TransmitReceive+0x68>
 800719e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d003      	beq.n	80071ae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80071a6:	2302      	movs	r3, #2
 80071a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071ac:	e1c7      	b.n	800753e <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x82>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x82>
 80071ba:	887b      	ldrh	r3, [r7, #2]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d103      	bne.n	80071c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071c6:	e1ba      	b.n	800753e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d003      	beq.n	80071dc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2205      	movs	r2, #5
 80071d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2200      	movs	r2, #0
 80071e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	887a      	ldrh	r2, [r7, #2]
 80071ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	887a      	ldrh	r2, [r7, #2]
 80071f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	887a      	ldrh	r2, [r7, #2]
 80071fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	887a      	ldrh	r2, [r7, #2]
 8007204:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800721a:	d10f      	bne.n	800723c <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800723a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d007      	beq.n	800725a <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007258:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	68db      	ldr	r3, [r3, #12]
 800725e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007262:	f040 808b 	bne.w	800737c <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <HAL_SPI_TransmitReceive+0x136>
 800726e:	8b7b      	ldrh	r3, [r7, #26]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d178      	bne.n	8007366 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	881a      	ldrh	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	1c9a      	adds	r2, r3, #2
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007298:	e065      	b.n	8007366 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d12d      	bne.n	8007304 <HAL_SPI_TransmitReceive+0x1c6>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ac:	b29b      	uxth	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d028      	beq.n	8007304 <HAL_SPI_TransmitReceive+0x1c6>
 80072b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d125      	bne.n	8007304 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072bc:	881a      	ldrh	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	1c9a      	adds	r2, r3, #2
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	3b01      	subs	r3, #1
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d10c      	bne.n	8007304 <HAL_SPI_TransmitReceive+0x1c6>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072f2:	d107      	bne.n	8007304 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007302:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b01      	cmp	r3, #1
 8007310:	d119      	bne.n	8007346 <HAL_SPI_TransmitReceive+0x208>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007316:	b29b      	uxth	r3, r3
 8007318:	2b00      	cmp	r3, #0
 800731a:	d014      	beq.n	8007346 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	b292      	uxth	r2, r2
 8007328:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	1c9a      	adds	r2, r3, #2
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007338:	b29b      	uxth	r3, r3
 800733a:	3b01      	subs	r3, #1
 800733c:	b29a      	uxth	r2, r3
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007342:	2301      	movs	r3, #1
 8007344:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007346:	f7fc fa5d 	bl	8003804 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007352:	429a      	cmp	r2, r3
 8007354:	d807      	bhi.n	8007366 <HAL_SPI_TransmitReceive+0x228>
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800735c:	d003      	beq.n	8007366 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007364:	e0eb      	b.n	800753e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800736a:	b29b      	uxth	r3, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	d194      	bne.n	800729a <HAL_SPI_TransmitReceive+0x15c>
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007374:	b29b      	uxth	r3, r3
 8007376:	2b00      	cmp	r3, #0
 8007378:	d18f      	bne.n	800729a <HAL_SPI_TransmitReceive+0x15c>
 800737a:	e08e      	b.n	800749a <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <HAL_SPI_TransmitReceive+0x24c>
 8007384:	8b7b      	ldrh	r3, [r7, #26]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d17d      	bne.n	8007486 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	330c      	adds	r3, #12
 8007394:	7812      	ldrb	r2, [r2, #0]
 8007396:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	3b01      	subs	r3, #1
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073b0:	e069      	b.n	8007486 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d12e      	bne.n	800741e <HAL_SPI_TransmitReceive+0x2e0>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d029      	beq.n	800741e <HAL_SPI_TransmitReceive+0x2e0>
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d126      	bne.n	800741e <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	7812      	ldrb	r2, [r2, #0]
 80073dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10c      	bne.n	800741e <HAL_SPI_TransmitReceive+0x2e0>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800740c:	d107      	bne.n	800741e <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800741c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b01      	cmp	r3, #1
 800742a:	d119      	bne.n	8007460 <HAL_SPI_TransmitReceive+0x322>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d014      	beq.n	8007460 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800745c:	2301      	movs	r3, #1
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007460:	f7fc f9d0 	bl	8003804 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800746c:	429a      	cmp	r2, r3
 800746e:	d803      	bhi.n	8007478 <HAL_SPI_TransmitReceive+0x33a>
 8007470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007476:	d102      	bne.n	800747e <HAL_SPI_TransmitReceive+0x340>
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	2b00      	cmp	r3, #0
 800747c:	d103      	bne.n	8007486 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007484:	e05b      	b.n	800753e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800748a:	b29b      	uxth	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d190      	bne.n	80073b2 <HAL_SPI_TransmitReceive+0x274>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d18b      	bne.n	80073b2 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a2:	d117      	bne.n	80074d4 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074aa:	2201      	movs	r2, #1
 80074ac:	2101      	movs	r1, #1
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	f000 f861 	bl	8007576 <SPI_WaitFlagStateUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074be:	f043 0202 	orr.w	r2, r3, #2
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80074cc:	e037      	b.n	800753e <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 0310 	and.w	r3, r3, #16
 80074de:	2b10      	cmp	r3, #16
 80074e0:	d10d      	bne.n	80074fe <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074e6:	f043 0202 	orr.w	r2, r3, #2
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80074f6:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007500:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 f906 	bl	8007714 <SPI_EndRxTxTransaction>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d006      	beq.n	800751c <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800751a:	e010      	b.n	800753e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10b      	bne.n	800753c <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	617b      	str	r3, [r7, #20]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	e000      	b.n	800753e <HAL_SPI_TransmitReceive+0x400>
  }

error :
 800753c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800754e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007552:	4618      	mov	r0, r3
 8007554:	3730      	adds	r7, #48	; 0x30
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}

0800755a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007568:	b2db      	uxtb	r3, r3
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	603b      	str	r3, [r7, #0]
 8007582:	4613      	mov	r3, r2
 8007584:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007586:	e04c      	b.n	8007622 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800758e:	d048      	beq.n	8007622 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007590:	f7fc f938 	bl	8003804 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d902      	bls.n	80075a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d13d      	bne.n	8007622 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075be:	d111      	bne.n	80075e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c8:	d004      	beq.n	80075d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d2:	d107      	bne.n	80075e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075ec:	d10f      	bne.n	800760e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075fc:	601a      	str	r2, [r3, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800760c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e00f      	b.n	8007642 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	689a      	ldr	r2, [r3, #8]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	4013      	ands	r3, r2
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	429a      	cmp	r2, r3
 8007630:	bf0c      	ite	eq
 8007632:	2301      	moveq	r3, #1
 8007634:	2300      	movne	r3, #0
 8007636:	b2db      	uxtb	r3, r3
 8007638:	461a      	mov	r2, r3
 800763a:	79fb      	ldrb	r3, [r7, #7]
 800763c:	429a      	cmp	r2, r3
 800763e:	d1a3      	bne.n	8007588 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af02      	add	r7, sp, #8
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	60b9      	str	r1, [r7, #8]
 8007654:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800765e:	d111      	bne.n	8007684 <SPI_EndRxTransaction+0x3a>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007668:	d004      	beq.n	8007674 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007672:	d107      	bne.n	8007684 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007682:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	685b      	ldr	r3, [r3, #4]
 8007688:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800768c:	d12a      	bne.n	80076e4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007696:	d012      	beq.n	80076be <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	9300      	str	r3, [sp, #0]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2200      	movs	r2, #0
 80076a0:	2180      	movs	r1, #128	; 0x80
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7ff ff67 	bl	8007576 <SPI_WaitFlagStateUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d02d      	beq.n	800770a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b2:	f043 0220 	orr.w	r2, r3, #32
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e026      	b.n	800770c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2200      	movs	r2, #0
 80076c6:	2101      	movs	r1, #1
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f7ff ff54 	bl	8007576 <SPI_WaitFlagStateUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01a      	beq.n	800770a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d8:	f043 0220 	orr.w	r2, r3, #32
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e013      	b.n	800770c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2200      	movs	r2, #0
 80076ec:	2101      	movs	r1, #1
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7ff ff41 	bl	8007576 <SPI_WaitFlagStateUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d007      	beq.n	800770a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fe:	f043 0220 	orr.w	r2, r3, #32
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e000      	b.n	800770c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b088      	sub	sp, #32
 8007718:	af02      	add	r7, sp, #8
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007720:	4b1b      	ldr	r3, [pc, #108]	; (8007790 <SPI_EndRxTxTransaction+0x7c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1b      	ldr	r2, [pc, #108]	; (8007794 <SPI_EndRxTxTransaction+0x80>)
 8007726:	fba2 2303 	umull	r2, r3, r2, r3
 800772a:	0d5b      	lsrs	r3, r3, #21
 800772c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007730:	fb02 f303 	mul.w	r3, r2, r3
 8007734:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800773e:	d112      	bne.n	8007766 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	2200      	movs	r2, #0
 8007748:	2180      	movs	r1, #128	; 0x80
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f7ff ff13 	bl	8007576 <SPI_WaitFlagStateUntilTimeout>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d016      	beq.n	8007784 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775a:	f043 0220 	orr.w	r2, r3, #32
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e00f      	b.n	8007786 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00a      	beq.n	8007782 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	3b01      	subs	r3, #1
 8007770:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777c:	2b80      	cmp	r3, #128	; 0x80
 800777e:	d0f2      	beq.n	8007766 <SPI_EndRxTxTransaction+0x52>
 8007780:	e000      	b.n	8007784 <SPI_EndRxTxTransaction+0x70>
        break;
 8007782:	bf00      	nop
  }

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3718      	adds	r7, #24
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	200000fc 	.word	0x200000fc
 8007794:	165e9f81 	.word	0x165e9f81

08007798 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d029      	beq.n	8007806 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80077be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80077c2:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80077cc:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80077d2:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80077d8:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80077de:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80077e4:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80077ea:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80077f0:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80077f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	601a      	str	r2, [r3, #0]
 8007804:	e034      	b.n	8007870 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007812:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800781c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8007822:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007836:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800783a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007844:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800784a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8007850:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8007856:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 800785c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800785e:	68ba      	ldr	r2, [r7, #8]
 8007860:	4313      	orrs	r3, r2
 8007862:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800787e:	b480      	push	{r7}
 8007880:	b087      	sub	sp, #28
 8007882:	af00      	add	r7, sp, #0
 8007884:	60f8      	str	r0, [r7, #12]
 8007886:	60b9      	str	r1, [r7, #8]
 8007888:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 800788a:	2300      	movs	r3, #0
 800788c:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b01      	cmp	r3, #1
 8007896:	d02e      	beq.n	80078f6 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80078a4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80078b4:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	3b01      	subs	r3, #1
 80078bc:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80078be:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	3b01      	subs	r3, #1
 80078c6:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80078c8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	3b01      	subs	r3, #1
 80078d0:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80078d2:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	3b01      	subs	r3, #1
 80078da:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80078dc:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80078e6:	4313      	orrs	r3, r2
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	609a      	str	r2, [r3, #8]
 80078f4:	e03b      	b.n	800796e <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007902:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007906:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	3b01      	subs	r3, #1
 800790e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	3b01      	subs	r3, #1
 8007916:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007918:	4313      	orrs	r3, r2
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	4313      	orrs	r3, r2
 800791e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800792c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	3b01      	subs	r3, #1
 800793a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800793c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	3b01      	subs	r3, #1
 8007944:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007946:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	3b01      	subs	r3, #1
 800794e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8007950:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	3b01      	subs	r3, #1
 8007958:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800795a:	4313      	orrs	r3, r2
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	4313      	orrs	r3, r2
 8007960:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8007988:	2300      	movs	r3, #0
 800798a:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8007998:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	3b01      	subs	r3, #1
 80079a0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80079a2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80079aa:	4313      	orrs	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80079ae:	693a      	ldr	r2, [r7, #16]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80079b4:	f7fb ff26 	bl	8003804 <HAL_GetTick>
 80079b8:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80079ba:	e010      	b.n	80079de <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079c2:	d00c      	beq.n	80079de <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d007      	beq.n	80079da <FMC_SDRAM_SendCommand+0x5e>
 80079ca:	f7fb ff1b 	bl	8003804 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d201      	bcs.n	80079de <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e006      	b.n	80079ec <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	f003 0320 	and.w	r3, r3, #32
 80079e6:	2b20      	cmp	r3, #32
 80079e8:	d0e8      	beq.n	80079bc <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	695a      	ldr	r2, [r3, #20]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	431a      	orrs	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	370c      	adds	r7, #12
 8007a12:	46bd      	mov	sp, r7
 8007a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a18:	4770      	bx	lr
	...

08007a1c <arm_cfft_radix8by2_f32>:
 8007a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a20:	ed2d 8b08 	vpush	{d8-d11}
 8007a24:	4607      	mov	r7, r0
 8007a26:	4608      	mov	r0, r1
 8007a28:	f8b7 e000 	ldrh.w	lr, [r7]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8007a32:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8007a36:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8007a3a:	f000 80b0 	beq.w	8007b9e <arm_cfft_radix8by2_f32+0x182>
 8007a3e:	008b      	lsls	r3, r1, #2
 8007a40:	3310      	adds	r3, #16
 8007a42:	18c6      	adds	r6, r0, r3
 8007a44:	3210      	adds	r2, #16
 8007a46:	4443      	add	r3, r8
 8007a48:	f100 0510 	add.w	r5, r0, #16
 8007a4c:	f108 0410 	add.w	r4, r8, #16
 8007a50:	ed54 1a04 	vldr	s3, [r4, #-16]
 8007a54:	ed54 6a03 	vldr	s13, [r4, #-12]
 8007a58:	ed13 4a04 	vldr	s8, [r3, #-16]
 8007a5c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8007a60:	ed53 5a02 	vldr	s11, [r3, #-8]
 8007a64:	ed13 5a01 	vldr	s10, [r3, #-4]
 8007a68:	ed14 0a02 	vldr	s0, [r4, #-8]
 8007a6c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8007a70:	ed16 2a04 	vldr	s4, [r6, #-16]
 8007a74:	ed56 2a03 	vldr	s5, [r6, #-12]
 8007a78:	ed15 6a03 	vldr	s12, [r5, #-12]
 8007a7c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8007a80:	ed15 3a04 	vldr	s6, [r5, #-16]
 8007a84:	ed56 0a02 	vldr	s1, [r6, #-8]
 8007a88:	ed16 1a01 	vldr	s2, [r6, #-4]
 8007a8c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8007a90:	ee73 ba21 	vadd.f32	s23, s6, s3
 8007a94:	ee36 ba26 	vadd.f32	s22, s12, s13
 8007a98:	ee37 aa27 	vadd.f32	s20, s14, s15
 8007a9c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8007aa0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8007aa4:	ee31 8a05 	vadd.f32	s16, s2, s10
 8007aa8:	ee74 aa80 	vadd.f32	s21, s9, s0
 8007aac:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8007ab0:	ed45 ba04 	vstr	s23, [r5, #-16]
 8007ab4:	ed05 ba03 	vstr	s22, [r5, #-12]
 8007ab8:	ed45 aa02 	vstr	s21, [r5, #-8]
 8007abc:	ed05 aa01 	vstr	s20, [r5, #-4]
 8007ac0:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007ac4:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007ac8:	ed06 9a03 	vstr	s18, [r6, #-12]
 8007acc:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007ad0:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007ad4:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007ad8:	ed12 6a03 	vldr	s12, [r2, #-12]
 8007adc:	ed52 2a04 	vldr	s5, [r2, #-16]
 8007ae0:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007ae4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007ae8:	ee26 8a86 	vmul.f32	s16, s13, s12
 8007aec:	ee24 2a06 	vmul.f32	s4, s8, s12
 8007af0:	ee63 1a22 	vmul.f32	s3, s6, s5
 8007af4:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007af8:	ee23 3a06 	vmul.f32	s6, s6, s12
 8007afc:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8007b00:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007b04:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007b08:	ee36 6a04 	vadd.f32	s12, s12, s8
 8007b0c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007b10:	ee72 3a63 	vsub.f32	s7, s4, s7
 8007b14:	ee71 2a88 	vadd.f32	s5, s3, s16
 8007b18:	ed44 6a03 	vstr	s13, [r4, #-12]
 8007b1c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8007b20:	ed43 3a04 	vstr	s7, [r3, #-16]
 8007b24:	ed03 6a03 	vstr	s12, [r3, #-12]
 8007b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007b2c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8007b30:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007b34:	ed52 5a02 	vldr	s11, [r2, #-8]
 8007b38:	ee35 6a41 	vsub.f32	s12, s10, s2
 8007b3c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8007b40:	ee67 3a87 	vmul.f32	s7, s15, s14
 8007b44:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007b48:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8007b4c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007b50:	ee64 4a87 	vmul.f32	s9, s9, s14
 8007b54:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007b58:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007b5c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8007b60:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007b64:	ee74 5a23 	vadd.f32	s11, s8, s7
 8007b68:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007b6c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007b70:	f1be 0e01 	subs.w	lr, lr, #1
 8007b74:	ed44 5a02 	vstr	s11, [r4, #-8]
 8007b78:	f105 0510 	add.w	r5, r5, #16
 8007b7c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8007b80:	f106 0610 	add.w	r6, r6, #16
 8007b84:	ed03 6a02 	vstr	s12, [r3, #-8]
 8007b88:	ed03 7a01 	vstr	s14, [r3, #-4]
 8007b8c:	f102 0210 	add.w	r2, r2, #16
 8007b90:	f104 0410 	add.w	r4, r4, #16
 8007b94:	f103 0310 	add.w	r3, r3, #16
 8007b98:	f47f af5a 	bne.w	8007a50 <arm_cfft_radix8by2_f32+0x34>
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	b28c      	uxth	r4, r1
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	f000 fae2 	bl	800816c <arm_radix8_butterfly_f32>
 8007ba8:	ecbd 8b08 	vpop	{d8-d11}
 8007bac:	4621      	mov	r1, r4
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb8:	f000 bad8 	b.w	800816c <arm_radix8_butterfly_f32>

08007bbc <arm_cfft_radix8by4_f32>:
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	ed2d 8b0a 	vpush	{d8-d12}
 8007bc4:	8802      	ldrh	r2, [r0, #0]
 8007bc6:	ed91 6a00 	vldr	s12, [r1]
 8007bca:	b08f      	sub	sp, #60	; 0x3c
 8007bcc:	460f      	mov	r7, r1
 8007bce:	0852      	lsrs	r2, r2, #1
 8007bd0:	6841      	ldr	r1, [r0, #4]
 8007bd2:	900c      	str	r0, [sp, #48]	; 0x30
 8007bd4:	0093      	lsls	r3, r2, #2
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	4418      	add	r0, r3
 8007bda:	4606      	mov	r6, r0
 8007bdc:	9009      	str	r0, [sp, #36]	; 0x24
 8007bde:	4418      	add	r0, r3
 8007be0:	edd0 6a00 	vldr	s13, [r0]
 8007be4:	ed96 4a00 	vldr	s8, [r6]
 8007be8:	edd6 2a01 	vldr	s5, [r6, #4]
 8007bec:	edd0 7a01 	vldr	s15, [r0, #4]
 8007bf0:	900a      	str	r0, [sp, #40]	; 0x28
 8007bf2:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007bf6:	4604      	mov	r4, r0
 8007bf8:	4625      	mov	r5, r4
 8007bfa:	441c      	add	r4, r3
 8007bfc:	edd4 4a00 	vldr	s9, [r4]
 8007c00:	ed97 7a01 	vldr	s14, [r7, #4]
 8007c04:	ed94 3a01 	vldr	s6, [r4, #4]
 8007c08:	9401      	str	r4, [sp, #4]
 8007c0a:	ee35 5a84 	vadd.f32	s10, s11, s8
 8007c0e:	4630      	mov	r0, r6
 8007c10:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007c14:	463e      	mov	r6, r7
 8007c16:	ee15 ea10 	vmov	lr, s10
 8007c1a:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007c1e:	f846 eb08 	str.w	lr, [r6], #8
 8007c22:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007c26:	ed90 5a01 	vldr	s10, [r0, #4]
 8007c2a:	9605      	str	r6, [sp, #20]
 8007c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c30:	9e01      	ldr	r6, [sp, #4]
 8007c32:	9707      	str	r7, [sp, #28]
 8007c34:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8007c38:	ed96 2a01 	vldr	s4, [r6, #4]
 8007c3c:	ee36 7a05 	vadd.f32	s14, s12, s10
 8007c40:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8007c44:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8007c48:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007c4c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8007c50:	4604      	mov	r4, r0
 8007c52:	46a3      	mov	fp, r4
 8007c54:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007c58:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007c5c:	ee14 8a10 	vmov	r8, s8
 8007c60:	46a4      	mov	ip, r4
 8007c62:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8007c66:	ed87 7a01 	vstr	s14, [r7, #4]
 8007c6a:	f84b 8b08 	str.w	r8, [fp], #8
 8007c6e:	f1ac 0704 	sub.w	r7, ip, #4
 8007c72:	ed8c 5a01 	vstr	s10, [ip, #4]
 8007c76:	f101 0c08 	add.w	ip, r1, #8
 8007c7a:	462c      	mov	r4, r5
 8007c7c:	f8cd c010 	str.w	ip, [sp, #16]
 8007c80:	ee15 ca90 	vmov	ip, s11
 8007c84:	ee36 6a62 	vsub.f32	s12, s12, s5
 8007c88:	f844 cb08 	str.w	ip, [r4], #8
 8007c8c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007c90:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007c94:	9406      	str	r4, [sp, #24]
 8007c96:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007c9a:	f101 0410 	add.w	r4, r1, #16
 8007c9e:	0852      	lsrs	r2, r2, #1
 8007ca0:	9402      	str	r4, [sp, #8]
 8007ca2:	ed85 6a01 	vstr	s12, [r5, #4]
 8007ca6:	462c      	mov	r4, r5
 8007ca8:	f101 0518 	add.w	r5, r1, #24
 8007cac:	920b      	str	r2, [sp, #44]	; 0x2c
 8007cae:	46b2      	mov	sl, r6
 8007cb0:	9503      	str	r5, [sp, #12]
 8007cb2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007cb6:	3a02      	subs	r2, #2
 8007cb8:	ee16 5a90 	vmov	r5, s13
 8007cbc:	46b6      	mov	lr, r6
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	0852      	lsrs	r2, r2, #1
 8007cc2:	f84a 5b08 	str.w	r5, [sl], #8
 8007cc6:	f1a0 0604 	sub.w	r6, r0, #4
 8007cca:	edce 7a01 	vstr	s15, [lr, #4]
 8007cce:	9208      	str	r2, [sp, #32]
 8007cd0:	f000 8130 	beq.w	8007f34 <arm_cfft_radix8by4_f32+0x378>
 8007cd4:	4691      	mov	r9, r2
 8007cd6:	9a07      	ldr	r2, [sp, #28]
 8007cd8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007cdc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007ce0:	3b08      	subs	r3, #8
 8007ce2:	f102 0510 	add.w	r5, r2, #16
 8007ce6:	f101 0c20 	add.w	ip, r1, #32
 8007cea:	f1a4 020c 	sub.w	r2, r4, #12
 8007cee:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8007cf2:	4433      	add	r3, r6
 8007cf4:	3410      	adds	r4, #16
 8007cf6:	4650      	mov	r0, sl
 8007cf8:	4659      	mov	r1, fp
 8007cfa:	ed55 3a02 	vldr	s7, [r5, #-8]
 8007cfe:	ed14 5a02 	vldr	s10, [r4, #-8]
 8007d02:	ed91 7a00 	vldr	s14, [r1]
 8007d06:	edd0 7a00 	vldr	s15, [r0]
 8007d0a:	ed54 5a01 	vldr	s11, [r4, #-4]
 8007d0e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8007d12:	edd0 6a01 	vldr	s13, [r0, #4]
 8007d16:	ed91 6a01 	vldr	s12, [r1, #4]
 8007d1a:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007d1e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8007d22:	ee78 4a07 	vadd.f32	s9, s16, s14
 8007d26:	ee74 5a65 	vsub.f32	s11, s8, s11
 8007d2a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8007d2e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007d32:	ed45 4a02 	vstr	s9, [r5, #-8]
 8007d36:	edd1 4a01 	vldr	s9, [r1, #4]
 8007d3a:	ed90 4a01 	vldr	s8, [r0, #4]
 8007d3e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8007d42:	ee75 aa06 	vadd.f32	s21, s10, s12
 8007d46:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007d4a:	ee35 aac7 	vsub.f32	s20, s11, s14
 8007d4e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8007d52:	edd6 1a00 	vldr	s3, [r6]
 8007d56:	edd7 0a00 	vldr	s1, [r7]
 8007d5a:	ed92 4a02 	vldr	s8, [r2, #8]
 8007d5e:	edd3 3a02 	vldr	s7, [r3, #8]
 8007d62:	ed93 2a01 	vldr	s4, [r3, #4]
 8007d66:	ed16 1a01 	vldr	s2, [r6, #-4]
 8007d6a:	edd2 2a01 	vldr	s5, [r2, #4]
 8007d6e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8007d72:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8007d76:	ee39 3a81 	vadd.f32	s6, s19, s2
 8007d7a:	ee74 8a84 	vadd.f32	s17, s9, s8
 8007d7e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8007d82:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8007d86:	ee7a aae6 	vsub.f32	s21, s21, s13
 8007d8a:	ee18 aa90 	vmov	sl, s17
 8007d8e:	f847 a908 	str.w	sl, [r7], #-8
 8007d92:	edd2 8a01 	vldr	s17, [r2, #4]
 8007d96:	ed93 9a01 	vldr	s18, [r3, #4]
 8007d9a:	ee73 8a28 	vadd.f32	s17, s6, s17
 8007d9e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8007da2:	ee78 8a89 	vadd.f32	s17, s17, s18
 8007da6:	ee74 0a63 	vsub.f32	s1, s8, s7
 8007daa:	edc7 8a01 	vstr	s17, [r7, #4]
 8007dae:	ed18 ba02 	vldr	s22, [r8, #-8]
 8007db2:	ed58 8a01 	vldr	s17, [r8, #-4]
 8007db6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8007dba:	ee6a ba28 	vmul.f32	s23, s20, s17
 8007dbe:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8007dc2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8007dc6:	ee31 9a20 	vadd.f32	s18, s2, s1
 8007dca:	ee79 9a82 	vadd.f32	s19, s19, s4
 8007dce:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8007dd2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8007dd6:	ee69 baa8 	vmul.f32	s23, s19, s17
 8007dda:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8007dde:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8007de2:	ee69 8a28 	vmul.f32	s17, s18, s17
 8007de6:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8007dea:	ee1c aa10 	vmov	sl, s24
 8007dee:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8007df2:	f841 ab08 	str.w	sl, [r1], #8
 8007df6:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8007dfa:	ee3b bacb 	vsub.f32	s22, s23, s22
 8007dfe:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8007e02:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007e06:	ed01 aa01 	vstr	s20, [r1, #-4]
 8007e0a:	edc2 8a01 	vstr	s17, [r2, #4]
 8007e0e:	ed82 ba02 	vstr	s22, [r2, #8]
 8007e12:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8007e16:	ee74 3a63 	vsub.f32	s7, s8, s7
 8007e1a:	ee38 8a47 	vsub.f32	s16, s16, s14
 8007e1e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8007e22:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007e26:	ee33 3a42 	vsub.f32	s6, s6, s4
 8007e2a:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007e2e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007e32:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8007e36:	ee63 8a04 	vmul.f32	s17, s6, s8
 8007e3a:	ee28 aa24 	vmul.f32	s20, s16, s9
 8007e3e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8007e42:	ee28 8a04 	vmul.f32	s16, s16, s8
 8007e46:	ee20 0a24 	vmul.f32	s0, s0, s9
 8007e4a:	ee63 3a84 	vmul.f32	s7, s7, s8
 8007e4e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8007e52:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8007e56:	ee14 aa10 	vmov	sl, s8
 8007e5a:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007e5e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8007e62:	ed44 9a02 	vstr	s19, [r4, #-8]
 8007e66:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8007e6a:	ed04 0a01 	vstr	s0, [r4, #-4]
 8007e6e:	f846 a908 	str.w	sl, [r6], #-8
 8007e72:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007e76:	ee35 7a87 	vadd.f32	s14, s11, s14
 8007e7a:	edc6 3a01 	vstr	s7, [r6, #4]
 8007e7e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8007e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e86:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8007e8a:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8007e8e:	ee67 5a86 	vmul.f32	s11, s15, s12
 8007e92:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007e96:	ee72 2a62 	vsub.f32	s5, s4, s5
 8007e9a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007e9e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8007ea2:	ee75 5a25 	vadd.f32	s11, s10, s11
 8007ea6:	ee62 0a86 	vmul.f32	s1, s5, s12
 8007eaa:	ee66 6a86 	vmul.f32	s13, s13, s12
 8007eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007eb2:	ee21 6a06 	vmul.f32	s12, s2, s12
 8007eb6:	ee62 2a87 	vmul.f32	s5, s5, s14
 8007eba:	ee21 1a07 	vmul.f32	s2, s2, s14
 8007ebe:	ee15 aa90 	vmov	sl, s11
 8007ec2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ec6:	f840 ab08 	str.w	sl, [r0], #8
 8007eca:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007ece:	ee76 2a22 	vadd.f32	s5, s12, s5
 8007ed2:	f1b9 0901 	subs.w	r9, r9, #1
 8007ed6:	ed40 7a01 	vstr	s15, [r0, #-4]
 8007eda:	f105 0508 	add.w	r5, r5, #8
 8007ede:	ed83 1a02 	vstr	s2, [r3, #8]
 8007ee2:	edc3 2a01 	vstr	s5, [r3, #4]
 8007ee6:	f108 0808 	add.w	r8, r8, #8
 8007eea:	f1a2 0208 	sub.w	r2, r2, #8
 8007eee:	f10c 0c10 	add.w	ip, ip, #16
 8007ef2:	f104 0408 	add.w	r4, r4, #8
 8007ef6:	f10e 0e18 	add.w	lr, lr, #24
 8007efa:	f1a3 0308 	sub.w	r3, r3, #8
 8007efe:	f47f aefc 	bne.w	8007cfa <arm_cfft_radix8by4_f32+0x13e>
 8007f02:	9908      	ldr	r1, [sp, #32]
 8007f04:	9802      	ldr	r0, [sp, #8]
 8007f06:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8007f0a:	00cb      	lsls	r3, r1, #3
 8007f0c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007f10:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007f14:	9102      	str	r1, [sp, #8]
 8007f16:	9905      	ldr	r1, [sp, #20]
 8007f18:	4419      	add	r1, r3
 8007f1a:	9105      	str	r1, [sp, #20]
 8007f1c:	9904      	ldr	r1, [sp, #16]
 8007f1e:	4419      	add	r1, r3
 8007f20:	9104      	str	r1, [sp, #16]
 8007f22:	9906      	ldr	r1, [sp, #24]
 8007f24:	449b      	add	fp, r3
 8007f26:	4419      	add	r1, r3
 8007f28:	449a      	add	sl, r3
 8007f2a:	9b03      	ldr	r3, [sp, #12]
 8007f2c:	9106      	str	r1, [sp, #24]
 8007f2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f32:	9303      	str	r3, [sp, #12]
 8007f34:	9a05      	ldr	r2, [sp, #20]
 8007f36:	9806      	ldr	r0, [sp, #24]
 8007f38:	ed92 4a00 	vldr	s8, [r2]
 8007f3c:	ed90 7a00 	vldr	s14, [r0]
 8007f40:	ed9b 3a00 	vldr	s6, [fp]
 8007f44:	edda 3a00 	vldr	s7, [sl]
 8007f48:	edd2 4a01 	vldr	s9, [r2, #4]
 8007f4c:	edd0 6a01 	vldr	s13, [r0, #4]
 8007f50:	ed9a 2a01 	vldr	s4, [sl, #4]
 8007f54:	eddb 7a01 	vldr	s15, [fp, #4]
 8007f58:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8007f5c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007f5e:	ee34 6a07 	vadd.f32	s12, s8, s14
 8007f62:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8007f66:	ee36 5a03 	vadd.f32	s10, s12, s6
 8007f6a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007f6e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007f72:	ee34 7a47 	vsub.f32	s14, s8, s14
 8007f76:	ed82 5a00 	vstr	s10, [r2]
 8007f7a:	ed9b 5a01 	vldr	s10, [fp, #4]
 8007f7e:	edda 4a01 	vldr	s9, [sl, #4]
 8007f82:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007f86:	ee37 4a27 	vadd.f32	s8, s14, s15
 8007f8a:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007f8e:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8007f92:	ed82 5a01 	vstr	s10, [r2, #4]
 8007f96:	9a04      	ldr	r2, [sp, #16]
 8007f98:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8007f9c:	edd2 1a00 	vldr	s3, [r2]
 8007fa0:	edd2 2a01 	vldr	s5, [r2, #4]
 8007fa4:	9a02      	ldr	r2, [sp, #8]
 8007fa6:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007faa:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007fae:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007fb2:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007fb6:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007fba:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007fbe:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007fc2:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007fc6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8007fca:	edcb 2a00 	vstr	s5, [fp]
 8007fce:	ed8b 5a01 	vstr	s10, [fp, #4]
 8007fd2:	ed92 4a01 	vldr	s8, [r2, #4]
 8007fd6:	ed92 5a00 	vldr	s10, [r2]
 8007fda:	9a03      	ldr	r2, [sp, #12]
 8007fdc:	ee36 6a63 	vsub.f32	s12, s12, s7
 8007fe0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007fe4:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007fe8:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007fec:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007ff0:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007ff4:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007ff8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007ffc:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008000:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008004:	ed80 6a01 	vstr	s12, [r0, #4]
 8008008:	edc0 5a00 	vstr	s11, [r0]
 800800c:	edd2 5a01 	vldr	s11, [r2, #4]
 8008010:	9807      	ldr	r0, [sp, #28]
 8008012:	ee77 7a02 	vadd.f32	s15, s14, s4
 8008016:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800801a:	edd2 6a00 	vldr	s13, [r2]
 800801e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8008022:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008026:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800802a:	ee27 7a25 	vmul.f32	s14, s14, s11
 800802e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008032:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008036:	edca 7a01 	vstr	s15, [sl, #4]
 800803a:	ed8a 7a00 	vstr	s14, [sl]
 800803e:	6872      	ldr	r2, [r6, #4]
 8008040:	4621      	mov	r1, r4
 8008042:	2304      	movs	r3, #4
 8008044:	f000 f892 	bl	800816c <arm_radix8_butterfly_f32>
 8008048:	9809      	ldr	r0, [sp, #36]	; 0x24
 800804a:	6872      	ldr	r2, [r6, #4]
 800804c:	4621      	mov	r1, r4
 800804e:	2304      	movs	r3, #4
 8008050:	f000 f88c 	bl	800816c <arm_radix8_butterfly_f32>
 8008054:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008056:	6872      	ldr	r2, [r6, #4]
 8008058:	4621      	mov	r1, r4
 800805a:	2304      	movs	r3, #4
 800805c:	f000 f886 	bl	800816c <arm_radix8_butterfly_f32>
 8008060:	6872      	ldr	r2, [r6, #4]
 8008062:	9801      	ldr	r0, [sp, #4]
 8008064:	4621      	mov	r1, r4
 8008066:	2304      	movs	r3, #4
 8008068:	b00f      	add	sp, #60	; 0x3c
 800806a:	ecbd 8b0a 	vpop	{d8-d12}
 800806e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008072:	f000 b87b 	b.w	800816c <arm_radix8_butterfly_f32>
 8008076:	bf00      	nop

08008078 <arm_cfft_f32>:
 8008078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807c:	2a01      	cmp	r2, #1
 800807e:	4606      	mov	r6, r0
 8008080:	4617      	mov	r7, r2
 8008082:	460c      	mov	r4, r1
 8008084:	4698      	mov	r8, r3
 8008086:	8805      	ldrh	r5, [r0, #0]
 8008088:	d054      	beq.n	8008134 <arm_cfft_f32+0xbc>
 800808a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800808e:	d04c      	beq.n	800812a <arm_cfft_f32+0xb2>
 8008090:	d916      	bls.n	80080c0 <arm_cfft_f32+0x48>
 8008092:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008096:	d01a      	beq.n	80080ce <arm_cfft_f32+0x56>
 8008098:	d95c      	bls.n	8008154 <arm_cfft_f32+0xdc>
 800809a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800809e:	d044      	beq.n	800812a <arm_cfft_f32+0xb2>
 80080a0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80080a4:	d105      	bne.n	80080b2 <arm_cfft_f32+0x3a>
 80080a6:	2301      	movs	r3, #1
 80080a8:	6872      	ldr	r2, [r6, #4]
 80080aa:	4629      	mov	r1, r5
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 f85d 	bl	800816c <arm_radix8_butterfly_f32>
 80080b2:	f1b8 0f00 	cmp.w	r8, #0
 80080b6:	d111      	bne.n	80080dc <arm_cfft_f32+0x64>
 80080b8:	2f01      	cmp	r7, #1
 80080ba:	d016      	beq.n	80080ea <arm_cfft_f32+0x72>
 80080bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080c0:	2d20      	cmp	r5, #32
 80080c2:	d032      	beq.n	800812a <arm_cfft_f32+0xb2>
 80080c4:	d94a      	bls.n	800815c <arm_cfft_f32+0xe4>
 80080c6:	2d40      	cmp	r5, #64	; 0x40
 80080c8:	d0ed      	beq.n	80080a6 <arm_cfft_f32+0x2e>
 80080ca:	2d80      	cmp	r5, #128	; 0x80
 80080cc:	d1f1      	bne.n	80080b2 <arm_cfft_f32+0x3a>
 80080ce:	4621      	mov	r1, r4
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7ff fca3 	bl	8007a1c <arm_cfft_radix8by2_f32>
 80080d6:	f1b8 0f00 	cmp.w	r8, #0
 80080da:	d0ed      	beq.n	80080b8 <arm_cfft_f32+0x40>
 80080dc:	68b2      	ldr	r2, [r6, #8]
 80080de:	89b1      	ldrh	r1, [r6, #12]
 80080e0:	4620      	mov	r0, r4
 80080e2:	f7f8 f883 	bl	80001ec <arm_bitreversal_32>
 80080e6:	2f01      	cmp	r7, #1
 80080e8:	d1e8      	bne.n	80080bc <arm_cfft_f32+0x44>
 80080ea:	ee07 5a90 	vmov	s15, r5
 80080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80080f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80080fa:	2d00      	cmp	r5, #0
 80080fc:	d0de      	beq.n	80080bc <arm_cfft_f32+0x44>
 80080fe:	f104 0108 	add.w	r1, r4, #8
 8008102:	2300      	movs	r3, #0
 8008104:	3301      	adds	r3, #1
 8008106:	429d      	cmp	r5, r3
 8008108:	f101 0108 	add.w	r1, r1, #8
 800810c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008110:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008114:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008118:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800811c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008120:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008124:	d1ee      	bne.n	8008104 <arm_cfft_f32+0x8c>
 8008126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800812a:	4621      	mov	r1, r4
 800812c:	4630      	mov	r0, r6
 800812e:	f7ff fd45 	bl	8007bbc <arm_cfft_radix8by4_f32>
 8008132:	e7be      	b.n	80080b2 <arm_cfft_f32+0x3a>
 8008134:	b1ad      	cbz	r5, 8008162 <arm_cfft_f32+0xea>
 8008136:	f101 030c 	add.w	r3, r1, #12
 800813a:	2200      	movs	r2, #0
 800813c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008140:	3201      	adds	r2, #1
 8008142:	eef1 7a67 	vneg.f32	s15, s15
 8008146:	4295      	cmp	r5, r2
 8008148:	ed43 7a02 	vstr	s15, [r3, #-8]
 800814c:	f103 0308 	add.w	r3, r3, #8
 8008150:	d1f4      	bne.n	800813c <arm_cfft_f32+0xc4>
 8008152:	e79a      	b.n	800808a <arm_cfft_f32+0x12>
 8008154:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008158:	d0a5      	beq.n	80080a6 <arm_cfft_f32+0x2e>
 800815a:	e7aa      	b.n	80080b2 <arm_cfft_f32+0x3a>
 800815c:	2d10      	cmp	r5, #16
 800815e:	d0b6      	beq.n	80080ce <arm_cfft_f32+0x56>
 8008160:	e7a7      	b.n	80080b2 <arm_cfft_f32+0x3a>
 8008162:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008166:	d894      	bhi.n	8008092 <arm_cfft_f32+0x1a>
 8008168:	e7aa      	b.n	80080c0 <arm_cfft_f32+0x48>
 800816a:	bf00      	nop

0800816c <arm_radix8_butterfly_f32>:
 800816c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008170:	ed2d 8b10 	vpush	{d8-d15}
 8008174:	461c      	mov	r4, r3
 8008176:	b09d      	sub	sp, #116	; 0x74
 8008178:	4603      	mov	r3, r0
 800817a:	3304      	adds	r3, #4
 800817c:	ed9f bac4 	vldr	s22, [pc, #784]	; 8008490 <arm_radix8_butterfly_f32+0x324>
 8008180:	9019      	str	r0, [sp, #100]	; 0x64
 8008182:	921a      	str	r2, [sp, #104]	; 0x68
 8008184:	468b      	mov	fp, r1
 8008186:	931b      	str	r3, [sp, #108]	; 0x6c
 8008188:	468a      	mov	sl, r1
 800818a:	46a1      	mov	r9, r4
 800818c:	4607      	mov	r7, r0
 800818e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008192:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8008196:	eb03 0508 	add.w	r5, r3, r8
 800819a:	195c      	adds	r4, r3, r5
 800819c:	00de      	lsls	r6, r3, #3
 800819e:	191a      	adds	r2, r3, r4
 80081a0:	9600      	str	r6, [sp, #0]
 80081a2:	1898      	adds	r0, r3, r2
 80081a4:	4619      	mov	r1, r3
 80081a6:	9e00      	ldr	r6, [sp, #0]
 80081a8:	9311      	str	r3, [sp, #68]	; 0x44
 80081aa:	4401      	add	r1, r0
 80081ac:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80081b0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80081b4:	19be      	adds	r6, r7, r6
 80081b6:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80081ba:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80081be:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 80081c2:	9f00      	ldr	r7, [sp, #0]
 80081c4:	011b      	lsls	r3, r3, #4
 80081c6:	eb06 0e07 	add.w	lr, r6, r7
 80081ca:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80081cc:	9302      	str	r3, [sp, #8]
 80081ce:	3204      	adds	r2, #4
 80081d0:	3104      	adds	r1, #4
 80081d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80081d6:	f04f 0c00 	mov.w	ip, #0
 80081da:	edde 7a00 	vldr	s15, [lr]
 80081de:	edd6 6a00 	vldr	s13, [r6]
 80081e2:	ed95 2a00 	vldr	s4, [r5]
 80081e6:	ed17 aa01 	vldr	s20, [r7, #-4]
 80081ea:	edd4 4a00 	vldr	s9, [r4]
 80081ee:	ed90 5a00 	vldr	s10, [r0]
 80081f2:	ed12 7a01 	vldr	s14, [r2, #-4]
 80081f6:	ed51 0a01 	vldr	s1, [r1, #-4]
 80081fa:	ee77 8a85 	vadd.f32	s17, s15, s10
 80081fe:	ee76 3a87 	vadd.f32	s7, s13, s14
 8008202:	ee32 4a20 	vadd.f32	s8, s4, s1
 8008206:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800820a:	ee33 6a84 	vadd.f32	s12, s7, s8
 800820e:	ee73 5a28 	vadd.f32	s11, s6, s17
 8008212:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008216:	ee75 6a86 	vadd.f32	s13, s11, s12
 800821a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800821e:	ed47 6a01 	vstr	s13, [r7, #-4]
 8008222:	edc4 5a00 	vstr	s11, [r4]
 8008226:	ed92 9a00 	vldr	s18, [r2]
 800822a:	ed95 1a01 	vldr	s2, [r5, #4]
 800822e:	edd6 5a01 	vldr	s11, [r6, #4]
 8008232:	ed91 6a00 	vldr	s12, [r1]
 8008236:	edd7 2a00 	vldr	s5, [r7]
 800823a:	edd4 1a01 	vldr	s3, [r4, #4]
 800823e:	edde 6a01 	vldr	s13, [lr, #4]
 8008242:	edd0 9a01 	vldr	s19, [r0, #4]
 8008246:	ee72 0a60 	vsub.f32	s1, s4, s1
 800824a:	ee71 aa46 	vsub.f32	s21, s2, s12
 800824e:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8008252:	ee37 0a60 	vsub.f32	s0, s14, s1
 8008256:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800825a:	ee37 7a20 	vadd.f32	s14, s14, s1
 800825e:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8008262:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8008266:	ee75 5a89 	vadd.f32	s11, s11, s18
 800826a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800826e:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8008272:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008276:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800827a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800827e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008282:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8008286:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800828a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800828e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008292:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008296:	ee36 0a88 	vadd.f32	s0, s13, s16
 800829a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800829e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80082a2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80082a6:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80082aa:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80082ae:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80082b2:	ee75 4a27 	vadd.f32	s9, s10, s15
 80082b6:	ee71 5a49 	vsub.f32	s11, s2, s18
 80082ba:	ee31 2a09 	vadd.f32	s4, s2, s18
 80082be:	ee75 7a67 	vsub.f32	s15, s10, s15
 80082c2:	ee31 1aa2 	vadd.f32	s2, s3, s5
 80082c6:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80082ca:	ee73 0a06 	vadd.f32	s1, s6, s12
 80082ce:	ee75 1ac4 	vsub.f32	s3, s11, s8
 80082d2:	ee36 5a87 	vadd.f32	s10, s13, s14
 80082d6:	ee32 8a28 	vadd.f32	s16, s4, s17
 80082da:	ee33 6a46 	vsub.f32	s12, s6, s12
 80082de:	ee34 4a25 	vadd.f32	s8, s8, s11
 80082e2:	ee33 3a80 	vadd.f32	s6, s7, s0
 80082e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80082ea:	ee71 5a64 	vsub.f32	s11, s2, s9
 80082ee:	ee72 6ae7 	vsub.f32	s13, s5, s15
 80082f2:	ee32 2a68 	vsub.f32	s4, s4, s17
 80082f6:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80082fa:	ee74 4a81 	vadd.f32	s9, s9, s2
 80082fe:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8008302:	44dc      	add	ip, fp
 8008304:	45e2      	cmp	sl, ip
 8008306:	ed87 8a00 	vstr	s16, [r7]
 800830a:	ed84 2a01 	vstr	s4, [r4, #4]
 800830e:	441f      	add	r7, r3
 8008310:	edce 0a00 	vstr	s1, [lr]
 8008314:	441c      	add	r4, r3
 8008316:	ed80 6a00 	vstr	s12, [r0]
 800831a:	edce 1a01 	vstr	s3, [lr, #4]
 800831e:	ed80 4a01 	vstr	s8, [r0, #4]
 8008322:	449e      	add	lr, r3
 8008324:	ed86 3a00 	vstr	s6, [r6]
 8008328:	4418      	add	r0, r3
 800832a:	ed41 3a01 	vstr	s7, [r1, #-4]
 800832e:	ed02 5a01 	vstr	s10, [r2, #-4]
 8008332:	ed85 7a00 	vstr	s14, [r5]
 8008336:	edc6 5a01 	vstr	s11, [r6, #4]
 800833a:	edc1 4a00 	vstr	s9, [r1]
 800833e:	441e      	add	r6, r3
 8008340:	edc2 6a00 	vstr	s13, [r2]
 8008344:	4419      	add	r1, r3
 8008346:	edc5 7a01 	vstr	s15, [r5, #4]
 800834a:	441a      	add	r2, r3
 800834c:	441d      	add	r5, r3
 800834e:	f63f af44 	bhi.w	80081da <arm_radix8_butterfly_f32+0x6e>
 8008352:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008354:	2a07      	cmp	r2, #7
 8008356:	f240 81f5 	bls.w	8008744 <arm_radix8_butterfly_f32+0x5d8>
 800835a:	f108 0101 	add.w	r1, r8, #1
 800835e:	188f      	adds	r7, r1, r2
 8008360:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8008364:	19d6      	adds	r6, r2, r7
 8008366:	eb08 0c09 	add.w	ip, r8, r9
 800836a:	1994      	adds	r4, r2, r6
 800836c:	eb0c 0e09 	add.w	lr, ip, r9
 8008370:	4610      	mov	r0, r2
 8008372:	9701      	str	r7, [sp, #4]
 8008374:	4420      	add	r0, r4
 8008376:	eb0e 0709 	add.w	r7, lr, r9
 800837a:	1815      	adds	r5, r2, r0
 800837c:	eb07 0209 	add.w	r2, r7, r9
 8008380:	9203      	str	r2, [sp, #12]
 8008382:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008384:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008388:	9117      	str	r1, [sp, #92]	; 0x5c
 800838a:	440a      	add	r2, r1
 800838c:	9900      	ldr	r1, [sp, #0]
 800838e:	3108      	adds	r1, #8
 8008390:	9100      	str	r1, [sp, #0]
 8008392:	9902      	ldr	r1, [sp, #8]
 8008394:	3108      	adds	r1, #8
 8008396:	9102      	str	r1, [sp, #8]
 8008398:	9919      	ldr	r1, [sp, #100]	; 0x64
 800839a:	00ff      	lsls	r7, r7, #3
 800839c:	9715      	str	r7, [sp, #84]	; 0x54
 800839e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80083a2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80083a6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80083aa:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80083ac:	9903      	ldr	r1, [sp, #12]
 80083ae:	19d7      	adds	r7, r2, r7
 80083b0:	00c9      	lsls	r1, r1, #3
 80083b2:	9114      	str	r1, [sp, #80]	; 0x50
 80083b4:	9710      	str	r7, [sp, #64]	; 0x40
 80083b6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80083b8:	9f00      	ldr	r7, [sp, #0]
 80083ba:	19cf      	adds	r7, r1, r7
 80083bc:	970d      	str	r7, [sp, #52]	; 0x34
 80083be:	9f02      	ldr	r7, [sp, #8]
 80083c0:	19cf      	adds	r7, r1, r7
 80083c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80083c6:	970c      	str	r7, [sp, #48]	; 0x30
 80083c8:	9f01      	ldr	r7, [sp, #4]
 80083ca:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80083ce:	3504      	adds	r5, #4
 80083d0:	3004      	adds	r0, #4
 80083d2:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80083d6:	9508      	str	r5, [sp, #32]
 80083d8:	9009      	str	r0, [sp, #36]	; 0x24
 80083da:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80083dc:	981a      	ldr	r0, [sp, #104]	; 0x68
 80083de:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80083e2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80083e6:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80083ea:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80083ec:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80083f0:	1945      	adds	r5, r0, r5
 80083f2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80083f6:	460f      	mov	r7, r1
 80083f8:	3404      	adds	r4, #4
 80083fa:	4641      	mov	r1, r8
 80083fc:	1841      	adds	r1, r0, r1
 80083fe:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8008402:	940a      	str	r4, [sp, #40]	; 0x28
 8008404:	eb00 0c06 	add.w	ip, r0, r6
 8008408:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800840c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800840e:	9506      	str	r5, [sp, #24]
 8008410:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8008412:	9105      	str	r1, [sp, #20]
 8008414:	4639      	mov	r1, r7
 8008416:	1905      	adds	r5, r0, r4
 8008418:	3108      	adds	r1, #8
 800841a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800841c:	9507      	str	r5, [sp, #28]
 800841e:	910f      	str	r1, [sp, #60]	; 0x3c
 8008420:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8008424:	2101      	movs	r1, #1
 8008426:	eb00 0e06 	add.w	lr, r0, r6
 800842a:	9518      	str	r5, [sp, #96]	; 0x60
 800842c:	9404      	str	r4, [sp, #16]
 800842e:	9103      	str	r1, [sp, #12]
 8008430:	4620      	mov	r0, r4
 8008432:	4689      	mov	r9, r1
 8008434:	9e06      	ldr	r6, [sp, #24]
 8008436:	ed90 fa00 	vldr	s30, [r0]
 800843a:	edd6 7a01 	vldr	s15, [r6, #4]
 800843e:	edd0 ba01 	vldr	s23, [r0, #4]
 8008442:	edcd 7a00 	vstr	s15, [sp]
 8008446:	a80d      	add	r0, sp, #52	; 0x34
 8008448:	edde 7a01 	vldr	s15, [lr, #4]
 800844c:	9c05      	ldr	r4, [sp, #20]
 800844e:	9d07      	ldr	r5, [sp, #28]
 8008450:	edd2 fa00 	vldr	s31, [r2]
 8008454:	ed92 ca01 	vldr	s24, [r2, #4]
 8008458:	edcd 7a01 	vstr	s15, [sp, #4]
 800845c:	c807      	ldmia	r0, {r0, r1, r2}
 800845e:	eddc 7a01 	vldr	s15, [ip, #4]
 8008462:	edd4 ea00 	vldr	s29, [r4]
 8008466:	ed95 ea00 	vldr	s28, [r5]
 800846a:	edd6 da00 	vldr	s27, [r6]
 800846e:	edd4 aa01 	vldr	s21, [r4, #4]
 8008472:	ed95 aa01 	vldr	s20, [r5, #4]
 8008476:	ed9e da00 	vldr	s26, [lr]
 800847a:	eddc ca00 	vldr	s25, [ip]
 800847e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008482:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008484:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008486:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008488:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800848a:	edcd 7a02 	vstr	s15, [sp, #8]
 800848e:	e001      	b.n	8008494 <arm_radix8_butterfly_f32+0x328>
 8008490:	3f3504f3 	.word	0x3f3504f3
 8008494:	ed16 6a01 	vldr	s12, [r6, #-4]
 8008498:	ed91 5a00 	vldr	s10, [r1]
 800849c:	ed57 9a01 	vldr	s19, [r7, #-4]
 80084a0:	edd5 7a00 	vldr	s15, [r5]
 80084a4:	ed18 7a01 	vldr	s14, [r8, #-4]
 80084a8:	edd2 3a00 	vldr	s7, [r2]
 80084ac:	ed94 3a00 	vldr	s6, [r4]
 80084b0:	ed90 2a00 	vldr	s4, [r0]
 80084b4:	ed92 0a01 	vldr	s0, [r2, #4]
 80084b8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80084bc:	ee32 1a06 	vadd.f32	s2, s4, s12
 80084c0:	ee33 4a29 	vadd.f32	s8, s6, s19
 80084c4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80084c8:	ee78 1a04 	vadd.f32	s3, s16, s8
 80084cc:	ee71 6a24 	vadd.f32	s13, s2, s9
 80084d0:	ee32 2a46 	vsub.f32	s4, s4, s12
 80084d4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80084d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084dc:	ed82 6a00 	vstr	s12, [r2]
 80084e0:	edd5 8a01 	vldr	s17, [r5, #4]
 80084e4:	ed90 9a01 	vldr	s18, [r0, #4]
 80084e8:	edd6 2a00 	vldr	s5, [r6]
 80084ec:	ed98 7a00 	vldr	s14, [r8]
 80084f0:	edd4 0a01 	vldr	s1, [r4, #4]
 80084f4:	ed91 6a01 	vldr	s12, [r1, #4]
 80084f8:	edd7 5a00 	vldr	s11, [r7]
 80084fc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008500:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008504:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008508:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800850c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008510:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008514:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008518:	ee79 2a22 	vadd.f32	s5, s18, s5
 800851c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8008520:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008524:	ee35 5a29 	vadd.f32	s10, s10, s19
 8008528:	ee72 7a67 	vsub.f32	s15, s4, s15
 800852c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008530:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8008534:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008538:	ee32 9a08 	vadd.f32	s18, s4, s16
 800853c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008540:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008544:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008548:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800854c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8008550:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008554:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008558:	ee30 6a46 	vsub.f32	s12, s0, s12
 800855c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8008560:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008564:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008568:	ee32 7a64 	vsub.f32	s14, s4, s9
 800856c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8008570:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008574:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008578:	ee75 8a85 	vadd.f32	s17, s11, s10
 800857c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8008580:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8008584:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008588:	ee79 1a41 	vsub.f32	s3, s18, s2
 800858c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8008590:	ee76 5a43 	vsub.f32	s11, s12, s6
 8008594:	ee74 2a62 	vsub.f32	s5, s8, s5
 8008598:	ee74 4a82 	vadd.f32	s9, s9, s4
 800859c:	ee30 4a60 	vsub.f32	s8, s0, s1
 80085a0:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80085a4:	ee30 0a80 	vadd.f32	s0, s1, s0
 80085a8:	ee77 9a85 	vadd.f32	s19, s15, s10
 80085ac:	ee33 6a06 	vadd.f32	s12, s6, s12
 80085b0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80085b4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80085b8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80085bc:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80085c0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80085c4:	ee39 1a01 	vadd.f32	s2, s18, s2
 80085c8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80085cc:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80085d0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80085d4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80085d8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80085dc:	ee35 3a03 	vadd.f32	s6, s10, s6
 80085e0:	ee72 6a66 	vsub.f32	s13, s4, s13
 80085e4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80085e8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80085ec:	ed9d 4a02 	vldr	s8, [sp, #8]
 80085f0:	ed82 1a01 	vstr	s2, [r2, #4]
 80085f4:	ee77 3a63 	vsub.f32	s7, s14, s7
 80085f8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80085fc:	ed9d 7a01 	vldr	s14, [sp, #4]
 8008600:	ed81 3a00 	vstr	s6, [r1]
 8008604:	ee30 9a89 	vadd.f32	s18, s1, s18
 8008608:	ee32 2a05 	vadd.f32	s4, s4, s10
 800860c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8008610:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8008614:	ee67 2a22 	vmul.f32	s5, s14, s5
 8008618:	ee64 1a00 	vmul.f32	s3, s8, s0
 800861c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008620:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8008624:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8008628:	ee64 8a28 	vmul.f32	s17, s8, s17
 800862c:	ed9d 4a00 	vldr	s8, [sp]
 8008630:	edc1 6a01 	vstr	s13, [r1, #4]
 8008634:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008638:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800863c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8008640:	ee24 4a25 	vmul.f32	s8, s8, s11
 8008644:	ee30 7a87 	vadd.f32	s14, s1, s14
 8008648:	ee74 4a84 	vadd.f32	s9, s9, s8
 800864c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8008650:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8008654:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8008658:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800865c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8008660:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8008664:	ee75 1a21 	vadd.f32	s3, s10, s3
 8008668:	ee30 0a68 	vsub.f32	s0, s0, s17
 800866c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8008670:	ee70 0a84 	vadd.f32	s1, s1, s8
 8008674:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008678:	44d9      	add	r9, fp
 800867a:	45ca      	cmp	sl, r9
 800867c:	ed84 9a00 	vstr	s18, [r4]
 8008680:	edc4 3a01 	vstr	s7, [r4, #4]
 8008684:	441a      	add	r2, r3
 8008686:	ed07 7a01 	vstr	s14, [r7, #-4]
 800868a:	edc7 2a00 	vstr	s5, [r7]
 800868e:	4419      	add	r1, r3
 8008690:	ed80 2a00 	vstr	s4, [r0]
 8008694:	ed80 8a01 	vstr	s16, [r0, #4]
 8008698:	441c      	add	r4, r3
 800869a:	ed48 1a01 	vstr	s3, [r8, #-4]
 800869e:	ed88 0a00 	vstr	s0, [r8]
 80086a2:	441f      	add	r7, r3
 80086a4:	ed46 4a01 	vstr	s9, [r6, #-4]
 80086a8:	4418      	add	r0, r3
 80086aa:	edc6 9a00 	vstr	s19, [r6]
 80086ae:	4498      	add	r8, r3
 80086b0:	edc5 0a00 	vstr	s1, [r5]
 80086b4:	ed85 6a01 	vstr	s12, [r5, #4]
 80086b8:	441e      	add	r6, r3
 80086ba:	441d      	add	r5, r3
 80086bc:	f63f aeea 	bhi.w	8008494 <arm_radix8_butterfly_f32+0x328>
 80086c0:	9a03      	ldr	r2, [sp, #12]
 80086c2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80086c4:	3201      	adds	r2, #1
 80086c6:	4611      	mov	r1, r2
 80086c8:	9203      	str	r2, [sp, #12]
 80086ca:	9a04      	ldr	r2, [sp, #16]
 80086cc:	4402      	add	r2, r0
 80086ce:	9204      	str	r2, [sp, #16]
 80086d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80086d2:	9a05      	ldr	r2, [sp, #20]
 80086d4:	4402      	add	r2, r0
 80086d6:	9205      	str	r2, [sp, #20]
 80086d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80086da:	9a07      	ldr	r2, [sp, #28]
 80086dc:	4402      	add	r2, r0
 80086de:	9207      	str	r2, [sp, #28]
 80086e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80086e2:	9a06      	ldr	r2, [sp, #24]
 80086e4:	4402      	add	r2, r0
 80086e6:	9206      	str	r2, [sp, #24]
 80086e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80086ea:	4496      	add	lr, r2
 80086ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80086ee:	4494      	add	ip, r2
 80086f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086f2:	3208      	adds	r2, #8
 80086f4:	920f      	str	r2, [sp, #60]	; 0x3c
 80086f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086f8:	3208      	adds	r2, #8
 80086fa:	920e      	str	r2, [sp, #56]	; 0x38
 80086fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086fe:	3208      	adds	r2, #8
 8008700:	920d      	str	r2, [sp, #52]	; 0x34
 8008702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008704:	3208      	adds	r2, #8
 8008706:	920c      	str	r2, [sp, #48]	; 0x30
 8008708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800870a:	3208      	adds	r2, #8
 800870c:	920b      	str	r2, [sp, #44]	; 0x2c
 800870e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008710:	3208      	adds	r2, #8
 8008712:	920a      	str	r2, [sp, #40]	; 0x28
 8008714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008716:	3208      	adds	r2, #8
 8008718:	9209      	str	r2, [sp, #36]	; 0x24
 800871a:	9a08      	ldr	r2, [sp, #32]
 800871c:	3208      	adds	r2, #8
 800871e:	9208      	str	r2, [sp, #32]
 8008720:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8008722:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008724:	4288      	cmp	r0, r1
 8008726:	4622      	mov	r2, r4
 8008728:	d007      	beq.n	800873a <arm_radix8_butterfly_f32+0x5ce>
 800872a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800872c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008730:	4621      	mov	r1, r4
 8008732:	4401      	add	r1, r0
 8008734:	9110      	str	r1, [sp, #64]	; 0x40
 8008736:	9804      	ldr	r0, [sp, #16]
 8008738:	e67c      	b.n	8008434 <arm_radix8_butterfly_f32+0x2c8>
 800873a:	4683      	mov	fp, r0
 800873c:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8008740:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8008742:	e524      	b.n	800818e <arm_radix8_butterfly_f32+0x22>
 8008744:	b01d      	add	sp, #116	; 0x74
 8008746:	ecbd 8b10 	vpop	{d8-d15}
 800874a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800874e:	bf00      	nop

08008750 <__libc_init_array>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	4d0d      	ldr	r5, [pc, #52]	; (8008788 <__libc_init_array+0x38>)
 8008754:	4c0d      	ldr	r4, [pc, #52]	; (800878c <__libc_init_array+0x3c>)
 8008756:	1b64      	subs	r4, r4, r5
 8008758:	10a4      	asrs	r4, r4, #2
 800875a:	2600      	movs	r6, #0
 800875c:	42a6      	cmp	r6, r4
 800875e:	d109      	bne.n	8008774 <__libc_init_array+0x24>
 8008760:	4d0b      	ldr	r5, [pc, #44]	; (8008790 <__libc_init_array+0x40>)
 8008762:	4c0c      	ldr	r4, [pc, #48]	; (8008794 <__libc_init_array+0x44>)
 8008764:	f000 f820 	bl	80087a8 <_init>
 8008768:	1b64      	subs	r4, r4, r5
 800876a:	10a4      	asrs	r4, r4, #2
 800876c:	2600      	movs	r6, #0
 800876e:	42a6      	cmp	r6, r4
 8008770:	d105      	bne.n	800877e <__libc_init_array+0x2e>
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	f855 3b04 	ldr.w	r3, [r5], #4
 8008778:	4798      	blx	r3
 800877a:	3601      	adds	r6, #1
 800877c:	e7ee      	b.n	800875c <__libc_init_array+0xc>
 800877e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008782:	4798      	blx	r3
 8008784:	3601      	adds	r6, #1
 8008786:	e7f2      	b.n	800876e <__libc_init_array+0x1e>
 8008788:	0802086c 	.word	0x0802086c
 800878c:	0802086c 	.word	0x0802086c
 8008790:	0802086c 	.word	0x0802086c
 8008794:	08020870 	.word	0x08020870

08008798 <memset>:
 8008798:	4402      	add	r2, r0
 800879a:	4603      	mov	r3, r0
 800879c:	4293      	cmp	r3, r2
 800879e:	d100      	bne.n	80087a2 <memset+0xa>
 80087a0:	4770      	bx	lr
 80087a2:	f803 1b01 	strb.w	r1, [r3], #1
 80087a6:	e7f9      	b.n	800879c <memset+0x4>

080087a8 <_init>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr

080087b4 <_fini>:
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	bf00      	nop
 80087b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ba:	bc08      	pop	{r3}
 80087bc:	469e      	mov	lr, r3
 80087be:	4770      	bx	lr
