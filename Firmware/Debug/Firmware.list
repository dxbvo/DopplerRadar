
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c2b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018444  0800c460  0800c460  0001c460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080248a4  080248a4  0004049c  2**0
                  CONTENTS
  4 .ARM          00000008  080248a4  080248a4  000348a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080248ac  080248ac  0004049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080248ac  080248ac  000348ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080248b0  080248b0  000348b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  080248b4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  2000049c  08024d50  0004049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009bc  08024d50  000409bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017471  00000000  00000000  000404cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000397f  00000000  00000000  0005793d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d0  00000000  00000000  0005b2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001388  00000000  00000000  0005c790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e8b  00000000  00000000  0005db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019039  00000000  00000000  000849a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0719  00000000  00000000  0009d9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  0017e0f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006868  00000000  00000000  0017e1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002178  00000000  00000000  00184a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00186b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  00186c60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000049c 	.word	0x2000049c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c448 	.word	0x0800c448

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200004a0 	.word	0x200004a0
 80001ec:	0800c448 	.word	0x0800c448

080001f0 <arm_bitreversal_32>:
 80001f0:	1c4b      	adds	r3, r1, #1
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	bf98      	it	ls
 80001f6:	4770      	bxls	lr
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001fc:	1c91      	adds	r1, r2, #2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000208:	880a      	ldrh	r2, [r1, #0]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800020e:	4480      	add	r8, r0
 8000210:	4481      	add	r9, r0
 8000212:	4402      	add	r2, r0
 8000214:	4484      	add	ip, r0
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
 800021e:	6815      	ldr	r5, [r2, #0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
 8000224:	f8c9 6000 	str.w	r6, [r9]
 8000228:	f8c8 7000 	str.w	r7, [r8]
 800022c:	f8cc 5000 	str.w	r5, [ip]
 8000230:	6014      	str	r4, [r2, #0]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800023a:	6855      	ldr	r5, [r2, #4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
 800024c:	6054      	str	r4, [r2, #4]
 800024e:	3108      	adds	r1, #8
 8000250:	3b01      	subs	r3, #1
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
 800025a:	1c4b      	adds	r3, r1, #1
 800025c:	2b01      	cmp	r3, #1
 800025e:	bf98      	it	ls
 8000260:	4770      	bxls	lr
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000266:	1c91      	adds	r1, r2, #2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000272:	880a      	ldrh	r2, [r1, #0]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
 8000290:	6815      	ldr	r5, [r2, #0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
 8000296:	f8c9 6000 	str.w	r6, [r9]
 800029a:	f8c8 7000 	str.w	r7, [r8]
 800029e:	f8cc 5000 	str.w	r5, [ip]
 80002a2:	6014      	str	r4, [r2, #0]
 80002a4:	3108      	adds	r1, #8
 80002a6:	3b01      	subs	r3, #1
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ae:	4770      	bx	lr

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_drsub>:
 8000360:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000364:	e002      	b.n	800036c <__adddf3>
 8000366:	bf00      	nop

08000368 <__aeabi_dsub>:
 8000368:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800036c <__adddf3>:
 800036c:	b530      	push	{r4, r5, lr}
 800036e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000372:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	bf1f      	itttt	ne
 8000382:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000386:	ea55 0c02 	orrsne.w	ip, r5, r2
 800038a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800038e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000392:	f000 80e2 	beq.w	800055a <__adddf3+0x1ee>
 8000396:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800039a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800039e:	bfb8      	it	lt
 80003a0:	426d      	neglt	r5, r5
 80003a2:	dd0c      	ble.n	80003be <__adddf3+0x52>
 80003a4:	442c      	add	r4, r5
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	ea82 0000 	eor.w	r0, r2, r0
 80003b2:	ea83 0101 	eor.w	r1, r3, r1
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	2d36      	cmp	r5, #54	; 0x36
 80003c0:	bf88      	it	hi
 80003c2:	bd30      	pophi	{r4, r5, pc}
 80003c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003d4:	d002      	beq.n	80003dc <__adddf3+0x70>
 80003d6:	4240      	negs	r0, r0
 80003d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003e8:	d002      	beq.n	80003f0 <__adddf3+0x84>
 80003ea:	4252      	negs	r2, r2
 80003ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003f0:	ea94 0f05 	teq	r4, r5
 80003f4:	f000 80a7 	beq.w	8000546 <__adddf3+0x1da>
 80003f8:	f1a4 0401 	sub.w	r4, r4, #1
 80003fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000400:	db0d      	blt.n	800041e <__adddf3+0xb2>
 8000402:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000406:	fa22 f205 	lsr.w	r2, r2, r5
 800040a:	1880      	adds	r0, r0, r2
 800040c:	f141 0100 	adc.w	r1, r1, #0
 8000410:	fa03 f20e 	lsl.w	r2, r3, lr
 8000414:	1880      	adds	r0, r0, r2
 8000416:	fa43 f305 	asr.w	r3, r3, r5
 800041a:	4159      	adcs	r1, r3
 800041c:	e00e      	b.n	800043c <__adddf3+0xd0>
 800041e:	f1a5 0520 	sub.w	r5, r5, #32
 8000422:	f10e 0e20 	add.w	lr, lr, #32
 8000426:	2a01      	cmp	r2, #1
 8000428:	fa03 fc0e 	lsl.w	ip, r3, lr
 800042c:	bf28      	it	cs
 800042e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000432:	fa43 f305 	asr.w	r3, r3, r5
 8000436:	18c0      	adds	r0, r0, r3
 8000438:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000440:	d507      	bpl.n	8000452 <__adddf3+0xe6>
 8000442:	f04f 0e00 	mov.w	lr, #0
 8000446:	f1dc 0c00 	rsbs	ip, ip, #0
 800044a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800044e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000452:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000456:	d31b      	bcc.n	8000490 <__adddf3+0x124>
 8000458:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800045c:	d30c      	bcc.n	8000478 <__adddf3+0x10c>
 800045e:	0849      	lsrs	r1, r1, #1
 8000460:	ea5f 0030 	movs.w	r0, r0, rrx
 8000464:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000468:	f104 0401 	add.w	r4, r4, #1
 800046c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000470:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000474:	f080 809a 	bcs.w	80005ac <__adddf3+0x240>
 8000478:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800047c:	bf08      	it	eq
 800047e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000482:	f150 0000 	adcs.w	r0, r0, #0
 8000486:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800048a:	ea41 0105 	orr.w	r1, r1, r5
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000494:	4140      	adcs	r0, r0
 8000496:	eb41 0101 	adc.w	r1, r1, r1
 800049a:	3c01      	subs	r4, #1
 800049c:	bf28      	it	cs
 800049e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004a2:	d2e9      	bcs.n	8000478 <__adddf3+0x10c>
 80004a4:	f091 0f00 	teq	r1, #0
 80004a8:	bf04      	itt	eq
 80004aa:	4601      	moveq	r1, r0
 80004ac:	2000      	moveq	r0, #0
 80004ae:	fab1 f381 	clz	r3, r1
 80004b2:	bf08      	it	eq
 80004b4:	3320      	addeq	r3, #32
 80004b6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ba:	f1b3 0220 	subs.w	r2, r3, #32
 80004be:	da0c      	bge.n	80004da <__adddf3+0x16e>
 80004c0:	320c      	adds	r2, #12
 80004c2:	dd08      	ble.n	80004d6 <__adddf3+0x16a>
 80004c4:	f102 0c14 	add.w	ip, r2, #20
 80004c8:	f1c2 020c 	rsb	r2, r2, #12
 80004cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004d0:	fa21 f102 	lsr.w	r1, r1, r2
 80004d4:	e00c      	b.n	80004f0 <__adddf3+0x184>
 80004d6:	f102 0214 	add.w	r2, r2, #20
 80004da:	bfd8      	it	le
 80004dc:	f1c2 0c20 	rsble	ip, r2, #32
 80004e0:	fa01 f102 	lsl.w	r1, r1, r2
 80004e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004e8:	bfdc      	itt	le
 80004ea:	ea41 010c 	orrle.w	r1, r1, ip
 80004ee:	4090      	lslle	r0, r2
 80004f0:	1ae4      	subs	r4, r4, r3
 80004f2:	bfa2      	ittt	ge
 80004f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004f8:	4329      	orrge	r1, r5
 80004fa:	bd30      	popge	{r4, r5, pc}
 80004fc:	ea6f 0404 	mvn.w	r4, r4
 8000500:	3c1f      	subs	r4, #31
 8000502:	da1c      	bge.n	800053e <__adddf3+0x1d2>
 8000504:	340c      	adds	r4, #12
 8000506:	dc0e      	bgt.n	8000526 <__adddf3+0x1ba>
 8000508:	f104 0414 	add.w	r4, r4, #20
 800050c:	f1c4 0220 	rsb	r2, r4, #32
 8000510:	fa20 f004 	lsr.w	r0, r0, r4
 8000514:	fa01 f302 	lsl.w	r3, r1, r2
 8000518:	ea40 0003 	orr.w	r0, r0, r3
 800051c:	fa21 f304 	lsr.w	r3, r1, r4
 8000520:	ea45 0103 	orr.w	r1, r5, r3
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f1c4 040c 	rsb	r4, r4, #12
 800052a:	f1c4 0220 	rsb	r2, r4, #32
 800052e:	fa20 f002 	lsr.w	r0, r0, r2
 8000532:	fa01 f304 	lsl.w	r3, r1, r4
 8000536:	ea40 0003 	orr.w	r0, r0, r3
 800053a:	4629      	mov	r1, r5
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	fa21 f004 	lsr.w	r0, r1, r4
 8000542:	4629      	mov	r1, r5
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f094 0f00 	teq	r4, #0
 800054a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800054e:	bf06      	itte	eq
 8000550:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000554:	3401      	addeq	r4, #1
 8000556:	3d01      	subne	r5, #1
 8000558:	e74e      	b.n	80003f8 <__adddf3+0x8c>
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf18      	it	ne
 8000560:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000564:	d029      	beq.n	80005ba <__adddf3+0x24e>
 8000566:	ea94 0f05 	teq	r4, r5
 800056a:	bf08      	it	eq
 800056c:	ea90 0f02 	teqeq	r0, r2
 8000570:	d005      	beq.n	800057e <__adddf3+0x212>
 8000572:	ea54 0c00 	orrs.w	ip, r4, r0
 8000576:	bf04      	itt	eq
 8000578:	4619      	moveq	r1, r3
 800057a:	4610      	moveq	r0, r2
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	ea91 0f03 	teq	r1, r3
 8000582:	bf1e      	ittt	ne
 8000584:	2100      	movne	r1, #0
 8000586:	2000      	movne	r0, #0
 8000588:	bd30      	popne	{r4, r5, pc}
 800058a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800058e:	d105      	bne.n	800059c <__adddf3+0x230>
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4149      	adcs	r1, r1
 8000594:	bf28      	it	cs
 8000596:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005a0:	bf3c      	itt	cc
 80005a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005a6:	bd30      	popcc	{r4, r5, pc}
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005b4:	f04f 0000 	mov.w	r0, #0
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf1a      	itte	ne
 80005c0:	4619      	movne	r1, r3
 80005c2:	4610      	movne	r0, r2
 80005c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005c8:	bf1c      	itt	ne
 80005ca:	460b      	movne	r3, r1
 80005cc:	4602      	movne	r2, r0
 80005ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005d2:	bf06      	itte	eq
 80005d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005d8:	ea91 0f03 	teqeq	r1, r3
 80005dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop

080005e4 <__aeabi_ui2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f04f 0500 	mov.w	r5, #0
 80005fc:	f04f 0100 	mov.w	r1, #0
 8000600:	e750      	b.n	80004a4 <__adddf3+0x138>
 8000602:	bf00      	nop

08000604 <__aeabi_i2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800061c:	bf48      	it	mi
 800061e:	4240      	negmi	r0, r0
 8000620:	f04f 0100 	mov.w	r1, #0
 8000624:	e73e      	b.n	80004a4 <__adddf3+0x138>
 8000626:	bf00      	nop

08000628 <__aeabi_f2d>:
 8000628:	0042      	lsls	r2, r0, #1
 800062a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800062e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000632:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000636:	bf1f      	itttt	ne
 8000638:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800063c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000640:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000644:	4770      	bxne	lr
 8000646:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800064a:	bf08      	it	eq
 800064c:	4770      	bxeq	lr
 800064e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000652:	bf04      	itt	eq
 8000654:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000658:	4770      	bxeq	lr
 800065a:	b530      	push	{r4, r5, lr}
 800065c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000660:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	e71c      	b.n	80004a4 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_ul2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	e00a      	b.n	8000692 <__aeabi_l2d+0x16>

0800067c <__aeabi_l2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800068a:	d502      	bpl.n	8000692 <__aeabi_l2d+0x16>
 800068c:	4240      	negs	r0, r0
 800068e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000692:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000696:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800069e:	f43f aed8 	beq.w	8000452 <__adddf3+0xe6>
 80006a2:	f04f 0203 	mov.w	r2, #3
 80006a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006aa:	bf18      	it	ne
 80006ac:	3203      	addne	r2, #3
 80006ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006b2:	bf18      	it	ne
 80006b4:	3203      	addne	r2, #3
 80006b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ba:	f1c2 0320 	rsb	r3, r2, #32
 80006be:	fa00 fc03 	lsl.w	ip, r0, r3
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ca:	ea40 000e 	orr.w	r0, r0, lr
 80006ce:	fa21 f102 	lsr.w	r1, r1, r2
 80006d2:	4414      	add	r4, r2
 80006d4:	e6bd      	b.n	8000452 <__adddf3+0xe6>
 80006d6:	bf00      	nop

080006d8 <__aeabi_dmul>:
 80006d8:	b570      	push	{r4, r5, r6, lr}
 80006da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006e6:	bf1d      	ittte	ne
 80006e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ec:	ea94 0f0c 	teqne	r4, ip
 80006f0:	ea95 0f0c 	teqne	r5, ip
 80006f4:	f000 f8de 	bleq	80008b4 <__aeabi_dmul+0x1dc>
 80006f8:	442c      	add	r4, r5
 80006fa:	ea81 0603 	eor.w	r6, r1, r3
 80006fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000702:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000706:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800070a:	bf18      	it	ne
 800070c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000718:	d038      	beq.n	800078c <__aeabi_dmul+0xb4>
 800071a:	fba0 ce02 	umull	ip, lr, r0, r2
 800071e:	f04f 0500 	mov.w	r5, #0
 8000722:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000726:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800072a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800072e:	f04f 0600 	mov.w	r6, #0
 8000732:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000736:	f09c 0f00 	teq	ip, #0
 800073a:	bf18      	it	ne
 800073c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000740:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000744:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000748:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800074c:	d204      	bcs.n	8000758 <__aeabi_dmul+0x80>
 800074e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000752:	416d      	adcs	r5, r5
 8000754:	eb46 0606 	adc.w	r6, r6, r6
 8000758:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800075c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000760:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000764:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000768:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800076c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000770:	bf88      	it	hi
 8000772:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000776:	d81e      	bhi.n	80007b6 <__aeabi_dmul+0xde>
 8000778:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800077c:	bf08      	it	eq
 800077e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000782:	f150 0000 	adcs.w	r0, r0, #0
 8000786:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000790:	ea46 0101 	orr.w	r1, r6, r1
 8000794:	ea40 0002 	orr.w	r0, r0, r2
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007a0:	bfc2      	ittt	gt
 80007a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	popgt	{r4, r5, r6, pc}
 80007ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b0:	f04f 0e00 	mov.w	lr, #0
 80007b4:	3c01      	subs	r4, #1
 80007b6:	f300 80ab 	bgt.w	8000910 <__aeabi_dmul+0x238>
 80007ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007be:	bfde      	ittt	le
 80007c0:	2000      	movle	r0, #0
 80007c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007c6:	bd70      	pople	{r4, r5, r6, pc}
 80007c8:	f1c4 0400 	rsb	r4, r4, #0
 80007cc:	3c20      	subs	r4, #32
 80007ce:	da35      	bge.n	800083c <__aeabi_dmul+0x164>
 80007d0:	340c      	adds	r4, #12
 80007d2:	dc1b      	bgt.n	800080c <__aeabi_dmul+0x134>
 80007d4:	f104 0414 	add.w	r4, r4, #20
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f305 	lsl.w	r3, r0, r5
 80007e0:	fa20 f004 	lsr.w	r0, r0, r4
 80007e4:	fa01 f205 	lsl.w	r2, r1, r5
 80007e8:	ea40 0002 	orr.w	r0, r0, r2
 80007ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007f8:	fa21 f604 	lsr.w	r6, r1, r4
 80007fc:	eb42 0106 	adc.w	r1, r2, r6
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 040c 	rsb	r4, r4, #12
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f304 	lsl.w	r3, r0, r4
 8000818:	fa20 f005 	lsr.w	r0, r0, r5
 800081c:	fa01 f204 	lsl.w	r2, r1, r4
 8000820:	ea40 0002 	orr.w	r0, r0, r2
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800082c:	f141 0100 	adc.w	r1, r1, #0
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 0520 	rsb	r5, r4, #32
 8000840:	fa00 f205 	lsl.w	r2, r0, r5
 8000844:	ea4e 0e02 	orr.w	lr, lr, r2
 8000848:	fa20 f304 	lsr.w	r3, r0, r4
 800084c:	fa01 f205 	lsl.w	r2, r1, r5
 8000850:	ea43 0302 	orr.w	r3, r3, r2
 8000854:	fa21 f004 	lsr.w	r0, r1, r4
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	fa21 f204 	lsr.w	r2, r1, r4
 8000860:	ea20 0002 	bic.w	r0, r0, r2
 8000864:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000868:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800086c:	bf08      	it	eq
 800086e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f094 0f00 	teq	r4, #0
 8000878:	d10f      	bne.n	800089a <__aeabi_dmul+0x1c2>
 800087a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800087e:	0040      	lsls	r0, r0, #1
 8000880:	eb41 0101 	adc.w	r1, r1, r1
 8000884:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3c01      	subeq	r4, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1a6>
 800088e:	ea41 0106 	orr.w	r1, r1, r6
 8000892:	f095 0f00 	teq	r5, #0
 8000896:	bf18      	it	ne
 8000898:	4770      	bxne	lr
 800089a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800089e:	0052      	lsls	r2, r2, #1
 80008a0:	eb43 0303 	adc.w	r3, r3, r3
 80008a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3d01      	subeq	r5, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1c6>
 80008ae:	ea43 0306 	orr.w	r3, r3, r6
 80008b2:	4770      	bx	lr
 80008b4:	ea94 0f0c 	teq	r4, ip
 80008b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008bc:	bf18      	it	ne
 80008be:	ea95 0f0c 	teqne	r5, ip
 80008c2:	d00c      	beq.n	80008de <__aeabi_dmul+0x206>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	d1d1      	bne.n	8000874 <__aeabi_dmul+0x19c>
 80008d0:	ea81 0103 	eor.w	r1, r1, r3
 80008d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008d8:	f04f 0000 	mov.w	r0, #0
 80008dc:	bd70      	pop	{r4, r5, r6, pc}
 80008de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e2:	bf06      	itte	eq
 80008e4:	4610      	moveq	r0, r2
 80008e6:	4619      	moveq	r1, r3
 80008e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ec:	d019      	beq.n	8000922 <__aeabi_dmul+0x24a>
 80008ee:	ea94 0f0c 	teq	r4, ip
 80008f2:	d102      	bne.n	80008fa <__aeabi_dmul+0x222>
 80008f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008f8:	d113      	bne.n	8000922 <__aeabi_dmul+0x24a>
 80008fa:	ea95 0f0c 	teq	r5, ip
 80008fe:	d105      	bne.n	800090c <__aeabi_dmul+0x234>
 8000900:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000904:	bf1c      	itt	ne
 8000906:	4610      	movne	r0, r2
 8000908:	4619      	movne	r1, r3
 800090a:	d10a      	bne.n	8000922 <__aeabi_dmul+0x24a>
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000914:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000926:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800092a:	bd70      	pop	{r4, r5, r6, pc}

0800092c <__aeabi_ddiv>:
 800092c:	b570      	push	{r4, r5, r6, lr}
 800092e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000932:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000936:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800093a:	bf1d      	ittte	ne
 800093c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000940:	ea94 0f0c 	teqne	r4, ip
 8000944:	ea95 0f0c 	teqne	r5, ip
 8000948:	f000 f8a7 	bleq	8000a9a <__aeabi_ddiv+0x16e>
 800094c:	eba4 0405 	sub.w	r4, r4, r5
 8000950:	ea81 0e03 	eor.w	lr, r1, r3
 8000954:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000958:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800095c:	f000 8088 	beq.w	8000a70 <__aeabi_ddiv+0x144>
 8000960:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000964:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000968:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800096c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000970:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000974:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000978:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800097c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000980:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000984:	429d      	cmp	r5, r3
 8000986:	bf08      	it	eq
 8000988:	4296      	cmpeq	r6, r2
 800098a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800098e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000992:	d202      	bcs.n	800099a <__aeabi_ddiv+0x6e>
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	1ab6      	subs	r6, r6, r2
 800099c:	eb65 0503 	sbc.w	r5, r5, r3
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d8:	085b      	lsrs	r3, r3, #1
 80009da:	ea4f 0232 	mov.w	r2, r2, rrx
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a08:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a0c:	d018      	beq.n	8000a40 <__aeabi_ddiv+0x114>
 8000a0e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a12:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a16:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a1a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a1e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a22:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a26:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a2a:	d1c0      	bne.n	80009ae <__aeabi_ddiv+0x82>
 8000a2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a30:	d10b      	bne.n	8000a4a <__aeabi_ddiv+0x11e>
 8000a32:	ea41 0100 	orr.w	r1, r1, r0
 8000a36:	f04f 0000 	mov.w	r0, #0
 8000a3a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a3e:	e7b6      	b.n	80009ae <__aeabi_ddiv+0x82>
 8000a40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a44:	bf04      	itt	eq
 8000a46:	4301      	orreq	r1, r0
 8000a48:	2000      	moveq	r0, #0
 8000a4a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a4e:	bf88      	it	hi
 8000a50:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a54:	f63f aeaf 	bhi.w	80007b6 <__aeabi_dmul+0xde>
 8000a58:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a5c:	bf04      	itt	eq
 8000a5e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a66:	f150 0000 	adcs.w	r0, r0, #0
 8000a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a74:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a78:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a7c:	bfc2      	ittt	gt
 8000a7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a86:	bd70      	popgt	{r4, r5, r6, pc}
 8000a88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a8c:	f04f 0e00 	mov.w	lr, #0
 8000a90:	3c01      	subs	r4, #1
 8000a92:	e690      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a94:	ea45 0e06 	orr.w	lr, r5, r6
 8000a98:	e68d      	b.n	80007b6 <__aeabi_dmul+0xde>
 8000a9a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	bf08      	it	eq
 8000aa4:	ea95 0f0c 	teqeq	r5, ip
 8000aa8:	f43f af3b 	beq.w	8000922 <__aeabi_dmul+0x24a>
 8000aac:	ea94 0f0c 	teq	r4, ip
 8000ab0:	d10a      	bne.n	8000ac8 <__aeabi_ddiv+0x19c>
 8000ab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ab6:	f47f af34 	bne.w	8000922 <__aeabi_dmul+0x24a>
 8000aba:	ea95 0f0c 	teq	r5, ip
 8000abe:	f47f af25 	bne.w	800090c <__aeabi_dmul+0x234>
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	e72c      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000ac8:	ea95 0f0c 	teq	r5, ip
 8000acc:	d106      	bne.n	8000adc <__aeabi_ddiv+0x1b0>
 8000ace:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ad2:	f43f aefd 	beq.w	80008d0 <__aeabi_dmul+0x1f8>
 8000ad6:	4610      	mov	r0, r2
 8000ad8:	4619      	mov	r1, r3
 8000ada:	e722      	b.n	8000922 <__aeabi_dmul+0x24a>
 8000adc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae6:	f47f aec5 	bne.w	8000874 <__aeabi_dmul+0x19c>
 8000aea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aee:	f47f af0d 	bne.w	800090c <__aeabi_dmul+0x234>
 8000af2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000af6:	f47f aeeb 	bne.w	80008d0 <__aeabi_dmul+0x1f8>
 8000afa:	e712      	b.n	8000922 <__aeabi_dmul+0x24a>

08000afc <__gedf2>:
 8000afc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b00:	e006      	b.n	8000b10 <__cmpdf2+0x4>
 8000b02:	bf00      	nop

08000b04 <__ledf2>:
 8000b04:	f04f 0c01 	mov.w	ip, #1
 8000b08:	e002      	b.n	8000b10 <__cmpdf2+0x4>
 8000b0a:	bf00      	nop

08000b0c <__cmpdf2>:
 8000b0c:	f04f 0c01 	mov.w	ip, #1
 8000b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b20:	bf18      	it	ne
 8000b22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b26:	d01b      	beq.n	8000b60 <__cmpdf2+0x54>
 8000b28:	b001      	add	sp, #4
 8000b2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b2e:	bf0c      	ite	eq
 8000b30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b34:	ea91 0f03 	teqne	r1, r3
 8000b38:	bf02      	ittt	eq
 8000b3a:	ea90 0f02 	teqeq	r0, r2
 8000b3e:	2000      	moveq	r0, #0
 8000b40:	4770      	bxeq	lr
 8000b42:	f110 0f00 	cmn.w	r0, #0
 8000b46:	ea91 0f03 	teq	r1, r3
 8000b4a:	bf58      	it	pl
 8000b4c:	4299      	cmppl	r1, r3
 8000b4e:	bf08      	it	eq
 8000b50:	4290      	cmpeq	r0, r2
 8000b52:	bf2c      	ite	cs
 8000b54:	17d8      	asrcs	r0, r3, #31
 8000b56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b5a:	f040 0001 	orr.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__cmpdf2+0x64>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d107      	bne.n	8000b80 <__cmpdf2+0x74>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d1d6      	bne.n	8000b28 <__cmpdf2+0x1c>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d0d3      	beq.n	8000b28 <__cmpdf2+0x1c>
 8000b80:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdrcmple>:
 8000b88:	4684      	mov	ip, r0
 8000b8a:	4610      	mov	r0, r2
 8000b8c:	4662      	mov	r2, ip
 8000b8e:	468c      	mov	ip, r1
 8000b90:	4619      	mov	r1, r3
 8000b92:	4663      	mov	r3, ip
 8000b94:	e000      	b.n	8000b98 <__aeabi_cdcmpeq>
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdcmpeq>:
 8000b98:	b501      	push	{r0, lr}
 8000b9a:	f7ff ffb7 	bl	8000b0c <__cmpdf2>
 8000b9e:	2800      	cmp	r0, #0
 8000ba0:	bf48      	it	mi
 8000ba2:	f110 0f00 	cmnmi.w	r0, #0
 8000ba6:	bd01      	pop	{r0, pc}

08000ba8 <__aeabi_dcmpeq>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff fff4 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2001      	moveq	r0, #1
 8000bb4:	2000      	movne	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmplt>:
 8000bbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc0:	f7ff ffea 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bc4:	bf34      	ite	cc
 8000bc6:	2001      	movcc	r0, #1
 8000bc8:	2000      	movcs	r0, #0
 8000bca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bce:	bf00      	nop

08000bd0 <__aeabi_dcmple>:
 8000bd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd4:	f7ff ffe0 	bl	8000b98 <__aeabi_cdcmpeq>
 8000bd8:	bf94      	ite	ls
 8000bda:	2001      	movls	r0, #1
 8000bdc:	2000      	movhi	r0, #0
 8000bde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be2:	bf00      	nop

08000be4 <__aeabi_dcmpge>:
 8000be4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be8:	f7ff ffce 	bl	8000b88 <__aeabi_cdrcmple>
 8000bec:	bf94      	ite	ls
 8000bee:	2001      	movls	r0, #1
 8000bf0:	2000      	movhi	r0, #0
 8000bf2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_dcmpgt>:
 8000bf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bfc:	f7ff ffc4 	bl	8000b88 <__aeabi_cdrcmple>
 8000c00:	bf34      	ite	cc
 8000c02:	2001      	movcc	r0, #1
 8000c04:	2000      	movcs	r0, #0
 8000c06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0a:	bf00      	nop

08000c0c <__aeabi_dcmpun>:
 8000c0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x10>
 8000c16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c1a:	d10a      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x20>
 8000c26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_dcmpun+0x26>
 8000c2c:	f04f 0000 	mov.w	r0, #0
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0001 	mov.w	r0, #1
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2iz>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c40:	d215      	bcs.n	8000c6e <__aeabi_d2iz+0x36>
 8000c42:	d511      	bpl.n	8000c68 <__aeabi_d2iz+0x30>
 8000c44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c4c:	d912      	bls.n	8000c74 <__aeabi_d2iz+0x3c>
 8000c4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	bf18      	it	ne
 8000c64:	4240      	negne	r0, r0
 8000c66:	4770      	bx	lr
 8000c68:	f04f 0000 	mov.w	r0, #0
 8000c6c:	4770      	bx	lr
 8000c6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c72:	d105      	bne.n	8000c80 <__aeabi_d2iz+0x48>
 8000c74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	bf08      	it	eq
 8000c7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c7e:	4770      	bx	lr
 8000c80:	f04f 0000 	mov.w	r0, #0
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2f>:
 8000c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c90:	bf24      	itt	cs
 8000c92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c9a:	d90d      	bls.n	8000cb8 <__aeabi_d2f+0x30>
 8000c9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ca4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ca8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cbc:	d121      	bne.n	8000d02 <__aeabi_d2f+0x7a>
 8000cbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cc2:	bfbc      	itt	lt
 8000cc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cc8:	4770      	bxlt	lr
 8000cca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cd2:	f1c2 0218 	rsb	r2, r2, #24
 8000cd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cde:	fa20 f002 	lsr.w	r0, r0, r2
 8000ce2:	bf18      	it	ne
 8000ce4:	f040 0001 	orrne.w	r0, r0, #1
 8000ce8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cf4:	ea40 000c 	orr.w	r0, r0, ip
 8000cf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d00:	e7cc      	b.n	8000c9c <__aeabi_d2f+0x14>
 8000d02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d06:	d107      	bne.n	8000d18 <__aeabi_d2f+0x90>
 8000d08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d0c:	bf1e      	ittt	ne
 8000d0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d16:	4770      	bxne	lr
 8000d18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d3c:	f000 b974 	b.w	8001028 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468e      	mov	lr, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14d      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4694      	mov	ip, r2
 8000d6a:	d969      	bls.n	8000e40 <__udivmoddi4+0xe8>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b152      	cbz	r2, 8000d88 <__udivmoddi4+0x30>
 8000d72:	fa01 f302 	lsl.w	r3, r1, r2
 8000d76:	f1c2 0120 	rsb	r1, r2, #32
 8000d7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d82:	ea41 0e03 	orr.w	lr, r1, r3
 8000d86:	4094      	lsls	r4, r2
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	0c21      	lsrs	r1, r4, #16
 8000d8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d92:	fa1f f78c 	uxth.w	r7, ip
 8000d96:	fb08 e316 	mls	r3, r8, r6, lr
 8000d9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9e:	fb06 f107 	mul.w	r1, r6, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dae:	f080 811f 	bcs.w	8000ff0 <__udivmoddi4+0x298>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 811c 	bls.w	8000ff0 <__udivmoddi4+0x298>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb00 f707 	mul.w	r7, r0, r7
 8000dd0:	42a7      	cmp	r7, r4
 8000dd2:	d90a      	bls.n	8000dea <__udivmoddi4+0x92>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ddc:	f080 810a 	bcs.w	8000ff4 <__udivmoddi4+0x29c>
 8000de0:	42a7      	cmp	r7, r4
 8000de2:	f240 8107 	bls.w	8000ff4 <__udivmoddi4+0x29c>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dee:	1be4      	subs	r4, r4, r7
 8000df0:	2600      	movs	r6, #0
 8000df2:	b11d      	cbz	r5, 8000dfc <__udivmoddi4+0xa4>
 8000df4:	40d4      	lsrs	r4, r2
 8000df6:	2300      	movs	r3, #0
 8000df8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0xc2>
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	f000 80ef 	beq.w	8000fea <__udivmoddi4+0x292>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e12:	4630      	mov	r0, r6
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f683 	clz	r6, r3
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d14a      	bne.n	8000eb8 <__udivmoddi4+0x160>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xd4>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80f9 	bhi.w	800101e <__udivmoddi4+0x2c6>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	469e      	mov	lr, r3
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e0      	beq.n	8000dfc <__udivmoddi4+0xa4>
 8000e3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3e:	e7dd      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000e40:	b902      	cbnz	r2, 8000e44 <__udivmoddi4+0xec>
 8000e42:	deff      	udf	#255	; 0xff
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f040 8092 	bne.w	8000f72 <__udivmoddi4+0x21a>
 8000e4e:	eba1 010c 	sub.w	r1, r1, ip
 8000e52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e56:	fa1f fe8c 	uxth.w	lr, ip
 8000e5a:	2601      	movs	r6, #1
 8000e5c:	0c20      	lsrs	r0, r4, #16
 8000e5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e62:	fb07 1113 	mls	r1, r7, r3, r1
 8000e66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6a:	fb0e f003 	mul.w	r0, lr, r3
 8000e6e:	4288      	cmp	r0, r1
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x12c>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x12a>
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	f200 80cb 	bhi.w	8001018 <__udivmoddi4+0x2c0>
 8000e82:	4643      	mov	r3, r8
 8000e84:	1a09      	subs	r1, r1, r0
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e94:	fb0e fe00 	mul.w	lr, lr, r0
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x156>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ea4:	d202      	bcs.n	8000eac <__udivmoddi4+0x154>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	f200 80bb 	bhi.w	8001022 <__udivmoddi4+0x2ca>
 8000eac:	4608      	mov	r0, r1
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb6:	e79c      	b.n	8000df2 <__udivmoddi4+0x9a>
 8000eb8:	f1c6 0720 	rsb	r7, r6, #32
 8000ebc:	40b3      	lsls	r3, r6
 8000ebe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	40f9      	lsrs	r1, r7
 8000ed2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ede:	0c20      	lsrs	r0, r4, #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eec:	fb08 f00e 	mul.w	r0, r8, lr
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef6:	d90b      	bls.n	8000f10 <__udivmoddi4+0x1b8>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000f00:	f080 8088 	bcs.w	8001014 <__udivmoddi4+0x2bc>
 8000f04:	4288      	cmp	r0, r1
 8000f06:	f240 8085 	bls.w	8001014 <__udivmoddi4+0x2bc>
 8000f0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1a09      	subs	r1, r1, r0
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f18:	fb09 1110 	mls	r1, r9, r0, r1
 8000f1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f24:	458e      	cmp	lr, r1
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1e2>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000f30:	d26c      	bcs.n	800100c <__udivmoddi4+0x2b4>
 8000f32:	458e      	cmp	lr, r1
 8000f34:	d96a      	bls.n	800100c <__udivmoddi4+0x2b4>
 8000f36:	3802      	subs	r0, #2
 8000f38:	4461      	add	r1, ip
 8000f3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f42:	eba1 010e 	sub.w	r1, r1, lr
 8000f46:	42a1      	cmp	r1, r4
 8000f48:	46c8      	mov	r8, r9
 8000f4a:	46a6      	mov	lr, r4
 8000f4c:	d356      	bcc.n	8000ffc <__udivmoddi4+0x2a4>
 8000f4e:	d053      	beq.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f50:	b15d      	cbz	r5, 8000f6a <__udivmoddi4+0x212>
 8000f52:	ebb3 0208 	subs.w	r2, r3, r8
 8000f56:	eb61 010e 	sbc.w	r1, r1, lr
 8000f5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f62:	40f1      	lsrs	r1, r6
 8000f64:	431f      	orrs	r7, r3
 8000f66:	e9c5 7100 	strd	r7, r1, [r5]
 8000f6a:	2600      	movs	r6, #0
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	f1c2 0320 	rsb	r3, r2, #32
 8000f76:	40d8      	lsrs	r0, r3
 8000f78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f80:	4091      	lsls	r1, r2
 8000f82:	4301      	orrs	r1, r0
 8000f84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f88:	fa1f fe8c 	uxth.w	lr, ip
 8000f8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f90:	fb07 3610 	mls	r6, r7, r0, r3
 8000f94:	0c0b      	lsrs	r3, r1, #16
 8000f96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x260>
 8000fa6:	eb1c 0303 	adds.w	r3, ip, r3
 8000faa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000fae:	d22f      	bcs.n	8001010 <__udivmoddi4+0x2b8>
 8000fb0:	429e      	cmp	r6, r3
 8000fb2:	d92d      	bls.n	8001010 <__udivmoddi4+0x2b8>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	4463      	add	r3, ip
 8000fb8:	1b9b      	subs	r3, r3, r6
 8000fba:	b289      	uxth	r1, r1
 8000fbc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fc0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fcc:	428b      	cmp	r3, r1
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x28a>
 8000fd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000fd8:	d216      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d914      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fde:	3e02      	subs	r6, #2
 8000fe0:	4461      	add	r1, ip
 8000fe2:	1ac9      	subs	r1, r1, r3
 8000fe4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe8:	e738      	b.n	8000e5c <__udivmoddi4+0x104>
 8000fea:	462e      	mov	r6, r5
 8000fec:	4628      	mov	r0, r5
 8000fee:	e705      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	e6e3      	b.n	8000dbc <__udivmoddi4+0x64>
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	e6f8      	b.n	8000dea <__udivmoddi4+0x92>
 8000ff8:	454b      	cmp	r3, r9
 8000ffa:	d2a9      	bcs.n	8000f50 <__udivmoddi4+0x1f8>
 8000ffc:	ebb9 0802 	subs.w	r8, r9, r2
 8001000:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001004:	3801      	subs	r0, #1
 8001006:	e7a3      	b.n	8000f50 <__udivmoddi4+0x1f8>
 8001008:	4646      	mov	r6, r8
 800100a:	e7ea      	b.n	8000fe2 <__udivmoddi4+0x28a>
 800100c:	4620      	mov	r0, r4
 800100e:	e794      	b.n	8000f3a <__udivmoddi4+0x1e2>
 8001010:	4640      	mov	r0, r8
 8001012:	e7d1      	b.n	8000fb8 <__udivmoddi4+0x260>
 8001014:	46d0      	mov	r8, sl
 8001016:	e77b      	b.n	8000f10 <__udivmoddi4+0x1b8>
 8001018:	3b02      	subs	r3, #2
 800101a:	4461      	add	r1, ip
 800101c:	e732      	b.n	8000e84 <__udivmoddi4+0x12c>
 800101e:	4630      	mov	r0, r6
 8001020:	e709      	b.n	8000e36 <__udivmoddi4+0xde>
 8001022:	4464      	add	r4, ip
 8001024:	3802      	subs	r0, #2
 8001026:	e742      	b.n	8000eae <__udivmoddi4+0x156>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	887a      	ldrh	r2, [r7, #2]
 8001040:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001050:	d02c      	beq.n	80010ac <arm_cfft_init_f32+0x80>
 8001052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001056:	f300 809e 	bgt.w	8001196 <arm_cfft_init_f32+0x16a>
 800105a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800105e:	d032      	beq.n	80010c6 <arm_cfft_init_f32+0x9a>
 8001060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001064:	f300 8097 	bgt.w	8001196 <arm_cfft_init_f32+0x16a>
 8001068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800106c:	d038      	beq.n	80010e0 <arm_cfft_init_f32+0xb4>
 800106e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001072:	f300 8090 	bgt.w	8001196 <arm_cfft_init_f32+0x16a>
 8001076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800107a:	d03e      	beq.n	80010fa <arm_cfft_init_f32+0xce>
 800107c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001080:	f300 8089 	bgt.w	8001196 <arm_cfft_init_f32+0x16a>
 8001084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001088:	d044      	beq.n	8001114 <arm_cfft_init_f32+0xe8>
 800108a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800108e:	f300 8082 	bgt.w	8001196 <arm_cfft_init_f32+0x16a>
 8001092:	2b80      	cmp	r3, #128	; 0x80
 8001094:	d04b      	beq.n	800112e <arm_cfft_init_f32+0x102>
 8001096:	2b80      	cmp	r3, #128	; 0x80
 8001098:	dc7d      	bgt.n	8001196 <arm_cfft_init_f32+0x16a>
 800109a:	2b40      	cmp	r3, #64	; 0x40
 800109c:	d054      	beq.n	8001148 <arm_cfft_init_f32+0x11c>
 800109e:	2b40      	cmp	r3, #64	; 0x40
 80010a0:	dc79      	bgt.n	8001196 <arm_cfft_init_f32+0x16a>
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d06a      	beq.n	800117c <arm_cfft_init_f32+0x150>
 80010a6:	2b20      	cmp	r3, #32
 80010a8:	d05b      	beq.n	8001162 <arm_cfft_init_f32+0x136>
 80010aa:	e074      	b.n	8001196 <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 80010ac:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <arm_cfft_init_f32+0x180>)
 80010ae:	899a      	ldrh	r2, [r3, #12]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	819a      	strh	r2, [r3, #12]
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <arm_cfft_init_f32+0x180>)
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <arm_cfft_init_f32+0x180>)
 80010be:	685a      	ldr	r2, [r3, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	605a      	str	r2, [r3, #4]
            break;
 80010c4:	e06a      	b.n	800119c <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 80010c6:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <arm_cfft_init_f32+0x184>)
 80010c8:	899a      	ldrh	r2, [r3, #12]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	819a      	strh	r2, [r3, #12]
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <arm_cfft_init_f32+0x184>)
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <arm_cfft_init_f32+0x184>)
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	605a      	str	r2, [r3, #4]

            break;
 80010de:	e05d      	b.n	800119c <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 80010e0:	4b34      	ldr	r3, [pc, #208]	; (80011b4 <arm_cfft_init_f32+0x188>)
 80010e2:	899a      	ldrh	r2, [r3, #12]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	819a      	strh	r2, [r3, #12]
 80010e8:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <arm_cfft_init_f32+0x188>)
 80010ea:	689a      	ldr	r2, [r3, #8]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	4b30      	ldr	r3, [pc, #192]	; (80011b4 <arm_cfft_init_f32+0x188>)
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	605a      	str	r2, [r3, #4]

            break;
 80010f8:	e050      	b.n	800119c <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 80010fa:	4b2f      	ldr	r3, [pc, #188]	; (80011b8 <arm_cfft_init_f32+0x18c>)
 80010fc:	899a      	ldrh	r2, [r3, #12]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	819a      	strh	r2, [r3, #12]
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <arm_cfft_init_f32+0x18c>)
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <arm_cfft_init_f32+0x18c>)
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	605a      	str	r2, [r3, #4]
            break;
 8001112:	e043      	b.n	800119c <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8001114:	4b29      	ldr	r3, [pc, #164]	; (80011bc <arm_cfft_init_f32+0x190>)
 8001116:	899a      	ldrh	r2, [r3, #12]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	819a      	strh	r2, [r3, #12]
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <arm_cfft_init_f32+0x190>)
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <arm_cfft_init_f32+0x190>)
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	605a      	str	r2, [r3, #4]
            break;
 800112c:	e036      	b.n	800119c <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <arm_cfft_init_f32+0x194>)
 8001130:	899a      	ldrh	r2, [r3, #12]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	819a      	strh	r2, [r3, #12]
 8001136:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <arm_cfft_init_f32+0x194>)
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <arm_cfft_init_f32+0x194>)
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	605a      	str	r2, [r3, #4]
            break;
 8001146:	e029      	b.n	800119c <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 8001148:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <arm_cfft_init_f32+0x198>)
 800114a:	899a      	ldrh	r2, [r3, #12]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	819a      	strh	r2, [r3, #12]
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <arm_cfft_init_f32+0x198>)
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <arm_cfft_init_f32+0x198>)
 800115a:	685a      	ldr	r2, [r3, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	605a      	str	r2, [r3, #4]
            break;
 8001160:	e01c      	b.n	800119c <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 8001162:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <arm_cfft_init_f32+0x19c>)
 8001164:	899a      	ldrh	r2, [r3, #12]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	819a      	strh	r2, [r3, #12]
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <arm_cfft_init_f32+0x19c>)
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <arm_cfft_init_f32+0x19c>)
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	605a      	str	r2, [r3, #4]
            break;
 800117a:	e00f      	b.n	800119c <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 800117c:	4b13      	ldr	r3, [pc, #76]	; (80011cc <arm_cfft_init_f32+0x1a0>)
 800117e:	899a      	ldrh	r2, [r3, #12]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	819a      	strh	r2, [r3, #12]
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <arm_cfft_init_f32+0x1a0>)
 8001186:	689a      	ldr	r2, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <arm_cfft_init_f32+0x1a0>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	605a      	str	r2, [r3, #4]
            break;
 8001194:	e002      	b.n	800119c <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 8001196:	23ff      	movs	r3, #255	; 0xff
 8001198:	73fb      	strb	r3, [r7, #15]
            break;
 800119a:	bf00      	nop
        }


        return (status);
 800119c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	0800f014 	.word	0x0800f014
 80011b0:	0800f044 	.word	0x0800f044
 80011b4:	0800efe4 	.word	0x0800efe4
 80011b8:	0800f024 	.word	0x0800f024
 80011bc:	0800f054 	.word	0x0800f054
 80011c0:	0800f004 	.word	0x0800f004
 80011c4:	0800eff4 	.word	0x0800eff4
 80011c8:	0800f064 	.word	0x0800f064
 80011cc:	0800f034 	.word	0x0800f034

080011d0 <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 80011d6:	f003 f813 	bl	8004200 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 80011da:	f000 f903 	bl	80013e4 <SystemClock_Config>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 80011de:	f002 f82f 	bl	8003240 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 80011e2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80011e6:	2001      	movs	r0, #1
 80011e8:	f002 f8b8 	bl	800335c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f002 f919 	bl	8003424 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 80011f2:	f002 fb19 	bl	8003828 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80011f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011fa:	f002 f96f 	bl	80034dc <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 80011fe:	f002 f895 	bl	800332c <BSP_LCD_GetXSize>
 8001202:	4603      	mov	r3, r0
 8001204:	b29c      	uxth	r4, r3
 8001206:	f002 f89d 	bl	8003344 <BSP_LCD_GetYSize>
 800120a:	4603      	mov	r3, r0
 800120c:	b29b      	uxth	r3, r3
 800120e:	4619      	mov	r1, r3
 8001210:	4620      	mov	r0, r4
 8001212:	f002 fef1 	bl	8003ff8 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 8001216:	f000 fec9 	bl	8001fac <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 800121a:	f000 fee7 	bl	8001fec <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 800121e:	2000      	movs	r0, #0
 8001220:	f001 fbf6 	bl	8002a10 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8001224:	2001      	movs	r0, #1
 8001226:	f001 fbf3 	bl	8002a10 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 800122a:	f000 fd2f 	bl	8001c8c <MENU_draw>
	MENU_hint();						// Show hint at startup
 800122e:	f000 fdb7 	bl	8001da0 <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 8001232:	f000 f955 	bl	80014e0 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 8001236:	f000 fa2f 	bl	8001698 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 800123a:	f000 faed 	bl	8001818 <MEAS_timer_init>

    // Initialize the FFT instance
    arm_cfft_init_f32(&fftInstance, FFT_SIZE);
 800123e:	2140      	movs	r1, #64	; 0x40
 8001240:	4861      	ldr	r0, [pc, #388]	; (80013c8 <main+0x1f8>)
 8001242:	f7ff fef3 	bl	800102c <arm_cfft_init_f32>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8001246:	2000      	movs	r0, #0
 8001248:	f001 fc6a 	bl	8002b20 <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 800124c:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <main+0x1fc>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d065      	beq.n	8001320 <main+0x150>
			MEAS_data_ready = false;
 8001254:	4b5d      	ldr	r3, [pc, #372]	; (80013cc <main+0x1fc>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
//		    for (int i = 0; i < 128; i++) {
//		    	testArray[i] = (float32_t)i / 10.0f;
//		    }

		    // Perform the FFT, 0 indicates forward FFT, 0 disables bit reversal of output
		    arm_cfft_f32(&fftInstance, testData, 0, 1);
 800125a:	2301      	movs	r3, #1
 800125c:	2200      	movs	r2, #0
 800125e:	495c      	ldr	r1, [pc, #368]	; (80013d0 <main+0x200>)
 8001260:	4859      	ldr	r0, [pc, #356]	; (80013c8 <main+0x1f8>)
 8001262:	f007 fcdd 	bl	8008c20 <arm_cfft_f32>

		    // magnitude calculation
		    arm_cmplx_mag_f32(testData, testOutput, FFT_SIZE);
 8001266:	2240      	movs	r2, #64	; 0x40
 8001268:	495a      	ldr	r1, [pc, #360]	; (80013d4 <main+0x204>)
 800126a:	4859      	ldr	r0, [pc, #356]	; (80013d0 <main+0x200>)
 800126c:	f007 fd52 	bl	8008d14 <arm_cmplx_mag_f32>

		    // highest value
		    float32_t max_value;
		    uint32_t max_index;
		    arm_max_f32(testOutput, FFT_SIZE, &max_value, &max_index);
 8001270:	463b      	mov	r3, r7
 8001272:	1d3a      	adds	r2, r7, #4
 8001274:	2140      	movs	r1, #64	; 0x40
 8001276:	4857      	ldr	r0, [pc, #348]	; (80013d4 <main+0x204>)
 8001278:	f007 f93c 	bl	80084f4 <arm_max_f32>

		    // print highest value in ADC_samples
		    int arr_size = sizeof(testOutput) / sizeof(float32_t);
 800127c:	2340      	movs	r3, #64	; 0x40
 800127e:	60fb      	str	r3, [r7, #12]
		    float32_t max_val = testOutput[0];
 8001280:	4b54      	ldr	r3, [pc, #336]	; (80013d4 <main+0x204>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	617b      	str	r3, [r7, #20]

		    // get max value which corresponds to Doppler frequency
		    for (int i = 1; i < arr_size; i++) {
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	e015      	b.n	80012b8 <main+0xe8>
		        if (testOutput[i] > max_val) {
 800128c:	4a51      	ldr	r2, [pc, #324]	; (80013d4 <main+0x204>)
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ed97 7a05 	vldr	s14, [r7, #20]
 800129c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a4:	d505      	bpl.n	80012b2 <main+0xe2>
		            max_val = testOutput[i];
 80012a6:	4a4b      	ldr	r2, [pc, #300]	; (80013d4 <main+0x204>)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	617b      	str	r3, [r7, #20]
		    for (int i = 1; i < arr_size; i++) {
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	3301      	adds	r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbe5      	blt.n	800128c <main+0xbc>
		        }
		    }

		    // Calculate velocity in m/s
		    float32_t lambda = SPEED_OF_LIGHT / TRANSMIT_FREQUENCY;
 80012c0:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <main+0x208>)
 80012c2:	60bb      	str	r3, [r7, #8]
		    velocity = (max_val*lambda) / 2.0f;
 80012c4:	ed97 7a05 	vldr	s14, [r7, #20]
 80012c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80012cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80012d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d8:	4b40      	ldr	r3, [pc, #256]	; (80013dc <main+0x20c>)
 80012da:	edc3 7a00 	vstr	s15, [r3]

		    // convert to m/s to km/h and round to accuracy +/- 0.3
		    velocity = velocity*3.6;
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <main+0x20c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff f9a0 	bl	8000628 <__aeabi_f2d>
 80012e8:	a335      	add	r3, pc, #212	; (adr r3, 80013c0 <main+0x1f0>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f9f3 	bl	80006d8 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	f7ff fcc5 	bl	8000c88 <__aeabi_d2f>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a36      	ldr	r2, [pc, #216]	; (80013dc <main+0x20c>)
 8001302:	6013      	str	r3, [r2, #0]
		    velocity = roundToAccuracy(velocity);
 8001304:	4b35      	ldr	r3, [pc, #212]	; (80013dc <main+0x20c>)
 8001306:	edd3 7a00 	vldr	s15, [r3]
 800130a:	eeb0 0a67 	vmov.f32	s0, s15
 800130e:	f000 f9a7 	bl	8001660 <roundToAccuracy>
 8001312:	eef0 7a40 	vmov.f32	s15, s0
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <main+0x20c>)
 8001318:	edc3 7a00 	vstr	s15, [r3]

		    MEAS_show_data();
 800131c:	f000 fc54 	bl	8001bc8 <MEAS_show_data>
		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 8001320:	f000 fe96 	bl	8002050 <PB_pressed>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d01d      	beq.n	8001366 <main+0x196>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <main+0x210>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	bf14      	ite	ne
 8001332:	2301      	movne	r3, #1
 8001334:	2300      	moveq	r3, #0
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f083 0301 	eor.w	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <main+0x210>)
 8001346:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <main+0x210>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <main+0x18c>
				DAC_init();
 8001350:	f000 fa06 	bl	8001760 <DAC_init>
				BSP_LED_On(LED4);
 8001354:	2001      	movs	r0, #1
 8001356:	f001 fbaf 	bl	8002ab8 <BSP_LED_On>
 800135a:	e004      	b.n	8001366 <main+0x196>
			} else {
				DAC_reset();
 800135c:	f000 f9ea 	bl	8001734 <DAC_reset>
				BSP_LED_Off(LED4);
 8001360:	2001      	movs	r0, #1
 8001362:	f001 fbc3 	bl	8002aec <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8001366:	f000 fd5b 	bl	8001e20 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 800136a:	f000 fd47 	bl	8001dfc <MENU_get_transition>
 800136e:	4603      	mov	r3, r0
 8001370:	2b06      	cmp	r3, #6
 8001372:	d81d      	bhi.n	80013b0 <main+0x1e0>
 8001374:	a201      	add	r2, pc, #4	; (adr r2, 800137c <main+0x1ac>)
 8001376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137a:	bf00      	nop
 800137c:	08001399 	.word	0x08001399
 8001380:	080013b1 	.word	0x080013b1
 8001384:	080013b1 	.word	0x080013b1
 8001388:	080013a7 	.word	0x080013a7
 800138c:	080013b1 	.word	0x080013b1
 8001390:	080013b1 	.word	0x080013b1
 8001394:	080013b1 	.word	0x080013b1
		case MENU_NONE:					// No transition => do nothing
			break;
		case MENU_ZERO:
			ADC1_IN13_ADC2_IN11_dual_init();
 8001398:	f000 fa74 	bl	8001884 <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN11_dual_start();
 800139c:	f000 fb1c 	bl	80019d8 <ADC1_IN13_ADC2_IN11_dual_start>
			DMA2_Stream4_IRQHandler();
 80013a0:	f000 fb92 	bl	8001ac8 <DMA2_Stream4_IRQHandler>

			break;
 80013a4:	e005      	b.n	80013b2 <main+0x1e2>
		case MENU_ONE:
			break;
		case MENU_TWO:
			break;
		case MENU_THREE:
			ADC1_IN13_ADC2_IN11_dual_init();
 80013a6:	f000 fa6d 	bl	8001884 <ADC1_IN13_ADC2_IN11_dual_init>
			ADC1_IN13_ADC2_IN11_dual_start();
 80013aa:	f000 fb15 	bl	80019d8 <ADC1_IN13_ADC2_IN11_dual_start>
			break;
 80013ae:	e000      	b.n	80013b2 <main+0x1e2>
		case MENU_FOUR:
			break;
		case MENU_FIVE:
			break;
		default:						// Should never occur
			break;
 80013b0:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 80013b2:	20c8      	movs	r0, #200	; 0xc8
 80013b4:	f002 ff9e 	bl	80042f4 <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 80013b8:	e745      	b.n	8001246 <main+0x76>
 80013ba:	bf00      	nop
 80013bc:	f3af 8000 	nop.w
 80013c0:	cccccccd 	.word	0xcccccccd
 80013c4:	400ccccc 	.word	0x400ccccc
 80013c8:	200004b8 	.word	0x200004b8
 80013cc:	200005cc 	.word	0x200005cc
 80013d0:	20000000 	.word	0x20000000
 80013d4:	200004cc 	.word	0x200004cc
 80013d8:	3c4ca888 	.word	0x3c4ca888
 80013dc:	200004c8 	.word	0x200004c8
 80013e0:	200005cd 	.word	0x200005cd

080013e4 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0a0      	sub	sp, #128	; 0x80
 80013e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013ee:	2230      	movs	r2, #48	; 0x30
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f008 f88c 	bl	8009510 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2230      	movs	r2, #48	; 0x30
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f008 f87d 	bl	8009510 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <SystemClock_Config+0xf0>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <SystemClock_Config+0xf0>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <SystemClock_Config+0xf0>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <SystemClock_Config+0xf4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a27      	ldr	r2, [pc, #156]	; (80014d8 <SystemClock_Config+0xf4>)
 800143c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <SystemClock_Config+0xf4>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800144e:	2301      	movs	r3, #1
 8001450:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001456:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001458:	2302      	movs	r3, #2
 800145a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001460:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001462:	2308      	movs	r3, #8
 8001464:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001466:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800146a:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800146c:	2302      	movs	r3, #2
 800146e:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001470:	2307      	movs	r3, #7
 8001472:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001474:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001478:	4618      	mov	r0, r3
 800147a:	f005 f98d 	bl	8006798 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800147e:	230f      	movs	r3, #15
 8001480:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001482:	2302      	movs	r3, #2
 8001484:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800148a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800148e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001496:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800149a:	2105      	movs	r1, #5
 800149c:	4618      	mov	r0, r3
 800149e:	f005 fbe9 	bl	8006c74 <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014a2:	2308      	movs	r3, #8
 80014a4:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80014a6:	23c0      	movs	r3, #192	; 0xc0
 80014a8:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80014aa:	2304      	movs	r3, #4
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80014ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4618      	mov	r0, r3
 80014ba:	f005 fde7 	bl	800708c <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <SystemClock_Config+0xf8>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	4a06      	ldr	r2, [pc, #24]	; (80014dc <SystemClock_Config+0xf8>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c8:	6053      	str	r3, [r2, #4]
}
 80014ca:	bf00      	nop
 80014cc:	3780      	adds	r7, #128	; 0x80
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40007000 	.word	0x40007000
 80014dc:	40012300 	.word	0x40012300

080014e0 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <gyro_disable+0xb4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a29      	ldr	r2, [pc, #164]	; (8001594 <gyro_disable+0xb4>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b27      	ldr	r3, [pc, #156]	; (8001594 <gyro_disable+0xb4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1_Msk;	// Reset mode for PC1
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <gyro_disable+0xb8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a24      	ldr	r2, [pc, #144]	; (8001598 <gyro_disable+0xb8>)
 8001508:	f023 030c 	bic.w	r3, r3, #12
 800150c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 1UL << GPIO_MODER_MODER1_Pos;	// Set PC1 as output
 800150e:	4b22      	ldr	r3, [pc, #136]	; (8001598 <gyro_disable+0xb8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a21      	ldr	r2, [pc, #132]	; (8001598 <gyro_disable+0xb8>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <gyro_disable+0xb8>)
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	4a1e      	ldr	r2, [pc, #120]	; (8001598 <gyro_disable+0xb8>)
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 8001526:	200a      	movs	r0, #10
 8001528:	f002 fee4 	bl	80042f4 <HAL_Delay>
	GPIOC->MODER |= 3UL << GPIO_MODER_MODER1_Pos;	// Analog PC1 = ADC123_IN11
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <gyro_disable+0xb8>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a19      	ldr	r2, [pc, #100]	; (8001598 <gyro_disable+0xb8>)
 8001532:	f043 030c 	orr.w	r3, r3, #12
 8001536:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8001538:	2300      	movs	r3, #0
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <gyro_disable+0xb4>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a14      	ldr	r2, [pc, #80]	; (8001594 <gyro_disable+0xb4>)
 8001542:	f043 0320 	orr.w	r3, r3, #32
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <gyro_disable+0xb4>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8_Msk;	// Reset speed of PF8
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <gyro_disable+0xbc>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	4a10      	ldr	r2, [pc, #64]	; (800159c <gyro_disable+0xbc>)
 800155a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800155e:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8_Msk;	// Reset alternate function of PF8
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <gyro_disable+0xbc>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <gyro_disable+0xbc>)
 8001566:	f023 030f 	bic.w	r3, r3, #15
 800156a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8_Msk;	// Reset pulup/down of PF8
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <gyro_disable+0xbc>)
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <gyro_disable+0xbc>)
 8001572:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001576:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8001578:	200a      	movs	r0, #10
 800157a:	f002 febb 	bl	80042f4 <HAL_Delay>
	GPIOF->MODER |= 3UL << GPIO_MODER_MODER8_Pos; // Analog mode PF8 = ADC3_IN4
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <gyro_disable+0xbc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a06      	ldr	r2, [pc, #24]	; (800159c <gyro_disable+0xbc>)
 8001584:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001588:	6013      	str	r3, [r2, #0]
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40020800 	.word	0x40020800
 800159c:	40021400 	.word	0x40021400

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	; (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db12      	blt.n	8001614 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	490a      	ldr	r1, [pc, #40]	; (8001620 <__NVIC_DisableIRQ+0x44>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	3320      	adds	r3, #32
 8001604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001608:	f3bf 8f4f 	dsb	sy
}
 800160c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800160e:	f3bf 8f6f 	isb	sy
}
 8001612:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001632:	2b00      	cmp	r3, #0
 8001634:	db0c      	blt.n	8001650 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	f003 021f 	and.w	r2, r3, #31
 800163c:	4907      	ldr	r1, [pc, #28]	; (800165c <__NVIC_ClearPendingIRQ+0x38>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2001      	movs	r0, #1
 8001646:	fa00 f202 	lsl.w	r2, r0, r2
 800164a:	3360      	adds	r3, #96	; 0x60
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000e100 	.word	0xe000e100

08001660 <roundToAccuracy>:

/******************************************************************************
 * Functions
 *****************************************************************************/

float32_t roundToAccuracy(float32_t num) {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	ed87 0a01 	vstr	s0, [r7, #4]
    return roundf(num / 0.3f) * 0.3f;
 800166a:	edd7 7a01 	vldr	s15, [r7, #4]
 800166e:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001694 <roundToAccuracy+0x34>
 8001672:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001676:	eeb0 0a47 	vmov.f32	s0, s14
 800167a:	f00a fe49 	bl	800c310 <roundf>
 800167e:	eef0 7a40 	vmov.f32	s15, s0
 8001682:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8001694 <roundToAccuracy+0x34>
 8001686:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	3e99999a 	.word	0x3e99999a

08001698 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <MEAS_GPIO_analog_init+0x8c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a1f      	ldr	r2, [pc, #124]	; (8001724 <MEAS_GPIO_analog_init+0x8c>)
 80016a8:	f043 0320 	orr.w	r3, r3, #32
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MEAS_GPIO_analog_init+0x8c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0320 	and.w	r3, r3, #32
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
	GPIOF->MODER |= (3UL << GPIO_MODER_MODER6_Pos);	// Analog PF6 = ADC3_IN4
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <MEAS_GPIO_analog_init+0x90>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a1a      	ldr	r2, [pc, #104]	; (8001728 <MEAS_GPIO_analog_init+0x90>)
 80016c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80016c4:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MEAS_GPIO_analog_init+0x8c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a15      	ldr	r2, [pc, #84]	; (8001724 <MEAS_GPIO_analog_init+0x8c>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <MEAS_GPIO_analog_init+0x8c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
	GPIOC->MODER |= (3UL << GPIO_MODER_MODER3_Pos);	// Analog PC3 = ADC123_IN13
 80016e2:	4b12      	ldr	r3, [pc, #72]	; (800172c <MEAS_GPIO_analog_init+0x94>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a11      	ldr	r2, [pc, #68]	; (800172c <MEAS_GPIO_analog_init+0x94>)
 80016e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016ec:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 80016ee:	2300      	movs	r3, #0
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MEAS_GPIO_analog_init+0x8c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <MEAS_GPIO_analog_init+0x8c>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MEAS_GPIO_analog_init+0x8c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (3UL << GPIO_MODER_MODER5_Pos);	// Analog PA5 ADC12_IN5
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MEAS_GPIO_analog_init+0x98>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a08      	ldr	r2, [pc, #32]	; (8001730 <MEAS_GPIO_analog_init+0x98>)
 8001710:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40021400 	.word	0x40021400
 800172c:	40020800 	.word	0x40020800
 8001730:	40020000 	.word	0x40020000

08001734 <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 8001738:	4b08      	ldr	r3, [pc, #32]	; (800175c <DAC_reset+0x28>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a07      	ldr	r2, [pc, #28]	; (800175c <DAC_reset+0x28>)
 800173e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001742:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <DAC_reset+0x28>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a04      	ldr	r2, [pc, #16]	; (800175c <DAC_reset+0x28>)
 800174a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800174e:	6213      	str	r3, [r2, #32]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <DAC_init+0x3c>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	4a0b      	ldr	r2, [pc, #44]	; (800179c <DAC_init+0x3c>)
 8001770:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001774:	6413      	str	r3, [r2, #64]	; 0x40
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <DAC_init+0x3c>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <DAC_init+0x40>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <DAC_init+0x40>)
 8001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178c:	6013      	str	r3, [r2, #0]
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007400 	.word	0x40007400

080017a4 <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <DAC_increment+0x30>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	3314      	adds	r3, #20
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <DAC_increment+0x30>)
 80017b0:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <DAC_increment+0x30>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ba:	d302      	bcc.n	80017c2 <DAC_increment+0x1e>
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <DAC_increment+0x30>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <DAC_increment+0x34>)
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <DAC_increment+0x30>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6153      	str	r3, [r2, #20]
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	200006d4 	.word	0x200006d4
 80017d8:	40007400 	.word	0x40007400

080017dc <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <ADC_reset+0x38>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <ADC_reset+0x38>)
 80017e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ea:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <ADC_reset+0x38>)
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	4a08      	ldr	r2, [pc, #32]	; (8001814 <ADC_reset+0x38>)
 80017f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f6:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 80017f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001802:	f023 0301 	bic.w	r3, r3, #1
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800

08001818 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 800181e:	2300      	movs	r3, #0
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	4b17      	ldr	r3, [pc, #92]	; (8001880 <MEAS_timer_init+0x68>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a16      	ldr	r2, [pc, #88]	; (8001880 <MEAS_timer_init+0x68>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b14      	ldr	r3, [pc, #80]	; (8001880 <MEAS_timer_init+0x68>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	607b      	str	r3, [r7, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 800183a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800183e:	2237      	movs	r2, #55	; 0x37
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 8001842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001846:	2231      	movs	r2, #49	; 0x31
 8001848:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 800184a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001854:	f043 0320 	orr.w	r3, r3, #32
 8001858:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 800185a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 800186a:	201c      	movs	r0, #28
 800186c:	f7ff feda 	bl	8001624 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 8001870:	201c      	movs	r0, #28
 8001872:	f7ff fe95 	bl	80015a0 <__NVIC_EnableIRQ>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40023800 	.word	0x40023800

08001884 <ADC1_IN13_ADC2_IN11_dual_init>:
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The input used with ADC1 is ADC123_IN13 = GPIO PC3
 * @n The input used with ADC2 is ADC12_IN11 = GPIO PC1
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_init(void)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
	MEAS_input_count = 2;				// Only 1 input is converted
 800188a:	4b4a      	ldr	r3, [pc, #296]	; (80019b4 <ADC1_IN13_ADC2_IN11_dual_init+0x130>)
 800188c:	2202      	movs	r2, #2
 800188e:	601a      	str	r2, [r3, #0]
	__HAL_RCC_ADC1_CLK_ENABLE();		// Enable Clock for ADC1
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	4b48      	ldr	r3, [pc, #288]	; (80019b8 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001896:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001898:	4a47      	ldr	r2, [pc, #284]	; (80019b8 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6453      	str	r3, [r2, #68]	; 0x44
 80018a0:	4b45      	ldr	r3, [pc, #276]	; (80019b8 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80018a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_ADC2_CLK_ENABLE();		// Enable Clock for ADC2
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	4b41      	ldr	r3, [pc, #260]	; (80019b8 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80018b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b4:	4a40      	ldr	r2, [pc, #256]	; (80019b8 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80018b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ba:	6453      	str	r3, [r2, #68]	; 0x44
 80018bc:	4b3e      	ldr	r3, [pc, #248]	; (80019b8 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]
	ADC->CCR |= ADC_CCR_DMA_1;			// Enable DMA mode 2 = dual DMA
 80018c8:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a3b      	ldr	r2, [pc, #236]	; (80019bc <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 80018ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018d2:	6053      	str	r3, [r2, #4]
	ADC->CCR |= ADC_CCR_MULTI_1 | ADC_CCR_MULTI_2; // ADC1 and ADC2
 80018d4:	4b39      	ldr	r3, [pc, #228]	; (80019bc <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a38      	ldr	r2, [pc, #224]	; (80019bc <ADC1_IN13_ADC2_IN11_dual_init+0x138>)
 80018da:	f043 0306 	orr.w	r3, r3, #6
 80018de:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 80018e0:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	4a36      	ldr	r2, [pc, #216]	; (80019c0 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 80018e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ea:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 80018ec:	4b34      	ldr	r3, [pc, #208]	; (80019c0 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	4a33      	ldr	r2, [pc, #204]	; (80019c0 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 80018f2:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80018f6:	6093      	str	r3, [r2, #8]
	ADC1->SQR3 |= (13UL << ADC_SQR3_SQ1_Pos);	// Input 13 = first conversion
 80018f8:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 80018fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fc:	4a30      	ldr	r2, [pc, #192]	; (80019c0 <ADC1_IN13_ADC2_IN11_dual_init+0x13c>)
 80018fe:	f043 030d 	orr.w	r3, r3, #13
 8001902:	6353      	str	r3, [r2, #52]	; 0x34
	ADC2->SQR3 |= (11UL << ADC_SQR3_SQ1_Pos);	// Input 11 = first conversion
 8001904:	4b2f      	ldr	r3, [pc, #188]	; (80019c4 <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 8001906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001908:	4a2e      	ldr	r2, [pc, #184]	; (80019c4 <ADC1_IN13_ADC2_IN11_dual_init+0x140>)
 800190a:	f043 030b 	orr.w	r3, r3, #11
 800190e:	6353      	str	r3, [r2, #52]	; 0x34
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a27      	ldr	r2, [pc, #156]	; (80019b8 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 800191a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <ADC1_IN13_ADC2_IN11_dual_init+0x134>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
	DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 4
 800192c:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a25      	ldr	r2, [pc, #148]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001938:	bf00      	nop
 800193a:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f9      	bne.n	800193a <ADC1_IN13_ADC2_IN11_dual_init+0xb6>
	DMA2->HIFCR |= DMA_HIFCR_CTCIF4;	// Clear transfer complete interrupt fl.
 8001946:	4b21      	ldr	r3, [pc, #132]	; (80019cc <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	4a20      	ldr	r2, [pc, #128]	; (80019cc <ADC1_IN13_ADC2_IN11_dual_init+0x148>)
 800194c:	f043 0320 	orr.w	r3, r3, #32
 8001950:	60d3      	str	r3, [r2, #12]
	DMA2_Stream4->CR |= (0UL << DMA_SxCR_CHSEL_Pos);	// Select channel 0
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001954:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PL_1;		// Priority high
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001960:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001964:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 8001966:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a17      	ldr	r2, [pc, #92]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001970:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a14      	ldr	r2, [pc, #80]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001978:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800197c:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 800197e:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a11      	ldr	r2, [pc, #68]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001984:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001988:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a0e      	ldr	r2, [pc, #56]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001990:	f043 0310 	orr.w	r3, r3, #16
 8001994:	6013      	str	r3, [r2, #0]
	DMA2_Stream4->NDTR = ADC_NUMS;		// Number of data items to transfer
 8001996:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 8001998:	2240      	movs	r2, #64	; 0x40
 800199a:	605a      	str	r2, [r3, #4]
	DMA2_Stream4->PAR = (uint32_t)&ADC->CDR;	// Peripheral register address
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 800199e:	4a0c      	ldr	r2, [pc, #48]	; (80019d0 <ADC1_IN13_ADC2_IN11_dual_init+0x14c>)
 80019a0:	609a      	str	r2, [r3, #8]
	DMA2_Stream4->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <ADC1_IN13_ADC2_IN11_dual_init+0x144>)
 80019a4:	4a0b      	ldr	r2, [pc, #44]	; (80019d4 <ADC1_IN13_ADC2_IN11_dual_init+0x150>)
 80019a6:	60da      	str	r2, [r3, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	20000200 	.word	0x20000200
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40012300 	.word	0x40012300
 80019c0:	40012000 	.word	0x40012000
 80019c4:	40012100 	.word	0x40012100
 80019c8:	40026470 	.word	0x40026470
 80019cc:	40026400 	.word	0x40026400
 80019d0:	40012308 	.word	0x40012308
 80019d4:	200005d4 	.word	0x200005d4

080019d8 <ADC1_IN13_ADC2_IN11_dual_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC1_IN13_ADC2_IN11_dual_start(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	DMA2_Stream4->CR |= DMA_SxCR_EN;	// Enable DMA
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <ADC1_IN13_ADC2_IN11_dual_start+0x48>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <ADC1_IN13_ADC2_IN11_dual_start+0x48>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);	// Clear pending DMA interrupt
 80019e8:	203c      	movs	r0, #60	; 0x3c
 80019ea:	f7ff fe1b 	bl	8001624 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream4_IRQn);	// Enable DMA interrupt in the NVIC
 80019ee:	203c      	movs	r0, #60	; 0x3c
 80019f0:	f7ff fdd6 	bl	80015a0 <__NVIC_EnableIRQ>
	ADC1->CR2 |= ADC_CR2_ADON;			// Enable ADC1
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <ADC1_IN13_ADC2_IN11_dual_start+0x4c>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <ADC1_IN13_ADC2_IN11_dual_start+0x4c>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6093      	str	r3, [r2, #8]
	ADC2->CR2 |= ADC_CR2_ADON;			// Enable ADC2
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <ADC1_IN13_ADC2_IN11_dual_start+0x50>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4a08      	ldr	r2, [pc, #32]	; (8001a28 <ADC1_IN13_ADC2_IN11_dual_start+0x50>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001a0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40026470 	.word	0x40026470
 8001a24:	40012000 	.word	0x40012000
 8001a28:	40012100 	.word	0x40012100

08001a2c <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <TIM2_IRQHandler+0x24>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <TIM2_IRQHandler+0x20>
		DAC_increment();
 8001a48:	f7ff feac 	bl	80017a4 <DAC_increment>
	}
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200005cd 	.word	0x200005cd

08001a54 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <ADC_IRQHandler+0x64>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d026      	beq.n	8001ab2 <ADC_IRQHandler+0x5e>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <ADC_IRQHandler+0x64>)
 8001a66:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001a68:	4b14      	ldr	r3, [pc, #80]	; (8001abc <ADC_IRQHandler+0x68>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	4913      	ldr	r1, [pc, #76]	; (8001abc <ADC_IRQHandler+0x68>)
 8001a70:	600a      	str	r2, [r1, #0]
 8001a72:	ee07 0a90 	vmov	s15, r0
 8001a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a7a:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <ADC_IRQHandler+0x6c>)
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	edc3 7a00 	vstr	s15, [r3]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 8001a84:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <ADC_IRQHandler+0x68>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b3f      	cmp	r3, #63	; 0x3f
 8001a8a:	d912      	bls.n	8001ab2 <ADC_IRQHandler+0x5e>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 8001a8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <ADC_IRQHandler+0x64>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <ADC_IRQHandler+0x64>)
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	6093      	str	r3, [r2, #8]
			ADC_reset();
 8001aa8:	f7ff fe98 	bl	80017dc <ADC_reset>
			MEAS_data_ready = true;
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <ADC_IRQHandler+0x70>)
 8001aae:	2201      	movs	r2, #1
 8001ab0:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40012200 	.word	0x40012200
 8001abc:	200005d0 	.word	0x200005d0
 8001ac0:	200005d4 	.word	0x200005d4
 8001ac4:	200005cc 	.word	0x200005cc

08001ac8 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8001ace:	4b37      	ldr	r3, [pc, #220]	; (8001bac <DMA2_Stream4_IRQHandler+0xe4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <DMA2_Stream4_IRQHandler+0xda>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8001ada:	203c      	movs	r0, #60	; 0x3c
 8001adc:	f7ff fd7e 	bl	80015dc <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8001ae0:	203c      	movs	r0, #60	; 0x3c
 8001ae2:	f7ff fd9f 	bl	8001624 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 8001ae6:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <DMA2_Stream4_IRQHandler+0xe8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <DMA2_Stream4_IRQHandler+0xe8>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001af2:	bf00      	nop
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <DMA2_Stream4_IRQHandler+0xe8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f9      	bne.n	8001af4 <DMA2_Stream4_IRQHandler+0x2c>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <DMA2_Stream4_IRQHandler+0xe4>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	4a29      	ldr	r2, [pc, #164]	; (8001bac <DMA2_Stream4_IRQHandler+0xe4>)
 8001b06:	f043 0320 	orr.w	r3, r3, #32
 8001b0a:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001b0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8001b1c:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <DMA2_Stream4_IRQHandler+0xec>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <DMA2_Stream4_IRQHandler+0xec>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 8001b28:	4b23      	ldr	r3, [pc, #140]	; (8001bb8 <DMA2_Stream4_IRQHandler+0xf0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <DMA2_Stream4_IRQHandler+0xf0>)
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <DMA2_Stream4_IRQHandler+0xf4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <DMA2_Stream4_IRQHandler+0xf4>)
 8001b3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b3e:	6053      	str	r3, [r2, #4]
		/* Extract combined samples */
		for (int32_t i = ADC_NUMS-1; i >= 0; i--) {
 8001b40:	233f      	movs	r3, #63	; 0x3f
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	e025      	b.n	8001b92 <DMA2_Stream4_IRQHandler+0xca>
		    ADC_samples[2*i+1] = (*(int32_t*)&ADC_samples[i] >> 16);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4a1d      	ldr	r2, [pc, #116]	; (8001bc0 <DMA2_Stream4_IRQHandler+0xf8>)
 8001b4c:	4413      	add	r3, r2
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	141a      	asrs	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	3301      	adds	r3, #1
 8001b58:	ee07 2a90 	vmov	s15, r2
 8001b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b60:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <DMA2_Stream4_IRQHandler+0xf8>)
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	4413      	add	r3, r2
 8001b66:	edc3 7a00 	vstr	s15, [r3]
		    ADC_samples[2*i]   = (*(int32_t*)&ADC_samples[i] & 0xffff);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4a14      	ldr	r2, [pc, #80]	; (8001bc0 <DMA2_Stream4_IRQHandler+0xf8>)
 8001b70:	4413      	add	r3, r2
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	ee07 2a90 	vmov	s15, r2
 8001b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b82:	4a0f      	ldr	r2, [pc, #60]	; (8001bc0 <DMA2_Stream4_IRQHandler+0xf8>)
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	4413      	add	r3, r2
 8001b88:	edc3 7a00 	vstr	s15, [r3]
		for (int32_t i = ADC_NUMS-1; i >= 0; i--) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	dad6      	bge.n	8001b46 <DMA2_Stream4_IRQHandler+0x7e>
		}
		ADC_reset();
 8001b98:	f7ff fe20 	bl	80017dc <ADC_reset>
		MEAS_data_ready = true;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <DMA2_Stream4_IRQHandler+0xfc>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
	}
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40026400 	.word	0x40026400
 8001bb0:	40026470 	.word	0x40026470
 8001bb4:	40012000 	.word	0x40012000
 8001bb8:	40012100 	.word	0x40012100
 8001bbc:	40012300 	.word	0x40012300
 8001bc0:	200005d4 	.word	0x200005d4
 8001bc4:	200005cc 	.word	0x200005cc

08001bc8 <MEAS_show_data>:
 * of signals and results.
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b094      	sub	sp, #80	; 0x50
 8001bcc:	af02      	add	r7, sp, #8

	float32_t v = velocity;
 8001bce:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <MEAS_show_data+0xb0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	643b      	str	r3, [r7, #64]	; 0x40
	const uint32_t Y_OFFSET = 260;
 8001bd4:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
	const uint32_t X_SIZE = 240;
 8001bda:	23f0      	movs	r3, #240	; 0xf0
 8001bdc:	63bb      	str	r3, [r7, #56]	; 0x38
//	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
//	uint32_t data;
//	uint32_t data_last;

	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001bde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001be2:	f001 fc2f 	bl	8003444 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 8001be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be8:	b29a      	uxth	r2, r3
 8001bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f001 fd9b 	bl	8003730 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font16);
 8001bfa:	4820      	ldr	r0, [pc, #128]	; (8001c7c <MEAS_show_data+0xb4>)
 8001bfc:	f001 fc54 	bl	80034a8 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c04:	f001 fc36 	bl	8003474 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001c08:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001c0c:	f001 fc1a 	bl	8003444 <BSP_LCD_SetTextColor>
	char text[50];
	snprintf(text, 50, "velocity: %.1f km/h", v);
 8001c10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c12:	f7fe fd09 	bl	8000628 <__aeabi_f2d>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	1d38      	adds	r0, r7, #4
 8001c1c:	e9cd 2300 	strd	r2, r3, [sp]
 8001c20:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <MEAS_show_data+0xb8>)
 8001c22:	2132      	movs	r1, #50	; 0x32
 8001c24:	f008 f8e6 	bl	8009df4 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *)text, CENTER_MODE);
 8001c28:	1d3a      	adds	r2, r7, #4
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	2132      	movs	r1, #50	; 0x32
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f001 fcc0 	bl	80035b4 <BSP_LCD_DisplayStringAt>
//			BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
//		}
//	}

	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 8001c34:	2300      	movs	r3, #0
 8001c36:	647b      	str	r3, [r7, #68]	; 0x44
 8001c38:	e013      	b.n	8001c62 <MEAS_show_data+0x9a>
		ADC_samples[2*i] = 0;
 8001c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <MEAS_show_data+0xbc>)
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
		ADC_samples[2*i+1] = 0;
 8001c4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	3301      	adds	r3, #1
 8001c50:	4a0c      	ldr	r2, [pc, #48]	; (8001c84 <MEAS_show_data+0xbc>)
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 8001c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c5e:	3301      	adds	r3, #1
 8001c60:	647b      	str	r3, [r7, #68]	; 0x44
 8001c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c64:	2b3f      	cmp	r3, #63	; 0x3f
 8001c66:	d9e8      	bls.n	8001c3a <MEAS_show_data+0x72>
	}
	ADC_sample_count = 0;
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <MEAS_show_data+0xc0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	3748      	adds	r7, #72	; 0x48
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200004c8 	.word	0x200004c8
 8001c7c:	200002b0 	.word	0x200002b0
 8001c80:	0800c460 	.word	0x0800c460
 8001c84:	200005d4 	.word	0x200005d4
 8001c88:	200005d0 	.word	0x200005d0

08001c8c <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8001c92:	4841      	ldr	r0, [pc, #260]	; (8001d98 <MENU_draw+0x10c>)
 8001c94:	f001 fc08 	bl	80034a8 <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8001c98:	f001 fb54 	bl	8003344 <BSP_LCD_GetYSize>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	3b28      	subs	r3, #40	; 0x28
 8001ca0:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8001ca6:	f001 fb41 	bl	800332c <BSP_LCD_GetXSize>
 8001caa:	60b8      	str	r0, [r7, #8]
	h = MENU_HEIGHT;
 8001cac:	2328      	movs	r3, #40	; 0x28
 8001cae:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	e068      	b.n	8001d88 <MENU_draw+0xfc>
		x = i*w;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	fb02 f303 	mul.w	r3, r2, r3
 8001cbe:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8001cc0:	4936      	ldr	r1, [pc, #216]	; (8001d9c <MENU_draw+0x110>)
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	440b      	add	r3, r1
 8001cce:	3324      	adds	r3, #36	; 0x24
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f001 fbb6 	bl	8003444 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	4413      	add	r3, r2
 8001ce2:	b298      	uxth	r0, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	b299      	uxth	r1, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	b29c      	uxth	r4, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	b29b      	uxth	r3, r3
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4622      	mov	r2, r4
 8001d12:	f001 fd0d 	bl	8003730 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 8001d16:	4921      	ldr	r1, [pc, #132]	; (8001d9c <MENU_draw+0x110>)
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	440b      	add	r3, r1
 8001d24:	3324      	adds	r3, #36	; 0x24
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 fba3 	bl	8003474 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8001d2e:	491b      	ldr	r1, [pc, #108]	; (8001d9c <MENU_draw+0x110>)
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3320      	adds	r3, #32
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f001 fb7f 	bl	8003444 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,(uint8_t *)MENU_entry[i].line1, CENTER_MODE);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	0052      	lsls	r2, r2, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	b298      	uxth	r0, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	0052      	lsls	r2, r2, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b299      	uxth	r1, r3
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <MENU_draw+0x110>)
 8001d7a:	441a      	add	r2, r3
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f001 fc19 	bl	80035b4 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3301      	adds	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d093      	beq.n	8001cb6 <MENU_draw+0x2a>
//		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
	}
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd90      	pop	{r4, r7, pc}
 8001d98:	200002b8 	.word	0x200002b8
 8001d9c:	20000208 	.word	0x20000208

08001da0 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da8:	f001 fb64 	bl	8003474 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001dac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001db0:	f001 fb48 	bl	8003444 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8001db4:	480c      	ldr	r0, [pc, #48]	; (8001de8 <MENU_hint+0x48>)
 8001db6:	f001 fb77 	bl	80034a8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"Doppler Radar", CENTER_MODE);
 8001dba:	2301      	movs	r3, #1
 8001dbc:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <MENU_hint+0x4c>)
 8001dbe:	210a      	movs	r1, #10
 8001dc0:	2005      	movs	r0, #5
 8001dc2:	f001 fbf7 	bl	80035b4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001dc6:	480a      	ldr	r0, [pc, #40]	; (8001df0 <MENU_hint+0x50>)
 8001dc8:	f001 fb6e 	bl	80034a8 <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Press \"start\" button", LEFT_MODE);
 8001dcc:	2303      	movs	r3, #3
 8001dce:	4a09      	ldr	r2, [pc, #36]	; (8001df4 <MENU_hint+0x54>)
 8001dd0:	213c      	movs	r1, #60	; 0x3c
 8001dd2:	2005      	movs	r0, #5
 8001dd4:	f001 fbee 	bl	80035b4 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start measurement", LEFT_MODE);
 8001dd8:	2303      	movs	r3, #3
 8001dda:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <MENU_hint+0x58>)
 8001ddc:	2150      	movs	r1, #80	; 0x50
 8001dde:	2005      	movs	r0, #5
 8001de0:	f001 fbe8 	bl	80035b4 <BSP_LCD_DisplayStringAt>
//	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
//	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
//	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
//	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200002a8 	.word	0x200002a8
 8001dec:	0800c474 	.word	0x0800c474
 8001df0:	200002b0 	.word	0x200002b0
 8001df4:	0800c484 	.word	0x0800c484
 8001df8:	0800c49c 	.word	0x0800c49c

08001dfc <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <MENU_get_transition+0x20>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <MENU_get_transition+0x20>)
 8001e0a:	2206      	movs	r2, #6
 8001e0c:	701a      	strb	r2, [r3, #0]
	return item;
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20000204 	.word	0x20000204

08001e20 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8001e20:	b598      	push	{r3, r4, r7, lr}
 8001e22:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8001e24:	482e      	ldr	r0, [pc, #184]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e26:	f002 f92d 	bl	8004084 <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001e2a:	f001 fa8b 	bl	8003344 <BSP_LCD_GetYSize>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e34:	889b      	ldrh	r3, [r3, #4]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e3c:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 8001e3e:	f001 fa75 	bl	800332c <BSP_LCD_GetXSize>
 8001e42:	4603      	mov	r3, r0
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e48:	885b      	ldrh	r3, [r3, #2]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e50:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001e52:	f001 fa77 	bl	8003344 <BSP_LCD_GetYSize>
 8001e56:	4603      	mov	r3, r0
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	4b21      	ldr	r3, [pc, #132]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e5c:	889b      	ldrh	r3, [r3, #4]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e64:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d035      	beq.n	8001eda <MENU_check_transition+0xba>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <MENU_check_transition+0xc4>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d131      	bne.n	8001eda <MENU_check_transition+0xba>
			item_old = item_new;		// Store old item
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <MENU_check_transition+0xc8>)
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <MENU_check_transition+0xcc>)
 8001e7c:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8001e7e:	f001 fa61 	bl	8003344 <BSP_LCD_GetYSize>
 8001e82:	4603      	mov	r3, r0
 8001e84:	3b28      	subs	r3, #40	; 0x28
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e88:	8892      	ldrh	r2, [r2, #4]
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d225      	bcs.n	8001eda <MENU_check_transition+0xba>
 8001e8e:	f001 fa59 	bl	8003344 <BSP_LCD_GetYSize>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e96:	8892      	ldrh	r2, [r2, #4]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d91e      	bls.n	8001eda <MENU_check_transition+0xba>
				item_new = TS_State.X	// Calculate new item
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MENU_check_transition+0xc0>)
 8001e9e:	885b      	ldrh	r3, [r3, #2]
 8001ea0:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8001ea2:	f001 fa43 	bl	800332c <BSP_LCD_GetXSize>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	fbb4 f3f3 	udiv	r3, r4, r3
 8001eac:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MENU_check_transition+0xc8>)
 8001eb0:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8001eb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ee8 <MENU_check_transition+0xc8>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <MENU_check_transition+0xa0>
					item_new = MENU_NONE;	// Out of bounds
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MENU_check_transition+0xc8>)
 8001ebc:	2206      	movs	r2, #6
 8001ebe:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MENU_check_transition+0xc8>)
 8001ec2:	781a      	ldrb	r2, [r3, #0]
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MENU_check_transition+0xcc>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d106      	bne.n	8001eda <MENU_check_transition+0xba>
					item_new = MENU_NONE;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MENU_check_transition+0xc8>)
 8001ece:	2206      	movs	r2, #6
 8001ed0:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8001ed2:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MENU_check_transition+0xcc>)
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <MENU_check_transition+0xc4>)
 8001ed8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8001eda:	bf00      	nop
 8001edc:	bd98      	pop	{r3, r4, r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200006d8 	.word	0x200006d8
 8001ee4:	20000204 	.word	0x20000204
 8001ee8:	20000230 	.word	0x20000230
 8001eec:	20000231 	.word	0x20000231

08001ef0 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <EXTI15_10_IRQHandler+0x40>)
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d014      	beq.n	8001f2a <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <EXTI15_10_IRQHandler+0x40>)
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <EXTI15_10_IRQHandler+0x40>)
 8001f06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f0a:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8001f0c:	f002 f8ae 	bl	800406c <BSP_TS_ITGetStatus>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8001f16:	f002 f967 	bl	80041e8 <BSP_TS_ITClear>
			MENU_check_transition();
 8001f1a:	f7ff ff81 	bl	8001e20 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <EXTI15_10_IRQHandler+0x40>)
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	4a03      	ldr	r2, [pc, #12]	; (8001f30 <EXTI15_10_IRQHandler+0x40>)
 8001f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f28:	6153      	str	r3, [r2, #20]
	}
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <__NVIC_EnableIRQ>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_ClearPendingIRQ>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	db0c      	blt.n	8001f9c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	f003 021f 	and.w	r2, r3, #31
 8001f88:	4907      	ldr	r1, [pc, #28]	; (8001fa8 <__NVIC_ClearPendingIRQ+0x38>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	095b      	lsrs	r3, r3, #5
 8001f90:	2001      	movs	r0, #1
 8001f92:	fa00 f202 	lsl.w	r2, r0, r2
 8001f96:	3360      	adds	r3, #96	; 0x60
 8001f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b0b      	ldr	r3, [pc, #44]	; (8001fe4 <PB_init+0x38>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a0a      	ldr	r2, [pc, #40]	; (8001fe4 <PB_init+0x38>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <PB_init+0x38>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <PB_init+0x3c>)
 8001fd0:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <PB_init+0x3c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6013      	str	r3, [r2, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000

08001fec <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	4b13      	ldr	r3, [pc, #76]	; (8002044 <PB_enableIRQ+0x58>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <PB_enableIRQ+0x58>)
 8001ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b10      	ldr	r3, [pc, #64]	; (8002044 <PB_enableIRQ+0x58>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <PB_enableIRQ+0x5c>)
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <PB_enableIRQ+0x5c>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <PB_enableIRQ+0x60>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <PB_enableIRQ+0x60>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <PB_enableIRQ+0x60>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <PB_enableIRQ+0x60>)
 8002028:	f043 0301 	orr.w	r3, r3, #1
 800202c:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 800202e:	2006      	movs	r0, #6
 8002030:	f7ff ff9e 	bl	8001f70 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8002034:	2006      	movs	r0, #6
 8002036:	f7ff ff7d 	bl	8001f34 <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40023800 	.word	0x40023800
 8002048:	40013800 	.word	0x40013800
 800204c:	40013c00 	.word	0x40013c00

08002050 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <PB_pressed+0x20>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 800205c:	4b04      	ldr	r3, [pc, #16]	; (8002070 <PB_pressed+0x20>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
	return pressed;
 8002062:	79fb      	ldrb	r3, [r7, #7]
}
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	200006e0 	.word	0x200006e0

08002074 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <EXTI0_IRQHandler+0x2c>)
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <EXTI0_IRQHandler+0x2c>)
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	4a05      	ldr	r2, [pc, #20]	; (80020a0 <EXTI0_IRQHandler+0x2c>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <EXTI0_IRQHandler+0x30>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
	}
}
 8002096:	bf00      	nop
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40013c00 	.word	0x40013c00
 80020a4:	200006e0 	.word	0x200006e0

080020a8 <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 80020ba:	e7fe      	b.n	80020ba <HardFault_Handler+0x4>

080020bc <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 80020c0:	e7fe      	b.n	80020c0 <MemManage_Handler+0x4>

080020c2 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 80020c6:	e7fe      	b.n	80020c6 <BusFault_Handler+0x4>

080020c8 <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 80020cc:	e7fe      	b.n	80020cc <UsageFault_Handler+0x4>

080020ce <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80020fc:	f002 f8da 	bl	80042b4 <HAL_IncTick>
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}

08002104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <SystemInit+0x60>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	4a15      	ldr	r2, [pc, #84]	; (8002164 <SystemInit+0x60>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <SystemInit+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <SystemInit+0x64>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002124:	4b10      	ldr	r3, [pc, #64]	; (8002168 <SystemInit+0x64>)
 8002126:	2200      	movs	r2, #0
 8002128:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <SystemInit+0x64>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <SystemInit+0x64>)
 8002130:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002138:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <SystemInit+0x64>)
 800213c:	4a0b      	ldr	r2, [pc, #44]	; (800216c <SystemInit+0x68>)
 800213e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <SystemInit+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a08      	ldr	r2, [pc, #32]	; (8002168 <SystemInit+0x64>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <SystemInit+0x64>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <SystemInit+0x60>)
 8002154:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002158:	609a      	str	r2, [r3, #8]
#endif
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000ed00 	.word	0xe000ed00
 8002168:	40023800 	.word	0x40023800
 800216c:	24003010 	.word	0x24003010

08002170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021a8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002174:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002176:	e003      	b.n	8002180 <LoopCopyDataInit>

08002178 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800217a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800217c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800217e:	3104      	adds	r1, #4

08002180 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002184:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002186:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002188:	d3f6      	bcc.n	8002178 <CopyDataInit>
  ldr  r2, =_sbss
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800218c:	e002      	b.n	8002194 <LoopFillZerobss>

0800218e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800218e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002190:	f842 3b04 	str.w	r3, [r2], #4

08002194 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002196:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002198:	d3f9      	bcc.n	800218e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800219a:	f7ff ffb3 	bl	8002104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219e:	f007 f993 	bl	80094c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021a2:	f7ff f815 	bl	80011d0 <main>
  bx  lr    
 80021a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021a8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80021ac:	080248b4 	.word	0x080248b4
  ldr  r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021b4:	2000049c 	.word	0x2000049c
  ldr  r2, =_sbss
 80021b8:	2000049c 	.word	0x2000049c
  ldr  r3, = _ebss
 80021bc:	200009bc 	.word	0x200009bc

080021c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <CAN1_RX0_IRQHandler>

080021c2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80021c6:	f000 feed 	bl	8002fa4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80021ca:	20ca      	movs	r0, #202	; 0xca
 80021cc:	f000 f95d 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80021d0:	20c3      	movs	r0, #195	; 0xc3
 80021d2:	f000 f967 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80021d6:	2008      	movs	r0, #8
 80021d8:	f000 f964 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80021dc:	2050      	movs	r0, #80	; 0x50
 80021de:	f000 f961 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80021e2:	20cf      	movs	r0, #207	; 0xcf
 80021e4:	f000 f951 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80021e8:	2000      	movs	r0, #0
 80021ea:	f000 f95b 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80021ee:	20c1      	movs	r0, #193	; 0xc1
 80021f0:	f000 f958 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80021f4:	2030      	movs	r0, #48	; 0x30
 80021f6:	f000 f955 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80021fa:	20ed      	movs	r0, #237	; 0xed
 80021fc:	f000 f945 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8002200:	2064      	movs	r0, #100	; 0x64
 8002202:	f000 f94f 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8002206:	2003      	movs	r0, #3
 8002208:	f000 f94c 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800220c:	2012      	movs	r0, #18
 800220e:	f000 f949 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8002212:	2081      	movs	r0, #129	; 0x81
 8002214:	f000 f946 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8002218:	20e8      	movs	r0, #232	; 0xe8
 800221a:	f000 f936 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800221e:	2085      	movs	r0, #133	; 0x85
 8002220:	f000 f940 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002224:	2000      	movs	r0, #0
 8002226:	f000 f93d 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800222a:	2078      	movs	r0, #120	; 0x78
 800222c:	f000 f93a 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002230:	20cb      	movs	r0, #203	; 0xcb
 8002232:	f000 f92a 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8002236:	2039      	movs	r0, #57	; 0x39
 8002238:	f000 f934 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800223c:	202c      	movs	r0, #44	; 0x2c
 800223e:	f000 f931 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002242:	2000      	movs	r0, #0
 8002244:	f000 f92e 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8002248:	2034      	movs	r0, #52	; 0x34
 800224a:	f000 f92b 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800224e:	2002      	movs	r0, #2
 8002250:	f000 f928 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002254:	20f7      	movs	r0, #247	; 0xf7
 8002256:	f000 f918 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800225a:	2020      	movs	r0, #32
 800225c:	f000 f922 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002260:	20ea      	movs	r0, #234	; 0xea
 8002262:	f000 f912 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f91c 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800226c:	2000      	movs	r0, #0
 800226e:	f000 f919 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002272:	20b1      	movs	r0, #177	; 0xb1
 8002274:	f000 f909 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002278:	2000      	movs	r0, #0
 800227a:	f000 f913 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800227e:	201b      	movs	r0, #27
 8002280:	f000 f910 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002284:	20b6      	movs	r0, #182	; 0xb6
 8002286:	f000 f900 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800228a:	200a      	movs	r0, #10
 800228c:	f000 f90a 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002290:	20a2      	movs	r0, #162	; 0xa2
 8002292:	f000 f907 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8002296:	20c0      	movs	r0, #192	; 0xc0
 8002298:	f000 f8f7 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800229c:	2010      	movs	r0, #16
 800229e:	f000 f901 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80022a2:	20c1      	movs	r0, #193	; 0xc1
 80022a4:	f000 f8f1 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80022a8:	2010      	movs	r0, #16
 80022aa:	f000 f8fb 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80022ae:	20c5      	movs	r0, #197	; 0xc5
 80022b0:	f000 f8eb 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80022b4:	2045      	movs	r0, #69	; 0x45
 80022b6:	f000 f8f5 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80022ba:	2015      	movs	r0, #21
 80022bc:	f000 f8f2 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80022c0:	20c7      	movs	r0, #199	; 0xc7
 80022c2:	f000 f8e2 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80022c6:	2090      	movs	r0, #144	; 0x90
 80022c8:	f000 f8ec 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80022cc:	2036      	movs	r0, #54	; 0x36
 80022ce:	f000 f8dc 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80022d2:	20c8      	movs	r0, #200	; 0xc8
 80022d4:	f000 f8e6 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80022d8:	20f2      	movs	r0, #242	; 0xf2
 80022da:	f000 f8d6 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80022de:	2000      	movs	r0, #0
 80022e0:	f000 f8e0 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80022e4:	20b0      	movs	r0, #176	; 0xb0
 80022e6:	f000 f8d0 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80022ea:	20c2      	movs	r0, #194	; 0xc2
 80022ec:	f000 f8da 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80022f0:	20b6      	movs	r0, #182	; 0xb6
 80022f2:	f000 f8ca 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80022f6:	200a      	movs	r0, #10
 80022f8:	f000 f8d4 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80022fc:	20a7      	movs	r0, #167	; 0xa7
 80022fe:	f000 f8d1 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002302:	2027      	movs	r0, #39	; 0x27
 8002304:	f000 f8ce 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002308:	2004      	movs	r0, #4
 800230a:	f000 f8cb 	bl	80024a4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800230e:	202a      	movs	r0, #42	; 0x2a
 8002310:	f000 f8bb 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002314:	2000      	movs	r0, #0
 8002316:	f000 f8c5 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800231a:	2000      	movs	r0, #0
 800231c:	f000 f8c2 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002320:	2000      	movs	r0, #0
 8002322:	f000 f8bf 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002326:	20ef      	movs	r0, #239	; 0xef
 8002328:	f000 f8bc 	bl	80024a4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800232c:	202b      	movs	r0, #43	; 0x2b
 800232e:	f000 f8ac 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002332:	2000      	movs	r0, #0
 8002334:	f000 f8b6 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002338:	2000      	movs	r0, #0
 800233a:	f000 f8b3 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800233e:	2001      	movs	r0, #1
 8002340:	f000 f8b0 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002344:	203f      	movs	r0, #63	; 0x3f
 8002346:	f000 f8ad 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800234a:	20f6      	movs	r0, #246	; 0xf6
 800234c:	f000 f89d 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002350:	2001      	movs	r0, #1
 8002352:	f000 f8a7 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002356:	2000      	movs	r0, #0
 8002358:	f000 f8a4 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800235c:	2006      	movs	r0, #6
 800235e:	f000 f8a1 	bl	80024a4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002362:	202c      	movs	r0, #44	; 0x2c
 8002364:	f000 f891 	bl	800248a <ili9341_WriteReg>
  LCD_Delay(200);
 8002368:	20c8      	movs	r0, #200	; 0xc8
 800236a:	f000 ff09 	bl	8003180 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800236e:	2026      	movs	r0, #38	; 0x26
 8002370:	f000 f88b 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002374:	2001      	movs	r0, #1
 8002376:	f000 f895 	bl	80024a4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800237a:	20e0      	movs	r0, #224	; 0xe0
 800237c:	f000 f885 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002380:	200f      	movs	r0, #15
 8002382:	f000 f88f 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8002386:	2029      	movs	r0, #41	; 0x29
 8002388:	f000 f88c 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 800238c:	2024      	movs	r0, #36	; 0x24
 800238e:	f000 f889 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002392:	200c      	movs	r0, #12
 8002394:	f000 f886 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8002398:	200e      	movs	r0, #14
 800239a:	f000 f883 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800239e:	2009      	movs	r0, #9
 80023a0:	f000 f880 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80023a4:	204e      	movs	r0, #78	; 0x4e
 80023a6:	f000 f87d 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80023aa:	2078      	movs	r0, #120	; 0x78
 80023ac:	f000 f87a 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80023b0:	203c      	movs	r0, #60	; 0x3c
 80023b2:	f000 f877 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80023b6:	2009      	movs	r0, #9
 80023b8:	f000 f874 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80023bc:	2013      	movs	r0, #19
 80023be:	f000 f871 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80023c2:	2005      	movs	r0, #5
 80023c4:	f000 f86e 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80023c8:	2017      	movs	r0, #23
 80023ca:	f000 f86b 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80023ce:	2011      	movs	r0, #17
 80023d0:	f000 f868 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f000 f865 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80023da:	20e1      	movs	r0, #225	; 0xe1
 80023dc:	f000 f855 	bl	800248a <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f000 f85f 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80023e6:	2016      	movs	r0, #22
 80023e8:	f000 f85c 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80023ec:	201b      	movs	r0, #27
 80023ee:	f000 f859 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80023f2:	2004      	movs	r0, #4
 80023f4:	f000 f856 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80023f8:	2011      	movs	r0, #17
 80023fa:	f000 f853 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80023fe:	2007      	movs	r0, #7
 8002400:	f000 f850 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002404:	2031      	movs	r0, #49	; 0x31
 8002406:	f000 f84d 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800240a:	2033      	movs	r0, #51	; 0x33
 800240c:	f000 f84a 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002410:	2042      	movs	r0, #66	; 0x42
 8002412:	f000 f847 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002416:	2005      	movs	r0, #5
 8002418:	f000 f844 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800241c:	200c      	movs	r0, #12
 800241e:	f000 f841 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002422:	200a      	movs	r0, #10
 8002424:	f000 f83e 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002428:	2028      	movs	r0, #40	; 0x28
 800242a:	f000 f83b 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800242e:	202f      	movs	r0, #47	; 0x2f
 8002430:	f000 f838 	bl	80024a4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002434:	200f      	movs	r0, #15
 8002436:	f000 f835 	bl	80024a4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800243a:	2011      	movs	r0, #17
 800243c:	f000 f825 	bl	800248a <ili9341_WriteReg>
  LCD_Delay(200);
 8002440:	20c8      	movs	r0, #200	; 0xc8
 8002442:	f000 fe9d 	bl	8003180 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002446:	2029      	movs	r0, #41	; 0x29
 8002448:	f000 f81f 	bl	800248a <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800244c:	202c      	movs	r0, #44	; 0x2c
 800244e:	f000 f81c 	bl	800248a <ili9341_WriteReg>
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}

08002456 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800245a:	f000 fda3 	bl	8002fa4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800245e:	2103      	movs	r1, #3
 8002460:	20d3      	movs	r0, #211	; 0xd3
 8002462:	f000 f82c 	bl	80024be <ili9341_ReadData>
 8002466:	4603      	mov	r3, r0
 8002468:	b29b      	uxth	r3, r3
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd80      	pop	{r7, pc}

0800246e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002472:	2029      	movs	r0, #41	; 0x29
 8002474:	f000 f809 	bl	800248a <ili9341_WriteReg>
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002480:	2028      	movs	r0, #40	; 0x28
 8002482:	f000 f802 	bl	800248a <ili9341_WriteReg>
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}

0800248a <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b082      	sub	sp, #8
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fe1e 	bl	80030d8 <LCD_IO_WriteReg>
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80024ae:	88fb      	ldrh	r3, [r7, #6]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fdef 	bl	8003094 <LCD_IO_WriteData>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	460a      	mov	r2, r1
 80024c8:	80fb      	strh	r3, [r7, #6]
 80024ca:	4613      	mov	r3, r2
 80024cc:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80024ce:	797a      	ldrb	r2, [r7, #5]
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f000 fe21 	bl	800311c <LCD_IO_ReadData>
 80024da:	4603      	mov	r3, r0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80024e8:	23f0      	movs	r3, #240	; 0xf0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80024f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fa59 	bl	80029cc <stmpe811_GetInstance>
 800251a:	4603      	mov	r3, r0
 800251c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	2bff      	cmp	r3, #255	; 0xff
 8002522:	d112      	bne.n	800254a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002524:	2000      	movs	r0, #0
 8002526:	f000 fa51 	bl	80029cc <stmpe811_GetInstance>
 800252a:	4603      	mov	r3, r0
 800252c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800252e:	7bbb      	ldrb	r3, [r7, #14]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d80a      	bhi.n	800254a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002534:	7bbb      	ldrb	r3, [r7, #14]
 8002536:	88fa      	ldrh	r2, [r7, #6]
 8002538:	b2d1      	uxtb	r1, r2
 800253a:	4a06      	ldr	r2, [pc, #24]	; (8002554 <stmpe811_Init+0x4c>)
 800253c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800253e:	f000 fe2a 	bl	8003196 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f807 	bl	8002558 <stmpe811_Reset>
    }
  }
}
 800254a:	bf00      	nop
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200006e4 	.word	0x200006e4

08002558 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002562:	88fb      	ldrh	r3, [r7, #6]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2202      	movs	r2, #2
 8002568:	2103      	movs	r1, #3
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fe1f 	bl	80031ae <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002570:	200a      	movs	r0, #10
 8002572:	f000 fe59 	bl	8003228 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2200      	movs	r2, #0
 800257c:	2103      	movs	r1, #3
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fe15 	bl	80031ae <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002584:	2002      	movs	r0, #2
 8002586:	f000 fe4f 	bl	8003228 <IOE_Delay>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002592:	b590      	push	{r4, r7, lr}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 800259c:	f000 fdfb 	bl	8003196 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fe14 	bl	80031d4 <IOE_Read>
 80025ac:	4603      	mov	r3, r0
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2101      	movs	r1, #1
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fe0b 	bl	80031d4 <IOE_Read>
 80025be:	4603      	mov	r3, r0
 80025c0:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80025c2:	4323      	orrs	r3, r4
 80025c4:	b21b      	sxth	r3, r3
 80025c6:	b29b      	uxth	r3, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}

080025d0 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2109      	movs	r1, #9
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fdf5 	bl	80031d4 <IOE_Read>
 80025ea:	4603      	mov	r3, r0
 80025ec:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	7bfa      	ldrb	r2, [r7, #15]
 80025fc:	2109      	movs	r1, #9
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fdd5 	bl	80031ae <IOE_Write>
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2109      	movs	r1, #9
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fdd7 	bl	80031d4 <IOE_Read>
 8002626:	4603      	mov	r3, r0
 8002628:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	f023 0301 	bic.w	r3, r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	7bfa      	ldrb	r2, [r7, #15]
 8002638:	2109      	movs	r1, #9
 800263a:	4618      	mov	r0, r3
 800263c:	f000 fdb7 	bl	80031ae <IOE_Write>
    
}
 8002640:	bf00      	nop
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	460a      	mov	r2, r1
 8002652:	80fb      	strh	r3, [r7, #6]
 8002654:	4613      	mov	r3, r2
 8002656:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	b2db      	uxtb	r3, r3
 8002660:	210a      	movs	r1, #10
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fdb6 	bl	80031d4 <IOE_Read>
 8002668:	4603      	mov	r3, r0
 800266a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	797b      	ldrb	r3, [r7, #5]
 8002670:	4313      	orrs	r3, r2
 8002672:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	b2db      	uxtb	r3, r3
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	210a      	movs	r1, #10
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fd96 	bl	80031ae <IOE_Write>
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b084      	sub	sp, #16
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	460a      	mov	r2, r1
 8002694:	80fb      	strh	r3, [r7, #6]
 8002696:	4613      	mov	r3, r2
 8002698:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	210a      	movs	r1, #10
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fd95 	bl	80031d4 <IOE_Read>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80026ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	b25a      	sxtb	r2, r3
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ba:	4013      	ands	r3, r2
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	7bfa      	ldrb	r2, [r7, #15]
 80026c6:	210a      	movs	r1, #10
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fd70 	bl	80031ae <IOE_Write>
}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b082      	sub	sp, #8
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	460a      	mov	r2, r1
 80026e0:	80fb      	strh	r3, [r7, #6]
 80026e2:	4613      	mov	r3, r2
 80026e4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	210b      	movs	r1, #11
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 fd71 	bl	80031d4 <IOE_Read>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	797b      	ldrb	r3, [r7, #5]
 80026f8:	4013      	ands	r3, r2
 80026fa:	b2db      	uxtb	r3, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	460a      	mov	r2, r1
 800270e:	80fb      	strh	r3, [r7, #6]
 8002710:	4613      	mov	r3, r2
 8002712:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	797a      	ldrb	r2, [r7, #5]
 800271a:	210b      	movs	r1, #11
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fd46 	bl	80031ae <IOE_Write>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	6039      	str	r1, [r7, #0]
 8002734:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2117      	movs	r1, #23
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fd47 	bl	80031d4 <IOE_Read>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b25b      	sxtb	r3, r3
 800274e:	43db      	mvns	r3, r3
 8002750:	b25a      	sxtb	r2, r3
 8002752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002756:	4013      	ands	r3, r2
 8002758:	b25b      	sxtb	r3, r3
 800275a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800275c:	88fb      	ldrh	r3, [r7, #6]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	2117      	movs	r1, #23
 8002764:	4618      	mov	r0, r3
 8002766:	f000 fd22 	bl	80031ae <IOE_Write>
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	4603      	mov	r3, r0
 800277a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2104      	movs	r1, #4
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fd26 	bl	80031d4 <IOE_Read>
 8002788:	4603      	mov	r3, r0
 800278a:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	f023 0304 	bic.w	r3, r3, #4
 8002792:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	7bfa      	ldrb	r2, [r7, #15]
 800279a:	2104      	movs	r1, #4
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fd06 	bl	80031ae <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	21f0      	movs	r1, #240	; 0xf0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ffbf 	bl	800272a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	f023 0303 	bic.w	r3, r3, #3
 80027b2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	2104      	movs	r1, #4
 80027bc:	4618      	mov	r0, r3
 80027be:	f000 fcf6 	bl	80031ae <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2249      	movs	r2, #73	; 0x49
 80027c8:	2120      	movs	r1, #32
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fcef 	bl	80031ae <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80027d0:	2002      	movs	r0, #2
 80027d2:	f000 fd29 	bl	8003228 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80027d6:	88fb      	ldrh	r3, [r7, #6]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2201      	movs	r2, #1
 80027dc:	2121      	movs	r1, #33	; 0x21
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fce5 	bl	80031ae <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	229a      	movs	r2, #154	; 0x9a
 80027ea:	2141      	movs	r1, #65	; 0x41
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 fcde 	bl	80031ae <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2201      	movs	r2, #1
 80027f8:	214a      	movs	r1, #74	; 0x4a
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fcd7 	bl	80031ae <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2201      	movs	r2, #1
 8002806:	214b      	movs	r1, #75	; 0x4b
 8002808:	4618      	mov	r0, r3
 800280a:	f000 fcd0 	bl	80031ae <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2200      	movs	r2, #0
 8002814:	214b      	movs	r1, #75	; 0x4b
 8002816:	4618      	mov	r0, r3
 8002818:	f000 fcc9 	bl	80031ae <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800281c:	88fb      	ldrh	r3, [r7, #6]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2201      	movs	r2, #1
 8002822:	2156      	movs	r1, #86	; 0x56
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fcc2 	bl	80031ae <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800282a:	88fb      	ldrh	r3, [r7, #6]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2201      	movs	r2, #1
 8002830:	2158      	movs	r1, #88	; 0x58
 8002832:	4618      	mov	r0, r3
 8002834:	f000 fcbb 	bl	80031ae <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2201      	movs	r2, #1
 800283e:	2140      	movs	r1, #64	; 0x40
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fcb4 	bl	80031ae <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	22ff      	movs	r2, #255	; 0xff
 800284c:	210b      	movs	r1, #11
 800284e:	4618      	mov	r0, r3
 8002850:	f000 fcad 	bl	80031ae <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002854:	2002      	movs	r0, #2
 8002856:	f000 fce7 	bl	8003228 <IOE_Delay>
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b084      	sub	sp, #16
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002870:	88fb      	ldrh	r3, [r7, #6]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2140      	movs	r1, #64	; 0x40
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fcac 	bl	80031d4 <IOE_Read>
 800287c:	4603      	mov	r3, r0
 800287e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002882:	2b80      	cmp	r3, #128	; 0x80
 8002884:	bf0c      	ite	eq
 8002886:	2301      	moveq	r3, #1
 8002888:	2300      	movne	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 800288e:	7bbb      	ldrb	r3, [r7, #14]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00b      	beq.n	80028ac <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	214c      	movs	r1, #76	; 0x4c
 800289a:	4618      	mov	r0, r3
 800289c:	f000 fc9a 	bl	80031d4 <IOE_Read>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e00d      	b.n	80028c8 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2201      	movs	r2, #1
 80028b2:	214b      	movs	r1, #75	; 0x4b
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fc7a 	bl	80031ae <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2200      	movs	r2, #0
 80028c0:	214b      	movs	r1, #75	; 0x4b
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fc73 	bl	80031ae <IOE_Write>
  }
  
  return ret;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	4603      	mov	r3, r0
 80028da:	60b9      	str	r1, [r7, #8]
 80028dc:	607a      	str	r2, [r7, #4]
 80028de:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80028e0:	89fb      	ldrh	r3, [r7, #14]
 80028e2:	b2d8      	uxtb	r0, r3
 80028e4:	f107 0210 	add.w	r2, r7, #16
 80028e8:	2304      	movs	r3, #4
 80028ea:	21d7      	movs	r1, #215	; 0xd7
 80028ec:	f000 fc85 	bl	80031fa <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80028f0:	7c3b      	ldrb	r3, [r7, #16]
 80028f2:	061a      	lsls	r2, r3, #24
 80028f4:	7c7b      	ldrb	r3, [r7, #17]
 80028f6:	041b      	lsls	r3, r3, #16
 80028f8:	431a      	orrs	r2, r3
 80028fa:	7cbb      	ldrb	r3, [r7, #18]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	4313      	orrs	r3, r2
 8002900:	7cfa      	ldrb	r2, [r7, #19]
 8002902:	4313      	orrs	r3, r2
 8002904:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	0d1b      	lsrs	r3, r3, #20
 800290a:	b29a      	uxth	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	b29b      	uxth	r3, r3
 8002916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291a:	b29a      	uxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002920:	89fb      	ldrh	r3, [r7, #14]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2201      	movs	r2, #1
 8002926:	214b      	movs	r1, #75	; 0x4b
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fc40 	bl	80031ae <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800292e:	89fb      	ldrh	r3, [r7, #14]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2200      	movs	r2, #0
 8002934:	214b      	movs	r1, #75	; 0x4b
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fc39 	bl	80031ae <IOE_Write>
}
 800293c:	bf00      	nop
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800294e:	f000 fc28 	bl	80031a2 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	211f      	movs	r1, #31
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fe76 	bl	8002648 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fe36 	bl	80025d0 <stmpe811_EnableGlobalIT>
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002976:	88fb      	ldrh	r3, [r7, #6]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fe47 	bl	800260c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800297e:	88fb      	ldrh	r3, [r7, #6]
 8002980:	211f      	movs	r1, #31
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fe81 	bl	800268a <stmpe811_DisableITSource>
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	4603      	mov	r3, r0
 8002998:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	211f      	movs	r1, #31
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fe99 	bl	80026d6 <stmpe811_ReadGITStatus>
 80029a4:	4603      	mov	r3, r0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	4603      	mov	r3, r0
 80029b6:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80029b8:	88fb      	ldrh	r3, [r7, #6]
 80029ba:	211f      	movs	r1, #31
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fea1 	bl	8002704 <stmpe811_ClearGlobalIT>
}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80029da:	2300      	movs	r3, #0
 80029dc:	73fb      	strb	r3, [r7, #15]
 80029de:	e00b      	b.n	80029f8 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <stmpe811_GetInstance+0x40>)
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	88fa      	ldrh	r2, [r7, #6]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d101      	bne.n	80029f2 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	e006      	b.n	8002a00 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	3301      	adds	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d9f0      	bls.n	80029e0 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80029fe:	23ff      	movs	r3, #255	; 0xff
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	200006e4 	.word	0x200006e4

08002a10 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10e      	bne.n	8002a3e <BSP_LED_Init+0x2e>
 8002a20:	2300      	movs	r3, #0
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	4b21      	ldr	r3, [pc, #132]	; (8002aac <BSP_LED_Init+0x9c>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4a20      	ldr	r2, [pc, #128]	; (8002aac <BSP_LED_Init+0x9c>)
 8002a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a30:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <BSP_LED_Init+0x9c>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	e010      	b.n	8002a60 <BSP_LED_Init+0x50>
 8002a3e:	79fb      	ldrb	r3, [r7, #7]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10d      	bne.n	8002a60 <BSP_LED_Init+0x50>
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4b18      	ldr	r3, [pc, #96]	; (8002aac <BSP_LED_Init+0x9c>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	4a17      	ldr	r2, [pc, #92]	; (8002aac <BSP_LED_Init+0x9c>)
 8002a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a52:	6313      	str	r3, [r2, #48]	; 0x30
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <BSP_LED_Init+0x9c>)
 8002a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	4a13      	ldr	r2, [pc, #76]	; (8002ab0 <BSP_LED_Init+0xa0>)
 8002a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002a72:	2302      	movs	r3, #2
 8002a74:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	4a0e      	ldr	r2, [pc, #56]	; (8002ab4 <BSP_LED_Init+0xa4>)
 8002a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7e:	f107 0214 	add.w	r2, r7, #20
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 f9bf 	bl	8004e08 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	4a09      	ldr	r2, [pc, #36]	; (8002ab4 <BSP_LED_Init+0xa4>)
 8002a8e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <BSP_LED_Init+0xa0>)
 8002a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f002 fb5f 	bl	8005160 <HAL_GPIO_WritePin>
}
 8002aa2:	bf00      	nop
 8002aa4:	3728      	adds	r7, #40	; 0x28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	0800c4cc 	.word	0x0800c4cc
 8002ab4:	20000298 	.word	0x20000298

08002ab8 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002ac2:	79fb      	ldrb	r3, [r7, #7]
 8002ac4:	4a07      	ldr	r2, [pc, #28]	; (8002ae4 <BSP_LED_On+0x2c>)
 8002ac6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	4a06      	ldr	r2, [pc, #24]	; (8002ae8 <BSP_LED_On+0x30>)
 8002ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	f002 fb43 	bl	8005160 <HAL_GPIO_WritePin>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000298 	.word	0x20000298
 8002ae8:	0800c4cc 	.word	0x0800c4cc

08002aec <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002af6:	79fb      	ldrb	r3, [r7, #7]
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <BSP_LED_Off+0x2c>)
 8002afa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4a06      	ldr	r2, [pc, #24]	; (8002b1c <BSP_LED_Off+0x30>)
 8002b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b06:	2200      	movs	r2, #0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f002 fb29 	bl	8005160 <HAL_GPIO_WritePin>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	20000298 	.word	0x20000298
 8002b1c:	0800c4cc 	.word	0x0800c4cc

08002b20 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <BSP_LED_Toggle+0x2c>)
 8002b2e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b32:	79fb      	ldrb	r3, [r7, #7]
 8002b34:	4906      	ldr	r1, [pc, #24]	; (8002b50 <BSP_LED_Toggle+0x30>)
 8002b36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	f002 fb28 	bl	8005192 <HAL_GPIO_TogglePin>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000298 	.word	0x20000298
 8002b50:	0800c4cc 	.word	0x0800c4cc

08002b54 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	; 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a33      	ldr	r2, [pc, #204]	; (8002c30 <I2Cx_MspInit+0xdc>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d15f      	bne.n	8002c26 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a31      	ldr	r2, [pc, #196]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b2f      	ldr	r3, [pc, #188]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	4b2b      	ldr	r3, [pc, #172]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4a2a      	ldr	r2, [pc, #168]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6313      	str	r3, [r2, #48]	; 0x30
 8002b92:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002b9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002ba4:	2312      	movs	r3, #18
 8002ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002bac:	2302      	movs	r3, #2
 8002bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4619      	mov	r1, r3
 8002bba:	481f      	ldr	r0, [pc, #124]	; (8002c38 <I2Cx_MspInit+0xe4>)
 8002bbc:	f002 f924 	bl	8004e08 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc4:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002bc6:	f107 0314 	add.w	r3, r7, #20
 8002bca:	4619      	mov	r1, r3
 8002bcc:	481b      	ldr	r0, [pc, #108]	; (8002c3c <I2Cx_MspInit+0xe8>)
 8002bce:	f002 f91b 	bl	8004e08 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002bdc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002be0:	6413      	str	r3, [r2, #64]	; 0x40
 8002be2:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	4a10      	ldr	r2, [pc, #64]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002bf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bf8:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <I2Cx_MspInit+0xe0>)
 8002c00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c04:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	210f      	movs	r1, #15
 8002c0a:	2048      	movs	r0, #72	; 0x48
 8002c0c:	f001 fc71 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002c10:	2048      	movs	r0, #72	; 0x48
 8002c12:	f001 fc8a 	bl	800452a <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	210f      	movs	r1, #15
 8002c1a:	2049      	movs	r0, #73	; 0x49
 8002c1c:	f001 fc69 	bl	80044f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002c20:	2049      	movs	r0, #73	; 0x49
 8002c22:	f001 fc82 	bl	800452a <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002c26:	bf00      	nop
 8002c28:	3728      	adds	r7, #40	; 0x28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40005c00 	.word	0x40005c00
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40020000 	.word	0x40020000
 8002c3c:	40020800 	.word	0x40020800

08002c40 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002c44:	4814      	ldr	r0, [pc, #80]	; (8002c98 <I2Cx_Init+0x58>)
 8002c46:	f002 ff67 	bl	8005b18 <HAL_I2C_GetState>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d121      	bne.n	8002c94 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <I2Cx_Init+0x58>)
 8002c52:	4a12      	ldr	r2, [pc, #72]	; (8002c9c <I2Cx_Init+0x5c>)
 8002c54:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002c56:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <I2Cx_Init+0x58>)
 8002c58:	4a11      	ldr	r2, [pc, #68]	; (8002ca0 <I2Cx_Init+0x60>)
 8002c5a:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <I2Cx_Init+0x58>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <I2Cx_Init+0x58>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <I2Cx_Init+0x58>)
 8002c6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c6e:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002c70:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <I2Cx_Init+0x58>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002c76:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <I2Cx_Init+0x58>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002c7c:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <I2Cx_Init+0x58>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002c82:	4b05      	ldr	r3, [pc, #20]	; (8002c98 <I2Cx_Init+0x58>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002c88:	4803      	ldr	r0, [pc, #12]	; (8002c98 <I2Cx_Init+0x58>)
 8002c8a:	f7ff ff63 	bl	8002b54 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002c8e:	4802      	ldr	r0, [pc, #8]	; (8002c98 <I2Cx_Init+0x58>)
 8002c90:	f002 fa9a 	bl	80051c8 <HAL_I2C_Init>
  }
}
 8002c94:	bf00      	nop
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	200006e8 	.word	0x200006e8
 8002c9c:	40005c00 	.word	0x40005c00
 8002ca0:	000186a0 	.word	0x000186a0

08002ca4 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	603b      	str	r3, [r7, #0]
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <I2Cx_ITConfig+0x58>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <I2Cx_ITConfig+0x58>)
 8002cb4:	f043 0301 	orr.w	r3, r3, #1
 8002cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cba:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <I2Cx_ITConfig+0x58>)
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002cc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <I2Cx_ITConfig+0x5c>)
 8002cd6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4809      	ldr	r0, [pc, #36]	; (8002d04 <I2Cx_ITConfig+0x60>)
 8002cde:	f002 f893 	bl	8004e08 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	210f      	movs	r1, #15
 8002ce6:	2028      	movs	r0, #40	; 0x28
 8002ce8:	f001 fc03 	bl	80044f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002cec:	2028      	movs	r0, #40	; 0x28
 8002cee:	f001 fc1c 	bl	800452a <HAL_NVIC_EnableIRQ>
}
 8002cf2:	bf00      	nop
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	10210000 	.word	0x10210000
 8002d04:	40020000 	.word	0x40020000

08002d08 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af04      	add	r7, sp, #16
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
 8002d12:	460b      	mov	r3, r1
 8002d14:	71bb      	strb	r3, [r7, #6]
 8002d16:	4613      	mov	r3, r2
 8002d18:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	b299      	uxth	r1, r3
 8002d22:	79bb      	ldrb	r3, [r7, #6]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <I2Cx_WriteData+0x4c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	9302      	str	r3, [sp, #8]
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	1d7b      	adds	r3, r7, #5
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2301      	movs	r3, #1
 8002d36:	4808      	ldr	r0, [pc, #32]	; (8002d58 <I2Cx_WriteData+0x50>)
 8002d38:	f002 fbce 	bl	80054d8 <HAL_I2C_Mem_Write>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002d46:	f000 f863 	bl	8002e10 <I2Cx_Error>
  }        
}
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	200002a0 	.word	0x200002a0
 8002d58:	200006e8 	.word	0x200006e8

08002d5c <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af04      	add	r7, sp, #16
 8002d62:	4603      	mov	r3, r0
 8002d64:	460a      	mov	r2, r1
 8002d66:	71fb      	strb	r3, [r7, #7]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	b299      	uxth	r1, r3
 8002d78:	79bb      	ldrb	r3, [r7, #6]
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <I2Cx_ReadData+0x50>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	9302      	str	r3, [sp, #8]
 8002d82:	2301      	movs	r3, #1
 8002d84:	9301      	str	r3, [sp, #4]
 8002d86:	f107 030e 	add.w	r3, r7, #14
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	4808      	ldr	r0, [pc, #32]	; (8002db0 <I2Cx_ReadData+0x54>)
 8002d90:	f002 fc9c 	bl	80056cc <HAL_I2C_Mem_Read>
 8002d94:	4603      	mov	r3, r0
 8002d96:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002d9e:	f000 f837 	bl	8002e10 <I2Cx_Error>
  
  }
  return value;
 8002da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3710      	adds	r7, #16
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	200002a0 	.word	0x200002a0
 8002db0:	200006e8 	.word	0x200006e8

08002db4 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b088      	sub	sp, #32
 8002db8:	af04      	add	r7, sp, #16
 8002dba:	603a      	str	r2, [r7, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	71bb      	strb	r3, [r7, #6]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	b299      	uxth	r1, r3
 8002dd2:	79bb      	ldrb	r3, [r7, #6]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <I2Cx_ReadBuffer+0x54>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	88bb      	ldrh	r3, [r7, #4]
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2301      	movs	r3, #1
 8002de6:	4809      	ldr	r0, [pc, #36]	; (8002e0c <I2Cx_ReadBuffer+0x58>)
 8002de8:	f002 fc70 	bl	80056cc <HAL_I2C_Mem_Read>
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002df0:	7bfb      	ldrb	r3, [r7, #15]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e002      	b.n	8002e00 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002dfa:	f000 f809 	bl	8002e10 <I2Cx_Error>

    return 1;
 8002dfe:	2301      	movs	r3, #1
  }
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3710      	adds	r7, #16
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	200002a0 	.word	0x200002a0
 8002e0c:	200006e8 	.word	0x200006e8

08002e10 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002e14:	4803      	ldr	r0, [pc, #12]	; (8002e24 <I2Cx_Error+0x14>)
 8002e16:	f002 fb1b 	bl	8005450 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002e1a:	f7ff ff11 	bl	8002c40 <I2Cx_Init>
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	200006e8 	.word	0x200006e8

08002e28 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002e2c:	4819      	ldr	r0, [pc, #100]	; (8002e94 <SPIx_Init+0x6c>)
 8002e2e:	f005 f900 	bl	8008032 <HAL_SPI_GetState>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d12b      	bne.n	8002e90 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <SPIx_Init+0x6c>)
 8002e3a:	4a17      	ldr	r2, [pc, #92]	; (8002e98 <SPIx_Init+0x70>)
 8002e3c:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <SPIx_Init+0x6c>)
 8002e40:	2218      	movs	r2, #24
 8002e42:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002e44:	4b13      	ldr	r3, [pc, #76]	; (8002e94 <SPIx_Init+0x6c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <SPIx_Init+0x6c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <SPIx_Init+0x6c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002e56:	4b0f      	ldr	r3, [pc, #60]	; (8002e94 <SPIx_Init+0x6c>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <SPIx_Init+0x6c>)
 8002e5e:	2207      	movs	r2, #7
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002e62:	4b0c      	ldr	r3, [pc, #48]	; (8002e94 <SPIx_Init+0x6c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <SPIx_Init+0x6c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002e6e:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <SPIx_Init+0x6c>)
 8002e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e74:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <SPIx_Init+0x6c>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <SPIx_Init+0x6c>)
 8002e7e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e82:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002e84:	4803      	ldr	r0, [pc, #12]	; (8002e94 <SPIx_Init+0x6c>)
 8002e86:	f000 f853 	bl	8002f30 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002e8a:	4802      	ldr	r0, [pc, #8]	; (8002e94 <SPIx_Init+0x6c>)
 8002e8c:	f004 fb47 	bl	800751e <HAL_SPI_Init>
  } 
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	2000073c 	.word	0x2000073c
 8002e98:	40015000 	.word	0x40015000

08002e9c <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	4b09      	ldr	r3, [pc, #36]	; (8002ed4 <SPIx_Read+0x38>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f107 0108 	add.w	r1, r7, #8
 8002eb6:	4808      	ldr	r0, [pc, #32]	; (8002ed8 <SPIx_Read+0x3c>)
 8002eb8:	f004 fd2e 	bl	8007918 <HAL_SPI_Receive>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002ec6:	f000 f827 	bl	8002f18 <SPIx_Error>
  }
  
  return readvalue;
 8002eca:	68bb      	ldr	r3, [r7, #8]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	200002a4 	.word	0x200002a4
 8002ed8:	2000073c 	.word	0x2000073c

08002edc <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002eea:	4b09      	ldr	r3, [pc, #36]	; (8002f10 <SPIx_Write+0x34>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	1db9      	adds	r1, r7, #6
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4808      	ldr	r0, [pc, #32]	; (8002f14 <SPIx_Write+0x38>)
 8002ef4:	f004 fbba 	bl	800766c <HAL_SPI_Transmit>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002f02:	f000 f809 	bl	8002f18 <SPIx_Error>
  }
}
 8002f06:	bf00      	nop
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200002a4 	.word	0x200002a4
 8002f14:	2000073c 	.word	0x2000073c

08002f18 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002f1c:	4803      	ldr	r0, [pc, #12]	; (8002f2c <SPIx_Error+0x14>)
 8002f1e:	f004 fb69 	bl	80075f4 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002f22:	f7ff ff81 	bl	8002e28 <SPIx_Init>
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	2000073c 	.word	0x2000073c

08002f30 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08a      	sub	sp, #40	; 0x28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	4b17      	ldr	r3, [pc, #92]	; (8002f9c <SPIx_MspInit+0x6c>)
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <SPIx_MspInit+0x6c>)
 8002f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f46:	6453      	str	r3, [r2, #68]	; 0x44
 8002f48:	4b14      	ldr	r3, [pc, #80]	; (8002f9c <SPIx_MspInit+0x6c>)
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <SPIx_MspInit+0x6c>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	4a0f      	ldr	r2, [pc, #60]	; (8002f9c <SPIx_MspInit+0x6c>)
 8002f5e:	f043 0320 	orr.w	r3, r3, #32
 8002f62:	6313      	str	r3, [r2, #48]	; 0x30
 8002f64:	4b0d      	ldr	r3, [pc, #52]	; (8002f9c <SPIx_MspInit+0x6c>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	60fb      	str	r3, [r7, #12]
 8002f6e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002f70:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002f76:	2302      	movs	r3, #2
 8002f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002f82:	2305      	movs	r3, #5
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002f86:	f107 0314 	add.w	r3, r7, #20
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4804      	ldr	r0, [pc, #16]	; (8002fa0 <SPIx_MspInit+0x70>)
 8002f8e:	f001 ff3b 	bl	8004e08 <HAL_GPIO_Init>
}
 8002f92:	bf00      	nop
 8002f94:	3728      	adds	r7, #40	; 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	40021400 	.word	0x40021400

08002fa4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b088      	sub	sp, #32
 8002fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002faa:	4b36      	ldr	r3, [pc, #216]	; (8003084 <LCD_IO_Init+0xe0>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d164      	bne.n	800307c <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <LCD_IO_Init+0xe0>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <LCD_IO_Init+0xe4>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	4a31      	ldr	r2, [pc, #196]	; (8003088 <LCD_IO_Init+0xe4>)
 8002fc2:	f043 0308 	orr.w	r3, r3, #8
 8002fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc8:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <LCD_IO_Init+0xe4>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002fe6:	f107 030c 	add.w	r3, r7, #12
 8002fea:	4619      	mov	r1, r3
 8002fec:	4827      	ldr	r0, [pc, #156]	; (800308c <LCD_IO_Init+0xe8>)
 8002fee:	f001 ff0b 	bl	8004e08 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	4b24      	ldr	r3, [pc, #144]	; (8003088 <LCD_IO_Init+0xe4>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	4a23      	ldr	r2, [pc, #140]	; (8003088 <LCD_IO_Init+0xe4>)
 8002ffc:	f043 0308 	orr.w	r3, r3, #8
 8003000:	6313      	str	r3, [r2, #48]	; 0x30
 8003002:	4b21      	ldr	r3, [pc, #132]	; (8003088 <LCD_IO_Init+0xe4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	607b      	str	r3, [r7, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800300e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003012:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003014:	2301      	movs	r3, #1
 8003016:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800301c:	2302      	movs	r3, #2
 800301e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	4619      	mov	r1, r3
 8003026:	4819      	ldr	r0, [pc, #100]	; (800308c <LCD_IO_Init+0xe8>)
 8003028:	f001 feee 	bl	8004e08 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800302c:	2300      	movs	r3, #0
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4b15      	ldr	r3, [pc, #84]	; (8003088 <LCD_IO_Init+0xe4>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	4a14      	ldr	r2, [pc, #80]	; (8003088 <LCD_IO_Init+0xe4>)
 8003036:	f043 0304 	orr.w	r3, r3, #4
 800303a:	6313      	str	r3, [r2, #48]	; 0x30
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <LCD_IO_Init+0xe4>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	603b      	str	r3, [r7, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003048:	2304      	movs	r3, #4
 800304a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800304c:	2301      	movs	r3, #1
 800304e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003054:	2302      	movs	r3, #2
 8003056:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003058:	f107 030c 	add.w	r3, r7, #12
 800305c:	4619      	mov	r1, r3
 800305e:	480c      	ldr	r0, [pc, #48]	; (8003090 <LCD_IO_Init+0xec>)
 8003060:	f001 fed2 	bl	8004e08 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003064:	2200      	movs	r2, #0
 8003066:	2104      	movs	r1, #4
 8003068:	4809      	ldr	r0, [pc, #36]	; (8003090 <LCD_IO_Init+0xec>)
 800306a:	f002 f879 	bl	8005160 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800306e:	2201      	movs	r2, #1
 8003070:	2104      	movs	r1, #4
 8003072:	4807      	ldr	r0, [pc, #28]	; (8003090 <LCD_IO_Init+0xec>)
 8003074:	f002 f874 	bl	8005160 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003078:	f7ff fed6 	bl	8002e28 <SPIx_Init>
  }
}
 800307c:	bf00      	nop
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000794 	.word	0x20000794
 8003088:	40023800 	.word	0x40023800
 800308c:	40020c00 	.word	0x40020c00
 8003090:	40020800 	.word	0x40020800

08003094 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800309e:	2201      	movs	r2, #1
 80030a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030a4:	480a      	ldr	r0, [pc, #40]	; (80030d0 <LCD_IO_WriteData+0x3c>)
 80030a6:	f002 f85b 	bl	8005160 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80030aa:	2200      	movs	r2, #0
 80030ac:	2104      	movs	r1, #4
 80030ae:	4809      	ldr	r0, [pc, #36]	; (80030d4 <LCD_IO_WriteData+0x40>)
 80030b0:	f002 f856 	bl	8005160 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7ff ff10 	bl	8002edc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80030bc:	2201      	movs	r2, #1
 80030be:	2104      	movs	r1, #4
 80030c0:	4804      	ldr	r0, [pc, #16]	; (80030d4 <LCD_IO_WriteData+0x40>)
 80030c2:	f002 f84d 	bl	8005160 <HAL_GPIO_WritePin>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40020c00 	.word	0x40020c00
 80030d4:	40020800 	.word	0x40020800

080030d8 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80030e2:	2200      	movs	r2, #0
 80030e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030e8:	480a      	ldr	r0, [pc, #40]	; (8003114 <LCD_IO_WriteReg+0x3c>)
 80030ea:	f002 f839 	bl	8005160 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80030ee:	2200      	movs	r2, #0
 80030f0:	2104      	movs	r1, #4
 80030f2:	4809      	ldr	r0, [pc, #36]	; (8003118 <LCD_IO_WriteReg+0x40>)
 80030f4:	f002 f834 	bl	8005160 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff feed 	bl	8002edc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003102:	2201      	movs	r2, #1
 8003104:	2104      	movs	r1, #4
 8003106:	4804      	ldr	r0, [pc, #16]	; (8003118 <LCD_IO_WriteReg+0x40>)
 8003108:	f002 f82a 	bl	8005160 <HAL_GPIO_WritePin>
}
 800310c:	bf00      	nop
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	40020c00 	.word	0x40020c00
 8003118:	40020800 	.word	0x40020800

0800311c <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	460a      	mov	r2, r1
 8003126:	80fb      	strh	r3, [r7, #6]
 8003128:	4613      	mov	r3, r2
 800312a:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003130:	2200      	movs	r2, #0
 8003132:	2104      	movs	r1, #4
 8003134:	4810      	ldr	r0, [pc, #64]	; (8003178 <LCD_IO_ReadData+0x5c>)
 8003136:	f002 f813 	bl	8005160 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800313a:	2200      	movs	r2, #0
 800313c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003140:	480e      	ldr	r0, [pc, #56]	; (800317c <LCD_IO_ReadData+0x60>)
 8003142:	f002 f80d 	bl	8005160 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fec7 	bl	8002edc <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800314e:	797b      	ldrb	r3, [r7, #5]
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fea3 	bl	8002e9c <SPIx_Read>
 8003156:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003158:	2201      	movs	r2, #1
 800315a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800315e:	4807      	ldr	r0, [pc, #28]	; (800317c <LCD_IO_ReadData+0x60>)
 8003160:	f001 fffe 	bl	8005160 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003164:	2201      	movs	r2, #1
 8003166:	2104      	movs	r1, #4
 8003168:	4803      	ldr	r0, [pc, #12]	; (8003178 <LCD_IO_ReadData+0x5c>)
 800316a:	f001 fff9 	bl	8005160 <HAL_GPIO_WritePin>
  
  return readvalue;
 800316e:	68fb      	ldr	r3, [r7, #12]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40020800 	.word	0x40020800
 800317c:	40020c00 	.word	0x40020c00

08003180 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f001 f8b3 	bl	80042f4 <HAL_Delay>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8003196:	b580      	push	{r7, lr}
 8003198:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800319a:	f7ff fd51 	bl	8002c40 <I2Cx_Init>
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 80031a6:	f7ff fd7d 	bl	8002ca4 <I2Cx_ITConfig>
}
 80031aa:	bf00      	nop
 80031ac:	bd80      	pop	{r7, pc}

080031ae <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	4603      	mov	r3, r0
 80031b6:	71fb      	strb	r3, [r7, #7]
 80031b8:	460b      	mov	r3, r1
 80031ba:	71bb      	strb	r3, [r7, #6]
 80031bc:	4613      	mov	r3, r2
 80031be:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80031c0:	797a      	ldrb	r2, [r7, #5]
 80031c2:	79b9      	ldrb	r1, [r7, #6]
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fd9e 	bl	8002d08 <I2Cx_WriteData>
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	460a      	mov	r2, r1
 80031de:	71fb      	strb	r3, [r7, #7]
 80031e0:	4613      	mov	r3, r2
 80031e2:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80031e4:	79ba      	ldrb	r2, [r7, #6]
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	4611      	mov	r1, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fdb6 	bl	8002d5c <I2Cx_ReadData>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	603a      	str	r2, [r7, #0]
 8003202:	461a      	mov	r2, r3
 8003204:	4603      	mov	r3, r0
 8003206:	71fb      	strb	r3, [r7, #7]
 8003208:	460b      	mov	r3, r1
 800320a:	71bb      	strb	r3, [r7, #6]
 800320c:	4613      	mov	r3, r2
 800320e:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8003210:	88bb      	ldrh	r3, [r7, #4]
 8003212:	79b9      	ldrb	r1, [r7, #6]
 8003214:	79f8      	ldrb	r0, [r7, #7]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	f7ff fdcc 	bl	8002db4 <I2Cx_ReadBuffer>
 800321c:	4603      	mov	r3, r0
 800321e:	b29b      	uxth	r3, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f001 f85f 	bl	80042f4 <HAL_Delay>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <BSP_LCD_Init_Flipped+0x14>)
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 800324a:	f000 f805 	bl	8003258 <BSP_LCD_Init>
 800324e:	4603      	mov	r3, r0
}
 8003250:	4618      	mov	r0, r3
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200008d0 	.word	0x200008d0

08003258 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 800325c:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <BSP_LCD_Init+0xbc>)
 800325e:	4a2e      	ldr	r2, [pc, #184]	; (8003318 <BSP_LCD_Init+0xc0>)
 8003260:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003262:	4b2c      	ldr	r3, [pc, #176]	; (8003314 <BSP_LCD_Init+0xbc>)
 8003264:	2209      	movs	r2, #9
 8003266:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <BSP_LCD_Init+0xbc>)
 800326a:	2201      	movs	r2, #1
 800326c:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 800326e:	4b29      	ldr	r3, [pc, #164]	; (8003314 <BSP_LCD_Init+0xbc>)
 8003270:	221d      	movs	r2, #29
 8003272:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003274:	4b27      	ldr	r3, [pc, #156]	; (8003314 <BSP_LCD_Init+0xbc>)
 8003276:	2203      	movs	r2, #3
 8003278:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800327a:	4b26      	ldr	r3, [pc, #152]	; (8003314 <BSP_LCD_Init+0xbc>)
 800327c:	f240 120d 	movw	r2, #269	; 0x10d
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003282:	4b24      	ldr	r3, [pc, #144]	; (8003314 <BSP_LCD_Init+0xbc>)
 8003284:	f240 1243 	movw	r2, #323	; 0x143
 8003288:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800328a:	4b22      	ldr	r3, [pc, #136]	; (8003314 <BSP_LCD_Init+0xbc>)
 800328c:	f240 1217 	movw	r2, #279	; 0x117
 8003290:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003292:	4b20      	ldr	r3, [pc, #128]	; (8003314 <BSP_LCD_Init+0xbc>)
 8003294:	f240 1247 	movw	r2, #327	; 0x147
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800329a:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <BSP_LCD_Init+0xbc>)
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 80032a2:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <BSP_LCD_Init+0xbc>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <BSP_LCD_Init+0xbc>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <BSP_LCD_Init+0xc4>)
 80032b4:	2208      	movs	r2, #8
 80032b6:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80032b8:	4b18      	ldr	r3, [pc, #96]	; (800331c <BSP_LCD_Init+0xc4>)
 80032ba:	22c0      	movs	r2, #192	; 0xc0
 80032bc:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <BSP_LCD_Init+0xc4>)
 80032c0:	2204      	movs	r2, #4
 80032c2:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80032c4:	4b15      	ldr	r3, [pc, #84]	; (800331c <BSP_LCD_Init+0xc4>)
 80032c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80032cc:	4813      	ldr	r0, [pc, #76]	; (800331c <BSP_LCD_Init+0xc4>)
 80032ce:	f003 fedd 	bl	800708c <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80032d2:	4b10      	ldr	r3, [pc, #64]	; (8003314 <BSP_LCD_Init+0xbc>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80032d8:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <BSP_LCD_Init+0xbc>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80032de:	4b0d      	ldr	r3, [pc, #52]	; (8003314 <BSP_LCD_Init+0xbc>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <BSP_LCD_Init+0xbc>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80032ea:	f000 faad 	bl	8003848 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80032ee:	4809      	ldr	r0, [pc, #36]	; (8003314 <BSP_LCD_Init+0xbc>)
 80032f0:	f002 ff78 	bl	80061e4 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <BSP_LCD_Init+0xc8>)
 80032f6:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <BSP_LCD_Init+0xcc>)
 80032f8:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80032fa:	4b09      	ldr	r3, [pc, #36]	; (8003320 <BSP_LCD_Init+0xc8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8003302:	f000 fcaf 	bl	8003c64 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8003306:	4808      	ldr	r0, [pc, #32]	; (8003328 <BSP_LCD_Init+0xd0>)
 8003308:	f000 f8ce 	bl	80034a8 <BSP_LCD_SetFont>

  return LCD_OK;
 800330c:	2300      	movs	r3, #0
}  
 800330e:	4618      	mov	r0, r3
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000798 	.word	0x20000798
 8003318:	40016800 	.word	0x40016800
 800331c:	20000880 	.word	0x20000880
 8003320:	200008cc 	.word	0x200008cc
 8003324:	20000238 	.word	0x20000238
 8003328:	200002a8 	.word	0x200002a8

0800332c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <BSP_LCD_GetXSize+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	4798      	blx	r3
 8003338:	4603      	mov	r3, r0
}
 800333a:	4618      	mov	r0, r3
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	200008cc 	.word	0x200008cc

08003344 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <BSP_LCD_GetYSize+0x14>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	4798      	blx	r3
 8003350:	4603      	mov	r3, r0
}
 8003352:	4618      	mov	r0, r3
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	200008cc 	.word	0x200008cc

0800335c <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800335c:	b580      	push	{r7, lr}
 800335e:	b090      	sub	sp, #64	; 0x40
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	6039      	str	r1, [r7, #0]
 8003366:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 800336c:	f7ff ffde 	bl	800332c <BSP_LCD_GetXSize>
 8003370:	4603      	mov	r3, r0
 8003372:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003378:	f7ff ffe4 	bl	8003344 <BSP_LCD_GetYSize>
 800337c:	4603      	mov	r3, r0
 800337e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003380:	2300      	movs	r3, #0
 8003382:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8003388:	23ff      	movs	r3, #255	; 0xff
 800338a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80033a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80033a8:	2307      	movs	r3, #7
 80033aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80033ac:	f7ff ffbe 	bl	800332c <BSP_LCD_GetXSize>
 80033b0:	4603      	mov	r3, r0
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 80033b4:	f7ff ffc6 	bl	8003344 <BSP_LCD_GetYSize>
 80033b8:	4603      	mov	r3, r0
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80033bc:	88fa      	ldrh	r2, [r7, #6]
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	4619      	mov	r1, r3
 80033c4:	4814      	ldr	r0, [pc, #80]	; (8003418 <BSP_LCD_LayerDefaultInit+0xbc>)
 80033c6:	f002 ffe7 	bl	8006398 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80033ca:	88fa      	ldrh	r2, [r7, #6]
 80033cc:	4913      	ldr	r1, [pc, #76]	; (800341c <BSP_LCD_LayerDefaultInit+0xc0>)
 80033ce:	4613      	mov	r3, r2
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	3304      	adds	r3, #4
 80033da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033de:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80033e0:	88fa      	ldrh	r2, [r7, #6]
 80033e2:	490e      	ldr	r1, [pc, #56]	; (800341c <BSP_LCD_LayerDefaultInit+0xc0>)
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	3308      	adds	r3, #8
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <BSP_LCD_LayerDefaultInit+0xc4>)
 80033f2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80033f4:	88fa      	ldrh	r2, [r7, #6]
 80033f6:	4909      	ldr	r1, [pc, #36]	; (800341c <BSP_LCD_LayerDefaultInit+0xc0>)
 80033f8:	4613      	mov	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003406:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003408:	4803      	ldr	r0, [pc, #12]	; (8003418 <BSP_LCD_LayerDefaultInit+0xbc>)
 800340a:	f003 f803 	bl	8006414 <HAL_LTDC_EnableDither>
}
 800340e:	bf00      	nop
 8003410:	3740      	adds	r7, #64	; 0x40
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	20000798 	.word	0x20000798
 800341c:	200008b4 	.word	0x200008b4
 8003420:	200002a8 	.word	0x200002a8

08003424 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 800342c:	4a04      	ldr	r2, [pc, #16]	; (8003440 <BSP_LCD_SelectLayer+0x1c>)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6013      	str	r3, [r2, #0]
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	200008b0 	.word	0x200008b0

08003444 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 800344c:	4b07      	ldr	r3, [pc, #28]	; (800346c <BSP_LCD_SetTextColor+0x28>)
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	4907      	ldr	r1, [pc, #28]	; (8003470 <BSP_LCD_SetTextColor+0x2c>)
 8003452:	4613      	mov	r3, r2
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	601a      	str	r2, [r3, #0]
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	200008b0 	.word	0x200008b0
 8003470:	200008b4 	.word	0x200008b4

08003474 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800347c:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <BSP_LCD_SetBackColor+0x2c>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4908      	ldr	r1, [pc, #32]	; (80034a4 <BSP_LCD_SetBackColor+0x30>)
 8003482:	4613      	mov	r3, r2
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3304      	adds	r3, #4
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	200008b0 	.word	0x200008b0
 80034a4:	200008b4 	.word	0x200008b4

080034a8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <BSP_LCD_SetFont+0x2c>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4908      	ldr	r1, [pc, #32]	; (80034d8 <BSP_LCD_SetFont+0x30>)
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3308      	adds	r3, #8
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	601a      	str	r2, [r3, #0]
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	200008b0 	.word	0x200008b0
 80034d8:	200008b4 	.word	0x200008b4

080034dc <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80034dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034de:	b085      	sub	sp, #20
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80034e4:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <BSP_LCD_Clear+0x48>)
 80034e6:	681c      	ldr	r4, [r3, #0]
 80034e8:	4b0e      	ldr	r3, [pc, #56]	; (8003524 <BSP_LCD_Clear+0x48>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a0e      	ldr	r2, [pc, #56]	; (8003528 <BSP_LCD_Clear+0x4c>)
 80034ee:	2134      	movs	r1, #52	; 0x34
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	335c      	adds	r3, #92	; 0x5c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	461e      	mov	r6, r3
 80034fc:	f7ff ff16 	bl	800332c <BSP_LCD_GetXSize>
 8003500:	4605      	mov	r5, r0
 8003502:	f7ff ff1f 	bl	8003344 <BSP_LCD_GetYSize>
 8003506:	4602      	mov	r2, r0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	2300      	movs	r3, #0
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	4613      	mov	r3, r2
 8003512:	462a      	mov	r2, r5
 8003514:	4631      	mov	r1, r6
 8003516:	4620      	mov	r0, r4
 8003518:	f000 fb6c 	bl	8003bf4 <FillBuffer>
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003524:	200008b0 	.word	0x200008b0
 8003528:	20000798 	.word	0x20000798

0800352c <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800352c:	b590      	push	{r4, r7, lr}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	4603      	mov	r3, r0
 8003534:	80fb      	strh	r3, [r7, #6]
 8003536:	460b      	mov	r3, r1
 8003538:	80bb      	strh	r3, [r7, #4]
 800353a:	4613      	mov	r3, r2
 800353c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800353e:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <BSP_LCD_DisplayChar+0x80>)
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	491b      	ldr	r1, [pc, #108]	; (80035b0 <BSP_LCD_DisplayChar+0x84>)
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	440b      	add	r3, r1
 800354e:	3308      	adds	r3, #8
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6819      	ldr	r1, [r3, #0]
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800355a:	4b14      	ldr	r3, [pc, #80]	; (80035ac <BSP_LCD_DisplayChar+0x80>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4c14      	ldr	r4, [pc, #80]	; (80035b0 <BSP_LCD_DisplayChar+0x84>)
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4423      	add	r3, r4
 800356a:	3308      	adds	r3, #8
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003570:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003574:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <BSP_LCD_DisplayChar+0x80>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4c0d      	ldr	r4, [pc, #52]	; (80035b0 <BSP_LCD_DisplayChar+0x84>)
 800357a:	4613      	mov	r3, r2
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4423      	add	r3, r4
 8003584:	3308      	adds	r3, #8
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	889b      	ldrh	r3, [r3, #4]
 800358a:	3307      	adds	r3, #7
 800358c:	2b00      	cmp	r3, #0
 800358e:	da00      	bge.n	8003592 <BSP_LCD_DisplayChar+0x66>
 8003590:	3307      	adds	r3, #7
 8003592:	10db      	asrs	r3, r3, #3
 8003594:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003598:	18ca      	adds	r2, r1, r3
 800359a:	88b9      	ldrh	r1, [r7, #4]
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fa6e 	bl	8003a80 <DrawChar>
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd90      	pop	{r4, r7, pc}
 80035ac:	200008b0 	.word	0x200008b0
 80035b0:	200008b4 	.word	0x200008b4

080035b4 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80035b4:	b5b0      	push	{r4, r5, r7, lr}
 80035b6:	b088      	sub	sp, #32
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60ba      	str	r2, [r7, #8]
 80035bc:	461a      	mov	r2, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	81fb      	strh	r3, [r7, #14]
 80035c2:	460b      	mov	r3, r1
 80035c4:	81bb      	strh	r3, [r7, #12]
 80035c6:	4613      	mov	r3, r2
 80035c8:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80035ca:	2301      	movs	r3, #1
 80035cc:	83fb      	strh	r3, [r7, #30]
 80035ce:	2300      	movs	r3, #0
 80035d0:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	2300      	movs	r3, #0
 80035d8:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80035de:	e002      	b.n	80035e6 <BSP_LCD_DisplayStringAt+0x32>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	3301      	adds	r3, #1
 80035e4:	61bb      	str	r3, [r7, #24]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	617a      	str	r2, [r7, #20]
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f6      	bne.n	80035e0 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80035f2:	f7ff fe9b 	bl	800332c <BSP_LCD_GetXSize>
 80035f6:	4601      	mov	r1, r0
 80035f8:	4b4b      	ldr	r3, [pc, #300]	; (8003728 <BSP_LCD_DisplayStringAt+0x174>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	484b      	ldr	r0, [pc, #300]	; (800372c <BSP_LCD_DisplayStringAt+0x178>)
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4403      	add	r3, r0
 8003608:	3308      	adds	r3, #8
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	889b      	ldrh	r3, [r3, #4]
 800360e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003612:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	2b03      	cmp	r3, #3
 8003618:	d01c      	beq.n	8003654 <BSP_LCD_DisplayStringAt+0xa0>
 800361a:	2b03      	cmp	r3, #3
 800361c:	dc33      	bgt.n	8003686 <BSP_LCD_DisplayStringAt+0xd2>
 800361e:	2b01      	cmp	r3, #1
 8003620:	d002      	beq.n	8003628 <BSP_LCD_DisplayStringAt+0x74>
 8003622:	2b02      	cmp	r3, #2
 8003624:	d019      	beq.n	800365a <BSP_LCD_DisplayStringAt+0xa6>
 8003626:	e02e      	b.n	8003686 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	1ad1      	subs	r1, r2, r3
 800362e:	4b3e      	ldr	r3, [pc, #248]	; (8003728 <BSP_LCD_DisplayStringAt+0x174>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	483e      	ldr	r0, [pc, #248]	; (800372c <BSP_LCD_DisplayStringAt+0x178>)
 8003634:	4613      	mov	r3, r2
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4403      	add	r3, r0
 800363e:	3308      	adds	r3, #8
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	889b      	ldrh	r3, [r3, #4]
 8003644:	fb01 f303 	mul.w	r3, r1, r3
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	89fb      	ldrh	r3, [r7, #14]
 800364e:	4413      	add	r3, r2
 8003650:	83fb      	strh	r3, [r7, #30]
      break;
 8003652:	e01b      	b.n	800368c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003654:	89fb      	ldrh	r3, [r7, #14]
 8003656:	83fb      	strh	r3, [r7, #30]
      break;
 8003658:	e018      	b.n	800368c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800365a:	693a      	ldr	r2, [r7, #16]
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	b299      	uxth	r1, r3
 8003662:	4b31      	ldr	r3, [pc, #196]	; (8003728 <BSP_LCD_DisplayStringAt+0x174>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4831      	ldr	r0, [pc, #196]	; (800372c <BSP_LCD_DisplayStringAt+0x178>)
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4403      	add	r3, r0
 8003672:	3308      	adds	r3, #8
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	889b      	ldrh	r3, [r3, #4]
 8003678:	fb11 f303 	smulbb	r3, r1, r3
 800367c:	b29a      	uxth	r2, r3
 800367e:	89fb      	ldrh	r3, [r7, #14]
 8003680:	4413      	add	r3, r2
 8003682:	83fb      	strh	r3, [r7, #30]
      break;
 8003684:	e002      	b.n	800368c <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8003686:	89fb      	ldrh	r3, [r7, #14]
 8003688:	83fb      	strh	r3, [r7, #30]
      break;
 800368a:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800368c:	e01a      	b.n	80036c4 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	89b9      	ldrh	r1, [r7, #12]
 8003694:	8bfb      	ldrh	r3, [r7, #30]
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff ff48 	bl	800352c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800369c:	4b22      	ldr	r3, [pc, #136]	; (8003728 <BSP_LCD_DisplayStringAt+0x174>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	4922      	ldr	r1, [pc, #136]	; (800372c <BSP_LCD_DisplayStringAt+0x178>)
 80036a2:	4613      	mov	r3, r2
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3308      	adds	r3, #8
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	889a      	ldrh	r2, [r3, #4]
 80036b2:	8bfb      	ldrh	r3, [r7, #30]
 80036b4:	4413      	add	r3, r2
 80036b6:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	3301      	adds	r3, #1
 80036bc:	60bb      	str	r3, [r7, #8]
    i++;
 80036be:	8bbb      	ldrh	r3, [r7, #28]
 80036c0:	3301      	adds	r3, #1
 80036c2:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	bf14      	ite	ne
 80036cc:	2301      	movne	r3, #1
 80036ce:	2300      	moveq	r3, #0
 80036d0:	b2dc      	uxtb	r4, r3
 80036d2:	f7ff fe2b 	bl	800332c <BSP_LCD_GetXSize>
 80036d6:	8bb9      	ldrh	r1, [r7, #28]
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <BSP_LCD_DisplayStringAt+0x174>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4d13      	ldr	r5, [pc, #76]	; (800372c <BSP_LCD_DisplayStringAt+0x178>)
 80036de:	4613      	mov	r3, r2
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	4413      	add	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	442b      	add	r3, r5
 80036e8:	3308      	adds	r3, #8
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	889b      	ldrh	r3, [r3, #4]
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	1ac3      	subs	r3, r0, r3
 80036f4:	b299      	uxth	r1, r3
 80036f6:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <BSP_LCD_DisplayStringAt+0x174>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	480c      	ldr	r0, [pc, #48]	; (800372c <BSP_LCD_DisplayStringAt+0x178>)
 80036fc:	4613      	mov	r3, r2
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4403      	add	r3, r0
 8003706:	3308      	adds	r3, #8
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	889b      	ldrh	r3, [r3, #4]
 800370c:	4299      	cmp	r1, r3
 800370e:	bf2c      	ite	cs
 8003710:	2301      	movcs	r3, #1
 8003712:	2300      	movcc	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	4023      	ands	r3, r4
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1b7      	bne.n	800368e <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 800371e:	bf00      	nop
 8003720:	bf00      	nop
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bdb0      	pop	{r4, r5, r7, pc}
 8003728:	200008b0 	.word	0x200008b0
 800372c:	200008b4 	.word	0x200008b4

08003730 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003734:	b086      	sub	sp, #24
 8003736:	af02      	add	r7, sp, #8
 8003738:	4604      	mov	r4, r0
 800373a:	4608      	mov	r0, r1
 800373c:	4611      	mov	r1, r2
 800373e:	461a      	mov	r2, r3
 8003740:	4623      	mov	r3, r4
 8003742:	80fb      	strh	r3, [r7, #6]
 8003744:	4603      	mov	r3, r0
 8003746:	80bb      	strh	r3, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	807b      	strh	r3, [r7, #2]
 800374c:	4613      	mov	r3, r2
 800374e:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003754:	4b30      	ldr	r3, [pc, #192]	; (8003818 <BSP_LCD_FillRect+0xe8>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4930      	ldr	r1, [pc, #192]	; (800381c <BSP_LCD_FillRect+0xec>)
 800375a:	4613      	mov	r3, r2
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fe6c 	bl	8003444 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 800376c:	4b2c      	ldr	r3, [pc, #176]	; (8003820 <BSP_LCD_FillRect+0xf0>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01b      	beq.n	80037ac <BSP_LCD_FillRect+0x7c>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +76800); //Rotate by 180°
 8003774:	4b28      	ldr	r3, [pc, #160]	; (8003818 <BSP_LCD_FillRect+0xe8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <BSP_LCD_FillRect+0xf4>)
 800377a:	2134      	movs	r1, #52	; 0x34
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	335c      	adds	r3, #92	; 0x5c
 8003784:	681c      	ldr	r4, [r3, #0]
 8003786:	f7ff fdd1 	bl	800332c <BSP_LCD_GetXSize>
 800378a:	4603      	mov	r3, r0
 800378c:	425b      	negs	r3, r3
 800378e:	88b9      	ldrh	r1, [r7, #4]
 8003790:	883a      	ldrh	r2, [r7, #0]
 8003792:	440a      	add	r2, r1
 8003794:	fb02 f303 	mul.w	r3, r2, r3
 8003798:	88f9      	ldrh	r1, [r7, #6]
 800379a:	887a      	ldrh	r2, [r7, #2]
 800379c:	440a      	add	r2, r1
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4423      	add	r3, r4
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	e013      	b.n	80037d4 <BSP_LCD_FillRect+0xa4>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80037ac:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <BSP_LCD_FillRect+0xe8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a1c      	ldr	r2, [pc, #112]	; (8003824 <BSP_LCD_FillRect+0xf4>)
 80037b2:	2134      	movs	r1, #52	; 0x34
 80037b4:	fb01 f303 	mul.w	r3, r1, r3
 80037b8:	4413      	add	r3, r2
 80037ba:	335c      	adds	r3, #92	; 0x5c
 80037bc:	681c      	ldr	r4, [r3, #0]
 80037be:	f7ff fdb5 	bl	800332c <BSP_LCD_GetXSize>
 80037c2:	4602      	mov	r2, r0
 80037c4:	88bb      	ldrh	r3, [r7, #4]
 80037c6:	fb03 f202 	mul.w	r2, r3, r2
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4423      	add	r3, r4
 80037d2:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80037d4:	4b10      	ldr	r3, [pc, #64]	; (8003818 <BSP_LCD_FillRect+0xe8>)
 80037d6:	681c      	ldr	r4, [r3, #0]
 80037d8:	68fd      	ldr	r5, [r7, #12]
 80037da:	887e      	ldrh	r6, [r7, #2]
 80037dc:	f8b7 8000 	ldrh.w	r8, [r7]
 80037e0:	f7ff fda4 	bl	800332c <BSP_LCD_GetXSize>
 80037e4:	4602      	mov	r2, r0
 80037e6:	887b      	ldrh	r3, [r7, #2]
 80037e8:	1ad1      	subs	r1, r2, r3
 80037ea:	4b0b      	ldr	r3, [pc, #44]	; (8003818 <BSP_LCD_FillRect+0xe8>)
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	480b      	ldr	r0, [pc, #44]	; (800381c <BSP_LCD_FillRect+0xec>)
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4403      	add	r3, r0
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	9100      	str	r1, [sp, #0]
 8003800:	4643      	mov	r3, r8
 8003802:	4632      	mov	r2, r6
 8003804:	4629      	mov	r1, r5
 8003806:	4620      	mov	r0, r4
 8003808:	f000 f9f4 	bl	8003bf4 <FillBuffer>
}
 800380c:	bf00      	nop
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003816:	bf00      	nop
 8003818:	200008b0 	.word	0x200008b0
 800381c:	200008b4 	.word	0x200008b4
 8003820:	200008d0 	.word	0x200008d0
 8003824:	20000798 	.word	0x20000798

08003828 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <BSP_LCD_DisplayOn+0x1c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003836:	4b03      	ldr	r3, [pc, #12]	; (8003844 <BSP_LCD_DisplayOn+0x1c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4798      	blx	r3
  }
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200008cc 	.word	0x200008cc

08003848 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08e      	sub	sp, #56	; 0x38
 800384c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	623b      	str	r3, [r7, #32]
 8003852:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	4a60      	ldr	r2, [pc, #384]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003858:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800385c:	6453      	str	r3, [r2, #68]	; 0x44
 800385e:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003866:	623b      	str	r3, [r7, #32]
 8003868:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800386a:	2300      	movs	r3, #0
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	4b5a      	ldr	r3, [pc, #360]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a59      	ldr	r2, [pc, #356]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b57      	ldr	r3, [pc, #348]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003882:	61fb      	str	r3, [r7, #28]
 8003884:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
 800388a:	4b53      	ldr	r3, [pc, #332]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4a52      	ldr	r2, [pc, #328]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003890:	f043 0301 	orr.w	r3, r3, #1
 8003894:	6313      	str	r3, [r2, #48]	; 0x30
 8003896:	4b50      	ldr	r3, [pc, #320]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a4b      	ldr	r2, [pc, #300]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 80038ac:	f043 0302 	orr.w	r3, r3, #2
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	4b45      	ldr	r3, [pc, #276]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	4a44      	ldr	r2, [pc, #272]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 80038c8:	f043 0304 	orr.w	r3, r3, #4
 80038cc:	6313      	str	r3, [r2, #48]	; 0x30
 80038ce:	4b42      	ldr	r3, [pc, #264]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a3d      	ldr	r2, [pc, #244]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 80038e4:	f043 0308 	orr.w	r3, r3, #8
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f003 0308 	and.w	r3, r3, #8
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80038f6:	2300      	movs	r3, #0
 80038f8:	60bb      	str	r3, [r7, #8]
 80038fa:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a36      	ldr	r2, [pc, #216]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003900:	f043 0320 	orr.w	r3, r3, #32
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	60bb      	str	r3, [r7, #8]
 8003910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	607b      	str	r3, [r7, #4]
 8003916:	4b30      	ldr	r3, [pc, #192]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	4a2f      	ldr	r2, [pc, #188]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 800391c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003920:	6313      	str	r3, [r2, #48]	; 0x30
 8003922:	4b2d      	ldr	r3, [pc, #180]	; (80039d8 <BSP_LCD_MspInit+0x190>)
 8003924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800392e:	f641 0358 	movw	r3, #6232	; 0x1858
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003934:	2302      	movs	r3, #2
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003938:	2300      	movs	r3, #0
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800393c:	2302      	movs	r3, #2
 800393e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003940:	230e      	movs	r3, #14
 8003942:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003948:	4619      	mov	r1, r3
 800394a:	4824      	ldr	r0, [pc, #144]	; (80039dc <BSP_LCD_MspInit+0x194>)
 800394c:	f001 fa5c 	bl	8004e08 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003950:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395a:	4619      	mov	r1, r3
 800395c:	4820      	ldr	r0, [pc, #128]	; (80039e0 <BSP_LCD_MspInit+0x198>)
 800395e:	f001 fa53 	bl	8004e08 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003962:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800396c:	4619      	mov	r1, r3
 800396e:	481d      	ldr	r0, [pc, #116]	; (80039e4 <BSP_LCD_MspInit+0x19c>)
 8003970:	f001 fa4a 	bl	8004e08 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003974:	2348      	movs	r3, #72	; 0x48
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800397c:	4619      	mov	r1, r3
 800397e:	481a      	ldr	r0, [pc, #104]	; (80039e8 <BSP_LCD_MspInit+0x1a0>)
 8003980:	f001 fa42 	bl	8004e08 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003984:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800398a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800398e:	4619      	mov	r1, r3
 8003990:	4816      	ldr	r0, [pc, #88]	; (80039ec <BSP_LCD_MspInit+0x1a4>)
 8003992:	f001 fa39 	bl	8004e08 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003996:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800399c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a0:	4619      	mov	r1, r3
 80039a2:	4813      	ldr	r0, [pc, #76]	; (80039f0 <BSP_LCD_MspInit+0x1a8>)
 80039a4:	f001 fa30 	bl	8004e08 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80039a8:	2303      	movs	r3, #3
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80039ac:	2309      	movs	r3, #9
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80039b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039b4:	4619      	mov	r1, r3
 80039b6:	480a      	ldr	r0, [pc, #40]	; (80039e0 <BSP_LCD_MspInit+0x198>)
 80039b8:	f001 fa26 	bl	8004e08 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80039bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80039c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c6:	4619      	mov	r1, r3
 80039c8:	4809      	ldr	r0, [pc, #36]	; (80039f0 <BSP_LCD_MspInit+0x1a8>)
 80039ca:	f001 fa1d 	bl	8004e08 <HAL_GPIO_Init>
}
 80039ce:	bf00      	nop
 80039d0:	3738      	adds	r7, #56	; 0x38
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40020000 	.word	0x40020000
 80039e0:	40020400 	.word	0x40020400
 80039e4:	40020800 	.word	0x40020800
 80039e8:	40020c00 	.word	0x40020c00
 80039ec:	40021400 	.word	0x40021400
 80039f0:	40021800 	.word	0x40021800

080039f4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80039f4:	b5b0      	push	{r4, r5, r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	603a      	str	r2, [r7, #0]
 80039fe:	80fb      	strh	r3, [r7, #6]
 8003a00:	460b      	mov	r3, r1
 8003a02:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <BSP_LCD_DrawPixel+0x80>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d018      	beq.n	8003a3e <BSP_LCD_DrawPixel+0x4a>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (76800 - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <BSP_LCD_DrawPixel+0x84>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1a      	ldr	r2, [pc, #104]	; (8003a7c <BSP_LCD_DrawPixel+0x88>)
 8003a12:	2134      	movs	r1, #52	; 0x34
 8003a14:	fb01 f303 	mul.w	r3, r1, r3
 8003a18:	4413      	add	r3, r2
 8003a1a:	335c      	adds	r3, #92	; 0x5c
 8003a1c:	681c      	ldr	r4, [r3, #0]
 8003a1e:	88fd      	ldrh	r5, [r7, #6]
 8003a20:	f7ff fc84 	bl	800332c <BSP_LCD_GetXSize>
 8003a24:	4602      	mov	r2, r0
 8003a26:	88bb      	ldrh	r3, [r7, #4]
 8003a28:	fb02 f303 	mul.w	r3, r2, r3
 8003a2c:	442b      	add	r3, r5
 8003a2e:	f5c3 3396 	rsb	r3, r3, #76800	; 0x12c00
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4423      	add	r3, r4
 8003a36:	461a      	mov	r2, r3
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003a3c:	e015      	b.n	8003a6a <BSP_LCD_DrawPixel+0x76>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <BSP_LCD_DrawPixel+0x84>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a0e      	ldr	r2, [pc, #56]	; (8003a7c <BSP_LCD_DrawPixel+0x88>)
 8003a44:	2134      	movs	r1, #52	; 0x34
 8003a46:	fb01 f303 	mul.w	r3, r1, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	335c      	adds	r3, #92	; 0x5c
 8003a4e:	681c      	ldr	r4, [r3, #0]
 8003a50:	88bd      	ldrh	r5, [r7, #4]
 8003a52:	f7ff fc6b 	bl	800332c <BSP_LCD_GetXSize>
 8003a56:	4603      	mov	r3, r0
 8003a58:	fb03 f205 	mul.w	r2, r3, r5
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	4413      	add	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4423      	add	r3, r4
 8003a64:	461a      	mov	r2, r3
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6013      	str	r3, [r2, #0]
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bdb0      	pop	{r4, r5, r7, pc}
 8003a72:	bf00      	nop
 8003a74:	200008d0 	.word	0x200008d0
 8003a78:	200008b0 	.word	0x200008b0
 8003a7c:	20000798 	.word	0x20000798

08003a80 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	603a      	str	r2, [r7, #0]
 8003a8a:	80fb      	strh	r3, [r7, #6]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <DrawChar+0x16c>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4953      	ldr	r1, [pc, #332]	; (8003bf0 <DrawChar+0x170>)
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3308      	adds	r3, #8
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	88db      	ldrh	r3, [r3, #6]
 8003ab2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003ab4:	4b4d      	ldr	r3, [pc, #308]	; (8003bec <DrawChar+0x16c>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	494d      	ldr	r1, [pc, #308]	; (8003bf0 <DrawChar+0x170>)
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3308      	adds	r3, #8
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	889b      	ldrh	r3, [r3, #4]
 8003aca:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003acc:	8a3b      	ldrh	r3, [r7, #16]
 8003ace:	3307      	adds	r3, #7
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	da00      	bge.n	8003ad6 <DrawChar+0x56>
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	10db      	asrs	r3, r3, #3
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	8a3b      	ldrh	r3, [r7, #16]
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	e076      	b.n	8003bda <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003aec:	8a3b      	ldrh	r3, [r7, #16]
 8003aee:	3307      	adds	r3, #7
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	da00      	bge.n	8003af6 <DrawChar+0x76>
 8003af4:	3307      	adds	r3, #7
 8003af6:	10db      	asrs	r3, r3, #3
 8003af8:	461a      	mov	r2, r3
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	4413      	add	r3, r2
 8003b04:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003b06:	8a3b      	ldrh	r3, [r7, #16]
 8003b08:	3307      	adds	r3, #7
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	da00      	bge.n	8003b10 <DrawChar+0x90>
 8003b0e:	3307      	adds	r3, #7
 8003b10:	10db      	asrs	r3, r3, #3
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d002      	beq.n	8003b1c <DrawChar+0x9c>
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d004      	beq.n	8003b24 <DrawChar+0xa4>
 8003b1a:	e00c      	b.n	8003b36 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	617b      	str	r3, [r7, #20]
      break;
 8003b22:	e016      	b.n	8003b52 <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	021b      	lsls	r3, r3, #8
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	3201      	adds	r2, #1
 8003b2e:	7812      	ldrb	r2, [r2, #0]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
      break;
 8003b34:	e00d      	b.n	8003b52 <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	041a      	lsls	r2, r3, #16
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	4313      	orrs	r3, r2
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	3202      	adds	r2, #2
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
      break;
 8003b50:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	e036      	b.n	8003bc6 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003b58:	8a3a      	ldrh	r2, [r7, #16]
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	1ad2      	subs	r2, r2, r3
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
 8003b60:	4413      	add	r3, r2
 8003b62:	3b01      	subs	r3, #1
 8003b64:	2201      	movs	r2, #1
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d012      	beq.n	8003b9a <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	88fb      	ldrh	r3, [r7, #6]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	b298      	uxth	r0, r3
 8003b7e:	4b1b      	ldr	r3, [pc, #108]	; (8003bec <DrawChar+0x16c>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	491b      	ldr	r1, [pc, #108]	; (8003bf0 <DrawChar+0x170>)
 8003b84:	4613      	mov	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	88bb      	ldrh	r3, [r7, #4]
 8003b92:	4619      	mov	r1, r3
 8003b94:	f7ff ff2e 	bl	80039f4 <BSP_LCD_DrawPixel>
 8003b98:	e012      	b.n	8003bc0 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	b298      	uxth	r0, r3
 8003ba4:	4b11      	ldr	r3, [pc, #68]	; (8003bec <DrawChar+0x16c>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4911      	ldr	r1, [pc, #68]	; (8003bf0 <DrawChar+0x170>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	88bb      	ldrh	r3, [r7, #4]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f7ff ff1a 	bl	80039f4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	8a3b      	ldrh	r3, [r7, #16]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d3c4      	bcc.n	8003b58 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003bce:	88bb      	ldrh	r3, [r7, #4]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
 8003bda:	8a7b      	ldrh	r3, [r7, #18]
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d384      	bcc.n	8003aec <DrawChar+0x6c>
  }
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	3720      	adds	r7, #32
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	200008b0 	.word	0x200008b0
 8003bf0:	200008b4 	.word	0x200008b4

08003bf4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003c02:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <FillBuffer+0x68>)
 8003c04:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c08:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <FillBuffer+0x68>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003c10:	4a12      	ldr	r2, [pc, #72]	; (8003c5c <FillBuffer+0x68>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003c16:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <FillBuffer+0x68>)
 8003c18:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <FillBuffer+0x6c>)
 8003c1a:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003c1c:	480f      	ldr	r0, [pc, #60]	; (8003c5c <FillBuffer+0x68>)
 8003c1e:	f000 fe5d 	bl	80048dc <HAL_DMA2D_Init>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d115      	bne.n	8003c54 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003c28:	68f9      	ldr	r1, [r7, #12]
 8003c2a:	480c      	ldr	r0, [pc, #48]	; (8003c5c <FillBuffer+0x68>)
 8003c2c:	f000 ffbe 	bl	8004bac <HAL_DMA2D_ConfigLayer>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10e      	bne.n	8003c54 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69f9      	ldr	r1, [r7, #28]
 8003c40:	4806      	ldr	r0, [pc, #24]	; (8003c5c <FillBuffer+0x68>)
 8003c42:	f000 fe9e 	bl	8004982 <HAL_DMA2D_Start>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d103      	bne.n	8003c54 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003c4c:	210a      	movs	r1, #10
 8003c4e:	4803      	ldr	r0, [pc, #12]	; (8003c5c <FillBuffer+0x68>)
 8003c50:	f000 fec2 	bl	80049d8 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000840 	.word	0x20000840
 8003c60:	4002b000 	.word	0x4002b000

08003c64 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003c68:	4b29      	ldr	r3, [pc, #164]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003c6a:	4a2a      	ldr	r2, [pc, #168]	; (8003d14 <BSP_SDRAM_Init+0xb0>)
 8003c6c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003c6e:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <BSP_SDRAM_Init+0xb4>)
 8003c70:	2202      	movs	r2, #2
 8003c72:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003c74:	4b28      	ldr	r3, [pc, #160]	; (8003d18 <BSP_SDRAM_Init+0xb4>)
 8003c76:	2207      	movs	r2, #7
 8003c78:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003c7a:	4b27      	ldr	r3, [pc, #156]	; (8003d18 <BSP_SDRAM_Init+0xb4>)
 8003c7c:	2204      	movs	r2, #4
 8003c7e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <BSP_SDRAM_Init+0xb4>)
 8003c82:	2207      	movs	r2, #7
 8003c84:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <BSP_SDRAM_Init+0xb4>)
 8003c88:	2202      	movs	r2, #2
 8003c8a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003c8c:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <BSP_SDRAM_Init+0xb4>)
 8003c8e:	2202      	movs	r2, #2
 8003c90:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003c92:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <BSP_SDRAM_Init+0xb4>)
 8003c94:	2202      	movs	r2, #2
 8003c96:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003c9e:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003caa:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003cac:	2210      	movs	r2, #16
 8003cae:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003cb0:	4b17      	ldr	r3, [pc, #92]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003cb2:	2240      	movs	r2, #64	; 0x40
 8003cb4:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003cb6:	4b16      	ldr	r3, [pc, #88]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003cb8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003cbc:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003cbe:	4b14      	ldr	r3, [pc, #80]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003cc4:	4b12      	ldr	r3, [pc, #72]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003cc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cca:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003ccc:	4b10      	ldr	r3, [pc, #64]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003cd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cd8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003cda:	2100      	movs	r1, #0
 8003cdc:	480c      	ldr	r0, [pc, #48]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003cde:	f000 f87f 	bl	8003de0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003ce2:	490d      	ldr	r1, [pc, #52]	; (8003d18 <BSP_SDRAM_Init+0xb4>)
 8003ce4:	480a      	ldr	r0, [pc, #40]	; (8003d10 <BSP_SDRAM_Init+0xac>)
 8003ce6:	f003 fb91 	bl	800740c <HAL_SDRAM_Init>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <BSP_SDRAM_Init+0xb8>)
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	e002      	b.n	8003cfe <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003cf8:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <BSP_SDRAM_Init+0xb8>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003cfe:	f240 506a 	movw	r0, #1386	; 0x56a
 8003d02:	f000 f80d 	bl	8003d20 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <BSP_SDRAM_Init+0xb8>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200008d4 	.word	0x200008d4
 8003d14:	a0000140 	.word	0xa0000140
 8003d18:	20000908 	.word	0x20000908
 8003d1c:	200002c0 	.word	0x200002c0

08003d20 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003d2c:	4b2a      	ldr	r3, [pc, #168]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003d32:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d34:	2208      	movs	r2, #8
 8003d36:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003d38:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003d3e:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d48:	4923      	ldr	r1, [pc, #140]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d4a:	4824      	ldr	r0, [pc, #144]	; (8003ddc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d4c:	f003 fb9c 	bl	8007488 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003d50:	2001      	movs	r0, #1
 8003d52:	f000 facf 	bl	80042f4 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003d56:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d58:	2202      	movs	r2, #2
 8003d5a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003d5c:	4b1e      	ldr	r3, [pc, #120]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d5e:	2208      	movs	r2, #8
 8003d60:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003d62:	4b1d      	ldr	r3, [pc, #116]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d72:	4919      	ldr	r1, [pc, #100]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d74:	4819      	ldr	r0, [pc, #100]	; (8003ddc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d76:	f003 fb87 	bl	8007488 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003d7a:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003d80:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d82:	2208      	movs	r2, #8
 8003d84:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003d86:	4b14      	ldr	r3, [pc, #80]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d88:	2204      	movs	r2, #4
 8003d8a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003d8c:	4b12      	ldr	r3, [pc, #72]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d96:	4910      	ldr	r1, [pc, #64]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d98:	4810      	ldr	r0, [pc, #64]	; (8003ddc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d9a:	f003 fb75 	bl	8007488 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8003d9e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003da2:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003da6:	2204      	movs	r2, #4
 8003da8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003daa:	4b0b      	ldr	r3, [pc, #44]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dac:	2208      	movs	r2, #8
 8003dae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4a07      	ldr	r2, [pc, #28]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dba:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dc0:	4905      	ldr	r1, [pc, #20]	; (8003dd8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dc2:	4806      	ldr	r0, [pc, #24]	; (8003ddc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003dc4:	f003 fb60 	bl	8007488 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4804      	ldr	r0, [pc, #16]	; (8003ddc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003dcc:	f003 fb87 	bl	80074de <HAL_SDRAM_ProgramRefreshRate>
}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000924 	.word	0x20000924
 8003ddc:	200008d4 	.word	0x200008d4

08003de0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b090      	sub	sp, #64	; 0x40
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80ec 	beq.w	8003fca <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df6:	4b77      	ldr	r3, [pc, #476]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	4a76      	ldr	r2, [pc, #472]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	6393      	str	r3, [r2, #56]	; 0x38
 8003e02:	4b74      	ldr	r3, [pc, #464]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	627b      	str	r3, [r7, #36]	; 0x24
 8003e12:	4b70      	ldr	r3, [pc, #448]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a6f      	ldr	r2, [pc, #444]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b6d      	ldr	r3, [pc, #436]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	627b      	str	r3, [r7, #36]	; 0x24
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	623b      	str	r3, [r7, #32]
 8003e2e:	4b69      	ldr	r3, [pc, #420]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a68      	ldr	r2, [pc, #416]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e34:	f043 0302 	orr.w	r3, r3, #2
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b66      	ldr	r3, [pc, #408]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	623b      	str	r3, [r7, #32]
 8003e44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	61fb      	str	r3, [r7, #28]
 8003e4a:	4b62      	ldr	r3, [pc, #392]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	4a61      	ldr	r2, [pc, #388]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e50:	f043 0304 	orr.w	r3, r3, #4
 8003e54:	6313      	str	r3, [r2, #48]	; 0x30
 8003e56:	4b5f      	ldr	r3, [pc, #380]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	4b5b      	ldr	r3, [pc, #364]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a5a      	ldr	r2, [pc, #360]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e6c:	f043 0308 	orr.w	r3, r3, #8
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b58      	ldr	r3, [pc, #352]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	4b54      	ldr	r3, [pc, #336]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4a53      	ldr	r2, [pc, #332]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e88:	f043 0310 	orr.w	r3, r3, #16
 8003e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8e:	4b51      	ldr	r3, [pc, #324]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f003 0310 	and.w	r3, r3, #16
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	4b4d      	ldr	r3, [pc, #308]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea2:	4a4c      	ldr	r2, [pc, #304]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ea4:	f043 0320 	orr.w	r3, r3, #32
 8003ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eaa:	4b4a      	ldr	r3, [pc, #296]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	f003 0320 	and.w	r3, r3, #32
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	4b46      	ldr	r3, [pc, #280]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	4a45      	ldr	r2, [pc, #276]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec6:	4b43      	ldr	r3, [pc, #268]	; (8003fd4 <BSP_SDRAM_MspInit+0x1f4>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003ede:	230c      	movs	r3, #12
 8003ee0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003ee2:	2360      	movs	r3, #96	; 0x60
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eea:	4619      	mov	r1, r3
 8003eec:	483a      	ldr	r0, [pc, #232]	; (8003fd8 <BSP_SDRAM_MspInit+0x1f8>)
 8003eee:	f000 ff8b 	bl	8004e08 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003ef6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003efa:	4619      	mov	r1, r3
 8003efc:	4837      	ldr	r0, [pc, #220]	; (8003fdc <BSP_SDRAM_MspInit+0x1fc>)
 8003efe:	f000 ff83 	bl	8004e08 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003f02:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4834      	ldr	r0, [pc, #208]	; (8003fe0 <BSP_SDRAM_MspInit+0x200>)
 8003f10:	f000 ff7a 	bl	8004e08 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003f14:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003f1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4830      	ldr	r0, [pc, #192]	; (8003fe4 <BSP_SDRAM_MspInit+0x204>)
 8003f22:	f000 ff71 	bl	8004e08 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003f26:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f30:	4619      	mov	r1, r3
 8003f32:	482d      	ldr	r0, [pc, #180]	; (8003fe8 <BSP_SDRAM_MspInit+0x208>)
 8003f34:	f000 ff68 	bl	8004e08 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003f38:	f248 1333 	movw	r3, #33075	; 0x8133
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003f3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f42:	4619      	mov	r1, r3
 8003f44:	4829      	ldr	r0, [pc, #164]	; (8003fec <BSP_SDRAM_MspInit+0x20c>)
 8003f46:	f000 ff5f 	bl	8004e08 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003f4a:	4b29      	ldr	r3, [pc, #164]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003f50:	4b27      	ldr	r3, [pc, #156]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003f56:	4b26      	ldr	r3, [pc, #152]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f5c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003f5e:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f64:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f66:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f6c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003f6e:	4b20      	ldr	r3, [pc, #128]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f74:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003f76:	4b1e      	ldr	r3, [pc, #120]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f7e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f82:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003f8a:	4b19      	ldr	r3, [pc, #100]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003f90:	4b17      	ldr	r3, [pc, #92]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003f96:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003f9c:	4b14      	ldr	r3, [pc, #80]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003f9e:	4a15      	ldr	r2, [pc, #84]	; (8003ff4 <BSP_SDRAM_MspInit+0x214>)
 8003fa0:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a12      	ldr	r2, [pc, #72]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fa8:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003fae:	4810      	ldr	r0, [pc, #64]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003fb0:	f000 fb84 	bl	80046bc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003fb4:	480e      	ldr	r0, [pc, #56]	; (8003ff0 <BSP_SDRAM_MspInit+0x210>)
 8003fb6:	f000 fad3 	bl	8004560 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003fba:	2200      	movs	r2, #0
 8003fbc:	210f      	movs	r1, #15
 8003fbe:	2038      	movs	r0, #56	; 0x38
 8003fc0:	f000 fa97 	bl	80044f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003fc4:	2038      	movs	r0, #56	; 0x38
 8003fc6:	f000 fab0 	bl	800452a <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003fca:	bf00      	nop
 8003fcc:	3740      	adds	r7, #64	; 0x40
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40020800 	.word	0x40020800
 8003fe0:	40020c00 	.word	0x40020c00
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40021400 	.word	0x40021400
 8003fec:	40021800 	.word	0x40021800
 8003ff0:	20000934 	.word	0x20000934
 8003ff4:	40026410 	.word	0x40026410

08003ff8 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	460a      	mov	r2, r1
 8004002:	80fb      	strh	r3, [r7, #6]
 8004004:	4613      	mov	r3, r2
 8004006:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 800400c:	4a13      	ldr	r2, [pc, #76]	; (800405c <BSP_TS_Init+0x64>)
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8004012:	4a13      	ldr	r2, [pc, #76]	; (8004060 <BSP_TS_Init+0x68>)
 8004014:	88bb      	ldrh	r3, [r7, #4]
 8004016:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004018:	4b12      	ldr	r3, [pc, #72]	; (8004064 <BSP_TS_Init+0x6c>)
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2082      	movs	r0, #130	; 0x82
 800401e:	4798      	blx	r3
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	f640 0311 	movw	r3, #2065	; 0x811
 8004028:	429a      	cmp	r2, r3
 800402a:	d104      	bne.n	8004036 <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 800402c:	4b0e      	ldr	r3, [pc, #56]	; (8004068 <BSP_TS_Init+0x70>)
 800402e:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <BSP_TS_Init+0x6c>)
 8004030:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8004036:	7bfb      	ldrb	r3, [r7, #15]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800403c:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <BSP_TS_Init+0x70>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2082      	movs	r0, #130	; 0x82
 8004044:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <BSP_TS_Init+0x70>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2082      	movs	r0, #130	; 0x82
 800404e:	4798      	blx	r3
  }

  return ret;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	20000998 	.word	0x20000998
 8004060:	2000099a 	.word	0x2000099a
 8004064:	20000270 	.word	0x20000270
 8004068:	20000994 	.word	0x20000994

0800406c <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <BSP_TS_ITGetStatus+0x14>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	2082      	movs	r0, #130	; 0x82
 8004078:	4798      	blx	r3
 800407a:	4603      	mov	r3, r0
}
 800407c:	4618      	mov	r0, r3
 800407e:	bd80      	pop	{r7, pc}
 8004080:	20000994 	.word	0x20000994

08004084 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800408c:	4b4f      	ldr	r3, [pc, #316]	; (80041cc <BSP_TS_GetState+0x148>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2082      	movs	r0, #130	; 0x82
 8004094:	4798      	blx	r3
 8004096:	4603      	mov	r3, r0
 8004098:	b29a      	uxth	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 808d 	beq.w	80041c2 <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 80040a8:	4b48      	ldr	r3, [pc, #288]	; (80041cc <BSP_TS_GetState+0x148>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f107 020c 	add.w	r2, r7, #12
 80040b2:	f107 010e 	add.w	r1, r7, #14
 80040b6:	2082      	movs	r0, #130	; 0x82
 80040b8:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 80040ba:	89bb      	ldrh	r3, [r7, #12]
 80040bc:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 80040c4:	89bb      	ldrh	r3, [r7, #12]
 80040c6:	4a42      	ldr	r2, [pc, #264]	; (80041d0 <BSP_TS_GetState+0x14c>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	08db      	lsrs	r3, r3, #3
 80040ce:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 80040d0:	8abb      	ldrh	r3, [r7, #20]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d102      	bne.n	80040dc <BSP_TS_GetState+0x58>
    {
      yr = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	82bb      	strh	r3, [r7, #20]
 80040da:	e008      	b.n	80040ee <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 80040dc:	4b3d      	ldr	r3, [pc, #244]	; (80041d4 <BSP_TS_GetState+0x150>)
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	8aba      	ldrh	r2, [r7, #20]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d903      	bls.n	80040ee <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 80040e6:	4b3b      	ldr	r3, [pc, #236]	; (80041d4 <BSP_TS_GetState+0x150>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	3b01      	subs	r3, #1
 80040ec:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 80040ee:	8abb      	ldrh	r3, [r7, #20]
 80040f0:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 80040f2:	89fb      	ldrh	r3, [r7, #14]
 80040f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d806      	bhi.n	800410a <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 80040fc:	89fb      	ldrh	r3, [r7, #14]
 80040fe:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8004102:	330e      	adds	r3, #14
 8004104:	b29b      	uxth	r3, r3
 8004106:	81fb      	strh	r3, [r7, #14]
 8004108:	e005      	b.n	8004116 <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 800410a:	89fb      	ldrh	r3, [r7, #14]
 800410c:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8004110:	3308      	adds	r3, #8
 8004112:	b29b      	uxth	r3, r3
 8004114:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8004116:	89fb      	ldrh	r3, [r7, #14]
 8004118:	4a2f      	ldr	r2, [pc, #188]	; (80041d8 <BSP_TS_GetState+0x154>)
 800411a:	fba2 2303 	umull	r2, r3, r2, r3
 800411e:	08db      	lsrs	r3, r3, #3
 8004120:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8004122:	8afb      	ldrh	r3, [r7, #22]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	82fb      	strh	r3, [r7, #22]
 800412c:	e008      	b.n	8004140 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 800412e:	4b2b      	ldr	r3, [pc, #172]	; (80041dc <BSP_TS_GetState+0x158>)
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	8afa      	ldrh	r2, [r7, #22]
 8004134:	429a      	cmp	r2, r3
 8004136:	d903      	bls.n	8004140 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8004138:	4b28      	ldr	r3, [pc, #160]	; (80041dc <BSP_TS_GetState+0x158>)
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	3b01      	subs	r3, #1
 800413e:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8004140:	8afb      	ldrh	r3, [r7, #22]
 8004142:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8004144:	89fb      	ldrh	r3, [r7, #14]
 8004146:	461a      	mov	r2, r3
 8004148:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <BSP_TS_GetState+0x15c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d906      	bls.n	800415e <BSP_TS_GetState+0xda>
 8004150:	89fa      	ldrh	r2, [r7, #14]
 8004152:	4b23      	ldr	r3, [pc, #140]	; (80041e0 <BSP_TS_GetState+0x15c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	b29b      	uxth	r3, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	b29b      	uxth	r3, r3
 800415c:	e005      	b.n	800416a <BSP_TS_GetState+0xe6>
 800415e:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <BSP_TS_GetState+0x15c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	b29a      	uxth	r2, r3
 8004164:	89fb      	ldrh	r3, [r7, #14]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	b29b      	uxth	r3, r3
 800416a:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 800416c:	89bb      	ldrh	r3, [r7, #12]
 800416e:	461a      	mov	r2, r3
 8004170:	4b1c      	ldr	r3, [pc, #112]	; (80041e4 <BSP_TS_GetState+0x160>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d906      	bls.n	8004186 <BSP_TS_GetState+0x102>
 8004178:	89ba      	ldrh	r2, [r7, #12]
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <BSP_TS_GetState+0x160>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	b29b      	uxth	r3, r3
 8004184:	e005      	b.n	8004192 <BSP_TS_GetState+0x10e>
 8004186:	4b17      	ldr	r3, [pc, #92]	; (80041e4 <BSP_TS_GetState+0x160>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	b29a      	uxth	r2, r3
 800418c:	89bb      	ldrh	r3, [r7, #12]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	b29b      	uxth	r3, r3
 8004192:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8004194:	8a7a      	ldrh	r2, [r7, #18]
 8004196:	8a3b      	ldrh	r3, [r7, #16]
 8004198:	4413      	add	r3, r2
 800419a:	2b05      	cmp	r3, #5
 800419c:	dd07      	ble.n	80041ae <BSP_TS_GetState+0x12a>
    {
      _x = x;
 800419e:	89fb      	ldrh	r3, [r7, #14]
 80041a0:	461a      	mov	r2, r3
 80041a2:	4b0f      	ldr	r3, [pc, #60]	; (80041e0 <BSP_TS_GetState+0x15c>)
 80041a4:	601a      	str	r2, [r3, #0]
      _y = y; 
 80041a6:	89bb      	ldrh	r3, [r7, #12]
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <BSP_TS_GetState+0x160>)
 80041ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <BSP_TS_GetState+0x15c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <BSP_TS_GetState+0x160>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	809a      	strh	r2, [r3, #4]
  }
}
 80041c2:	bf00      	nop
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000994 	.word	0x20000994
 80041d0:	ba2e8ba3 	.word	0xba2e8ba3
 80041d4:	2000099a 	.word	0x2000099a
 80041d8:	88888889 	.word	0x88888889
 80041dc:	20000998 	.word	0x20000998
 80041e0:	2000099c 	.word	0x2000099c
 80041e4:	200009a0 	.word	0x200009a0

080041e8 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <BSP_TS_ITClear+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	2082      	movs	r0, #130	; 0x82
 80041f4:	4798      	blx	r3
}
 80041f6:	bf00      	nop
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000994 	.word	0x20000994

08004200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004204:	4b0e      	ldr	r3, [pc, #56]	; (8004240 <HAL_Init+0x40>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a0d      	ldr	r2, [pc, #52]	; (8004240 <HAL_Init+0x40>)
 800420a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800420e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004210:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_Init+0x40>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <HAL_Init+0x40>)
 8004216:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800421a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800421c:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_Init+0x40>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a07      	ldr	r2, [pc, #28]	; (8004240 <HAL_Init+0x40>)
 8004222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004226:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004228:	2003      	movs	r0, #3
 800422a:	f000 f957 	bl	80044dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800422e:	200f      	movs	r0, #15
 8004230:	f000 f810 	bl	8004254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004234:	f000 f806 	bl	8004244 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40023c00 	.word	0x40023c00

08004244 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8004244:	b480      	push	{r7}
 8004246:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800425c:	4b12      	ldr	r3, [pc, #72]	; (80042a8 <HAL_InitTick+0x54>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_InitTick+0x58>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	4619      	mov	r1, r3
 8004266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800426a:	fbb3 f3f1 	udiv	r3, r3, r1
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f967 	bl	8004546 <HAL_SYSTICK_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e00e      	b.n	80042a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b0f      	cmp	r3, #15
 8004286:	d80a      	bhi.n	800429e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004288:	2200      	movs	r2, #0
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004290:	f000 f92f 	bl	80044f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004294:	4a06      	ldr	r2, [pc, #24]	; (80042b0 <HAL_InitTick+0x5c>)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	20000234 	.word	0x20000234
 80042ac:	200002c8 	.word	0x200002c8
 80042b0:	200002c4 	.word	0x200002c4

080042b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042b8:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_IncTick+0x20>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_IncTick+0x24>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4413      	add	r3, r2
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <HAL_IncTick+0x24>)
 80042c6:	6013      	str	r3, [r2, #0]
}
 80042c8:	bf00      	nop
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	200002c8 	.word	0x200002c8
 80042d8:	200009a4 	.word	0x200009a4

080042dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042dc:	b480      	push	{r7}
 80042de:	af00      	add	r7, sp, #0
  return uwTick;
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <HAL_GetTick+0x14>)
 80042e2:	681b      	ldr	r3, [r3, #0]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200009a4 	.word	0x200009a4

080042f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042fc:	f7ff ffee 	bl	80042dc <HAL_GetTick>
 8004300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800430c:	d005      	beq.n	800431a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800430e:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <HAL_Delay+0x44>)
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800431a:	bf00      	nop
 800431c:	f7ff ffde 	bl	80042dc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	429a      	cmp	r2, r3
 800432a:	d8f7      	bhi.n	800431c <HAL_Delay+0x28>
  {
  }
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	200002c8 	.word	0x200002c8

0800433c <__NVIC_SetPriorityGrouping>:
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <__NVIC_SetPriorityGrouping+0x44>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004358:	4013      	ands	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800436e:	4a04      	ldr	r2, [pc, #16]	; (8004380 <__NVIC_SetPriorityGrouping+0x44>)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	60d3      	str	r3, [r2, #12]
}
 8004374:	bf00      	nop
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	e000ed00 	.word	0xe000ed00

08004384 <__NVIC_GetPriorityGrouping>:
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004388:	4b04      	ldr	r3, [pc, #16]	; (800439c <__NVIC_GetPriorityGrouping+0x18>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	f003 0307 	and.w	r3, r3, #7
}
 8004392:	4618      	mov	r0, r3
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	e000ed00 	.word	0xe000ed00

080043a0 <__NVIC_EnableIRQ>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	4603      	mov	r3, r0
 80043a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	db0b      	blt.n	80043ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043b2:	79fb      	ldrb	r3, [r7, #7]
 80043b4:	f003 021f 	and.w	r2, r3, #31
 80043b8:	4907      	ldr	r1, [pc, #28]	; (80043d8 <__NVIC_EnableIRQ+0x38>)
 80043ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	2001      	movs	r0, #1
 80043c2:	fa00 f202 	lsl.w	r2, r0, r2
 80043c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	e000e100 	.word	0xe000e100

080043dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	4603      	mov	r3, r0
 80043e4:	6039      	str	r1, [r7, #0]
 80043e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	db0a      	blt.n	8004406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	490c      	ldr	r1, [pc, #48]	; (8004428 <__NVIC_SetPriority+0x4c>)
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	0112      	lsls	r2, r2, #4
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	440b      	add	r3, r1
 8004400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004404:	e00a      	b.n	800441c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4908      	ldr	r1, [pc, #32]	; (800442c <__NVIC_SetPriority+0x50>)
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	3b04      	subs	r3, #4
 8004414:	0112      	lsls	r2, r2, #4
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	440b      	add	r3, r1
 800441a:	761a      	strb	r2, [r3, #24]
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	e000e100 	.word	0xe000e100
 800442c:	e000ed00 	.word	0xe000ed00

08004430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004430:	b480      	push	{r7}
 8004432:	b089      	sub	sp, #36	; 0x24
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f1c3 0307 	rsb	r3, r3, #7
 800444a:	2b04      	cmp	r3, #4
 800444c:	bf28      	it	cs
 800444e:	2304      	movcs	r3, #4
 8004450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	3304      	adds	r3, #4
 8004456:	2b06      	cmp	r3, #6
 8004458:	d902      	bls.n	8004460 <NVIC_EncodePriority+0x30>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	3b03      	subs	r3, #3
 800445e:	e000      	b.n	8004462 <NVIC_EncodePriority+0x32>
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43da      	mvns	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	401a      	ands	r2, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	fa01 f303 	lsl.w	r3, r1, r3
 8004482:	43d9      	mvns	r1, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004488:	4313      	orrs	r3, r2
         );
}
 800448a:	4618      	mov	r0, r3
 800448c:	3724      	adds	r7, #36	; 0x24
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044a8:	d301      	bcc.n	80044ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044aa:	2301      	movs	r3, #1
 80044ac:	e00f      	b.n	80044ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044ae:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <SysTick_Config+0x40>)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80044b6:	210f      	movs	r1, #15
 80044b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044bc:	f7ff ff8e 	bl	80043dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <SysTick_Config+0x40>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <SysTick_Config+0x40>)
 80044c8:	2207      	movs	r2, #7
 80044ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	e000e010 	.word	0xe000e010

080044dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ff29 	bl	800433c <__NVIC_SetPriorityGrouping>
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	4603      	mov	r3, r0
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004504:	f7ff ff3e 	bl	8004384 <__NVIC_GetPriorityGrouping>
 8004508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	6978      	ldr	r0, [r7, #20]
 8004510:	f7ff ff8e 	bl	8004430 <NVIC_EncodePriority>
 8004514:	4602      	mov	r2, r0
 8004516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff ff5d 	bl	80043dc <__NVIC_SetPriority>
}
 8004522:	bf00      	nop
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	4603      	mov	r3, r0
 8004532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff ff31 	bl	80043a0 <__NVIC_EnableIRQ>
}
 800453e:	bf00      	nop
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ffa2 	bl	8004498 <SysTick_Config>
 8004554:	4603      	mov	r3, r0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800456c:	f7ff feb6 	bl	80042dc <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e099      	b.n	80046b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800459c:	e00f      	b.n	80045be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800459e:	f7ff fe9d 	bl	80042dc <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b05      	cmp	r3, #5
 80045aa:	d908      	bls.n	80045be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2220      	movs	r2, #32
 80045b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2203      	movs	r2, #3
 80045b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e078      	b.n	80046b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e8      	bne.n	800459e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <HAL_DMA_Init+0x158>)
 80045d8:	4013      	ands	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004614:	2b04      	cmp	r3, #4
 8004616:	d107      	bne.n	8004628 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004620:	4313      	orrs	r3, r2
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0307 	bic.w	r3, r3, #7
 800463e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	2b04      	cmp	r3, #4
 8004650:	d117      	bne.n	8004682 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00e      	beq.n	8004682 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f8bd 	bl	80047e4 <DMA_CheckFifoParam>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2240      	movs	r2, #64	; 0x40
 8004674:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800467e:	2301      	movs	r3, #1
 8004680:	e016      	b.n	80046b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f874 	bl	8004778 <DMA_CalcBaseAndBitshift>
 8004690:	4603      	mov	r3, r0
 8004692:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004698:	223f      	movs	r2, #63	; 0x3f
 800469a:	409a      	lsls	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	f010803f 	.word	0xf010803f

080046bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e050      	b.n	8004770 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d101      	bne.n	80046de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80046da:	2302      	movs	r3, #2
 80046dc:	e048      	b.n	8004770 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	2221      	movs	r2, #33	; 0x21
 800471c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 f82a 	bl	8004778 <DMA_CalcBaseAndBitshift>
 8004724:	4603      	mov	r3, r0
 8004726:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004750:	223f      	movs	r2, #63	; 0x3f
 8004752:	409a      	lsls	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	3b10      	subs	r3, #16
 8004788:	4a14      	ldr	r2, [pc, #80]	; (80047dc <DMA_CalcBaseAndBitshift+0x64>)
 800478a:	fba2 2303 	umull	r2, r3, r2, r3
 800478e:	091b      	lsrs	r3, r3, #4
 8004790:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004792:	4a13      	ldr	r2, [pc, #76]	; (80047e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d909      	bls.n	80047ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	1d1a      	adds	r2, r3, #4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	659a      	str	r2, [r3, #88]	; 0x58
 80047b8:	e007      	b.n	80047ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047c2:	f023 0303 	bic.w	r3, r3, #3
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	aaaaaaab 	.word	0xaaaaaaab
 80047e0:	0800efdc 	.word	0x0800efdc

080047e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d11f      	bne.n	800483e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d856      	bhi.n	80048b2 <DMA_CheckFifoParam+0xce>
 8004804:	a201      	add	r2, pc, #4	; (adr r2, 800480c <DMA_CheckFifoParam+0x28>)
 8004806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480a:	bf00      	nop
 800480c:	0800481d 	.word	0x0800481d
 8004810:	0800482f 	.word	0x0800482f
 8004814:	0800481d 	.word	0x0800481d
 8004818:	080048b3 	.word	0x080048b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d046      	beq.n	80048b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800482c:	e043      	b.n	80048b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004832:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004836:	d140      	bne.n	80048ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800483c:	e03d      	b.n	80048ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004846:	d121      	bne.n	800488c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2b03      	cmp	r3, #3
 800484c:	d837      	bhi.n	80048be <DMA_CheckFifoParam+0xda>
 800484e:	a201      	add	r2, pc, #4	; (adr r2, 8004854 <DMA_CheckFifoParam+0x70>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004865 	.word	0x08004865
 8004858:	0800486b 	.word	0x0800486b
 800485c:	08004865 	.word	0x08004865
 8004860:	0800487d 	.word	0x0800487d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	73fb      	strb	r3, [r7, #15]
      break;
 8004868:	e030      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d025      	beq.n	80048c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800487a:	e022      	b.n	80048c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004880:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004884:	d11f      	bne.n	80048c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800488a:	e01c      	b.n	80048c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b02      	cmp	r3, #2
 8004890:	d903      	bls.n	800489a <DMA_CheckFifoParam+0xb6>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d003      	beq.n	80048a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004898:	e018      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
      break;
 800489e:	e015      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00e      	beq.n	80048ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	73fb      	strb	r3, [r7, #15]
      break;
 80048b0:	e00b      	b.n	80048ca <DMA_CheckFifoParam+0xe6>
      break;
 80048b2:	bf00      	nop
 80048b4:	e00a      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
      break;
 80048b6:	bf00      	nop
 80048b8:	e008      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
      break;
 80048ba:	bf00      	nop
 80048bc:	e006      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
      break;
 80048be:	bf00      	nop
 80048c0:	e004      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
      break;
 80048c2:	bf00      	nop
 80048c4:	e002      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
      break;   
 80048c6:	bf00      	nop
 80048c8:	e000      	b.n	80048cc <DMA_CheckFifoParam+0xe8>
      break;
 80048ca:	bf00      	nop
    }
  } 
  
  return status; 
 80048cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop

080048dc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e03b      	b.n	8004966 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f833 	bl	800496e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492c:	f023 0107 	bic.w	r1, r3, #7
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004946:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	68d1      	ldr	r1, [r2, #12]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6812      	ldr	r2, [r2, #0]
 8004952:	430b      	orrs	r3, r1
 8004954:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af02      	add	r7, sp, #8
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_DMA2D_Start+0x1c>
 800499a:	2302      	movs	r3, #2
 800499c:	e018      	b.n	80049d0 <HAL_DMA2D_Start+0x4e>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2202      	movs	r2, #2
 80049aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f989 	bl	8004cd0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d056      	beq.n	8004aa2 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 80049f4:	f7ff fc72 	bl	80042dc <HAL_GetTick>
 80049f8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80049fa:	e04b      	b.n	8004a94 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d023      	beq.n	8004a56 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a1c:	f043 0202 	orr.w	r2, r3, #2
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2221      	movs	r2, #33	; 0x21
 8004a40:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2204      	movs	r2, #4
 8004a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0a5      	b.n	8004ba2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a5c:	d01a      	beq.n	8004a94 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004a5e:	f7ff fc3d 	bl	80042dc <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	683a      	ldr	r2, [r7, #0]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d302      	bcc.n	8004a74 <HAL_DMA2D_PollForTransfer+0x9c>
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10f      	bne.n	8004a94 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	f043 0220 	orr.w	r2, r3, #32
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2203      	movs	r2, #3
 8004a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e086      	b.n	8004ba2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0ac      	beq.n	80049fc <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d061      	beq.n	8004b88 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ac4:	f7ff fc0a 	bl	80042dc <HAL_GetTick>
 8004ac8:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004aca:	e056      	b.n	8004b7a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d02e      	beq.n	8004b3c <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aec:	f043 0204 	orr.w	r2, r3, #4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	f043 0202 	orr.w	r2, r3, #2
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b18:	f043 0201 	orr.w	r2, r3, #1
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2229      	movs	r2, #41	; 0x29
 8004b26:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2204      	movs	r2, #4
 8004b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e032      	b.n	8004ba2 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b42:	d01a      	beq.n	8004b7a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004b44:	f7ff fbca 	bl	80042dc <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <HAL_DMA2D_PollForTransfer+0x182>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5e:	f043 0220 	orr.w	r2, r3, #32
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2203      	movs	r2, #3
 8004b6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e013      	b.n	8004ba2 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0a1      	beq.n	8004acc <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2212      	movs	r2, #18
 8004b8e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b087      	sub	sp, #28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_DMA2D_ConfigLayer+0x20>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e079      	b.n	8004cc0 <HAL_DMA2D_ConfigLayer+0x114>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	3318      	adds	r3, #24
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	4413      	add	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004bf6:	4b35      	ldr	r3, [pc, #212]	; (8004ccc <HAL_DMA2D_ConfigLayer+0x120>)
 8004bf8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b0a      	cmp	r3, #10
 8004c00:	d003      	beq.n	8004c0a <HAL_DMA2D_ConfigLayer+0x5e>
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	2b09      	cmp	r3, #9
 8004c08:	d107      	bne.n	8004c1a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]
 8004c18:	e005      	b.n	8004c26 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	061b      	lsls	r3, r3, #24
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d120      	bne.n	8004c6e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	ea02 0103 	and.w	r1, r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b0a      	cmp	r3, #10
 8004c54:	d003      	beq.n	8004c5e <HAL_DMA2D_ConfigLayer+0xb2>
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b09      	cmp	r3, #9
 8004c5c:	d127      	bne.n	8004cae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c6c:	e01f      	b.n	8004cae <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	69da      	ldr	r2, [r3, #28]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	43db      	mvns	r3, r3
 8004c78:	ea02 0103 	and.w	r1, r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	2b0a      	cmp	r3, #10
 8004c96:	d003      	beq.n	8004ca0 <HAL_DMA2D_ConfigLayer+0xf4>
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b09      	cmp	r3, #9
 8004c9e:	d106      	bne.n	8004cae <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004cac:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	371c      	adds	r7, #28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	ff03000f 	.word	0xff03000f

08004cd0 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b08b      	sub	sp, #44	; 0x2c
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
 8004cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce4:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	041a      	lsls	r2, r3, #16
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d08:	d174      	bne.n	8004df4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004d10:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d18:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d20:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d108      	bne.n	8004d42 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d40:	e053      	b.n	8004dea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d106      	bne.n	8004d58 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
 8004d56:	e048      	b.n	8004dea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d111      	bne.n	8004d84 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	0cdb      	lsrs	r3, r3, #19
 8004d64:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	0a9b      	lsrs	r3, r3, #10
 8004d6a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	08db      	lsrs	r3, r3, #3
 8004d70:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	02db      	lsls	r3, r3, #11
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
 8004d82:	e032      	b.n	8004dea <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d117      	bne.n	8004dbc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	0fdb      	lsrs	r3, r3, #31
 8004d90:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	0cdb      	lsrs	r3, r3, #19
 8004d96:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	0adb      	lsrs	r3, r3, #11
 8004d9c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	08db      	lsrs	r3, r3, #3
 8004da2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	029b      	lsls	r3, r3, #10
 8004dac:	431a      	orrs	r2, r3
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	03db      	lsls	r3, r3, #15
 8004db2:	4313      	orrs	r3, r2
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dba:	e016      	b.n	8004dea <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	0f1b      	lsrs	r3, r3, #28
 8004dc0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	0d1b      	lsrs	r3, r3, #20
 8004dc6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	0b1b      	lsrs	r3, r3, #12
 8004dcc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	011a      	lsls	r2, r3, #4
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	031b      	lsls	r3, r3, #12
 8004de2:	4313      	orrs	r3, r2
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004df2:	e003      	b.n	8004dfc <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	60da      	str	r2, [r3, #12]
}
 8004dfc:	bf00      	nop
 8004dfe:	372c      	adds	r7, #44	; 0x2c
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b089      	sub	sp, #36	; 0x24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61fb      	str	r3, [r7, #28]
 8004e22:	e177      	b.n	8005114 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e24:	2201      	movs	r2, #1
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	4013      	ands	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	f040 8166 	bne.w	800510e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d00b      	beq.n	8004e62 <HAL_GPIO_Init+0x5a>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d007      	beq.n	8004e62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004e56:	2b11      	cmp	r3, #17
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b12      	cmp	r3, #18
 8004e60:	d130      	bne.n	8004ec4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	2203      	movs	r2, #3
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	43db      	mvns	r3, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	4013      	ands	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e98:	2201      	movs	r2, #1
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 0201 	and.w	r2, r3, #1
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	2203      	movs	r2, #3
 8004ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed4:	43db      	mvns	r3, r3
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	4013      	ands	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	005b      	lsls	r3, r3, #1
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d003      	beq.n	8004f04 <HAL_GPIO_Init+0xfc>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2b12      	cmp	r3, #18
 8004f02:	d123      	bne.n	8004f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	08da      	lsrs	r2, r3, #3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	3208      	adds	r2, #8
 8004f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	220f      	movs	r2, #15
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4013      	ands	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	fa02 f303 	lsl.w	r3, r2, r3
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	08da      	lsrs	r2, r3, #3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3208      	adds	r2, #8
 8004f46:	69b9      	ldr	r1, [r7, #24]
 8004f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	2203      	movs	r2, #3
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 0203 	and.w	r2, r3, #3
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69ba      	ldr	r2, [r7, #24]
 8004f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 80c0 	beq.w	800510e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	4b66      	ldr	r3, [pc, #408]	; (800512c <HAL_GPIO_Init+0x324>)
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	4a65      	ldr	r2, [pc, #404]	; (800512c <HAL_GPIO_Init+0x324>)
 8004f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f9e:	4b63      	ldr	r3, [pc, #396]	; (800512c <HAL_GPIO_Init+0x324>)
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004faa:	4a61      	ldr	r2, [pc, #388]	; (8005130 <HAL_GPIO_Init+0x328>)
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	3302      	adds	r3, #2
 8004fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	220f      	movs	r2, #15
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	43db      	mvns	r3, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a58      	ldr	r2, [pc, #352]	; (8005134 <HAL_GPIO_Init+0x32c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d037      	beq.n	8005046 <HAL_GPIO_Init+0x23e>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a57      	ldr	r2, [pc, #348]	; (8005138 <HAL_GPIO_Init+0x330>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d031      	beq.n	8005042 <HAL_GPIO_Init+0x23a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a56      	ldr	r2, [pc, #344]	; (800513c <HAL_GPIO_Init+0x334>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d02b      	beq.n	800503e <HAL_GPIO_Init+0x236>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a55      	ldr	r2, [pc, #340]	; (8005140 <HAL_GPIO_Init+0x338>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d025      	beq.n	800503a <HAL_GPIO_Init+0x232>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a54      	ldr	r2, [pc, #336]	; (8005144 <HAL_GPIO_Init+0x33c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d01f      	beq.n	8005036 <HAL_GPIO_Init+0x22e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a53      	ldr	r2, [pc, #332]	; (8005148 <HAL_GPIO_Init+0x340>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d019      	beq.n	8005032 <HAL_GPIO_Init+0x22a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a52      	ldr	r2, [pc, #328]	; (800514c <HAL_GPIO_Init+0x344>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <HAL_GPIO_Init+0x226>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a51      	ldr	r2, [pc, #324]	; (8005150 <HAL_GPIO_Init+0x348>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00d      	beq.n	800502a <HAL_GPIO_Init+0x222>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a50      	ldr	r2, [pc, #320]	; (8005154 <HAL_GPIO_Init+0x34c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <HAL_GPIO_Init+0x21e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a4f      	ldr	r2, [pc, #316]	; (8005158 <HAL_GPIO_Init+0x350>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <HAL_GPIO_Init+0x21a>
 800501e:	2309      	movs	r3, #9
 8005020:	e012      	b.n	8005048 <HAL_GPIO_Init+0x240>
 8005022:	230a      	movs	r3, #10
 8005024:	e010      	b.n	8005048 <HAL_GPIO_Init+0x240>
 8005026:	2308      	movs	r3, #8
 8005028:	e00e      	b.n	8005048 <HAL_GPIO_Init+0x240>
 800502a:	2307      	movs	r3, #7
 800502c:	e00c      	b.n	8005048 <HAL_GPIO_Init+0x240>
 800502e:	2306      	movs	r3, #6
 8005030:	e00a      	b.n	8005048 <HAL_GPIO_Init+0x240>
 8005032:	2305      	movs	r3, #5
 8005034:	e008      	b.n	8005048 <HAL_GPIO_Init+0x240>
 8005036:	2304      	movs	r3, #4
 8005038:	e006      	b.n	8005048 <HAL_GPIO_Init+0x240>
 800503a:	2303      	movs	r3, #3
 800503c:	e004      	b.n	8005048 <HAL_GPIO_Init+0x240>
 800503e:	2302      	movs	r3, #2
 8005040:	e002      	b.n	8005048 <HAL_GPIO_Init+0x240>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <HAL_GPIO_Init+0x240>
 8005046:	2300      	movs	r3, #0
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	f002 0203 	and.w	r2, r2, #3
 800504e:	0092      	lsls	r2, r2, #2
 8005050:	4093      	lsls	r3, r2
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4313      	orrs	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005058:	4935      	ldr	r1, [pc, #212]	; (8005130 <HAL_GPIO_Init+0x328>)
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	089b      	lsrs	r3, r3, #2
 800505e:	3302      	adds	r3, #2
 8005060:	69ba      	ldr	r2, [r7, #24]
 8005062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005066:	4b3d      	ldr	r3, [pc, #244]	; (800515c <HAL_GPIO_Init+0x354>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	43db      	mvns	r3, r3
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	4013      	ands	r3, r2
 8005074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800508a:	4a34      	ldr	r2, [pc, #208]	; (800515c <HAL_GPIO_Init+0x354>)
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005090:	4b32      	ldr	r3, [pc, #200]	; (800515c <HAL_GPIO_Init+0x354>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	43db      	mvns	r3, r3
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	4013      	ands	r3, r2
 800509e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050b4:	4a29      	ldr	r2, [pc, #164]	; (800515c <HAL_GPIO_Init+0x354>)
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050ba:	4b28      	ldr	r3, [pc, #160]	; (800515c <HAL_GPIO_Init+0x354>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	43db      	mvns	r3, r3
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	4013      	ands	r3, r2
 80050c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050de:	4a1f      	ldr	r2, [pc, #124]	; (800515c <HAL_GPIO_Init+0x354>)
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050e4:	4b1d      	ldr	r3, [pc, #116]	; (800515c <HAL_GPIO_Init+0x354>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005108:	4a14      	ldr	r2, [pc, #80]	; (800515c <HAL_GPIO_Init+0x354>)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3301      	adds	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	2b0f      	cmp	r3, #15
 8005118:	f67f ae84 	bls.w	8004e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	3724      	adds	r7, #36	; 0x24
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40023800 	.word	0x40023800
 8005130:	40013800 	.word	0x40013800
 8005134:	40020000 	.word	0x40020000
 8005138:	40020400 	.word	0x40020400
 800513c:	40020800 	.word	0x40020800
 8005140:	40020c00 	.word	0x40020c00
 8005144:	40021000 	.word	0x40021000
 8005148:	40021400 	.word	0x40021400
 800514c:	40021800 	.word	0x40021800
 8005150:	40021c00 	.word	0x40021c00
 8005154:	40022000 	.word	0x40022000
 8005158:	40022400 	.word	0x40022400
 800515c:	40013c00 	.word	0x40013c00

08005160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
 800516c:	4613      	mov	r3, r2
 800516e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005170:	787b      	ldrb	r3, [r7, #1]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005176:	887a      	ldrh	r2, [r7, #2]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800517c:	e003      	b.n	8005186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800517e:	887b      	ldrh	r3, [r7, #2]
 8005180:	041a      	lsls	r2, r3, #16
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	619a      	str	r2, [r3, #24]
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	460b      	mov	r3, r1
 800519c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	887b      	ldrh	r3, [r7, #2]
 80051a4:	401a      	ands	r2, r3
 80051a6:	887b      	ldrh	r3, [r7, #2]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d104      	bne.n	80051b6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051ac:	887b      	ldrh	r3, [r7, #2]
 80051ae:	041a      	lsls	r2, r3, #16
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80051b4:	e002      	b.n	80051bc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80051b6:	887a      	ldrh	r2, [r7, #2]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	619a      	str	r2, [r3, #24]
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e12b      	b.n	8005432 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f95d 	bl	80054ae <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2224      	movs	r2, #36	; 0x24
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0201 	bic.w	r2, r2, #1
 800520a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800521a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800522a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800522c:	f001 ff1a 	bl	8007064 <HAL_RCC_GetPCLK1Freq>
 8005230:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4a81      	ldr	r2, [pc, #516]	; (800543c <HAL_I2C_Init+0x274>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d807      	bhi.n	800524c <HAL_I2C_Init+0x84>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a80      	ldr	r2, [pc, #512]	; (8005440 <HAL_I2C_Init+0x278>)
 8005240:	4293      	cmp	r3, r2
 8005242:	bf94      	ite	ls
 8005244:	2301      	movls	r3, #1
 8005246:	2300      	movhi	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	e006      	b.n	800525a <HAL_I2C_Init+0x92>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4a7d      	ldr	r2, [pc, #500]	; (8005444 <HAL_I2C_Init+0x27c>)
 8005250:	4293      	cmp	r3, r2
 8005252:	bf94      	ite	ls
 8005254:	2301      	movls	r3, #1
 8005256:	2300      	movhi	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e0e7      	b.n	8005432 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4a78      	ldr	r2, [pc, #480]	; (8005448 <HAL_I2C_Init+0x280>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	0c9b      	lsrs	r3, r3, #18
 800526c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4a6a      	ldr	r2, [pc, #424]	; (800543c <HAL_I2C_Init+0x274>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d802      	bhi.n	800529c <HAL_I2C_Init+0xd4>
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	3301      	adds	r3, #1
 800529a:	e009      	b.n	80052b0 <HAL_I2C_Init+0xe8>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
 80052a6:	4a69      	ldr	r2, [pc, #420]	; (800544c <HAL_I2C_Init+0x284>)
 80052a8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ac:	099b      	lsrs	r3, r3, #6
 80052ae:	3301      	adds	r3, #1
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	430b      	orrs	r3, r1
 80052b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80052c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	495c      	ldr	r1, [pc, #368]	; (800543c <HAL_I2C_Init+0x274>)
 80052cc:	428b      	cmp	r3, r1
 80052ce:	d819      	bhi.n	8005304 <HAL_I2C_Init+0x13c>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1e59      	subs	r1, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	fbb1 f3f3 	udiv	r3, r1, r3
 80052de:	1c59      	adds	r1, r3, #1
 80052e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052e4:	400b      	ands	r3, r1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00a      	beq.n	8005300 <HAL_I2C_Init+0x138>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	1e59      	subs	r1, r3, #1
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80052f8:	3301      	adds	r3, #1
 80052fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052fe:	e051      	b.n	80053a4 <HAL_I2C_Init+0x1dc>
 8005300:	2304      	movs	r3, #4
 8005302:	e04f      	b.n	80053a4 <HAL_I2C_Init+0x1dc>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d111      	bne.n	8005330 <HAL_I2C_Init+0x168>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	1e58      	subs	r0, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6859      	ldr	r1, [r3, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	440b      	add	r3, r1
 800531a:	fbb0 f3f3 	udiv	r3, r0, r3
 800531e:	3301      	adds	r3, #1
 8005320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005324:	2b00      	cmp	r3, #0
 8005326:	bf0c      	ite	eq
 8005328:	2301      	moveq	r3, #1
 800532a:	2300      	movne	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	e012      	b.n	8005356 <HAL_I2C_Init+0x18e>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	1e58      	subs	r0, r3, #1
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6859      	ldr	r1, [r3, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	0099      	lsls	r1, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	fbb0 f3f3 	udiv	r3, r0, r3
 8005346:	3301      	adds	r3, #1
 8005348:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800534c:	2b00      	cmp	r3, #0
 800534e:	bf0c      	ite	eq
 8005350:	2301      	moveq	r3, #1
 8005352:	2300      	movne	r3, #0
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <HAL_I2C_Init+0x196>
 800535a:	2301      	movs	r3, #1
 800535c:	e022      	b.n	80053a4 <HAL_I2C_Init+0x1dc>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10e      	bne.n	8005384 <HAL_I2C_Init+0x1bc>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1e58      	subs	r0, r3, #1
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6859      	ldr	r1, [r3, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	440b      	add	r3, r1
 8005374:	fbb0 f3f3 	udiv	r3, r0, r3
 8005378:	3301      	adds	r3, #1
 800537a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800537e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005382:	e00f      	b.n	80053a4 <HAL_I2C_Init+0x1dc>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1e58      	subs	r0, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6859      	ldr	r1, [r3, #4]
 800538c:	460b      	mov	r3, r1
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	0099      	lsls	r1, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	fbb0 f3f3 	udiv	r3, r0, r3
 800539a:	3301      	adds	r3, #1
 800539c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	6809      	ldr	r1, [r1, #0]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	69da      	ldr	r2, [r3, #28]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80053d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	6911      	ldr	r1, [r2, #16]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68d2      	ldr	r2, [r2, #12]
 80053de:	4311      	orrs	r1, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695a      	ldr	r2, [r3, #20]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	000186a0 	.word	0x000186a0
 8005440:	001e847f 	.word	0x001e847f
 8005444:	003d08ff 	.word	0x003d08ff
 8005448:	431bde83 	.word	0x431bde83
 800544c:	10624dd3 	.word	0x10624dd3

08005450 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d101      	bne.n	8005462 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e021      	b.n	80054a6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2224      	movs	r2, #36	; 0x24
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 0201 	bic.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f821 	bl	80054c2 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
	...

080054d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	4608      	mov	r0, r1
 80054e2:	4611      	mov	r1, r2
 80054e4:	461a      	mov	r2, r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	817b      	strh	r3, [r7, #10]
 80054ea:	460b      	mov	r3, r1
 80054ec:	813b      	strh	r3, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054f2:	f7fe fef3 	bl	80042dc <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b20      	cmp	r3, #32
 8005502:	f040 80d9 	bne.w	80056b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	2319      	movs	r3, #25
 800550c:	2201      	movs	r2, #1
 800550e:	496d      	ldr	r1, [pc, #436]	; (80056c4 <HAL_I2C_Mem_Write+0x1ec>)
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 fc89 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800551c:	2302      	movs	r3, #2
 800551e:	e0cc      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005526:	2b01      	cmp	r3, #1
 8005528:	d101      	bne.n	800552e <HAL_I2C_Mem_Write+0x56>
 800552a:	2302      	movs	r3, #2
 800552c:	e0c5      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b01      	cmp	r3, #1
 8005542:	d007      	beq.n	8005554 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2221      	movs	r2, #33	; 0x21
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2240      	movs	r2, #64	; 0x40
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4a4d      	ldr	r2, [pc, #308]	; (80056c8 <HAL_I2C_Mem_Write+0x1f0>)
 8005594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005596:	88f8      	ldrh	r0, [r7, #6]
 8005598:	893a      	ldrh	r2, [r7, #8]
 800559a:	8979      	ldrh	r1, [r7, #10]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	9301      	str	r3, [sp, #4]
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	4603      	mov	r3, r0
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fac4 	bl	8005b34 <I2C_RequestMemoryWrite>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d052      	beq.n	8005658 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e081      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fd0a 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00d      	beq.n	80055e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d107      	bne.n	80055de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e06b      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	781a      	ldrb	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b04      	cmp	r3, #4
 800561e:	d11b      	bne.n	8005658 <HAL_I2C_Mem_Write+0x180>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005624:	2b00      	cmp	r3, #0
 8005626:	d017      	beq.n	8005658 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1aa      	bne.n	80055b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 fcf6 	bl	8006056 <I2C_WaitOnBTFFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00d      	beq.n	800568c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005674:	2b04      	cmp	r3, #4
 8005676:	d107      	bne.n	8005688 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005686:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e016      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800569a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e000      	b.n	80056ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80056b8:	2302      	movs	r3, #2
  }
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	00100002 	.word	0x00100002
 80056c8:	ffff0000 	.word	0xffff0000

080056cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08c      	sub	sp, #48	; 0x30
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	4603      	mov	r3, r0
 80056dc:	817b      	strh	r3, [r7, #10]
 80056de:	460b      	mov	r3, r1
 80056e0:	813b      	strh	r3, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056e6:	f7fe fdf9 	bl	80042dc <HAL_GetTick>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	f040 8208 	bne.w	8005b0a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	2319      	movs	r3, #25
 8005700:	2201      	movs	r2, #1
 8005702:	497b      	ldr	r1, [pc, #492]	; (80058f0 <HAL_I2C_Mem_Read+0x224>)
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f000 fb8f 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d001      	beq.n	8005714 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005710:	2302      	movs	r3, #2
 8005712:	e1fb      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_I2C_Mem_Read+0x56>
 800571e:	2302      	movs	r3, #2
 8005720:	e1f4      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d007      	beq.n	8005748 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005756:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2222      	movs	r2, #34	; 0x22
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2240      	movs	r2, #64	; 0x40
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29a      	uxth	r2, r3
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	4a5b      	ldr	r2, [pc, #364]	; (80058f4 <HAL_I2C_Mem_Read+0x228>)
 8005788:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800578a:	88f8      	ldrh	r0, [r7, #6]
 800578c:	893a      	ldrh	r2, [r7, #8]
 800578e:	8979      	ldrh	r1, [r7, #10]
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	9301      	str	r3, [sp, #4]
 8005794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	4603      	mov	r3, r0
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 fa5e 	bl	8005c5c <I2C_RequestMemoryRead>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e1b0      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d113      	bne.n	80057da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b2:	2300      	movs	r3, #0
 80057b4:	623b      	str	r3, [r7, #32]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	623b      	str	r3, [r7, #32]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	623b      	str	r3, [r7, #32]
 80057c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d6:	601a      	str	r2, [r3, #0]
 80057d8:	e184      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d11b      	bne.n	800581a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	61fb      	str	r3, [r7, #28]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005816:	601a      	str	r2, [r3, #0]
 8005818:	e164      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800581e:	2b02      	cmp	r3, #2
 8005820:	d11b      	bne.n	800585a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005830:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005842:	2300      	movs	r3, #0
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	695b      	ldr	r3, [r3, #20]
 800584c:	61bb      	str	r3, [r7, #24]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	e144      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005870:	e138      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005876:	2b03      	cmp	r3, #3
 8005878:	f200 80f1 	bhi.w	8005a5e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005880:	2b01      	cmp	r3, #1
 8005882:	d123      	bne.n	80058cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005886:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 fc25 	bl	80060d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e139      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	691a      	ldr	r2, [r3, #16]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ca:	e10b      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d14e      	bne.n	8005972 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058da:	2200      	movs	r2, #0
 80058dc:	4906      	ldr	r1, [pc, #24]	; (80058f8 <HAL_I2C_Mem_Read+0x22c>)
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 faa2 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d008      	beq.n	80058fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e10e      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
 80058ee:	bf00      	nop
 80058f0:	00100002 	.word	0x00100002
 80058f4:	ffff0000 	.word	0xffff0000
 80058f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800590a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005928:	3b01      	subs	r3, #1
 800592a:	b29a      	uxth	r2, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	b2d2      	uxtb	r2, r2
 800594a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005970:	e0b8      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2200      	movs	r2, #0
 800597a:	4966      	ldr	r1, [pc, #408]	; (8005b14 <HAL_I2C_Mem_Read+0x448>)
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fa53 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e0bf      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800599a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2200      	movs	r2, #0
 80059d6:	494f      	ldr	r1, [pc, #316]	; (8005b14 <HAL_I2C_Mem_Read+0x448>)
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 fa25 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e091      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691a      	ldr	r2, [r3, #16]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a14:	3b01      	subs	r3, #1
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	b2d2      	uxtb	r2, r2
 8005a36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	1c5a      	adds	r2, r3, #1
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a5c:	e042      	b.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 fb38 	bl	80060d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d001      	beq.n	8005a72 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e04c      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7c:	b2d2      	uxtb	r2, r2
 8005a7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	1c5a      	adds	r2, r3, #1
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0304 	and.w	r3, r3, #4
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d118      	bne.n	8005ae4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691a      	ldr	r2, [r3, #16]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	b2d2      	uxtb	r2, r2
 8005abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	3b01      	subs	r3, #1
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f47f aec2 	bne.w	8005872 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2220      	movs	r2, #32
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e000      	b.n	8005b0c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005b0a:	2302      	movs	r3, #2
  }
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3728      	adds	r7, #40	; 0x28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	00010004 	.word	0x00010004

08005b18 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b26:	b2db      	uxtb	r3, r3
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af02      	add	r7, sp, #8
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	4608      	mov	r0, r1
 8005b3e:	4611      	mov	r1, r2
 8005b40:	461a      	mov	r2, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	817b      	strh	r3, [r7, #10]
 8005b46:	460b      	mov	r3, r1
 8005b48:	813b      	strh	r3, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 f95c 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005b70:	4603      	mov	r3, r0
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00c      	beq.n	8005b90 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d003      	beq.n	8005b8c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e05f      	b.n	8005c50 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b90:	897b      	ldrh	r3, [r7, #10]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	461a      	mov	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b9e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba2:	6a3a      	ldr	r2, [r7, #32]
 8005ba4:	492c      	ldr	r1, [pc, #176]	; (8005c58 <I2C_RequestMemoryWrite+0x124>)
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f000 f995 	bl	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e04c      	b.n	8005c50 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bce:	6a39      	ldr	r1, [r7, #32]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f9ff 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d00d      	beq.n	8005bf8 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	2b04      	cmp	r3, #4
 8005be2:	d107      	bne.n	8005bf4 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e02b      	b.n	8005c50 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d105      	bne.n	8005c0a <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bfe:	893b      	ldrh	r3, [r7, #8]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]
 8005c08:	e021      	b.n	8005c4e <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005c0a:	893b      	ldrh	r3, [r7, #8]
 8005c0c:	0a1b      	lsrs	r3, r3, #8
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c1a:	6a39      	ldr	r1, [r7, #32]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f9d9 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00d      	beq.n	8005c44 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d107      	bne.n	8005c40 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e005      	b.n	8005c50 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c44:	893b      	ldrh	r3, [r7, #8]
 8005c46:	b2da      	uxtb	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	00010002 	.word	0x00010002

08005c5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	4608      	mov	r0, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	817b      	strh	r3, [r7, #10]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	813b      	strh	r3, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f8c0 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00c      	beq.n	8005cc8 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e0a9      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cc8:	897b      	ldrh	r3, [r7, #10]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	461a      	mov	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005cd6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cda:	6a3a      	ldr	r2, [r7, #32]
 8005cdc:	4951      	ldr	r1, [pc, #324]	; (8005e24 <I2C_RequestMemoryRead+0x1c8>)
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f8f9 	bl	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e096      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	617b      	str	r3, [r7, #20]
 8005d02:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d06:	6a39      	ldr	r1, [r7, #32]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f963 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00d      	beq.n	8005d30 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d18:	2b04      	cmp	r3, #4
 8005d1a:	d107      	bne.n	8005d2c <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e075      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d105      	bne.n	8005d42 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d36:	893b      	ldrh	r3, [r7, #8]
 8005d38:	b2da      	uxtb	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	611a      	str	r2, [r3, #16]
 8005d40:	e021      	b.n	8005d86 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d42:	893b      	ldrh	r3, [r7, #8]
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d52:	6a39      	ldr	r1, [r7, #32]
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f000 f93d 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00d      	beq.n	8005d7c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	2b04      	cmp	r3, #4
 8005d66:	d107      	bne.n	8005d78 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e04f      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d7c:	893b      	ldrh	r3, [r7, #8]
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d88:	6a39      	ldr	r1, [r7, #32]
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f922 	bl	8005fd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d107      	bne.n	8005dae <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e034      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f82a 	bl	8005e28 <I2C_WaitOnFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00c      	beq.n	8005df4 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e013      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005df4:	897b      	ldrh	r3, [r7, #10]
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	f043 0301 	orr.w	r3, r3, #1
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e06:	6a3a      	ldr	r2, [r7, #32]
 8005e08:	4906      	ldr	r1, [pc, #24]	; (8005e24 <I2C_RequestMemoryRead+0x1c8>)
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f000 f863 	bl	8005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d001      	beq.n	8005e1a <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e000      	b.n	8005e1c <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	00010002 	.word	0x00010002

08005e28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	4613      	mov	r3, r2
 8005e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e38:	e025      	b.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e40:	d021      	beq.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e42:	f7fe fa4b 	bl	80042dc <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	1ad3      	subs	r3, r2, r3
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d302      	bcc.n	8005e58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d116      	bne.n	8005e86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e72:	f043 0220 	orr.w	r2, r3, #32
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e023      	b.n	8005ece <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	0c1b      	lsrs	r3, r3, #16
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d10d      	bne.n	8005eac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	43da      	mvns	r2, r3
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bf0c      	ite	eq
 8005ea2:	2301      	moveq	r3, #1
 8005ea4:	2300      	movne	r3, #0
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	e00c      	b.n	8005ec6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	43da      	mvns	r2, r3
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d0b6      	beq.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
 8005ee2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ee4:	e051      	b.n	8005f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef4:	d123      	bne.n	8005f3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f043 0204 	orr.w	r2, r3, #4
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e046      	b.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f44:	d021      	beq.n	8005f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f46:	f7fe f9c9 	bl	80042dc <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d302      	bcc.n	8005f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d116      	bne.n	8005f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2220      	movs	r2, #32
 8005f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f043 0220 	orr.w	r2, r3, #32
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e020      	b.n	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d10c      	bne.n	8005fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	43da      	mvns	r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bf14      	ite	ne
 8005fa6:	2301      	movne	r3, #1
 8005fa8:	2300      	moveq	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	e00b      	b.n	8005fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	43da      	mvns	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bf14      	ite	ne
 8005fc0:	2301      	movne	r3, #1
 8005fc2:	2300      	moveq	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d18d      	bne.n	8005ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fe0:	e02d      	b.n	800603e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f8ce 	bl	8006184 <I2C_IsAcknowledgeFailed>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e02d      	b.n	800604e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff8:	d021      	beq.n	800603e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ffa:	f7fe f96f 	bl	80042dc <HAL_GetTick>
 8005ffe:	4602      	mov	r2, r0
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	429a      	cmp	r2, r3
 8006008:	d302      	bcc.n	8006010 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d116      	bne.n	800603e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2220      	movs	r2, #32
 800601a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f043 0220 	orr.w	r2, r3, #32
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e007      	b.n	800604e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d1ca      	bne.n	8005fe2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006062:	e02d      	b.n	80060c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f88d 	bl	8006184 <I2C_IsAcknowledgeFailed>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e02d      	b.n	80060d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800607a:	d021      	beq.n	80060c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607c:	f7fe f92e 	bl	80042dc <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	429a      	cmp	r2, r3
 800608a:	d302      	bcc.n	8006092 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d116      	bne.n	80060c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2220      	movs	r2, #32
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	f043 0220 	orr.w	r2, r3, #32
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e007      	b.n	80060d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	2b04      	cmp	r3, #4
 80060cc:	d1ca      	bne.n	8006064 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060e4:	e042      	b.n	800616c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	f003 0310 	and.w	r3, r3, #16
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d119      	bne.n	8006128 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0210 	mvn.w	r2, #16
 80060fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2220      	movs	r2, #32
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e029      	b.n	800617c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006128:	f7fe f8d8 	bl	80042dc <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d116      	bne.n	800616c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	f043 0220 	orr.w	r2, r3, #32
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e007      	b.n	800617c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d1b5      	bne.n	80060e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800619a:	d11b      	bne.n	80061d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f043 0204 	orr.w	r2, r3, #4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e000      	b.n	80061d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
	...

080061e4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e0bf      	b.n	8006376 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f8ba 	bl	8006384 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006226:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6999      	ldr	r1, [r3, #24]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800623c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6899      	ldr	r1, [r3, #8]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4b4a      	ldr	r3, [pc, #296]	; (8006380 <HAL_LTDC_Init+0x19c>)
 8006258:	400b      	ands	r3, r1
 800625a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	695b      	ldr	r3, [r3, #20]
 8006260:	041b      	lsls	r3, r3, #16
 8006262:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6899      	ldr	r1, [r3, #8]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	431a      	orrs	r2, r3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68d9      	ldr	r1, [r3, #12]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	4b3e      	ldr	r3, [pc, #248]	; (8006380 <HAL_LTDC_Init+0x19c>)
 8006286:	400b      	ands	r3, r1
 8006288:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	041b      	lsls	r3, r3, #16
 8006290:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68d9      	ldr	r1, [r3, #12]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	431a      	orrs	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	430a      	orrs	r2, r1
 80062a6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6919      	ldr	r1, [r3, #16]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	4b33      	ldr	r3, [pc, #204]	; (8006380 <HAL_LTDC_Init+0x19c>)
 80062b4:	400b      	ands	r3, r1
 80062b6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	041b      	lsls	r3, r3, #16
 80062be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6919      	ldr	r1, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	6959      	ldr	r1, [r3, #20]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	4b27      	ldr	r3, [pc, #156]	; (8006380 <HAL_LTDC_Init+0x19c>)
 80062e2:	400b      	ands	r3, r1
 80062e4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	041b      	lsls	r3, r3, #16
 80062ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6959      	ldr	r1, [r3, #20]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006326:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0206 	orr.w	r2, r2, #6
 8006352:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f042 0201 	orr.w	r2, r2, #1
 8006362:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	f000f800 	.word	0xf000f800

08006384 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006398:	b5b0      	push	{r4, r5, r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_LTDC_ConfigLayer+0x1a>
 80063ae:	2302      	movs	r3, #2
 80063b0:	e02c      	b.n	800640c <HAL_LTDC_ConfigLayer+0x74>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2202      	movs	r2, #2
 80063be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2134      	movs	r1, #52	; 0x34
 80063c8:	fb01 f303 	mul.w	r3, r1, r3
 80063cc:	4413      	add	r3, r2
 80063ce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	4614      	mov	r4, r2
 80063d6:	461d      	mov	r5, r3
 80063d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063e4:	682b      	ldr	r3, [r5, #0]
 80063e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	68b9      	ldr	r1, [r7, #8]
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 f83b 	bl	8006468 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2201      	movs	r2, #1
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bdb0      	pop	{r4, r5, r7, pc}

08006414 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_LTDC_EnableDither+0x16>
 8006426:	2302      	movs	r3, #2
 8006428:	e016      	b.n	8006458 <HAL_LTDC_EnableDither+0x44>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 800643a:	4b0a      	ldr	r3, [pc, #40]	; (8006464 <HAL_LTDC_EnableDither+0x50>)
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	4a09      	ldr	r2, [pc, #36]	; (8006464 <HAL_LTDC_EnableDither+0x50>)
 8006440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006444:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	40016800 	.word	0x40016800

08006468 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006468:	b480      	push	{r7}
 800646a:	b089      	sub	sp, #36	; 0x24
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	685a      	ldr	r2, [r3, #4]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	0c1b      	lsrs	r3, r3, #16
 8006480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006484:	4413      	add	r3, r2
 8006486:	041b      	lsls	r3, r3, #16
 8006488:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	461a      	mov	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	01db      	lsls	r3, r3, #7
 8006494:	4413      	add	r3, r2
 8006496:	3384      	adds	r3, #132	; 0x84
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	4611      	mov	r1, r2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	01d2      	lsls	r2, r2, #7
 80064a4:	440a      	add	r2, r1
 80064a6:	3284      	adds	r2, #132	; 0x84
 80064a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80064ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	0c1b      	lsrs	r3, r3, #16
 80064ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064be:	4413      	add	r3, r2
 80064c0:	1c5a      	adds	r2, r3, #1
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4619      	mov	r1, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	01db      	lsls	r3, r3, #7
 80064cc:	440b      	add	r3, r1
 80064ce:	3384      	adds	r3, #132	; 0x84
 80064d0:	4619      	mov	r1, r3
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064e6:	4413      	add	r3, r2
 80064e8:	041b      	lsls	r3, r3, #16
 80064ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	461a      	mov	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	01db      	lsls	r3, r3, #7
 80064f6:	4413      	add	r3, r2
 80064f8:	3384      	adds	r3, #132	; 0x84
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	4611      	mov	r1, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	01d2      	lsls	r2, r2, #7
 8006506:	440a      	add	r2, r1
 8006508:	3284      	adds	r2, #132	; 0x84
 800650a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800650e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800651e:	4413      	add	r3, r2
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4619      	mov	r1, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	01db      	lsls	r3, r3, #7
 800652c:	440b      	add	r3, r1
 800652e:	3384      	adds	r3, #132	; 0x84
 8006530:	4619      	mov	r1, r3
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4313      	orrs	r3, r2
 8006536:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	461a      	mov	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	01db      	lsls	r3, r3, #7
 8006542:	4413      	add	r3, r2
 8006544:	3384      	adds	r3, #132	; 0x84
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	4611      	mov	r1, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	01d2      	lsls	r2, r2, #7
 8006552:	440a      	add	r2, r1
 8006554:	3284      	adds	r2, #132	; 0x84
 8006556:	f023 0307 	bic.w	r3, r3, #7
 800655a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	461a      	mov	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	01db      	lsls	r3, r3, #7
 8006566:	4413      	add	r3, r2
 8006568:	3384      	adds	r3, #132	; 0x84
 800656a:	461a      	mov	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006582:	041b      	lsls	r3, r3, #16
 8006584:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	061b      	lsls	r3, r3, #24
 800658c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	01db      	lsls	r3, r3, #7
 8006598:	4413      	add	r3, r2
 800659a:	3384      	adds	r3, #132	; 0x84
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	01db      	lsls	r3, r3, #7
 80065a8:	4413      	add	r3, r2
 80065aa:	3384      	adds	r3, #132	; 0x84
 80065ac:	461a      	mov	r2, r3
 80065ae:	2300      	movs	r3, #0
 80065b0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80065b8:	461a      	mov	r2, r3
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	431a      	orrs	r2, r3
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4619      	mov	r1, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	01db      	lsls	r3, r3, #7
 80065cc:	440b      	add	r3, r1
 80065ce:	3384      	adds	r3, #132	; 0x84
 80065d0:	4619      	mov	r1, r3
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	01db      	lsls	r3, r3, #7
 80065e2:	4413      	add	r3, r2
 80065e4:	3384      	adds	r3, #132	; 0x84
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	4611      	mov	r1, r2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	01d2      	lsls	r2, r2, #7
 80065f2:	440a      	add	r2, r1
 80065f4:	3284      	adds	r2, #132	; 0x84
 80065f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80065fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	461a      	mov	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	01db      	lsls	r3, r3, #7
 8006606:	4413      	add	r3, r2
 8006608:	3384      	adds	r3, #132	; 0x84
 800660a:	461a      	mov	r2, r3
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	01db      	lsls	r3, r3, #7
 800661c:	4413      	add	r3, r2
 800661e:	3384      	adds	r3, #132	; 0x84
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	4611      	mov	r1, r2
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	01d2      	lsls	r2, r2, #7
 800662c:	440a      	add	r2, r1
 800662e:	3284      	adds	r2, #132	; 0x84
 8006630:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006634:	f023 0307 	bic.w	r3, r3, #7
 8006638:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	69da      	ldr	r2, [r3, #28]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	6809      	ldr	r1, [r1, #0]
 8006646:	4608      	mov	r0, r1
 8006648:	6879      	ldr	r1, [r7, #4]
 800664a:	01c9      	lsls	r1, r1, #7
 800664c:	4401      	add	r1, r0
 800664e:	3184      	adds	r1, #132	; 0x84
 8006650:	4313      	orrs	r3, r2
 8006652:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	461a      	mov	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	01db      	lsls	r3, r3, #7
 800665e:	4413      	add	r3, r2
 8006660:	3384      	adds	r3, #132	; 0x84
 8006662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	461a      	mov	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	01db      	lsls	r3, r3, #7
 800666e:	4413      	add	r3, r2
 8006670:	3384      	adds	r3, #132	; 0x84
 8006672:	461a      	mov	r2, r3
 8006674:	2300      	movs	r3, #0
 8006676:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	461a      	mov	r2, r3
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	01db      	lsls	r3, r3, #7
 8006682:	4413      	add	r3, r2
 8006684:	3384      	adds	r3, #132	; 0x84
 8006686:	461a      	mov	r2, r3
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d102      	bne.n	800669c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006696:	2304      	movs	r3, #4
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	e01b      	b.n	80066d4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d102      	bne.n	80066aa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80066a4:	2303      	movs	r3, #3
 80066a6:	61fb      	str	r3, [r7, #28]
 80066a8:	e014      	b.n	80066d4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d00b      	beq.n	80066ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d007      	beq.n	80066ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d003      	beq.n	80066ca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80066c6:	2b07      	cmp	r3, #7
 80066c8:	d102      	bne.n	80066d0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80066ca:	2302      	movs	r3, #2
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	e001      	b.n	80066d4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80066d0:	2301      	movs	r3, #1
 80066d2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	01db      	lsls	r3, r3, #7
 80066de:	4413      	add	r3, r2
 80066e0:	3384      	adds	r3, #132	; 0x84
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	6812      	ldr	r2, [r2, #0]
 80066e8:	4611      	mov	r1, r2
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	01d2      	lsls	r2, r2, #7
 80066ee:	440a      	add	r2, r1
 80066f0:	3284      	adds	r2, #132	; 0x84
 80066f2:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80066f6:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fc:	69fa      	ldr	r2, [r7, #28]
 80066fe:	fb02 f303 	mul.w	r3, r2, r3
 8006702:	041a      	lsls	r2, r3, #16
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	6859      	ldr	r1, [r3, #4]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	1acb      	subs	r3, r1, r3
 800670e:	69f9      	ldr	r1, [r7, #28]
 8006710:	fb01 f303 	mul.w	r3, r1, r3
 8006714:	3303      	adds	r3, #3
 8006716:	68f9      	ldr	r1, [r7, #12]
 8006718:	6809      	ldr	r1, [r1, #0]
 800671a:	4608      	mov	r0, r1
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	01c9      	lsls	r1, r1, #7
 8006720:	4401      	add	r1, r0
 8006722:	3184      	adds	r1, #132	; 0x84
 8006724:	4313      	orrs	r3, r2
 8006726:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	461a      	mov	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	01db      	lsls	r3, r3, #7
 8006732:	4413      	add	r3, r2
 8006734:	3384      	adds	r3, #132	; 0x84
 8006736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	6812      	ldr	r2, [r2, #0]
 800673c:	4611      	mov	r1, r2
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	01d2      	lsls	r2, r2, #7
 8006742:	440a      	add	r2, r1
 8006744:	3284      	adds	r2, #132	; 0x84
 8006746:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800674a:	f023 0307 	bic.w	r3, r3, #7
 800674e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	01db      	lsls	r3, r3, #7
 800675a:	4413      	add	r3, r2
 800675c:	3384      	adds	r3, #132	; 0x84
 800675e:	461a      	mov	r2, r3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006764:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	461a      	mov	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	01db      	lsls	r3, r3, #7
 8006770:	4413      	add	r3, r2
 8006772:	3384      	adds	r3, #132	; 0x84
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	6812      	ldr	r2, [r2, #0]
 800677a:	4611      	mov	r1, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	01d2      	lsls	r2, r2, #7
 8006780:	440a      	add	r2, r1
 8006782:	3284      	adds	r2, #132	; 0x84
 8006784:	f043 0301 	orr.w	r3, r3, #1
 8006788:	6013      	str	r3, [r2, #0]
}
 800678a:	bf00      	nop
 800678c:	3724      	adds	r7, #36	; 0x24
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e25e      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0301 	and.w	r3, r3, #1
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d075      	beq.n	80068a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067b6:	4b88      	ldr	r3, [pc, #544]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d00c      	beq.n	80067dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067c2:	4b85      	ldr	r3, [pc, #532]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067ca:	2b08      	cmp	r3, #8
 80067cc:	d112      	bne.n	80067f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ce:	4b82      	ldr	r3, [pc, #520]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067da:	d10b      	bne.n	80067f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067dc:	4b7e      	ldr	r3, [pc, #504]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d05b      	beq.n	80068a0 <HAL_RCC_OscConfig+0x108>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d157      	bne.n	80068a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e239      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067fc:	d106      	bne.n	800680c <HAL_RCC_OscConfig+0x74>
 80067fe:	4b76      	ldr	r3, [pc, #472]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a75      	ldr	r2, [pc, #468]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	e01d      	b.n	8006848 <HAL_RCC_OscConfig+0xb0>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006814:	d10c      	bne.n	8006830 <HAL_RCC_OscConfig+0x98>
 8006816:	4b70      	ldr	r3, [pc, #448]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a6f      	ldr	r2, [pc, #444]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 800681c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	4b6d      	ldr	r3, [pc, #436]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a6c      	ldr	r2, [pc, #432]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e00b      	b.n	8006848 <HAL_RCC_OscConfig+0xb0>
 8006830:	4b69      	ldr	r3, [pc, #420]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a68      	ldr	r2, [pc, #416]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	4b66      	ldr	r3, [pc, #408]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a65      	ldr	r2, [pc, #404]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d013      	beq.n	8006878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006850:	f7fd fd44 	bl	80042dc <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006856:	e008      	b.n	800686a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006858:	f7fd fd40 	bl	80042dc <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	2b64      	cmp	r3, #100	; 0x64
 8006864:	d901      	bls.n	800686a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e1fe      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800686a:	4b5b      	ldr	r3, [pc, #364]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0f0      	beq.n	8006858 <HAL_RCC_OscConfig+0xc0>
 8006876:	e014      	b.n	80068a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006878:	f7fd fd30 	bl	80042dc <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006880:	f7fd fd2c 	bl	80042dc <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b64      	cmp	r3, #100	; 0x64
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e1ea      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006892:	4b51      	ldr	r3, [pc, #324]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0xe8>
 800689e:	e000      	b.n	80068a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 0302 	and.w	r3, r3, #2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d063      	beq.n	8006976 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068ae:	4b4a      	ldr	r3, [pc, #296]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 030c 	and.w	r3, r3, #12
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00b      	beq.n	80068d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ba:	4b47      	ldr	r3, [pc, #284]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068c2:	2b08      	cmp	r3, #8
 80068c4:	d11c      	bne.n	8006900 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068c6:	4b44      	ldr	r3, [pc, #272]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d116      	bne.n	8006900 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068d2:	4b41      	ldr	r3, [pc, #260]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d005      	beq.n	80068ea <HAL_RCC_OscConfig+0x152>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d001      	beq.n	80068ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e1be      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ea:	4b3b      	ldr	r3, [pc, #236]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	4937      	ldr	r1, [pc, #220]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068fe:	e03a      	b.n	8006976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d020      	beq.n	800694a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006908:	4b34      	ldr	r3, [pc, #208]	; (80069dc <HAL_RCC_OscConfig+0x244>)
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800690e:	f7fd fce5 	bl	80042dc <HAL_GetTick>
 8006912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006916:	f7fd fce1 	bl	80042dc <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b02      	cmp	r3, #2
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e19f      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006928:	4b2b      	ldr	r3, [pc, #172]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0f0      	beq.n	8006916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006934:	4b28      	ldr	r3, [pc, #160]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	4925      	ldr	r1, [pc, #148]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 8006944:	4313      	orrs	r3, r2
 8006946:	600b      	str	r3, [r1, #0]
 8006948:	e015      	b.n	8006976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800694a:	4b24      	ldr	r3, [pc, #144]	; (80069dc <HAL_RCC_OscConfig+0x244>)
 800694c:	2200      	movs	r2, #0
 800694e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006950:	f7fd fcc4 	bl	80042dc <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006958:	f7fd fcc0 	bl	80042dc <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b02      	cmp	r3, #2
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e17e      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800696a:	4b1b      	ldr	r3, [pc, #108]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0302 	and.w	r3, r3, #2
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1f0      	bne.n	8006958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0308 	and.w	r3, r3, #8
 800697e:	2b00      	cmp	r3, #0
 8006980:	d036      	beq.n	80069f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d016      	beq.n	80069b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800698a:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <HAL_RCC_OscConfig+0x248>)
 800698c:	2201      	movs	r2, #1
 800698e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006990:	f7fd fca4 	bl	80042dc <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006998:	f7fd fca0 	bl	80042dc <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e15e      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069aa:	4b0b      	ldr	r3, [pc, #44]	; (80069d8 <HAL_RCC_OscConfig+0x240>)
 80069ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0f0      	beq.n	8006998 <HAL_RCC_OscConfig+0x200>
 80069b6:	e01b      	b.n	80069f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069b8:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <HAL_RCC_OscConfig+0x248>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069be:	f7fd fc8d 	bl	80042dc <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069c4:	e00e      	b.n	80069e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069c6:	f7fd fc89 	bl	80042dc <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d907      	bls.n	80069e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e147      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
 80069d8:	40023800 	.word	0x40023800
 80069dc:	42470000 	.word	0x42470000
 80069e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069e4:	4b88      	ldr	r3, [pc, #544]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 80069e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1ea      	bne.n	80069c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8097 	beq.w	8006b2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069fe:	2300      	movs	r3, #0
 8006a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a02:	4b81      	ldr	r3, [pc, #516]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d10f      	bne.n	8006a2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a0e:	2300      	movs	r3, #0
 8006a10:	60bb      	str	r3, [r7, #8]
 8006a12:	4b7d      	ldr	r3, [pc, #500]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a16:	4a7c      	ldr	r2, [pc, #496]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a1e:	4b7a      	ldr	r3, [pc, #488]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a26:	60bb      	str	r3, [r7, #8]
 8006a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2e:	4b77      	ldr	r3, [pc, #476]	; (8006c0c <HAL_RCC_OscConfig+0x474>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d118      	bne.n	8006a6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a3a:	4b74      	ldr	r3, [pc, #464]	; (8006c0c <HAL_RCC_OscConfig+0x474>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a73      	ldr	r2, [pc, #460]	; (8006c0c <HAL_RCC_OscConfig+0x474>)
 8006a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a46:	f7fd fc49 	bl	80042dc <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a4e:	f7fd fc45 	bl	80042dc <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e103      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a60:	4b6a      	ldr	r3, [pc, #424]	; (8006c0c <HAL_RCC_OscConfig+0x474>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0f0      	beq.n	8006a4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d106      	bne.n	8006a82 <HAL_RCC_OscConfig+0x2ea>
 8006a74:	4b64      	ldr	r3, [pc, #400]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a78:	4a63      	ldr	r2, [pc, #396]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a7a:	f043 0301 	orr.w	r3, r3, #1
 8006a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a80:	e01c      	b.n	8006abc <HAL_RCC_OscConfig+0x324>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b05      	cmp	r3, #5
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x30c>
 8006a8a:	4b5f      	ldr	r3, [pc, #380]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a8e:	4a5e      	ldr	r2, [pc, #376]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a90:	f043 0304 	orr.w	r3, r3, #4
 8006a94:	6713      	str	r3, [r2, #112]	; 0x70
 8006a96:	4b5c      	ldr	r3, [pc, #368]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	4a5b      	ldr	r2, [pc, #364]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006a9c:	f043 0301 	orr.w	r3, r3, #1
 8006aa0:	6713      	str	r3, [r2, #112]	; 0x70
 8006aa2:	e00b      	b.n	8006abc <HAL_RCC_OscConfig+0x324>
 8006aa4:	4b58      	ldr	r3, [pc, #352]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa8:	4a57      	ldr	r2, [pc, #348]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006aaa:	f023 0301 	bic.w	r3, r3, #1
 8006aae:	6713      	str	r3, [r2, #112]	; 0x70
 8006ab0:	4b55      	ldr	r3, [pc, #340]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab4:	4a54      	ldr	r2, [pc, #336]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006ab6:	f023 0304 	bic.w	r3, r3, #4
 8006aba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d015      	beq.n	8006af0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac4:	f7fd fc0a 	bl	80042dc <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006aca:	e00a      	b.n	8006ae2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006acc:	f7fd fc06 	bl	80042dc <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e0c2      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ae2:	4b49      	ldr	r3, [pc, #292]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0ee      	beq.n	8006acc <HAL_RCC_OscConfig+0x334>
 8006aee:	e014      	b.n	8006b1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006af0:	f7fd fbf4 	bl	80042dc <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af6:	e00a      	b.n	8006b0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006af8:	f7fd fbf0 	bl	80042dc <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e0ac      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b0e:	4b3e      	ldr	r3, [pc, #248]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b12:	f003 0302 	and.w	r3, r3, #2
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1ee      	bne.n	8006af8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b1a:	7dfb      	ldrb	r3, [r7, #23]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d105      	bne.n	8006b2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b20:	4b39      	ldr	r3, [pc, #228]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	4a38      	ldr	r2, [pc, #224]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8098 	beq.w	8006c66 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b36:	4b34      	ldr	r3, [pc, #208]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 030c 	and.w	r3, r3, #12
 8006b3e:	2b08      	cmp	r3, #8
 8006b40:	d05c      	beq.n	8006bfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d141      	bne.n	8006bce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b4a:	4b31      	ldr	r3, [pc, #196]	; (8006c10 <HAL_RCC_OscConfig+0x478>)
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b50:	f7fd fbc4 	bl	80042dc <HAL_GetTick>
 8006b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b56:	e008      	b.n	8006b6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b58:	f7fd fbc0 	bl	80042dc <HAL_GetTick>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e07e      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6a:	4b27      	ldr	r3, [pc, #156]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d1f0      	bne.n	8006b58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69da      	ldr	r2, [r3, #28]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	019b      	lsls	r3, r3, #6
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8c:	085b      	lsrs	r3, r3, #1
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	041b      	lsls	r3, r3, #16
 8006b92:	431a      	orrs	r2, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b98:	061b      	lsls	r3, r3, #24
 8006b9a:	491b      	ldr	r1, [pc, #108]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ba0:	4b1b      	ldr	r3, [pc, #108]	; (8006c10 <HAL_RCC_OscConfig+0x478>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba6:	f7fd fb99 	bl	80042dc <HAL_GetTick>
 8006baa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bae:	f7fd fb95 	bl	80042dc <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e053      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0f0      	beq.n	8006bae <HAL_RCC_OscConfig+0x416>
 8006bcc:	e04b      	b.n	8006c66 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bce:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <HAL_RCC_OscConfig+0x478>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd4:	f7fd fb82 	bl	80042dc <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bdc:	f7fd fb7e 	bl	80042dc <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e03c      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bee:	4b06      	ldr	r3, [pc, #24]	; (8006c08 <HAL_RCC_OscConfig+0x470>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1f0      	bne.n	8006bdc <HAL_RCC_OscConfig+0x444>
 8006bfa:	e034      	b.n	8006c66 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d107      	bne.n	8006c14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e02f      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	40007000 	.word	0x40007000
 8006c10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c14:	4b16      	ldr	r3, [pc, #88]	; (8006c70 <HAL_RCC_OscConfig+0x4d8>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d11c      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d115      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d10d      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d106      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d001      	beq.n	8006c66 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40023800 	.word	0x40023800

08006c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d101      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0cc      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c88:	4b68      	ldr	r3, [pc, #416]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 030f 	and.w	r3, r3, #15
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d90c      	bls.n	8006cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c96:	4b65      	ldr	r3, [pc, #404]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9e:	4b63      	ldr	r3, [pc, #396]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 030f 	and.w	r3, r3, #15
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d001      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e0b8      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d020      	beq.n	8006cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0304 	and.w	r3, r3, #4
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cc8:	4b59      	ldr	r3, [pc, #356]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	4a58      	ldr	r2, [pc, #352]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0308 	and.w	r3, r3, #8
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d005      	beq.n	8006cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ce0:	4b53      	ldr	r3, [pc, #332]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	4a52      	ldr	r2, [pc, #328]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cec:	4b50      	ldr	r3, [pc, #320]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	494d      	ldr	r1, [pc, #308]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d044      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d107      	bne.n	8006d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d12:	4b47      	ldr	r3, [pc, #284]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d119      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e07f      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d003      	beq.n	8006d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d107      	bne.n	8006d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d32:	4b3f      	ldr	r3, [pc, #252]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e06f      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d42:	4b3b      	ldr	r3, [pc, #236]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e067      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d52:	4b37      	ldr	r3, [pc, #220]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f023 0203 	bic.w	r2, r3, #3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	4934      	ldr	r1, [pc, #208]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d64:	f7fd faba 	bl	80042dc <HAL_GetTick>
 8006d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d6a:	e00a      	b.n	8006d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d6c:	f7fd fab6 	bl	80042dc <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e04f      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d82:	4b2b      	ldr	r3, [pc, #172]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 020c 	and.w	r2, r3, #12
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d1eb      	bne.n	8006d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d94:	4b25      	ldr	r3, [pc, #148]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 030f 	and.w	r3, r3, #15
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d20c      	bcs.n	8006dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da2:	4b22      	ldr	r3, [pc, #136]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006daa:	4b20      	ldr	r3, [pc, #128]	; (8006e2c <HAL_RCC_ClockConfig+0x1b8>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 030f 	and.w	r3, r3, #15
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d001      	beq.n	8006dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e032      	b.n	8006e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d008      	beq.n	8006dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dc8:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	4916      	ldr	r1, [pc, #88]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0308 	and.w	r3, r3, #8
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006de6:	4b12      	ldr	r3, [pc, #72]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	490e      	ldr	r1, [pc, #56]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006dfa:	f000 f821 	bl	8006e40 <HAL_RCC_GetSysClockFreq>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <HAL_RCC_ClockConfig+0x1bc>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	091b      	lsrs	r3, r3, #4
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	490a      	ldr	r1, [pc, #40]	; (8006e34 <HAL_RCC_ClockConfig+0x1c0>)
 8006e0c:	5ccb      	ldrb	r3, [r1, r3]
 8006e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e12:	4a09      	ldr	r2, [pc, #36]	; (8006e38 <HAL_RCC_ClockConfig+0x1c4>)
 8006e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e16:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <HAL_RCC_ClockConfig+0x1c8>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fd fa1a 	bl	8004254 <HAL_InitTick>

  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40023c00 	.word	0x40023c00
 8006e30:	40023800 	.word	0x40023800
 8006e34:	0800c4b4 	.word	0x0800c4b4
 8006e38:	20000234 	.word	0x20000234
 8006e3c:	200002c4 	.word	0x200002c4

08006e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e44:	b094      	sub	sp, #80	; 0x50
 8006e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e50:	2300      	movs	r3, #0
 8006e52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e58:	4b79      	ldr	r3, [pc, #484]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 030c 	and.w	r3, r3, #12
 8006e60:	2b08      	cmp	r3, #8
 8006e62:	d00d      	beq.n	8006e80 <HAL_RCC_GetSysClockFreq+0x40>
 8006e64:	2b08      	cmp	r3, #8
 8006e66:	f200 80e1 	bhi.w	800702c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <HAL_RCC_GetSysClockFreq+0x34>
 8006e6e:	2b04      	cmp	r3, #4
 8006e70:	d003      	beq.n	8006e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8006e72:	e0db      	b.n	800702c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e74:	4b73      	ldr	r3, [pc, #460]	; (8007044 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006e78:	e0db      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e7a:	4b73      	ldr	r3, [pc, #460]	; (8007048 <HAL_RCC_GetSysClockFreq+0x208>)
 8006e7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e7e:	e0d8      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e80:	4b6f      	ldr	r3, [pc, #444]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e8a:	4b6d      	ldr	r3, [pc, #436]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d063      	beq.n	8006f5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e96:	4b6a      	ldr	r3, [pc, #424]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	099b      	lsrs	r3, r3, #6
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ea0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea8:	633b      	str	r3, [r7, #48]	; 0x30
 8006eaa:	2300      	movs	r3, #0
 8006eac:	637b      	str	r3, [r7, #52]	; 0x34
 8006eae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	462b      	mov	r3, r5
 8006eb6:	f04f 0000 	mov.w	r0, #0
 8006eba:	f04f 0100 	mov.w	r1, #0
 8006ebe:	0159      	lsls	r1, r3, #5
 8006ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ec4:	0150      	lsls	r0, r2, #5
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4621      	mov	r1, r4
 8006ecc:	1a51      	subs	r1, r2, r1
 8006ece:	6139      	str	r1, [r7, #16]
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	018b      	lsls	r3, r1, #6
 8006ee8:	4651      	mov	r1, sl
 8006eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006eee:	4651      	mov	r1, sl
 8006ef0:	018a      	lsls	r2, r1, #6
 8006ef2:	4651      	mov	r1, sl
 8006ef4:	ebb2 0801 	subs.w	r8, r2, r1
 8006ef8:	4659      	mov	r1, fp
 8006efa:	eb63 0901 	sbc.w	r9, r3, r1
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f12:	4690      	mov	r8, r2
 8006f14:	4699      	mov	r9, r3
 8006f16:	4623      	mov	r3, r4
 8006f18:	eb18 0303 	adds.w	r3, r8, r3
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	462b      	mov	r3, r5
 8006f20:	eb49 0303 	adc.w	r3, r9, r3
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	f04f 0200 	mov.w	r2, #0
 8006f2a:	f04f 0300 	mov.w	r3, #0
 8006f2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f32:	4629      	mov	r1, r5
 8006f34:	024b      	lsls	r3, r1, #9
 8006f36:	4621      	mov	r1, r4
 8006f38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	024a      	lsls	r2, r1, #9
 8006f40:	4610      	mov	r0, r2
 8006f42:	4619      	mov	r1, r3
 8006f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f46:	2200      	movs	r2, #0
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f50:	f7f9 feea 	bl	8000d28 <__aeabi_uldivmod>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4613      	mov	r3, r2
 8006f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f5c:	e058      	b.n	8007010 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f5e:	4b38      	ldr	r3, [pc, #224]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	099b      	lsrs	r3, r3, #6
 8006f64:	2200      	movs	r2, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	4611      	mov	r1, r2
 8006f6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006f6e:	623b      	str	r3, [r7, #32]
 8006f70:	2300      	movs	r3, #0
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24
 8006f74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	f04f 0000 	mov.w	r0, #0
 8006f80:	f04f 0100 	mov.w	r1, #0
 8006f84:	0159      	lsls	r1, r3, #5
 8006f86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f8a:	0150      	lsls	r0, r2, #5
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4641      	mov	r1, r8
 8006f92:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f96:	4649      	mov	r1, r9
 8006f98:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006fa8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006fac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006fb0:	ebb2 040a 	subs.w	r4, r2, sl
 8006fb4:	eb63 050b 	sbc.w	r5, r3, fp
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	00eb      	lsls	r3, r5, #3
 8006fc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fc6:	00e2      	lsls	r2, r4, #3
 8006fc8:	4614      	mov	r4, r2
 8006fca:	461d      	mov	r5, r3
 8006fcc:	4643      	mov	r3, r8
 8006fce:	18e3      	adds	r3, r4, r3
 8006fd0:	603b      	str	r3, [r7, #0]
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	eb45 0303 	adc.w	r3, r5, r3
 8006fd8:	607b      	str	r3, [r7, #4]
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	f04f 0300 	mov.w	r3, #0
 8006fe2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006fe6:	4629      	mov	r1, r5
 8006fe8:	028b      	lsls	r3, r1, #10
 8006fea:	4621      	mov	r1, r4
 8006fec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	028a      	lsls	r2, r1, #10
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	61fa      	str	r2, [r7, #28]
 8007000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007004:	f7f9 fe90 	bl	8000d28 <__aeabi_uldivmod>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4613      	mov	r3, r2
 800700e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007010:	4b0b      	ldr	r3, [pc, #44]	; (8007040 <HAL_RCC_GetSysClockFreq+0x200>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	0c1b      	lsrs	r3, r3, #16
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	3301      	adds	r3, #1
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007020:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007024:	fbb2 f3f3 	udiv	r3, r2, r3
 8007028:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800702a:	e002      	b.n	8007032 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800702c:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_RCC_GetSysClockFreq+0x204>)
 800702e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007034:	4618      	mov	r0, r3
 8007036:	3750      	adds	r7, #80	; 0x50
 8007038:	46bd      	mov	sp, r7
 800703a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800703e:	bf00      	nop
 8007040:	40023800 	.word	0x40023800
 8007044:	00f42400 	.word	0x00f42400
 8007048:	007a1200 	.word	0x007a1200

0800704c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800704c:	b480      	push	{r7}
 800704e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007050:	4b03      	ldr	r3, [pc, #12]	; (8007060 <HAL_RCC_GetHCLKFreq+0x14>)
 8007052:	681b      	ldr	r3, [r3, #0]
}
 8007054:	4618      	mov	r0, r3
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000234 	.word	0x20000234

08007064 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007068:	f7ff fff0 	bl	800704c <HAL_RCC_GetHCLKFreq>
 800706c:	4602      	mov	r2, r0
 800706e:	4b05      	ldr	r3, [pc, #20]	; (8007084 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	0a9b      	lsrs	r3, r3, #10
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	4903      	ldr	r1, [pc, #12]	; (8007088 <HAL_RCC_GetPCLK1Freq+0x24>)
 800707a:	5ccb      	ldrb	r3, [r1, r3]
 800707c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007080:	4618      	mov	r0, r3
 8007082:	bd80      	pop	{r7, pc}
 8007084:	40023800 	.word	0x40023800
 8007088:	0800c4c4 	.word	0x0800c4c4

0800708c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d105      	bne.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d075      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070c0:	4b91      	ldr	r3, [pc, #580]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070c6:	f7fd f909 	bl	80042dc <HAL_GetTick>
 80070ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070cc:	e008      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070ce:	f7fd f905 	bl	80042dc <HAL_GetTick>
 80070d2:	4602      	mov	r2, r0
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	2b02      	cmp	r3, #2
 80070da:	d901      	bls.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e189      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070e0:	4b8a      	ldr	r3, [pc, #552]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1f0      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d009      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	019a      	lsls	r2, r3, #6
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	071b      	lsls	r3, r3, #28
 8007104:	4981      	ldr	r1, [pc, #516]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01f      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007118:	4b7c      	ldr	r3, [pc, #496]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800711a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711e:	0f1b      	lsrs	r3, r3, #28
 8007120:	f003 0307 	and.w	r3, r3, #7
 8007124:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	019a      	lsls	r2, r3, #6
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	061b      	lsls	r3, r3, #24
 8007132:	431a      	orrs	r2, r3
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	071b      	lsls	r3, r3, #28
 8007138:	4974      	ldr	r1, [pc, #464]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800713a:	4313      	orrs	r3, r2
 800713c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007140:	4b72      	ldr	r3, [pc, #456]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007142:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007146:	f023 021f 	bic.w	r2, r3, #31
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	3b01      	subs	r3, #1
 8007150:	496e      	ldr	r1, [pc, #440]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007152:	4313      	orrs	r3, r2
 8007154:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d00d      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	019a      	lsls	r2, r3, #6
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	061b      	lsls	r3, r3, #24
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	071b      	lsls	r3, r3, #28
 8007178:	4964      	ldr	r1, [pc, #400]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800717a:	4313      	orrs	r3, r2
 800717c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007180:	4b61      	ldr	r3, [pc, #388]	; (8007308 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007182:	2201      	movs	r2, #1
 8007184:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007186:	f7fd f8a9 	bl	80042dc <HAL_GetTick>
 800718a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800718c:	e008      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800718e:	f7fd f8a5 	bl	80042dc <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	2b02      	cmp	r3, #2
 800719a:	d901      	bls.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800719c:	2303      	movs	r3, #3
 800719e:	e129      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071a0:	4b5a      	ldr	r3, [pc, #360]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0f0      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d105      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d079      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80071c4:	4b52      	ldr	r3, [pc, #328]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071ca:	f7fd f887 	bl	80042dc <HAL_GetTick>
 80071ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071d0:	e008      	b.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80071d2:	f7fd f883 	bl	80042dc <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d901      	bls.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e107      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80071e4:	4b49      	ldr	r3, [pc, #292]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071f0:	d0ef      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0304 	and.w	r3, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d020      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071fe:	4b43      	ldr	r3, [pc, #268]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007204:	0f1b      	lsrs	r3, r3, #28
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	019a      	lsls	r2, r3, #6
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	695b      	ldr	r3, [r3, #20]
 8007216:	061b      	lsls	r3, r3, #24
 8007218:	431a      	orrs	r2, r3
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	071b      	lsls	r3, r3, #28
 800721e:	493b      	ldr	r1, [pc, #236]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007220:	4313      	orrs	r3, r2
 8007222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007226:	4b39      	ldr	r3, [pc, #228]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800722c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	3b01      	subs	r3, #1
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	4934      	ldr	r1, [pc, #208]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800723a:	4313      	orrs	r3, r2
 800723c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01e      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800724c:	4b2f      	ldr	r3, [pc, #188]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007252:	0e1b      	lsrs	r3, r3, #24
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	019a      	lsls	r2, r3, #6
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	061b      	lsls	r3, r3, #24
 8007264:	431a      	orrs	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	071b      	lsls	r3, r3, #28
 800726c:	4927      	ldr	r1, [pc, #156]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800726e:	4313      	orrs	r3, r2
 8007270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007274:	4b25      	ldr	r3, [pc, #148]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007276:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800727a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	4922      	ldr	r1, [pc, #136]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007284:	4313      	orrs	r3, r2
 8007286:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800728a:	4b21      	ldr	r3, [pc, #132]	; (8007310 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007290:	f7fd f824 	bl	80042dc <HAL_GetTick>
 8007294:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007298:	f7fd f820 	bl	80042dc <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e0a4      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80072aa:	4b18      	ldr	r3, [pc, #96]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b6:	d1ef      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0320 	and.w	r3, r3, #32
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 808b 	beq.w	80073dc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80072c6:	2300      	movs	r3, #0
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	4b10      	ldr	r3, [pc, #64]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	4a0f      	ldr	r2, [pc, #60]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d4:	6413      	str	r3, [r2, #64]	; 0x40
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072de:	60fb      	str	r3, [r7, #12]
 80072e0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80072e2:	4b0c      	ldr	r3, [pc, #48]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a0b      	ldr	r2, [pc, #44]	; (8007314 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80072e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072ee:	f7fc fff5 	bl	80042dc <HAL_GetTick>
 80072f2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80072f4:	e010      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80072f6:	f7fc fff1 	bl	80042dc <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d909      	bls.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e075      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007308:	42470068 	.word	0x42470068
 800730c:	40023800 	.word	0x40023800
 8007310:	42470070 	.word	0x42470070
 8007314:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007318:	4b38      	ldr	r3, [pc, #224]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0e8      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007324:	4b36      	ldr	r3, [pc, #216]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800732c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d02f      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800733c:	693a      	ldr	r2, [r7, #16]
 800733e:	429a      	cmp	r2, r3
 8007340:	d028      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007342:	4b2f      	ldr	r3, [pc, #188]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800734a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800734c:	4b2d      	ldr	r3, [pc, #180]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800734e:	2201      	movs	r2, #1
 8007350:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007352:	4b2c      	ldr	r3, [pc, #176]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007358:	4a29      	ldr	r2, [pc, #164]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800735e:	4b28      	ldr	r3, [pc, #160]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	f003 0301 	and.w	r3, r3, #1
 8007366:	2b01      	cmp	r3, #1
 8007368:	d114      	bne.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800736a:	f7fc ffb7 	bl	80042dc <HAL_GetTick>
 800736e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007370:	e00a      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007372:	f7fc ffb3 	bl	80042dc <HAL_GetTick>
 8007376:	4602      	mov	r2, r0
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007380:	4293      	cmp	r3, r2
 8007382:	d901      	bls.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007384:	2303      	movs	r3, #3
 8007386:	e035      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007388:	4b1d      	ldr	r3, [pc, #116]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800738a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0ee      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007398:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800739c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073a0:	d10d      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x332>
 80073a2:	4b17      	ldr	r3, [pc, #92]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80073b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b6:	4912      	ldr	r1, [pc, #72]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	608b      	str	r3, [r1, #8]
 80073bc:	e005      	b.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80073be:	4b10      	ldr	r3, [pc, #64]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	4a0f      	ldr	r2, [pc, #60]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80073c8:	6093      	str	r3, [r2, #8]
 80073ca:	4b0d      	ldr	r3, [pc, #52]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073d6:	490a      	ldr	r1, [pc, #40]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80073d8:	4313      	orrs	r3, r2
 80073da:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0310 	and.w	r3, r3, #16
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80073ee:	4b06      	ldr	r3, [pc, #24]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80073f0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40007000 	.word	0x40007000
 8007400:	40023800 	.word	0x40023800
 8007404:	42470e40 	.word	0x42470e40
 8007408:	424711e0 	.word	0x424711e0

0800740c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e025      	b.n	800746c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007426:	b2db      	uxtb	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 f81d 	bl	8007474 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2202      	movs	r2, #2
 800743e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3304      	adds	r3, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f000 ff0f 	bl	8008270 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	461a      	mov	r2, r3
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	f000 ff7a 	bl	8008356 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800749a:	b2db      	uxtb	r3, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d101      	bne.n	80074a4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80074a0:	2302      	movs	r3, #2
 80074a2:	e018      	b.n	80074d6 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	68b9      	ldr	r1, [r7, #8]
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 ffcd 	bl	8008454 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d104      	bne.n	80074cc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2205      	movs	r2, #5
 80074c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80074ca:	e003      	b.n	80074d4 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3710      	adds	r7, #16
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b082      	sub	sp, #8
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d101      	bne.n	80074f8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80074f4:	2302      	movs	r3, #2
 80074f6:	e00e      	b.n	8007516 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 ffe0 	bl	80084cc <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b082      	sub	sp, #8
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d101      	bne.n	8007530 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e05d      	b.n	80075ec <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007536:	b2db      	uxtb	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	d106      	bne.n	800754a <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f87d 	bl	8007644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2202      	movs	r2, #2
 800754e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007560:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	431a      	orrs	r2, r3
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	431a      	orrs	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	431a      	orrs	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007586:	431a      	orrs	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	69db      	ldr	r3, [r3, #28]
 800758c:	431a      	orrs	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	ea42 0103 	orr.w	r1, r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	0c1b      	lsrs	r3, r3, #16
 80075a8:	f003 0104 	and.w	r1, r3, #4
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075c0:	d104      	bne.n	80075cc <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80075ca:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69da      	ldr	r2, [r3, #28]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2201      	movs	r2, #1
 80075e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e01a      	b.n	800763c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2202      	movs	r2, #2
 800760a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800761c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f81a 	bl	8007658 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007686:	2b01      	cmp	r3, #1
 8007688:	d101      	bne.n	800768e <HAL_SPI_Transmit+0x22>
 800768a:	2302      	movs	r3, #2
 800768c:	e140      	b.n	8007910 <HAL_SPI_Transmit+0x2a4>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007696:	f7fc fe21 	bl	80042dc <HAL_GetTick>
 800769a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800769c:	88fb      	ldrh	r3, [r7, #6]
 800769e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d002      	beq.n	80076b2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
 80076ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076b0:	e125      	b.n	80078fe <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SPI_Transmit+0x52>
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80076c2:	e11c      	b.n	80078fe <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2203      	movs	r2, #3
 80076c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2200      	movs	r2, #0
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	88fa      	ldrh	r2, [r7, #6]
 80076e2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800770a:	d107      	bne.n	800771c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800771a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007724:	d10f      	bne.n	8007746 <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007744:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007750:	2b40      	cmp	r3, #64	; 0x40
 8007752:	d007      	beq.n	8007764 <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007762:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800776c:	d14b      	bne.n	8007806 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <HAL_SPI_Transmit+0x110>
 8007776:	8afb      	ldrh	r3, [r7, #22]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d13e      	bne.n	80077fa <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	881a      	ldrh	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778c:	1c9a      	adds	r2, r3, #2
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007796:	b29b      	uxth	r3, r3
 8007798:	3b01      	subs	r3, #1
 800779a:	b29a      	uxth	r2, r3
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80077a0:	e02b      	b.n	80077fa <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b02      	cmp	r3, #2
 80077ae:	d112      	bne.n	80077d6 <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b4:	881a      	ldrh	r2, [r3, #0]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c0:	1c9a      	adds	r2, r3, #2
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	3b01      	subs	r3, #1
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	86da      	strh	r2, [r3, #54]	; 0x36
 80077d4:	e011      	b.n	80077fa <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077d6:	f7fc fd81 	bl	80042dc <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	683a      	ldr	r2, [r7, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d803      	bhi.n	80077ee <HAL_SPI_Transmit+0x182>
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ec:	d102      	bne.n	80077f4 <HAL_SPI_Transmit+0x188>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d102      	bne.n	80077fa <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80077f8:	e081      	b.n	80078fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077fe:	b29b      	uxth	r3, r3
 8007800:	2b00      	cmp	r3, #0
 8007802:	d1ce      	bne.n	80077a2 <HAL_SPI_Transmit+0x136>
 8007804:	e04c      	b.n	80078a0 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <HAL_SPI_Transmit+0x1a8>
 800780e:	8afb      	ldrh	r3, [r7, #22]
 8007810:	2b01      	cmp	r3, #1
 8007812:	d140      	bne.n	8007896 <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	330c      	adds	r3, #12
 800781e:	7812      	ldrb	r2, [r2, #0]
 8007820:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007830:	b29b      	uxth	r3, r3
 8007832:	3b01      	subs	r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800783a:	e02c      	b.n	8007896 <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b02      	cmp	r3, #2
 8007848:	d113      	bne.n	8007872 <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	330c      	adds	r3, #12
 8007854:	7812      	ldrb	r2, [r2, #0]
 8007856:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785c:	1c5a      	adds	r2, r3, #1
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007870:	e011      	b.n	8007896 <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007872:	f7fc fd33 	bl	80042dc <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d803      	bhi.n	800788a <HAL_SPI_Transmit+0x21e>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007888:	d102      	bne.n	8007890 <HAL_SPI_Transmit+0x224>
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d102      	bne.n	8007896 <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007894:	e033      	b.n	80078fe <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800789a:	b29b      	uxth	r3, r3
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1cd      	bne.n	800783c <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078a8:	d107      	bne.n	80078ba <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078b8:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 fc94 	bl	80081ec <SPI_EndRxTxTransaction>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2220      	movs	r2, #32
 80078ce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80078d8:	2300      	movs	r3, #0
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	613b      	str	r3, [r7, #16]
 80078ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e000      	b.n	80078fe <HAL_SPI_Transmit+0x292>
  }

error:
 80078fc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800790e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3720      	adds	r7, #32
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af02      	add	r7, sp, #8
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	4613      	mov	r3, r2
 8007926:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007934:	d112      	bne.n	800795c <HAL_SPI_Receive+0x44>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10e      	bne.n	800795c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2204      	movs	r2, #4
 8007942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007946:	88fa      	ldrh	r2, [r7, #6]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	68ba      	ldr	r2, [r7, #8]
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	68f8      	ldr	r0, [r7, #12]
 8007954:	f000 f95f 	bl	8007c16 <HAL_SPI_TransmitReceive>
 8007958:	4603      	mov	r3, r0
 800795a:	e158      	b.n	8007c0e <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_SPI_Receive+0x52>
 8007966:	2302      	movs	r3, #2
 8007968:	e151      	b.n	8007c0e <HAL_SPI_Receive+0x2f6>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007972:	f7fc fcb3 	bl	80042dc <HAL_GetTick>
 8007976:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	d002      	beq.n	800798a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007984:	2302      	movs	r3, #2
 8007986:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007988:	e138      	b.n	8007bfc <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <HAL_SPI_Receive+0x7e>
 8007990:	88fb      	ldrh	r3, [r7, #6]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d102      	bne.n	800799c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
    goto error;
 800799a:	e12f      	b.n	8007bfc <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2204      	movs	r2, #4
 80079a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	2200      	movs	r2, #0
 80079a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	88fa      	ldrh	r2, [r7, #6]
 80079b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	88fa      	ldrh	r2, [r7, #6]
 80079ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2200      	movs	r2, #0
 80079c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2200      	movs	r2, #0
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079e2:	d116      	bne.n	8007a12 <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a02:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a1a:	d107      	bne.n	8007a2c <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a2a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a36:	2b40      	cmp	r3, #64	; 0x40
 8007a38:	d007      	beq.n	8007a4a <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a48:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d162      	bne.n	8007b18 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007a52:	e02e      	b.n	8007ab2 <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d115      	bne.n	8007a8e <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f103 020c 	add.w	r2, r3, #12
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	7812      	ldrb	r2, [r2, #0]
 8007a70:	b2d2      	uxtb	r2, r2
 8007a72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a78:	1c5a      	adds	r2, r3, #1
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a8c:	e011      	b.n	8007ab2 <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a8e:	f7fc fc25 	bl	80042dc <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d803      	bhi.n	8007aa6 <HAL_SPI_Receive+0x18e>
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aa4:	d102      	bne.n	8007aac <HAL_SPI_Receive+0x194>
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d102      	bne.n	8007ab2 <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007ab0:	e0a4      	b.n	8007bfc <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1cb      	bne.n	8007a54 <HAL_SPI_Receive+0x13c>
 8007abc:	e031      	b.n	8007b22 <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d113      	bne.n	8007af4 <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	b292      	uxth	r2, r2
 8007ad8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ade:	1c9a      	adds	r2, r3, #2
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	3b01      	subs	r3, #1
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007af2:	e011      	b.n	8007b18 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007af4:	f7fc fbf2 	bl	80042dc <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	683a      	ldr	r2, [r7, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d803      	bhi.n	8007b0c <HAL_SPI_Receive+0x1f4>
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b0a:	d102      	bne.n	8007b12 <HAL_SPI_Receive+0x1fa>
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007b16:	e071      	b.n	8007bfc <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1cd      	bne.n	8007abe <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2a:	d142      	bne.n	8007bb2 <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b3a:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2201      	movs	r2, #1
 8007b44:	2101      	movs	r1, #1
 8007b46:	68f8      	ldr	r0, [r7, #12]
 8007b48:	f000 fa81 	bl	800804e <SPI_WaitFlagStateUntilTimeout>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d002      	beq.n	8007b58 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	75fb      	strb	r3, [r7, #23]
      goto error;
 8007b56:	e051      	b.n	8007bfc <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b60:	d107      	bne.n	8007b72 <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	b292      	uxth	r2, r2
 8007b6e:	801a      	strh	r2, [r3, #0]
 8007b70:	e008      	b.n	8007b84 <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f103 020c 	add.w	r2, r3, #12
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	7812      	ldrb	r2, [r2, #0]
 8007b80:	b2d2      	uxtb	r2, r2
 8007b82:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fa5d 	bl	800804e <SPI_WaitFlagStateUntilTimeout>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9e:	f043 0202 	orr.w	r2, r3, #2
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	75fb      	strb	r3, [r7, #23]
      goto error;
 8007baa:	e027      	b.n	8007bfc <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	f000 fab3 	bl	8008122 <SPI_EndRxTransaction>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d002      	beq.n	8007bc8 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2220      	movs	r2, #32
 8007bc6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	f003 0310 	and.w	r3, r3, #16
 8007bd2:	2b10      	cmp	r3, #16
 8007bd4:	d10a      	bne.n	8007bec <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bda:	f043 0202 	orr.w	r2, r3, #2
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007bea:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]
 8007bf8:	e000      	b.n	8007bfc <HAL_SPI_Receive+0x2e4>
  }

error :
 8007bfa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b08e      	sub	sp, #56	; 0x38
 8007c1a:	af02      	add	r7, sp, #8
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	607a      	str	r2, [r7, #4]
 8007c22:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007c24:	2301      	movs	r3, #1
 8007c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_SPI_TransmitReceive+0x26>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e1f6      	b.n	800802a <HAL_SPI_TransmitReceive+0x414>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c44:	f7fc fb4a 	bl	80042dc <HAL_GetTick>
 8007c48:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007c5a:	887b      	ldrh	r3, [r7, #2]
 8007c5c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007c5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d00f      	beq.n	8007c86 <HAL_SPI_TransmitReceive+0x70>
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c6c:	d107      	bne.n	8007c7e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <HAL_SPI_TransmitReceive+0x68>
 8007c76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d003      	beq.n	8007c86 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c84:	e1c7      	b.n	8008016 <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_SPI_TransmitReceive+0x82>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <HAL_SPI_TransmitReceive+0x82>
 8007c92:	887b      	ldrh	r3, [r7, #2]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d103      	bne.n	8007ca0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007c9e:	e1ba      	b.n	8008016 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b04      	cmp	r3, #4
 8007caa:	d003      	beq.n	8007cb4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2205      	movs	r2, #5
 8007cb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	887a      	ldrh	r2, [r7, #2]
 8007cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	887a      	ldrh	r2, [r7, #2]
 8007cca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	887a      	ldrh	r2, [r7, #2]
 8007cd6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	887a      	ldrh	r2, [r7, #2]
 8007cdc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cf2:	d10f      	bne.n	8007d14 <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d12:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1e:	2b40      	cmp	r3, #64	; 0x40
 8007d20:	d007      	beq.n	8007d32 <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d3a:	f040 808b 	bne.w	8007e54 <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <HAL_SPI_TransmitReceive+0x136>
 8007d46:	8b7b      	ldrh	r3, [r7, #26]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d178      	bne.n	8007e3e <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d50:	881a      	ldrh	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5c:	1c9a      	adds	r2, r3, #2
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d70:	e065      	b.n	8007e3e <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d12d      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x1c6>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d028      	beq.n	8007ddc <HAL_SPI_TransmitReceive+0x1c6>
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d125      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d94:	881a      	ldrh	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	1c9a      	adds	r2, r3, #2
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	3b01      	subs	r3, #1
 8007dae:	b29a      	uxth	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10c      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x1c6>
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dca:	d107      	bne.n	8007ddc <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dda:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d119      	bne.n	8007e1e <HAL_SPI_TransmitReceive+0x208>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d014      	beq.n	8007e1e <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	68da      	ldr	r2, [r3, #12]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfe:	b292      	uxth	r2, r2
 8007e00:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e06:	1c9a      	adds	r2, r3, #2
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	3b01      	subs	r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e1e:	f7fc fa5d 	bl	80042dc <HAL_GetTick>
 8007e22:	4602      	mov	r2, r0
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d807      	bhi.n	8007e3e <HAL_SPI_TransmitReceive+0x228>
 8007e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e34:	d003      	beq.n	8007e3e <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e3c:	e0eb      	b.n	8008016 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d194      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x15c>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d18f      	bne.n	8007d72 <HAL_SPI_TransmitReceive+0x15c>
 8007e52:	e08e      	b.n	8007f72 <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <HAL_SPI_TransmitReceive+0x24c>
 8007e5c:	8b7b      	ldrh	r3, [r7, #26]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d17d      	bne.n	8007f5e <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	330c      	adds	r3, #12
 8007e6c:	7812      	ldrb	r2, [r2, #0]
 8007e6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	3b01      	subs	r3, #1
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e88:	e069      	b.n	8007f5e <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d12e      	bne.n	8007ef6 <HAL_SPI_TransmitReceive+0x2e0>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d029      	beq.n	8007ef6 <HAL_SPI_TransmitReceive+0x2e0>
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d126      	bne.n	8007ef6 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	330c      	adds	r3, #12
 8007eb2:	7812      	ldrb	r2, [r2, #0]
 8007eb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	b29a      	uxth	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10c      	bne.n	8007ef6 <HAL_SPI_TransmitReceive+0x2e0>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee4:	d107      	bne.n	8007ef6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ef4:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d119      	bne.n	8007f38 <HAL_SPI_TransmitReceive+0x322>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d014      	beq.n	8007f38 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f18:	b2d2      	uxtb	r2, r2
 8007f1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	1c5a      	adds	r2, r3, #1
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f34:	2301      	movs	r3, #1
 8007f36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f38:	f7fc f9d0 	bl	80042dc <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d803      	bhi.n	8007f50 <HAL_SPI_TransmitReceive+0x33a>
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f4e:	d102      	bne.n	8007f56 <HAL_SPI_TransmitReceive+0x340>
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f5c:	e05b      	b.n	8008016 <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d190      	bne.n	8007e8a <HAL_SPI_TransmitReceive+0x274>
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d18b      	bne.n	8007e8a <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f7a:	d117      	bne.n	8007fac <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	9300      	str	r3, [sp, #0]
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	2201      	movs	r2, #1
 8007f84:	2101      	movs	r1, #1
 8007f86:	68f8      	ldr	r0, [r7, #12]
 8007f88:	f000 f861 	bl	800804e <SPI_WaitFlagStateUntilTimeout>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d009      	beq.n	8007fa6 <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f96:	f043 0202 	orr.w	r2, r3, #2
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 8007fa4:	e037      	b.n	8008016 <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	f003 0310 	and.w	r3, r3, #16
 8007fb6:	2b10      	cmp	r3, #16
 8007fb8:	d10d      	bne.n	8007fd6 <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbe:	f043 0202 	orr.w	r2, r3, #2
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007fce:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007fda:	68f8      	ldr	r0, [r7, #12]
 8007fdc:	f000 f906 	bl	80081ec <SPI_EndRxTxTransaction>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d006      	beq.n	8007ff4 <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007ff2:	e010      	b.n	8008016 <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10b      	bne.n	8008014 <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	617b      	str	r3, [r7, #20]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	e000      	b.n	8008016 <HAL_SPI_TransmitReceive+0x400>
  }

error :
 8008014:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800802a:	4618      	mov	r0, r3
 800802c:	3730      	adds	r7, #48	; 0x30
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008032:	b480      	push	{r7}
 8008034:	b083      	sub	sp, #12
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008040:	b2db      	uxtb	r3, r3
}
 8008042:	4618      	mov	r0, r3
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800804e:	b580      	push	{r7, lr}
 8008050:	b084      	sub	sp, #16
 8008052:	af00      	add	r7, sp, #0
 8008054:	60f8      	str	r0, [r7, #12]
 8008056:	60b9      	str	r1, [r7, #8]
 8008058:	603b      	str	r3, [r7, #0]
 800805a:	4613      	mov	r3, r2
 800805c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800805e:	e04c      	b.n	80080fa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008066:	d048      	beq.n	80080fa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008068:	f7fc f938 	bl	80042dc <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	683a      	ldr	r2, [r7, #0]
 8008074:	429a      	cmp	r2, r3
 8008076:	d902      	bls.n	800807e <SPI_WaitFlagStateUntilTimeout+0x30>
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d13d      	bne.n	80080fa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	685a      	ldr	r2, [r3, #4]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800808c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008096:	d111      	bne.n	80080bc <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	689b      	ldr	r3, [r3, #8]
 800809c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080a0:	d004      	beq.n	80080ac <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080aa:	d107      	bne.n	80080bc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c4:	d10f      	bne.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080d4:	601a      	str	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e00f      	b.n	800811a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689a      	ldr	r2, [r3, #8]
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4013      	ands	r3, r2
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	429a      	cmp	r2, r3
 8008108:	bf0c      	ite	eq
 800810a:	2301      	moveq	r3, #1
 800810c:	2300      	movne	r3, #0
 800810e:	b2db      	uxtb	r3, r3
 8008110:	461a      	mov	r2, r3
 8008112:	79fb      	ldrb	r3, [r7, #7]
 8008114:	429a      	cmp	r2, r3
 8008116:	d1a3      	bne.n	8008060 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b086      	sub	sp, #24
 8008126:	af02      	add	r7, sp, #8
 8008128:	60f8      	str	r0, [r7, #12]
 800812a:	60b9      	str	r1, [r7, #8]
 800812c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008136:	d111      	bne.n	800815c <SPI_EndRxTransaction+0x3a>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008140:	d004      	beq.n	800814c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800814a:	d107      	bne.n	800815c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800815a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008164:	d12a      	bne.n	80081bc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816e:	d012      	beq.n	8008196 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	2200      	movs	r2, #0
 8008178:	2180      	movs	r1, #128	; 0x80
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f7ff ff67 	bl	800804e <SPI_WaitFlagStateUntilTimeout>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d02d      	beq.n	80081e2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818a:	f043 0220 	orr.w	r2, r3, #32
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e026      	b.n	80081e4 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2200      	movs	r2, #0
 800819e:	2101      	movs	r1, #1
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f7ff ff54 	bl	800804e <SPI_WaitFlagStateUntilTimeout>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01a      	beq.n	80081e2 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081b0:	f043 0220 	orr.w	r2, r3, #32
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e013      	b.n	80081e4 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2200      	movs	r2, #0
 80081c4:	2101      	movs	r1, #1
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f7ff ff41 	bl	800804e <SPI_WaitFlagStateUntilTimeout>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d007      	beq.n	80081e2 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d6:	f043 0220 	orr.w	r2, r3, #32
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e000      	b.n	80081e4 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b088      	sub	sp, #32
 80081f0:	af02      	add	r7, sp, #8
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80081f8:	4b1b      	ldr	r3, [pc, #108]	; (8008268 <SPI_EndRxTxTransaction+0x7c>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a1b      	ldr	r2, [pc, #108]	; (800826c <SPI_EndRxTxTransaction+0x80>)
 80081fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008202:	0d5b      	lsrs	r3, r3, #21
 8008204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008208:	fb02 f303 	mul.w	r3, r2, r3
 800820c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008216:	d112      	bne.n	800823e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2200      	movs	r2, #0
 8008220:	2180      	movs	r1, #128	; 0x80
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7ff ff13 	bl	800804e <SPI_WaitFlagStateUntilTimeout>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d016      	beq.n	800825c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008232:	f043 0220 	orr.w	r2, r3, #32
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e00f      	b.n	800825e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d00a      	beq.n	800825a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	3b01      	subs	r3, #1
 8008248:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008254:	2b80      	cmp	r3, #128	; 0x80
 8008256:	d0f2      	beq.n	800823e <SPI_EndRxTxTransaction+0x52>
 8008258:	e000      	b.n	800825c <SPI_EndRxTxTransaction+0x70>
        break;
 800825a:	bf00      	nop
  }

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000234 	.word	0x20000234
 800826c:	165e9f81 	.word	0x165e9f81

08008270 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 800827a:	2300      	movs	r3, #0
 800827c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b01      	cmp	r3, #1
 8008288:	d029      	beq.n	80082de <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008296:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800829a:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80082a4:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80082aa:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80082b0:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 80082b6:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 80082bc:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 80082c2:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 80082c8:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 80082ce:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	601a      	str	r2, [r3, #0]
 80082dc:	e034      	b.n	8008348 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082ea:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80082f4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80082fa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	4313      	orrs	r3, r2
 8008300:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800830e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008312:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800831c:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8008322:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8008328:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 800832e:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8008334:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008336:	68ba      	ldr	r2, [r7, #8]
 8008338:	4313      	orrs	r3, r2
 800833a:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008356:	b480      	push	{r7}
 8008358:	b087      	sub	sp, #28
 800835a:	af00      	add	r7, sp, #0
 800835c:	60f8      	str	r0, [r7, #12]
 800835e:	60b9      	str	r1, [r7, #8]
 8008360:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d02e      	beq.n	80083ce <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800837c:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	3b01      	subs	r3, #1
 800838a:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800838c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	3b01      	subs	r3, #1
 8008394:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8008396:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	68db      	ldr	r3, [r3, #12]
 800839c:	3b01      	subs	r3, #1
 800839e:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80083a0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80083aa:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80083b4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80083be:	4313      	orrs	r3, r2
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	609a      	str	r2, [r3, #8]
 80083cc:	e03b      	b.n	8008446 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083de:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	3b01      	subs	r3, #1
 80083ee:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80083f0:	4313      	orrs	r3, r2
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	68db      	ldr	r3, [r3, #12]
 80083fc:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008404:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	3b01      	subs	r3, #1
 8008412:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008414:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	3b01      	subs	r3, #1
 800841c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800841e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	3b01      	subs	r3, #1
 8008426:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8008428:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	3b01      	subs	r3, #1
 8008430:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8008432:	4313      	orrs	r3, r2
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	4313      	orrs	r3, r2
 8008438:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	693a      	ldr	r2, [r7, #16]
 8008444:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008470:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	3b01      	subs	r3, #1
 8008478:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800847a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8008482:	4313      	orrs	r3, r2
 8008484:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800848c:	f7fb ff26 	bl	80042dc <HAL_GetTick>
 8008490:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008492:	e010      	b.n	80084b6 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800849a:	d00c      	beq.n	80084b6 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d007      	beq.n	80084b2 <FMC_SDRAM_SendCommand+0x5e>
 80084a2:	f7fb ff1b 	bl	80042dc <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d201      	bcs.n	80084b6 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e006      	b.n	80084c4 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b20      	cmp	r3, #32
 80084c0:	d0e8      	beq.n	8008494 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695a      	ldr	r2, [r3, #20]
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	431a      	orrs	r2, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	370c      	adds	r7, #12
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
	...

080084f4 <arm_max_f32>:
 80084f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f8:	1e4f      	subs	r7, r1, #1
 80084fa:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80084fe:	f100 0e04 	add.w	lr, r0, #4
 8008502:	edd0 7a00 	vldr	s15, [r0]
 8008506:	d058      	beq.n	80085ba <arm_max_f32+0xc6>
 8008508:	3014      	adds	r0, #20
 800850a:	46c4      	mov	ip, r8
 800850c:	2604      	movs	r6, #4
 800850e:	2400      	movs	r4, #0
 8008510:	ed10 6a04 	vldr	s12, [r0, #-16]
 8008514:	ed50 6a03 	vldr	s13, [r0, #-12]
 8008518:	ed10 7a02 	vldr	s14, [r0, #-8]
 800851c:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008520:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008528:	bfc8      	it	gt
 800852a:	eef0 7a46 	vmovgt.f32	s15, s12
 800852e:	f1a6 0503 	sub.w	r5, r6, #3
 8008532:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008536:	bfc8      	it	gt
 8008538:	462c      	movgt	r4, r5
 800853a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853e:	bf48      	it	mi
 8008540:	eef0 7a66 	vmovmi.f32	s15, s13
 8008544:	f1a6 0502 	sub.w	r5, r6, #2
 8008548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800854c:	bf48      	it	mi
 800854e:	462c      	movmi	r4, r5
 8008550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008554:	bf48      	it	mi
 8008556:	eef0 7a47 	vmovmi.f32	s15, s14
 800855a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800855e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008562:	bf48      	it	mi
 8008564:	462c      	movmi	r4, r5
 8008566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800856a:	bf48      	it	mi
 800856c:	4634      	movmi	r4, r6
 800856e:	bf48      	it	mi
 8008570:	eef0 7a65 	vmovmi.f32	s15, s11
 8008574:	f1bc 0c01 	subs.w	ip, ip, #1
 8008578:	f100 0010 	add.w	r0, r0, #16
 800857c:	f106 0604 	add.w	r6, r6, #4
 8008580:	d1c6      	bne.n	8008510 <arm_max_f32+0x1c>
 8008582:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8008586:	f017 0003 	ands.w	r0, r7, #3
 800858a:	d018      	beq.n	80085be <arm_max_f32+0xca>
 800858c:	1a08      	subs	r0, r1, r0
 800858e:	ecbe 7a01 	vldmia	lr!, {s14}
 8008592:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859a:	bfc8      	it	gt
 800859c:	4604      	movgt	r4, r0
 800859e:	f100 0001 	add.w	r0, r0, #1
 80085a2:	bfd8      	it	le
 80085a4:	eeb0 7a67 	vmovle.f32	s14, s15
 80085a8:	4281      	cmp	r1, r0
 80085aa:	eef0 7a47 	vmov.f32	s15, s14
 80085ae:	d1ee      	bne.n	800858e <arm_max_f32+0x9a>
 80085b0:	ed82 7a00 	vstr	s14, [r2]
 80085b4:	601c      	str	r4, [r3, #0]
 80085b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ba:	4644      	mov	r4, r8
 80085bc:	e7e3      	b.n	8008586 <arm_max_f32+0x92>
 80085be:	eeb0 7a67 	vmov.f32	s14, s15
 80085c2:	e7f5      	b.n	80085b0 <arm_max_f32+0xbc>

080085c4 <arm_cfft_radix8by2_f32>:
 80085c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c8:	ed2d 8b08 	vpush	{d8-d11}
 80085cc:	4607      	mov	r7, r0
 80085ce:	4608      	mov	r0, r1
 80085d0:	f8b7 e000 	ldrh.w	lr, [r7]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80085da:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80085de:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80085e2:	f000 80b0 	beq.w	8008746 <arm_cfft_radix8by2_f32+0x182>
 80085e6:	008b      	lsls	r3, r1, #2
 80085e8:	3310      	adds	r3, #16
 80085ea:	18c6      	adds	r6, r0, r3
 80085ec:	3210      	adds	r2, #16
 80085ee:	4443      	add	r3, r8
 80085f0:	f100 0510 	add.w	r5, r0, #16
 80085f4:	f108 0410 	add.w	r4, r8, #16
 80085f8:	ed54 1a04 	vldr	s3, [r4, #-16]
 80085fc:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008600:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008604:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008608:	ed53 5a02 	vldr	s11, [r3, #-8]
 800860c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8008610:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008614:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008618:	ed16 2a04 	vldr	s4, [r6, #-16]
 800861c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8008620:	ed15 6a03 	vldr	s12, [r5, #-12]
 8008624:	ed15 7a01 	vldr	s14, [r5, #-4]
 8008628:	ed15 3a04 	vldr	s6, [r5, #-16]
 800862c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8008630:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008634:	ed55 4a02 	vldr	s9, [r5, #-8]
 8008638:	ee73 ba21 	vadd.f32	s23, s6, s3
 800863c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8008640:	ee37 aa27 	vadd.f32	s20, s14, s15
 8008644:	ee72 9a04 	vadd.f32	s19, s4, s8
 8008648:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800864c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008650:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008654:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8008658:	ed45 ba04 	vstr	s23, [r5, #-16]
 800865c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008660:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008664:	ed05 aa01 	vstr	s20, [r5, #-4]
 8008668:	ed06 8a01 	vstr	s16, [r6, #-4]
 800866c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008670:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008674:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008678:	ee76 6a66 	vsub.f32	s13, s12, s13
 800867c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008680:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008684:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008688:	ee33 3a61 	vsub.f32	s6, s6, s3
 800868c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008690:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008694:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008698:	ee63 1a22 	vmul.f32	s3, s6, s5
 800869c:	ee24 4a22 	vmul.f32	s8, s8, s5
 80086a0:	ee23 3a06 	vmul.f32	s6, s6, s12
 80086a4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80086a8:	ee23 6a86 	vmul.f32	s12, s7, s12
 80086ac:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80086b0:	ee36 6a04 	vadd.f32	s12, s12, s8
 80086b4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80086b8:	ee72 3a63 	vsub.f32	s7, s4, s7
 80086bc:	ee71 2a88 	vadd.f32	s5, s3, s16
 80086c0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80086c4:	ed44 2a04 	vstr	s5, [r4, #-16]
 80086c8:	ed43 3a04 	vstr	s7, [r3, #-16]
 80086cc:	ed03 6a03 	vstr	s12, [r3, #-12]
 80086d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086d4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80086d8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80086dc:	ed52 5a02 	vldr	s11, [r2, #-8]
 80086e0:	ee35 6a41 	vsub.f32	s12, s10, s2
 80086e4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80086e8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80086ec:	ee26 5a87 	vmul.f32	s10, s13, s14
 80086f0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80086f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80086f8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80086fc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008700:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008704:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008708:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800870c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008710:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008714:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008718:	f1be 0e01 	subs.w	lr, lr, #1
 800871c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8008720:	f105 0510 	add.w	r5, r5, #16
 8008724:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008728:	f106 0610 	add.w	r6, r6, #16
 800872c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8008730:	ed03 7a01 	vstr	s14, [r3, #-4]
 8008734:	f102 0210 	add.w	r2, r2, #16
 8008738:	f104 0410 	add.w	r4, r4, #16
 800873c:	f103 0310 	add.w	r3, r3, #16
 8008740:	f47f af5a 	bne.w	80085f8 <arm_cfft_radix8by2_f32+0x34>
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	b28c      	uxth	r4, r1
 8008748:	4621      	mov	r1, r4
 800874a:	2302      	movs	r3, #2
 800874c:	f000 fbca 	bl	8008ee4 <arm_radix8_butterfly_f32>
 8008750:	ecbd 8b08 	vpop	{d8-d11}
 8008754:	4621      	mov	r1, r4
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	4640      	mov	r0, r8
 800875a:	2302      	movs	r3, #2
 800875c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008760:	f000 bbc0 	b.w	8008ee4 <arm_radix8_butterfly_f32>

08008764 <arm_cfft_radix8by4_f32>:
 8008764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	ed2d 8b0a 	vpush	{d8-d12}
 800876c:	8802      	ldrh	r2, [r0, #0]
 800876e:	ed91 6a00 	vldr	s12, [r1]
 8008772:	b08f      	sub	sp, #60	; 0x3c
 8008774:	460f      	mov	r7, r1
 8008776:	0852      	lsrs	r2, r2, #1
 8008778:	6841      	ldr	r1, [r0, #4]
 800877a:	900c      	str	r0, [sp, #48]	; 0x30
 800877c:	0093      	lsls	r3, r2, #2
 800877e:	4638      	mov	r0, r7
 8008780:	4418      	add	r0, r3
 8008782:	4606      	mov	r6, r0
 8008784:	9009      	str	r0, [sp, #36]	; 0x24
 8008786:	4418      	add	r0, r3
 8008788:	edd0 6a00 	vldr	s13, [r0]
 800878c:	ed96 4a00 	vldr	s8, [r6]
 8008790:	edd6 2a01 	vldr	s5, [r6, #4]
 8008794:	edd0 7a01 	vldr	s15, [r0, #4]
 8008798:	900a      	str	r0, [sp, #40]	; 0x28
 800879a:	ee76 5a26 	vadd.f32	s11, s12, s13
 800879e:	4604      	mov	r4, r0
 80087a0:	4625      	mov	r5, r4
 80087a2:	441c      	add	r4, r3
 80087a4:	edd4 4a00 	vldr	s9, [r4]
 80087a8:	ed97 7a01 	vldr	s14, [r7, #4]
 80087ac:	ed94 3a01 	vldr	s6, [r4, #4]
 80087b0:	9401      	str	r4, [sp, #4]
 80087b2:	ee35 5a84 	vadd.f32	s10, s11, s8
 80087b6:	4630      	mov	r0, r6
 80087b8:	ee35 5a24 	vadd.f32	s10, s10, s9
 80087bc:	463e      	mov	r6, r7
 80087be:	ee15 ea10 	vmov	lr, s10
 80087c2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80087c6:	f846 eb08 	str.w	lr, [r6], #8
 80087ca:	ee37 6a27 	vadd.f32	s12, s14, s15
 80087ce:	ed90 5a01 	vldr	s10, [r0, #4]
 80087d2:	9605      	str	r6, [sp, #20]
 80087d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087d8:	9e01      	ldr	r6, [sp, #4]
 80087da:	9707      	str	r7, [sp, #28]
 80087dc:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80087e0:	ed96 2a01 	vldr	s4, [r6, #4]
 80087e4:	ee36 7a05 	vadd.f32	s14, s12, s10
 80087e8:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80087ec:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80087f0:	ee77 7a84 	vadd.f32	s15, s15, s8
 80087f4:	ee33 4ac3 	vsub.f32	s8, s7, s6
 80087f8:	4604      	mov	r4, r0
 80087fa:	46a3      	mov	fp, r4
 80087fc:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008800:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008804:	ee14 8a10 	vmov	r8, s8
 8008808:	46a4      	mov	ip, r4
 800880a:	ee75 5ae4 	vsub.f32	s11, s11, s9
 800880e:	ed87 7a01 	vstr	s14, [r7, #4]
 8008812:	f84b 8b08 	str.w	r8, [fp], #8
 8008816:	f1ac 0704 	sub.w	r7, ip, #4
 800881a:	ed8c 5a01 	vstr	s10, [ip, #4]
 800881e:	f101 0c08 	add.w	ip, r1, #8
 8008822:	462c      	mov	r4, r5
 8008824:	f8cd c010 	str.w	ip, [sp, #16]
 8008828:	ee15 ca90 	vmov	ip, s11
 800882c:	ee36 6a62 	vsub.f32	s12, s12, s5
 8008830:	f844 cb08 	str.w	ip, [r4], #8
 8008834:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008838:	ee36 6a43 	vsub.f32	s12, s12, s6
 800883c:	9406      	str	r4, [sp, #24]
 800883e:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008842:	f101 0410 	add.w	r4, r1, #16
 8008846:	0852      	lsrs	r2, r2, #1
 8008848:	9402      	str	r4, [sp, #8]
 800884a:	ed85 6a01 	vstr	s12, [r5, #4]
 800884e:	462c      	mov	r4, r5
 8008850:	f101 0518 	add.w	r5, r1, #24
 8008854:	920b      	str	r2, [sp, #44]	; 0x2c
 8008856:	46b2      	mov	sl, r6
 8008858:	9503      	str	r5, [sp, #12]
 800885a:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800885e:	3a02      	subs	r2, #2
 8008860:	ee16 5a90 	vmov	r5, s13
 8008864:	46b6      	mov	lr, r6
 8008866:	4630      	mov	r0, r6
 8008868:	0852      	lsrs	r2, r2, #1
 800886a:	f84a 5b08 	str.w	r5, [sl], #8
 800886e:	f1a0 0604 	sub.w	r6, r0, #4
 8008872:	edce 7a01 	vstr	s15, [lr, #4]
 8008876:	9208      	str	r2, [sp, #32]
 8008878:	f000 8130 	beq.w	8008adc <arm_cfft_radix8by4_f32+0x378>
 800887c:	4691      	mov	r9, r2
 800887e:	9a07      	ldr	r2, [sp, #28]
 8008880:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008884:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008888:	3b08      	subs	r3, #8
 800888a:	f102 0510 	add.w	r5, r2, #16
 800888e:	f101 0c20 	add.w	ip, r1, #32
 8008892:	f1a4 020c 	sub.w	r2, r4, #12
 8008896:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800889a:	4433      	add	r3, r6
 800889c:	3410      	adds	r4, #16
 800889e:	4650      	mov	r0, sl
 80088a0:	4659      	mov	r1, fp
 80088a2:	ed55 3a02 	vldr	s7, [r5, #-8]
 80088a6:	ed14 5a02 	vldr	s10, [r4, #-8]
 80088aa:	ed91 7a00 	vldr	s14, [r1]
 80088ae:	edd0 7a00 	vldr	s15, [r0]
 80088b2:	ed54 5a01 	vldr	s11, [r4, #-4]
 80088b6:	ed15 4a01 	vldr	s8, [r5, #-4]
 80088ba:	edd0 6a01 	vldr	s13, [r0, #4]
 80088be:	ed91 6a01 	vldr	s12, [r1, #4]
 80088c2:	ee33 8a85 	vadd.f32	s16, s7, s10
 80088c6:	ee34 0a25 	vadd.f32	s0, s8, s11
 80088ca:	ee78 4a07 	vadd.f32	s9, s16, s14
 80088ce:	ee74 5a65 	vsub.f32	s11, s8, s11
 80088d2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80088d6:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80088da:	ed45 4a02 	vstr	s9, [r5, #-8]
 80088de:	edd1 4a01 	vldr	s9, [r1, #4]
 80088e2:	ed90 4a01 	vldr	s8, [r0, #4]
 80088e6:	ee70 4a24 	vadd.f32	s9, s0, s9
 80088ea:	ee75 aa06 	vadd.f32	s21, s10, s12
 80088ee:	ee74 4a84 	vadd.f32	s9, s9, s8
 80088f2:	ee35 aac7 	vsub.f32	s20, s11, s14
 80088f6:	ed45 4a01 	vstr	s9, [r5, #-4]
 80088fa:	edd6 1a00 	vldr	s3, [r6]
 80088fe:	edd7 0a00 	vldr	s1, [r7]
 8008902:	ed92 4a02 	vldr	s8, [r2, #8]
 8008906:	edd3 3a02 	vldr	s7, [r3, #8]
 800890a:	ed93 2a01 	vldr	s4, [r3, #4]
 800890e:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008912:	edd2 2a01 	vldr	s5, [r2, #4]
 8008916:	ed57 9a01 	vldr	s19, [r7, #-4]
 800891a:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800891e:	ee39 3a81 	vadd.f32	s6, s19, s2
 8008922:	ee74 8a84 	vadd.f32	s17, s9, s8
 8008926:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800892a:	ee78 8aa3 	vadd.f32	s17, s17, s7
 800892e:	ee7a aae6 	vsub.f32	s21, s21, s13
 8008932:	ee18 aa90 	vmov	sl, s17
 8008936:	f847 a908 	str.w	sl, [r7], #-8
 800893a:	edd2 8a01 	vldr	s17, [r2, #4]
 800893e:	ed93 9a01 	vldr	s18, [r3, #4]
 8008942:	ee73 8a28 	vadd.f32	s17, s6, s17
 8008946:	ee3a aa27 	vadd.f32	s20, s20, s15
 800894a:	ee78 8a89 	vadd.f32	s17, s17, s18
 800894e:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008952:	edc7 8a01 	vstr	s17, [r7, #4]
 8008956:	ed18 ba02 	vldr	s22, [r8, #-8]
 800895a:	ed58 8a01 	vldr	s17, [r8, #-4]
 800895e:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008962:	ee6a ba28 	vmul.f32	s23, s20, s17
 8008966:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800896a:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800896e:	ee31 9a20 	vadd.f32	s18, s2, s1
 8008972:	ee79 9a82 	vadd.f32	s19, s19, s4
 8008976:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800897a:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800897e:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008982:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8008986:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800898a:	ee69 8a28 	vmul.f32	s17, s18, s17
 800898e:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008992:	ee1c aa10 	vmov	sl, s24
 8008996:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800899a:	f841 ab08 	str.w	sl, [r1], #8
 800899e:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80089a2:	ee3b bacb 	vsub.f32	s22, s23, s22
 80089a6:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80089aa:	ee33 3a62 	vsub.f32	s6, s6, s5
 80089ae:	ed01 aa01 	vstr	s20, [r1, #-4]
 80089b2:	edc2 8a01 	vstr	s17, [r2, #4]
 80089b6:	ed82 ba02 	vstr	s22, [r2, #8]
 80089ba:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80089be:	ee74 3a63 	vsub.f32	s7, s8, s7
 80089c2:	ee38 8a47 	vsub.f32	s16, s16, s14
 80089c6:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80089ca:	ee30 0a46 	vsub.f32	s0, s0, s12
 80089ce:	ee33 3a42 	vsub.f32	s6, s6, s4
 80089d2:	ee38 8a67 	vsub.f32	s16, s16, s15
 80089d6:	ee30 0a66 	vsub.f32	s0, s0, s13
 80089da:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80089de:	ee63 8a04 	vmul.f32	s17, s6, s8
 80089e2:	ee28 aa24 	vmul.f32	s20, s16, s9
 80089e6:	ee60 9a04 	vmul.f32	s19, s0, s8
 80089ea:	ee28 8a04 	vmul.f32	s16, s16, s8
 80089ee:	ee20 0a24 	vmul.f32	s0, s0, s9
 80089f2:	ee63 3a84 	vmul.f32	s7, s7, s8
 80089f6:	ee39 4a68 	vsub.f32	s8, s18, s17
 80089fa:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80089fe:	ee14 aa10 	vmov	sl, s8
 8008a02:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008a06:	ee63 4a24 	vmul.f32	s9, s6, s9
 8008a0a:	ed44 9a02 	vstr	s19, [r4, #-8]
 8008a0e:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008a12:	ed04 0a01 	vstr	s0, [r4, #-4]
 8008a16:	f846 a908 	str.w	sl, [r6], #-8
 8008a1a:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008a1e:	ee35 7a87 	vadd.f32	s14, s11, s14
 8008a22:	edc6 3a01 	vstr	s7, [r6, #4]
 8008a26:	ee76 6a26 	vadd.f32	s13, s12, s13
 8008a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a2e:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8008a32:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8008a36:	ee67 5a86 	vmul.f32	s11, s15, s12
 8008a3a:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008a3e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8008a42:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008a46:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8008a4a:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008a4e:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008a52:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a5a:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008a5e:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008a62:	ee21 1a07 	vmul.f32	s2, s2, s14
 8008a66:	ee15 aa90 	vmov	sl, s11
 8008a6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008a6e:	f840 ab08 	str.w	sl, [r0], #8
 8008a72:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008a76:	ee76 2a22 	vadd.f32	s5, s12, s5
 8008a7a:	f1b9 0901 	subs.w	r9, r9, #1
 8008a7e:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008a82:	f105 0508 	add.w	r5, r5, #8
 8008a86:	ed83 1a02 	vstr	s2, [r3, #8]
 8008a8a:	edc3 2a01 	vstr	s5, [r3, #4]
 8008a8e:	f108 0808 	add.w	r8, r8, #8
 8008a92:	f1a2 0208 	sub.w	r2, r2, #8
 8008a96:	f10c 0c10 	add.w	ip, ip, #16
 8008a9a:	f104 0408 	add.w	r4, r4, #8
 8008a9e:	f10e 0e18 	add.w	lr, lr, #24
 8008aa2:	f1a3 0308 	sub.w	r3, r3, #8
 8008aa6:	f47f aefc 	bne.w	80088a2 <arm_cfft_radix8by4_f32+0x13e>
 8008aaa:	9908      	ldr	r1, [sp, #32]
 8008aac:	9802      	ldr	r0, [sp, #8]
 8008aae:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008ab2:	00cb      	lsls	r3, r1, #3
 8008ab4:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008ab8:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008abc:	9102      	str	r1, [sp, #8]
 8008abe:	9905      	ldr	r1, [sp, #20]
 8008ac0:	4419      	add	r1, r3
 8008ac2:	9105      	str	r1, [sp, #20]
 8008ac4:	9904      	ldr	r1, [sp, #16]
 8008ac6:	4419      	add	r1, r3
 8008ac8:	9104      	str	r1, [sp, #16]
 8008aca:	9906      	ldr	r1, [sp, #24]
 8008acc:	449b      	add	fp, r3
 8008ace:	4419      	add	r1, r3
 8008ad0:	449a      	add	sl, r3
 8008ad2:	9b03      	ldr	r3, [sp, #12]
 8008ad4:	9106      	str	r1, [sp, #24]
 8008ad6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ada:	9303      	str	r3, [sp, #12]
 8008adc:	9a05      	ldr	r2, [sp, #20]
 8008ade:	9806      	ldr	r0, [sp, #24]
 8008ae0:	ed92 4a00 	vldr	s8, [r2]
 8008ae4:	ed90 7a00 	vldr	s14, [r0]
 8008ae8:	ed9b 3a00 	vldr	s6, [fp]
 8008aec:	edda 3a00 	vldr	s7, [sl]
 8008af0:	edd2 4a01 	vldr	s9, [r2, #4]
 8008af4:	edd0 6a01 	vldr	s13, [r0, #4]
 8008af8:	ed9a 2a01 	vldr	s4, [sl, #4]
 8008afc:	eddb 7a01 	vldr	s15, [fp, #4]
 8008b00:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8008b04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008b06:	ee34 6a07 	vadd.f32	s12, s8, s14
 8008b0a:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8008b0e:	ee36 5a03 	vadd.f32	s10, s12, s6
 8008b12:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8008b16:	ee35 5a23 	vadd.f32	s10, s10, s7
 8008b1a:	ee34 7a47 	vsub.f32	s14, s8, s14
 8008b1e:	ed82 5a00 	vstr	s10, [r2]
 8008b22:	ed9b 5a01 	vldr	s10, [fp, #4]
 8008b26:	edda 4a01 	vldr	s9, [sl, #4]
 8008b2a:	ee35 5a85 	vadd.f32	s10, s11, s10
 8008b2e:	ee37 4a27 	vadd.f32	s8, s14, s15
 8008b32:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008b36:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8008b3a:	ed82 5a01 	vstr	s10, [r2, #4]
 8008b3e:	9a04      	ldr	r2, [sp, #16]
 8008b40:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8008b44:	edd2 1a00 	vldr	s3, [r2]
 8008b48:	edd2 2a01 	vldr	s5, [r2, #4]
 8008b4c:	9a02      	ldr	r2, [sp, #8]
 8008b4e:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008b52:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008b56:	ee64 4a21 	vmul.f32	s9, s8, s3
 8008b5a:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008b5e:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008b62:	ee25 5a21 	vmul.f32	s10, s10, s3
 8008b66:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008b6a:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008b6e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008b72:	edcb 2a00 	vstr	s5, [fp]
 8008b76:	ed8b 5a01 	vstr	s10, [fp, #4]
 8008b7a:	ed92 4a01 	vldr	s8, [r2, #4]
 8008b7e:	ed92 5a00 	vldr	s10, [r2]
 8008b82:	9a03      	ldr	r2, [sp, #12]
 8008b84:	ee36 6a63 	vsub.f32	s12, s12, s7
 8008b88:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008b8c:	ee66 4a05 	vmul.f32	s9, s12, s10
 8008b90:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008b94:	ee26 6a04 	vmul.f32	s12, s12, s8
 8008b98:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008b9c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008ba0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8008ba4:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bac:	ed80 6a01 	vstr	s12, [r0, #4]
 8008bb0:	edc0 5a00 	vstr	s11, [r0]
 8008bb4:	edd2 5a01 	vldr	s11, [r2, #4]
 8008bb8:	9807      	ldr	r0, [sp, #28]
 8008bba:	ee77 7a02 	vadd.f32	s15, s14, s4
 8008bbe:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8008bc2:	edd2 6a00 	vldr	s13, [r2]
 8008bc6:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8008bca:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008bce:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008bd2:	ee27 7a25 	vmul.f32	s14, s14, s11
 8008bd6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008bda:	ee36 7a07 	vadd.f32	s14, s12, s14
 8008bde:	edca 7a01 	vstr	s15, [sl, #4]
 8008be2:	ed8a 7a00 	vstr	s14, [sl]
 8008be6:	6872      	ldr	r2, [r6, #4]
 8008be8:	4621      	mov	r1, r4
 8008bea:	2304      	movs	r3, #4
 8008bec:	f000 f97a 	bl	8008ee4 <arm_radix8_butterfly_f32>
 8008bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bf2:	6872      	ldr	r2, [r6, #4]
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	2304      	movs	r3, #4
 8008bf8:	f000 f974 	bl	8008ee4 <arm_radix8_butterfly_f32>
 8008bfc:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008bfe:	6872      	ldr	r2, [r6, #4]
 8008c00:	4621      	mov	r1, r4
 8008c02:	2304      	movs	r3, #4
 8008c04:	f000 f96e 	bl	8008ee4 <arm_radix8_butterfly_f32>
 8008c08:	6872      	ldr	r2, [r6, #4]
 8008c0a:	9801      	ldr	r0, [sp, #4]
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	2304      	movs	r3, #4
 8008c10:	b00f      	add	sp, #60	; 0x3c
 8008c12:	ecbd 8b0a 	vpop	{d8-d12}
 8008c16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1a:	f000 b963 	b.w	8008ee4 <arm_radix8_butterfly_f32>
 8008c1e:	bf00      	nop

08008c20 <arm_cfft_f32>:
 8008c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c24:	2a01      	cmp	r2, #1
 8008c26:	4606      	mov	r6, r0
 8008c28:	4617      	mov	r7, r2
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	4698      	mov	r8, r3
 8008c2e:	8805      	ldrh	r5, [r0, #0]
 8008c30:	d054      	beq.n	8008cdc <arm_cfft_f32+0xbc>
 8008c32:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008c36:	d04c      	beq.n	8008cd2 <arm_cfft_f32+0xb2>
 8008c38:	d916      	bls.n	8008c68 <arm_cfft_f32+0x48>
 8008c3a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008c3e:	d01a      	beq.n	8008c76 <arm_cfft_f32+0x56>
 8008c40:	d95c      	bls.n	8008cfc <arm_cfft_f32+0xdc>
 8008c42:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008c46:	d044      	beq.n	8008cd2 <arm_cfft_f32+0xb2>
 8008c48:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008c4c:	d105      	bne.n	8008c5a <arm_cfft_f32+0x3a>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	6872      	ldr	r2, [r6, #4]
 8008c52:	4629      	mov	r1, r5
 8008c54:	4620      	mov	r0, r4
 8008c56:	f000 f945 	bl	8008ee4 <arm_radix8_butterfly_f32>
 8008c5a:	f1b8 0f00 	cmp.w	r8, #0
 8008c5e:	d111      	bne.n	8008c84 <arm_cfft_f32+0x64>
 8008c60:	2f01      	cmp	r7, #1
 8008c62:	d016      	beq.n	8008c92 <arm_cfft_f32+0x72>
 8008c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c68:	2d20      	cmp	r5, #32
 8008c6a:	d032      	beq.n	8008cd2 <arm_cfft_f32+0xb2>
 8008c6c:	d94a      	bls.n	8008d04 <arm_cfft_f32+0xe4>
 8008c6e:	2d40      	cmp	r5, #64	; 0x40
 8008c70:	d0ed      	beq.n	8008c4e <arm_cfft_f32+0x2e>
 8008c72:	2d80      	cmp	r5, #128	; 0x80
 8008c74:	d1f1      	bne.n	8008c5a <arm_cfft_f32+0x3a>
 8008c76:	4621      	mov	r1, r4
 8008c78:	4630      	mov	r0, r6
 8008c7a:	f7ff fca3 	bl	80085c4 <arm_cfft_radix8by2_f32>
 8008c7e:	f1b8 0f00 	cmp.w	r8, #0
 8008c82:	d0ed      	beq.n	8008c60 <arm_cfft_f32+0x40>
 8008c84:	68b2      	ldr	r2, [r6, #8]
 8008c86:	89b1      	ldrh	r1, [r6, #12]
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f7f7 fab1 	bl	80001f0 <arm_bitreversal_32>
 8008c8e:	2f01      	cmp	r7, #1
 8008c90:	d1e8      	bne.n	8008c64 <arm_cfft_f32+0x44>
 8008c92:	ee07 5a90 	vmov	s15, r5
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008ca2:	2d00      	cmp	r5, #0
 8008ca4:	d0de      	beq.n	8008c64 <arm_cfft_f32+0x44>
 8008ca6:	f104 0108 	add.w	r1, r4, #8
 8008caa:	2300      	movs	r3, #0
 8008cac:	3301      	adds	r3, #1
 8008cae:	429d      	cmp	r5, r3
 8008cb0:	f101 0108 	add.w	r1, r1, #8
 8008cb4:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008cb8:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008cbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008cc0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008cc4:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008cc8:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008ccc:	d1ee      	bne.n	8008cac <arm_cfft_f32+0x8c>
 8008cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	f7ff fd45 	bl	8008764 <arm_cfft_radix8by4_f32>
 8008cda:	e7be      	b.n	8008c5a <arm_cfft_f32+0x3a>
 8008cdc:	b1ad      	cbz	r5, 8008d0a <arm_cfft_f32+0xea>
 8008cde:	f101 030c 	add.w	r3, r1, #12
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008ce8:	3201      	adds	r2, #1
 8008cea:	eef1 7a67 	vneg.f32	s15, s15
 8008cee:	4295      	cmp	r5, r2
 8008cf0:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008cf4:	f103 0308 	add.w	r3, r3, #8
 8008cf8:	d1f4      	bne.n	8008ce4 <arm_cfft_f32+0xc4>
 8008cfa:	e79a      	b.n	8008c32 <arm_cfft_f32+0x12>
 8008cfc:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008d00:	d0a5      	beq.n	8008c4e <arm_cfft_f32+0x2e>
 8008d02:	e7aa      	b.n	8008c5a <arm_cfft_f32+0x3a>
 8008d04:	2d10      	cmp	r5, #16
 8008d06:	d0b6      	beq.n	8008c76 <arm_cfft_f32+0x56>
 8008d08:	e7a7      	b.n	8008c5a <arm_cfft_f32+0x3a>
 8008d0a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008d0e:	d894      	bhi.n	8008c3a <arm_cfft_f32+0x1a>
 8008d10:	e7aa      	b.n	8008c68 <arm_cfft_f32+0x48>
 8008d12:	bf00      	nop

08008d14 <arm_cmplx_mag_f32>:
 8008d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d18:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008d1c:	b084      	sub	sp, #16
 8008d1e:	d07f      	beq.n	8008e20 <arm_cmplx_mag_f32+0x10c>
 8008d20:	2700      	movs	r7, #0
 8008d22:	f100 0420 	add.w	r4, r0, #32
 8008d26:	f101 0510 	add.w	r5, r1, #16
 8008d2a:	4646      	mov	r6, r8
 8008d2c:	e05a      	b.n	8008de4 <arm_cmplx_mag_f32+0xd0>
 8008d2e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008d32:	eeb4 0a40 	vcmp.f32	s0, s0
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	f040 80a4 	bne.w	8008e86 <arm_cmplx_mag_f32+0x172>
 8008d3e:	ed05 0a04 	vstr	s0, [r5, #-16]
 8008d42:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008d46:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8008d4a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d4e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008d52:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008d56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5e:	f2c0 808f 	blt.w	8008e80 <arm_cmplx_mag_f32+0x16c>
 8008d62:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008d66:	eeb4 0a40 	vcmp.f32	s0, s0
 8008d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6e:	f040 80af 	bne.w	8008ed0 <arm_cmplx_mag_f32+0x1bc>
 8008d72:	ed05 0a03 	vstr	s0, [r5, #-12]
 8008d76:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008d7a:	ed14 0a03 	vldr	s0, [r4, #-12]
 8008d7e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d82:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008d86:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008d8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d92:	db72      	blt.n	8008e7a <arm_cmplx_mag_f32+0x166>
 8008d94:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008d98:	eeb4 0a40 	vcmp.f32	s0, s0
 8008d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da0:	f040 808c 	bne.w	8008ebc <arm_cmplx_mag_f32+0x1a8>
 8008da4:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008da8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008dac:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008db0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008db4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008db8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008dbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc4:	db20      	blt.n	8008e08 <arm_cmplx_mag_f32+0xf4>
 8008dc6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008dca:	eeb4 0a40 	vcmp.f32	s0, s0
 8008dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd2:	d169      	bne.n	8008ea8 <arm_cmplx_mag_f32+0x194>
 8008dd4:	3e01      	subs	r6, #1
 8008dd6:	ed05 0a01 	vstr	s0, [r5, #-4]
 8008dda:	f104 0420 	add.w	r4, r4, #32
 8008dde:	f105 0510 	add.w	r5, r5, #16
 8008de2:	d019      	beq.n	8008e18 <arm_cmplx_mag_f32+0x104>
 8008de4:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008de8:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008dec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008df0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008df4:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008df8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e00:	da95      	bge.n	8008d2e <arm_cmplx_mag_f32+0x1a>
 8008e02:	f845 7c10 	str.w	r7, [r5, #-16]
 8008e06:	e79c      	b.n	8008d42 <arm_cmplx_mag_f32+0x2e>
 8008e08:	3e01      	subs	r6, #1
 8008e0a:	f845 7c04 	str.w	r7, [r5, #-4]
 8008e0e:	f104 0420 	add.w	r4, r4, #32
 8008e12:	f105 0510 	add.w	r5, r5, #16
 8008e16:	d1e5      	bne.n	8008de4 <arm_cmplx_mag_f32+0xd0>
 8008e18:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008e1c:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008e20:	f012 0503 	ands.w	r5, r2, #3
 8008e24:	d026      	beq.n	8008e74 <arm_cmplx_mag_f32+0x160>
 8008e26:	2600      	movs	r6, #0
 8008e28:	f100 0408 	add.w	r4, r0, #8
 8008e2c:	e00c      	b.n	8008e48 <arm_cmplx_mag_f32+0x134>
 8008e2e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008e32:	eeb4 0a40 	vcmp.f32	s0, s0
 8008e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3a:	d12e      	bne.n	8008e9a <arm_cmplx_mag_f32+0x186>
 8008e3c:	3d01      	subs	r5, #1
 8008e3e:	ed01 0a01 	vstr	s0, [r1, #-4]
 8008e42:	f104 0408 	add.w	r4, r4, #8
 8008e46:	d015      	beq.n	8008e74 <arm_cmplx_mag_f32+0x160>
 8008e48:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008e4c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008e50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e54:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008e58:	3104      	adds	r1, #4
 8008e5a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008e5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e66:	dae2      	bge.n	8008e2e <arm_cmplx_mag_f32+0x11a>
 8008e68:	3d01      	subs	r5, #1
 8008e6a:	f841 6c04 	str.w	r6, [r1, #-4]
 8008e6e:	f104 0408 	add.w	r4, r4, #8
 8008e72:	d1e9      	bne.n	8008e48 <arm_cmplx_mag_f32+0x134>
 8008e74:	b004      	add	sp, #16
 8008e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e7a:	f845 7c08 	str.w	r7, [r5, #-8]
 8008e7e:	e793      	b.n	8008da8 <arm_cmplx_mag_f32+0x94>
 8008e80:	f845 7c0c 	str.w	r7, [r5, #-12]
 8008e84:	e777      	b.n	8008d76 <arm_cmplx_mag_f32+0x62>
 8008e86:	eeb0 0a67 	vmov.f32	s0, s15
 8008e8a:	9203      	str	r2, [sp, #12]
 8008e8c:	9102      	str	r1, [sp, #8]
 8008e8e:	9001      	str	r0, [sp, #4]
 8008e90:	f003 fa62 	bl	800c358 <sqrtf>
 8008e94:	a801      	add	r0, sp, #4
 8008e96:	c807      	ldmia	r0, {r0, r1, r2}
 8008e98:	e751      	b.n	8008d3e <arm_cmplx_mag_f32+0x2a>
 8008e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e9e:	9101      	str	r1, [sp, #4]
 8008ea0:	f003 fa5a 	bl	800c358 <sqrtf>
 8008ea4:	9901      	ldr	r1, [sp, #4]
 8008ea6:	e7c9      	b.n	8008e3c <arm_cmplx_mag_f32+0x128>
 8008ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8008eac:	9203      	str	r2, [sp, #12]
 8008eae:	9102      	str	r1, [sp, #8]
 8008eb0:	9001      	str	r0, [sp, #4]
 8008eb2:	f003 fa51 	bl	800c358 <sqrtf>
 8008eb6:	a801      	add	r0, sp, #4
 8008eb8:	c807      	ldmia	r0, {r0, r1, r2}
 8008eba:	e78b      	b.n	8008dd4 <arm_cmplx_mag_f32+0xc0>
 8008ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8008ec0:	9203      	str	r2, [sp, #12]
 8008ec2:	9102      	str	r1, [sp, #8]
 8008ec4:	9001      	str	r0, [sp, #4]
 8008ec6:	f003 fa47 	bl	800c358 <sqrtf>
 8008eca:	a801      	add	r0, sp, #4
 8008ecc:	c807      	ldmia	r0, {r0, r1, r2}
 8008ece:	e769      	b.n	8008da4 <arm_cmplx_mag_f32+0x90>
 8008ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ed4:	9203      	str	r2, [sp, #12]
 8008ed6:	9102      	str	r1, [sp, #8]
 8008ed8:	9001      	str	r0, [sp, #4]
 8008eda:	f003 fa3d 	bl	800c358 <sqrtf>
 8008ede:	a801      	add	r0, sp, #4
 8008ee0:	c807      	ldmia	r0, {r0, r1, r2}
 8008ee2:	e746      	b.n	8008d72 <arm_cmplx_mag_f32+0x5e>

08008ee4 <arm_radix8_butterfly_f32>:
 8008ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee8:	ed2d 8b10 	vpush	{d8-d15}
 8008eec:	461c      	mov	r4, r3
 8008eee:	b09d      	sub	sp, #116	; 0x74
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	ed9f bac4 	vldr	s22, [pc, #784]	; 8009208 <arm_radix8_butterfly_f32+0x324>
 8008ef8:	9019      	str	r0, [sp, #100]	; 0x64
 8008efa:	921a      	str	r2, [sp, #104]	; 0x68
 8008efc:	468b      	mov	fp, r1
 8008efe:	931b      	str	r3, [sp, #108]	; 0x6c
 8008f00:	468a      	mov	sl, r1
 8008f02:	46a1      	mov	r9, r4
 8008f04:	4607      	mov	r7, r0
 8008f06:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008f0a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8008f0e:	eb03 0508 	add.w	r5, r3, r8
 8008f12:	195c      	adds	r4, r3, r5
 8008f14:	00de      	lsls	r6, r3, #3
 8008f16:	191a      	adds	r2, r3, r4
 8008f18:	9600      	str	r6, [sp, #0]
 8008f1a:	1898      	adds	r0, r3, r2
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	9e00      	ldr	r6, [sp, #0]
 8008f20:	9311      	str	r3, [sp, #68]	; 0x44
 8008f22:	4401      	add	r1, r0
 8008f24:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8008f28:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8008f2c:	19be      	adds	r6, r7, r6
 8008f2e:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8008f32:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8008f36:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8008f3a:	9f00      	ldr	r7, [sp, #0]
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	eb06 0e07 	add.w	lr, r6, r7
 8008f42:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8008f44:	9302      	str	r3, [sp, #8]
 8008f46:	3204      	adds	r2, #4
 8008f48:	3104      	adds	r1, #4
 8008f4a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008f4e:	f04f 0c00 	mov.w	ip, #0
 8008f52:	edde 7a00 	vldr	s15, [lr]
 8008f56:	edd6 6a00 	vldr	s13, [r6]
 8008f5a:	ed95 2a00 	vldr	s4, [r5]
 8008f5e:	ed17 aa01 	vldr	s20, [r7, #-4]
 8008f62:	edd4 4a00 	vldr	s9, [r4]
 8008f66:	ed90 5a00 	vldr	s10, [r0]
 8008f6a:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008f6e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8008f72:	ee77 8a85 	vadd.f32	s17, s15, s10
 8008f76:	ee76 3a87 	vadd.f32	s7, s13, s14
 8008f7a:	ee32 4a20 	vadd.f32	s8, s4, s1
 8008f7e:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8008f82:	ee33 6a84 	vadd.f32	s12, s7, s8
 8008f86:	ee73 5a28 	vadd.f32	s11, s6, s17
 8008f8a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008f8e:	ee75 6a86 	vadd.f32	s13, s11, s12
 8008f92:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8008f96:	ed47 6a01 	vstr	s13, [r7, #-4]
 8008f9a:	edc4 5a00 	vstr	s11, [r4]
 8008f9e:	ed92 9a00 	vldr	s18, [r2]
 8008fa2:	ed95 1a01 	vldr	s2, [r5, #4]
 8008fa6:	edd6 5a01 	vldr	s11, [r6, #4]
 8008faa:	ed91 6a00 	vldr	s12, [r1]
 8008fae:	edd7 2a00 	vldr	s5, [r7]
 8008fb2:	edd4 1a01 	vldr	s3, [r4, #4]
 8008fb6:	edde 6a01 	vldr	s13, [lr, #4]
 8008fba:	edd0 9a01 	vldr	s19, [r0, #4]
 8008fbe:	ee72 0a60 	vsub.f32	s1, s4, s1
 8008fc2:	ee71 aa46 	vsub.f32	s21, s2, s12
 8008fc6:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8008fca:	ee37 0a60 	vsub.f32	s0, s14, s1
 8008fce:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8008fd2:	ee37 7a20 	vadd.f32	s14, s14, s1
 8008fd6:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8008fda:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8008fde:	ee75 5a89 	vadd.f32	s11, s11, s18
 8008fe2:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8008fe6:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8008fea:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008fee:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8008ff2:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8008ff6:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008ffa:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8008ffe:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8009002:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8009006:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800900a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800900e:	ee36 0a88 	vadd.f32	s0, s13, s16
 8009012:	ee75 8a86 	vadd.f32	s17, s11, s12
 8009016:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800901a:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800901e:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8009022:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8009026:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800902a:	ee75 4a27 	vadd.f32	s9, s10, s15
 800902e:	ee71 5a49 	vsub.f32	s11, s2, s18
 8009032:	ee31 2a09 	vadd.f32	s4, s2, s18
 8009036:	ee75 7a67 	vsub.f32	s15, s10, s15
 800903a:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800903e:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8009042:	ee73 0a06 	vadd.f32	s1, s6, s12
 8009046:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800904a:	ee36 5a87 	vadd.f32	s10, s13, s14
 800904e:	ee32 8a28 	vadd.f32	s16, s4, s17
 8009052:	ee33 6a46 	vsub.f32	s12, s6, s12
 8009056:	ee34 4a25 	vadd.f32	s8, s8, s11
 800905a:	ee33 3a80 	vadd.f32	s6, s7, s0
 800905e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009062:	ee71 5a64 	vsub.f32	s11, s2, s9
 8009066:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800906a:	ee32 2a68 	vsub.f32	s4, s4, s17
 800906e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8009072:	ee74 4a81 	vadd.f32	s9, s9, s2
 8009076:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800907a:	44dc      	add	ip, fp
 800907c:	45e2      	cmp	sl, ip
 800907e:	ed87 8a00 	vstr	s16, [r7]
 8009082:	ed84 2a01 	vstr	s4, [r4, #4]
 8009086:	441f      	add	r7, r3
 8009088:	edce 0a00 	vstr	s1, [lr]
 800908c:	441c      	add	r4, r3
 800908e:	ed80 6a00 	vstr	s12, [r0]
 8009092:	edce 1a01 	vstr	s3, [lr, #4]
 8009096:	ed80 4a01 	vstr	s8, [r0, #4]
 800909a:	449e      	add	lr, r3
 800909c:	ed86 3a00 	vstr	s6, [r6]
 80090a0:	4418      	add	r0, r3
 80090a2:	ed41 3a01 	vstr	s7, [r1, #-4]
 80090a6:	ed02 5a01 	vstr	s10, [r2, #-4]
 80090aa:	ed85 7a00 	vstr	s14, [r5]
 80090ae:	edc6 5a01 	vstr	s11, [r6, #4]
 80090b2:	edc1 4a00 	vstr	s9, [r1]
 80090b6:	441e      	add	r6, r3
 80090b8:	edc2 6a00 	vstr	s13, [r2]
 80090bc:	4419      	add	r1, r3
 80090be:	edc5 7a01 	vstr	s15, [r5, #4]
 80090c2:	441a      	add	r2, r3
 80090c4:	441d      	add	r5, r3
 80090c6:	f63f af44 	bhi.w	8008f52 <arm_radix8_butterfly_f32+0x6e>
 80090ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80090cc:	2a07      	cmp	r2, #7
 80090ce:	f240 81f5 	bls.w	80094bc <arm_radix8_butterfly_f32+0x5d8>
 80090d2:	f108 0101 	add.w	r1, r8, #1
 80090d6:	188f      	adds	r7, r1, r2
 80090d8:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 80090dc:	19d6      	adds	r6, r2, r7
 80090de:	eb08 0c09 	add.w	ip, r8, r9
 80090e2:	1994      	adds	r4, r2, r6
 80090e4:	eb0c 0e09 	add.w	lr, ip, r9
 80090e8:	4610      	mov	r0, r2
 80090ea:	9701      	str	r7, [sp, #4]
 80090ec:	4420      	add	r0, r4
 80090ee:	eb0e 0709 	add.w	r7, lr, r9
 80090f2:	1815      	adds	r5, r2, r0
 80090f4:	eb07 0209 	add.w	r2, r7, r9
 80090f8:	9203      	str	r2, [sp, #12]
 80090fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80090fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009100:	9117      	str	r1, [sp, #92]	; 0x5c
 8009102:	440a      	add	r2, r1
 8009104:	9900      	ldr	r1, [sp, #0]
 8009106:	3108      	adds	r1, #8
 8009108:	9100      	str	r1, [sp, #0]
 800910a:	9902      	ldr	r1, [sp, #8]
 800910c:	3108      	adds	r1, #8
 800910e:	9102      	str	r1, [sp, #8]
 8009110:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009112:	00ff      	lsls	r7, r7, #3
 8009114:	9715      	str	r7, [sp, #84]	; 0x54
 8009116:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800911a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800911e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8009122:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8009124:	9903      	ldr	r1, [sp, #12]
 8009126:	19d7      	adds	r7, r2, r7
 8009128:	00c9      	lsls	r1, r1, #3
 800912a:	9114      	str	r1, [sp, #80]	; 0x50
 800912c:	9710      	str	r7, [sp, #64]	; 0x40
 800912e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009130:	9f00      	ldr	r7, [sp, #0]
 8009132:	19cf      	adds	r7, r1, r7
 8009134:	970d      	str	r7, [sp, #52]	; 0x34
 8009136:	9f02      	ldr	r7, [sp, #8]
 8009138:	19cf      	adds	r7, r1, r7
 800913a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800913e:	970c      	str	r7, [sp, #48]	; 0x30
 8009140:	9f01      	ldr	r7, [sp, #4]
 8009142:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8009146:	3504      	adds	r5, #4
 8009148:	3004      	adds	r0, #4
 800914a:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800914e:	9508      	str	r5, [sp, #32]
 8009150:	9009      	str	r0, [sp, #36]	; 0x24
 8009152:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8009154:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009156:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800915a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800915e:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8009162:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009164:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8009168:	1945      	adds	r5, r0, r5
 800916a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800916e:	460f      	mov	r7, r1
 8009170:	3404      	adds	r4, #4
 8009172:	4641      	mov	r1, r8
 8009174:	1841      	adds	r1, r0, r1
 8009176:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800917a:	940a      	str	r4, [sp, #40]	; 0x28
 800917c:	eb00 0c06 	add.w	ip, r0, r6
 8009180:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009184:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009186:	9506      	str	r5, [sp, #24]
 8009188:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800918a:	9105      	str	r1, [sp, #20]
 800918c:	4639      	mov	r1, r7
 800918e:	1905      	adds	r5, r0, r4
 8009190:	3108      	adds	r1, #8
 8009192:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009194:	9507      	str	r5, [sp, #28]
 8009196:	910f      	str	r1, [sp, #60]	; 0x3c
 8009198:	ea4f 1509 	mov.w	r5, r9, lsl #4
 800919c:	2101      	movs	r1, #1
 800919e:	eb00 0e06 	add.w	lr, r0, r6
 80091a2:	9518      	str	r5, [sp, #96]	; 0x60
 80091a4:	9404      	str	r4, [sp, #16]
 80091a6:	9103      	str	r1, [sp, #12]
 80091a8:	4620      	mov	r0, r4
 80091aa:	4689      	mov	r9, r1
 80091ac:	9e06      	ldr	r6, [sp, #24]
 80091ae:	ed90 fa00 	vldr	s30, [r0]
 80091b2:	edd6 7a01 	vldr	s15, [r6, #4]
 80091b6:	edd0 ba01 	vldr	s23, [r0, #4]
 80091ba:	edcd 7a00 	vstr	s15, [sp]
 80091be:	a80d      	add	r0, sp, #52	; 0x34
 80091c0:	edde 7a01 	vldr	s15, [lr, #4]
 80091c4:	9c05      	ldr	r4, [sp, #20]
 80091c6:	9d07      	ldr	r5, [sp, #28]
 80091c8:	edd2 fa00 	vldr	s31, [r2]
 80091cc:	ed92 ca01 	vldr	s24, [r2, #4]
 80091d0:	edcd 7a01 	vstr	s15, [sp, #4]
 80091d4:	c807      	ldmia	r0, {r0, r1, r2}
 80091d6:	eddc 7a01 	vldr	s15, [ip, #4]
 80091da:	edd4 ea00 	vldr	s29, [r4]
 80091de:	ed95 ea00 	vldr	s28, [r5]
 80091e2:	edd6 da00 	vldr	s27, [r6]
 80091e6:	edd4 aa01 	vldr	s21, [r4, #4]
 80091ea:	ed95 aa01 	vldr	s20, [r5, #4]
 80091ee:	ed9e da00 	vldr	s26, [lr]
 80091f2:	eddc ca00 	vldr	s25, [ip]
 80091f6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80091fc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80091fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009200:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009202:	edcd 7a02 	vstr	s15, [sp, #8]
 8009206:	e001      	b.n	800920c <arm_radix8_butterfly_f32+0x328>
 8009208:	3f3504f3 	.word	0x3f3504f3
 800920c:	ed16 6a01 	vldr	s12, [r6, #-4]
 8009210:	ed91 5a00 	vldr	s10, [r1]
 8009214:	ed57 9a01 	vldr	s19, [r7, #-4]
 8009218:	edd5 7a00 	vldr	s15, [r5]
 800921c:	ed18 7a01 	vldr	s14, [r8, #-4]
 8009220:	edd2 3a00 	vldr	s7, [r2]
 8009224:	ed94 3a00 	vldr	s6, [r4]
 8009228:	ed90 2a00 	vldr	s4, [r0]
 800922c:	ed92 0a01 	vldr	s0, [r2, #4]
 8009230:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009234:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009238:	ee33 4a29 	vadd.f32	s8, s6, s19
 800923c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009240:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009244:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009248:	ee32 2a46 	vsub.f32	s4, s4, s12
 800924c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009250:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009254:	ed82 6a00 	vstr	s12, [r2]
 8009258:	edd5 8a01 	vldr	s17, [r5, #4]
 800925c:	ed90 9a01 	vldr	s18, [r0, #4]
 8009260:	edd6 2a00 	vldr	s5, [r6]
 8009264:	ed98 7a00 	vldr	s14, [r8]
 8009268:	edd4 0a01 	vldr	s1, [r4, #4]
 800926c:	ed91 6a01 	vldr	s12, [r1, #4]
 8009270:	edd7 5a00 	vldr	s11, [r7]
 8009274:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009278:	ee33 3a69 	vsub.f32	s6, s6, s19
 800927c:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009280:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8009284:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009288:	ee38 7a87 	vadd.f32	s14, s17, s14
 800928c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009290:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009294:	ee75 8a69 	vsub.f32	s17, s10, s19
 8009298:	ee32 9a27 	vadd.f32	s18, s4, s15
 800929c:	ee35 5a29 	vadd.f32	s10, s10, s19
 80092a0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80092a4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80092a8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80092ac:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80092b0:	ee32 9a08 	vadd.f32	s18, s4, s16
 80092b4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80092b8:	ee32 2a48 	vsub.f32	s4, s4, s16
 80092bc:	ee71 4a64 	vsub.f32	s9, s2, s9
 80092c0:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80092c4:	ee32 1a87 	vadd.f32	s2, s5, s14
 80092c8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80092cc:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80092d0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80092d4:	ee73 0a29 	vadd.f32	s1, s6, s19
 80092d8:	ee36 0a28 	vadd.f32	s0, s12, s17
 80092dc:	ee33 3a69 	vsub.f32	s6, s6, s19
 80092e0:	ee32 7a64 	vsub.f32	s14, s4, s9
 80092e4:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80092e8:	ee36 6a68 	vsub.f32	s12, s12, s17
 80092ec:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80092f0:	ee75 8a85 	vadd.f32	s17, s11, s10
 80092f4:	ee74 3a22 	vadd.f32	s7, s8, s5
 80092f8:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80092fc:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009300:	ee79 1a41 	vsub.f32	s3, s18, s2
 8009304:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8009308:	ee76 5a43 	vsub.f32	s11, s12, s6
 800930c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009310:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009314:	ee30 4a60 	vsub.f32	s8, s0, s1
 8009318:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800931c:	ee30 0a80 	vadd.f32	s0, s1, s0
 8009320:	ee77 9a85 	vadd.f32	s19, s15, s10
 8009324:	ee33 6a06 	vadd.f32	s12, s6, s12
 8009328:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800932c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8009330:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8009334:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8009338:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800933c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8009340:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8009344:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8009348:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800934c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8009350:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8009354:	ee35 3a03 	vadd.f32	s6, s10, s6
 8009358:	ee72 6a66 	vsub.f32	s13, s4, s13
 800935c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8009360:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8009364:	ed9d 4a02 	vldr	s8, [sp, #8]
 8009368:	ed82 1a01 	vstr	s2, [r2, #4]
 800936c:	ee77 3a63 	vsub.f32	s7, s14, s7
 8009370:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009374:	ed9d 7a01 	vldr	s14, [sp, #4]
 8009378:	ed81 3a00 	vstr	s6, [r1]
 800937c:	ee30 9a89 	vadd.f32	s18, s1, s18
 8009380:	ee32 2a05 	vadd.f32	s4, s4, s10
 8009384:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8009388:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800938c:	ee67 2a22 	vmul.f32	s5, s14, s5
 8009390:	ee64 1a00 	vmul.f32	s3, s8, s0
 8009394:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009398:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800939c:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80093a0:	ee64 8a28 	vmul.f32	s17, s8, s17
 80093a4:	ed9d 4a00 	vldr	s8, [sp]
 80093a8:	edc1 6a01 	vstr	s13, [r1, #4]
 80093ac:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80093b0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80093b4:	ee64 9a29 	vmul.f32	s19, s8, s19
 80093b8:	ee24 4a25 	vmul.f32	s8, s8, s11
 80093bc:	ee30 7a87 	vadd.f32	s14, s1, s14
 80093c0:	ee74 4a84 	vadd.f32	s9, s9, s8
 80093c4:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80093c8:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80093cc:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80093d0:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80093d4:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80093d8:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80093dc:	ee75 1a21 	vadd.f32	s3, s10, s3
 80093e0:	ee30 0a68 	vsub.f32	s0, s0, s17
 80093e4:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80093e8:	ee70 0a84 	vadd.f32	s1, s1, s8
 80093ec:	ee36 6a67 	vsub.f32	s12, s12, s15
 80093f0:	44d9      	add	r9, fp
 80093f2:	45ca      	cmp	sl, r9
 80093f4:	ed84 9a00 	vstr	s18, [r4]
 80093f8:	edc4 3a01 	vstr	s7, [r4, #4]
 80093fc:	441a      	add	r2, r3
 80093fe:	ed07 7a01 	vstr	s14, [r7, #-4]
 8009402:	edc7 2a00 	vstr	s5, [r7]
 8009406:	4419      	add	r1, r3
 8009408:	ed80 2a00 	vstr	s4, [r0]
 800940c:	ed80 8a01 	vstr	s16, [r0, #4]
 8009410:	441c      	add	r4, r3
 8009412:	ed48 1a01 	vstr	s3, [r8, #-4]
 8009416:	ed88 0a00 	vstr	s0, [r8]
 800941a:	441f      	add	r7, r3
 800941c:	ed46 4a01 	vstr	s9, [r6, #-4]
 8009420:	4418      	add	r0, r3
 8009422:	edc6 9a00 	vstr	s19, [r6]
 8009426:	4498      	add	r8, r3
 8009428:	edc5 0a00 	vstr	s1, [r5]
 800942c:	ed85 6a01 	vstr	s12, [r5, #4]
 8009430:	441e      	add	r6, r3
 8009432:	441d      	add	r5, r3
 8009434:	f63f aeea 	bhi.w	800920c <arm_radix8_butterfly_f32+0x328>
 8009438:	9a03      	ldr	r2, [sp, #12]
 800943a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800943c:	3201      	adds	r2, #1
 800943e:	4611      	mov	r1, r2
 8009440:	9203      	str	r2, [sp, #12]
 8009442:	9a04      	ldr	r2, [sp, #16]
 8009444:	4402      	add	r2, r0
 8009446:	9204      	str	r2, [sp, #16]
 8009448:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800944a:	9a05      	ldr	r2, [sp, #20]
 800944c:	4402      	add	r2, r0
 800944e:	9205      	str	r2, [sp, #20]
 8009450:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009452:	9a07      	ldr	r2, [sp, #28]
 8009454:	4402      	add	r2, r0
 8009456:	9207      	str	r2, [sp, #28]
 8009458:	9816      	ldr	r0, [sp, #88]	; 0x58
 800945a:	9a06      	ldr	r2, [sp, #24]
 800945c:	4402      	add	r2, r0
 800945e:	9206      	str	r2, [sp, #24]
 8009460:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009462:	4496      	add	lr, r2
 8009464:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009466:	4494      	add	ip, r2
 8009468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800946a:	3208      	adds	r2, #8
 800946c:	920f      	str	r2, [sp, #60]	; 0x3c
 800946e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009470:	3208      	adds	r2, #8
 8009472:	920e      	str	r2, [sp, #56]	; 0x38
 8009474:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009476:	3208      	adds	r2, #8
 8009478:	920d      	str	r2, [sp, #52]	; 0x34
 800947a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800947c:	3208      	adds	r2, #8
 800947e:	920c      	str	r2, [sp, #48]	; 0x30
 8009480:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009482:	3208      	adds	r2, #8
 8009484:	920b      	str	r2, [sp, #44]	; 0x2c
 8009486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009488:	3208      	adds	r2, #8
 800948a:	920a      	str	r2, [sp, #40]	; 0x28
 800948c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800948e:	3208      	adds	r2, #8
 8009490:	9209      	str	r2, [sp, #36]	; 0x24
 8009492:	9a08      	ldr	r2, [sp, #32]
 8009494:	3208      	adds	r2, #8
 8009496:	9208      	str	r2, [sp, #32]
 8009498:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800949a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800949c:	4288      	cmp	r0, r1
 800949e:	4622      	mov	r2, r4
 80094a0:	d007      	beq.n	80094b2 <arm_radix8_butterfly_f32+0x5ce>
 80094a2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80094a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80094a8:	4621      	mov	r1, r4
 80094aa:	4401      	add	r1, r0
 80094ac:	9110      	str	r1, [sp, #64]	; 0x40
 80094ae:	9804      	ldr	r0, [sp, #16]
 80094b0:	e67c      	b.n	80091ac <arm_radix8_butterfly_f32+0x2c8>
 80094b2:	4683      	mov	fp, r0
 80094b4:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80094b8:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80094ba:	e524      	b.n	8008f06 <arm_radix8_butterfly_f32+0x22>
 80094bc:	b01d      	add	sp, #116	; 0x74
 80094be:	ecbd 8b10 	vpop	{d8-d15}
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	bf00      	nop

080094c8 <__libc_init_array>:
 80094c8:	b570      	push	{r4, r5, r6, lr}
 80094ca:	4d0d      	ldr	r5, [pc, #52]	; (8009500 <__libc_init_array+0x38>)
 80094cc:	4c0d      	ldr	r4, [pc, #52]	; (8009504 <__libc_init_array+0x3c>)
 80094ce:	1b64      	subs	r4, r4, r5
 80094d0:	10a4      	asrs	r4, r4, #2
 80094d2:	2600      	movs	r6, #0
 80094d4:	42a6      	cmp	r6, r4
 80094d6:	d109      	bne.n	80094ec <__libc_init_array+0x24>
 80094d8:	4d0b      	ldr	r5, [pc, #44]	; (8009508 <__libc_init_array+0x40>)
 80094da:	4c0c      	ldr	r4, [pc, #48]	; (800950c <__libc_init_array+0x44>)
 80094dc:	f002 ffb4 	bl	800c448 <_init>
 80094e0:	1b64      	subs	r4, r4, r5
 80094e2:	10a4      	asrs	r4, r4, #2
 80094e4:	2600      	movs	r6, #0
 80094e6:	42a6      	cmp	r6, r4
 80094e8:	d105      	bne.n	80094f6 <__libc_init_array+0x2e>
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f0:	4798      	blx	r3
 80094f2:	3601      	adds	r6, #1
 80094f4:	e7ee      	b.n	80094d4 <__libc_init_array+0xc>
 80094f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094fa:	4798      	blx	r3
 80094fc:	3601      	adds	r6, #1
 80094fe:	e7f2      	b.n	80094e6 <__libc_init_array+0x1e>
 8009500:	080248ac 	.word	0x080248ac
 8009504:	080248ac 	.word	0x080248ac
 8009508:	080248ac 	.word	0x080248ac
 800950c:	080248b0 	.word	0x080248b0

08009510 <memset>:
 8009510:	4402      	add	r2, r0
 8009512:	4603      	mov	r3, r0
 8009514:	4293      	cmp	r3, r2
 8009516:	d100      	bne.n	800951a <memset+0xa>
 8009518:	4770      	bx	lr
 800951a:	f803 1b01 	strb.w	r1, [r3], #1
 800951e:	e7f9      	b.n	8009514 <memset+0x4>

08009520 <__cvt>:
 8009520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009524:	ec55 4b10 	vmov	r4, r5, d0
 8009528:	2d00      	cmp	r5, #0
 800952a:	460e      	mov	r6, r1
 800952c:	4619      	mov	r1, r3
 800952e:	462b      	mov	r3, r5
 8009530:	bfbb      	ittet	lt
 8009532:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009536:	461d      	movlt	r5, r3
 8009538:	2300      	movge	r3, #0
 800953a:	232d      	movlt	r3, #45	; 0x2d
 800953c:	700b      	strb	r3, [r1, #0]
 800953e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009540:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009544:	4691      	mov	r9, r2
 8009546:	f023 0820 	bic.w	r8, r3, #32
 800954a:	bfbc      	itt	lt
 800954c:	4622      	movlt	r2, r4
 800954e:	4614      	movlt	r4, r2
 8009550:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009554:	d005      	beq.n	8009562 <__cvt+0x42>
 8009556:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800955a:	d100      	bne.n	800955e <__cvt+0x3e>
 800955c:	3601      	adds	r6, #1
 800955e:	2102      	movs	r1, #2
 8009560:	e000      	b.n	8009564 <__cvt+0x44>
 8009562:	2103      	movs	r1, #3
 8009564:	ab03      	add	r3, sp, #12
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	ab02      	add	r3, sp, #8
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	ec45 4b10 	vmov	d0, r4, r5
 8009570:	4653      	mov	r3, sl
 8009572:	4632      	mov	r2, r6
 8009574:	f000 fd00 	bl	8009f78 <_dtoa_r>
 8009578:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800957c:	4607      	mov	r7, r0
 800957e:	d102      	bne.n	8009586 <__cvt+0x66>
 8009580:	f019 0f01 	tst.w	r9, #1
 8009584:	d022      	beq.n	80095cc <__cvt+0xac>
 8009586:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800958a:	eb07 0906 	add.w	r9, r7, r6
 800958e:	d110      	bne.n	80095b2 <__cvt+0x92>
 8009590:	783b      	ldrb	r3, [r7, #0]
 8009592:	2b30      	cmp	r3, #48	; 0x30
 8009594:	d10a      	bne.n	80095ac <__cvt+0x8c>
 8009596:	2200      	movs	r2, #0
 8009598:	2300      	movs	r3, #0
 800959a:	4620      	mov	r0, r4
 800959c:	4629      	mov	r1, r5
 800959e:	f7f7 fb03 	bl	8000ba8 <__aeabi_dcmpeq>
 80095a2:	b918      	cbnz	r0, 80095ac <__cvt+0x8c>
 80095a4:	f1c6 0601 	rsb	r6, r6, #1
 80095a8:	f8ca 6000 	str.w	r6, [sl]
 80095ac:	f8da 3000 	ldr.w	r3, [sl]
 80095b0:	4499      	add	r9, r3
 80095b2:	2200      	movs	r2, #0
 80095b4:	2300      	movs	r3, #0
 80095b6:	4620      	mov	r0, r4
 80095b8:	4629      	mov	r1, r5
 80095ba:	f7f7 faf5 	bl	8000ba8 <__aeabi_dcmpeq>
 80095be:	b108      	cbz	r0, 80095c4 <__cvt+0xa4>
 80095c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80095c4:	2230      	movs	r2, #48	; 0x30
 80095c6:	9b03      	ldr	r3, [sp, #12]
 80095c8:	454b      	cmp	r3, r9
 80095ca:	d307      	bcc.n	80095dc <__cvt+0xbc>
 80095cc:	9b03      	ldr	r3, [sp, #12]
 80095ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095d0:	1bdb      	subs	r3, r3, r7
 80095d2:	4638      	mov	r0, r7
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	b004      	add	sp, #16
 80095d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095dc:	1c59      	adds	r1, r3, #1
 80095de:	9103      	str	r1, [sp, #12]
 80095e0:	701a      	strb	r2, [r3, #0]
 80095e2:	e7f0      	b.n	80095c6 <__cvt+0xa6>

080095e4 <__exponent>:
 80095e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095e6:	4603      	mov	r3, r0
 80095e8:	2900      	cmp	r1, #0
 80095ea:	bfb8      	it	lt
 80095ec:	4249      	neglt	r1, r1
 80095ee:	f803 2b02 	strb.w	r2, [r3], #2
 80095f2:	bfb4      	ite	lt
 80095f4:	222d      	movlt	r2, #45	; 0x2d
 80095f6:	222b      	movge	r2, #43	; 0x2b
 80095f8:	2909      	cmp	r1, #9
 80095fa:	7042      	strb	r2, [r0, #1]
 80095fc:	dd2a      	ble.n	8009654 <__exponent+0x70>
 80095fe:	f10d 0407 	add.w	r4, sp, #7
 8009602:	46a4      	mov	ip, r4
 8009604:	270a      	movs	r7, #10
 8009606:	46a6      	mov	lr, r4
 8009608:	460a      	mov	r2, r1
 800960a:	fb91 f6f7 	sdiv	r6, r1, r7
 800960e:	fb07 1516 	mls	r5, r7, r6, r1
 8009612:	3530      	adds	r5, #48	; 0x30
 8009614:	2a63      	cmp	r2, #99	; 0x63
 8009616:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800961a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800961e:	4631      	mov	r1, r6
 8009620:	dcf1      	bgt.n	8009606 <__exponent+0x22>
 8009622:	3130      	adds	r1, #48	; 0x30
 8009624:	f1ae 0502 	sub.w	r5, lr, #2
 8009628:	f804 1c01 	strb.w	r1, [r4, #-1]
 800962c:	1c44      	adds	r4, r0, #1
 800962e:	4629      	mov	r1, r5
 8009630:	4561      	cmp	r1, ip
 8009632:	d30a      	bcc.n	800964a <__exponent+0x66>
 8009634:	f10d 0209 	add.w	r2, sp, #9
 8009638:	eba2 020e 	sub.w	r2, r2, lr
 800963c:	4565      	cmp	r5, ip
 800963e:	bf88      	it	hi
 8009640:	2200      	movhi	r2, #0
 8009642:	4413      	add	r3, r2
 8009644:	1a18      	subs	r0, r3, r0
 8009646:	b003      	add	sp, #12
 8009648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800964a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800964e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009652:	e7ed      	b.n	8009630 <__exponent+0x4c>
 8009654:	2330      	movs	r3, #48	; 0x30
 8009656:	3130      	adds	r1, #48	; 0x30
 8009658:	7083      	strb	r3, [r0, #2]
 800965a:	70c1      	strb	r1, [r0, #3]
 800965c:	1d03      	adds	r3, r0, #4
 800965e:	e7f1      	b.n	8009644 <__exponent+0x60>

08009660 <_printf_float>:
 8009660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009664:	ed2d 8b02 	vpush	{d8}
 8009668:	b08d      	sub	sp, #52	; 0x34
 800966a:	460c      	mov	r4, r1
 800966c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009670:	4616      	mov	r6, r2
 8009672:	461f      	mov	r7, r3
 8009674:	4605      	mov	r5, r0
 8009676:	f001 fa6d 	bl	800ab54 <_localeconv_r>
 800967a:	f8d0 a000 	ldr.w	sl, [r0]
 800967e:	4650      	mov	r0, sl
 8009680:	f7f6 fe16 	bl	80002b0 <strlen>
 8009684:	2300      	movs	r3, #0
 8009686:	930a      	str	r3, [sp, #40]	; 0x28
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	9305      	str	r3, [sp, #20]
 800968c:	f8d8 3000 	ldr.w	r3, [r8]
 8009690:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009694:	3307      	adds	r3, #7
 8009696:	f023 0307 	bic.w	r3, r3, #7
 800969a:	f103 0208 	add.w	r2, r3, #8
 800969e:	f8c8 2000 	str.w	r2, [r8]
 80096a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80096aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80096ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80096b2:	9307      	str	r3, [sp, #28]
 80096b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80096b8:	ee08 0a10 	vmov	s16, r0
 80096bc:	4b9f      	ldr	r3, [pc, #636]	; (800993c <_printf_float+0x2dc>)
 80096be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096c6:	f7f7 faa1 	bl	8000c0c <__aeabi_dcmpun>
 80096ca:	bb88      	cbnz	r0, 8009730 <_printf_float+0xd0>
 80096cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096d0:	4b9a      	ldr	r3, [pc, #616]	; (800993c <_printf_float+0x2dc>)
 80096d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096d6:	f7f7 fa7b 	bl	8000bd0 <__aeabi_dcmple>
 80096da:	bb48      	cbnz	r0, 8009730 <_printf_float+0xd0>
 80096dc:	2200      	movs	r2, #0
 80096de:	2300      	movs	r3, #0
 80096e0:	4640      	mov	r0, r8
 80096e2:	4649      	mov	r1, r9
 80096e4:	f7f7 fa6a 	bl	8000bbc <__aeabi_dcmplt>
 80096e8:	b110      	cbz	r0, 80096f0 <_printf_float+0x90>
 80096ea:	232d      	movs	r3, #45	; 0x2d
 80096ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096f0:	4b93      	ldr	r3, [pc, #588]	; (8009940 <_printf_float+0x2e0>)
 80096f2:	4894      	ldr	r0, [pc, #592]	; (8009944 <_printf_float+0x2e4>)
 80096f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80096f8:	bf94      	ite	ls
 80096fa:	4698      	movls	r8, r3
 80096fc:	4680      	movhi	r8, r0
 80096fe:	2303      	movs	r3, #3
 8009700:	6123      	str	r3, [r4, #16]
 8009702:	9b05      	ldr	r3, [sp, #20]
 8009704:	f023 0204 	bic.w	r2, r3, #4
 8009708:	6022      	str	r2, [r4, #0]
 800970a:	f04f 0900 	mov.w	r9, #0
 800970e:	9700      	str	r7, [sp, #0]
 8009710:	4633      	mov	r3, r6
 8009712:	aa0b      	add	r2, sp, #44	; 0x2c
 8009714:	4621      	mov	r1, r4
 8009716:	4628      	mov	r0, r5
 8009718:	f000 f9d8 	bl	8009acc <_printf_common>
 800971c:	3001      	adds	r0, #1
 800971e:	f040 8090 	bne.w	8009842 <_printf_float+0x1e2>
 8009722:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009726:	b00d      	add	sp, #52	; 0x34
 8009728:	ecbd 8b02 	vpop	{d8}
 800972c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009730:	4642      	mov	r2, r8
 8009732:	464b      	mov	r3, r9
 8009734:	4640      	mov	r0, r8
 8009736:	4649      	mov	r1, r9
 8009738:	f7f7 fa68 	bl	8000c0c <__aeabi_dcmpun>
 800973c:	b140      	cbz	r0, 8009750 <_printf_float+0xf0>
 800973e:	464b      	mov	r3, r9
 8009740:	2b00      	cmp	r3, #0
 8009742:	bfbc      	itt	lt
 8009744:	232d      	movlt	r3, #45	; 0x2d
 8009746:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800974a:	487f      	ldr	r0, [pc, #508]	; (8009948 <_printf_float+0x2e8>)
 800974c:	4b7f      	ldr	r3, [pc, #508]	; (800994c <_printf_float+0x2ec>)
 800974e:	e7d1      	b.n	80096f4 <_printf_float+0x94>
 8009750:	6863      	ldr	r3, [r4, #4]
 8009752:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009756:	9206      	str	r2, [sp, #24]
 8009758:	1c5a      	adds	r2, r3, #1
 800975a:	d13f      	bne.n	80097dc <_printf_float+0x17c>
 800975c:	2306      	movs	r3, #6
 800975e:	6063      	str	r3, [r4, #4]
 8009760:	9b05      	ldr	r3, [sp, #20]
 8009762:	6861      	ldr	r1, [r4, #4]
 8009764:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009768:	2300      	movs	r3, #0
 800976a:	9303      	str	r3, [sp, #12]
 800976c:	ab0a      	add	r3, sp, #40	; 0x28
 800976e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009772:	ab09      	add	r3, sp, #36	; 0x24
 8009774:	ec49 8b10 	vmov	d0, r8, r9
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	6022      	str	r2, [r4, #0]
 800977c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009780:	4628      	mov	r0, r5
 8009782:	f7ff fecd 	bl	8009520 <__cvt>
 8009786:	9b06      	ldr	r3, [sp, #24]
 8009788:	9909      	ldr	r1, [sp, #36]	; 0x24
 800978a:	2b47      	cmp	r3, #71	; 0x47
 800978c:	4680      	mov	r8, r0
 800978e:	d108      	bne.n	80097a2 <_printf_float+0x142>
 8009790:	1cc8      	adds	r0, r1, #3
 8009792:	db02      	blt.n	800979a <_printf_float+0x13a>
 8009794:	6863      	ldr	r3, [r4, #4]
 8009796:	4299      	cmp	r1, r3
 8009798:	dd41      	ble.n	800981e <_printf_float+0x1be>
 800979a:	f1ab 0b02 	sub.w	fp, fp, #2
 800979e:	fa5f fb8b 	uxtb.w	fp, fp
 80097a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80097a6:	d820      	bhi.n	80097ea <_printf_float+0x18a>
 80097a8:	3901      	subs	r1, #1
 80097aa:	465a      	mov	r2, fp
 80097ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80097b0:	9109      	str	r1, [sp, #36]	; 0x24
 80097b2:	f7ff ff17 	bl	80095e4 <__exponent>
 80097b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097b8:	1813      	adds	r3, r2, r0
 80097ba:	2a01      	cmp	r2, #1
 80097bc:	4681      	mov	r9, r0
 80097be:	6123      	str	r3, [r4, #16]
 80097c0:	dc02      	bgt.n	80097c8 <_printf_float+0x168>
 80097c2:	6822      	ldr	r2, [r4, #0]
 80097c4:	07d2      	lsls	r2, r2, #31
 80097c6:	d501      	bpl.n	80097cc <_printf_float+0x16c>
 80097c8:	3301      	adds	r3, #1
 80097ca:	6123      	str	r3, [r4, #16]
 80097cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d09c      	beq.n	800970e <_printf_float+0xae>
 80097d4:	232d      	movs	r3, #45	; 0x2d
 80097d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097da:	e798      	b.n	800970e <_printf_float+0xae>
 80097dc:	9a06      	ldr	r2, [sp, #24]
 80097de:	2a47      	cmp	r2, #71	; 0x47
 80097e0:	d1be      	bne.n	8009760 <_printf_float+0x100>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1bc      	bne.n	8009760 <_printf_float+0x100>
 80097e6:	2301      	movs	r3, #1
 80097e8:	e7b9      	b.n	800975e <_printf_float+0xfe>
 80097ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80097ee:	d118      	bne.n	8009822 <_printf_float+0x1c2>
 80097f0:	2900      	cmp	r1, #0
 80097f2:	6863      	ldr	r3, [r4, #4]
 80097f4:	dd0b      	ble.n	800980e <_printf_float+0x1ae>
 80097f6:	6121      	str	r1, [r4, #16]
 80097f8:	b913      	cbnz	r3, 8009800 <_printf_float+0x1a0>
 80097fa:	6822      	ldr	r2, [r4, #0]
 80097fc:	07d0      	lsls	r0, r2, #31
 80097fe:	d502      	bpl.n	8009806 <_printf_float+0x1a6>
 8009800:	3301      	adds	r3, #1
 8009802:	440b      	add	r3, r1
 8009804:	6123      	str	r3, [r4, #16]
 8009806:	65a1      	str	r1, [r4, #88]	; 0x58
 8009808:	f04f 0900 	mov.w	r9, #0
 800980c:	e7de      	b.n	80097cc <_printf_float+0x16c>
 800980e:	b913      	cbnz	r3, 8009816 <_printf_float+0x1b6>
 8009810:	6822      	ldr	r2, [r4, #0]
 8009812:	07d2      	lsls	r2, r2, #31
 8009814:	d501      	bpl.n	800981a <_printf_float+0x1ba>
 8009816:	3302      	adds	r3, #2
 8009818:	e7f4      	b.n	8009804 <_printf_float+0x1a4>
 800981a:	2301      	movs	r3, #1
 800981c:	e7f2      	b.n	8009804 <_printf_float+0x1a4>
 800981e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009824:	4299      	cmp	r1, r3
 8009826:	db05      	blt.n	8009834 <_printf_float+0x1d4>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	6121      	str	r1, [r4, #16]
 800982c:	07d8      	lsls	r0, r3, #31
 800982e:	d5ea      	bpl.n	8009806 <_printf_float+0x1a6>
 8009830:	1c4b      	adds	r3, r1, #1
 8009832:	e7e7      	b.n	8009804 <_printf_float+0x1a4>
 8009834:	2900      	cmp	r1, #0
 8009836:	bfd4      	ite	le
 8009838:	f1c1 0202 	rsble	r2, r1, #2
 800983c:	2201      	movgt	r2, #1
 800983e:	4413      	add	r3, r2
 8009840:	e7e0      	b.n	8009804 <_printf_float+0x1a4>
 8009842:	6823      	ldr	r3, [r4, #0]
 8009844:	055a      	lsls	r2, r3, #21
 8009846:	d407      	bmi.n	8009858 <_printf_float+0x1f8>
 8009848:	6923      	ldr	r3, [r4, #16]
 800984a:	4642      	mov	r2, r8
 800984c:	4631      	mov	r1, r6
 800984e:	4628      	mov	r0, r5
 8009850:	47b8      	blx	r7
 8009852:	3001      	adds	r0, #1
 8009854:	d12c      	bne.n	80098b0 <_printf_float+0x250>
 8009856:	e764      	b.n	8009722 <_printf_float+0xc2>
 8009858:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800985c:	f240 80e0 	bls.w	8009a20 <_printf_float+0x3c0>
 8009860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009864:	2200      	movs	r2, #0
 8009866:	2300      	movs	r3, #0
 8009868:	f7f7 f99e 	bl	8000ba8 <__aeabi_dcmpeq>
 800986c:	2800      	cmp	r0, #0
 800986e:	d034      	beq.n	80098da <_printf_float+0x27a>
 8009870:	4a37      	ldr	r2, [pc, #220]	; (8009950 <_printf_float+0x2f0>)
 8009872:	2301      	movs	r3, #1
 8009874:	4631      	mov	r1, r6
 8009876:	4628      	mov	r0, r5
 8009878:	47b8      	blx	r7
 800987a:	3001      	adds	r0, #1
 800987c:	f43f af51 	beq.w	8009722 <_printf_float+0xc2>
 8009880:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009884:	429a      	cmp	r2, r3
 8009886:	db02      	blt.n	800988e <_printf_float+0x22e>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	07d8      	lsls	r0, r3, #31
 800988c:	d510      	bpl.n	80098b0 <_printf_float+0x250>
 800988e:	ee18 3a10 	vmov	r3, s16
 8009892:	4652      	mov	r2, sl
 8009894:	4631      	mov	r1, r6
 8009896:	4628      	mov	r0, r5
 8009898:	47b8      	blx	r7
 800989a:	3001      	adds	r0, #1
 800989c:	f43f af41 	beq.w	8009722 <_printf_float+0xc2>
 80098a0:	f04f 0800 	mov.w	r8, #0
 80098a4:	f104 091a 	add.w	r9, r4, #26
 80098a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098aa:	3b01      	subs	r3, #1
 80098ac:	4543      	cmp	r3, r8
 80098ae:	dc09      	bgt.n	80098c4 <_printf_float+0x264>
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	079b      	lsls	r3, r3, #30
 80098b4:	f100 8105 	bmi.w	8009ac2 <_printf_float+0x462>
 80098b8:	68e0      	ldr	r0, [r4, #12]
 80098ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098bc:	4298      	cmp	r0, r3
 80098be:	bfb8      	it	lt
 80098c0:	4618      	movlt	r0, r3
 80098c2:	e730      	b.n	8009726 <_printf_float+0xc6>
 80098c4:	2301      	movs	r3, #1
 80098c6:	464a      	mov	r2, r9
 80098c8:	4631      	mov	r1, r6
 80098ca:	4628      	mov	r0, r5
 80098cc:	47b8      	blx	r7
 80098ce:	3001      	adds	r0, #1
 80098d0:	f43f af27 	beq.w	8009722 <_printf_float+0xc2>
 80098d4:	f108 0801 	add.w	r8, r8, #1
 80098d8:	e7e6      	b.n	80098a8 <_printf_float+0x248>
 80098da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098dc:	2b00      	cmp	r3, #0
 80098de:	dc39      	bgt.n	8009954 <_printf_float+0x2f4>
 80098e0:	4a1b      	ldr	r2, [pc, #108]	; (8009950 <_printf_float+0x2f0>)
 80098e2:	2301      	movs	r3, #1
 80098e4:	4631      	mov	r1, r6
 80098e6:	4628      	mov	r0, r5
 80098e8:	47b8      	blx	r7
 80098ea:	3001      	adds	r0, #1
 80098ec:	f43f af19 	beq.w	8009722 <_printf_float+0xc2>
 80098f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098f4:	4313      	orrs	r3, r2
 80098f6:	d102      	bne.n	80098fe <_printf_float+0x29e>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	07d9      	lsls	r1, r3, #31
 80098fc:	d5d8      	bpl.n	80098b0 <_printf_float+0x250>
 80098fe:	ee18 3a10 	vmov	r3, s16
 8009902:	4652      	mov	r2, sl
 8009904:	4631      	mov	r1, r6
 8009906:	4628      	mov	r0, r5
 8009908:	47b8      	blx	r7
 800990a:	3001      	adds	r0, #1
 800990c:	f43f af09 	beq.w	8009722 <_printf_float+0xc2>
 8009910:	f04f 0900 	mov.w	r9, #0
 8009914:	f104 0a1a 	add.w	sl, r4, #26
 8009918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800991a:	425b      	negs	r3, r3
 800991c:	454b      	cmp	r3, r9
 800991e:	dc01      	bgt.n	8009924 <_printf_float+0x2c4>
 8009920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009922:	e792      	b.n	800984a <_printf_float+0x1ea>
 8009924:	2301      	movs	r3, #1
 8009926:	4652      	mov	r2, sl
 8009928:	4631      	mov	r1, r6
 800992a:	4628      	mov	r0, r5
 800992c:	47b8      	blx	r7
 800992e:	3001      	adds	r0, #1
 8009930:	f43f aef7 	beq.w	8009722 <_printf_float+0xc2>
 8009934:	f109 0901 	add.w	r9, r9, #1
 8009938:	e7ee      	b.n	8009918 <_printf_float+0x2b8>
 800993a:	bf00      	nop
 800993c:	7fefffff 	.word	0x7fefffff
 8009940:	080244d0 	.word	0x080244d0
 8009944:	080244d4 	.word	0x080244d4
 8009948:	080244dc 	.word	0x080244dc
 800994c:	080244d8 	.word	0x080244d8
 8009950:	080244e0 	.word	0x080244e0
 8009954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009956:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009958:	429a      	cmp	r2, r3
 800995a:	bfa8      	it	ge
 800995c:	461a      	movge	r2, r3
 800995e:	2a00      	cmp	r2, #0
 8009960:	4691      	mov	r9, r2
 8009962:	dc37      	bgt.n	80099d4 <_printf_float+0x374>
 8009964:	f04f 0b00 	mov.w	fp, #0
 8009968:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800996c:	f104 021a 	add.w	r2, r4, #26
 8009970:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009972:	9305      	str	r3, [sp, #20]
 8009974:	eba3 0309 	sub.w	r3, r3, r9
 8009978:	455b      	cmp	r3, fp
 800997a:	dc33      	bgt.n	80099e4 <_printf_float+0x384>
 800997c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009980:	429a      	cmp	r2, r3
 8009982:	db3b      	blt.n	80099fc <_printf_float+0x39c>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	07da      	lsls	r2, r3, #31
 8009988:	d438      	bmi.n	80099fc <_printf_float+0x39c>
 800998a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800998c:	9a05      	ldr	r2, [sp, #20]
 800998e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009990:	1a9a      	subs	r2, r3, r2
 8009992:	eba3 0901 	sub.w	r9, r3, r1
 8009996:	4591      	cmp	r9, r2
 8009998:	bfa8      	it	ge
 800999a:	4691      	movge	r9, r2
 800999c:	f1b9 0f00 	cmp.w	r9, #0
 80099a0:	dc35      	bgt.n	8009a0e <_printf_float+0x3ae>
 80099a2:	f04f 0800 	mov.w	r8, #0
 80099a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099aa:	f104 0a1a 	add.w	sl, r4, #26
 80099ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099b2:	1a9b      	subs	r3, r3, r2
 80099b4:	eba3 0309 	sub.w	r3, r3, r9
 80099b8:	4543      	cmp	r3, r8
 80099ba:	f77f af79 	ble.w	80098b0 <_printf_float+0x250>
 80099be:	2301      	movs	r3, #1
 80099c0:	4652      	mov	r2, sl
 80099c2:	4631      	mov	r1, r6
 80099c4:	4628      	mov	r0, r5
 80099c6:	47b8      	blx	r7
 80099c8:	3001      	adds	r0, #1
 80099ca:	f43f aeaa 	beq.w	8009722 <_printf_float+0xc2>
 80099ce:	f108 0801 	add.w	r8, r8, #1
 80099d2:	e7ec      	b.n	80099ae <_printf_float+0x34e>
 80099d4:	4613      	mov	r3, r2
 80099d6:	4631      	mov	r1, r6
 80099d8:	4642      	mov	r2, r8
 80099da:	4628      	mov	r0, r5
 80099dc:	47b8      	blx	r7
 80099de:	3001      	adds	r0, #1
 80099e0:	d1c0      	bne.n	8009964 <_printf_float+0x304>
 80099e2:	e69e      	b.n	8009722 <_printf_float+0xc2>
 80099e4:	2301      	movs	r3, #1
 80099e6:	4631      	mov	r1, r6
 80099e8:	4628      	mov	r0, r5
 80099ea:	9205      	str	r2, [sp, #20]
 80099ec:	47b8      	blx	r7
 80099ee:	3001      	adds	r0, #1
 80099f0:	f43f ae97 	beq.w	8009722 <_printf_float+0xc2>
 80099f4:	9a05      	ldr	r2, [sp, #20]
 80099f6:	f10b 0b01 	add.w	fp, fp, #1
 80099fa:	e7b9      	b.n	8009970 <_printf_float+0x310>
 80099fc:	ee18 3a10 	vmov	r3, s16
 8009a00:	4652      	mov	r2, sl
 8009a02:	4631      	mov	r1, r6
 8009a04:	4628      	mov	r0, r5
 8009a06:	47b8      	blx	r7
 8009a08:	3001      	adds	r0, #1
 8009a0a:	d1be      	bne.n	800998a <_printf_float+0x32a>
 8009a0c:	e689      	b.n	8009722 <_printf_float+0xc2>
 8009a0e:	9a05      	ldr	r2, [sp, #20]
 8009a10:	464b      	mov	r3, r9
 8009a12:	4442      	add	r2, r8
 8009a14:	4631      	mov	r1, r6
 8009a16:	4628      	mov	r0, r5
 8009a18:	47b8      	blx	r7
 8009a1a:	3001      	adds	r0, #1
 8009a1c:	d1c1      	bne.n	80099a2 <_printf_float+0x342>
 8009a1e:	e680      	b.n	8009722 <_printf_float+0xc2>
 8009a20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a22:	2a01      	cmp	r2, #1
 8009a24:	dc01      	bgt.n	8009a2a <_printf_float+0x3ca>
 8009a26:	07db      	lsls	r3, r3, #31
 8009a28:	d538      	bpl.n	8009a9c <_printf_float+0x43c>
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	4642      	mov	r2, r8
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4628      	mov	r0, r5
 8009a32:	47b8      	blx	r7
 8009a34:	3001      	adds	r0, #1
 8009a36:	f43f ae74 	beq.w	8009722 <_printf_float+0xc2>
 8009a3a:	ee18 3a10 	vmov	r3, s16
 8009a3e:	4652      	mov	r2, sl
 8009a40:	4631      	mov	r1, r6
 8009a42:	4628      	mov	r0, r5
 8009a44:	47b8      	blx	r7
 8009a46:	3001      	adds	r0, #1
 8009a48:	f43f ae6b 	beq.w	8009722 <_printf_float+0xc2>
 8009a4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a50:	2200      	movs	r2, #0
 8009a52:	2300      	movs	r3, #0
 8009a54:	f7f7 f8a8 	bl	8000ba8 <__aeabi_dcmpeq>
 8009a58:	b9d8      	cbnz	r0, 8009a92 <_printf_float+0x432>
 8009a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a5c:	f108 0201 	add.w	r2, r8, #1
 8009a60:	3b01      	subs	r3, #1
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d10e      	bne.n	8009a8a <_printf_float+0x42a>
 8009a6c:	e659      	b.n	8009722 <_printf_float+0xc2>
 8009a6e:	2301      	movs	r3, #1
 8009a70:	4652      	mov	r2, sl
 8009a72:	4631      	mov	r1, r6
 8009a74:	4628      	mov	r0, r5
 8009a76:	47b8      	blx	r7
 8009a78:	3001      	adds	r0, #1
 8009a7a:	f43f ae52 	beq.w	8009722 <_printf_float+0xc2>
 8009a7e:	f108 0801 	add.w	r8, r8, #1
 8009a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a84:	3b01      	subs	r3, #1
 8009a86:	4543      	cmp	r3, r8
 8009a88:	dcf1      	bgt.n	8009a6e <_printf_float+0x40e>
 8009a8a:	464b      	mov	r3, r9
 8009a8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009a90:	e6dc      	b.n	800984c <_printf_float+0x1ec>
 8009a92:	f04f 0800 	mov.w	r8, #0
 8009a96:	f104 0a1a 	add.w	sl, r4, #26
 8009a9a:	e7f2      	b.n	8009a82 <_printf_float+0x422>
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	4642      	mov	r2, r8
 8009aa0:	e7df      	b.n	8009a62 <_printf_float+0x402>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	464a      	mov	r2, r9
 8009aa6:	4631      	mov	r1, r6
 8009aa8:	4628      	mov	r0, r5
 8009aaa:	47b8      	blx	r7
 8009aac:	3001      	adds	r0, #1
 8009aae:	f43f ae38 	beq.w	8009722 <_printf_float+0xc2>
 8009ab2:	f108 0801 	add.w	r8, r8, #1
 8009ab6:	68e3      	ldr	r3, [r4, #12]
 8009ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009aba:	1a5b      	subs	r3, r3, r1
 8009abc:	4543      	cmp	r3, r8
 8009abe:	dcf0      	bgt.n	8009aa2 <_printf_float+0x442>
 8009ac0:	e6fa      	b.n	80098b8 <_printf_float+0x258>
 8009ac2:	f04f 0800 	mov.w	r8, #0
 8009ac6:	f104 0919 	add.w	r9, r4, #25
 8009aca:	e7f4      	b.n	8009ab6 <_printf_float+0x456>

08009acc <_printf_common>:
 8009acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	4616      	mov	r6, r2
 8009ad2:	4699      	mov	r9, r3
 8009ad4:	688a      	ldr	r2, [r1, #8]
 8009ad6:	690b      	ldr	r3, [r1, #16]
 8009ad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009adc:	4293      	cmp	r3, r2
 8009ade:	bfb8      	it	lt
 8009ae0:	4613      	movlt	r3, r2
 8009ae2:	6033      	str	r3, [r6, #0]
 8009ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ae8:	4607      	mov	r7, r0
 8009aea:	460c      	mov	r4, r1
 8009aec:	b10a      	cbz	r2, 8009af2 <_printf_common+0x26>
 8009aee:	3301      	adds	r3, #1
 8009af0:	6033      	str	r3, [r6, #0]
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	0699      	lsls	r1, r3, #26
 8009af6:	bf42      	ittt	mi
 8009af8:	6833      	ldrmi	r3, [r6, #0]
 8009afa:	3302      	addmi	r3, #2
 8009afc:	6033      	strmi	r3, [r6, #0]
 8009afe:	6825      	ldr	r5, [r4, #0]
 8009b00:	f015 0506 	ands.w	r5, r5, #6
 8009b04:	d106      	bne.n	8009b14 <_printf_common+0x48>
 8009b06:	f104 0a19 	add.w	sl, r4, #25
 8009b0a:	68e3      	ldr	r3, [r4, #12]
 8009b0c:	6832      	ldr	r2, [r6, #0]
 8009b0e:	1a9b      	subs	r3, r3, r2
 8009b10:	42ab      	cmp	r3, r5
 8009b12:	dc26      	bgt.n	8009b62 <_printf_common+0x96>
 8009b14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b18:	1e13      	subs	r3, r2, #0
 8009b1a:	6822      	ldr	r2, [r4, #0]
 8009b1c:	bf18      	it	ne
 8009b1e:	2301      	movne	r3, #1
 8009b20:	0692      	lsls	r2, r2, #26
 8009b22:	d42b      	bmi.n	8009b7c <_printf_common+0xb0>
 8009b24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b28:	4649      	mov	r1, r9
 8009b2a:	4638      	mov	r0, r7
 8009b2c:	47c0      	blx	r8
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d01e      	beq.n	8009b70 <_printf_common+0xa4>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	68e5      	ldr	r5, [r4, #12]
 8009b36:	6832      	ldr	r2, [r6, #0]
 8009b38:	f003 0306 	and.w	r3, r3, #6
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	bf08      	it	eq
 8009b40:	1aad      	subeq	r5, r5, r2
 8009b42:	68a3      	ldr	r3, [r4, #8]
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	bf0c      	ite	eq
 8009b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b4c:	2500      	movne	r5, #0
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	bfc4      	itt	gt
 8009b52:	1a9b      	subgt	r3, r3, r2
 8009b54:	18ed      	addgt	r5, r5, r3
 8009b56:	2600      	movs	r6, #0
 8009b58:	341a      	adds	r4, #26
 8009b5a:	42b5      	cmp	r5, r6
 8009b5c:	d11a      	bne.n	8009b94 <_printf_common+0xc8>
 8009b5e:	2000      	movs	r0, #0
 8009b60:	e008      	b.n	8009b74 <_printf_common+0xa8>
 8009b62:	2301      	movs	r3, #1
 8009b64:	4652      	mov	r2, sl
 8009b66:	4649      	mov	r1, r9
 8009b68:	4638      	mov	r0, r7
 8009b6a:	47c0      	blx	r8
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	d103      	bne.n	8009b78 <_printf_common+0xac>
 8009b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b78:	3501      	adds	r5, #1
 8009b7a:	e7c6      	b.n	8009b0a <_printf_common+0x3e>
 8009b7c:	18e1      	adds	r1, r4, r3
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	2030      	movs	r0, #48	; 0x30
 8009b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b86:	4422      	add	r2, r4
 8009b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b90:	3302      	adds	r3, #2
 8009b92:	e7c7      	b.n	8009b24 <_printf_common+0x58>
 8009b94:	2301      	movs	r3, #1
 8009b96:	4622      	mov	r2, r4
 8009b98:	4649      	mov	r1, r9
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	47c0      	blx	r8
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d0e6      	beq.n	8009b70 <_printf_common+0xa4>
 8009ba2:	3601      	adds	r6, #1
 8009ba4:	e7d9      	b.n	8009b5a <_printf_common+0x8e>
	...

08009ba8 <_printf_i>:
 8009ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009bac:	7e0f      	ldrb	r7, [r1, #24]
 8009bae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bb0:	2f78      	cmp	r7, #120	; 0x78
 8009bb2:	4691      	mov	r9, r2
 8009bb4:	4680      	mov	r8, r0
 8009bb6:	460c      	mov	r4, r1
 8009bb8:	469a      	mov	sl, r3
 8009bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bbe:	d807      	bhi.n	8009bd0 <_printf_i+0x28>
 8009bc0:	2f62      	cmp	r7, #98	; 0x62
 8009bc2:	d80a      	bhi.n	8009bda <_printf_i+0x32>
 8009bc4:	2f00      	cmp	r7, #0
 8009bc6:	f000 80d8 	beq.w	8009d7a <_printf_i+0x1d2>
 8009bca:	2f58      	cmp	r7, #88	; 0x58
 8009bcc:	f000 80a3 	beq.w	8009d16 <_printf_i+0x16e>
 8009bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bd8:	e03a      	b.n	8009c50 <_printf_i+0xa8>
 8009bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bde:	2b15      	cmp	r3, #21
 8009be0:	d8f6      	bhi.n	8009bd0 <_printf_i+0x28>
 8009be2:	a101      	add	r1, pc, #4	; (adr r1, 8009be8 <_printf_i+0x40>)
 8009be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009be8:	08009c41 	.word	0x08009c41
 8009bec:	08009c55 	.word	0x08009c55
 8009bf0:	08009bd1 	.word	0x08009bd1
 8009bf4:	08009bd1 	.word	0x08009bd1
 8009bf8:	08009bd1 	.word	0x08009bd1
 8009bfc:	08009bd1 	.word	0x08009bd1
 8009c00:	08009c55 	.word	0x08009c55
 8009c04:	08009bd1 	.word	0x08009bd1
 8009c08:	08009bd1 	.word	0x08009bd1
 8009c0c:	08009bd1 	.word	0x08009bd1
 8009c10:	08009bd1 	.word	0x08009bd1
 8009c14:	08009d61 	.word	0x08009d61
 8009c18:	08009c85 	.word	0x08009c85
 8009c1c:	08009d43 	.word	0x08009d43
 8009c20:	08009bd1 	.word	0x08009bd1
 8009c24:	08009bd1 	.word	0x08009bd1
 8009c28:	08009d83 	.word	0x08009d83
 8009c2c:	08009bd1 	.word	0x08009bd1
 8009c30:	08009c85 	.word	0x08009c85
 8009c34:	08009bd1 	.word	0x08009bd1
 8009c38:	08009bd1 	.word	0x08009bd1
 8009c3c:	08009d4b 	.word	0x08009d4b
 8009c40:	682b      	ldr	r3, [r5, #0]
 8009c42:	1d1a      	adds	r2, r3, #4
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	602a      	str	r2, [r5, #0]
 8009c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c50:	2301      	movs	r3, #1
 8009c52:	e0a3      	b.n	8009d9c <_printf_i+0x1f4>
 8009c54:	6820      	ldr	r0, [r4, #0]
 8009c56:	6829      	ldr	r1, [r5, #0]
 8009c58:	0606      	lsls	r6, r0, #24
 8009c5a:	f101 0304 	add.w	r3, r1, #4
 8009c5e:	d50a      	bpl.n	8009c76 <_printf_i+0xce>
 8009c60:	680e      	ldr	r6, [r1, #0]
 8009c62:	602b      	str	r3, [r5, #0]
 8009c64:	2e00      	cmp	r6, #0
 8009c66:	da03      	bge.n	8009c70 <_printf_i+0xc8>
 8009c68:	232d      	movs	r3, #45	; 0x2d
 8009c6a:	4276      	negs	r6, r6
 8009c6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c70:	485e      	ldr	r0, [pc, #376]	; (8009dec <_printf_i+0x244>)
 8009c72:	230a      	movs	r3, #10
 8009c74:	e019      	b.n	8009caa <_printf_i+0x102>
 8009c76:	680e      	ldr	r6, [r1, #0]
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c7e:	bf18      	it	ne
 8009c80:	b236      	sxthne	r6, r6
 8009c82:	e7ef      	b.n	8009c64 <_printf_i+0xbc>
 8009c84:	682b      	ldr	r3, [r5, #0]
 8009c86:	6820      	ldr	r0, [r4, #0]
 8009c88:	1d19      	adds	r1, r3, #4
 8009c8a:	6029      	str	r1, [r5, #0]
 8009c8c:	0601      	lsls	r1, r0, #24
 8009c8e:	d501      	bpl.n	8009c94 <_printf_i+0xec>
 8009c90:	681e      	ldr	r6, [r3, #0]
 8009c92:	e002      	b.n	8009c9a <_printf_i+0xf2>
 8009c94:	0646      	lsls	r6, r0, #25
 8009c96:	d5fb      	bpl.n	8009c90 <_printf_i+0xe8>
 8009c98:	881e      	ldrh	r6, [r3, #0]
 8009c9a:	4854      	ldr	r0, [pc, #336]	; (8009dec <_printf_i+0x244>)
 8009c9c:	2f6f      	cmp	r7, #111	; 0x6f
 8009c9e:	bf0c      	ite	eq
 8009ca0:	2308      	moveq	r3, #8
 8009ca2:	230a      	movne	r3, #10
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009caa:	6865      	ldr	r5, [r4, #4]
 8009cac:	60a5      	str	r5, [r4, #8]
 8009cae:	2d00      	cmp	r5, #0
 8009cb0:	bfa2      	ittt	ge
 8009cb2:	6821      	ldrge	r1, [r4, #0]
 8009cb4:	f021 0104 	bicge.w	r1, r1, #4
 8009cb8:	6021      	strge	r1, [r4, #0]
 8009cba:	b90e      	cbnz	r6, 8009cc0 <_printf_i+0x118>
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	d04d      	beq.n	8009d5c <_printf_i+0x1b4>
 8009cc0:	4615      	mov	r5, r2
 8009cc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cc6:	fb03 6711 	mls	r7, r3, r1, r6
 8009cca:	5dc7      	ldrb	r7, [r0, r7]
 8009ccc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cd0:	4637      	mov	r7, r6
 8009cd2:	42bb      	cmp	r3, r7
 8009cd4:	460e      	mov	r6, r1
 8009cd6:	d9f4      	bls.n	8009cc2 <_printf_i+0x11a>
 8009cd8:	2b08      	cmp	r3, #8
 8009cda:	d10b      	bne.n	8009cf4 <_printf_i+0x14c>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	07de      	lsls	r6, r3, #31
 8009ce0:	d508      	bpl.n	8009cf4 <_printf_i+0x14c>
 8009ce2:	6923      	ldr	r3, [r4, #16]
 8009ce4:	6861      	ldr	r1, [r4, #4]
 8009ce6:	4299      	cmp	r1, r3
 8009ce8:	bfde      	ittt	le
 8009cea:	2330      	movle	r3, #48	; 0x30
 8009cec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cf0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009cf4:	1b52      	subs	r2, r2, r5
 8009cf6:	6122      	str	r2, [r4, #16]
 8009cf8:	f8cd a000 	str.w	sl, [sp]
 8009cfc:	464b      	mov	r3, r9
 8009cfe:	aa03      	add	r2, sp, #12
 8009d00:	4621      	mov	r1, r4
 8009d02:	4640      	mov	r0, r8
 8009d04:	f7ff fee2 	bl	8009acc <_printf_common>
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d14c      	bne.n	8009da6 <_printf_i+0x1fe>
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d10:	b004      	add	sp, #16
 8009d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d16:	4835      	ldr	r0, [pc, #212]	; (8009dec <_printf_i+0x244>)
 8009d18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d1c:	6829      	ldr	r1, [r5, #0]
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d24:	6029      	str	r1, [r5, #0]
 8009d26:	061d      	lsls	r5, r3, #24
 8009d28:	d514      	bpl.n	8009d54 <_printf_i+0x1ac>
 8009d2a:	07df      	lsls	r7, r3, #31
 8009d2c:	bf44      	itt	mi
 8009d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8009d32:	6023      	strmi	r3, [r4, #0]
 8009d34:	b91e      	cbnz	r6, 8009d3e <_printf_i+0x196>
 8009d36:	6823      	ldr	r3, [r4, #0]
 8009d38:	f023 0320 	bic.w	r3, r3, #32
 8009d3c:	6023      	str	r3, [r4, #0]
 8009d3e:	2310      	movs	r3, #16
 8009d40:	e7b0      	b.n	8009ca4 <_printf_i+0xfc>
 8009d42:	6823      	ldr	r3, [r4, #0]
 8009d44:	f043 0320 	orr.w	r3, r3, #32
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	2378      	movs	r3, #120	; 0x78
 8009d4c:	4828      	ldr	r0, [pc, #160]	; (8009df0 <_printf_i+0x248>)
 8009d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d52:	e7e3      	b.n	8009d1c <_printf_i+0x174>
 8009d54:	0659      	lsls	r1, r3, #25
 8009d56:	bf48      	it	mi
 8009d58:	b2b6      	uxthmi	r6, r6
 8009d5a:	e7e6      	b.n	8009d2a <_printf_i+0x182>
 8009d5c:	4615      	mov	r5, r2
 8009d5e:	e7bb      	b.n	8009cd8 <_printf_i+0x130>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	6826      	ldr	r6, [r4, #0]
 8009d64:	6961      	ldr	r1, [r4, #20]
 8009d66:	1d18      	adds	r0, r3, #4
 8009d68:	6028      	str	r0, [r5, #0]
 8009d6a:	0635      	lsls	r5, r6, #24
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	d501      	bpl.n	8009d74 <_printf_i+0x1cc>
 8009d70:	6019      	str	r1, [r3, #0]
 8009d72:	e002      	b.n	8009d7a <_printf_i+0x1d2>
 8009d74:	0670      	lsls	r0, r6, #25
 8009d76:	d5fb      	bpl.n	8009d70 <_printf_i+0x1c8>
 8009d78:	8019      	strh	r1, [r3, #0]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	6123      	str	r3, [r4, #16]
 8009d7e:	4615      	mov	r5, r2
 8009d80:	e7ba      	b.n	8009cf8 <_printf_i+0x150>
 8009d82:	682b      	ldr	r3, [r5, #0]
 8009d84:	1d1a      	adds	r2, r3, #4
 8009d86:	602a      	str	r2, [r5, #0]
 8009d88:	681d      	ldr	r5, [r3, #0]
 8009d8a:	6862      	ldr	r2, [r4, #4]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4628      	mov	r0, r5
 8009d90:	f7f6 fa96 	bl	80002c0 <memchr>
 8009d94:	b108      	cbz	r0, 8009d9a <_printf_i+0x1f2>
 8009d96:	1b40      	subs	r0, r0, r5
 8009d98:	6060      	str	r0, [r4, #4]
 8009d9a:	6863      	ldr	r3, [r4, #4]
 8009d9c:	6123      	str	r3, [r4, #16]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da4:	e7a8      	b.n	8009cf8 <_printf_i+0x150>
 8009da6:	6923      	ldr	r3, [r4, #16]
 8009da8:	462a      	mov	r2, r5
 8009daa:	4649      	mov	r1, r9
 8009dac:	4640      	mov	r0, r8
 8009dae:	47d0      	blx	sl
 8009db0:	3001      	adds	r0, #1
 8009db2:	d0ab      	beq.n	8009d0c <_printf_i+0x164>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	079b      	lsls	r3, r3, #30
 8009db8:	d413      	bmi.n	8009de2 <_printf_i+0x23a>
 8009dba:	68e0      	ldr	r0, [r4, #12]
 8009dbc:	9b03      	ldr	r3, [sp, #12]
 8009dbe:	4298      	cmp	r0, r3
 8009dc0:	bfb8      	it	lt
 8009dc2:	4618      	movlt	r0, r3
 8009dc4:	e7a4      	b.n	8009d10 <_printf_i+0x168>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	4632      	mov	r2, r6
 8009dca:	4649      	mov	r1, r9
 8009dcc:	4640      	mov	r0, r8
 8009dce:	47d0      	blx	sl
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d09b      	beq.n	8009d0c <_printf_i+0x164>
 8009dd4:	3501      	adds	r5, #1
 8009dd6:	68e3      	ldr	r3, [r4, #12]
 8009dd8:	9903      	ldr	r1, [sp, #12]
 8009dda:	1a5b      	subs	r3, r3, r1
 8009ddc:	42ab      	cmp	r3, r5
 8009dde:	dcf2      	bgt.n	8009dc6 <_printf_i+0x21e>
 8009de0:	e7eb      	b.n	8009dba <_printf_i+0x212>
 8009de2:	2500      	movs	r5, #0
 8009de4:	f104 0619 	add.w	r6, r4, #25
 8009de8:	e7f5      	b.n	8009dd6 <_printf_i+0x22e>
 8009dea:	bf00      	nop
 8009dec:	080244e2 	.word	0x080244e2
 8009df0:	080244f3 	.word	0x080244f3

08009df4 <sniprintf>:
 8009df4:	b40c      	push	{r2, r3}
 8009df6:	b530      	push	{r4, r5, lr}
 8009df8:	4b17      	ldr	r3, [pc, #92]	; (8009e58 <sniprintf+0x64>)
 8009dfa:	1e0c      	subs	r4, r1, #0
 8009dfc:	681d      	ldr	r5, [r3, #0]
 8009dfe:	b09d      	sub	sp, #116	; 0x74
 8009e00:	da08      	bge.n	8009e14 <sniprintf+0x20>
 8009e02:	238b      	movs	r3, #139	; 0x8b
 8009e04:	602b      	str	r3, [r5, #0]
 8009e06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e0a:	b01d      	add	sp, #116	; 0x74
 8009e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e10:	b002      	add	sp, #8
 8009e12:	4770      	bx	lr
 8009e14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009e18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009e1c:	bf14      	ite	ne
 8009e1e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009e22:	4623      	moveq	r3, r4
 8009e24:	9304      	str	r3, [sp, #16]
 8009e26:	9307      	str	r3, [sp, #28]
 8009e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e2c:	9002      	str	r0, [sp, #8]
 8009e2e:	9006      	str	r0, [sp, #24]
 8009e30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e36:	ab21      	add	r3, sp, #132	; 0x84
 8009e38:	a902      	add	r1, sp, #8
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	9301      	str	r3, [sp, #4]
 8009e3e:	f001 fb79 	bl	800b534 <_svfiprintf_r>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	bfbc      	itt	lt
 8009e46:	238b      	movlt	r3, #139	; 0x8b
 8009e48:	602b      	strlt	r3, [r5, #0]
 8009e4a:	2c00      	cmp	r4, #0
 8009e4c:	d0dd      	beq.n	8009e0a <sniprintf+0x16>
 8009e4e:	9b02      	ldr	r3, [sp, #8]
 8009e50:	2200      	movs	r2, #0
 8009e52:	701a      	strb	r2, [r3, #0]
 8009e54:	e7d9      	b.n	8009e0a <sniprintf+0x16>
 8009e56:	bf00      	nop
 8009e58:	200002cc 	.word	0x200002cc

08009e5c <quorem>:
 8009e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e60:	6903      	ldr	r3, [r0, #16]
 8009e62:	690c      	ldr	r4, [r1, #16]
 8009e64:	42a3      	cmp	r3, r4
 8009e66:	4607      	mov	r7, r0
 8009e68:	f2c0 8081 	blt.w	8009f6e <quorem+0x112>
 8009e6c:	3c01      	subs	r4, #1
 8009e6e:	f101 0814 	add.w	r8, r1, #20
 8009e72:	f100 0514 	add.w	r5, r0, #20
 8009e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e7a:	9301      	str	r3, [sp, #4]
 8009e7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e84:	3301      	adds	r3, #1
 8009e86:	429a      	cmp	r2, r3
 8009e88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009e8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e90:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e94:	d331      	bcc.n	8009efa <quorem+0x9e>
 8009e96:	f04f 0e00 	mov.w	lr, #0
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	46ac      	mov	ip, r5
 8009e9e:	46f2      	mov	sl, lr
 8009ea0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ea4:	b293      	uxth	r3, r2
 8009ea6:	fb06 e303 	mla	r3, r6, r3, lr
 8009eaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	ebaa 0303 	sub.w	r3, sl, r3
 8009eb4:	f8dc a000 	ldr.w	sl, [ip]
 8009eb8:	0c12      	lsrs	r2, r2, #16
 8009eba:	fa13 f38a 	uxtah	r3, r3, sl
 8009ebe:	fb06 e202 	mla	r2, r6, r2, lr
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	9b00      	ldr	r3, [sp, #0]
 8009ec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009eca:	b292      	uxth	r2, r2
 8009ecc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009ed0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ed4:	f8bd 3000 	ldrh.w	r3, [sp]
 8009ed8:	4581      	cmp	r9, r0
 8009eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ede:	f84c 3b04 	str.w	r3, [ip], #4
 8009ee2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ee6:	d2db      	bcs.n	8009ea0 <quorem+0x44>
 8009ee8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009eec:	b92b      	cbnz	r3, 8009efa <quorem+0x9e>
 8009eee:	9b01      	ldr	r3, [sp, #4]
 8009ef0:	3b04      	subs	r3, #4
 8009ef2:	429d      	cmp	r5, r3
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	d32e      	bcc.n	8009f56 <quorem+0xfa>
 8009ef8:	613c      	str	r4, [r7, #16]
 8009efa:	4638      	mov	r0, r7
 8009efc:	f001 f8c6 	bl	800b08c <__mcmp>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	db24      	blt.n	8009f4e <quorem+0xf2>
 8009f04:	3601      	adds	r6, #1
 8009f06:	4628      	mov	r0, r5
 8009f08:	f04f 0c00 	mov.w	ip, #0
 8009f0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f10:	f8d0 e000 	ldr.w	lr, [r0]
 8009f14:	b293      	uxth	r3, r2
 8009f16:	ebac 0303 	sub.w	r3, ip, r3
 8009f1a:	0c12      	lsrs	r2, r2, #16
 8009f1c:	fa13 f38e 	uxtah	r3, r3, lr
 8009f20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009f24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f2e:	45c1      	cmp	r9, r8
 8009f30:	f840 3b04 	str.w	r3, [r0], #4
 8009f34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009f38:	d2e8      	bcs.n	8009f0c <quorem+0xb0>
 8009f3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f42:	b922      	cbnz	r2, 8009f4e <quorem+0xf2>
 8009f44:	3b04      	subs	r3, #4
 8009f46:	429d      	cmp	r5, r3
 8009f48:	461a      	mov	r2, r3
 8009f4a:	d30a      	bcc.n	8009f62 <quorem+0x106>
 8009f4c:	613c      	str	r4, [r7, #16]
 8009f4e:	4630      	mov	r0, r6
 8009f50:	b003      	add	sp, #12
 8009f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f56:	6812      	ldr	r2, [r2, #0]
 8009f58:	3b04      	subs	r3, #4
 8009f5a:	2a00      	cmp	r2, #0
 8009f5c:	d1cc      	bne.n	8009ef8 <quorem+0x9c>
 8009f5e:	3c01      	subs	r4, #1
 8009f60:	e7c7      	b.n	8009ef2 <quorem+0x96>
 8009f62:	6812      	ldr	r2, [r2, #0]
 8009f64:	3b04      	subs	r3, #4
 8009f66:	2a00      	cmp	r2, #0
 8009f68:	d1f0      	bne.n	8009f4c <quorem+0xf0>
 8009f6a:	3c01      	subs	r4, #1
 8009f6c:	e7eb      	b.n	8009f46 <quorem+0xea>
 8009f6e:	2000      	movs	r0, #0
 8009f70:	e7ee      	b.n	8009f50 <quorem+0xf4>
 8009f72:	0000      	movs	r0, r0
 8009f74:	0000      	movs	r0, r0
	...

08009f78 <_dtoa_r>:
 8009f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f7c:	ed2d 8b04 	vpush	{d8-d9}
 8009f80:	ec57 6b10 	vmov	r6, r7, d0
 8009f84:	b093      	sub	sp, #76	; 0x4c
 8009f86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f8c:	9106      	str	r1, [sp, #24]
 8009f8e:	ee10 aa10 	vmov	sl, s0
 8009f92:	4604      	mov	r4, r0
 8009f94:	9209      	str	r2, [sp, #36]	; 0x24
 8009f96:	930c      	str	r3, [sp, #48]	; 0x30
 8009f98:	46bb      	mov	fp, r7
 8009f9a:	b975      	cbnz	r5, 8009fba <_dtoa_r+0x42>
 8009f9c:	2010      	movs	r0, #16
 8009f9e:	f000 fddd 	bl	800ab5c <malloc>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	6260      	str	r0, [r4, #36]	; 0x24
 8009fa6:	b920      	cbnz	r0, 8009fb2 <_dtoa_r+0x3a>
 8009fa8:	4ba7      	ldr	r3, [pc, #668]	; (800a248 <_dtoa_r+0x2d0>)
 8009faa:	21ea      	movs	r1, #234	; 0xea
 8009fac:	48a7      	ldr	r0, [pc, #668]	; (800a24c <_dtoa_r+0x2d4>)
 8009fae:	f001 fbd1 	bl	800b754 <__assert_func>
 8009fb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009fb6:	6005      	str	r5, [r0, #0]
 8009fb8:	60c5      	str	r5, [r0, #12]
 8009fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fbc:	6819      	ldr	r1, [r3, #0]
 8009fbe:	b151      	cbz	r1, 8009fd6 <_dtoa_r+0x5e>
 8009fc0:	685a      	ldr	r2, [r3, #4]
 8009fc2:	604a      	str	r2, [r1, #4]
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	4093      	lsls	r3, r2
 8009fc8:	608b      	str	r3, [r1, #8]
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f000 fe1c 	bl	800ac08 <_Bfree>
 8009fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	1e3b      	subs	r3, r7, #0
 8009fd8:	bfaa      	itet	ge
 8009fda:	2300      	movge	r3, #0
 8009fdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009fe0:	f8c8 3000 	strge.w	r3, [r8]
 8009fe4:	4b9a      	ldr	r3, [pc, #616]	; (800a250 <_dtoa_r+0x2d8>)
 8009fe6:	bfbc      	itt	lt
 8009fe8:	2201      	movlt	r2, #1
 8009fea:	f8c8 2000 	strlt.w	r2, [r8]
 8009fee:	ea33 030b 	bics.w	r3, r3, fp
 8009ff2:	d11b      	bne.n	800a02c <_dtoa_r+0xb4>
 8009ff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ff6:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ffa:	6013      	str	r3, [r2, #0]
 8009ffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a000:	4333      	orrs	r3, r6
 800a002:	f000 8592 	beq.w	800ab2a <_dtoa_r+0xbb2>
 800a006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a008:	b963      	cbnz	r3, 800a024 <_dtoa_r+0xac>
 800a00a:	4b92      	ldr	r3, [pc, #584]	; (800a254 <_dtoa_r+0x2dc>)
 800a00c:	e022      	b.n	800a054 <_dtoa_r+0xdc>
 800a00e:	4b92      	ldr	r3, [pc, #584]	; (800a258 <_dtoa_r+0x2e0>)
 800a010:	9301      	str	r3, [sp, #4]
 800a012:	3308      	adds	r3, #8
 800a014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	9801      	ldr	r0, [sp, #4]
 800a01a:	b013      	add	sp, #76	; 0x4c
 800a01c:	ecbd 8b04 	vpop	{d8-d9}
 800a020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a024:	4b8b      	ldr	r3, [pc, #556]	; (800a254 <_dtoa_r+0x2dc>)
 800a026:	9301      	str	r3, [sp, #4]
 800a028:	3303      	adds	r3, #3
 800a02a:	e7f3      	b.n	800a014 <_dtoa_r+0x9c>
 800a02c:	2200      	movs	r2, #0
 800a02e:	2300      	movs	r3, #0
 800a030:	4650      	mov	r0, sl
 800a032:	4659      	mov	r1, fp
 800a034:	f7f6 fdb8 	bl	8000ba8 <__aeabi_dcmpeq>
 800a038:	ec4b ab19 	vmov	d9, sl, fp
 800a03c:	4680      	mov	r8, r0
 800a03e:	b158      	cbz	r0, 800a058 <_dtoa_r+0xe0>
 800a040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a042:	2301      	movs	r3, #1
 800a044:	6013      	str	r3, [r2, #0]
 800a046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 856b 	beq.w	800ab24 <_dtoa_r+0xbac>
 800a04e:	4883      	ldr	r0, [pc, #524]	; (800a25c <_dtoa_r+0x2e4>)
 800a050:	6018      	str	r0, [r3, #0]
 800a052:	1e43      	subs	r3, r0, #1
 800a054:	9301      	str	r3, [sp, #4]
 800a056:	e7df      	b.n	800a018 <_dtoa_r+0xa0>
 800a058:	ec4b ab10 	vmov	d0, sl, fp
 800a05c:	aa10      	add	r2, sp, #64	; 0x40
 800a05e:	a911      	add	r1, sp, #68	; 0x44
 800a060:	4620      	mov	r0, r4
 800a062:	f001 f8b9 	bl	800b1d8 <__d2b>
 800a066:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a06a:	ee08 0a10 	vmov	s16, r0
 800a06e:	2d00      	cmp	r5, #0
 800a070:	f000 8084 	beq.w	800a17c <_dtoa_r+0x204>
 800a074:	ee19 3a90 	vmov	r3, s19
 800a078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a07c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a080:	4656      	mov	r6, sl
 800a082:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a08a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a08e:	4b74      	ldr	r3, [pc, #464]	; (800a260 <_dtoa_r+0x2e8>)
 800a090:	2200      	movs	r2, #0
 800a092:	4630      	mov	r0, r6
 800a094:	4639      	mov	r1, r7
 800a096:	f7f6 f967 	bl	8000368 <__aeabi_dsub>
 800a09a:	a365      	add	r3, pc, #404	; (adr r3, 800a230 <_dtoa_r+0x2b8>)
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f7f6 fb1a 	bl	80006d8 <__aeabi_dmul>
 800a0a4:	a364      	add	r3, pc, #400	; (adr r3, 800a238 <_dtoa_r+0x2c0>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 f95f 	bl	800036c <__adddf3>
 800a0ae:	4606      	mov	r6, r0
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	460f      	mov	r7, r1
 800a0b4:	f7f6 faa6 	bl	8000604 <__aeabi_i2d>
 800a0b8:	a361      	add	r3, pc, #388	; (adr r3, 800a240 <_dtoa_r+0x2c8>)
 800a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0be:	f7f6 fb0b 	bl	80006d8 <__aeabi_dmul>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	f7f6 f94f 	bl	800036c <__adddf3>
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	460f      	mov	r7, r1
 800a0d2:	f7f6 fdb1 	bl	8000c38 <__aeabi_d2iz>
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	9000      	str	r0, [sp, #0]
 800a0da:	2300      	movs	r3, #0
 800a0dc:	4630      	mov	r0, r6
 800a0de:	4639      	mov	r1, r7
 800a0e0:	f7f6 fd6c 	bl	8000bbc <__aeabi_dcmplt>
 800a0e4:	b150      	cbz	r0, 800a0fc <_dtoa_r+0x184>
 800a0e6:	9800      	ldr	r0, [sp, #0]
 800a0e8:	f7f6 fa8c 	bl	8000604 <__aeabi_i2d>
 800a0ec:	4632      	mov	r2, r6
 800a0ee:	463b      	mov	r3, r7
 800a0f0:	f7f6 fd5a 	bl	8000ba8 <__aeabi_dcmpeq>
 800a0f4:	b910      	cbnz	r0, 800a0fc <_dtoa_r+0x184>
 800a0f6:	9b00      	ldr	r3, [sp, #0]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	9b00      	ldr	r3, [sp, #0]
 800a0fe:	2b16      	cmp	r3, #22
 800a100:	d85a      	bhi.n	800a1b8 <_dtoa_r+0x240>
 800a102:	9a00      	ldr	r2, [sp, #0]
 800a104:	4b57      	ldr	r3, [pc, #348]	; (800a264 <_dtoa_r+0x2ec>)
 800a106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a10e:	ec51 0b19 	vmov	r0, r1, d9
 800a112:	f7f6 fd53 	bl	8000bbc <__aeabi_dcmplt>
 800a116:	2800      	cmp	r0, #0
 800a118:	d050      	beq.n	800a1bc <_dtoa_r+0x244>
 800a11a:	9b00      	ldr	r3, [sp, #0]
 800a11c:	3b01      	subs	r3, #1
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	2300      	movs	r3, #0
 800a122:	930b      	str	r3, [sp, #44]	; 0x2c
 800a124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a126:	1b5d      	subs	r5, r3, r5
 800a128:	1e6b      	subs	r3, r5, #1
 800a12a:	9305      	str	r3, [sp, #20]
 800a12c:	bf45      	ittet	mi
 800a12e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a132:	9304      	strmi	r3, [sp, #16]
 800a134:	2300      	movpl	r3, #0
 800a136:	2300      	movmi	r3, #0
 800a138:	bf4c      	ite	mi
 800a13a:	9305      	strmi	r3, [sp, #20]
 800a13c:	9304      	strpl	r3, [sp, #16]
 800a13e:	9b00      	ldr	r3, [sp, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	db3d      	blt.n	800a1c0 <_dtoa_r+0x248>
 800a144:	9b05      	ldr	r3, [sp, #20]
 800a146:	9a00      	ldr	r2, [sp, #0]
 800a148:	920a      	str	r2, [sp, #40]	; 0x28
 800a14a:	4413      	add	r3, r2
 800a14c:	9305      	str	r3, [sp, #20]
 800a14e:	2300      	movs	r3, #0
 800a150:	9307      	str	r3, [sp, #28]
 800a152:	9b06      	ldr	r3, [sp, #24]
 800a154:	2b09      	cmp	r3, #9
 800a156:	f200 8089 	bhi.w	800a26c <_dtoa_r+0x2f4>
 800a15a:	2b05      	cmp	r3, #5
 800a15c:	bfc4      	itt	gt
 800a15e:	3b04      	subgt	r3, #4
 800a160:	9306      	strgt	r3, [sp, #24]
 800a162:	9b06      	ldr	r3, [sp, #24]
 800a164:	f1a3 0302 	sub.w	r3, r3, #2
 800a168:	bfcc      	ite	gt
 800a16a:	2500      	movgt	r5, #0
 800a16c:	2501      	movle	r5, #1
 800a16e:	2b03      	cmp	r3, #3
 800a170:	f200 8087 	bhi.w	800a282 <_dtoa_r+0x30a>
 800a174:	e8df f003 	tbb	[pc, r3]
 800a178:	59383a2d 	.word	0x59383a2d
 800a17c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a180:	441d      	add	r5, r3
 800a182:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a186:	2b20      	cmp	r3, #32
 800a188:	bfc1      	itttt	gt
 800a18a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a18e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a192:	fa0b f303 	lslgt.w	r3, fp, r3
 800a196:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a19a:	bfda      	itte	le
 800a19c:	f1c3 0320 	rsble	r3, r3, #32
 800a1a0:	fa06 f003 	lslle.w	r0, r6, r3
 800a1a4:	4318      	orrgt	r0, r3
 800a1a6:	f7f6 fa1d 	bl	80005e4 <__aeabi_ui2d>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a1b2:	3d01      	subs	r5, #1
 800a1b4:	930e      	str	r3, [sp, #56]	; 0x38
 800a1b6:	e76a      	b.n	800a08e <_dtoa_r+0x116>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e7b2      	b.n	800a122 <_dtoa_r+0x1aa>
 800a1bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a1be:	e7b1      	b.n	800a124 <_dtoa_r+0x1ac>
 800a1c0:	9b04      	ldr	r3, [sp, #16]
 800a1c2:	9a00      	ldr	r2, [sp, #0]
 800a1c4:	1a9b      	subs	r3, r3, r2
 800a1c6:	9304      	str	r3, [sp, #16]
 800a1c8:	4253      	negs	r3, r2
 800a1ca:	9307      	str	r3, [sp, #28]
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a1d0:	e7bf      	b.n	800a152 <_dtoa_r+0x1da>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	9308      	str	r3, [sp, #32]
 800a1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	dc55      	bgt.n	800a288 <_dtoa_r+0x310>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a1e6:	e00c      	b.n	800a202 <_dtoa_r+0x28a>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e7f3      	b.n	800a1d4 <_dtoa_r+0x25c>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1f0:	9308      	str	r3, [sp, #32]
 800a1f2:	9b00      	ldr	r3, [sp, #0]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	9302      	str	r3, [sp, #8]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	9303      	str	r3, [sp, #12]
 800a1fe:	bfb8      	it	lt
 800a200:	2301      	movlt	r3, #1
 800a202:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a204:	2200      	movs	r2, #0
 800a206:	6042      	str	r2, [r0, #4]
 800a208:	2204      	movs	r2, #4
 800a20a:	f102 0614 	add.w	r6, r2, #20
 800a20e:	429e      	cmp	r6, r3
 800a210:	6841      	ldr	r1, [r0, #4]
 800a212:	d93d      	bls.n	800a290 <_dtoa_r+0x318>
 800a214:	4620      	mov	r0, r4
 800a216:	f000 fcb7 	bl	800ab88 <_Balloc>
 800a21a:	9001      	str	r0, [sp, #4]
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d13b      	bne.n	800a298 <_dtoa_r+0x320>
 800a220:	4b11      	ldr	r3, [pc, #68]	; (800a268 <_dtoa_r+0x2f0>)
 800a222:	4602      	mov	r2, r0
 800a224:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a228:	e6c0      	b.n	8009fac <_dtoa_r+0x34>
 800a22a:	2301      	movs	r3, #1
 800a22c:	e7df      	b.n	800a1ee <_dtoa_r+0x276>
 800a22e:	bf00      	nop
 800a230:	636f4361 	.word	0x636f4361
 800a234:	3fd287a7 	.word	0x3fd287a7
 800a238:	8b60c8b3 	.word	0x8b60c8b3
 800a23c:	3fc68a28 	.word	0x3fc68a28
 800a240:	509f79fb 	.word	0x509f79fb
 800a244:	3fd34413 	.word	0x3fd34413
 800a248:	08024511 	.word	0x08024511
 800a24c:	08024528 	.word	0x08024528
 800a250:	7ff00000 	.word	0x7ff00000
 800a254:	0802450d 	.word	0x0802450d
 800a258:	08024504 	.word	0x08024504
 800a25c:	080244e1 	.word	0x080244e1
 800a260:	3ff80000 	.word	0x3ff80000
 800a264:	08024618 	.word	0x08024618
 800a268:	08024583 	.word	0x08024583
 800a26c:	2501      	movs	r5, #1
 800a26e:	2300      	movs	r3, #0
 800a270:	9306      	str	r3, [sp, #24]
 800a272:	9508      	str	r5, [sp, #32]
 800a274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a278:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a27c:	2200      	movs	r2, #0
 800a27e:	2312      	movs	r3, #18
 800a280:	e7b0      	b.n	800a1e4 <_dtoa_r+0x26c>
 800a282:	2301      	movs	r3, #1
 800a284:	9308      	str	r3, [sp, #32]
 800a286:	e7f5      	b.n	800a274 <_dtoa_r+0x2fc>
 800a288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a28a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a28e:	e7b8      	b.n	800a202 <_dtoa_r+0x28a>
 800a290:	3101      	adds	r1, #1
 800a292:	6041      	str	r1, [r0, #4]
 800a294:	0052      	lsls	r2, r2, #1
 800a296:	e7b8      	b.n	800a20a <_dtoa_r+0x292>
 800a298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a29a:	9a01      	ldr	r2, [sp, #4]
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	9b03      	ldr	r3, [sp, #12]
 800a2a0:	2b0e      	cmp	r3, #14
 800a2a2:	f200 809d 	bhi.w	800a3e0 <_dtoa_r+0x468>
 800a2a6:	2d00      	cmp	r5, #0
 800a2a8:	f000 809a 	beq.w	800a3e0 <_dtoa_r+0x468>
 800a2ac:	9b00      	ldr	r3, [sp, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dd32      	ble.n	800a318 <_dtoa_r+0x3a0>
 800a2b2:	4ab7      	ldr	r2, [pc, #732]	; (800a590 <_dtoa_r+0x618>)
 800a2b4:	f003 030f 	and.w	r3, r3, #15
 800a2b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a2c0:	9b00      	ldr	r3, [sp, #0]
 800a2c2:	05d8      	lsls	r0, r3, #23
 800a2c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a2c8:	d516      	bpl.n	800a2f8 <_dtoa_r+0x380>
 800a2ca:	4bb2      	ldr	r3, [pc, #712]	; (800a594 <_dtoa_r+0x61c>)
 800a2cc:	ec51 0b19 	vmov	r0, r1, d9
 800a2d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2d4:	f7f6 fb2a 	bl	800092c <__aeabi_ddiv>
 800a2d8:	f007 070f 	and.w	r7, r7, #15
 800a2dc:	4682      	mov	sl, r0
 800a2de:	468b      	mov	fp, r1
 800a2e0:	2503      	movs	r5, #3
 800a2e2:	4eac      	ldr	r6, [pc, #688]	; (800a594 <_dtoa_r+0x61c>)
 800a2e4:	b957      	cbnz	r7, 800a2fc <_dtoa_r+0x384>
 800a2e6:	4642      	mov	r2, r8
 800a2e8:	464b      	mov	r3, r9
 800a2ea:	4650      	mov	r0, sl
 800a2ec:	4659      	mov	r1, fp
 800a2ee:	f7f6 fb1d 	bl	800092c <__aeabi_ddiv>
 800a2f2:	4682      	mov	sl, r0
 800a2f4:	468b      	mov	fp, r1
 800a2f6:	e028      	b.n	800a34a <_dtoa_r+0x3d2>
 800a2f8:	2502      	movs	r5, #2
 800a2fa:	e7f2      	b.n	800a2e2 <_dtoa_r+0x36a>
 800a2fc:	07f9      	lsls	r1, r7, #31
 800a2fe:	d508      	bpl.n	800a312 <_dtoa_r+0x39a>
 800a300:	4640      	mov	r0, r8
 800a302:	4649      	mov	r1, r9
 800a304:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a308:	f7f6 f9e6 	bl	80006d8 <__aeabi_dmul>
 800a30c:	3501      	adds	r5, #1
 800a30e:	4680      	mov	r8, r0
 800a310:	4689      	mov	r9, r1
 800a312:	107f      	asrs	r7, r7, #1
 800a314:	3608      	adds	r6, #8
 800a316:	e7e5      	b.n	800a2e4 <_dtoa_r+0x36c>
 800a318:	f000 809b 	beq.w	800a452 <_dtoa_r+0x4da>
 800a31c:	9b00      	ldr	r3, [sp, #0]
 800a31e:	4f9d      	ldr	r7, [pc, #628]	; (800a594 <_dtoa_r+0x61c>)
 800a320:	425e      	negs	r6, r3
 800a322:	4b9b      	ldr	r3, [pc, #620]	; (800a590 <_dtoa_r+0x618>)
 800a324:	f006 020f 	and.w	r2, r6, #15
 800a328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	ec51 0b19 	vmov	r0, r1, d9
 800a334:	f7f6 f9d0 	bl	80006d8 <__aeabi_dmul>
 800a338:	1136      	asrs	r6, r6, #4
 800a33a:	4682      	mov	sl, r0
 800a33c:	468b      	mov	fp, r1
 800a33e:	2300      	movs	r3, #0
 800a340:	2502      	movs	r5, #2
 800a342:	2e00      	cmp	r6, #0
 800a344:	d17a      	bne.n	800a43c <_dtoa_r+0x4c4>
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1d3      	bne.n	800a2f2 <_dtoa_r+0x37a>
 800a34a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 8082 	beq.w	800a456 <_dtoa_r+0x4de>
 800a352:	4b91      	ldr	r3, [pc, #580]	; (800a598 <_dtoa_r+0x620>)
 800a354:	2200      	movs	r2, #0
 800a356:	4650      	mov	r0, sl
 800a358:	4659      	mov	r1, fp
 800a35a:	f7f6 fc2f 	bl	8000bbc <__aeabi_dcmplt>
 800a35e:	2800      	cmp	r0, #0
 800a360:	d079      	beq.n	800a456 <_dtoa_r+0x4de>
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d076      	beq.n	800a456 <_dtoa_r+0x4de>
 800a368:	9b02      	ldr	r3, [sp, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	dd36      	ble.n	800a3dc <_dtoa_r+0x464>
 800a36e:	9b00      	ldr	r3, [sp, #0]
 800a370:	4650      	mov	r0, sl
 800a372:	4659      	mov	r1, fp
 800a374:	1e5f      	subs	r7, r3, #1
 800a376:	2200      	movs	r2, #0
 800a378:	4b88      	ldr	r3, [pc, #544]	; (800a59c <_dtoa_r+0x624>)
 800a37a:	f7f6 f9ad 	bl	80006d8 <__aeabi_dmul>
 800a37e:	9e02      	ldr	r6, [sp, #8]
 800a380:	4682      	mov	sl, r0
 800a382:	468b      	mov	fp, r1
 800a384:	3501      	adds	r5, #1
 800a386:	4628      	mov	r0, r5
 800a388:	f7f6 f93c 	bl	8000604 <__aeabi_i2d>
 800a38c:	4652      	mov	r2, sl
 800a38e:	465b      	mov	r3, fp
 800a390:	f7f6 f9a2 	bl	80006d8 <__aeabi_dmul>
 800a394:	4b82      	ldr	r3, [pc, #520]	; (800a5a0 <_dtoa_r+0x628>)
 800a396:	2200      	movs	r2, #0
 800a398:	f7f5 ffe8 	bl	800036c <__adddf3>
 800a39c:	46d0      	mov	r8, sl
 800a39e:	46d9      	mov	r9, fp
 800a3a0:	4682      	mov	sl, r0
 800a3a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a3a6:	2e00      	cmp	r6, #0
 800a3a8:	d158      	bne.n	800a45c <_dtoa_r+0x4e4>
 800a3aa:	4b7e      	ldr	r3, [pc, #504]	; (800a5a4 <_dtoa_r+0x62c>)
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	f7f5 ffd9 	bl	8000368 <__aeabi_dsub>
 800a3b6:	4652      	mov	r2, sl
 800a3b8:	465b      	mov	r3, fp
 800a3ba:	4680      	mov	r8, r0
 800a3bc:	4689      	mov	r9, r1
 800a3be:	f7f6 fc1b 	bl	8000bf8 <__aeabi_dcmpgt>
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	f040 8295 	bne.w	800a8f2 <_dtoa_r+0x97a>
 800a3c8:	4652      	mov	r2, sl
 800a3ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a3ce:	4640      	mov	r0, r8
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	f7f6 fbf3 	bl	8000bbc <__aeabi_dcmplt>
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f040 8289 	bne.w	800a8ee <_dtoa_r+0x976>
 800a3dc:	ec5b ab19 	vmov	sl, fp, d9
 800a3e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f2c0 8148 	blt.w	800a678 <_dtoa_r+0x700>
 800a3e8:	9a00      	ldr	r2, [sp, #0]
 800a3ea:	2a0e      	cmp	r2, #14
 800a3ec:	f300 8144 	bgt.w	800a678 <_dtoa_r+0x700>
 800a3f0:	4b67      	ldr	r3, [pc, #412]	; (800a590 <_dtoa_r+0x618>)
 800a3f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	f280 80d5 	bge.w	800a5ac <_dtoa_r+0x634>
 800a402:	9b03      	ldr	r3, [sp, #12]
 800a404:	2b00      	cmp	r3, #0
 800a406:	f300 80d1 	bgt.w	800a5ac <_dtoa_r+0x634>
 800a40a:	f040 826f 	bne.w	800a8ec <_dtoa_r+0x974>
 800a40e:	4b65      	ldr	r3, [pc, #404]	; (800a5a4 <_dtoa_r+0x62c>)
 800a410:	2200      	movs	r2, #0
 800a412:	4640      	mov	r0, r8
 800a414:	4649      	mov	r1, r9
 800a416:	f7f6 f95f 	bl	80006d8 <__aeabi_dmul>
 800a41a:	4652      	mov	r2, sl
 800a41c:	465b      	mov	r3, fp
 800a41e:	f7f6 fbe1 	bl	8000be4 <__aeabi_dcmpge>
 800a422:	9e03      	ldr	r6, [sp, #12]
 800a424:	4637      	mov	r7, r6
 800a426:	2800      	cmp	r0, #0
 800a428:	f040 8245 	bne.w	800a8b6 <_dtoa_r+0x93e>
 800a42c:	9d01      	ldr	r5, [sp, #4]
 800a42e:	2331      	movs	r3, #49	; 0x31
 800a430:	f805 3b01 	strb.w	r3, [r5], #1
 800a434:	9b00      	ldr	r3, [sp, #0]
 800a436:	3301      	adds	r3, #1
 800a438:	9300      	str	r3, [sp, #0]
 800a43a:	e240      	b.n	800a8be <_dtoa_r+0x946>
 800a43c:	07f2      	lsls	r2, r6, #31
 800a43e:	d505      	bpl.n	800a44c <_dtoa_r+0x4d4>
 800a440:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a444:	f7f6 f948 	bl	80006d8 <__aeabi_dmul>
 800a448:	3501      	adds	r5, #1
 800a44a:	2301      	movs	r3, #1
 800a44c:	1076      	asrs	r6, r6, #1
 800a44e:	3708      	adds	r7, #8
 800a450:	e777      	b.n	800a342 <_dtoa_r+0x3ca>
 800a452:	2502      	movs	r5, #2
 800a454:	e779      	b.n	800a34a <_dtoa_r+0x3d2>
 800a456:	9f00      	ldr	r7, [sp, #0]
 800a458:	9e03      	ldr	r6, [sp, #12]
 800a45a:	e794      	b.n	800a386 <_dtoa_r+0x40e>
 800a45c:	9901      	ldr	r1, [sp, #4]
 800a45e:	4b4c      	ldr	r3, [pc, #304]	; (800a590 <_dtoa_r+0x618>)
 800a460:	4431      	add	r1, r6
 800a462:	910d      	str	r1, [sp, #52]	; 0x34
 800a464:	9908      	ldr	r1, [sp, #32]
 800a466:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a46a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a46e:	2900      	cmp	r1, #0
 800a470:	d043      	beq.n	800a4fa <_dtoa_r+0x582>
 800a472:	494d      	ldr	r1, [pc, #308]	; (800a5a8 <_dtoa_r+0x630>)
 800a474:	2000      	movs	r0, #0
 800a476:	f7f6 fa59 	bl	800092c <__aeabi_ddiv>
 800a47a:	4652      	mov	r2, sl
 800a47c:	465b      	mov	r3, fp
 800a47e:	f7f5 ff73 	bl	8000368 <__aeabi_dsub>
 800a482:	9d01      	ldr	r5, [sp, #4]
 800a484:	4682      	mov	sl, r0
 800a486:	468b      	mov	fp, r1
 800a488:	4649      	mov	r1, r9
 800a48a:	4640      	mov	r0, r8
 800a48c:	f7f6 fbd4 	bl	8000c38 <__aeabi_d2iz>
 800a490:	4606      	mov	r6, r0
 800a492:	f7f6 f8b7 	bl	8000604 <__aeabi_i2d>
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	4640      	mov	r0, r8
 800a49c:	4649      	mov	r1, r9
 800a49e:	f7f5 ff63 	bl	8000368 <__aeabi_dsub>
 800a4a2:	3630      	adds	r6, #48	; 0x30
 800a4a4:	f805 6b01 	strb.w	r6, [r5], #1
 800a4a8:	4652      	mov	r2, sl
 800a4aa:	465b      	mov	r3, fp
 800a4ac:	4680      	mov	r8, r0
 800a4ae:	4689      	mov	r9, r1
 800a4b0:	f7f6 fb84 	bl	8000bbc <__aeabi_dcmplt>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d163      	bne.n	800a580 <_dtoa_r+0x608>
 800a4b8:	4642      	mov	r2, r8
 800a4ba:	464b      	mov	r3, r9
 800a4bc:	4936      	ldr	r1, [pc, #216]	; (800a598 <_dtoa_r+0x620>)
 800a4be:	2000      	movs	r0, #0
 800a4c0:	f7f5 ff52 	bl	8000368 <__aeabi_dsub>
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	465b      	mov	r3, fp
 800a4c8:	f7f6 fb78 	bl	8000bbc <__aeabi_dcmplt>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f040 80b5 	bne.w	800a63c <_dtoa_r+0x6c4>
 800a4d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4d4:	429d      	cmp	r5, r3
 800a4d6:	d081      	beq.n	800a3dc <_dtoa_r+0x464>
 800a4d8:	4b30      	ldr	r3, [pc, #192]	; (800a59c <_dtoa_r+0x624>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	4650      	mov	r0, sl
 800a4de:	4659      	mov	r1, fp
 800a4e0:	f7f6 f8fa 	bl	80006d8 <__aeabi_dmul>
 800a4e4:	4b2d      	ldr	r3, [pc, #180]	; (800a59c <_dtoa_r+0x624>)
 800a4e6:	4682      	mov	sl, r0
 800a4e8:	468b      	mov	fp, r1
 800a4ea:	4640      	mov	r0, r8
 800a4ec:	4649      	mov	r1, r9
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	f7f6 f8f2 	bl	80006d8 <__aeabi_dmul>
 800a4f4:	4680      	mov	r8, r0
 800a4f6:	4689      	mov	r9, r1
 800a4f8:	e7c6      	b.n	800a488 <_dtoa_r+0x510>
 800a4fa:	4650      	mov	r0, sl
 800a4fc:	4659      	mov	r1, fp
 800a4fe:	f7f6 f8eb 	bl	80006d8 <__aeabi_dmul>
 800a502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a504:	9d01      	ldr	r5, [sp, #4]
 800a506:	930f      	str	r3, [sp, #60]	; 0x3c
 800a508:	4682      	mov	sl, r0
 800a50a:	468b      	mov	fp, r1
 800a50c:	4649      	mov	r1, r9
 800a50e:	4640      	mov	r0, r8
 800a510:	f7f6 fb92 	bl	8000c38 <__aeabi_d2iz>
 800a514:	4606      	mov	r6, r0
 800a516:	f7f6 f875 	bl	8000604 <__aeabi_i2d>
 800a51a:	3630      	adds	r6, #48	; 0x30
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	4640      	mov	r0, r8
 800a522:	4649      	mov	r1, r9
 800a524:	f7f5 ff20 	bl	8000368 <__aeabi_dsub>
 800a528:	f805 6b01 	strb.w	r6, [r5], #1
 800a52c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a52e:	429d      	cmp	r5, r3
 800a530:	4680      	mov	r8, r0
 800a532:	4689      	mov	r9, r1
 800a534:	f04f 0200 	mov.w	r2, #0
 800a538:	d124      	bne.n	800a584 <_dtoa_r+0x60c>
 800a53a:	4b1b      	ldr	r3, [pc, #108]	; (800a5a8 <_dtoa_r+0x630>)
 800a53c:	4650      	mov	r0, sl
 800a53e:	4659      	mov	r1, fp
 800a540:	f7f5 ff14 	bl	800036c <__adddf3>
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4640      	mov	r0, r8
 800a54a:	4649      	mov	r1, r9
 800a54c:	f7f6 fb54 	bl	8000bf8 <__aeabi_dcmpgt>
 800a550:	2800      	cmp	r0, #0
 800a552:	d173      	bne.n	800a63c <_dtoa_r+0x6c4>
 800a554:	4652      	mov	r2, sl
 800a556:	465b      	mov	r3, fp
 800a558:	4913      	ldr	r1, [pc, #76]	; (800a5a8 <_dtoa_r+0x630>)
 800a55a:	2000      	movs	r0, #0
 800a55c:	f7f5 ff04 	bl	8000368 <__aeabi_dsub>
 800a560:	4602      	mov	r2, r0
 800a562:	460b      	mov	r3, r1
 800a564:	4640      	mov	r0, r8
 800a566:	4649      	mov	r1, r9
 800a568:	f7f6 fb28 	bl	8000bbc <__aeabi_dcmplt>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	f43f af35 	beq.w	800a3dc <_dtoa_r+0x464>
 800a572:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a574:	1e6b      	subs	r3, r5, #1
 800a576:	930f      	str	r3, [sp, #60]	; 0x3c
 800a578:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a57c:	2b30      	cmp	r3, #48	; 0x30
 800a57e:	d0f8      	beq.n	800a572 <_dtoa_r+0x5fa>
 800a580:	9700      	str	r7, [sp, #0]
 800a582:	e049      	b.n	800a618 <_dtoa_r+0x6a0>
 800a584:	4b05      	ldr	r3, [pc, #20]	; (800a59c <_dtoa_r+0x624>)
 800a586:	f7f6 f8a7 	bl	80006d8 <__aeabi_dmul>
 800a58a:	4680      	mov	r8, r0
 800a58c:	4689      	mov	r9, r1
 800a58e:	e7bd      	b.n	800a50c <_dtoa_r+0x594>
 800a590:	08024618 	.word	0x08024618
 800a594:	080245f0 	.word	0x080245f0
 800a598:	3ff00000 	.word	0x3ff00000
 800a59c:	40240000 	.word	0x40240000
 800a5a0:	401c0000 	.word	0x401c0000
 800a5a4:	40140000 	.word	0x40140000
 800a5a8:	3fe00000 	.word	0x3fe00000
 800a5ac:	9d01      	ldr	r5, [sp, #4]
 800a5ae:	4656      	mov	r6, sl
 800a5b0:	465f      	mov	r7, fp
 800a5b2:	4642      	mov	r2, r8
 800a5b4:	464b      	mov	r3, r9
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	4639      	mov	r1, r7
 800a5ba:	f7f6 f9b7 	bl	800092c <__aeabi_ddiv>
 800a5be:	f7f6 fb3b 	bl	8000c38 <__aeabi_d2iz>
 800a5c2:	4682      	mov	sl, r0
 800a5c4:	f7f6 f81e 	bl	8000604 <__aeabi_i2d>
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	464b      	mov	r3, r9
 800a5cc:	f7f6 f884 	bl	80006d8 <__aeabi_dmul>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a5dc:	f7f5 fec4 	bl	8000368 <__aeabi_dsub>
 800a5e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a5e4:	9e01      	ldr	r6, [sp, #4]
 800a5e6:	9f03      	ldr	r7, [sp, #12]
 800a5e8:	1bae      	subs	r6, r5, r6
 800a5ea:	42b7      	cmp	r7, r6
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	d135      	bne.n	800a65e <_dtoa_r+0x6e6>
 800a5f2:	f7f5 febb 	bl	800036c <__adddf3>
 800a5f6:	4642      	mov	r2, r8
 800a5f8:	464b      	mov	r3, r9
 800a5fa:	4606      	mov	r6, r0
 800a5fc:	460f      	mov	r7, r1
 800a5fe:	f7f6 fafb 	bl	8000bf8 <__aeabi_dcmpgt>
 800a602:	b9d0      	cbnz	r0, 800a63a <_dtoa_r+0x6c2>
 800a604:	4642      	mov	r2, r8
 800a606:	464b      	mov	r3, r9
 800a608:	4630      	mov	r0, r6
 800a60a:	4639      	mov	r1, r7
 800a60c:	f7f6 facc 	bl	8000ba8 <__aeabi_dcmpeq>
 800a610:	b110      	cbz	r0, 800a618 <_dtoa_r+0x6a0>
 800a612:	f01a 0f01 	tst.w	sl, #1
 800a616:	d110      	bne.n	800a63a <_dtoa_r+0x6c2>
 800a618:	4620      	mov	r0, r4
 800a61a:	ee18 1a10 	vmov	r1, s16
 800a61e:	f000 faf3 	bl	800ac08 <_Bfree>
 800a622:	2300      	movs	r3, #0
 800a624:	9800      	ldr	r0, [sp, #0]
 800a626:	702b      	strb	r3, [r5, #0]
 800a628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a62a:	3001      	adds	r0, #1
 800a62c:	6018      	str	r0, [r3, #0]
 800a62e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a630:	2b00      	cmp	r3, #0
 800a632:	f43f acf1 	beq.w	800a018 <_dtoa_r+0xa0>
 800a636:	601d      	str	r5, [r3, #0]
 800a638:	e4ee      	b.n	800a018 <_dtoa_r+0xa0>
 800a63a:	9f00      	ldr	r7, [sp, #0]
 800a63c:	462b      	mov	r3, r5
 800a63e:	461d      	mov	r5, r3
 800a640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a644:	2a39      	cmp	r2, #57	; 0x39
 800a646:	d106      	bne.n	800a656 <_dtoa_r+0x6de>
 800a648:	9a01      	ldr	r2, [sp, #4]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d1f7      	bne.n	800a63e <_dtoa_r+0x6c6>
 800a64e:	9901      	ldr	r1, [sp, #4]
 800a650:	2230      	movs	r2, #48	; 0x30
 800a652:	3701      	adds	r7, #1
 800a654:	700a      	strb	r2, [r1, #0]
 800a656:	781a      	ldrb	r2, [r3, #0]
 800a658:	3201      	adds	r2, #1
 800a65a:	701a      	strb	r2, [r3, #0]
 800a65c:	e790      	b.n	800a580 <_dtoa_r+0x608>
 800a65e:	4ba6      	ldr	r3, [pc, #664]	; (800a8f8 <_dtoa_r+0x980>)
 800a660:	2200      	movs	r2, #0
 800a662:	f7f6 f839 	bl	80006d8 <__aeabi_dmul>
 800a666:	2200      	movs	r2, #0
 800a668:	2300      	movs	r3, #0
 800a66a:	4606      	mov	r6, r0
 800a66c:	460f      	mov	r7, r1
 800a66e:	f7f6 fa9b 	bl	8000ba8 <__aeabi_dcmpeq>
 800a672:	2800      	cmp	r0, #0
 800a674:	d09d      	beq.n	800a5b2 <_dtoa_r+0x63a>
 800a676:	e7cf      	b.n	800a618 <_dtoa_r+0x6a0>
 800a678:	9a08      	ldr	r2, [sp, #32]
 800a67a:	2a00      	cmp	r2, #0
 800a67c:	f000 80d7 	beq.w	800a82e <_dtoa_r+0x8b6>
 800a680:	9a06      	ldr	r2, [sp, #24]
 800a682:	2a01      	cmp	r2, #1
 800a684:	f300 80ba 	bgt.w	800a7fc <_dtoa_r+0x884>
 800a688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a68a:	2a00      	cmp	r2, #0
 800a68c:	f000 80b2 	beq.w	800a7f4 <_dtoa_r+0x87c>
 800a690:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a694:	9e07      	ldr	r6, [sp, #28]
 800a696:	9d04      	ldr	r5, [sp, #16]
 800a698:	9a04      	ldr	r2, [sp, #16]
 800a69a:	441a      	add	r2, r3
 800a69c:	9204      	str	r2, [sp, #16]
 800a69e:	9a05      	ldr	r2, [sp, #20]
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	441a      	add	r2, r3
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	9205      	str	r2, [sp, #20]
 800a6a8:	f000 fb66 	bl	800ad78 <__i2b>
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	2d00      	cmp	r5, #0
 800a6b0:	dd0c      	ble.n	800a6cc <_dtoa_r+0x754>
 800a6b2:	9b05      	ldr	r3, [sp, #20]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	dd09      	ble.n	800a6cc <_dtoa_r+0x754>
 800a6b8:	42ab      	cmp	r3, r5
 800a6ba:	9a04      	ldr	r2, [sp, #16]
 800a6bc:	bfa8      	it	ge
 800a6be:	462b      	movge	r3, r5
 800a6c0:	1ad2      	subs	r2, r2, r3
 800a6c2:	9204      	str	r2, [sp, #16]
 800a6c4:	9a05      	ldr	r2, [sp, #20]
 800a6c6:	1aed      	subs	r5, r5, r3
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	9305      	str	r3, [sp, #20]
 800a6cc:	9b07      	ldr	r3, [sp, #28]
 800a6ce:	b31b      	cbz	r3, 800a718 <_dtoa_r+0x7a0>
 800a6d0:	9b08      	ldr	r3, [sp, #32]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f000 80af 	beq.w	800a836 <_dtoa_r+0x8be>
 800a6d8:	2e00      	cmp	r6, #0
 800a6da:	dd13      	ble.n	800a704 <_dtoa_r+0x78c>
 800a6dc:	4639      	mov	r1, r7
 800a6de:	4632      	mov	r2, r6
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f000 fc09 	bl	800aef8 <__pow5mult>
 800a6e6:	ee18 2a10 	vmov	r2, s16
 800a6ea:	4601      	mov	r1, r0
 800a6ec:	4607      	mov	r7, r0
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 fb58 	bl	800ada4 <__multiply>
 800a6f4:	ee18 1a10 	vmov	r1, s16
 800a6f8:	4680      	mov	r8, r0
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fa84 	bl	800ac08 <_Bfree>
 800a700:	ee08 8a10 	vmov	s16, r8
 800a704:	9b07      	ldr	r3, [sp, #28]
 800a706:	1b9a      	subs	r2, r3, r6
 800a708:	d006      	beq.n	800a718 <_dtoa_r+0x7a0>
 800a70a:	ee18 1a10 	vmov	r1, s16
 800a70e:	4620      	mov	r0, r4
 800a710:	f000 fbf2 	bl	800aef8 <__pow5mult>
 800a714:	ee08 0a10 	vmov	s16, r0
 800a718:	2101      	movs	r1, #1
 800a71a:	4620      	mov	r0, r4
 800a71c:	f000 fb2c 	bl	800ad78 <__i2b>
 800a720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a722:	2b00      	cmp	r3, #0
 800a724:	4606      	mov	r6, r0
 800a726:	f340 8088 	ble.w	800a83a <_dtoa_r+0x8c2>
 800a72a:	461a      	mov	r2, r3
 800a72c:	4601      	mov	r1, r0
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 fbe2 	bl	800aef8 <__pow5mult>
 800a734:	9b06      	ldr	r3, [sp, #24]
 800a736:	2b01      	cmp	r3, #1
 800a738:	4606      	mov	r6, r0
 800a73a:	f340 8081 	ble.w	800a840 <_dtoa_r+0x8c8>
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	6933      	ldr	r3, [r6, #16]
 800a744:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a748:	6918      	ldr	r0, [r3, #16]
 800a74a:	f000 fac5 	bl	800acd8 <__hi0bits>
 800a74e:	f1c0 0020 	rsb	r0, r0, #32
 800a752:	9b05      	ldr	r3, [sp, #20]
 800a754:	4418      	add	r0, r3
 800a756:	f010 001f 	ands.w	r0, r0, #31
 800a75a:	f000 8092 	beq.w	800a882 <_dtoa_r+0x90a>
 800a75e:	f1c0 0320 	rsb	r3, r0, #32
 800a762:	2b04      	cmp	r3, #4
 800a764:	f340 808a 	ble.w	800a87c <_dtoa_r+0x904>
 800a768:	f1c0 001c 	rsb	r0, r0, #28
 800a76c:	9b04      	ldr	r3, [sp, #16]
 800a76e:	4403      	add	r3, r0
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	9b05      	ldr	r3, [sp, #20]
 800a774:	4403      	add	r3, r0
 800a776:	4405      	add	r5, r0
 800a778:	9305      	str	r3, [sp, #20]
 800a77a:	9b04      	ldr	r3, [sp, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dd07      	ble.n	800a790 <_dtoa_r+0x818>
 800a780:	ee18 1a10 	vmov	r1, s16
 800a784:	461a      	mov	r2, r3
 800a786:	4620      	mov	r0, r4
 800a788:	f000 fc10 	bl	800afac <__lshift>
 800a78c:	ee08 0a10 	vmov	s16, r0
 800a790:	9b05      	ldr	r3, [sp, #20]
 800a792:	2b00      	cmp	r3, #0
 800a794:	dd05      	ble.n	800a7a2 <_dtoa_r+0x82a>
 800a796:	4631      	mov	r1, r6
 800a798:	461a      	mov	r2, r3
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 fc06 	bl	800afac <__lshift>
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d06e      	beq.n	800a886 <_dtoa_r+0x90e>
 800a7a8:	ee18 0a10 	vmov	r0, s16
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	f000 fc6d 	bl	800b08c <__mcmp>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	da67      	bge.n	800a886 <_dtoa_r+0x90e>
 800a7b6:	9b00      	ldr	r3, [sp, #0]
 800a7b8:	3b01      	subs	r3, #1
 800a7ba:	ee18 1a10 	vmov	r1, s16
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	220a      	movs	r2, #10
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	f000 fa41 	bl	800ac4c <__multadd>
 800a7ca:	9b08      	ldr	r3, [sp, #32]
 800a7cc:	ee08 0a10 	vmov	s16, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 81b1 	beq.w	800ab38 <_dtoa_r+0xbc0>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	4639      	mov	r1, r7
 800a7da:	220a      	movs	r2, #10
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 fa35 	bl	800ac4c <__multadd>
 800a7e2:	9b02      	ldr	r3, [sp, #8]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	4607      	mov	r7, r0
 800a7e8:	f300 808e 	bgt.w	800a908 <_dtoa_r+0x990>
 800a7ec:	9b06      	ldr	r3, [sp, #24]
 800a7ee:	2b02      	cmp	r3, #2
 800a7f0:	dc51      	bgt.n	800a896 <_dtoa_r+0x91e>
 800a7f2:	e089      	b.n	800a908 <_dtoa_r+0x990>
 800a7f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a7fa:	e74b      	b.n	800a694 <_dtoa_r+0x71c>
 800a7fc:	9b03      	ldr	r3, [sp, #12]
 800a7fe:	1e5e      	subs	r6, r3, #1
 800a800:	9b07      	ldr	r3, [sp, #28]
 800a802:	42b3      	cmp	r3, r6
 800a804:	bfbf      	itttt	lt
 800a806:	9b07      	ldrlt	r3, [sp, #28]
 800a808:	9607      	strlt	r6, [sp, #28]
 800a80a:	1af2      	sublt	r2, r6, r3
 800a80c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a80e:	bfb6      	itet	lt
 800a810:	189b      	addlt	r3, r3, r2
 800a812:	1b9e      	subge	r6, r3, r6
 800a814:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a816:	9b03      	ldr	r3, [sp, #12]
 800a818:	bfb8      	it	lt
 800a81a:	2600      	movlt	r6, #0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	bfb7      	itett	lt
 800a820:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a824:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a828:	1a9d      	sublt	r5, r3, r2
 800a82a:	2300      	movlt	r3, #0
 800a82c:	e734      	b.n	800a698 <_dtoa_r+0x720>
 800a82e:	9e07      	ldr	r6, [sp, #28]
 800a830:	9d04      	ldr	r5, [sp, #16]
 800a832:	9f08      	ldr	r7, [sp, #32]
 800a834:	e73b      	b.n	800a6ae <_dtoa_r+0x736>
 800a836:	9a07      	ldr	r2, [sp, #28]
 800a838:	e767      	b.n	800a70a <_dtoa_r+0x792>
 800a83a:	9b06      	ldr	r3, [sp, #24]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	dc18      	bgt.n	800a872 <_dtoa_r+0x8fa>
 800a840:	f1ba 0f00 	cmp.w	sl, #0
 800a844:	d115      	bne.n	800a872 <_dtoa_r+0x8fa>
 800a846:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a84a:	b993      	cbnz	r3, 800a872 <_dtoa_r+0x8fa>
 800a84c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a850:	0d1b      	lsrs	r3, r3, #20
 800a852:	051b      	lsls	r3, r3, #20
 800a854:	b183      	cbz	r3, 800a878 <_dtoa_r+0x900>
 800a856:	9b04      	ldr	r3, [sp, #16]
 800a858:	3301      	adds	r3, #1
 800a85a:	9304      	str	r3, [sp, #16]
 800a85c:	9b05      	ldr	r3, [sp, #20]
 800a85e:	3301      	adds	r3, #1
 800a860:	9305      	str	r3, [sp, #20]
 800a862:	f04f 0801 	mov.w	r8, #1
 800a866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f47f af6a 	bne.w	800a742 <_dtoa_r+0x7ca>
 800a86e:	2001      	movs	r0, #1
 800a870:	e76f      	b.n	800a752 <_dtoa_r+0x7da>
 800a872:	f04f 0800 	mov.w	r8, #0
 800a876:	e7f6      	b.n	800a866 <_dtoa_r+0x8ee>
 800a878:	4698      	mov	r8, r3
 800a87a:	e7f4      	b.n	800a866 <_dtoa_r+0x8ee>
 800a87c:	f43f af7d 	beq.w	800a77a <_dtoa_r+0x802>
 800a880:	4618      	mov	r0, r3
 800a882:	301c      	adds	r0, #28
 800a884:	e772      	b.n	800a76c <_dtoa_r+0x7f4>
 800a886:	9b03      	ldr	r3, [sp, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	dc37      	bgt.n	800a8fc <_dtoa_r+0x984>
 800a88c:	9b06      	ldr	r3, [sp, #24]
 800a88e:	2b02      	cmp	r3, #2
 800a890:	dd34      	ble.n	800a8fc <_dtoa_r+0x984>
 800a892:	9b03      	ldr	r3, [sp, #12]
 800a894:	9302      	str	r3, [sp, #8]
 800a896:	9b02      	ldr	r3, [sp, #8]
 800a898:	b96b      	cbnz	r3, 800a8b6 <_dtoa_r+0x93e>
 800a89a:	4631      	mov	r1, r6
 800a89c:	2205      	movs	r2, #5
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f000 f9d4 	bl	800ac4c <__multadd>
 800a8a4:	4601      	mov	r1, r0
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	ee18 0a10 	vmov	r0, s16
 800a8ac:	f000 fbee 	bl	800b08c <__mcmp>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	f73f adbb 	bgt.w	800a42c <_dtoa_r+0x4b4>
 800a8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b8:	9d01      	ldr	r5, [sp, #4]
 800a8ba:	43db      	mvns	r3, r3
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	f04f 0800 	mov.w	r8, #0
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 f99f 	bl	800ac08 <_Bfree>
 800a8ca:	2f00      	cmp	r7, #0
 800a8cc:	f43f aea4 	beq.w	800a618 <_dtoa_r+0x6a0>
 800a8d0:	f1b8 0f00 	cmp.w	r8, #0
 800a8d4:	d005      	beq.n	800a8e2 <_dtoa_r+0x96a>
 800a8d6:	45b8      	cmp	r8, r7
 800a8d8:	d003      	beq.n	800a8e2 <_dtoa_r+0x96a>
 800a8da:	4641      	mov	r1, r8
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 f993 	bl	800ac08 <_Bfree>
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	f000 f98f 	bl	800ac08 <_Bfree>
 800a8ea:	e695      	b.n	800a618 <_dtoa_r+0x6a0>
 800a8ec:	2600      	movs	r6, #0
 800a8ee:	4637      	mov	r7, r6
 800a8f0:	e7e1      	b.n	800a8b6 <_dtoa_r+0x93e>
 800a8f2:	9700      	str	r7, [sp, #0]
 800a8f4:	4637      	mov	r7, r6
 800a8f6:	e599      	b.n	800a42c <_dtoa_r+0x4b4>
 800a8f8:	40240000 	.word	0x40240000
 800a8fc:	9b08      	ldr	r3, [sp, #32]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 80ca 	beq.w	800aa98 <_dtoa_r+0xb20>
 800a904:	9b03      	ldr	r3, [sp, #12]
 800a906:	9302      	str	r3, [sp, #8]
 800a908:	2d00      	cmp	r5, #0
 800a90a:	dd05      	ble.n	800a918 <_dtoa_r+0x9a0>
 800a90c:	4639      	mov	r1, r7
 800a90e:	462a      	mov	r2, r5
 800a910:	4620      	mov	r0, r4
 800a912:	f000 fb4b 	bl	800afac <__lshift>
 800a916:	4607      	mov	r7, r0
 800a918:	f1b8 0f00 	cmp.w	r8, #0
 800a91c:	d05b      	beq.n	800a9d6 <_dtoa_r+0xa5e>
 800a91e:	6879      	ldr	r1, [r7, #4]
 800a920:	4620      	mov	r0, r4
 800a922:	f000 f931 	bl	800ab88 <_Balloc>
 800a926:	4605      	mov	r5, r0
 800a928:	b928      	cbnz	r0, 800a936 <_dtoa_r+0x9be>
 800a92a:	4b87      	ldr	r3, [pc, #540]	; (800ab48 <_dtoa_r+0xbd0>)
 800a92c:	4602      	mov	r2, r0
 800a92e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a932:	f7ff bb3b 	b.w	8009fac <_dtoa_r+0x34>
 800a936:	693a      	ldr	r2, [r7, #16]
 800a938:	3202      	adds	r2, #2
 800a93a:	0092      	lsls	r2, r2, #2
 800a93c:	f107 010c 	add.w	r1, r7, #12
 800a940:	300c      	adds	r0, #12
 800a942:	f000 f913 	bl	800ab6c <memcpy>
 800a946:	2201      	movs	r2, #1
 800a948:	4629      	mov	r1, r5
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 fb2e 	bl	800afac <__lshift>
 800a950:	9b01      	ldr	r3, [sp, #4]
 800a952:	f103 0901 	add.w	r9, r3, #1
 800a956:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a95a:	4413      	add	r3, r2
 800a95c:	9305      	str	r3, [sp, #20]
 800a95e:	f00a 0301 	and.w	r3, sl, #1
 800a962:	46b8      	mov	r8, r7
 800a964:	9304      	str	r3, [sp, #16]
 800a966:	4607      	mov	r7, r0
 800a968:	4631      	mov	r1, r6
 800a96a:	ee18 0a10 	vmov	r0, s16
 800a96e:	f7ff fa75 	bl	8009e5c <quorem>
 800a972:	4641      	mov	r1, r8
 800a974:	9002      	str	r0, [sp, #8]
 800a976:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a97a:	ee18 0a10 	vmov	r0, s16
 800a97e:	f000 fb85 	bl	800b08c <__mcmp>
 800a982:	463a      	mov	r2, r7
 800a984:	9003      	str	r0, [sp, #12]
 800a986:	4631      	mov	r1, r6
 800a988:	4620      	mov	r0, r4
 800a98a:	f000 fb9b 	bl	800b0c4 <__mdiff>
 800a98e:	68c2      	ldr	r2, [r0, #12]
 800a990:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800a994:	4605      	mov	r5, r0
 800a996:	bb02      	cbnz	r2, 800a9da <_dtoa_r+0xa62>
 800a998:	4601      	mov	r1, r0
 800a99a:	ee18 0a10 	vmov	r0, s16
 800a99e:	f000 fb75 	bl	800b08c <__mcmp>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	4629      	mov	r1, r5
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	9207      	str	r2, [sp, #28]
 800a9aa:	f000 f92d 	bl	800ac08 <_Bfree>
 800a9ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a9b2:	ea43 0102 	orr.w	r1, r3, r2
 800a9b6:	9b04      	ldr	r3, [sp, #16]
 800a9b8:	430b      	orrs	r3, r1
 800a9ba:	464d      	mov	r5, r9
 800a9bc:	d10f      	bne.n	800a9de <_dtoa_r+0xa66>
 800a9be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a9c2:	d02a      	beq.n	800aa1a <_dtoa_r+0xaa2>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	dd02      	ble.n	800a9d0 <_dtoa_r+0xa58>
 800a9ca:	9b02      	ldr	r3, [sp, #8]
 800a9cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a9d0:	f88b a000 	strb.w	sl, [fp]
 800a9d4:	e775      	b.n	800a8c2 <_dtoa_r+0x94a>
 800a9d6:	4638      	mov	r0, r7
 800a9d8:	e7ba      	b.n	800a950 <_dtoa_r+0x9d8>
 800a9da:	2201      	movs	r2, #1
 800a9dc:	e7e2      	b.n	800a9a4 <_dtoa_r+0xa2c>
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	db04      	blt.n	800a9ee <_dtoa_r+0xa76>
 800a9e4:	9906      	ldr	r1, [sp, #24]
 800a9e6:	430b      	orrs	r3, r1
 800a9e8:	9904      	ldr	r1, [sp, #16]
 800a9ea:	430b      	orrs	r3, r1
 800a9ec:	d122      	bne.n	800aa34 <_dtoa_r+0xabc>
 800a9ee:	2a00      	cmp	r2, #0
 800a9f0:	ddee      	ble.n	800a9d0 <_dtoa_r+0xa58>
 800a9f2:	ee18 1a10 	vmov	r1, s16
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f000 fad7 	bl	800afac <__lshift>
 800a9fe:	4631      	mov	r1, r6
 800aa00:	ee08 0a10 	vmov	s16, r0
 800aa04:	f000 fb42 	bl	800b08c <__mcmp>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	dc03      	bgt.n	800aa14 <_dtoa_r+0xa9c>
 800aa0c:	d1e0      	bne.n	800a9d0 <_dtoa_r+0xa58>
 800aa0e:	f01a 0f01 	tst.w	sl, #1
 800aa12:	d0dd      	beq.n	800a9d0 <_dtoa_r+0xa58>
 800aa14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa18:	d1d7      	bne.n	800a9ca <_dtoa_r+0xa52>
 800aa1a:	2339      	movs	r3, #57	; 0x39
 800aa1c:	f88b 3000 	strb.w	r3, [fp]
 800aa20:	462b      	mov	r3, r5
 800aa22:	461d      	mov	r5, r3
 800aa24:	3b01      	subs	r3, #1
 800aa26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aa2a:	2a39      	cmp	r2, #57	; 0x39
 800aa2c:	d071      	beq.n	800ab12 <_dtoa_r+0xb9a>
 800aa2e:	3201      	adds	r2, #1
 800aa30:	701a      	strb	r2, [r3, #0]
 800aa32:	e746      	b.n	800a8c2 <_dtoa_r+0x94a>
 800aa34:	2a00      	cmp	r2, #0
 800aa36:	dd07      	ble.n	800aa48 <_dtoa_r+0xad0>
 800aa38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800aa3c:	d0ed      	beq.n	800aa1a <_dtoa_r+0xaa2>
 800aa3e:	f10a 0301 	add.w	r3, sl, #1
 800aa42:	f88b 3000 	strb.w	r3, [fp]
 800aa46:	e73c      	b.n	800a8c2 <_dtoa_r+0x94a>
 800aa48:	9b05      	ldr	r3, [sp, #20]
 800aa4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800aa4e:	4599      	cmp	r9, r3
 800aa50:	d047      	beq.n	800aae2 <_dtoa_r+0xb6a>
 800aa52:	ee18 1a10 	vmov	r1, s16
 800aa56:	2300      	movs	r3, #0
 800aa58:	220a      	movs	r2, #10
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 f8f6 	bl	800ac4c <__multadd>
 800aa60:	45b8      	cmp	r8, r7
 800aa62:	ee08 0a10 	vmov	s16, r0
 800aa66:	f04f 0300 	mov.w	r3, #0
 800aa6a:	f04f 020a 	mov.w	r2, #10
 800aa6e:	4641      	mov	r1, r8
 800aa70:	4620      	mov	r0, r4
 800aa72:	d106      	bne.n	800aa82 <_dtoa_r+0xb0a>
 800aa74:	f000 f8ea 	bl	800ac4c <__multadd>
 800aa78:	4680      	mov	r8, r0
 800aa7a:	4607      	mov	r7, r0
 800aa7c:	f109 0901 	add.w	r9, r9, #1
 800aa80:	e772      	b.n	800a968 <_dtoa_r+0x9f0>
 800aa82:	f000 f8e3 	bl	800ac4c <__multadd>
 800aa86:	4639      	mov	r1, r7
 800aa88:	4680      	mov	r8, r0
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	220a      	movs	r2, #10
 800aa8e:	4620      	mov	r0, r4
 800aa90:	f000 f8dc 	bl	800ac4c <__multadd>
 800aa94:	4607      	mov	r7, r0
 800aa96:	e7f1      	b.n	800aa7c <_dtoa_r+0xb04>
 800aa98:	9b03      	ldr	r3, [sp, #12]
 800aa9a:	9302      	str	r3, [sp, #8]
 800aa9c:	9d01      	ldr	r5, [sp, #4]
 800aa9e:	ee18 0a10 	vmov	r0, s16
 800aaa2:	4631      	mov	r1, r6
 800aaa4:	f7ff f9da 	bl	8009e5c <quorem>
 800aaa8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aaac:	9b01      	ldr	r3, [sp, #4]
 800aaae:	f805 ab01 	strb.w	sl, [r5], #1
 800aab2:	1aea      	subs	r2, r5, r3
 800aab4:	9b02      	ldr	r3, [sp, #8]
 800aab6:	4293      	cmp	r3, r2
 800aab8:	dd09      	ble.n	800aace <_dtoa_r+0xb56>
 800aaba:	ee18 1a10 	vmov	r1, s16
 800aabe:	2300      	movs	r3, #0
 800aac0:	220a      	movs	r2, #10
 800aac2:	4620      	mov	r0, r4
 800aac4:	f000 f8c2 	bl	800ac4c <__multadd>
 800aac8:	ee08 0a10 	vmov	s16, r0
 800aacc:	e7e7      	b.n	800aa9e <_dtoa_r+0xb26>
 800aace:	9b02      	ldr	r3, [sp, #8]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	bfc8      	it	gt
 800aad4:	461d      	movgt	r5, r3
 800aad6:	9b01      	ldr	r3, [sp, #4]
 800aad8:	bfd8      	it	le
 800aada:	2501      	movle	r5, #1
 800aadc:	441d      	add	r5, r3
 800aade:	f04f 0800 	mov.w	r8, #0
 800aae2:	ee18 1a10 	vmov	r1, s16
 800aae6:	2201      	movs	r2, #1
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 fa5f 	bl	800afac <__lshift>
 800aaee:	4631      	mov	r1, r6
 800aaf0:	ee08 0a10 	vmov	s16, r0
 800aaf4:	f000 faca 	bl	800b08c <__mcmp>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	dc91      	bgt.n	800aa20 <_dtoa_r+0xaa8>
 800aafc:	d102      	bne.n	800ab04 <_dtoa_r+0xb8c>
 800aafe:	f01a 0f01 	tst.w	sl, #1
 800ab02:	d18d      	bne.n	800aa20 <_dtoa_r+0xaa8>
 800ab04:	462b      	mov	r3, r5
 800ab06:	461d      	mov	r5, r3
 800ab08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab0c:	2a30      	cmp	r2, #48	; 0x30
 800ab0e:	d0fa      	beq.n	800ab06 <_dtoa_r+0xb8e>
 800ab10:	e6d7      	b.n	800a8c2 <_dtoa_r+0x94a>
 800ab12:	9a01      	ldr	r2, [sp, #4]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d184      	bne.n	800aa22 <_dtoa_r+0xaaa>
 800ab18:	9b00      	ldr	r3, [sp, #0]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	2331      	movs	r3, #49	; 0x31
 800ab20:	7013      	strb	r3, [r2, #0]
 800ab22:	e6ce      	b.n	800a8c2 <_dtoa_r+0x94a>
 800ab24:	4b09      	ldr	r3, [pc, #36]	; (800ab4c <_dtoa_r+0xbd4>)
 800ab26:	f7ff ba95 	b.w	800a054 <_dtoa_r+0xdc>
 800ab2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f47f aa6e 	bne.w	800a00e <_dtoa_r+0x96>
 800ab32:	4b07      	ldr	r3, [pc, #28]	; (800ab50 <_dtoa_r+0xbd8>)
 800ab34:	f7ff ba8e 	b.w	800a054 <_dtoa_r+0xdc>
 800ab38:	9b02      	ldr	r3, [sp, #8]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	dcae      	bgt.n	800aa9c <_dtoa_r+0xb24>
 800ab3e:	9b06      	ldr	r3, [sp, #24]
 800ab40:	2b02      	cmp	r3, #2
 800ab42:	f73f aea8 	bgt.w	800a896 <_dtoa_r+0x91e>
 800ab46:	e7a9      	b.n	800aa9c <_dtoa_r+0xb24>
 800ab48:	08024583 	.word	0x08024583
 800ab4c:	080244e0 	.word	0x080244e0
 800ab50:	08024504 	.word	0x08024504

0800ab54 <_localeconv_r>:
 800ab54:	4800      	ldr	r0, [pc, #0]	; (800ab58 <_localeconv_r+0x4>)
 800ab56:	4770      	bx	lr
 800ab58:	20000420 	.word	0x20000420

0800ab5c <malloc>:
 800ab5c:	4b02      	ldr	r3, [pc, #8]	; (800ab68 <malloc+0xc>)
 800ab5e:	4601      	mov	r1, r0
 800ab60:	6818      	ldr	r0, [r3, #0]
 800ab62:	f000 bc17 	b.w	800b394 <_malloc_r>
 800ab66:	bf00      	nop
 800ab68:	200002cc 	.word	0x200002cc

0800ab6c <memcpy>:
 800ab6c:	440a      	add	r2, r1
 800ab6e:	4291      	cmp	r1, r2
 800ab70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ab74:	d100      	bne.n	800ab78 <memcpy+0xc>
 800ab76:	4770      	bx	lr
 800ab78:	b510      	push	{r4, lr}
 800ab7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ab82:	4291      	cmp	r1, r2
 800ab84:	d1f9      	bne.n	800ab7a <memcpy+0xe>
 800ab86:	bd10      	pop	{r4, pc}

0800ab88 <_Balloc>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab8c:	4604      	mov	r4, r0
 800ab8e:	460d      	mov	r5, r1
 800ab90:	b976      	cbnz	r6, 800abb0 <_Balloc+0x28>
 800ab92:	2010      	movs	r0, #16
 800ab94:	f7ff ffe2 	bl	800ab5c <malloc>
 800ab98:	4602      	mov	r2, r0
 800ab9a:	6260      	str	r0, [r4, #36]	; 0x24
 800ab9c:	b920      	cbnz	r0, 800aba8 <_Balloc+0x20>
 800ab9e:	4b18      	ldr	r3, [pc, #96]	; (800ac00 <_Balloc+0x78>)
 800aba0:	4818      	ldr	r0, [pc, #96]	; (800ac04 <_Balloc+0x7c>)
 800aba2:	2166      	movs	r1, #102	; 0x66
 800aba4:	f000 fdd6 	bl	800b754 <__assert_func>
 800aba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abac:	6006      	str	r6, [r0, #0]
 800abae:	60c6      	str	r6, [r0, #12]
 800abb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800abb2:	68f3      	ldr	r3, [r6, #12]
 800abb4:	b183      	cbz	r3, 800abd8 <_Balloc+0x50>
 800abb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800abbe:	b9b8      	cbnz	r0, 800abf0 <_Balloc+0x68>
 800abc0:	2101      	movs	r1, #1
 800abc2:	fa01 f605 	lsl.w	r6, r1, r5
 800abc6:	1d72      	adds	r2, r6, #5
 800abc8:	0092      	lsls	r2, r2, #2
 800abca:	4620      	mov	r0, r4
 800abcc:	f000 fb60 	bl	800b290 <_calloc_r>
 800abd0:	b160      	cbz	r0, 800abec <_Balloc+0x64>
 800abd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800abd6:	e00e      	b.n	800abf6 <_Balloc+0x6e>
 800abd8:	2221      	movs	r2, #33	; 0x21
 800abda:	2104      	movs	r1, #4
 800abdc:	4620      	mov	r0, r4
 800abde:	f000 fb57 	bl	800b290 <_calloc_r>
 800abe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abe4:	60f0      	str	r0, [r6, #12]
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1e4      	bne.n	800abb6 <_Balloc+0x2e>
 800abec:	2000      	movs	r0, #0
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	6802      	ldr	r2, [r0, #0]
 800abf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abf6:	2300      	movs	r3, #0
 800abf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abfc:	e7f7      	b.n	800abee <_Balloc+0x66>
 800abfe:	bf00      	nop
 800ac00:	08024511 	.word	0x08024511
 800ac04:	08024594 	.word	0x08024594

0800ac08 <_Bfree>:
 800ac08:	b570      	push	{r4, r5, r6, lr}
 800ac0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac0c:	4605      	mov	r5, r0
 800ac0e:	460c      	mov	r4, r1
 800ac10:	b976      	cbnz	r6, 800ac30 <_Bfree+0x28>
 800ac12:	2010      	movs	r0, #16
 800ac14:	f7ff ffa2 	bl	800ab5c <malloc>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	6268      	str	r0, [r5, #36]	; 0x24
 800ac1c:	b920      	cbnz	r0, 800ac28 <_Bfree+0x20>
 800ac1e:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <_Bfree+0x3c>)
 800ac20:	4809      	ldr	r0, [pc, #36]	; (800ac48 <_Bfree+0x40>)
 800ac22:	218a      	movs	r1, #138	; 0x8a
 800ac24:	f000 fd96 	bl	800b754 <__assert_func>
 800ac28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac2c:	6006      	str	r6, [r0, #0]
 800ac2e:	60c6      	str	r6, [r0, #12]
 800ac30:	b13c      	cbz	r4, 800ac42 <_Bfree+0x3a>
 800ac32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ac34:	6862      	ldr	r2, [r4, #4]
 800ac36:	68db      	ldr	r3, [r3, #12]
 800ac38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac3c:	6021      	str	r1, [r4, #0]
 800ac3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac42:	bd70      	pop	{r4, r5, r6, pc}
 800ac44:	08024511 	.word	0x08024511
 800ac48:	08024594 	.word	0x08024594

0800ac4c <__multadd>:
 800ac4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac50:	690d      	ldr	r5, [r1, #16]
 800ac52:	4607      	mov	r7, r0
 800ac54:	460c      	mov	r4, r1
 800ac56:	461e      	mov	r6, r3
 800ac58:	f101 0c14 	add.w	ip, r1, #20
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac62:	b299      	uxth	r1, r3
 800ac64:	fb02 6101 	mla	r1, r2, r1, r6
 800ac68:	0c1e      	lsrs	r6, r3, #16
 800ac6a:	0c0b      	lsrs	r3, r1, #16
 800ac6c:	fb02 3306 	mla	r3, r2, r6, r3
 800ac70:	b289      	uxth	r1, r1
 800ac72:	3001      	adds	r0, #1
 800ac74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac78:	4285      	cmp	r5, r0
 800ac7a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac82:	dcec      	bgt.n	800ac5e <__multadd+0x12>
 800ac84:	b30e      	cbz	r6, 800acca <__multadd+0x7e>
 800ac86:	68a3      	ldr	r3, [r4, #8]
 800ac88:	42ab      	cmp	r3, r5
 800ac8a:	dc19      	bgt.n	800acc0 <__multadd+0x74>
 800ac8c:	6861      	ldr	r1, [r4, #4]
 800ac8e:	4638      	mov	r0, r7
 800ac90:	3101      	adds	r1, #1
 800ac92:	f7ff ff79 	bl	800ab88 <_Balloc>
 800ac96:	4680      	mov	r8, r0
 800ac98:	b928      	cbnz	r0, 800aca6 <__multadd+0x5a>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <__multadd+0x84>)
 800ac9e:	480d      	ldr	r0, [pc, #52]	; (800acd4 <__multadd+0x88>)
 800aca0:	21b5      	movs	r1, #181	; 0xb5
 800aca2:	f000 fd57 	bl	800b754 <__assert_func>
 800aca6:	6922      	ldr	r2, [r4, #16]
 800aca8:	3202      	adds	r2, #2
 800acaa:	f104 010c 	add.w	r1, r4, #12
 800acae:	0092      	lsls	r2, r2, #2
 800acb0:	300c      	adds	r0, #12
 800acb2:	f7ff ff5b 	bl	800ab6c <memcpy>
 800acb6:	4621      	mov	r1, r4
 800acb8:	4638      	mov	r0, r7
 800acba:	f7ff ffa5 	bl	800ac08 <_Bfree>
 800acbe:	4644      	mov	r4, r8
 800acc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acc4:	3501      	adds	r5, #1
 800acc6:	615e      	str	r6, [r3, #20]
 800acc8:	6125      	str	r5, [r4, #16]
 800acca:	4620      	mov	r0, r4
 800accc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd0:	08024583 	.word	0x08024583
 800acd4:	08024594 	.word	0x08024594

0800acd8 <__hi0bits>:
 800acd8:	0c03      	lsrs	r3, r0, #16
 800acda:	041b      	lsls	r3, r3, #16
 800acdc:	b9d3      	cbnz	r3, 800ad14 <__hi0bits+0x3c>
 800acde:	0400      	lsls	r0, r0, #16
 800ace0:	2310      	movs	r3, #16
 800ace2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ace6:	bf04      	itt	eq
 800ace8:	0200      	lsleq	r0, r0, #8
 800acea:	3308      	addeq	r3, #8
 800acec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800acf0:	bf04      	itt	eq
 800acf2:	0100      	lsleq	r0, r0, #4
 800acf4:	3304      	addeq	r3, #4
 800acf6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800acfa:	bf04      	itt	eq
 800acfc:	0080      	lsleq	r0, r0, #2
 800acfe:	3302      	addeq	r3, #2
 800ad00:	2800      	cmp	r0, #0
 800ad02:	db05      	blt.n	800ad10 <__hi0bits+0x38>
 800ad04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad08:	f103 0301 	add.w	r3, r3, #1
 800ad0c:	bf08      	it	eq
 800ad0e:	2320      	moveq	r3, #32
 800ad10:	4618      	mov	r0, r3
 800ad12:	4770      	bx	lr
 800ad14:	2300      	movs	r3, #0
 800ad16:	e7e4      	b.n	800ace2 <__hi0bits+0xa>

0800ad18 <__lo0bits>:
 800ad18:	6803      	ldr	r3, [r0, #0]
 800ad1a:	f013 0207 	ands.w	r2, r3, #7
 800ad1e:	4601      	mov	r1, r0
 800ad20:	d00b      	beq.n	800ad3a <__lo0bits+0x22>
 800ad22:	07da      	lsls	r2, r3, #31
 800ad24:	d423      	bmi.n	800ad6e <__lo0bits+0x56>
 800ad26:	0798      	lsls	r0, r3, #30
 800ad28:	bf49      	itett	mi
 800ad2a:	085b      	lsrmi	r3, r3, #1
 800ad2c:	089b      	lsrpl	r3, r3, #2
 800ad2e:	2001      	movmi	r0, #1
 800ad30:	600b      	strmi	r3, [r1, #0]
 800ad32:	bf5c      	itt	pl
 800ad34:	600b      	strpl	r3, [r1, #0]
 800ad36:	2002      	movpl	r0, #2
 800ad38:	4770      	bx	lr
 800ad3a:	b298      	uxth	r0, r3
 800ad3c:	b9a8      	cbnz	r0, 800ad6a <__lo0bits+0x52>
 800ad3e:	0c1b      	lsrs	r3, r3, #16
 800ad40:	2010      	movs	r0, #16
 800ad42:	b2da      	uxtb	r2, r3
 800ad44:	b90a      	cbnz	r2, 800ad4a <__lo0bits+0x32>
 800ad46:	3008      	adds	r0, #8
 800ad48:	0a1b      	lsrs	r3, r3, #8
 800ad4a:	071a      	lsls	r2, r3, #28
 800ad4c:	bf04      	itt	eq
 800ad4e:	091b      	lsreq	r3, r3, #4
 800ad50:	3004      	addeq	r0, #4
 800ad52:	079a      	lsls	r2, r3, #30
 800ad54:	bf04      	itt	eq
 800ad56:	089b      	lsreq	r3, r3, #2
 800ad58:	3002      	addeq	r0, #2
 800ad5a:	07da      	lsls	r2, r3, #31
 800ad5c:	d403      	bmi.n	800ad66 <__lo0bits+0x4e>
 800ad5e:	085b      	lsrs	r3, r3, #1
 800ad60:	f100 0001 	add.w	r0, r0, #1
 800ad64:	d005      	beq.n	800ad72 <__lo0bits+0x5a>
 800ad66:	600b      	str	r3, [r1, #0]
 800ad68:	4770      	bx	lr
 800ad6a:	4610      	mov	r0, r2
 800ad6c:	e7e9      	b.n	800ad42 <__lo0bits+0x2a>
 800ad6e:	2000      	movs	r0, #0
 800ad70:	4770      	bx	lr
 800ad72:	2020      	movs	r0, #32
 800ad74:	4770      	bx	lr
	...

0800ad78 <__i2b>:
 800ad78:	b510      	push	{r4, lr}
 800ad7a:	460c      	mov	r4, r1
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	f7ff ff03 	bl	800ab88 <_Balloc>
 800ad82:	4602      	mov	r2, r0
 800ad84:	b928      	cbnz	r0, 800ad92 <__i2b+0x1a>
 800ad86:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <__i2b+0x24>)
 800ad88:	4805      	ldr	r0, [pc, #20]	; (800ada0 <__i2b+0x28>)
 800ad8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ad8e:	f000 fce1 	bl	800b754 <__assert_func>
 800ad92:	2301      	movs	r3, #1
 800ad94:	6144      	str	r4, [r0, #20]
 800ad96:	6103      	str	r3, [r0, #16]
 800ad98:	bd10      	pop	{r4, pc}
 800ad9a:	bf00      	nop
 800ad9c:	08024583 	.word	0x08024583
 800ada0:	08024594 	.word	0x08024594

0800ada4 <__multiply>:
 800ada4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada8:	4691      	mov	r9, r2
 800adaa:	690a      	ldr	r2, [r1, #16]
 800adac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	bfb8      	it	lt
 800adb4:	460b      	movlt	r3, r1
 800adb6:	460c      	mov	r4, r1
 800adb8:	bfbc      	itt	lt
 800adba:	464c      	movlt	r4, r9
 800adbc:	4699      	movlt	r9, r3
 800adbe:	6927      	ldr	r7, [r4, #16]
 800adc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800adc4:	68a3      	ldr	r3, [r4, #8]
 800adc6:	6861      	ldr	r1, [r4, #4]
 800adc8:	eb07 060a 	add.w	r6, r7, sl
 800adcc:	42b3      	cmp	r3, r6
 800adce:	b085      	sub	sp, #20
 800add0:	bfb8      	it	lt
 800add2:	3101      	addlt	r1, #1
 800add4:	f7ff fed8 	bl	800ab88 <_Balloc>
 800add8:	b930      	cbnz	r0, 800ade8 <__multiply+0x44>
 800adda:	4602      	mov	r2, r0
 800addc:	4b44      	ldr	r3, [pc, #272]	; (800aef0 <__multiply+0x14c>)
 800adde:	4845      	ldr	r0, [pc, #276]	; (800aef4 <__multiply+0x150>)
 800ade0:	f240 115d 	movw	r1, #349	; 0x15d
 800ade4:	f000 fcb6 	bl	800b754 <__assert_func>
 800ade8:	f100 0514 	add.w	r5, r0, #20
 800adec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800adf0:	462b      	mov	r3, r5
 800adf2:	2200      	movs	r2, #0
 800adf4:	4543      	cmp	r3, r8
 800adf6:	d321      	bcc.n	800ae3c <__multiply+0x98>
 800adf8:	f104 0314 	add.w	r3, r4, #20
 800adfc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae00:	f109 0314 	add.w	r3, r9, #20
 800ae04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae08:	9202      	str	r2, [sp, #8]
 800ae0a:	1b3a      	subs	r2, r7, r4
 800ae0c:	3a15      	subs	r2, #21
 800ae0e:	f022 0203 	bic.w	r2, r2, #3
 800ae12:	3204      	adds	r2, #4
 800ae14:	f104 0115 	add.w	r1, r4, #21
 800ae18:	428f      	cmp	r7, r1
 800ae1a:	bf38      	it	cc
 800ae1c:	2204      	movcc	r2, #4
 800ae1e:	9201      	str	r2, [sp, #4]
 800ae20:	9a02      	ldr	r2, [sp, #8]
 800ae22:	9303      	str	r3, [sp, #12]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d80c      	bhi.n	800ae42 <__multiply+0x9e>
 800ae28:	2e00      	cmp	r6, #0
 800ae2a:	dd03      	ble.n	800ae34 <__multiply+0x90>
 800ae2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d05a      	beq.n	800aeea <__multiply+0x146>
 800ae34:	6106      	str	r6, [r0, #16]
 800ae36:	b005      	add	sp, #20
 800ae38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3c:	f843 2b04 	str.w	r2, [r3], #4
 800ae40:	e7d8      	b.n	800adf4 <__multiply+0x50>
 800ae42:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae46:	f1ba 0f00 	cmp.w	sl, #0
 800ae4a:	d024      	beq.n	800ae96 <__multiply+0xf2>
 800ae4c:	f104 0e14 	add.w	lr, r4, #20
 800ae50:	46a9      	mov	r9, r5
 800ae52:	f04f 0c00 	mov.w	ip, #0
 800ae56:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae5a:	f8d9 1000 	ldr.w	r1, [r9]
 800ae5e:	fa1f fb82 	uxth.w	fp, r2
 800ae62:	b289      	uxth	r1, r1
 800ae64:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae6c:	f8d9 2000 	ldr.w	r2, [r9]
 800ae70:	4461      	add	r1, ip
 800ae72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae76:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae7e:	b289      	uxth	r1, r1
 800ae80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ae84:	4577      	cmp	r7, lr
 800ae86:	f849 1b04 	str.w	r1, [r9], #4
 800ae8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae8e:	d8e2      	bhi.n	800ae56 <__multiply+0xb2>
 800ae90:	9a01      	ldr	r2, [sp, #4]
 800ae92:	f845 c002 	str.w	ip, [r5, r2]
 800ae96:	9a03      	ldr	r2, [sp, #12]
 800ae98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	f1b9 0f00 	cmp.w	r9, #0
 800aea2:	d020      	beq.n	800aee6 <__multiply+0x142>
 800aea4:	6829      	ldr	r1, [r5, #0]
 800aea6:	f104 0c14 	add.w	ip, r4, #20
 800aeaa:	46ae      	mov	lr, r5
 800aeac:	f04f 0a00 	mov.w	sl, #0
 800aeb0:	f8bc b000 	ldrh.w	fp, [ip]
 800aeb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aeb8:	fb09 220b 	mla	r2, r9, fp, r2
 800aebc:	4492      	add	sl, r2
 800aebe:	b289      	uxth	r1, r1
 800aec0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aec4:	f84e 1b04 	str.w	r1, [lr], #4
 800aec8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aecc:	f8be 1000 	ldrh.w	r1, [lr]
 800aed0:	0c12      	lsrs	r2, r2, #16
 800aed2:	fb09 1102 	mla	r1, r9, r2, r1
 800aed6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aeda:	4567      	cmp	r7, ip
 800aedc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aee0:	d8e6      	bhi.n	800aeb0 <__multiply+0x10c>
 800aee2:	9a01      	ldr	r2, [sp, #4]
 800aee4:	50a9      	str	r1, [r5, r2]
 800aee6:	3504      	adds	r5, #4
 800aee8:	e79a      	b.n	800ae20 <__multiply+0x7c>
 800aeea:	3e01      	subs	r6, #1
 800aeec:	e79c      	b.n	800ae28 <__multiply+0x84>
 800aeee:	bf00      	nop
 800aef0:	08024583 	.word	0x08024583
 800aef4:	08024594 	.word	0x08024594

0800aef8 <__pow5mult>:
 800aef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aefc:	4615      	mov	r5, r2
 800aefe:	f012 0203 	ands.w	r2, r2, #3
 800af02:	4606      	mov	r6, r0
 800af04:	460f      	mov	r7, r1
 800af06:	d007      	beq.n	800af18 <__pow5mult+0x20>
 800af08:	4c25      	ldr	r4, [pc, #148]	; (800afa0 <__pow5mult+0xa8>)
 800af0a:	3a01      	subs	r2, #1
 800af0c:	2300      	movs	r3, #0
 800af0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af12:	f7ff fe9b 	bl	800ac4c <__multadd>
 800af16:	4607      	mov	r7, r0
 800af18:	10ad      	asrs	r5, r5, #2
 800af1a:	d03d      	beq.n	800af98 <__pow5mult+0xa0>
 800af1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af1e:	b97c      	cbnz	r4, 800af40 <__pow5mult+0x48>
 800af20:	2010      	movs	r0, #16
 800af22:	f7ff fe1b 	bl	800ab5c <malloc>
 800af26:	4602      	mov	r2, r0
 800af28:	6270      	str	r0, [r6, #36]	; 0x24
 800af2a:	b928      	cbnz	r0, 800af38 <__pow5mult+0x40>
 800af2c:	4b1d      	ldr	r3, [pc, #116]	; (800afa4 <__pow5mult+0xac>)
 800af2e:	481e      	ldr	r0, [pc, #120]	; (800afa8 <__pow5mult+0xb0>)
 800af30:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af34:	f000 fc0e 	bl	800b754 <__assert_func>
 800af38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af3c:	6004      	str	r4, [r0, #0]
 800af3e:	60c4      	str	r4, [r0, #12]
 800af40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af48:	b94c      	cbnz	r4, 800af5e <__pow5mult+0x66>
 800af4a:	f240 2171 	movw	r1, #625	; 0x271
 800af4e:	4630      	mov	r0, r6
 800af50:	f7ff ff12 	bl	800ad78 <__i2b>
 800af54:	2300      	movs	r3, #0
 800af56:	f8c8 0008 	str.w	r0, [r8, #8]
 800af5a:	4604      	mov	r4, r0
 800af5c:	6003      	str	r3, [r0, #0]
 800af5e:	f04f 0900 	mov.w	r9, #0
 800af62:	07eb      	lsls	r3, r5, #31
 800af64:	d50a      	bpl.n	800af7c <__pow5mult+0x84>
 800af66:	4639      	mov	r1, r7
 800af68:	4622      	mov	r2, r4
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7ff ff1a 	bl	800ada4 <__multiply>
 800af70:	4639      	mov	r1, r7
 800af72:	4680      	mov	r8, r0
 800af74:	4630      	mov	r0, r6
 800af76:	f7ff fe47 	bl	800ac08 <_Bfree>
 800af7a:	4647      	mov	r7, r8
 800af7c:	106d      	asrs	r5, r5, #1
 800af7e:	d00b      	beq.n	800af98 <__pow5mult+0xa0>
 800af80:	6820      	ldr	r0, [r4, #0]
 800af82:	b938      	cbnz	r0, 800af94 <__pow5mult+0x9c>
 800af84:	4622      	mov	r2, r4
 800af86:	4621      	mov	r1, r4
 800af88:	4630      	mov	r0, r6
 800af8a:	f7ff ff0b 	bl	800ada4 <__multiply>
 800af8e:	6020      	str	r0, [r4, #0]
 800af90:	f8c0 9000 	str.w	r9, [r0]
 800af94:	4604      	mov	r4, r0
 800af96:	e7e4      	b.n	800af62 <__pow5mult+0x6a>
 800af98:	4638      	mov	r0, r7
 800af9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af9e:	bf00      	nop
 800afa0:	080246e0 	.word	0x080246e0
 800afa4:	08024511 	.word	0x08024511
 800afa8:	08024594 	.word	0x08024594

0800afac <__lshift>:
 800afac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afb0:	460c      	mov	r4, r1
 800afb2:	6849      	ldr	r1, [r1, #4]
 800afb4:	6923      	ldr	r3, [r4, #16]
 800afb6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afba:	68a3      	ldr	r3, [r4, #8]
 800afbc:	4607      	mov	r7, r0
 800afbe:	4691      	mov	r9, r2
 800afc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afc4:	f108 0601 	add.w	r6, r8, #1
 800afc8:	42b3      	cmp	r3, r6
 800afca:	db0b      	blt.n	800afe4 <__lshift+0x38>
 800afcc:	4638      	mov	r0, r7
 800afce:	f7ff fddb 	bl	800ab88 <_Balloc>
 800afd2:	4605      	mov	r5, r0
 800afd4:	b948      	cbnz	r0, 800afea <__lshift+0x3e>
 800afd6:	4602      	mov	r2, r0
 800afd8:	4b2a      	ldr	r3, [pc, #168]	; (800b084 <__lshift+0xd8>)
 800afda:	482b      	ldr	r0, [pc, #172]	; (800b088 <__lshift+0xdc>)
 800afdc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800afe0:	f000 fbb8 	bl	800b754 <__assert_func>
 800afe4:	3101      	adds	r1, #1
 800afe6:	005b      	lsls	r3, r3, #1
 800afe8:	e7ee      	b.n	800afc8 <__lshift+0x1c>
 800afea:	2300      	movs	r3, #0
 800afec:	f100 0114 	add.w	r1, r0, #20
 800aff0:	f100 0210 	add.w	r2, r0, #16
 800aff4:	4618      	mov	r0, r3
 800aff6:	4553      	cmp	r3, sl
 800aff8:	db37      	blt.n	800b06a <__lshift+0xbe>
 800affa:	6920      	ldr	r0, [r4, #16]
 800affc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b000:	f104 0314 	add.w	r3, r4, #20
 800b004:	f019 091f 	ands.w	r9, r9, #31
 800b008:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b00c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b010:	d02f      	beq.n	800b072 <__lshift+0xc6>
 800b012:	f1c9 0e20 	rsb	lr, r9, #32
 800b016:	468a      	mov	sl, r1
 800b018:	f04f 0c00 	mov.w	ip, #0
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	fa02 f209 	lsl.w	r2, r2, r9
 800b022:	ea42 020c 	orr.w	r2, r2, ip
 800b026:	f84a 2b04 	str.w	r2, [sl], #4
 800b02a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b02e:	4298      	cmp	r0, r3
 800b030:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b034:	d8f2      	bhi.n	800b01c <__lshift+0x70>
 800b036:	1b03      	subs	r3, r0, r4
 800b038:	3b15      	subs	r3, #21
 800b03a:	f023 0303 	bic.w	r3, r3, #3
 800b03e:	3304      	adds	r3, #4
 800b040:	f104 0215 	add.w	r2, r4, #21
 800b044:	4290      	cmp	r0, r2
 800b046:	bf38      	it	cc
 800b048:	2304      	movcc	r3, #4
 800b04a:	f841 c003 	str.w	ip, [r1, r3]
 800b04e:	f1bc 0f00 	cmp.w	ip, #0
 800b052:	d001      	beq.n	800b058 <__lshift+0xac>
 800b054:	f108 0602 	add.w	r6, r8, #2
 800b058:	3e01      	subs	r6, #1
 800b05a:	4638      	mov	r0, r7
 800b05c:	612e      	str	r6, [r5, #16]
 800b05e:	4621      	mov	r1, r4
 800b060:	f7ff fdd2 	bl	800ac08 <_Bfree>
 800b064:	4628      	mov	r0, r5
 800b066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b06a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b06e:	3301      	adds	r3, #1
 800b070:	e7c1      	b.n	800aff6 <__lshift+0x4a>
 800b072:	3904      	subs	r1, #4
 800b074:	f853 2b04 	ldr.w	r2, [r3], #4
 800b078:	f841 2f04 	str.w	r2, [r1, #4]!
 800b07c:	4298      	cmp	r0, r3
 800b07e:	d8f9      	bhi.n	800b074 <__lshift+0xc8>
 800b080:	e7ea      	b.n	800b058 <__lshift+0xac>
 800b082:	bf00      	nop
 800b084:	08024583 	.word	0x08024583
 800b088:	08024594 	.word	0x08024594

0800b08c <__mcmp>:
 800b08c:	b530      	push	{r4, r5, lr}
 800b08e:	6902      	ldr	r2, [r0, #16]
 800b090:	690c      	ldr	r4, [r1, #16]
 800b092:	1b12      	subs	r2, r2, r4
 800b094:	d10e      	bne.n	800b0b4 <__mcmp+0x28>
 800b096:	f100 0314 	add.w	r3, r0, #20
 800b09a:	3114      	adds	r1, #20
 800b09c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0ac:	42a5      	cmp	r5, r4
 800b0ae:	d003      	beq.n	800b0b8 <__mcmp+0x2c>
 800b0b0:	d305      	bcc.n	800b0be <__mcmp+0x32>
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	bd30      	pop	{r4, r5, pc}
 800b0b8:	4283      	cmp	r3, r0
 800b0ba:	d3f3      	bcc.n	800b0a4 <__mcmp+0x18>
 800b0bc:	e7fa      	b.n	800b0b4 <__mcmp+0x28>
 800b0be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0c2:	e7f7      	b.n	800b0b4 <__mcmp+0x28>

0800b0c4 <__mdiff>:
 800b0c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	4606      	mov	r6, r0
 800b0cc:	4611      	mov	r1, r2
 800b0ce:	4620      	mov	r0, r4
 800b0d0:	4690      	mov	r8, r2
 800b0d2:	f7ff ffdb 	bl	800b08c <__mcmp>
 800b0d6:	1e05      	subs	r5, r0, #0
 800b0d8:	d110      	bne.n	800b0fc <__mdiff+0x38>
 800b0da:	4629      	mov	r1, r5
 800b0dc:	4630      	mov	r0, r6
 800b0de:	f7ff fd53 	bl	800ab88 <_Balloc>
 800b0e2:	b930      	cbnz	r0, 800b0f2 <__mdiff+0x2e>
 800b0e4:	4b3a      	ldr	r3, [pc, #232]	; (800b1d0 <__mdiff+0x10c>)
 800b0e6:	4602      	mov	r2, r0
 800b0e8:	f240 2132 	movw	r1, #562	; 0x232
 800b0ec:	4839      	ldr	r0, [pc, #228]	; (800b1d4 <__mdiff+0x110>)
 800b0ee:	f000 fb31 	bl	800b754 <__assert_func>
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b0f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0fc:	bfa4      	itt	ge
 800b0fe:	4643      	movge	r3, r8
 800b100:	46a0      	movge	r8, r4
 800b102:	4630      	mov	r0, r6
 800b104:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b108:	bfa6      	itte	ge
 800b10a:	461c      	movge	r4, r3
 800b10c:	2500      	movge	r5, #0
 800b10e:	2501      	movlt	r5, #1
 800b110:	f7ff fd3a 	bl	800ab88 <_Balloc>
 800b114:	b920      	cbnz	r0, 800b120 <__mdiff+0x5c>
 800b116:	4b2e      	ldr	r3, [pc, #184]	; (800b1d0 <__mdiff+0x10c>)
 800b118:	4602      	mov	r2, r0
 800b11a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b11e:	e7e5      	b.n	800b0ec <__mdiff+0x28>
 800b120:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b124:	6926      	ldr	r6, [r4, #16]
 800b126:	60c5      	str	r5, [r0, #12]
 800b128:	f104 0914 	add.w	r9, r4, #20
 800b12c:	f108 0514 	add.w	r5, r8, #20
 800b130:	f100 0e14 	add.w	lr, r0, #20
 800b134:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b138:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b13c:	f108 0210 	add.w	r2, r8, #16
 800b140:	46f2      	mov	sl, lr
 800b142:	2100      	movs	r1, #0
 800b144:	f859 3b04 	ldr.w	r3, [r9], #4
 800b148:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b14c:	fa1f f883 	uxth.w	r8, r3
 800b150:	fa11 f18b 	uxtah	r1, r1, fp
 800b154:	0c1b      	lsrs	r3, r3, #16
 800b156:	eba1 0808 	sub.w	r8, r1, r8
 800b15a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b15e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b162:	fa1f f888 	uxth.w	r8, r8
 800b166:	1419      	asrs	r1, r3, #16
 800b168:	454e      	cmp	r6, r9
 800b16a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b16e:	f84a 3b04 	str.w	r3, [sl], #4
 800b172:	d8e7      	bhi.n	800b144 <__mdiff+0x80>
 800b174:	1b33      	subs	r3, r6, r4
 800b176:	3b15      	subs	r3, #21
 800b178:	f023 0303 	bic.w	r3, r3, #3
 800b17c:	3304      	adds	r3, #4
 800b17e:	3415      	adds	r4, #21
 800b180:	42a6      	cmp	r6, r4
 800b182:	bf38      	it	cc
 800b184:	2304      	movcc	r3, #4
 800b186:	441d      	add	r5, r3
 800b188:	4473      	add	r3, lr
 800b18a:	469e      	mov	lr, r3
 800b18c:	462e      	mov	r6, r5
 800b18e:	4566      	cmp	r6, ip
 800b190:	d30e      	bcc.n	800b1b0 <__mdiff+0xec>
 800b192:	f10c 0203 	add.w	r2, ip, #3
 800b196:	1b52      	subs	r2, r2, r5
 800b198:	f022 0203 	bic.w	r2, r2, #3
 800b19c:	3d03      	subs	r5, #3
 800b19e:	45ac      	cmp	ip, r5
 800b1a0:	bf38      	it	cc
 800b1a2:	2200      	movcc	r2, #0
 800b1a4:	441a      	add	r2, r3
 800b1a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1aa:	b17b      	cbz	r3, 800b1cc <__mdiff+0x108>
 800b1ac:	6107      	str	r7, [r0, #16]
 800b1ae:	e7a3      	b.n	800b0f8 <__mdiff+0x34>
 800b1b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1b4:	fa11 f288 	uxtah	r2, r1, r8
 800b1b8:	1414      	asrs	r4, r2, #16
 800b1ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1be:	b292      	uxth	r2, r2
 800b1c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1c4:	f84e 2b04 	str.w	r2, [lr], #4
 800b1c8:	1421      	asrs	r1, r4, #16
 800b1ca:	e7e0      	b.n	800b18e <__mdiff+0xca>
 800b1cc:	3f01      	subs	r7, #1
 800b1ce:	e7ea      	b.n	800b1a6 <__mdiff+0xe2>
 800b1d0:	08024583 	.word	0x08024583
 800b1d4:	08024594 	.word	0x08024594

0800b1d8 <__d2b>:
 800b1d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b1dc:	4689      	mov	r9, r1
 800b1de:	2101      	movs	r1, #1
 800b1e0:	ec57 6b10 	vmov	r6, r7, d0
 800b1e4:	4690      	mov	r8, r2
 800b1e6:	f7ff fccf 	bl	800ab88 <_Balloc>
 800b1ea:	4604      	mov	r4, r0
 800b1ec:	b930      	cbnz	r0, 800b1fc <__d2b+0x24>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	4b25      	ldr	r3, [pc, #148]	; (800b288 <__d2b+0xb0>)
 800b1f2:	4826      	ldr	r0, [pc, #152]	; (800b28c <__d2b+0xb4>)
 800b1f4:	f240 310a 	movw	r1, #778	; 0x30a
 800b1f8:	f000 faac 	bl	800b754 <__assert_func>
 800b1fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b200:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b204:	bb35      	cbnz	r5, 800b254 <__d2b+0x7c>
 800b206:	2e00      	cmp	r6, #0
 800b208:	9301      	str	r3, [sp, #4]
 800b20a:	d028      	beq.n	800b25e <__d2b+0x86>
 800b20c:	4668      	mov	r0, sp
 800b20e:	9600      	str	r6, [sp, #0]
 800b210:	f7ff fd82 	bl	800ad18 <__lo0bits>
 800b214:	9900      	ldr	r1, [sp, #0]
 800b216:	b300      	cbz	r0, 800b25a <__d2b+0x82>
 800b218:	9a01      	ldr	r2, [sp, #4]
 800b21a:	f1c0 0320 	rsb	r3, r0, #32
 800b21e:	fa02 f303 	lsl.w	r3, r2, r3
 800b222:	430b      	orrs	r3, r1
 800b224:	40c2      	lsrs	r2, r0
 800b226:	6163      	str	r3, [r4, #20]
 800b228:	9201      	str	r2, [sp, #4]
 800b22a:	9b01      	ldr	r3, [sp, #4]
 800b22c:	61a3      	str	r3, [r4, #24]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	bf14      	ite	ne
 800b232:	2202      	movne	r2, #2
 800b234:	2201      	moveq	r2, #1
 800b236:	6122      	str	r2, [r4, #16]
 800b238:	b1d5      	cbz	r5, 800b270 <__d2b+0x98>
 800b23a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b23e:	4405      	add	r5, r0
 800b240:	f8c9 5000 	str.w	r5, [r9]
 800b244:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b248:	f8c8 0000 	str.w	r0, [r8]
 800b24c:	4620      	mov	r0, r4
 800b24e:	b003      	add	sp, #12
 800b250:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b258:	e7d5      	b.n	800b206 <__d2b+0x2e>
 800b25a:	6161      	str	r1, [r4, #20]
 800b25c:	e7e5      	b.n	800b22a <__d2b+0x52>
 800b25e:	a801      	add	r0, sp, #4
 800b260:	f7ff fd5a 	bl	800ad18 <__lo0bits>
 800b264:	9b01      	ldr	r3, [sp, #4]
 800b266:	6163      	str	r3, [r4, #20]
 800b268:	2201      	movs	r2, #1
 800b26a:	6122      	str	r2, [r4, #16]
 800b26c:	3020      	adds	r0, #32
 800b26e:	e7e3      	b.n	800b238 <__d2b+0x60>
 800b270:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b274:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b278:	f8c9 0000 	str.w	r0, [r9]
 800b27c:	6918      	ldr	r0, [r3, #16]
 800b27e:	f7ff fd2b 	bl	800acd8 <__hi0bits>
 800b282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b286:	e7df      	b.n	800b248 <__d2b+0x70>
 800b288:	08024583 	.word	0x08024583
 800b28c:	08024594 	.word	0x08024594

0800b290 <_calloc_r>:
 800b290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b292:	fba1 2402 	umull	r2, r4, r1, r2
 800b296:	b94c      	cbnz	r4, 800b2ac <_calloc_r+0x1c>
 800b298:	4611      	mov	r1, r2
 800b29a:	9201      	str	r2, [sp, #4]
 800b29c:	f000 f87a 	bl	800b394 <_malloc_r>
 800b2a0:	9a01      	ldr	r2, [sp, #4]
 800b2a2:	4605      	mov	r5, r0
 800b2a4:	b930      	cbnz	r0, 800b2b4 <_calloc_r+0x24>
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	b003      	add	sp, #12
 800b2aa:	bd30      	pop	{r4, r5, pc}
 800b2ac:	220c      	movs	r2, #12
 800b2ae:	6002      	str	r2, [r0, #0]
 800b2b0:	2500      	movs	r5, #0
 800b2b2:	e7f8      	b.n	800b2a6 <_calloc_r+0x16>
 800b2b4:	4621      	mov	r1, r4
 800b2b6:	f7fe f92b 	bl	8009510 <memset>
 800b2ba:	e7f4      	b.n	800b2a6 <_calloc_r+0x16>

0800b2bc <_free_r>:
 800b2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2be:	2900      	cmp	r1, #0
 800b2c0:	d044      	beq.n	800b34c <_free_r+0x90>
 800b2c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c6:	9001      	str	r0, [sp, #4]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f1a1 0404 	sub.w	r4, r1, #4
 800b2ce:	bfb8      	it	lt
 800b2d0:	18e4      	addlt	r4, r4, r3
 800b2d2:	f000 fa9b 	bl	800b80c <__malloc_lock>
 800b2d6:	4a1e      	ldr	r2, [pc, #120]	; (800b350 <_free_r+0x94>)
 800b2d8:	9801      	ldr	r0, [sp, #4]
 800b2da:	6813      	ldr	r3, [r2, #0]
 800b2dc:	b933      	cbnz	r3, 800b2ec <_free_r+0x30>
 800b2de:	6063      	str	r3, [r4, #4]
 800b2e0:	6014      	str	r4, [r2, #0]
 800b2e2:	b003      	add	sp, #12
 800b2e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2e8:	f000 ba96 	b.w	800b818 <__malloc_unlock>
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	d908      	bls.n	800b302 <_free_r+0x46>
 800b2f0:	6825      	ldr	r5, [r4, #0]
 800b2f2:	1961      	adds	r1, r4, r5
 800b2f4:	428b      	cmp	r3, r1
 800b2f6:	bf01      	itttt	eq
 800b2f8:	6819      	ldreq	r1, [r3, #0]
 800b2fa:	685b      	ldreq	r3, [r3, #4]
 800b2fc:	1949      	addeq	r1, r1, r5
 800b2fe:	6021      	streq	r1, [r4, #0]
 800b300:	e7ed      	b.n	800b2de <_free_r+0x22>
 800b302:	461a      	mov	r2, r3
 800b304:	685b      	ldr	r3, [r3, #4]
 800b306:	b10b      	cbz	r3, 800b30c <_free_r+0x50>
 800b308:	42a3      	cmp	r3, r4
 800b30a:	d9fa      	bls.n	800b302 <_free_r+0x46>
 800b30c:	6811      	ldr	r1, [r2, #0]
 800b30e:	1855      	adds	r5, r2, r1
 800b310:	42a5      	cmp	r5, r4
 800b312:	d10b      	bne.n	800b32c <_free_r+0x70>
 800b314:	6824      	ldr	r4, [r4, #0]
 800b316:	4421      	add	r1, r4
 800b318:	1854      	adds	r4, r2, r1
 800b31a:	42a3      	cmp	r3, r4
 800b31c:	6011      	str	r1, [r2, #0]
 800b31e:	d1e0      	bne.n	800b2e2 <_free_r+0x26>
 800b320:	681c      	ldr	r4, [r3, #0]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	6053      	str	r3, [r2, #4]
 800b326:	4421      	add	r1, r4
 800b328:	6011      	str	r1, [r2, #0]
 800b32a:	e7da      	b.n	800b2e2 <_free_r+0x26>
 800b32c:	d902      	bls.n	800b334 <_free_r+0x78>
 800b32e:	230c      	movs	r3, #12
 800b330:	6003      	str	r3, [r0, #0]
 800b332:	e7d6      	b.n	800b2e2 <_free_r+0x26>
 800b334:	6825      	ldr	r5, [r4, #0]
 800b336:	1961      	adds	r1, r4, r5
 800b338:	428b      	cmp	r3, r1
 800b33a:	bf04      	itt	eq
 800b33c:	6819      	ldreq	r1, [r3, #0]
 800b33e:	685b      	ldreq	r3, [r3, #4]
 800b340:	6063      	str	r3, [r4, #4]
 800b342:	bf04      	itt	eq
 800b344:	1949      	addeq	r1, r1, r5
 800b346:	6021      	streq	r1, [r4, #0]
 800b348:	6054      	str	r4, [r2, #4]
 800b34a:	e7ca      	b.n	800b2e2 <_free_r+0x26>
 800b34c:	b003      	add	sp, #12
 800b34e:	bd30      	pop	{r4, r5, pc}
 800b350:	200009a8 	.word	0x200009a8

0800b354 <sbrk_aligned>:
 800b354:	b570      	push	{r4, r5, r6, lr}
 800b356:	4e0e      	ldr	r6, [pc, #56]	; (800b390 <sbrk_aligned+0x3c>)
 800b358:	460c      	mov	r4, r1
 800b35a:	6831      	ldr	r1, [r6, #0]
 800b35c:	4605      	mov	r5, r0
 800b35e:	b911      	cbnz	r1, 800b366 <sbrk_aligned+0x12>
 800b360:	f000 f9e8 	bl	800b734 <_sbrk_r>
 800b364:	6030      	str	r0, [r6, #0]
 800b366:	4621      	mov	r1, r4
 800b368:	4628      	mov	r0, r5
 800b36a:	f000 f9e3 	bl	800b734 <_sbrk_r>
 800b36e:	1c43      	adds	r3, r0, #1
 800b370:	d00a      	beq.n	800b388 <sbrk_aligned+0x34>
 800b372:	1cc4      	adds	r4, r0, #3
 800b374:	f024 0403 	bic.w	r4, r4, #3
 800b378:	42a0      	cmp	r0, r4
 800b37a:	d007      	beq.n	800b38c <sbrk_aligned+0x38>
 800b37c:	1a21      	subs	r1, r4, r0
 800b37e:	4628      	mov	r0, r5
 800b380:	f000 f9d8 	bl	800b734 <_sbrk_r>
 800b384:	3001      	adds	r0, #1
 800b386:	d101      	bne.n	800b38c <sbrk_aligned+0x38>
 800b388:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b38c:	4620      	mov	r0, r4
 800b38e:	bd70      	pop	{r4, r5, r6, pc}
 800b390:	200009ac 	.word	0x200009ac

0800b394 <_malloc_r>:
 800b394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b398:	1ccd      	adds	r5, r1, #3
 800b39a:	f025 0503 	bic.w	r5, r5, #3
 800b39e:	3508      	adds	r5, #8
 800b3a0:	2d0c      	cmp	r5, #12
 800b3a2:	bf38      	it	cc
 800b3a4:	250c      	movcc	r5, #12
 800b3a6:	2d00      	cmp	r5, #0
 800b3a8:	4607      	mov	r7, r0
 800b3aa:	db01      	blt.n	800b3b0 <_malloc_r+0x1c>
 800b3ac:	42a9      	cmp	r1, r5
 800b3ae:	d905      	bls.n	800b3bc <_malloc_r+0x28>
 800b3b0:	230c      	movs	r3, #12
 800b3b2:	603b      	str	r3, [r7, #0]
 800b3b4:	2600      	movs	r6, #0
 800b3b6:	4630      	mov	r0, r6
 800b3b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3bc:	4e2e      	ldr	r6, [pc, #184]	; (800b478 <_malloc_r+0xe4>)
 800b3be:	f000 fa25 	bl	800b80c <__malloc_lock>
 800b3c2:	6833      	ldr	r3, [r6, #0]
 800b3c4:	461c      	mov	r4, r3
 800b3c6:	bb34      	cbnz	r4, 800b416 <_malloc_r+0x82>
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	f7ff ffc2 	bl	800b354 <sbrk_aligned>
 800b3d0:	1c43      	adds	r3, r0, #1
 800b3d2:	4604      	mov	r4, r0
 800b3d4:	d14d      	bne.n	800b472 <_malloc_r+0xde>
 800b3d6:	6834      	ldr	r4, [r6, #0]
 800b3d8:	4626      	mov	r6, r4
 800b3da:	2e00      	cmp	r6, #0
 800b3dc:	d140      	bne.n	800b460 <_malloc_r+0xcc>
 800b3de:	6823      	ldr	r3, [r4, #0]
 800b3e0:	4631      	mov	r1, r6
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	eb04 0803 	add.w	r8, r4, r3
 800b3e8:	f000 f9a4 	bl	800b734 <_sbrk_r>
 800b3ec:	4580      	cmp	r8, r0
 800b3ee:	d13a      	bne.n	800b466 <_malloc_r+0xd2>
 800b3f0:	6821      	ldr	r1, [r4, #0]
 800b3f2:	3503      	adds	r5, #3
 800b3f4:	1a6d      	subs	r5, r5, r1
 800b3f6:	f025 0503 	bic.w	r5, r5, #3
 800b3fa:	3508      	adds	r5, #8
 800b3fc:	2d0c      	cmp	r5, #12
 800b3fe:	bf38      	it	cc
 800b400:	250c      	movcc	r5, #12
 800b402:	4629      	mov	r1, r5
 800b404:	4638      	mov	r0, r7
 800b406:	f7ff ffa5 	bl	800b354 <sbrk_aligned>
 800b40a:	3001      	adds	r0, #1
 800b40c:	d02b      	beq.n	800b466 <_malloc_r+0xd2>
 800b40e:	6823      	ldr	r3, [r4, #0]
 800b410:	442b      	add	r3, r5
 800b412:	6023      	str	r3, [r4, #0]
 800b414:	e00e      	b.n	800b434 <_malloc_r+0xa0>
 800b416:	6822      	ldr	r2, [r4, #0]
 800b418:	1b52      	subs	r2, r2, r5
 800b41a:	d41e      	bmi.n	800b45a <_malloc_r+0xc6>
 800b41c:	2a0b      	cmp	r2, #11
 800b41e:	d916      	bls.n	800b44e <_malloc_r+0xba>
 800b420:	1961      	adds	r1, r4, r5
 800b422:	42a3      	cmp	r3, r4
 800b424:	6025      	str	r5, [r4, #0]
 800b426:	bf18      	it	ne
 800b428:	6059      	strne	r1, [r3, #4]
 800b42a:	6863      	ldr	r3, [r4, #4]
 800b42c:	bf08      	it	eq
 800b42e:	6031      	streq	r1, [r6, #0]
 800b430:	5162      	str	r2, [r4, r5]
 800b432:	604b      	str	r3, [r1, #4]
 800b434:	4638      	mov	r0, r7
 800b436:	f104 060b 	add.w	r6, r4, #11
 800b43a:	f000 f9ed 	bl	800b818 <__malloc_unlock>
 800b43e:	f026 0607 	bic.w	r6, r6, #7
 800b442:	1d23      	adds	r3, r4, #4
 800b444:	1af2      	subs	r2, r6, r3
 800b446:	d0b6      	beq.n	800b3b6 <_malloc_r+0x22>
 800b448:	1b9b      	subs	r3, r3, r6
 800b44a:	50a3      	str	r3, [r4, r2]
 800b44c:	e7b3      	b.n	800b3b6 <_malloc_r+0x22>
 800b44e:	6862      	ldr	r2, [r4, #4]
 800b450:	42a3      	cmp	r3, r4
 800b452:	bf0c      	ite	eq
 800b454:	6032      	streq	r2, [r6, #0]
 800b456:	605a      	strne	r2, [r3, #4]
 800b458:	e7ec      	b.n	800b434 <_malloc_r+0xa0>
 800b45a:	4623      	mov	r3, r4
 800b45c:	6864      	ldr	r4, [r4, #4]
 800b45e:	e7b2      	b.n	800b3c6 <_malloc_r+0x32>
 800b460:	4634      	mov	r4, r6
 800b462:	6876      	ldr	r6, [r6, #4]
 800b464:	e7b9      	b.n	800b3da <_malloc_r+0x46>
 800b466:	230c      	movs	r3, #12
 800b468:	603b      	str	r3, [r7, #0]
 800b46a:	4638      	mov	r0, r7
 800b46c:	f000 f9d4 	bl	800b818 <__malloc_unlock>
 800b470:	e7a1      	b.n	800b3b6 <_malloc_r+0x22>
 800b472:	6025      	str	r5, [r4, #0]
 800b474:	e7de      	b.n	800b434 <_malloc_r+0xa0>
 800b476:	bf00      	nop
 800b478:	200009a8 	.word	0x200009a8

0800b47c <__ssputs_r>:
 800b47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b480:	688e      	ldr	r6, [r1, #8]
 800b482:	429e      	cmp	r6, r3
 800b484:	4682      	mov	sl, r0
 800b486:	460c      	mov	r4, r1
 800b488:	4690      	mov	r8, r2
 800b48a:	461f      	mov	r7, r3
 800b48c:	d838      	bhi.n	800b500 <__ssputs_r+0x84>
 800b48e:	898a      	ldrh	r2, [r1, #12]
 800b490:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b494:	d032      	beq.n	800b4fc <__ssputs_r+0x80>
 800b496:	6825      	ldr	r5, [r4, #0]
 800b498:	6909      	ldr	r1, [r1, #16]
 800b49a:	eba5 0901 	sub.w	r9, r5, r1
 800b49e:	6965      	ldr	r5, [r4, #20]
 800b4a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	444b      	add	r3, r9
 800b4ac:	106d      	asrs	r5, r5, #1
 800b4ae:	429d      	cmp	r5, r3
 800b4b0:	bf38      	it	cc
 800b4b2:	461d      	movcc	r5, r3
 800b4b4:	0553      	lsls	r3, r2, #21
 800b4b6:	d531      	bpl.n	800b51c <__ssputs_r+0xa0>
 800b4b8:	4629      	mov	r1, r5
 800b4ba:	f7ff ff6b 	bl	800b394 <_malloc_r>
 800b4be:	4606      	mov	r6, r0
 800b4c0:	b950      	cbnz	r0, 800b4d8 <__ssputs_r+0x5c>
 800b4c2:	230c      	movs	r3, #12
 800b4c4:	f8ca 3000 	str.w	r3, [sl]
 800b4c8:	89a3      	ldrh	r3, [r4, #12]
 800b4ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4ce:	81a3      	strh	r3, [r4, #12]
 800b4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d8:	6921      	ldr	r1, [r4, #16]
 800b4da:	464a      	mov	r2, r9
 800b4dc:	f7ff fb46 	bl	800ab6c <memcpy>
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ea:	81a3      	strh	r3, [r4, #12]
 800b4ec:	6126      	str	r6, [r4, #16]
 800b4ee:	6165      	str	r5, [r4, #20]
 800b4f0:	444e      	add	r6, r9
 800b4f2:	eba5 0509 	sub.w	r5, r5, r9
 800b4f6:	6026      	str	r6, [r4, #0]
 800b4f8:	60a5      	str	r5, [r4, #8]
 800b4fa:	463e      	mov	r6, r7
 800b4fc:	42be      	cmp	r6, r7
 800b4fe:	d900      	bls.n	800b502 <__ssputs_r+0x86>
 800b500:	463e      	mov	r6, r7
 800b502:	6820      	ldr	r0, [r4, #0]
 800b504:	4632      	mov	r2, r6
 800b506:	4641      	mov	r1, r8
 800b508:	f000 f966 	bl	800b7d8 <memmove>
 800b50c:	68a3      	ldr	r3, [r4, #8]
 800b50e:	1b9b      	subs	r3, r3, r6
 800b510:	60a3      	str	r3, [r4, #8]
 800b512:	6823      	ldr	r3, [r4, #0]
 800b514:	4433      	add	r3, r6
 800b516:	6023      	str	r3, [r4, #0]
 800b518:	2000      	movs	r0, #0
 800b51a:	e7db      	b.n	800b4d4 <__ssputs_r+0x58>
 800b51c:	462a      	mov	r2, r5
 800b51e:	f000 f981 	bl	800b824 <_realloc_r>
 800b522:	4606      	mov	r6, r0
 800b524:	2800      	cmp	r0, #0
 800b526:	d1e1      	bne.n	800b4ec <__ssputs_r+0x70>
 800b528:	6921      	ldr	r1, [r4, #16]
 800b52a:	4650      	mov	r0, sl
 800b52c:	f7ff fec6 	bl	800b2bc <_free_r>
 800b530:	e7c7      	b.n	800b4c2 <__ssputs_r+0x46>
	...

0800b534 <_svfiprintf_r>:
 800b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b538:	4698      	mov	r8, r3
 800b53a:	898b      	ldrh	r3, [r1, #12]
 800b53c:	061b      	lsls	r3, r3, #24
 800b53e:	b09d      	sub	sp, #116	; 0x74
 800b540:	4607      	mov	r7, r0
 800b542:	460d      	mov	r5, r1
 800b544:	4614      	mov	r4, r2
 800b546:	d50e      	bpl.n	800b566 <_svfiprintf_r+0x32>
 800b548:	690b      	ldr	r3, [r1, #16]
 800b54a:	b963      	cbnz	r3, 800b566 <_svfiprintf_r+0x32>
 800b54c:	2140      	movs	r1, #64	; 0x40
 800b54e:	f7ff ff21 	bl	800b394 <_malloc_r>
 800b552:	6028      	str	r0, [r5, #0]
 800b554:	6128      	str	r0, [r5, #16]
 800b556:	b920      	cbnz	r0, 800b562 <_svfiprintf_r+0x2e>
 800b558:	230c      	movs	r3, #12
 800b55a:	603b      	str	r3, [r7, #0]
 800b55c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b560:	e0d1      	b.n	800b706 <_svfiprintf_r+0x1d2>
 800b562:	2340      	movs	r3, #64	; 0x40
 800b564:	616b      	str	r3, [r5, #20]
 800b566:	2300      	movs	r3, #0
 800b568:	9309      	str	r3, [sp, #36]	; 0x24
 800b56a:	2320      	movs	r3, #32
 800b56c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b570:	f8cd 800c 	str.w	r8, [sp, #12]
 800b574:	2330      	movs	r3, #48	; 0x30
 800b576:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b720 <_svfiprintf_r+0x1ec>
 800b57a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b57e:	f04f 0901 	mov.w	r9, #1
 800b582:	4623      	mov	r3, r4
 800b584:	469a      	mov	sl, r3
 800b586:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b58a:	b10a      	cbz	r2, 800b590 <_svfiprintf_r+0x5c>
 800b58c:	2a25      	cmp	r2, #37	; 0x25
 800b58e:	d1f9      	bne.n	800b584 <_svfiprintf_r+0x50>
 800b590:	ebba 0b04 	subs.w	fp, sl, r4
 800b594:	d00b      	beq.n	800b5ae <_svfiprintf_r+0x7a>
 800b596:	465b      	mov	r3, fp
 800b598:	4622      	mov	r2, r4
 800b59a:	4629      	mov	r1, r5
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7ff ff6d 	bl	800b47c <__ssputs_r>
 800b5a2:	3001      	adds	r0, #1
 800b5a4:	f000 80aa 	beq.w	800b6fc <_svfiprintf_r+0x1c8>
 800b5a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5aa:	445a      	add	r2, fp
 800b5ac:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ae:	f89a 3000 	ldrb.w	r3, [sl]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f000 80a2 	beq.w	800b6fc <_svfiprintf_r+0x1c8>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b5be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5c2:	f10a 0a01 	add.w	sl, sl, #1
 800b5c6:	9304      	str	r3, [sp, #16]
 800b5c8:	9307      	str	r3, [sp, #28]
 800b5ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b5d0:	4654      	mov	r4, sl
 800b5d2:	2205      	movs	r2, #5
 800b5d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5d8:	4851      	ldr	r0, [pc, #324]	; (800b720 <_svfiprintf_r+0x1ec>)
 800b5da:	f7f4 fe71 	bl	80002c0 <memchr>
 800b5de:	9a04      	ldr	r2, [sp, #16]
 800b5e0:	b9d8      	cbnz	r0, 800b61a <_svfiprintf_r+0xe6>
 800b5e2:	06d0      	lsls	r0, r2, #27
 800b5e4:	bf44      	itt	mi
 800b5e6:	2320      	movmi	r3, #32
 800b5e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ec:	0711      	lsls	r1, r2, #28
 800b5ee:	bf44      	itt	mi
 800b5f0:	232b      	movmi	r3, #43	; 0x2b
 800b5f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5f6:	f89a 3000 	ldrb.w	r3, [sl]
 800b5fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b5fc:	d015      	beq.n	800b62a <_svfiprintf_r+0xf6>
 800b5fe:	9a07      	ldr	r2, [sp, #28]
 800b600:	4654      	mov	r4, sl
 800b602:	2000      	movs	r0, #0
 800b604:	f04f 0c0a 	mov.w	ip, #10
 800b608:	4621      	mov	r1, r4
 800b60a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b60e:	3b30      	subs	r3, #48	; 0x30
 800b610:	2b09      	cmp	r3, #9
 800b612:	d94e      	bls.n	800b6b2 <_svfiprintf_r+0x17e>
 800b614:	b1b0      	cbz	r0, 800b644 <_svfiprintf_r+0x110>
 800b616:	9207      	str	r2, [sp, #28]
 800b618:	e014      	b.n	800b644 <_svfiprintf_r+0x110>
 800b61a:	eba0 0308 	sub.w	r3, r0, r8
 800b61e:	fa09 f303 	lsl.w	r3, r9, r3
 800b622:	4313      	orrs	r3, r2
 800b624:	9304      	str	r3, [sp, #16]
 800b626:	46a2      	mov	sl, r4
 800b628:	e7d2      	b.n	800b5d0 <_svfiprintf_r+0x9c>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	1d19      	adds	r1, r3, #4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	9103      	str	r1, [sp, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	bfbb      	ittet	lt
 800b636:	425b      	neglt	r3, r3
 800b638:	f042 0202 	orrlt.w	r2, r2, #2
 800b63c:	9307      	strge	r3, [sp, #28]
 800b63e:	9307      	strlt	r3, [sp, #28]
 800b640:	bfb8      	it	lt
 800b642:	9204      	strlt	r2, [sp, #16]
 800b644:	7823      	ldrb	r3, [r4, #0]
 800b646:	2b2e      	cmp	r3, #46	; 0x2e
 800b648:	d10c      	bne.n	800b664 <_svfiprintf_r+0x130>
 800b64a:	7863      	ldrb	r3, [r4, #1]
 800b64c:	2b2a      	cmp	r3, #42	; 0x2a
 800b64e:	d135      	bne.n	800b6bc <_svfiprintf_r+0x188>
 800b650:	9b03      	ldr	r3, [sp, #12]
 800b652:	1d1a      	adds	r2, r3, #4
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	9203      	str	r2, [sp, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	bfb8      	it	lt
 800b65c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b660:	3402      	adds	r4, #2
 800b662:	9305      	str	r3, [sp, #20]
 800b664:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b730 <_svfiprintf_r+0x1fc>
 800b668:	7821      	ldrb	r1, [r4, #0]
 800b66a:	2203      	movs	r2, #3
 800b66c:	4650      	mov	r0, sl
 800b66e:	f7f4 fe27 	bl	80002c0 <memchr>
 800b672:	b140      	cbz	r0, 800b686 <_svfiprintf_r+0x152>
 800b674:	2340      	movs	r3, #64	; 0x40
 800b676:	eba0 000a 	sub.w	r0, r0, sl
 800b67a:	fa03 f000 	lsl.w	r0, r3, r0
 800b67e:	9b04      	ldr	r3, [sp, #16]
 800b680:	4303      	orrs	r3, r0
 800b682:	3401      	adds	r4, #1
 800b684:	9304      	str	r3, [sp, #16]
 800b686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68a:	4826      	ldr	r0, [pc, #152]	; (800b724 <_svfiprintf_r+0x1f0>)
 800b68c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b690:	2206      	movs	r2, #6
 800b692:	f7f4 fe15 	bl	80002c0 <memchr>
 800b696:	2800      	cmp	r0, #0
 800b698:	d038      	beq.n	800b70c <_svfiprintf_r+0x1d8>
 800b69a:	4b23      	ldr	r3, [pc, #140]	; (800b728 <_svfiprintf_r+0x1f4>)
 800b69c:	bb1b      	cbnz	r3, 800b6e6 <_svfiprintf_r+0x1b2>
 800b69e:	9b03      	ldr	r3, [sp, #12]
 800b6a0:	3307      	adds	r3, #7
 800b6a2:	f023 0307 	bic.w	r3, r3, #7
 800b6a6:	3308      	adds	r3, #8
 800b6a8:	9303      	str	r3, [sp, #12]
 800b6aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6ac:	4433      	add	r3, r6
 800b6ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b0:	e767      	b.n	800b582 <_svfiprintf_r+0x4e>
 800b6b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6b6:	460c      	mov	r4, r1
 800b6b8:	2001      	movs	r0, #1
 800b6ba:	e7a5      	b.n	800b608 <_svfiprintf_r+0xd4>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	3401      	adds	r4, #1
 800b6c0:	9305      	str	r3, [sp, #20]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	f04f 0c0a 	mov.w	ip, #10
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ce:	3a30      	subs	r2, #48	; 0x30
 800b6d0:	2a09      	cmp	r2, #9
 800b6d2:	d903      	bls.n	800b6dc <_svfiprintf_r+0x1a8>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d0c5      	beq.n	800b664 <_svfiprintf_r+0x130>
 800b6d8:	9105      	str	r1, [sp, #20]
 800b6da:	e7c3      	b.n	800b664 <_svfiprintf_r+0x130>
 800b6dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e7f0      	b.n	800b6c8 <_svfiprintf_r+0x194>
 800b6e6:	ab03      	add	r3, sp, #12
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	462a      	mov	r2, r5
 800b6ec:	4b0f      	ldr	r3, [pc, #60]	; (800b72c <_svfiprintf_r+0x1f8>)
 800b6ee:	a904      	add	r1, sp, #16
 800b6f0:	4638      	mov	r0, r7
 800b6f2:	f7fd ffb5 	bl	8009660 <_printf_float>
 800b6f6:	1c42      	adds	r2, r0, #1
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	d1d6      	bne.n	800b6aa <_svfiprintf_r+0x176>
 800b6fc:	89ab      	ldrh	r3, [r5, #12]
 800b6fe:	065b      	lsls	r3, r3, #25
 800b700:	f53f af2c 	bmi.w	800b55c <_svfiprintf_r+0x28>
 800b704:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b706:	b01d      	add	sp, #116	; 0x74
 800b708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b70c:	ab03      	add	r3, sp, #12
 800b70e:	9300      	str	r3, [sp, #0]
 800b710:	462a      	mov	r2, r5
 800b712:	4b06      	ldr	r3, [pc, #24]	; (800b72c <_svfiprintf_r+0x1f8>)
 800b714:	a904      	add	r1, sp, #16
 800b716:	4638      	mov	r0, r7
 800b718:	f7fe fa46 	bl	8009ba8 <_printf_i>
 800b71c:	e7eb      	b.n	800b6f6 <_svfiprintf_r+0x1c2>
 800b71e:	bf00      	nop
 800b720:	080246ec 	.word	0x080246ec
 800b724:	080246f6 	.word	0x080246f6
 800b728:	08009661 	.word	0x08009661
 800b72c:	0800b47d 	.word	0x0800b47d
 800b730:	080246f2 	.word	0x080246f2

0800b734 <_sbrk_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4d06      	ldr	r5, [pc, #24]	; (800b750 <_sbrk_r+0x1c>)
 800b738:	2300      	movs	r3, #0
 800b73a:	4604      	mov	r4, r0
 800b73c:	4608      	mov	r0, r1
 800b73e:	602b      	str	r3, [r5, #0]
 800b740:	f000 fe6a 	bl	800c418 <_sbrk>
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	d102      	bne.n	800b74e <_sbrk_r+0x1a>
 800b748:	682b      	ldr	r3, [r5, #0]
 800b74a:	b103      	cbz	r3, 800b74e <_sbrk_r+0x1a>
 800b74c:	6023      	str	r3, [r4, #0]
 800b74e:	bd38      	pop	{r3, r4, r5, pc}
 800b750:	200009b0 	.word	0x200009b0

0800b754 <__assert_func>:
 800b754:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b756:	4614      	mov	r4, r2
 800b758:	461a      	mov	r2, r3
 800b75a:	4b09      	ldr	r3, [pc, #36]	; (800b780 <__assert_func+0x2c>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4605      	mov	r5, r0
 800b760:	68d8      	ldr	r0, [r3, #12]
 800b762:	b14c      	cbz	r4, 800b778 <__assert_func+0x24>
 800b764:	4b07      	ldr	r3, [pc, #28]	; (800b784 <__assert_func+0x30>)
 800b766:	9100      	str	r1, [sp, #0]
 800b768:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b76c:	4906      	ldr	r1, [pc, #24]	; (800b788 <__assert_func+0x34>)
 800b76e:	462b      	mov	r3, r5
 800b770:	f000 f80e 	bl	800b790 <fiprintf>
 800b774:	f000 faac 	bl	800bcd0 <abort>
 800b778:	4b04      	ldr	r3, [pc, #16]	; (800b78c <__assert_func+0x38>)
 800b77a:	461c      	mov	r4, r3
 800b77c:	e7f3      	b.n	800b766 <__assert_func+0x12>
 800b77e:	bf00      	nop
 800b780:	200002cc 	.word	0x200002cc
 800b784:	080246fd 	.word	0x080246fd
 800b788:	0802470a 	.word	0x0802470a
 800b78c:	08024738 	.word	0x08024738

0800b790 <fiprintf>:
 800b790:	b40e      	push	{r1, r2, r3}
 800b792:	b503      	push	{r0, r1, lr}
 800b794:	4601      	mov	r1, r0
 800b796:	ab03      	add	r3, sp, #12
 800b798:	4805      	ldr	r0, [pc, #20]	; (800b7b0 <fiprintf+0x20>)
 800b79a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b79e:	6800      	ldr	r0, [r0, #0]
 800b7a0:	9301      	str	r3, [sp, #4]
 800b7a2:	f000 f897 	bl	800b8d4 <_vfiprintf_r>
 800b7a6:	b002      	add	sp, #8
 800b7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7ac:	b003      	add	sp, #12
 800b7ae:	4770      	bx	lr
 800b7b0:	200002cc 	.word	0x200002cc

0800b7b4 <__ascii_mbtowc>:
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	b901      	cbnz	r1, 800b7ba <__ascii_mbtowc+0x6>
 800b7b8:	a901      	add	r1, sp, #4
 800b7ba:	b142      	cbz	r2, 800b7ce <__ascii_mbtowc+0x1a>
 800b7bc:	b14b      	cbz	r3, 800b7d2 <__ascii_mbtowc+0x1e>
 800b7be:	7813      	ldrb	r3, [r2, #0]
 800b7c0:	600b      	str	r3, [r1, #0]
 800b7c2:	7812      	ldrb	r2, [r2, #0]
 800b7c4:	1e10      	subs	r0, r2, #0
 800b7c6:	bf18      	it	ne
 800b7c8:	2001      	movne	r0, #1
 800b7ca:	b002      	add	sp, #8
 800b7cc:	4770      	bx	lr
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	e7fb      	b.n	800b7ca <__ascii_mbtowc+0x16>
 800b7d2:	f06f 0001 	mvn.w	r0, #1
 800b7d6:	e7f8      	b.n	800b7ca <__ascii_mbtowc+0x16>

0800b7d8 <memmove>:
 800b7d8:	4288      	cmp	r0, r1
 800b7da:	b510      	push	{r4, lr}
 800b7dc:	eb01 0402 	add.w	r4, r1, r2
 800b7e0:	d902      	bls.n	800b7e8 <memmove+0x10>
 800b7e2:	4284      	cmp	r4, r0
 800b7e4:	4623      	mov	r3, r4
 800b7e6:	d807      	bhi.n	800b7f8 <memmove+0x20>
 800b7e8:	1e43      	subs	r3, r0, #1
 800b7ea:	42a1      	cmp	r1, r4
 800b7ec:	d008      	beq.n	800b800 <memmove+0x28>
 800b7ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7f6:	e7f8      	b.n	800b7ea <memmove+0x12>
 800b7f8:	4402      	add	r2, r0
 800b7fa:	4601      	mov	r1, r0
 800b7fc:	428a      	cmp	r2, r1
 800b7fe:	d100      	bne.n	800b802 <memmove+0x2a>
 800b800:	bd10      	pop	{r4, pc}
 800b802:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b806:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b80a:	e7f7      	b.n	800b7fc <memmove+0x24>

0800b80c <__malloc_lock>:
 800b80c:	4801      	ldr	r0, [pc, #4]	; (800b814 <__malloc_lock+0x8>)
 800b80e:	f000 bc1f 	b.w	800c050 <__retarget_lock_acquire_recursive>
 800b812:	bf00      	nop
 800b814:	200009b4 	.word	0x200009b4

0800b818 <__malloc_unlock>:
 800b818:	4801      	ldr	r0, [pc, #4]	; (800b820 <__malloc_unlock+0x8>)
 800b81a:	f000 bc1a 	b.w	800c052 <__retarget_lock_release_recursive>
 800b81e:	bf00      	nop
 800b820:	200009b4 	.word	0x200009b4

0800b824 <_realloc_r>:
 800b824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b828:	4680      	mov	r8, r0
 800b82a:	4614      	mov	r4, r2
 800b82c:	460e      	mov	r6, r1
 800b82e:	b921      	cbnz	r1, 800b83a <_realloc_r+0x16>
 800b830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b834:	4611      	mov	r1, r2
 800b836:	f7ff bdad 	b.w	800b394 <_malloc_r>
 800b83a:	b92a      	cbnz	r2, 800b848 <_realloc_r+0x24>
 800b83c:	f7ff fd3e 	bl	800b2bc <_free_r>
 800b840:	4625      	mov	r5, r4
 800b842:	4628      	mov	r0, r5
 800b844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b848:	f000 fc6a 	bl	800c120 <_malloc_usable_size_r>
 800b84c:	4284      	cmp	r4, r0
 800b84e:	4607      	mov	r7, r0
 800b850:	d802      	bhi.n	800b858 <_realloc_r+0x34>
 800b852:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b856:	d812      	bhi.n	800b87e <_realloc_r+0x5a>
 800b858:	4621      	mov	r1, r4
 800b85a:	4640      	mov	r0, r8
 800b85c:	f7ff fd9a 	bl	800b394 <_malloc_r>
 800b860:	4605      	mov	r5, r0
 800b862:	2800      	cmp	r0, #0
 800b864:	d0ed      	beq.n	800b842 <_realloc_r+0x1e>
 800b866:	42bc      	cmp	r4, r7
 800b868:	4622      	mov	r2, r4
 800b86a:	4631      	mov	r1, r6
 800b86c:	bf28      	it	cs
 800b86e:	463a      	movcs	r2, r7
 800b870:	f7ff f97c 	bl	800ab6c <memcpy>
 800b874:	4631      	mov	r1, r6
 800b876:	4640      	mov	r0, r8
 800b878:	f7ff fd20 	bl	800b2bc <_free_r>
 800b87c:	e7e1      	b.n	800b842 <_realloc_r+0x1e>
 800b87e:	4635      	mov	r5, r6
 800b880:	e7df      	b.n	800b842 <_realloc_r+0x1e>

0800b882 <__sfputc_r>:
 800b882:	6893      	ldr	r3, [r2, #8]
 800b884:	3b01      	subs	r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	b410      	push	{r4}
 800b88a:	6093      	str	r3, [r2, #8]
 800b88c:	da08      	bge.n	800b8a0 <__sfputc_r+0x1e>
 800b88e:	6994      	ldr	r4, [r2, #24]
 800b890:	42a3      	cmp	r3, r4
 800b892:	db01      	blt.n	800b898 <__sfputc_r+0x16>
 800b894:	290a      	cmp	r1, #10
 800b896:	d103      	bne.n	800b8a0 <__sfputc_r+0x1e>
 800b898:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b89c:	f000 b94a 	b.w	800bb34 <__swbuf_r>
 800b8a0:	6813      	ldr	r3, [r2, #0]
 800b8a2:	1c58      	adds	r0, r3, #1
 800b8a4:	6010      	str	r0, [r2, #0]
 800b8a6:	7019      	strb	r1, [r3, #0]
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <__sfputs_r>:
 800b8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	460f      	mov	r7, r1
 800b8b6:	4614      	mov	r4, r2
 800b8b8:	18d5      	adds	r5, r2, r3
 800b8ba:	42ac      	cmp	r4, r5
 800b8bc:	d101      	bne.n	800b8c2 <__sfputs_r+0x12>
 800b8be:	2000      	movs	r0, #0
 800b8c0:	e007      	b.n	800b8d2 <__sfputs_r+0x22>
 800b8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c6:	463a      	mov	r2, r7
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f7ff ffda 	bl	800b882 <__sfputc_r>
 800b8ce:	1c43      	adds	r3, r0, #1
 800b8d0:	d1f3      	bne.n	800b8ba <__sfputs_r+0xa>
 800b8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8d4 <_vfiprintf_r>:
 800b8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d8:	460d      	mov	r5, r1
 800b8da:	b09d      	sub	sp, #116	; 0x74
 800b8dc:	4614      	mov	r4, r2
 800b8de:	4698      	mov	r8, r3
 800b8e0:	4606      	mov	r6, r0
 800b8e2:	b118      	cbz	r0, 800b8ec <_vfiprintf_r+0x18>
 800b8e4:	6983      	ldr	r3, [r0, #24]
 800b8e6:	b90b      	cbnz	r3, 800b8ec <_vfiprintf_r+0x18>
 800b8e8:	f000 fb14 	bl	800bf14 <__sinit>
 800b8ec:	4b89      	ldr	r3, [pc, #548]	; (800bb14 <_vfiprintf_r+0x240>)
 800b8ee:	429d      	cmp	r5, r3
 800b8f0:	d11b      	bne.n	800b92a <_vfiprintf_r+0x56>
 800b8f2:	6875      	ldr	r5, [r6, #4]
 800b8f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8f6:	07d9      	lsls	r1, r3, #31
 800b8f8:	d405      	bmi.n	800b906 <_vfiprintf_r+0x32>
 800b8fa:	89ab      	ldrh	r3, [r5, #12]
 800b8fc:	059a      	lsls	r2, r3, #22
 800b8fe:	d402      	bmi.n	800b906 <_vfiprintf_r+0x32>
 800b900:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b902:	f000 fba5 	bl	800c050 <__retarget_lock_acquire_recursive>
 800b906:	89ab      	ldrh	r3, [r5, #12]
 800b908:	071b      	lsls	r3, r3, #28
 800b90a:	d501      	bpl.n	800b910 <_vfiprintf_r+0x3c>
 800b90c:	692b      	ldr	r3, [r5, #16]
 800b90e:	b9eb      	cbnz	r3, 800b94c <_vfiprintf_r+0x78>
 800b910:	4629      	mov	r1, r5
 800b912:	4630      	mov	r0, r6
 800b914:	f000 f96e 	bl	800bbf4 <__swsetup_r>
 800b918:	b1c0      	cbz	r0, 800b94c <_vfiprintf_r+0x78>
 800b91a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b91c:	07dc      	lsls	r4, r3, #31
 800b91e:	d50e      	bpl.n	800b93e <_vfiprintf_r+0x6a>
 800b920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b924:	b01d      	add	sp, #116	; 0x74
 800b926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b92a:	4b7b      	ldr	r3, [pc, #492]	; (800bb18 <_vfiprintf_r+0x244>)
 800b92c:	429d      	cmp	r5, r3
 800b92e:	d101      	bne.n	800b934 <_vfiprintf_r+0x60>
 800b930:	68b5      	ldr	r5, [r6, #8]
 800b932:	e7df      	b.n	800b8f4 <_vfiprintf_r+0x20>
 800b934:	4b79      	ldr	r3, [pc, #484]	; (800bb1c <_vfiprintf_r+0x248>)
 800b936:	429d      	cmp	r5, r3
 800b938:	bf08      	it	eq
 800b93a:	68f5      	ldreq	r5, [r6, #12]
 800b93c:	e7da      	b.n	800b8f4 <_vfiprintf_r+0x20>
 800b93e:	89ab      	ldrh	r3, [r5, #12]
 800b940:	0598      	lsls	r0, r3, #22
 800b942:	d4ed      	bmi.n	800b920 <_vfiprintf_r+0x4c>
 800b944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b946:	f000 fb84 	bl	800c052 <__retarget_lock_release_recursive>
 800b94a:	e7e9      	b.n	800b920 <_vfiprintf_r+0x4c>
 800b94c:	2300      	movs	r3, #0
 800b94e:	9309      	str	r3, [sp, #36]	; 0x24
 800b950:	2320      	movs	r3, #32
 800b952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b956:	f8cd 800c 	str.w	r8, [sp, #12]
 800b95a:	2330      	movs	r3, #48	; 0x30
 800b95c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb20 <_vfiprintf_r+0x24c>
 800b960:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b964:	f04f 0901 	mov.w	r9, #1
 800b968:	4623      	mov	r3, r4
 800b96a:	469a      	mov	sl, r3
 800b96c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b970:	b10a      	cbz	r2, 800b976 <_vfiprintf_r+0xa2>
 800b972:	2a25      	cmp	r2, #37	; 0x25
 800b974:	d1f9      	bne.n	800b96a <_vfiprintf_r+0x96>
 800b976:	ebba 0b04 	subs.w	fp, sl, r4
 800b97a:	d00b      	beq.n	800b994 <_vfiprintf_r+0xc0>
 800b97c:	465b      	mov	r3, fp
 800b97e:	4622      	mov	r2, r4
 800b980:	4629      	mov	r1, r5
 800b982:	4630      	mov	r0, r6
 800b984:	f7ff ff94 	bl	800b8b0 <__sfputs_r>
 800b988:	3001      	adds	r0, #1
 800b98a:	f000 80aa 	beq.w	800bae2 <_vfiprintf_r+0x20e>
 800b98e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b990:	445a      	add	r2, fp
 800b992:	9209      	str	r2, [sp, #36]	; 0x24
 800b994:	f89a 3000 	ldrb.w	r3, [sl]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f000 80a2 	beq.w	800bae2 <_vfiprintf_r+0x20e>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b9a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a8:	f10a 0a01 	add.w	sl, sl, #1
 800b9ac:	9304      	str	r3, [sp, #16]
 800b9ae:	9307      	str	r3, [sp, #28]
 800b9b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b9b6:	4654      	mov	r4, sl
 800b9b8:	2205      	movs	r2, #5
 800b9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9be:	4858      	ldr	r0, [pc, #352]	; (800bb20 <_vfiprintf_r+0x24c>)
 800b9c0:	f7f4 fc7e 	bl	80002c0 <memchr>
 800b9c4:	9a04      	ldr	r2, [sp, #16]
 800b9c6:	b9d8      	cbnz	r0, 800ba00 <_vfiprintf_r+0x12c>
 800b9c8:	06d1      	lsls	r1, r2, #27
 800b9ca:	bf44      	itt	mi
 800b9cc:	2320      	movmi	r3, #32
 800b9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d2:	0713      	lsls	r3, r2, #28
 800b9d4:	bf44      	itt	mi
 800b9d6:	232b      	movmi	r3, #43	; 0x2b
 800b9d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9e2:	d015      	beq.n	800ba10 <_vfiprintf_r+0x13c>
 800b9e4:	9a07      	ldr	r2, [sp, #28]
 800b9e6:	4654      	mov	r4, sl
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	f04f 0c0a 	mov.w	ip, #10
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9f4:	3b30      	subs	r3, #48	; 0x30
 800b9f6:	2b09      	cmp	r3, #9
 800b9f8:	d94e      	bls.n	800ba98 <_vfiprintf_r+0x1c4>
 800b9fa:	b1b0      	cbz	r0, 800ba2a <_vfiprintf_r+0x156>
 800b9fc:	9207      	str	r2, [sp, #28]
 800b9fe:	e014      	b.n	800ba2a <_vfiprintf_r+0x156>
 800ba00:	eba0 0308 	sub.w	r3, r0, r8
 800ba04:	fa09 f303 	lsl.w	r3, r9, r3
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	9304      	str	r3, [sp, #16]
 800ba0c:	46a2      	mov	sl, r4
 800ba0e:	e7d2      	b.n	800b9b6 <_vfiprintf_r+0xe2>
 800ba10:	9b03      	ldr	r3, [sp, #12]
 800ba12:	1d19      	adds	r1, r3, #4
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	9103      	str	r1, [sp, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	bfbb      	ittet	lt
 800ba1c:	425b      	neglt	r3, r3
 800ba1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba22:	9307      	strge	r3, [sp, #28]
 800ba24:	9307      	strlt	r3, [sp, #28]
 800ba26:	bfb8      	it	lt
 800ba28:	9204      	strlt	r2, [sp, #16]
 800ba2a:	7823      	ldrb	r3, [r4, #0]
 800ba2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba2e:	d10c      	bne.n	800ba4a <_vfiprintf_r+0x176>
 800ba30:	7863      	ldrb	r3, [r4, #1]
 800ba32:	2b2a      	cmp	r3, #42	; 0x2a
 800ba34:	d135      	bne.n	800baa2 <_vfiprintf_r+0x1ce>
 800ba36:	9b03      	ldr	r3, [sp, #12]
 800ba38:	1d1a      	adds	r2, r3, #4
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	9203      	str	r2, [sp, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	bfb8      	it	lt
 800ba42:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ba46:	3402      	adds	r4, #2
 800ba48:	9305      	str	r3, [sp, #20]
 800ba4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb30 <_vfiprintf_r+0x25c>
 800ba4e:	7821      	ldrb	r1, [r4, #0]
 800ba50:	2203      	movs	r2, #3
 800ba52:	4650      	mov	r0, sl
 800ba54:	f7f4 fc34 	bl	80002c0 <memchr>
 800ba58:	b140      	cbz	r0, 800ba6c <_vfiprintf_r+0x198>
 800ba5a:	2340      	movs	r3, #64	; 0x40
 800ba5c:	eba0 000a 	sub.w	r0, r0, sl
 800ba60:	fa03 f000 	lsl.w	r0, r3, r0
 800ba64:	9b04      	ldr	r3, [sp, #16]
 800ba66:	4303      	orrs	r3, r0
 800ba68:	3401      	adds	r4, #1
 800ba6a:	9304      	str	r3, [sp, #16]
 800ba6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba70:	482c      	ldr	r0, [pc, #176]	; (800bb24 <_vfiprintf_r+0x250>)
 800ba72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba76:	2206      	movs	r2, #6
 800ba78:	f7f4 fc22 	bl	80002c0 <memchr>
 800ba7c:	2800      	cmp	r0, #0
 800ba7e:	d03f      	beq.n	800bb00 <_vfiprintf_r+0x22c>
 800ba80:	4b29      	ldr	r3, [pc, #164]	; (800bb28 <_vfiprintf_r+0x254>)
 800ba82:	bb1b      	cbnz	r3, 800bacc <_vfiprintf_r+0x1f8>
 800ba84:	9b03      	ldr	r3, [sp, #12]
 800ba86:	3307      	adds	r3, #7
 800ba88:	f023 0307 	bic.w	r3, r3, #7
 800ba8c:	3308      	adds	r3, #8
 800ba8e:	9303      	str	r3, [sp, #12]
 800ba90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba92:	443b      	add	r3, r7
 800ba94:	9309      	str	r3, [sp, #36]	; 0x24
 800ba96:	e767      	b.n	800b968 <_vfiprintf_r+0x94>
 800ba98:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba9c:	460c      	mov	r4, r1
 800ba9e:	2001      	movs	r0, #1
 800baa0:	e7a5      	b.n	800b9ee <_vfiprintf_r+0x11a>
 800baa2:	2300      	movs	r3, #0
 800baa4:	3401      	adds	r4, #1
 800baa6:	9305      	str	r3, [sp, #20]
 800baa8:	4619      	mov	r1, r3
 800baaa:	f04f 0c0a 	mov.w	ip, #10
 800baae:	4620      	mov	r0, r4
 800bab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bab4:	3a30      	subs	r2, #48	; 0x30
 800bab6:	2a09      	cmp	r2, #9
 800bab8:	d903      	bls.n	800bac2 <_vfiprintf_r+0x1ee>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d0c5      	beq.n	800ba4a <_vfiprintf_r+0x176>
 800babe:	9105      	str	r1, [sp, #20]
 800bac0:	e7c3      	b.n	800ba4a <_vfiprintf_r+0x176>
 800bac2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bac6:	4604      	mov	r4, r0
 800bac8:	2301      	movs	r3, #1
 800baca:	e7f0      	b.n	800baae <_vfiprintf_r+0x1da>
 800bacc:	ab03      	add	r3, sp, #12
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	462a      	mov	r2, r5
 800bad2:	4b16      	ldr	r3, [pc, #88]	; (800bb2c <_vfiprintf_r+0x258>)
 800bad4:	a904      	add	r1, sp, #16
 800bad6:	4630      	mov	r0, r6
 800bad8:	f7fd fdc2 	bl	8009660 <_printf_float>
 800badc:	4607      	mov	r7, r0
 800bade:	1c78      	adds	r0, r7, #1
 800bae0:	d1d6      	bne.n	800ba90 <_vfiprintf_r+0x1bc>
 800bae2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bae4:	07d9      	lsls	r1, r3, #31
 800bae6:	d405      	bmi.n	800baf4 <_vfiprintf_r+0x220>
 800bae8:	89ab      	ldrh	r3, [r5, #12]
 800baea:	059a      	lsls	r2, r3, #22
 800baec:	d402      	bmi.n	800baf4 <_vfiprintf_r+0x220>
 800baee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baf0:	f000 faaf 	bl	800c052 <__retarget_lock_release_recursive>
 800baf4:	89ab      	ldrh	r3, [r5, #12]
 800baf6:	065b      	lsls	r3, r3, #25
 800baf8:	f53f af12 	bmi.w	800b920 <_vfiprintf_r+0x4c>
 800bafc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bafe:	e711      	b.n	800b924 <_vfiprintf_r+0x50>
 800bb00:	ab03      	add	r3, sp, #12
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	462a      	mov	r2, r5
 800bb06:	4b09      	ldr	r3, [pc, #36]	; (800bb2c <_vfiprintf_r+0x258>)
 800bb08:	a904      	add	r1, sp, #16
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f7fe f84c 	bl	8009ba8 <_printf_i>
 800bb10:	e7e4      	b.n	800badc <_vfiprintf_r+0x208>
 800bb12:	bf00      	nop
 800bb14:	08024864 	.word	0x08024864
 800bb18:	08024884 	.word	0x08024884
 800bb1c:	08024844 	.word	0x08024844
 800bb20:	080246ec 	.word	0x080246ec
 800bb24:	080246f6 	.word	0x080246f6
 800bb28:	08009661 	.word	0x08009661
 800bb2c:	0800b8b1 	.word	0x0800b8b1
 800bb30:	080246f2 	.word	0x080246f2

0800bb34 <__swbuf_r>:
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb36:	460e      	mov	r6, r1
 800bb38:	4614      	mov	r4, r2
 800bb3a:	4605      	mov	r5, r0
 800bb3c:	b118      	cbz	r0, 800bb46 <__swbuf_r+0x12>
 800bb3e:	6983      	ldr	r3, [r0, #24]
 800bb40:	b90b      	cbnz	r3, 800bb46 <__swbuf_r+0x12>
 800bb42:	f000 f9e7 	bl	800bf14 <__sinit>
 800bb46:	4b21      	ldr	r3, [pc, #132]	; (800bbcc <__swbuf_r+0x98>)
 800bb48:	429c      	cmp	r4, r3
 800bb4a:	d12b      	bne.n	800bba4 <__swbuf_r+0x70>
 800bb4c:	686c      	ldr	r4, [r5, #4]
 800bb4e:	69a3      	ldr	r3, [r4, #24]
 800bb50:	60a3      	str	r3, [r4, #8]
 800bb52:	89a3      	ldrh	r3, [r4, #12]
 800bb54:	071a      	lsls	r2, r3, #28
 800bb56:	d52f      	bpl.n	800bbb8 <__swbuf_r+0x84>
 800bb58:	6923      	ldr	r3, [r4, #16]
 800bb5a:	b36b      	cbz	r3, 800bbb8 <__swbuf_r+0x84>
 800bb5c:	6923      	ldr	r3, [r4, #16]
 800bb5e:	6820      	ldr	r0, [r4, #0]
 800bb60:	1ac0      	subs	r0, r0, r3
 800bb62:	6963      	ldr	r3, [r4, #20]
 800bb64:	b2f6      	uxtb	r6, r6
 800bb66:	4283      	cmp	r3, r0
 800bb68:	4637      	mov	r7, r6
 800bb6a:	dc04      	bgt.n	800bb76 <__swbuf_r+0x42>
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f000 f93c 	bl	800bdec <_fflush_r>
 800bb74:	bb30      	cbnz	r0, 800bbc4 <__swbuf_r+0x90>
 800bb76:	68a3      	ldr	r3, [r4, #8]
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	60a3      	str	r3, [r4, #8]
 800bb7c:	6823      	ldr	r3, [r4, #0]
 800bb7e:	1c5a      	adds	r2, r3, #1
 800bb80:	6022      	str	r2, [r4, #0]
 800bb82:	701e      	strb	r6, [r3, #0]
 800bb84:	6963      	ldr	r3, [r4, #20]
 800bb86:	3001      	adds	r0, #1
 800bb88:	4283      	cmp	r3, r0
 800bb8a:	d004      	beq.n	800bb96 <__swbuf_r+0x62>
 800bb8c:	89a3      	ldrh	r3, [r4, #12]
 800bb8e:	07db      	lsls	r3, r3, #31
 800bb90:	d506      	bpl.n	800bba0 <__swbuf_r+0x6c>
 800bb92:	2e0a      	cmp	r6, #10
 800bb94:	d104      	bne.n	800bba0 <__swbuf_r+0x6c>
 800bb96:	4621      	mov	r1, r4
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f000 f927 	bl	800bdec <_fflush_r>
 800bb9e:	b988      	cbnz	r0, 800bbc4 <__swbuf_r+0x90>
 800bba0:	4638      	mov	r0, r7
 800bba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba4:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <__swbuf_r+0x9c>)
 800bba6:	429c      	cmp	r4, r3
 800bba8:	d101      	bne.n	800bbae <__swbuf_r+0x7a>
 800bbaa:	68ac      	ldr	r4, [r5, #8]
 800bbac:	e7cf      	b.n	800bb4e <__swbuf_r+0x1a>
 800bbae:	4b09      	ldr	r3, [pc, #36]	; (800bbd4 <__swbuf_r+0xa0>)
 800bbb0:	429c      	cmp	r4, r3
 800bbb2:	bf08      	it	eq
 800bbb4:	68ec      	ldreq	r4, [r5, #12]
 800bbb6:	e7ca      	b.n	800bb4e <__swbuf_r+0x1a>
 800bbb8:	4621      	mov	r1, r4
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f000 f81a 	bl	800bbf4 <__swsetup_r>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d0cb      	beq.n	800bb5c <__swbuf_r+0x28>
 800bbc4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bbc8:	e7ea      	b.n	800bba0 <__swbuf_r+0x6c>
 800bbca:	bf00      	nop
 800bbcc:	08024864 	.word	0x08024864
 800bbd0:	08024884 	.word	0x08024884
 800bbd4:	08024844 	.word	0x08024844

0800bbd8 <__ascii_wctomb>:
 800bbd8:	b149      	cbz	r1, 800bbee <__ascii_wctomb+0x16>
 800bbda:	2aff      	cmp	r2, #255	; 0xff
 800bbdc:	bf85      	ittet	hi
 800bbde:	238a      	movhi	r3, #138	; 0x8a
 800bbe0:	6003      	strhi	r3, [r0, #0]
 800bbe2:	700a      	strbls	r2, [r1, #0]
 800bbe4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bbe8:	bf98      	it	ls
 800bbea:	2001      	movls	r0, #1
 800bbec:	4770      	bx	lr
 800bbee:	4608      	mov	r0, r1
 800bbf0:	4770      	bx	lr
	...

0800bbf4 <__swsetup_r>:
 800bbf4:	4b32      	ldr	r3, [pc, #200]	; (800bcc0 <__swsetup_r+0xcc>)
 800bbf6:	b570      	push	{r4, r5, r6, lr}
 800bbf8:	681d      	ldr	r5, [r3, #0]
 800bbfa:	4606      	mov	r6, r0
 800bbfc:	460c      	mov	r4, r1
 800bbfe:	b125      	cbz	r5, 800bc0a <__swsetup_r+0x16>
 800bc00:	69ab      	ldr	r3, [r5, #24]
 800bc02:	b913      	cbnz	r3, 800bc0a <__swsetup_r+0x16>
 800bc04:	4628      	mov	r0, r5
 800bc06:	f000 f985 	bl	800bf14 <__sinit>
 800bc0a:	4b2e      	ldr	r3, [pc, #184]	; (800bcc4 <__swsetup_r+0xd0>)
 800bc0c:	429c      	cmp	r4, r3
 800bc0e:	d10f      	bne.n	800bc30 <__swsetup_r+0x3c>
 800bc10:	686c      	ldr	r4, [r5, #4]
 800bc12:	89a3      	ldrh	r3, [r4, #12]
 800bc14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc18:	0719      	lsls	r1, r3, #28
 800bc1a:	d42c      	bmi.n	800bc76 <__swsetup_r+0x82>
 800bc1c:	06dd      	lsls	r5, r3, #27
 800bc1e:	d411      	bmi.n	800bc44 <__swsetup_r+0x50>
 800bc20:	2309      	movs	r3, #9
 800bc22:	6033      	str	r3, [r6, #0]
 800bc24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc28:	81a3      	strh	r3, [r4, #12]
 800bc2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc2e:	e03e      	b.n	800bcae <__swsetup_r+0xba>
 800bc30:	4b25      	ldr	r3, [pc, #148]	; (800bcc8 <__swsetup_r+0xd4>)
 800bc32:	429c      	cmp	r4, r3
 800bc34:	d101      	bne.n	800bc3a <__swsetup_r+0x46>
 800bc36:	68ac      	ldr	r4, [r5, #8]
 800bc38:	e7eb      	b.n	800bc12 <__swsetup_r+0x1e>
 800bc3a:	4b24      	ldr	r3, [pc, #144]	; (800bccc <__swsetup_r+0xd8>)
 800bc3c:	429c      	cmp	r4, r3
 800bc3e:	bf08      	it	eq
 800bc40:	68ec      	ldreq	r4, [r5, #12]
 800bc42:	e7e6      	b.n	800bc12 <__swsetup_r+0x1e>
 800bc44:	0758      	lsls	r0, r3, #29
 800bc46:	d512      	bpl.n	800bc6e <__swsetup_r+0x7a>
 800bc48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc4a:	b141      	cbz	r1, 800bc5e <__swsetup_r+0x6a>
 800bc4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc50:	4299      	cmp	r1, r3
 800bc52:	d002      	beq.n	800bc5a <__swsetup_r+0x66>
 800bc54:	4630      	mov	r0, r6
 800bc56:	f7ff fb31 	bl	800b2bc <_free_r>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	6363      	str	r3, [r4, #52]	; 0x34
 800bc5e:	89a3      	ldrh	r3, [r4, #12]
 800bc60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc64:	81a3      	strh	r3, [r4, #12]
 800bc66:	2300      	movs	r3, #0
 800bc68:	6063      	str	r3, [r4, #4]
 800bc6a:	6923      	ldr	r3, [r4, #16]
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	f043 0308 	orr.w	r3, r3, #8
 800bc74:	81a3      	strh	r3, [r4, #12]
 800bc76:	6923      	ldr	r3, [r4, #16]
 800bc78:	b94b      	cbnz	r3, 800bc8e <__swsetup_r+0x9a>
 800bc7a:	89a3      	ldrh	r3, [r4, #12]
 800bc7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc84:	d003      	beq.n	800bc8e <__swsetup_r+0x9a>
 800bc86:	4621      	mov	r1, r4
 800bc88:	4630      	mov	r0, r6
 800bc8a:	f000 fa09 	bl	800c0a0 <__smakebuf_r>
 800bc8e:	89a0      	ldrh	r0, [r4, #12]
 800bc90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc94:	f010 0301 	ands.w	r3, r0, #1
 800bc98:	d00a      	beq.n	800bcb0 <__swsetup_r+0xbc>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	60a3      	str	r3, [r4, #8]
 800bc9e:	6963      	ldr	r3, [r4, #20]
 800bca0:	425b      	negs	r3, r3
 800bca2:	61a3      	str	r3, [r4, #24]
 800bca4:	6923      	ldr	r3, [r4, #16]
 800bca6:	b943      	cbnz	r3, 800bcba <__swsetup_r+0xc6>
 800bca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcac:	d1ba      	bne.n	800bc24 <__swsetup_r+0x30>
 800bcae:	bd70      	pop	{r4, r5, r6, pc}
 800bcb0:	0781      	lsls	r1, r0, #30
 800bcb2:	bf58      	it	pl
 800bcb4:	6963      	ldrpl	r3, [r4, #20]
 800bcb6:	60a3      	str	r3, [r4, #8]
 800bcb8:	e7f4      	b.n	800bca4 <__swsetup_r+0xb0>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e7f7      	b.n	800bcae <__swsetup_r+0xba>
 800bcbe:	bf00      	nop
 800bcc0:	200002cc 	.word	0x200002cc
 800bcc4:	08024864 	.word	0x08024864
 800bcc8:	08024884 	.word	0x08024884
 800bccc:	08024844 	.word	0x08024844

0800bcd0 <abort>:
 800bcd0:	b508      	push	{r3, lr}
 800bcd2:	2006      	movs	r0, #6
 800bcd4:	f000 fa54 	bl	800c180 <raise>
 800bcd8:	2001      	movs	r0, #1
 800bcda:	f000 fbb3 	bl	800c444 <_exit>
	...

0800bce0 <__sflush_r>:
 800bce0:	898a      	ldrh	r2, [r1, #12]
 800bce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bce6:	4605      	mov	r5, r0
 800bce8:	0710      	lsls	r0, r2, #28
 800bcea:	460c      	mov	r4, r1
 800bcec:	d458      	bmi.n	800bda0 <__sflush_r+0xc0>
 800bcee:	684b      	ldr	r3, [r1, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	dc05      	bgt.n	800bd00 <__sflush_r+0x20>
 800bcf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	dc02      	bgt.n	800bd00 <__sflush_r+0x20>
 800bcfa:	2000      	movs	r0, #0
 800bcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd02:	2e00      	cmp	r6, #0
 800bd04:	d0f9      	beq.n	800bcfa <__sflush_r+0x1a>
 800bd06:	2300      	movs	r3, #0
 800bd08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd0c:	682f      	ldr	r7, [r5, #0]
 800bd0e:	602b      	str	r3, [r5, #0]
 800bd10:	d032      	beq.n	800bd78 <__sflush_r+0x98>
 800bd12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd14:	89a3      	ldrh	r3, [r4, #12]
 800bd16:	075a      	lsls	r2, r3, #29
 800bd18:	d505      	bpl.n	800bd26 <__sflush_r+0x46>
 800bd1a:	6863      	ldr	r3, [r4, #4]
 800bd1c:	1ac0      	subs	r0, r0, r3
 800bd1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd20:	b10b      	cbz	r3, 800bd26 <__sflush_r+0x46>
 800bd22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd24:	1ac0      	subs	r0, r0, r3
 800bd26:	2300      	movs	r3, #0
 800bd28:	4602      	mov	r2, r0
 800bd2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd2c:	6a21      	ldr	r1, [r4, #32]
 800bd2e:	4628      	mov	r0, r5
 800bd30:	47b0      	blx	r6
 800bd32:	1c43      	adds	r3, r0, #1
 800bd34:	89a3      	ldrh	r3, [r4, #12]
 800bd36:	d106      	bne.n	800bd46 <__sflush_r+0x66>
 800bd38:	6829      	ldr	r1, [r5, #0]
 800bd3a:	291d      	cmp	r1, #29
 800bd3c:	d82c      	bhi.n	800bd98 <__sflush_r+0xb8>
 800bd3e:	4a2a      	ldr	r2, [pc, #168]	; (800bde8 <__sflush_r+0x108>)
 800bd40:	40ca      	lsrs	r2, r1
 800bd42:	07d6      	lsls	r6, r2, #31
 800bd44:	d528      	bpl.n	800bd98 <__sflush_r+0xb8>
 800bd46:	2200      	movs	r2, #0
 800bd48:	6062      	str	r2, [r4, #4]
 800bd4a:	04d9      	lsls	r1, r3, #19
 800bd4c:	6922      	ldr	r2, [r4, #16]
 800bd4e:	6022      	str	r2, [r4, #0]
 800bd50:	d504      	bpl.n	800bd5c <__sflush_r+0x7c>
 800bd52:	1c42      	adds	r2, r0, #1
 800bd54:	d101      	bne.n	800bd5a <__sflush_r+0x7a>
 800bd56:	682b      	ldr	r3, [r5, #0]
 800bd58:	b903      	cbnz	r3, 800bd5c <__sflush_r+0x7c>
 800bd5a:	6560      	str	r0, [r4, #84]	; 0x54
 800bd5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd5e:	602f      	str	r7, [r5, #0]
 800bd60:	2900      	cmp	r1, #0
 800bd62:	d0ca      	beq.n	800bcfa <__sflush_r+0x1a>
 800bd64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd68:	4299      	cmp	r1, r3
 800bd6a:	d002      	beq.n	800bd72 <__sflush_r+0x92>
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	f7ff faa5 	bl	800b2bc <_free_r>
 800bd72:	2000      	movs	r0, #0
 800bd74:	6360      	str	r0, [r4, #52]	; 0x34
 800bd76:	e7c1      	b.n	800bcfc <__sflush_r+0x1c>
 800bd78:	6a21      	ldr	r1, [r4, #32]
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	47b0      	blx	r6
 800bd80:	1c41      	adds	r1, r0, #1
 800bd82:	d1c7      	bne.n	800bd14 <__sflush_r+0x34>
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d0c4      	beq.n	800bd14 <__sflush_r+0x34>
 800bd8a:	2b1d      	cmp	r3, #29
 800bd8c:	d001      	beq.n	800bd92 <__sflush_r+0xb2>
 800bd8e:	2b16      	cmp	r3, #22
 800bd90:	d101      	bne.n	800bd96 <__sflush_r+0xb6>
 800bd92:	602f      	str	r7, [r5, #0]
 800bd94:	e7b1      	b.n	800bcfa <__sflush_r+0x1a>
 800bd96:	89a3      	ldrh	r3, [r4, #12]
 800bd98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd9c:	81a3      	strh	r3, [r4, #12]
 800bd9e:	e7ad      	b.n	800bcfc <__sflush_r+0x1c>
 800bda0:	690f      	ldr	r7, [r1, #16]
 800bda2:	2f00      	cmp	r7, #0
 800bda4:	d0a9      	beq.n	800bcfa <__sflush_r+0x1a>
 800bda6:	0793      	lsls	r3, r2, #30
 800bda8:	680e      	ldr	r6, [r1, #0]
 800bdaa:	bf08      	it	eq
 800bdac:	694b      	ldreq	r3, [r1, #20]
 800bdae:	600f      	str	r7, [r1, #0]
 800bdb0:	bf18      	it	ne
 800bdb2:	2300      	movne	r3, #0
 800bdb4:	eba6 0807 	sub.w	r8, r6, r7
 800bdb8:	608b      	str	r3, [r1, #8]
 800bdba:	f1b8 0f00 	cmp.w	r8, #0
 800bdbe:	dd9c      	ble.n	800bcfa <__sflush_r+0x1a>
 800bdc0:	6a21      	ldr	r1, [r4, #32]
 800bdc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bdc4:	4643      	mov	r3, r8
 800bdc6:	463a      	mov	r2, r7
 800bdc8:	4628      	mov	r0, r5
 800bdca:	47b0      	blx	r6
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	dc06      	bgt.n	800bdde <__sflush_r+0xfe>
 800bdd0:	89a3      	ldrh	r3, [r4, #12]
 800bdd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdd6:	81a3      	strh	r3, [r4, #12]
 800bdd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bddc:	e78e      	b.n	800bcfc <__sflush_r+0x1c>
 800bdde:	4407      	add	r7, r0
 800bde0:	eba8 0800 	sub.w	r8, r8, r0
 800bde4:	e7e9      	b.n	800bdba <__sflush_r+0xda>
 800bde6:	bf00      	nop
 800bde8:	20400001 	.word	0x20400001

0800bdec <_fflush_r>:
 800bdec:	b538      	push	{r3, r4, r5, lr}
 800bdee:	690b      	ldr	r3, [r1, #16]
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	b913      	cbnz	r3, 800bdfc <_fflush_r+0x10>
 800bdf6:	2500      	movs	r5, #0
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	bd38      	pop	{r3, r4, r5, pc}
 800bdfc:	b118      	cbz	r0, 800be06 <_fflush_r+0x1a>
 800bdfe:	6983      	ldr	r3, [r0, #24]
 800be00:	b90b      	cbnz	r3, 800be06 <_fflush_r+0x1a>
 800be02:	f000 f887 	bl	800bf14 <__sinit>
 800be06:	4b14      	ldr	r3, [pc, #80]	; (800be58 <_fflush_r+0x6c>)
 800be08:	429c      	cmp	r4, r3
 800be0a:	d11b      	bne.n	800be44 <_fflush_r+0x58>
 800be0c:	686c      	ldr	r4, [r5, #4]
 800be0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d0ef      	beq.n	800bdf6 <_fflush_r+0xa>
 800be16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be18:	07d0      	lsls	r0, r2, #31
 800be1a:	d404      	bmi.n	800be26 <_fflush_r+0x3a>
 800be1c:	0599      	lsls	r1, r3, #22
 800be1e:	d402      	bmi.n	800be26 <_fflush_r+0x3a>
 800be20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be22:	f000 f915 	bl	800c050 <__retarget_lock_acquire_recursive>
 800be26:	4628      	mov	r0, r5
 800be28:	4621      	mov	r1, r4
 800be2a:	f7ff ff59 	bl	800bce0 <__sflush_r>
 800be2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be30:	07da      	lsls	r2, r3, #31
 800be32:	4605      	mov	r5, r0
 800be34:	d4e0      	bmi.n	800bdf8 <_fflush_r+0xc>
 800be36:	89a3      	ldrh	r3, [r4, #12]
 800be38:	059b      	lsls	r3, r3, #22
 800be3a:	d4dd      	bmi.n	800bdf8 <_fflush_r+0xc>
 800be3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be3e:	f000 f908 	bl	800c052 <__retarget_lock_release_recursive>
 800be42:	e7d9      	b.n	800bdf8 <_fflush_r+0xc>
 800be44:	4b05      	ldr	r3, [pc, #20]	; (800be5c <_fflush_r+0x70>)
 800be46:	429c      	cmp	r4, r3
 800be48:	d101      	bne.n	800be4e <_fflush_r+0x62>
 800be4a:	68ac      	ldr	r4, [r5, #8]
 800be4c:	e7df      	b.n	800be0e <_fflush_r+0x22>
 800be4e:	4b04      	ldr	r3, [pc, #16]	; (800be60 <_fflush_r+0x74>)
 800be50:	429c      	cmp	r4, r3
 800be52:	bf08      	it	eq
 800be54:	68ec      	ldreq	r4, [r5, #12]
 800be56:	e7da      	b.n	800be0e <_fflush_r+0x22>
 800be58:	08024864 	.word	0x08024864
 800be5c:	08024884 	.word	0x08024884
 800be60:	08024844 	.word	0x08024844

0800be64 <std>:
 800be64:	2300      	movs	r3, #0
 800be66:	b510      	push	{r4, lr}
 800be68:	4604      	mov	r4, r0
 800be6a:	e9c0 3300 	strd	r3, r3, [r0]
 800be6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be72:	6083      	str	r3, [r0, #8]
 800be74:	8181      	strh	r1, [r0, #12]
 800be76:	6643      	str	r3, [r0, #100]	; 0x64
 800be78:	81c2      	strh	r2, [r0, #14]
 800be7a:	6183      	str	r3, [r0, #24]
 800be7c:	4619      	mov	r1, r3
 800be7e:	2208      	movs	r2, #8
 800be80:	305c      	adds	r0, #92	; 0x5c
 800be82:	f7fd fb45 	bl	8009510 <memset>
 800be86:	4b05      	ldr	r3, [pc, #20]	; (800be9c <std+0x38>)
 800be88:	6263      	str	r3, [r4, #36]	; 0x24
 800be8a:	4b05      	ldr	r3, [pc, #20]	; (800bea0 <std+0x3c>)
 800be8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800be8e:	4b05      	ldr	r3, [pc, #20]	; (800bea4 <std+0x40>)
 800be90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be92:	4b05      	ldr	r3, [pc, #20]	; (800bea8 <std+0x44>)
 800be94:	6224      	str	r4, [r4, #32]
 800be96:	6323      	str	r3, [r4, #48]	; 0x30
 800be98:	bd10      	pop	{r4, pc}
 800be9a:	bf00      	nop
 800be9c:	0800c1b9 	.word	0x0800c1b9
 800bea0:	0800c1db 	.word	0x0800c1db
 800bea4:	0800c213 	.word	0x0800c213
 800bea8:	0800c237 	.word	0x0800c237

0800beac <_cleanup_r>:
 800beac:	4901      	ldr	r1, [pc, #4]	; (800beb4 <_cleanup_r+0x8>)
 800beae:	f000 b8af 	b.w	800c010 <_fwalk_reent>
 800beb2:	bf00      	nop
 800beb4:	0800bded 	.word	0x0800bded

0800beb8 <__sfmoreglue>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	2268      	movs	r2, #104	; 0x68
 800bebc:	1e4d      	subs	r5, r1, #1
 800bebe:	4355      	muls	r5, r2
 800bec0:	460e      	mov	r6, r1
 800bec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bec6:	f7ff fa65 	bl	800b394 <_malloc_r>
 800beca:	4604      	mov	r4, r0
 800becc:	b140      	cbz	r0, 800bee0 <__sfmoreglue+0x28>
 800bece:	2100      	movs	r1, #0
 800bed0:	e9c0 1600 	strd	r1, r6, [r0]
 800bed4:	300c      	adds	r0, #12
 800bed6:	60a0      	str	r0, [r4, #8]
 800bed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bedc:	f7fd fb18 	bl	8009510 <memset>
 800bee0:	4620      	mov	r0, r4
 800bee2:	bd70      	pop	{r4, r5, r6, pc}

0800bee4 <__sfp_lock_acquire>:
 800bee4:	4801      	ldr	r0, [pc, #4]	; (800beec <__sfp_lock_acquire+0x8>)
 800bee6:	f000 b8b3 	b.w	800c050 <__retarget_lock_acquire_recursive>
 800beea:	bf00      	nop
 800beec:	200009b5 	.word	0x200009b5

0800bef0 <__sfp_lock_release>:
 800bef0:	4801      	ldr	r0, [pc, #4]	; (800bef8 <__sfp_lock_release+0x8>)
 800bef2:	f000 b8ae 	b.w	800c052 <__retarget_lock_release_recursive>
 800bef6:	bf00      	nop
 800bef8:	200009b5 	.word	0x200009b5

0800befc <__sinit_lock_acquire>:
 800befc:	4801      	ldr	r0, [pc, #4]	; (800bf04 <__sinit_lock_acquire+0x8>)
 800befe:	f000 b8a7 	b.w	800c050 <__retarget_lock_acquire_recursive>
 800bf02:	bf00      	nop
 800bf04:	200009b6 	.word	0x200009b6

0800bf08 <__sinit_lock_release>:
 800bf08:	4801      	ldr	r0, [pc, #4]	; (800bf10 <__sinit_lock_release+0x8>)
 800bf0a:	f000 b8a2 	b.w	800c052 <__retarget_lock_release_recursive>
 800bf0e:	bf00      	nop
 800bf10:	200009b6 	.word	0x200009b6

0800bf14 <__sinit>:
 800bf14:	b510      	push	{r4, lr}
 800bf16:	4604      	mov	r4, r0
 800bf18:	f7ff fff0 	bl	800befc <__sinit_lock_acquire>
 800bf1c:	69a3      	ldr	r3, [r4, #24]
 800bf1e:	b11b      	cbz	r3, 800bf28 <__sinit+0x14>
 800bf20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf24:	f7ff bff0 	b.w	800bf08 <__sinit_lock_release>
 800bf28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf2c:	6523      	str	r3, [r4, #80]	; 0x50
 800bf2e:	4b13      	ldr	r3, [pc, #76]	; (800bf7c <__sinit+0x68>)
 800bf30:	4a13      	ldr	r2, [pc, #76]	; (800bf80 <__sinit+0x6c>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf36:	42a3      	cmp	r3, r4
 800bf38:	bf04      	itt	eq
 800bf3a:	2301      	moveq	r3, #1
 800bf3c:	61a3      	streq	r3, [r4, #24]
 800bf3e:	4620      	mov	r0, r4
 800bf40:	f000 f820 	bl	800bf84 <__sfp>
 800bf44:	6060      	str	r0, [r4, #4]
 800bf46:	4620      	mov	r0, r4
 800bf48:	f000 f81c 	bl	800bf84 <__sfp>
 800bf4c:	60a0      	str	r0, [r4, #8]
 800bf4e:	4620      	mov	r0, r4
 800bf50:	f000 f818 	bl	800bf84 <__sfp>
 800bf54:	2200      	movs	r2, #0
 800bf56:	60e0      	str	r0, [r4, #12]
 800bf58:	2104      	movs	r1, #4
 800bf5a:	6860      	ldr	r0, [r4, #4]
 800bf5c:	f7ff ff82 	bl	800be64 <std>
 800bf60:	68a0      	ldr	r0, [r4, #8]
 800bf62:	2201      	movs	r2, #1
 800bf64:	2109      	movs	r1, #9
 800bf66:	f7ff ff7d 	bl	800be64 <std>
 800bf6a:	68e0      	ldr	r0, [r4, #12]
 800bf6c:	2202      	movs	r2, #2
 800bf6e:	2112      	movs	r1, #18
 800bf70:	f7ff ff78 	bl	800be64 <std>
 800bf74:	2301      	movs	r3, #1
 800bf76:	61a3      	str	r3, [r4, #24]
 800bf78:	e7d2      	b.n	800bf20 <__sinit+0xc>
 800bf7a:	bf00      	nop
 800bf7c:	080244cc 	.word	0x080244cc
 800bf80:	0800bead 	.word	0x0800bead

0800bf84 <__sfp>:
 800bf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf86:	4607      	mov	r7, r0
 800bf88:	f7ff ffac 	bl	800bee4 <__sfp_lock_acquire>
 800bf8c:	4b1e      	ldr	r3, [pc, #120]	; (800c008 <__sfp+0x84>)
 800bf8e:	681e      	ldr	r6, [r3, #0]
 800bf90:	69b3      	ldr	r3, [r6, #24]
 800bf92:	b913      	cbnz	r3, 800bf9a <__sfp+0x16>
 800bf94:	4630      	mov	r0, r6
 800bf96:	f7ff ffbd 	bl	800bf14 <__sinit>
 800bf9a:	3648      	adds	r6, #72	; 0x48
 800bf9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bfa0:	3b01      	subs	r3, #1
 800bfa2:	d503      	bpl.n	800bfac <__sfp+0x28>
 800bfa4:	6833      	ldr	r3, [r6, #0]
 800bfa6:	b30b      	cbz	r3, 800bfec <__sfp+0x68>
 800bfa8:	6836      	ldr	r6, [r6, #0]
 800bfaa:	e7f7      	b.n	800bf9c <__sfp+0x18>
 800bfac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfb0:	b9d5      	cbnz	r5, 800bfe8 <__sfp+0x64>
 800bfb2:	4b16      	ldr	r3, [pc, #88]	; (800c00c <__sfp+0x88>)
 800bfb4:	60e3      	str	r3, [r4, #12]
 800bfb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfba:	6665      	str	r5, [r4, #100]	; 0x64
 800bfbc:	f000 f847 	bl	800c04e <__retarget_lock_init_recursive>
 800bfc0:	f7ff ff96 	bl	800bef0 <__sfp_lock_release>
 800bfc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfcc:	6025      	str	r5, [r4, #0]
 800bfce:	61a5      	str	r5, [r4, #24]
 800bfd0:	2208      	movs	r2, #8
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bfd8:	f7fd fa9a 	bl	8009510 <memset>
 800bfdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bfe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bfe4:	4620      	mov	r0, r4
 800bfe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfe8:	3468      	adds	r4, #104	; 0x68
 800bfea:	e7d9      	b.n	800bfa0 <__sfp+0x1c>
 800bfec:	2104      	movs	r1, #4
 800bfee:	4638      	mov	r0, r7
 800bff0:	f7ff ff62 	bl	800beb8 <__sfmoreglue>
 800bff4:	4604      	mov	r4, r0
 800bff6:	6030      	str	r0, [r6, #0]
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d1d5      	bne.n	800bfa8 <__sfp+0x24>
 800bffc:	f7ff ff78 	bl	800bef0 <__sfp_lock_release>
 800c000:	230c      	movs	r3, #12
 800c002:	603b      	str	r3, [r7, #0]
 800c004:	e7ee      	b.n	800bfe4 <__sfp+0x60>
 800c006:	bf00      	nop
 800c008:	080244cc 	.word	0x080244cc
 800c00c:	ffff0001 	.word	0xffff0001

0800c010 <_fwalk_reent>:
 800c010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c014:	4606      	mov	r6, r0
 800c016:	4688      	mov	r8, r1
 800c018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c01c:	2700      	movs	r7, #0
 800c01e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c022:	f1b9 0901 	subs.w	r9, r9, #1
 800c026:	d505      	bpl.n	800c034 <_fwalk_reent+0x24>
 800c028:	6824      	ldr	r4, [r4, #0]
 800c02a:	2c00      	cmp	r4, #0
 800c02c:	d1f7      	bne.n	800c01e <_fwalk_reent+0xe>
 800c02e:	4638      	mov	r0, r7
 800c030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c034:	89ab      	ldrh	r3, [r5, #12]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d907      	bls.n	800c04a <_fwalk_reent+0x3a>
 800c03a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c03e:	3301      	adds	r3, #1
 800c040:	d003      	beq.n	800c04a <_fwalk_reent+0x3a>
 800c042:	4629      	mov	r1, r5
 800c044:	4630      	mov	r0, r6
 800c046:	47c0      	blx	r8
 800c048:	4307      	orrs	r7, r0
 800c04a:	3568      	adds	r5, #104	; 0x68
 800c04c:	e7e9      	b.n	800c022 <_fwalk_reent+0x12>

0800c04e <__retarget_lock_init_recursive>:
 800c04e:	4770      	bx	lr

0800c050 <__retarget_lock_acquire_recursive>:
 800c050:	4770      	bx	lr

0800c052 <__retarget_lock_release_recursive>:
 800c052:	4770      	bx	lr

0800c054 <__swhatbuf_r>:
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	460e      	mov	r6, r1
 800c058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c05c:	2900      	cmp	r1, #0
 800c05e:	b096      	sub	sp, #88	; 0x58
 800c060:	4614      	mov	r4, r2
 800c062:	461d      	mov	r5, r3
 800c064:	da08      	bge.n	800c078 <__swhatbuf_r+0x24>
 800c066:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c06a:	2200      	movs	r2, #0
 800c06c:	602a      	str	r2, [r5, #0]
 800c06e:	061a      	lsls	r2, r3, #24
 800c070:	d410      	bmi.n	800c094 <__swhatbuf_r+0x40>
 800c072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c076:	e00e      	b.n	800c096 <__swhatbuf_r+0x42>
 800c078:	466a      	mov	r2, sp
 800c07a:	f000 f903 	bl	800c284 <_fstat_r>
 800c07e:	2800      	cmp	r0, #0
 800c080:	dbf1      	blt.n	800c066 <__swhatbuf_r+0x12>
 800c082:	9a01      	ldr	r2, [sp, #4]
 800c084:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c088:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c08c:	425a      	negs	r2, r3
 800c08e:	415a      	adcs	r2, r3
 800c090:	602a      	str	r2, [r5, #0]
 800c092:	e7ee      	b.n	800c072 <__swhatbuf_r+0x1e>
 800c094:	2340      	movs	r3, #64	; 0x40
 800c096:	2000      	movs	r0, #0
 800c098:	6023      	str	r3, [r4, #0]
 800c09a:	b016      	add	sp, #88	; 0x58
 800c09c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0a0 <__smakebuf_r>:
 800c0a0:	898b      	ldrh	r3, [r1, #12]
 800c0a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0a4:	079d      	lsls	r5, r3, #30
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	460c      	mov	r4, r1
 800c0aa:	d507      	bpl.n	800c0bc <__smakebuf_r+0x1c>
 800c0ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0b0:	6023      	str	r3, [r4, #0]
 800c0b2:	6123      	str	r3, [r4, #16]
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	6163      	str	r3, [r4, #20]
 800c0b8:	b002      	add	sp, #8
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}
 800c0bc:	ab01      	add	r3, sp, #4
 800c0be:	466a      	mov	r2, sp
 800c0c0:	f7ff ffc8 	bl	800c054 <__swhatbuf_r>
 800c0c4:	9900      	ldr	r1, [sp, #0]
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	f7ff f963 	bl	800b394 <_malloc_r>
 800c0ce:	b948      	cbnz	r0, 800c0e4 <__smakebuf_r+0x44>
 800c0d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0d4:	059a      	lsls	r2, r3, #22
 800c0d6:	d4ef      	bmi.n	800c0b8 <__smakebuf_r+0x18>
 800c0d8:	f023 0303 	bic.w	r3, r3, #3
 800c0dc:	f043 0302 	orr.w	r3, r3, #2
 800c0e0:	81a3      	strh	r3, [r4, #12]
 800c0e2:	e7e3      	b.n	800c0ac <__smakebuf_r+0xc>
 800c0e4:	4b0d      	ldr	r3, [pc, #52]	; (800c11c <__smakebuf_r+0x7c>)
 800c0e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	6020      	str	r0, [r4, #0]
 800c0ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	9b00      	ldr	r3, [sp, #0]
 800c0f4:	6163      	str	r3, [r4, #20]
 800c0f6:	9b01      	ldr	r3, [sp, #4]
 800c0f8:	6120      	str	r0, [r4, #16]
 800c0fa:	b15b      	cbz	r3, 800c114 <__smakebuf_r+0x74>
 800c0fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c100:	4630      	mov	r0, r6
 800c102:	f000 f8d1 	bl	800c2a8 <_isatty_r>
 800c106:	b128      	cbz	r0, 800c114 <__smakebuf_r+0x74>
 800c108:	89a3      	ldrh	r3, [r4, #12]
 800c10a:	f023 0303 	bic.w	r3, r3, #3
 800c10e:	f043 0301 	orr.w	r3, r3, #1
 800c112:	81a3      	strh	r3, [r4, #12]
 800c114:	89a0      	ldrh	r0, [r4, #12]
 800c116:	4305      	orrs	r5, r0
 800c118:	81a5      	strh	r5, [r4, #12]
 800c11a:	e7cd      	b.n	800c0b8 <__smakebuf_r+0x18>
 800c11c:	0800bead 	.word	0x0800bead

0800c120 <_malloc_usable_size_r>:
 800c120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c124:	1f18      	subs	r0, r3, #4
 800c126:	2b00      	cmp	r3, #0
 800c128:	bfbc      	itt	lt
 800c12a:	580b      	ldrlt	r3, [r1, r0]
 800c12c:	18c0      	addlt	r0, r0, r3
 800c12e:	4770      	bx	lr

0800c130 <_raise_r>:
 800c130:	291f      	cmp	r1, #31
 800c132:	b538      	push	{r3, r4, r5, lr}
 800c134:	4604      	mov	r4, r0
 800c136:	460d      	mov	r5, r1
 800c138:	d904      	bls.n	800c144 <_raise_r+0x14>
 800c13a:	2316      	movs	r3, #22
 800c13c:	6003      	str	r3, [r0, #0]
 800c13e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c146:	b112      	cbz	r2, 800c14e <_raise_r+0x1e>
 800c148:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c14c:	b94b      	cbnz	r3, 800c162 <_raise_r+0x32>
 800c14e:	4620      	mov	r0, r4
 800c150:	f000 f830 	bl	800c1b4 <_getpid_r>
 800c154:	462a      	mov	r2, r5
 800c156:	4601      	mov	r1, r0
 800c158:	4620      	mov	r0, r4
 800c15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c15e:	f000 b817 	b.w	800c190 <_kill_r>
 800c162:	2b01      	cmp	r3, #1
 800c164:	d00a      	beq.n	800c17c <_raise_r+0x4c>
 800c166:	1c59      	adds	r1, r3, #1
 800c168:	d103      	bne.n	800c172 <_raise_r+0x42>
 800c16a:	2316      	movs	r3, #22
 800c16c:	6003      	str	r3, [r0, #0]
 800c16e:	2001      	movs	r0, #1
 800c170:	e7e7      	b.n	800c142 <_raise_r+0x12>
 800c172:	2400      	movs	r4, #0
 800c174:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c178:	4628      	mov	r0, r5
 800c17a:	4798      	blx	r3
 800c17c:	2000      	movs	r0, #0
 800c17e:	e7e0      	b.n	800c142 <_raise_r+0x12>

0800c180 <raise>:
 800c180:	4b02      	ldr	r3, [pc, #8]	; (800c18c <raise+0xc>)
 800c182:	4601      	mov	r1, r0
 800c184:	6818      	ldr	r0, [r3, #0]
 800c186:	f7ff bfd3 	b.w	800c130 <_raise_r>
 800c18a:	bf00      	nop
 800c18c:	200002cc 	.word	0x200002cc

0800c190 <_kill_r>:
 800c190:	b538      	push	{r3, r4, r5, lr}
 800c192:	4d07      	ldr	r5, [pc, #28]	; (800c1b0 <_kill_r+0x20>)
 800c194:	2300      	movs	r3, #0
 800c196:	4604      	mov	r4, r0
 800c198:	4608      	mov	r0, r1
 800c19a:	4611      	mov	r1, r2
 800c19c:	602b      	str	r3, [r5, #0]
 800c19e:	f000 f923 	bl	800c3e8 <_kill>
 800c1a2:	1c43      	adds	r3, r0, #1
 800c1a4:	d102      	bne.n	800c1ac <_kill_r+0x1c>
 800c1a6:	682b      	ldr	r3, [r5, #0]
 800c1a8:	b103      	cbz	r3, 800c1ac <_kill_r+0x1c>
 800c1aa:	6023      	str	r3, [r4, #0]
 800c1ac:	bd38      	pop	{r3, r4, r5, pc}
 800c1ae:	bf00      	nop
 800c1b0:	200009b0 	.word	0x200009b0

0800c1b4 <_getpid_r>:
 800c1b4:	f000 b908 	b.w	800c3c8 <_getpid>

0800c1b8 <__sread>:
 800c1b8:	b510      	push	{r4, lr}
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c0:	f000 f894 	bl	800c2ec <_read_r>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	bfab      	itete	ge
 800c1c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1ca:	89a3      	ldrhlt	r3, [r4, #12]
 800c1cc:	181b      	addge	r3, r3, r0
 800c1ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1d2:	bfac      	ite	ge
 800c1d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1d6:	81a3      	strhlt	r3, [r4, #12]
 800c1d8:	bd10      	pop	{r4, pc}

0800c1da <__swrite>:
 800c1da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1de:	461f      	mov	r7, r3
 800c1e0:	898b      	ldrh	r3, [r1, #12]
 800c1e2:	05db      	lsls	r3, r3, #23
 800c1e4:	4605      	mov	r5, r0
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	4616      	mov	r6, r2
 800c1ea:	d505      	bpl.n	800c1f8 <__swrite+0x1e>
 800c1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f000 f868 	bl	800c2c8 <_lseek_r>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c202:	81a3      	strh	r3, [r4, #12]
 800c204:	4632      	mov	r2, r6
 800c206:	463b      	mov	r3, r7
 800c208:	4628      	mov	r0, r5
 800c20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c20e:	f000 b817 	b.w	800c240 <_write_r>

0800c212 <__sseek>:
 800c212:	b510      	push	{r4, lr}
 800c214:	460c      	mov	r4, r1
 800c216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c21a:	f000 f855 	bl	800c2c8 <_lseek_r>
 800c21e:	1c43      	adds	r3, r0, #1
 800c220:	89a3      	ldrh	r3, [r4, #12]
 800c222:	bf15      	itete	ne
 800c224:	6560      	strne	r0, [r4, #84]	; 0x54
 800c226:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c22a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c22e:	81a3      	strheq	r3, [r4, #12]
 800c230:	bf18      	it	ne
 800c232:	81a3      	strhne	r3, [r4, #12]
 800c234:	bd10      	pop	{r4, pc}

0800c236 <__sclose>:
 800c236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c23a:	f000 b813 	b.w	800c264 <_close_r>
	...

0800c240 <_write_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	4d07      	ldr	r5, [pc, #28]	; (800c260 <_write_r+0x20>)
 800c244:	4604      	mov	r4, r0
 800c246:	4608      	mov	r0, r1
 800c248:	4611      	mov	r1, r2
 800c24a:	2200      	movs	r2, #0
 800c24c:	602a      	str	r2, [r5, #0]
 800c24e:	461a      	mov	r2, r3
 800c250:	f000 f8f0 	bl	800c434 <_write>
 800c254:	1c43      	adds	r3, r0, #1
 800c256:	d102      	bne.n	800c25e <_write_r+0x1e>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	b103      	cbz	r3, 800c25e <_write_r+0x1e>
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	200009b0 	.word	0x200009b0

0800c264 <_close_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d06      	ldr	r5, [pc, #24]	; (800c280 <_close_r+0x1c>)
 800c268:	2300      	movs	r3, #0
 800c26a:	4604      	mov	r4, r0
 800c26c:	4608      	mov	r0, r1
 800c26e:	602b      	str	r3, [r5, #0]
 800c270:	f000 f89a 	bl	800c3a8 <_close>
 800c274:	1c43      	adds	r3, r0, #1
 800c276:	d102      	bne.n	800c27e <_close_r+0x1a>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	b103      	cbz	r3, 800c27e <_close_r+0x1a>
 800c27c:	6023      	str	r3, [r4, #0]
 800c27e:	bd38      	pop	{r3, r4, r5, pc}
 800c280:	200009b0 	.word	0x200009b0

0800c284 <_fstat_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d07      	ldr	r5, [pc, #28]	; (800c2a4 <_fstat_r+0x20>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	4611      	mov	r1, r2
 800c290:	602b      	str	r3, [r5, #0]
 800c292:	f000 f891 	bl	800c3b8 <_fstat>
 800c296:	1c43      	adds	r3, r0, #1
 800c298:	d102      	bne.n	800c2a0 <_fstat_r+0x1c>
 800c29a:	682b      	ldr	r3, [r5, #0]
 800c29c:	b103      	cbz	r3, 800c2a0 <_fstat_r+0x1c>
 800c29e:	6023      	str	r3, [r4, #0]
 800c2a0:	bd38      	pop	{r3, r4, r5, pc}
 800c2a2:	bf00      	nop
 800c2a4:	200009b0 	.word	0x200009b0

0800c2a8 <_isatty_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d06      	ldr	r5, [pc, #24]	; (800c2c4 <_isatty_r+0x1c>)
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	602b      	str	r3, [r5, #0]
 800c2b4:	f000 f890 	bl	800c3d8 <_isatty>
 800c2b8:	1c43      	adds	r3, r0, #1
 800c2ba:	d102      	bne.n	800c2c2 <_isatty_r+0x1a>
 800c2bc:	682b      	ldr	r3, [r5, #0]
 800c2be:	b103      	cbz	r3, 800c2c2 <_isatty_r+0x1a>
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	bd38      	pop	{r3, r4, r5, pc}
 800c2c4:	200009b0 	.word	0x200009b0

0800c2c8 <_lseek_r>:
 800c2c8:	b538      	push	{r3, r4, r5, lr}
 800c2ca:	4d07      	ldr	r5, [pc, #28]	; (800c2e8 <_lseek_r+0x20>)
 800c2cc:	4604      	mov	r4, r0
 800c2ce:	4608      	mov	r0, r1
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	602a      	str	r2, [r5, #0]
 800c2d6:	461a      	mov	r2, r3
 800c2d8:	f000 f88e 	bl	800c3f8 <_lseek>
 800c2dc:	1c43      	adds	r3, r0, #1
 800c2de:	d102      	bne.n	800c2e6 <_lseek_r+0x1e>
 800c2e0:	682b      	ldr	r3, [r5, #0]
 800c2e2:	b103      	cbz	r3, 800c2e6 <_lseek_r+0x1e>
 800c2e4:	6023      	str	r3, [r4, #0]
 800c2e6:	bd38      	pop	{r3, r4, r5, pc}
 800c2e8:	200009b0 	.word	0x200009b0

0800c2ec <_read_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4d07      	ldr	r5, [pc, #28]	; (800c30c <_read_r+0x20>)
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	4608      	mov	r0, r1
 800c2f4:	4611      	mov	r1, r2
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	602a      	str	r2, [r5, #0]
 800c2fa:	461a      	mov	r2, r3
 800c2fc:	f000 f884 	bl	800c408 <_read>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_read_r+0x1e>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_read_r+0x1e>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	200009b0 	.word	0x200009b0

0800c310 <roundf>:
 800c310:	ee10 0a10 	vmov	r0, s0
 800c314:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c318:	3a7f      	subs	r2, #127	; 0x7f
 800c31a:	2a16      	cmp	r2, #22
 800c31c:	dc15      	bgt.n	800c34a <roundf+0x3a>
 800c31e:	2a00      	cmp	r2, #0
 800c320:	da08      	bge.n	800c334 <roundf+0x24>
 800c322:	3201      	adds	r2, #1
 800c324:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c328:	d101      	bne.n	800c32e <roundf+0x1e>
 800c32a:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c32e:	ee00 3a10 	vmov	s0, r3
 800c332:	4770      	bx	lr
 800c334:	4907      	ldr	r1, [pc, #28]	; (800c354 <roundf+0x44>)
 800c336:	4111      	asrs	r1, r2
 800c338:	4208      	tst	r0, r1
 800c33a:	d0fa      	beq.n	800c332 <roundf+0x22>
 800c33c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c340:	4113      	asrs	r3, r2
 800c342:	4403      	add	r3, r0
 800c344:	ea23 0301 	bic.w	r3, r3, r1
 800c348:	e7f1      	b.n	800c32e <roundf+0x1e>
 800c34a:	2a80      	cmp	r2, #128	; 0x80
 800c34c:	d1f1      	bne.n	800c332 <roundf+0x22>
 800c34e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c352:	4770      	bx	lr
 800c354:	007fffff 	.word	0x007fffff

0800c358 <sqrtf>:
 800c358:	b508      	push	{r3, lr}
 800c35a:	ed2d 8b02 	vpush	{d8}
 800c35e:	eeb0 8a40 	vmov.f32	s16, s0
 800c362:	f000 f817 	bl	800c394 <__ieee754_sqrtf>
 800c366:	eeb4 8a48 	vcmp.f32	s16, s16
 800c36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c36e:	d60c      	bvs.n	800c38a <sqrtf+0x32>
 800c370:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c390 <sqrtf+0x38>
 800c374:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c37c:	d505      	bpl.n	800c38a <sqrtf+0x32>
 800c37e:	f000 f80d 	bl	800c39c <__errno>
 800c382:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c386:	2321      	movs	r3, #33	; 0x21
 800c388:	6003      	str	r3, [r0, #0]
 800c38a:	ecbd 8b02 	vpop	{d8}
 800c38e:	bd08      	pop	{r3, pc}
 800c390:	00000000 	.word	0x00000000

0800c394 <__ieee754_sqrtf>:
 800c394:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c398:	4770      	bx	lr
	...

0800c39c <__errno>:
 800c39c:	4b01      	ldr	r3, [pc, #4]	; (800c3a4 <__errno+0x8>)
 800c39e:	6818      	ldr	r0, [r3, #0]
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	200002cc 	.word	0x200002cc

0800c3a8 <_close>:
 800c3a8:	4b02      	ldr	r3, [pc, #8]	; (800c3b4 <_close+0xc>)
 800c3aa:	2258      	movs	r2, #88	; 0x58
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3b2:	4770      	bx	lr
 800c3b4:	200009b0 	.word	0x200009b0

0800c3b8 <_fstat>:
 800c3b8:	4b02      	ldr	r3, [pc, #8]	; (800c3c4 <_fstat+0xc>)
 800c3ba:	2258      	movs	r2, #88	; 0x58
 800c3bc:	601a      	str	r2, [r3, #0]
 800c3be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3c2:	4770      	bx	lr
 800c3c4:	200009b0 	.word	0x200009b0

0800c3c8 <_getpid>:
 800c3c8:	4b02      	ldr	r3, [pc, #8]	; (800c3d4 <_getpid+0xc>)
 800c3ca:	2258      	movs	r2, #88	; 0x58
 800c3cc:	601a      	str	r2, [r3, #0]
 800c3ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3d2:	4770      	bx	lr
 800c3d4:	200009b0 	.word	0x200009b0

0800c3d8 <_isatty>:
 800c3d8:	4b02      	ldr	r3, [pc, #8]	; (800c3e4 <_isatty+0xc>)
 800c3da:	2258      	movs	r2, #88	; 0x58
 800c3dc:	601a      	str	r2, [r3, #0]
 800c3de:	2000      	movs	r0, #0
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	200009b0 	.word	0x200009b0

0800c3e8 <_kill>:
 800c3e8:	4b02      	ldr	r3, [pc, #8]	; (800c3f4 <_kill+0xc>)
 800c3ea:	2258      	movs	r2, #88	; 0x58
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3f2:	4770      	bx	lr
 800c3f4:	200009b0 	.word	0x200009b0

0800c3f8 <_lseek>:
 800c3f8:	4b02      	ldr	r3, [pc, #8]	; (800c404 <_lseek+0xc>)
 800c3fa:	2258      	movs	r2, #88	; 0x58
 800c3fc:	601a      	str	r2, [r3, #0]
 800c3fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c402:	4770      	bx	lr
 800c404:	200009b0 	.word	0x200009b0

0800c408 <_read>:
 800c408:	4b02      	ldr	r3, [pc, #8]	; (800c414 <_read+0xc>)
 800c40a:	2258      	movs	r2, #88	; 0x58
 800c40c:	601a      	str	r2, [r3, #0]
 800c40e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c412:	4770      	bx	lr
 800c414:	200009b0 	.word	0x200009b0

0800c418 <_sbrk>:
 800c418:	4a04      	ldr	r2, [pc, #16]	; (800c42c <_sbrk+0x14>)
 800c41a:	6811      	ldr	r1, [r2, #0]
 800c41c:	4603      	mov	r3, r0
 800c41e:	b909      	cbnz	r1, 800c424 <_sbrk+0xc>
 800c420:	4903      	ldr	r1, [pc, #12]	; (800c430 <_sbrk+0x18>)
 800c422:	6011      	str	r1, [r2, #0]
 800c424:	6810      	ldr	r0, [r2, #0]
 800c426:	4403      	add	r3, r0
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	4770      	bx	lr
 800c42c:	200009b8 	.word	0x200009b8
 800c430:	200009c0 	.word	0x200009c0

0800c434 <_write>:
 800c434:	4b02      	ldr	r3, [pc, #8]	; (800c440 <_write+0xc>)
 800c436:	2258      	movs	r2, #88	; 0x58
 800c438:	601a      	str	r2, [r3, #0]
 800c43a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c43e:	4770      	bx	lr
 800c440:	200009b0 	.word	0x200009b0

0800c444 <_exit>:
 800c444:	e7fe      	b.n	800c444 <_exit>
	...

0800c448 <_init>:
 800c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44a:	bf00      	nop
 800c44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c44e:	bc08      	pop	{r3}
 800c450:	469e      	mov	lr, r3
 800c452:	4770      	bx	lr

0800c454 <_fini>:
 800c454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c456:	bf00      	nop
 800c458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c45a:	bc08      	pop	{r3}
 800c45c:	469e      	mov	lr, r3
 800c45e:	4770      	bx	lr
