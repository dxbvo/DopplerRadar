
demo_code_20221006.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009de4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002f78  08009f98  08009f98  00019f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf10  0800cf10  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf10  0800cf10  0001cf10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf18  0800cf18  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf18  0800cf18  0001cf18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf1c  0800cf1c  0001cf1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cf20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  200001f4  0800d114  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c80  0800d114  00020c80  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c87  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332b  00000000  00000000  00034eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  000381d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  00039610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026671  00000000  00000000  0003a8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017251  00000000  00000000  00060f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dedb2  00000000  00000000  000781a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156f54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d6c  00000000  00000000  00156fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009f7c 	.word	0x08009f7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	08009f7c 	.word	0x08009f7c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <main>:
 * @brief  Main function
 * @return not used because main ends in an infinite loop
 *
 * Initialization and infinite while loop
 *****************************************************************************/
int main(void) {
 8000ebc:	b598      	push	{r3, r4, r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
	HAL_Init();							// Initialize the system
 8000ec0:	f003 fada 	bl	8004478 <HAL_Init>

	SystemClock_Config();				// Configure system clocks
 8000ec4:	f000 f876 	bl	8000fb4 <SystemClock_Config>

#ifdef FLIPPED_LCD
	BSP_LCD_Init_Flipped();				// Initialize the LCD for flipped orientation
 8000ec8:	f002 fa2c 	bl	8003324 <BSP_LCD_Init_Flipped>
#else
	BSP_LCD_Init();						// Initialize the LCD display
#endif
	BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8000ecc:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f002 fab5 	bl	8003440 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f002 fb16 	bl	8003508 <BSP_LCD_SelectLayer>
	BSP_LCD_DisplayOn();
 8000edc:	f002 fde0 	bl	8003aa0 <BSP_LCD_DisplayOn>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee4:	f002 fb6c 	bl	80035c0 <BSP_LCD_Clear>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());	// Touchscreen
 8000ee8:	f002 fa92 	bl	8003410 <BSP_LCD_GetXSize>
 8000eec:	4603      	mov	r3, r0
 8000eee:	b29c      	uxth	r4, r3
 8000ef0:	f002 fa9a 	bl	8003428 <BSP_LCD_GetYSize>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4620      	mov	r0, r4
 8000efc:	f003 f9b8 	bl	8004270 <BSP_TS_Init>
	/* Uncomment next line to enable touchscreen interrupt */
	// BSP_TS_ITConfig();					// Enable Touchscreen interrupt

	PB_init();							// Initialize the user pushbutton
 8000f00:	f001 f8c6 	bl	8002090 <PB_init>
	PB_enableIRQ();						// Enable interrupt on user pushbutton
 8000f04:	f001 f8e4 	bl	80020d0 <PB_enableIRQ>

	BSP_LED_Init(LED3);					// Toggles in while loop
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f001 fdf3 	bl	8002af4 <BSP_LED_Init>
	BSP_LED_Init(LED4);					// Is toggled by user button
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f001 fdf0 	bl	8002af4 <BSP_LED_Init>

	MENU_draw();						// Draw the menu
 8000f14:	f000 fee2 	bl	8001cdc <MENU_draw>
	MENU_hint();						// Show hint at startup
 8000f18:	f000 ff8e 	bl	8001e38 <MENU_hint>

	gyro_disable();						// Disable gyro, use those analog inputs
 8000f1c:	f000 f8c8 	bl	80010b0 <gyro_disable>

	MEAS_GPIO_analog_init();			// Configure GPIOs in analog mode
 8000f20:	f000 fa78 	bl	8001414 <MEAS_GPIO_analog_init>
	MEAS_timer_init();					// Configure the timer
 8000f24:	f000 fb2c 	bl	8001580 <MEAS_timer_init>

	/* Infinite while loop */
	while (1) {							// Infinitely loop in main function
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f001 fe6b 	bl	8002c04 <BSP_LED_Toggle>

		if (MEAS_data_ready) {			// Show data if new data available
 8000f2e:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <main+0xf0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <main+0x88>
			MEAS_data_ready = false;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <main+0xf0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
			orderSamples();
 8000f3c:	f000 f978 	bl	8001230 <orderSamples>
			MEAS_show_data();
 8000f40:	f000 fd3c 	bl	80019bc <MEAS_show_data>
		}

		if (PB_pressed()) {				// Check if user pushbutton was pressed
 8000f44:	f001 f8f6 	bl	8002134 <PB_pressed>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d01d      	beq.n	8000f8a <main+0xce>
			DAC_active = !DAC_active;	// Toggle DAC on/off
 8000f4e:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <main+0xf4>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	bf14      	ite	ne
 8000f56:	2301      	movne	r3, #1
 8000f58:	2300      	moveq	r3, #0
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f083 0301 	eor.w	r3, r3, #1
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <main+0xf4>)
 8000f6a:	701a      	strb	r2, [r3, #0]
			if (DAC_active) {
 8000f6c:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <main+0xf4>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <main+0xc4>
				DAC_init();
 8000f74:	f000 faa8 	bl	80014c8 <DAC_init>
				BSP_LED_On(LED4);
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f001 fe0f 	bl	8002b9c <BSP_LED_On>
 8000f7e:	e004      	b.n	8000f8a <main+0xce>
			} else {
				DAC_reset();
 8000f80:	f000 fa8c 	bl	800149c <DAC_reset>
				BSP_LED_Off(LED4);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f001 fe23 	bl	8002bd0 <BSP_LED_Off>
			}
		}

		/* Comment next line if touchscreen interrupt is enabled */
		MENU_check_transition();
 8000f8a:	f000 ffb5 	bl	8001ef8 <MENU_check_transition>

		switch (MENU_get_transition()) {	// Handle user menu choice
 8000f8e:	f000 ffa1 	bl	8001ed4 <MENU_get_transition>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b05      	cmp	r3, #5
 8000f96:	d104      	bne.n	8000fa2 <main+0xe6>
		case MENU_FOUR:
			ADC2_IN13_IN5_scan_init();
			ADC2_IN13_IN5_scan_start();
			break;                                        */
		case MENU_FIVE:
			ADC3_IN13_IN4_scan_init();
 8000f98:	f000 fb28 	bl	80015ec <ADC3_IN13_IN4_scan_init>
			ADC3_IN13_IN4_scan_start();
 8000f9c:	f000 fbce 	bl	800173c <ADC3_IN13_IN4_scan_start>
			break;
 8000fa0:	e000      	b.n	8000fa4 <main+0xe8>
		default:						// Should never occur
			break;
 8000fa2:	bf00      	nop
		}

		HAL_Delay(200);					// Wait or sleep
 8000fa4:	20c8      	movs	r0, #200	; 0xc8
 8000fa6:	f003 fae1 	bl	800456c <HAL_Delay>
		BSP_LED_Toggle(LED3);			// Visual feedback when running
 8000faa:	e7bd      	b.n	8000f28 <main+0x6c>
 8000fac:	20000210 	.word	0x20000210
 8000fb0:	20000211 	.word	0x20000211

08000fb4 <SystemClock_Config>:

/** ***************************************************************************
 * @brief System Clock Configuration
 *
 *****************************************************************************/
static void SystemClock_Config(void){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b0a0      	sub	sp, #128	; 0x80
 8000fb8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fbe:	2230      	movs	r2, #48	; 0x30
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f007 fbf6 	bl	80087b4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 030c 	add.w	r3, r7, #12
 8000fdc:	2230      	movs	r2, #48	; 0x30
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f007 fbe7 	bl	80087b4 <memset>
	/* Configure the main internal regulator output voltage */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <SystemClock_Config+0xf0>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a2d      	ldr	r2, [pc, #180]	; (80010a4 <SystemClock_Config+0xf0>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <SystemClock_Config+0xf0>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <SystemClock_Config+0xf4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a27      	ldr	r2, [pc, #156]	; (80010a8 <SystemClock_Config+0xf4>)
 800100c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <SystemClock_Config+0xf4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
	/* Initialize High Speed External Oscillator and PLL circuits */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800101e:	2301      	movs	r3, #1
 8001020:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001026:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001028:	2302      	movs	r3, #2
 800102a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800102c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001030:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001032:	2308      	movs	r3, #8
 8001034:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001036:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800103a:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103c:	2302      	movs	r3, #2
 800103e:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8001040:	2307      	movs	r3, #7
 8001042:	67fb      	str	r3, [r7, #124]	; 0x7c
	HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001044:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001048:	4618      	mov	r0, r3
 800104a:	f005 fce1 	bl	8006a10 <HAL_RCC_OscConfig>
	/* Initialize gates and clock dividers for CPU, AHB and APB busses */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2302      	movs	r3, #2
 8001054:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800105a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800105e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001064:	64fb      	str	r3, [r7, #76]	; 0x4c
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001066:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800106a:	2105      	movs	r1, #5
 800106c:	4618      	mov	r0, r3
 800106e:	f005 ff3d 	bl	8006eec <HAL_RCC_ClockConfig>
	/* Initialize PLL and clock divider for the LCD */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001072:	2308      	movs	r3, #8
 8001074:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001076:	23c0      	movs	r3, #192	; 0xc0
 8001078:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800107a:	2304      	movs	r3, #4
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800107e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001082:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	4618      	mov	r0, r3
 800108a:	f006 f93b 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
	/* Set clock prescaler for ADCs */
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <SystemClock_Config+0xf8>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	4a06      	ldr	r2, [pc, #24]	; (80010ac <SystemClock_Config+0xf8>)
 8001094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001098:	6053      	str	r3, [r2, #4]
}
 800109a:	bf00      	nop
 800109c:	3780      	adds	r7, #128	; 0x80
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000
 80010ac:	40012300 	.word	0x40012300

080010b0 <gyro_disable>:
 * @n PF8 is also reconfigured.
 * @n An other solution would be to remove the GYRO
 * from the microcontroller board by unsoldering it.
 *****************************************************************************/
static void gyro_disable(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <gyro_disable+0xb4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a29      	ldr	r2, [pc, #164]	; (8001164 <gyro_disable+0xb4>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <gyro_disable+0xb4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1; // Reset mode for PC1
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <gyro_disable+0xb8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a24      	ldr	r2, [pc, #144]	; (8001168 <gyro_disable+0xb8>)
 80010d8:	f023 030c 	bic.w	r3, r3, #12
 80010dc:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER1_0;	// Set PC1 as output
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <gyro_disable+0xb8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a21      	ldr	r2, [pc, #132]	; (8001168 <gyro_disable+0xb8>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <gyro_disable+0xb8>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a1e      	ldr	r2, [pc, #120]	; (8001168 <gyro_disable+0xb8>)
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 80010f6:	200a      	movs	r0, #10
 80010f8:	f003 fa38 	bl	800456c <HAL_Delay>
	GPIOC->MODER |= GPIO_MODER_MODER1_Msk; // Analog mode PC1 = ADC123_IN11
 80010fc:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <gyro_disable+0xb8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <gyro_disable+0xb8>)
 8001102:	f043 030c 	orr.w	r3, r3, #12
 8001106:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 8001108:	2300      	movs	r3, #0
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <gyro_disable+0xb4>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a14      	ldr	r2, [pc, #80]	; (8001164 <gyro_disable+0xb4>)
 8001112:	f043 0320 	orr.w	r3, r3, #32
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <gyro_disable+0xb4>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8;	// Reset speed of PF8
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <gyro_disable+0xbc>)
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	4a10      	ldr	r2, [pc, #64]	; (800116c <gyro_disable+0xbc>)
 800112a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800112e:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8;			// Reset alternate func. of PF8
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <gyro_disable+0xbc>)
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <gyro_disable+0xbc>)
 8001136:	f023 030f 	bic.w	r3, r3, #15
 800113a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8;			// Reset pulup/down of PF8
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <gyro_disable+0xbc>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	4a0a      	ldr	r2, [pc, #40]	; (800116c <gyro_disable+0xbc>)
 8001142:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001146:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 8001148:	200a      	movs	r0, #10
 800114a:	f003 fa0f 	bl	800456c <HAL_Delay>
	GPIOF->MODER |= GPIO_MODER_MODER8_Msk; // Analog mode for PF6 = ADC3_IN4
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <gyro_disable+0xbc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a06      	ldr	r2, [pc, #24]	; (800116c <gyro_disable+0xbc>)
 8001154:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001158:	6013      	str	r3, [r2, #0]
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40020800 	.word	0x40020800
 800116c:	40021400 	.word	0x40021400

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <__NVIC_EnableIRQ+0x38>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000e100 	.word	0xe000e100

080011ac <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	db12      	blt.n	80011e4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f003 021f 	and.w	r2, r3, #31
 80011c4:	490a      	ldr	r1, [pc, #40]	; (80011f0 <__NVIC_DisableIRQ+0x44>)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	095b      	lsrs	r3, r3, #5
 80011cc:	2001      	movs	r0, #1
 80011ce:	fa00 f202 	lsl.w	r2, r0, r2
 80011d2:	3320      	adds	r3, #32
 80011d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011d8:	f3bf 8f4f 	dsb	sy
}
 80011dc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011de:	f3bf 8f6f 	isb	sy
}
 80011e2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	2b00      	cmp	r3, #0
 8001204:	db0c      	blt.n	8001220 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 021f 	and.w	r2, r3, #31
 800120c:	4907      	ldr	r1, [pc, #28]	; (800122c <__NVIC_ClearPendingIRQ+0x38>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	095b      	lsrs	r3, r3, #5
 8001214:	2001      	movs	r0, #1
 8001216:	fa00 f202 	lsl.w	r2, r0, r2
 800121a:	3360      	adds	r3, #96	; 0x60
 800121c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100

08001230 <orderSamples>:
 * left coil, right coil, left pad and right pad during a measurement,
 * the sample must first be sorted. This is done by this function.
 * @n The samples runs through a for-Loop and is divided into four arrays
 * named after the hardware inputs left coil, right coil, left pad, right pad.
 *****************************************************************************/
void orderSamples(void) {
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0

	for(uint32_t loop=0; loop < ADC_NUMS; loop++) {
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	e02d      	b.n	8001298 <orderSamples+0x68>
		pad_left[loop] = ADC_samples[0+4*loop];
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <orderSamples+0x7c>)
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	4619      	mov	r1, r3
 8001248:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <orderSamples+0x80>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pad_right[loop] = ADC_samples[1+4*loop];
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	3301      	adds	r3, #1
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <orderSamples+0x7c>)
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	4619      	mov	r1, r3
 800125e:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <orderSamples+0x84>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		coil_left[loop] = ADC_samples[2+4*loop];
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <orderSamples+0x7c>)
 800126e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001272:	4619      	mov	r1, r3
 8001274:	4a10      	ldr	r2, [pc, #64]	; (80012b8 <orderSamples+0x88>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		coil_right[loop] = ADC_samples[3+4*loop];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	3303      	adds	r3, #3
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <orderSamples+0x7c>)
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	4619      	mov	r1, r3
 800128a:	4a0c      	ldr	r2, [pc, #48]	; (80012bc <orderSamples+0x8c>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(uint32_t loop=0; loop < ADC_NUMS; loop++) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3301      	adds	r3, #1
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b3b      	cmp	r3, #59	; 0x3b
 800129c:	d9ce      	bls.n	800123c <orderSamples+0xc>
	}
}
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	20000218 	.word	0x20000218
 80012b0:	200005dc 	.word	0x200005dc
 80012b4:	200006cc 	.word	0x200006cc
 80012b8:	200007bc 	.word	0x200007bc
 80012bc:	200008ac 	.word	0x200008ac

080012c0 <rootMeanSquare>:
 *
 * With this function the root mean square(RMS) of an array can be calculated.
 * @n The generated arrays from the function orderSamples were passed to this function
 * to calculate the respective RMS.
 *****************************************************************************/
int32_t rootMeanSquare(int32_t arr[]) {
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

	int32_t sumOfArray=0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
	int32_t sumOfSquare=0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	623b      	str	r3, [r7, #32]

    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
 80012d4:	e00a      	b.n	80012ec <rootMeanSquare+0x2c>
    	sumOfArray += arr[i];
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e2:	4413      	add	r3, r2
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b3b      	cmp	r3, #59	; 0x3b
 80012f0:	d9f1      	bls.n	80012d6 <rootMeanSquare+0x16>
    }

    int32_t meanOfArray = sumOfArray/60;
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	4a2c      	ldr	r2, [pc, #176]	; (80013a8 <rootMeanSquare+0xe8>)
 80012f6:	fb82 1203 	smull	r1, r2, r2, r3
 80012fa:	441a      	add	r2, r3
 80012fc:	1152      	asrs	r2, r2, #5
 80012fe:	17db      	asrs	r3, r3, #31
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]

    // Loop through the array and calculate the sum of the squares of each element
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e027      	b.n	800135a <rootMeanSquare+0x9a>
    	sumOfSquare += pow(arr[i] - meanOfArray, 2);
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f90b 	bl	8000534 <__aeabi_i2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80013a0 <rootMeanSquare+0xe0>
 8001326:	ec43 2b10 	vmov	d0, r2, r3
 800132a:	f007 fecd 	bl	80090c8 <pow>
 800132e:	ec55 4b10 	vmov	r4, r5, d0
 8001332:	6a38      	ldr	r0, [r7, #32]
 8001334:	f7ff f8fe 	bl	8000534 <__aeabi_i2d>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	4620      	mov	r0, r4
 800133e:	4629      	mov	r1, r5
 8001340:	f7fe ffac 	bl	800029c <__adddf3>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc0c 	bl	8000b68 <__aeabi_d2iz>
 8001350:	4603      	mov	r3, r0
 8001352:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < ADC_NUMS; i++) {
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	3301      	adds	r3, #1
 8001358:	61bb      	str	r3, [r7, #24]
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2b3b      	cmp	r3, #59	; 0x3b
 800135e:	d9d4      	bls.n	800130a <rootMeanSquare+0x4a>
    }

    // Divide the sum of the squares by the number of elements in the array
    int32_t mean = sumOfSquare / 60;
 8001360:	6a3b      	ldr	r3, [r7, #32]
 8001362:	4a11      	ldr	r2, [pc, #68]	; (80013a8 <rootMeanSquare+0xe8>)
 8001364:	fb82 1203 	smull	r1, r2, r2, r3
 8001368:	441a      	add	r2, r3
 800136a:	1152      	asrs	r2, r2, #5
 800136c:	17db      	asrs	r3, r3, #31
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	613b      	str	r3, [r7, #16]
    int32_t rootMeanSquare = sqrt(mean);
 8001372:	6938      	ldr	r0, [r7, #16]
 8001374:	f7ff f8de 	bl	8000534 <__aeabi_i2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	ec43 2b10 	vmov	d0, r2, r3
 8001380:	f007 ff12 	bl	80091a8 <sqrt>
 8001384:	ec53 2b10 	vmov	r2, r3, d0
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fbec 	bl	8000b68 <__aeabi_d2iz>
 8001390:	4603      	mov	r3, r0
 8001392:	60fb      	str	r3, [r7, #12]

    return rootMeanSquare;
 8001394:	68fb      	ldr	r3, [r7, #12]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bdb0      	pop	{r4, r5, r7, pc}
 800139e:	bf00      	nop
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40000000 	.word	0x40000000
 80013a8:	88888889 	.word	0x88888889

080013ac <averageOfTwoArrays>:
 *
 * For further use of the RMS values, the two pads as well as the two coils must still be combined to a common measured value.
 * @n This is done in this function.
 * The resulting values can now be used to implement any function, such as measuring the distance.
 *****************************************************************************/
int32_t averageOfTwoArrays(int32_t RMS1, int32_t RMS2) {
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
	int32_t averageOfTwoArrays;
	averageOfTwoArrays = (RMS1 + RMS2)/2;
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	0fda      	lsrs	r2, r3, #31
 80013be:	4413      	add	r3, r2
 80013c0:	105b      	asrs	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
	return averageOfTwoArrays;
 80013c4:	68fb      	ldr	r3, [r7, #12]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <findDistance>:
 *
 * @note The input number for the ADCs is not equal to the GPIO pin number!
 * @todo this is an example
 *
 *****************************************************************************/
int32_t findDistance(int32_t value) {
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]

	int32_t distance = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]

	while(value < LUT[distance] && distance < sizeof(LUT)) {
 80013e0:	e002      	b.n	80013e8 <findDistance+0x14>
		distance++;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	3301      	adds	r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
	while(value < LUT[distance] && distance < sizeof(LUT)) {
 80013e8:	4a09      	ldr	r2, [pc, #36]	; (8001410 <findDistance+0x3c>)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	da03      	bge.n	80013fe <findDistance+0x2a>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	f5b3 7f49 	cmp.w	r3, #804	; 0x324
 80013fc:	d3f1      	bcc.n	80013e2 <findDistance+0xe>
	}
    return distance-1;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3b01      	subs	r3, #1
}
 8001402:	4618      	mov	r0, r3
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	0800a054 	.word	0x0800a054

08001414 <MEAS_GPIO_analog_init>:
 * - ADC123_IN13 = GPIO PC3
 * - ADC12_IN5 = GPIO PA5
 * - DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 *****************************************************************************/
void MEAS_GPIO_analog_init(void) // changed
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MEAS_GPIO_analog_init+0x7c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <MEAS_GPIO_analog_init+0x7c>)
 8001424:	f043 0320 	orr.w	r3, r3, #32
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MEAS_GPIO_analog_init+0x7c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
	GPIOF->MODER |= (GPIO_MODER_MODER6_Msk);// Analog mode for PF6 = ADC3_IN4
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MEAS_GPIO_analog_init+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a16      	ldr	r2, [pc, #88]	; (8001494 <MEAS_GPIO_analog_init+0x80>)
 800143c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001440:	6013      	str	r3, [r2, #0]
	GPIOF->MODER |= (GPIO_MODER_MODER8_Msk);// Analog mode for PF8 = ADC3_IN4
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MEAS_GPIO_analog_init+0x80>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a13      	ldr	r2, [pc, #76]	; (8001494 <MEAS_GPIO_analog_init+0x80>)
 8001448:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800144c:	6013      	str	r3, [r2, #0]

	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800144e:	2300      	movs	r3, #0
 8001450:	603b      	str	r3, [r7, #0]
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <MEAS_GPIO_analog_init+0x7c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <MEAS_GPIO_analog_init+0x7c>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <MEAS_GPIO_analog_init+0x7c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
	GPIOC->MODER |= (GPIO_MODER_MODER3_Msk);// Analog mode for PC3 = ADC123_IN13
 800146a:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <MEAS_GPIO_analog_init+0x84>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <MEAS_GPIO_analog_init+0x84>)
 8001470:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001474:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODER1_Msk);// Analog mode for PC1 = ADC123_IN13
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <MEAS_GPIO_analog_init+0x84>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <MEAS_GPIO_analog_init+0x84>)
 800147c:	f043 030c 	orr.w	r3, r3, #12
 8001480:	6013      	str	r3, [r2, #0]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40021400 	.word	0x40021400
 8001498:	40020800 	.word	0x40020800

0800149c <DAC_reset>:
/** ***************************************************************************
 * @brief Resets the DAC
 *
 * when it is no longer used.
 *****************************************************************************/
void DAC_reset(void) {
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	RCC->APB1RSTR |= RCC_APB1RSTR_DACRST;	// Reset the DAC
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <DAC_reset+0x28>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a07      	ldr	r2, [pc, #28]	; (80014c4 <DAC_reset+0x28>)
 80014a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014aa:	6213      	str	r3, [r2, #32]
	RCC->APB1RSTR &= ~RCC_APB1RSTR_DACRST;	// Release reset of the DAC
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <DAC_reset+0x28>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <DAC_reset+0x28>)
 80014b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80014b6:	6213      	str	r3, [r2, #32]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40023800 	.word	0x40023800

080014c8 <DAC_init>:
 * The output used is DAC_OUT2 = GPIO PA5
 * @n As DAC_OUT2 = GPIO PA5 (= same GPIO as ADC12_IN5)
 * it is possible to monitor the output voltage DAC_OUT2 by the input ADC12_IN5.
 *****************************************************************************/
void DAC_init(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
	__HAL_RCC_DAC_CLK_ENABLE();			// Enable Clock for DAC
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <DAC_init+0x3c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <DAC_init+0x3c>)
 80014d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80014dc:	6413      	str	r3, [r2, #64]	; 0x40
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <DAC_init+0x3c>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
	DAC->CR |= DAC_CR_EN2;				// Enable DAC output 2
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <DAC_init+0x40>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a06      	ldr	r2, [pc, #24]	; (8001508 <DAC_init+0x40>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40007400 	.word	0x40007400

0800150c <DAC_increment>:

/** ***************************************************************************
 * @brief Increment the DAC value and write it to the output
 *
 *****************************************************************************/
void DAC_increment(void) {
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	DAC_sample += 20;				// Increment DAC output
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <DAC_increment+0x30>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	3314      	adds	r3, #20
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <DAC_increment+0x30>)
 8001518:	6013      	str	r3, [r2, #0]
	if (DAC_sample >= (1UL << ADC_DAC_RES)) { DAC_sample = 0; }	// Go to 0
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <DAC_increment+0x30>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001522:	d302      	bcc.n	800152a <DAC_increment+0x1e>
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <DAC_increment+0x30>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
	DAC->DHR12R2 = DAC_sample;		// Write new DAC output value
 800152a:	4a05      	ldr	r2, [pc, #20]	; (8001540 <DAC_increment+0x34>)
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <DAC_increment+0x30>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6153      	str	r3, [r2, #20]
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	200005d8 	.word	0x200005d8
 8001540:	40007400 	.word	0x40007400

08001544 <ADC_reset>:
/** ***************************************************************************
 * @brief Resets the ADCs and the timer
 *
 * to make sure the different demos do not interfere.
 *****************************************************************************/
void ADC_reset(void) {
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
	RCC->APB2RSTR |= RCC_APB2RSTR_ADCRST;	// Reset ADCs
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <ADC_reset+0x38>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <ADC_reset+0x38>)
 800154e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001552:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->APB2RSTR &= ~RCC_APB2RSTR_ADCRST;	// Release reset of ADCs
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <ADC_reset+0x38>)
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <ADC_reset+0x38>)
 800155a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800155e:	6253      	str	r3, [r2, #36]	; 0x24
	TIM2->CR1 &= ~TIM_CR1_CEN;				// Disable timer
 8001560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800156a:	f023 0301 	bic.w	r3, r3, #1
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800

08001580 <MEAS_timer_init>:
 * @brief Configure the timer to trigger the ADC(s)
 *
 * @note For debugging purposes the timer interrupt might be useful.
 *****************************************************************************/
void MEAS_timer_init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM2_CLK_ENABLE();		// Enable Clock for TIM2
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MEAS_timer_init+0x68>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a16      	ldr	r2, [pc, #88]	; (80015e8 <MEAS_timer_init+0x68>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MEAS_timer_init+0x68>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]
	TIM2->PSC = TIM_PRESCALE;			// Prescaler for clock freq. = 1MHz
 80015a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a6:	f243 62af 	movw	r2, #13999	; 0x36af
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = TIM_TOP;				// Auto reload = counter top value
 80015ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b0:	2209      	movs	r2, #9
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR2 |= TIM_CR2_MMS_1; 		// TRGO on update
 80015b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015be:	f043 0320 	orr.w	r3, r3, #32
 80015c2:	6053      	str	r3, [r2, #4]
	/* If timer interrupt is not needed, comment the following lines */
	TIM2->DIER |= TIM_DIER_UIE;			// Enable update interrupt
 80015c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	60d3      	str	r3, [r2, #12]
	NVIC_ClearPendingIRQ(TIM2_IRQn);	// Clear pending interrupt on line 0
 80015d4:	201c      	movs	r0, #28
 80015d6:	f7ff fe0d 	bl	80011f4 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(TIM2_IRQn);			// Enable interrupt line 0 in the NVIC
 80015da:	201c      	movs	r0, #28
 80015dc:	f7ff fdc8 	bl	8001170 <__NVIC_EnableIRQ>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40023800 	.word	0x40023800

080015ec <ADC3_IN13_IN4_scan_init>:
 * @n As each conversion triggers the DMA, the number of transfers is doubled.
 * @n The DMA triggers the transfer complete interrupt when all data is ready.
 * @n The inputs used are ADC123_IN13 = GPIO PC3 and ADC3_IN4 = GPIO PF6
 *****************************************************************************/
void ADC3_IN13_IN4_scan_init(void) // changed
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC3_CLK_ENABLE();		// Enable Clock for ADC3
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	4b4b      	ldr	r3, [pc, #300]	; (8001724 <ADC3_IN13_IN4_scan_init+0x138>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a4a      	ldr	r2, [pc, #296]	; (8001724 <ADC3_IN13_IN4_scan_init+0x138>)
 80015fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b48      	ldr	r3, [pc, #288]	; (8001724 <ADC3_IN13_IN4_scan_init+0x138>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800160a:	607b      	str	r3, [r7, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
	ADC3->SQR1 |= 0x3UL << ADC_SQR1_L_Pos;			// Convert 4 inputs
 800160e:	4b46      	ldr	r3, [pc, #280]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001612:	4a45      	ldr	r2, [pc, #276]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001614:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8001618:	62d3      	str	r3, [r2, #44]	; 0x2c

	ADC3->SQR3 |= (4UL << ADC_SQR3_SQ1_Pos);	// Input 4 = second conversion, PF6, pad left
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 800161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161e:	4a42      	ldr	r2, [pc, #264]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (13UL << ADC_SQR3_SQ2_Pos);	// Input 13 = first conversion, PC3, pad right
 8001626:	4b40      	ldr	r3, [pc, #256]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800162a:	4a3f      	ldr	r2, [pc, #252]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 800162c:	f443 73d0 	orr.w	r3, r3, #416	; 0x1a0
 8001630:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (6UL << ADC_SQR3_SQ3_Pos);	// Input 6 = second conversion, PF8, coil left
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001636:	4a3c      	ldr	r2, [pc, #240]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001638:	f443 53c0 	orr.w	r3, r3, #6144	; 0x1800
 800163c:	6353      	str	r3, [r2, #52]	; 0x34
	ADC3->SQR3 |= (11UL << ADC_SQR3_SQ4_Pos);	// Input 11 = first conversion, PC1, coil right
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001642:	4a39      	ldr	r2, [pc, #228]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001644:	f443 23b0 	orr.w	r3, r3, #360448	; 0x58000
 8001648:	6353      	str	r3, [r2, #52]	; 0x34

	ADC3->CR1 |= ADC_CR1_SCAN;			// Enable scan mode
 800164a:	4b37      	ldr	r3, [pc, #220]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	4a36      	ldr	r2, [pc, #216]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6053      	str	r3, [r2, #4]
	ADC3->CR2 |= (1UL << ADC_CR2_EXTEN_Pos);	// En. ext. trigger on rising e.
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	4a33      	ldr	r2, [pc, #204]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 800165c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001660:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= (6UL << ADC_CR2_EXTSEL_Pos);	// Timer 2 TRGO event
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	4a30      	ldr	r2, [pc, #192]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001668:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 800166c:	6093      	str	r3, [r2, #8]
	ADC3->CR2 |= ADC_CR2_DMA;			// Enable DMA mode
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	4a2d      	ldr	r2, [pc, #180]	; (8001728 <ADC3_IN13_IN4_scan_init+0x13c>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001678:	6093      	str	r3, [r2, #8]
	__HAL_RCC_DMA2_CLK_ENABLE();		// Enable Clock for DMA2
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <ADC3_IN13_IN4_scan_init+0x138>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a28      	ldr	r2, [pc, #160]	; (8001724 <ADC3_IN13_IN4_scan_init+0x138>)
 8001684:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b26      	ldr	r3, [pc, #152]	; (8001724 <ADC3_IN13_IN4_scan_init+0x138>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
	DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA stream 1
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a24      	ldr	r2, [pc, #144]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6013      	str	r3, [r2, #0]
	while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80016a2:	bf00      	nop
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f9      	bne.n	80016a4 <ADC3_IN13_IN4_scan_init+0xb8>
	DMA2->LIFCR |= DMA_LIFCR_CTCIF1;	// Clear transfer complete interrupt fl.
 80016b0:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <ADC3_IN13_IN4_scan_init+0x144>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <ADC3_IN13_IN4_scan_init+0x144>)
 80016b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ba:	6093      	str	r3, [r2, #8]
	DMA2_Stream1->CR |= (2UL << DMA_SxCR_CHSEL_Pos);	// Select channel 2
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1a      	ldr	r2, [pc, #104]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016c6:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PL_1;		// Priority high
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a17      	ldr	r2, [pc, #92]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d2:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MSIZE_1;	// Memory data size = 32 bit
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016de:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_PSIZE_1;	// Peripheral data size = 32 bit
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ea:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_MINC;	// Increment memory address pointer
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0e      	ldr	r2, [pc, #56]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f6:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->CR |= DMA_SxCR_TCIE;	// Transfer complete interrupt enable
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	6013      	str	r3, [r2, #0]
	DMA2_Stream1->NDTR = 4*ADC_NUMS;	// Number of data items to transfer
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 8001706:	22f0      	movs	r2, #240	; 0xf0
 8001708:	605a      	str	r2, [r3, #4]
	DMA2_Stream1->PAR = (uint32_t)&ADC3->DR;	// Peripheral register address
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 800170c:	4a09      	ldr	r2, [pc, #36]	; (8001734 <ADC3_IN13_IN4_scan_init+0x148>)
 800170e:	609a      	str	r2, [r3, #8]
	DMA2_Stream1->M0AR = (uint32_t)ADC_samples;	// Buffer memory loc. address
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <ADC3_IN13_IN4_scan_init+0x140>)
 8001712:	4a09      	ldr	r2, [pc, #36]	; (8001738 <ADC3_IN13_IN4_scan_init+0x14c>)
 8001714:	60da      	str	r2, [r3, #12]

}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800
 8001728:	40012200 	.word	0x40012200
 800172c:	40026428 	.word	0x40026428
 8001730:	40026400 	.word	0x40026400
 8001734:	4001224c 	.word	0x4001224c
 8001738:	20000218 	.word	0x20000218

0800173c <ADC3_IN13_IN4_scan_start>:
/** ***************************************************************************
 * @brief Start DMA, ADC and timer
 *
 *****************************************************************************/
void ADC3_IN13_IN4_scan_start(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	DMA2_Stream1->CR |= DMA_SxCR_EN;	// Enable DMA
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0c      	ldr	r2, [pc, #48]	; (8001778 <ADC3_IN13_IN4_scan_start+0x3c>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);	// Clear pending DMA interrupt
 800174c:	2039      	movs	r0, #57	; 0x39
 800174e:	f7ff fd51 	bl	80011f4 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(DMA2_Stream1_IRQn);	// Enable DMA interrupt in the NVIC
 8001752:	2039      	movs	r0, #57	; 0x39
 8001754:	f7ff fd0c 	bl	8001170 <__NVIC_EnableIRQ>
	ADC3->CR2 |= ADC_CR2_ADON;			// Enable ADC3
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <ADC3_IN13_IN4_scan_start+0x40>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <ADC3_IN13_IN4_scan_start+0x40>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6093      	str	r3, [r2, #8]
	TIM2->CR1 |= TIM_CR1_CEN;			// Enable timer
 8001764:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800176e:	f043 0301 	orr.w	r3, r3, #1
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40026428 	.word	0x40026428
 800177c:	40012200 	.word	0x40012200

08001780 <TIM2_IRQHandler>:
 *
 * @note This interrupt handler was only used for debugging purposes
 * and to increment the DAC value.
 *****************************************************************************/
void TIM2_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF;			// Clear pending interrupt flag
 8001784:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	6113      	str	r3, [r2, #16]
	if (DAC_active) {
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <TIM2_IRQHandler+0x24>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <TIM2_IRQHandler+0x20>
		DAC_increment();
 800179c:	f7ff feb6 	bl	800150c <DAC_increment>
	}
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000211 	.word	0x20000211

080017a8 <ADC_IRQHandler>:
 *
 * Reads one sample from the ADC3 DataRegister and transfers it to a buffer.
 * @n Stops when ADC_NUMS samples have been read.
 *****************************************************************************/
void ADC_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	if (ADC3->SR & ADC_SR_EOC) {		// Check if ADC3 end of conversion
 80017ac:	4b14      	ldr	r3, [pc, #80]	; (8001800 <ADC_IRQHandler+0x58>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d020      	beq.n	80017fa <ADC_IRQHandler+0x52>
		ADC_samples[ADC_sample_count++] = ADC3->DR;	// Read input channel 1 only
 80017b8:	4911      	ldr	r1, [pc, #68]	; (8001800 <ADC_IRQHandler+0x58>)
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <ADC_IRQHandler+0x5c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	4810      	ldr	r0, [pc, #64]	; (8001804 <ADC_IRQHandler+0x5c>)
 80017c2:	6002      	str	r2, [r0, #0]
 80017c4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80017c6:	4910      	ldr	r1, [pc, #64]	; (8001808 <ADC_IRQHandler+0x60>)
 80017c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (ADC_sample_count >= ADC_NUMS) {		// Buffer full
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <ADC_IRQHandler+0x5c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b3b      	cmp	r3, #59	; 0x3b
 80017d2:	d912      	bls.n	80017fa <ADC_IRQHandler+0x52>
			TIM2->CR1 &= ~TIM_CR1_CEN;	// Disable timer
 80017d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6013      	str	r3, [r2, #0]
			ADC3->CR2 &= ~ADC_CR2_ADON;	// Disable ADC3
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <ADC_IRQHandler+0x58>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a05      	ldr	r2, [pc, #20]	; (8001800 <ADC_IRQHandler+0x58>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	6093      	str	r3, [r2, #8]
			ADC_reset();
 80017f0:	f7ff fea8 	bl	8001544 <ADC_reset>
			MEAS_data_ready = true;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <ADC_IRQHandler+0x64>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
		}

	}
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40012200 	.word	0x40012200
 8001804:	20000214 	.word	0x20000214
 8001808:	20000218 	.word	0x20000218
 800180c:	20000210 	.word	0x20000210

08001810 <DMA2_Stream1_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream1_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF1) {	// Stream1 transfer compl. interrupt f.
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <DMA2_Stream1_IRQHandler+0x78>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800181c:	2b00      	cmp	r3, #0
 800181e:	d031      	beq.n	8001884 <DMA2_Stream1_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream1_IRQn);	// Disable DMA interrupt in the NVIC
 8001820:	2039      	movs	r0, #57	; 0x39
 8001822:	f7ff fcc3 	bl	80011ac <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream1_IRQn);// Clear pending DMA interrupt
 8001826:	2039      	movs	r0, #57	; 0x39
 8001828:	f7ff fce4 	bl	80011f4 <__NVIC_ClearPendingIRQ>
		DMA2_Stream1->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 800182c:	4b17      	ldr	r3, [pc, #92]	; (800188c <DMA2_Stream1_IRQHandler+0x7c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a16      	ldr	r2, [pc, #88]	; (800188c <DMA2_Stream1_IRQHandler+0x7c>)
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream1->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001838:	bf00      	nop
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <DMA2_Stream1_IRQHandler+0x7c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f9      	bne.n	800183a <DMA2_Stream1_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF1;// Clear transfer complete interrupt fl.
 8001846:	4b10      	ldr	r3, [pc, #64]	; (8001888 <DMA2_Stream1_IRQHandler+0x78>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <DMA2_Stream1_IRQHandler+0x78>)
 800184c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001850:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001852:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	6013      	str	r3, [r2, #0]
		ADC3->CR2 &= ~ADC_CR2_ADON;		// Disable ADC3
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <DMA2_Stream1_IRQHandler+0x80>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	4a0a      	ldr	r2, [pc, #40]	; (8001890 <DMA2_Stream1_IRQHandler+0x80>)
 8001868:	f023 0301 	bic.w	r3, r3, #1
 800186c:	6093      	str	r3, [r2, #8]
		ADC3->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <DMA2_Stream1_IRQHandler+0x80>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <DMA2_Stream1_IRQHandler+0x80>)
 8001874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001878:	6093      	str	r3, [r2, #8]
		ADC_reset();
 800187a:	f7ff fe63 	bl	8001544 <ADC_reset>
		MEAS_data_ready = true;
 800187e:	4b05      	ldr	r3, [pc, #20]	; (8001894 <DMA2_Stream1_IRQHandler+0x84>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
	}
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40026400 	.word	0x40026400
 800188c:	40026428 	.word	0x40026428
 8001890:	40012200 	.word	0x40012200
 8001894:	20000210 	.word	0x20000210

08001898 <DMA2_Stream3_IRQHandler>:
 *
 * The samples from the ADC3 have been transfered to memory by the DMA2 Stream1
 * and are ready for processing.
 *****************************************************************************/
void DMA2_Stream3_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	if (DMA2->LISR & DMA_LISR_TCIF3) {	// Stream3 transfer compl. interrupt f.
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <DMA2_Stream3_IRQHandler+0x78>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d031      	beq.n	800190c <DMA2_Stream3_IRQHandler+0x74>
		NVIC_DisableIRQ(DMA2_Stream3_IRQn);	// Disable DMA interrupt in the NVIC
 80018a8:	203b      	movs	r0, #59	; 0x3b
 80018aa:	f7ff fc7f 	bl	80011ac <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream3_IRQn);// Clear pending DMA interrupt
 80018ae:	203b      	movs	r0, #59	; 0x3b
 80018b0:	f7ff fca0 	bl	80011f4 <__NVIC_ClearPendingIRQ>
		DMA2_Stream3->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <DMA2_Stream3_IRQHandler+0x7c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a16      	ldr	r2, [pc, #88]	; (8001914 <DMA2_Stream3_IRQHandler+0x7c>)
 80018ba:	f023 0301 	bic.w	r3, r3, #1
 80018be:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream3->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 80018c0:	bf00      	nop
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <DMA2_Stream3_IRQHandler+0x7c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f9      	bne.n	80018c2 <DMA2_Stream3_IRQHandler+0x2a>
		DMA2->LIFCR |= DMA_LIFCR_CTCIF3;// Clear transfer complete interrupt fl.
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <DMA2_Stream3_IRQHandler+0x78>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	4a0f      	ldr	r2, [pc, #60]	; (8001910 <DMA2_Stream3_IRQHandler+0x78>)
 80018d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018d8:	6093      	str	r3, [r2, #8]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 80018da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6013      	str	r3, [r2, #0]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <DMA2_Stream3_IRQHandler+0x80>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <DMA2_Stream3_IRQHandler+0x80>)
 80018f0:	f023 0301 	bic.w	r3, r3, #1
 80018f4:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_DMA;		// Disable DMA mode
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <DMA2_Stream3_IRQHandler+0x80>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <DMA2_Stream3_IRQHandler+0x80>)
 80018fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001900:	6093      	str	r3, [r2, #8]
		ADC_reset();
 8001902:	f7ff fe1f 	bl	8001544 <ADC_reset>
		MEAS_data_ready = true;
 8001906:	4b05      	ldr	r3, [pc, #20]	; (800191c <DMA2_Stream3_IRQHandler+0x84>)
 8001908:	2201      	movs	r2, #1
 800190a:	701a      	strb	r2, [r3, #0]
	}
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40026400 	.word	0x40026400
 8001914:	40026458 	.word	0x40026458
 8001918:	40012100 	.word	0x40012100
 800191c:	20000210 	.word	0x20000210

08001920 <DMA2_Stream4_IRQHandler>:
 * @note In dual ADC mode two values are combined (packed) in a single uint32_t
 * ADC_CDR[31:0] = ADC2_DR[15:0] | ADC1_DR[15:0]
 * and are therefore extracted before further processing.
 *****************************************************************************/
void DMA2_Stream4_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	if (DMA2->HISR & DMA_HISR_TCIF4) {	// Stream4 transfer compl. interrupt f.
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <DMA2_Stream4_IRQHandler+0x84>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0320 	and.w	r3, r3, #32
 800192c:	2b00      	cmp	r3, #0
 800192e:	d037      	beq.n	80019a0 <DMA2_Stream4_IRQHandler+0x80>
		NVIC_DisableIRQ(DMA2_Stream4_IRQn);	// Disable DMA interrupt in the NVIC
 8001930:	203c      	movs	r0, #60	; 0x3c
 8001932:	f7ff fc3b 	bl	80011ac <__NVIC_DisableIRQ>
		NVIC_ClearPendingIRQ(DMA2_Stream4_IRQn);// Clear pending DMA interrupt
 8001936:	203c      	movs	r0, #60	; 0x3c
 8001938:	f7ff fc5c 	bl	80011f4 <__NVIC_ClearPendingIRQ>
		DMA2_Stream4->CR &= ~DMA_SxCR_EN;	// Disable the DMA
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <DMA2_Stream4_IRQHandler+0x88>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <DMA2_Stream4_IRQHandler+0x88>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	6013      	str	r3, [r2, #0]
		while (DMA2_Stream4->CR & DMA_SxCR_EN) { ; }	// Wait for DMA to finish
 8001948:	bf00      	nop
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <DMA2_Stream4_IRQHandler+0x88>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f9      	bne.n	800194a <DMA2_Stream4_IRQHandler+0x2a>
		DMA2->HIFCR |= DMA_HIFCR_CTCIF4;// Clear transfer complete interrupt fl.
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <DMA2_Stream4_IRQHandler+0x84>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <DMA2_Stream4_IRQHandler+0x84>)
 800195c:	f043 0320 	orr.w	r3, r3, #32
 8001960:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 &= ~TIM_CR1_CEN;		// Disable timer
 8001962:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	6013      	str	r3, [r2, #0]
		ADC1->CR2 &= ~ADC_CR2_ADON;		// Disable ADC1
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <DMA2_Stream4_IRQHandler+0x8c>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <DMA2_Stream4_IRQHandler+0x8c>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6093      	str	r3, [r2, #8]
		ADC2->CR2 &= ~ADC_CR2_ADON;		// Disable ADC2
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <DMA2_Stream4_IRQHandler+0x90>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <DMA2_Stream4_IRQHandler+0x90>)
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6093      	str	r3, [r2, #8]
		ADC->CCR &= ~ADC_CCR_DMA_1;		// Disable DMA mode
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <DMA2_Stream4_IRQHandler+0x94>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4a09      	ldr	r2, [pc, #36]	; (80019b4 <DMA2_Stream4_IRQHandler+0x94>)
 8001990:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001994:	6053      	str	r3, [r2, #4]
		ADC_reset();
 8001996:	f7ff fdd5 	bl	8001544 <ADC_reset>
		MEAS_data_ready = true;
 800199a:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <DMA2_Stream4_IRQHandler+0x98>)
 800199c:	2201      	movs	r2, #1
 800199e:	701a      	strb	r2, [r3, #0]
	}
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40026400 	.word	0x40026400
 80019a8:	40026470 	.word	0x40026470
 80019ac:	40012000 	.word	0x40012000
 80019b0:	40012100 	.word	0x40012100
 80019b4:	40012300 	.word	0x40012300
 80019b8:	20000210 	.word	0x20000210

080019bc <MEAS_show_data>:
 * The code of this function was put into the same file for debugging purposes
 * and should be moved to a separate file in the final version
 * because displaying is not related to measuring.
 *****************************************************************************/
void MEAS_show_data(void)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b095      	sub	sp, #84	; 0x54
 80019c0:	af00      	add	r7, sp, #0
	const uint32_t Y_OFFSET = 260;
 80019c2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019c6:	637b      	str	r3, [r7, #52]	; 0x34
	const uint32_t X_SIZE = 240;
 80019c8:	23f0      	movs	r3, #240	; 0xf0
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
	const uint32_t f = (1 << ADC_DAC_RES) / Y_OFFSET + 1;	// Scaling factor
 80019cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t data;
	uint32_t data_last;
	/* Clear the display */
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80019da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019de:	f001 fda3 	bl	8003528 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(0, 0, X_SIZE, Y_OFFSET+1);
 80019e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	2100      	movs	r1, #0
 80019f0:	2000      	movs	r0, #0
 80019f2:	f001 ffd9 	bl	80039a8 <BSP_LCD_FillRect>
	/* Write first 2 samples as numbers */
	BSP_LCD_SetFont(&Font24);
 80019f6:	48a0      	ldr	r0, [pc, #640]	; (8001c78 <MEAS_show_data+0x2bc>)
 80019f8:	f001 fdc8 	bl	800358c <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a00:	f001 fdaa 	bl	8003558 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001a04:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001a08:	f001 fd8e 	bl	8003528 <BSP_LCD_SetTextColor>



	// Calculate Root Mean Square for each coil array and display average of those
	//int32_t RMS1 = rootMeanSquare(coil_left);
	int32_t RMS2 = rootMeanSquare(coil_right);
 8001a0c:	489b      	ldr	r0, [pc, #620]	; (8001c7c <MEAS_show_data+0x2c0>)
 8001a0e:	f7ff fc57 	bl	80012c0 <rootMeanSquare>
 8001a12:	62b8      	str	r0, [r7, #40]	; 0x28
	snprintf(text, 15, "RMS coils%4ld",averageOfTwoArrays(RMS2, RMS2));
 8001a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a18:	f7ff fcc8 	bl	80013ac <averageOfTwoArrays>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	1d38      	adds	r0, r7, #4
 8001a20:	4a97      	ldr	r2, [pc, #604]	; (8001c80 <MEAS_show_data+0x2c4>)
 8001a22:	210f      	movs	r1, #15
 8001a24:	f006 fece 	bl	80087c4 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 50, (uint8_t *) text, LEFT_MODE);
 8001a28:	1d3a      	adds	r2, r7, #4
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	2132      	movs	r1, #50	; 0x32
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f001 fe32 	bl	8003698 <BSP_LCD_DisplayStringAt>

	// Calculate Root Mean Square for each pad array and display average of those
	int32_t RMS3 = rootMeanSquare(pad_left);
 8001a34:	4893      	ldr	r0, [pc, #588]	; (8001c84 <MEAS_show_data+0x2c8>)
 8001a36:	f7ff fc43 	bl	80012c0 <rootMeanSquare>
 8001a3a:	6278      	str	r0, [r7, #36]	; 0x24
	int32_t RMS4 = rootMeanSquare(pad_right);
 8001a3c:	4892      	ldr	r0, [pc, #584]	; (8001c88 <MEAS_show_data+0x2cc>)
 8001a3e:	f7ff fc3f 	bl	80012c0 <rootMeanSquare>
 8001a42:	6238      	str	r0, [r7, #32]
	snprintf(text, 15, "RMS pads %4ld",averageOfTwoArrays(RMS3, RMS4));
 8001a44:	6a39      	ldr	r1, [r7, #32]
 8001a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001a48:	f7ff fcb0 	bl	80013ac <averageOfTwoArrays>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	1d38      	adds	r0, r7, #4
 8001a50:	4a8e      	ldr	r2, [pc, #568]	; (8001c8c <MEAS_show_data+0x2d0>)
 8001a52:	210f      	movs	r1, #15
 8001a54:	f006 feb6 	bl	80087c4 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 80, (uint8_t *) text, LEFT_MODE);
 8001a58:	1d3a      	adds	r2, r7, #4
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	2150      	movs	r1, #80	; 0x50
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f001 fe1a 	bl	8003698 <BSP_LCD_DisplayStringAt>

	// Display distance to the wire
	int32_t value = averageOfTwoArrays(RMS2, RMS2);
 8001a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001a68:	f7ff fca0 	bl	80013ac <averageOfTwoArrays>
 8001a6c:	61f8      	str	r0, [r7, #28]
	int32_t distance = findDistance(value);
 8001a6e:	69f8      	ldr	r0, [r7, #28]
 8001a70:	f7ff fcb0 	bl	80013d4 <findDistance>
 8001a74:	61b8      	str	r0, [r7, #24]
	snprintf(text, 19, "distance %4ld", distance);
 8001a76:	1d38      	adds	r0, r7, #4
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	4a85      	ldr	r2, [pc, #532]	; (8001c90 <MEAS_show_data+0x2d4>)
 8001a7c:	2113      	movs	r1, #19
 8001a7e:	f006 fea1 	bl	80087c4 <sniprintf>
	BSP_LCD_DisplayStringAt(0, 110, (uint8_t *) text, LEFT_MODE);
 8001a82:	1d3a      	adds	r2, r7, #4
 8001a84:	2303      	movs	r3, #3
 8001a86:	216e      	movs	r1, #110	; 0x6e
 8001a88:	2000      	movs	r0, #0
 8001a8a:	f001 fe05 	bl	8003698 <BSP_LCD_DisplayStringAt>




	/* Draw the  values of input pad_left as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001a8e:	4881      	ldr	r0, [pc, #516]	; (8001c94 <MEAS_show_data+0x2d8>)
 8001a90:	f001 fd4a 	bl	8003528 <BSP_LCD_SetTextColor>
	data = pad_left[0] / f;
 8001a94:	4b7b      	ldr	r3, [pc, #492]	; (8001c84 <MEAS_show_data+0x2c8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aa6:	e02b      	b.n	8001b00 <MEAS_show_data+0x144>
		data_last = data;
 8001aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aaa:	617b      	str	r3, [r7, #20]
		data = (pad_left[i]) / f;
 8001aac:	4a75      	ldr	r2, [pc, #468]	; (8001c84 <MEAS_show_data+0x2c8>)
 8001aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001abe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d901      	bls.n	8001aca <MEAS_show_data+0x10e>
 8001ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8001aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001acc:	3b01      	subs	r3, #1
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	b298      	uxth	r0, r3
 8001ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	b299      	uxth	r1, r3
 8001ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	b29c      	uxth	r4, r3
 8001ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	4622      	mov	r2, r4
 8001af6:	f001 fe8d 	bl	8003814 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8001afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001afc:	3301      	adds	r3, #1
 8001afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b02:	2b3b      	cmp	r3, #59	; 0x3b
 8001b04:	d9d0      	bls.n	8001aa8 <MEAS_show_data+0xec>
	}

	/* Draw the  values of input pad_right as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001b06:	4864      	ldr	r0, [pc, #400]	; (8001c98 <MEAS_show_data+0x2dc>)
 8001b08:	f001 fd0e 	bl	8003528 <BSP_LCD_SetTextColor>
	data = pad_right[0] / f;
 8001b0c:	4b5e      	ldr	r3, [pc, #376]	; (8001c88 <MEAS_show_data+0x2cc>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8001b1e:	e02b      	b.n	8001b78 <MEAS_show_data+0x1bc>
		data_last = data;
 8001b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b22:	617b      	str	r3, [r7, #20]
		data = (pad_right[i]) / f;
 8001b24:	4a58      	ldr	r2, [pc, #352]	; (8001c88 <MEAS_show_data+0x2cc>)
 8001b26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d901      	bls.n	8001b42 <MEAS_show_data+0x186>
 8001b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b40:	64fb      	str	r3, [r7, #76]	; 0x4c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8001b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	b298      	uxth	r0, r3
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	b299      	uxth	r1, r3
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	b29c      	uxth	r4, r3
 8001b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	4622      	mov	r2, r4
 8001b6e:	f001 fe51 	bl	8003814 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8001b72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b74:	3301      	adds	r3, #1
 8001b76:	647b      	str	r3, [r7, #68]	; 0x44
 8001b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7a:	2b3b      	cmp	r3, #59	; 0x3b
 8001b7c:	d9d0      	bls.n	8001b20 <MEAS_show_data+0x164>
	}

	/* Draw the  values of input coil_left as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001b7e:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001b82:	f001 fcd1 	bl	8003528 <BSP_LCD_SetTextColor>
	data = coil_left[0] / f;
 8001b86:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <MEAS_show_data+0x2e0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8001b94:	2301      	movs	r3, #1
 8001b96:	643b      	str	r3, [r7, #64]	; 0x40
 8001b98:	e02b      	b.n	8001bf2 <MEAS_show_data+0x236>
		data_last = data;
 8001b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b9c:	617b      	str	r3, [r7, #20]
		data = (coil_left[i]) / f;
 8001b9e:	4a3f      	ldr	r2, [pc, #252]	; (8001c9c <MEAS_show_data+0x2e0>)
 8001ba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001bb0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d901      	bls.n	8001bbc <MEAS_show_data+0x200>
 8001bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bba:	64fb      	str	r3, [r7, #76]	; 0x4c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8001bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	b298      	uxth	r0, r3
 8001bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	b299      	uxth	r1, r3
 8001bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	b29c      	uxth	r4, r3
 8001bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	4622      	mov	r2, r4
 8001be8:	f001 fe14 	bl	8003814 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8001bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bee:	3301      	adds	r3, #1
 8001bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8001bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bf4:	2b3b      	cmp	r3, #59	; 0x3b
 8001bf6:	d9d0      	bls.n	8001b9a <MEAS_show_data+0x1de>
	}

	/* Draw the  values of input coil_right as a curve */
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001bf8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001bfc:	f001 fc94 	bl	8003528 <BSP_LCD_SetTextColor>
	data = coil_right[0] / f;
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <MEAS_show_data+0x2c0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
	for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8001c0e:	2301      	movs	r3, #1
 8001c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c12:	e02b      	b.n	8001c6c <MEAS_show_data+0x2b0>
		data_last = data;
 8001c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c16:	617b      	str	r3, [r7, #20]
		data = (coil_right[i]) / f;
 8001c18:	4a18      	ldr	r2, [pc, #96]	; (8001c7c <MEAS_show_data+0x2c0>)
 8001c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	461a      	mov	r2, r3
 8001c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c28:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (data > Y_OFFSET) { data = Y_OFFSET; }// Limit value, prevent crash
 8001c2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d901      	bls.n	8001c36 <MEAS_show_data+0x27a>
 8001c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c34:	64fb      	str	r3, [r7, #76]	; 0x4c
		BSP_LCD_DrawLine(4*(i-1), Y_OFFSET-data_last, 4*i, Y_OFFSET-data);
 8001c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	b298      	uxth	r0, r3
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	b299      	uxth	r1, r3
 8001c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	b29c      	uxth	r4, r3
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	4622      	mov	r2, r4
 8001c62:	f001 fdd7 	bl	8003814 <BSP_LCD_DrawLine>
	for (uint32_t i = 1; i < ADC_NUMS; i++) {
 8001c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c68:	3301      	adds	r3, #1
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c6e:	2b3b      	cmp	r3, #59	; 0x3b
 8001c70:	d9d0      	bls.n	8001c14 <MEAS_show_data+0x258>
	}

	/* Clear buffer and flag */
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 8001c72:	2300      	movs	r3, #0
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c76:	e023      	b.n	8001cc0 <MEAS_show_data+0x304>
 8001c78:	2000016c 	.word	0x2000016c
 8001c7c:	200008ac 	.word	0x200008ac
 8001c80:	08009f98 	.word	0x08009f98
 8001c84:	200005dc 	.word	0x200005dc
 8001c88:	200006cc 	.word	0x200006cc
 8001c8c:	08009fa8 	.word	0x08009fa8
 8001c90:	08009fb8 	.word	0x08009fb8
 8001c94:	ff0000ff 	.word	0xff0000ff
 8001c98:	ffff0000 	.word	0xffff0000
 8001c9c:	200007bc 	.word	0x200007bc
		ADC_samples[2*i] = 0;
 8001ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4a0b      	ldr	r2, [pc, #44]	; (8001cd4 <MEAS_show_data+0x318>)
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		ADC_samples[2*i+1] = 0;
 8001cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <MEAS_show_data+0x318>)
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < ADC_NUMS; i++){
 8001cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc2:	2b3b      	cmp	r3, #59	; 0x3b
 8001cc4:	d9ec      	bls.n	8001ca0 <MEAS_show_data+0x2e4>
	}
	ADC_sample_count = 0;
 8001cc6:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <MEAS_show_data+0x31c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	3754      	adds	r7, #84	; 0x54
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}
 8001cd4:	20000218 	.word	0x20000218
 8001cd8:	20000214 	.word	0x20000214

08001cdc <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 8001ce2:	4852      	ldr	r0, [pc, #328]	; (8001e2c <MENU_draw+0x150>)
 8001ce4:	f001 fc52 	bl	800358c <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8001ce8:	f001 fb9e 	bl	8003428 <BSP_LCD_GetYSize>
 8001cec:	4603      	mov	r3, r0
 8001cee:	3b28      	subs	r3, #40	; 0x28
 8001cf0:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8001cf6:	f001 fb8b 	bl	8003410 <BSP_LCD_GetXSize>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	; (8001e30 <MENU_draw+0x154>)
 8001cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 8001d06:	2328      	movs	r3, #40	; 0x28
 8001d08:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	e084      	b.n	8001e1a <MENU_draw+0x13e>
		x = i*w;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	fb02 f303 	mul.w	r3, r2, r3
 8001d18:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8001d1a:	4946      	ldr	r1, [pc, #280]	; (8001e34 <MENU_draw+0x158>)
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	440b      	add	r3, r1
 8001d28:	3324      	adds	r3, #36	; 0x24
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f001 fbfb 	bl	8003528 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b298      	uxth	r0, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	b299      	uxth	r1, r3
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	b29c      	uxth	r4, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4622      	mov	r2, r4
 8001d6c:	f001 fe1c 	bl	80039a8 <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 8001d70:	4930      	ldr	r1, [pc, #192]	; (8001e34 <MENU_draw+0x158>)
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3324      	adds	r3, #36	; 0x24
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fbe8 	bl	8003558 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8001d88:	492a      	ldr	r1, [pc, #168]	; (8001e34 <MENU_draw+0x158>)
 8001d8a:	697a      	ldr	r2, [r7, #20]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	3320      	adds	r3, #32
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f001 fbc4 	bl	8003528 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	461a      	mov	r2, r3
 8001da6:	0052      	lsls	r2, r2, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4413      	add	r3, r2
 8001db2:	b298      	uxth	r0, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	0052      	lsls	r2, r2, #1
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	4413      	add	r3, r2
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <MENU_draw+0x158>)
 8001dd4:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f001 fc5e 	bl	8003698 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	461a      	mov	r2, r3
 8001de2:	0052      	lsls	r2, r2, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	b298      	uxth	r0, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	085b      	lsrs	r3, r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	3310      	adds	r3, #16
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <MENU_draw+0x158>)
 8001e0c:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8001e0e:	2303      	movs	r3, #3
 8001e10:	f001 fc42 	bl	8003698 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b05      	cmp	r3, #5
 8001e1e:	f67f af77 	bls.w	8001d10 <MENU_draw+0x34>
	}
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}
 8001e2c:	2000017c 	.word	0x2000017c
 8001e30:	aaaaaaab 	.word	0xaaaaaaab
 8001e34:	20000004 	.word	0x20000004

08001e38 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e40:	f001 fb8a 	bl	8003558 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001e44:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001e48:	f001 fb6e 	bl	8003528 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 8001e4c:	4818      	ldr	r0, [pc, #96]	; (8001eb0 <MENU_hint+0x78>)
 8001e4e:	f001 fb9d 	bl	800358c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"DEMO-CODE", LEFT_MODE);
 8001e52:	2303      	movs	r3, #3
 8001e54:	4a17      	ldr	r2, [pc, #92]	; (8001eb4 <MENU_hint+0x7c>)
 8001e56:	210a      	movs	r1, #10
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f001 fc1d 	bl	8003698 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 8001e5e:	4816      	ldr	r0, [pc, #88]	; (8001eb8 <MENU_hint+0x80>)
 8001e60:	f001 fb94 	bl	800358c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item", LEFT_MODE);
 8001e64:	2303      	movs	r3, #3
 8001e66:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <MENU_hint+0x84>)
 8001e68:	213c      	movs	r1, #60	; 0x3c
 8001e6a:	2005      	movs	r0, #5
 8001e6c:	f001 fc14 	bl	8003698 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start an ADC demo", LEFT_MODE);
 8001e70:	2303      	movs	r3, #3
 8001e72:	4a13      	ldr	r2, [pc, #76]	; (8001ec0 <MENU_hint+0x88>)
 8001e74:	2150      	movs	r1, #80	; 0x50
 8001e76:	2005      	movs	r0, #5
 8001e78:	f001 fc0e 	bl	8003698 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 110, (uint8_t *)"Switch DAC on/off", LEFT_MODE);
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <MENU_hint+0x8c>)
 8001e80:	216e      	movs	r1, #110	; 0x6e
 8001e82:	2005      	movs	r0, #5
 8001e84:	f001 fc08 	bl	8003698 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 130, (uint8_t *)"with blue pushbutton", LEFT_MODE);
 8001e88:	2303      	movs	r3, #3
 8001e8a:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <MENU_hint+0x90>)
 8001e8c:	2182      	movs	r1, #130	; 0x82
 8001e8e:	2005      	movs	r0, #5
 8001e90:	f001 fc02 	bl	8003698 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"(c) hhrt@zhaw.ch", LEFT_MODE);
 8001e94:	2303      	movs	r3, #3
 8001e96:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <MENU_hint+0x94>)
 8001e98:	21a0      	movs	r1, #160	; 0xa0
 8001e9a:	2005      	movs	r0, #5
 8001e9c:	f001 fbfc 	bl	8003698 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 160, (uint8_t *)"Version 27.09.2022", LEFT_MODE);
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <MENU_hint+0x98>)
 8001ea4:	21a0      	movs	r1, #160	; 0xa0
 8001ea6:	2005      	movs	r0, #5
 8001ea8:	f001 fbf6 	bl	8003698 <BSP_LCD_DisplayStringAt>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	2000016c 	.word	0x2000016c
 8001eb4:	08009fc8 	.word	0x08009fc8
 8001eb8:	20000174 	.word	0x20000174
 8001ebc:	08009fd4 	.word	0x08009fd4
 8001ec0:	08009fe8 	.word	0x08009fe8
 8001ec4:	0800a000 	.word	0x0800a000
 8001ec8:	0800a014 	.word	0x0800a014
 8001ecc:	0800a02c 	.word	0x0800a02c
 8001ed0:	0800a040 	.word	0x0800a040

08001ed4 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <MENU_get_transition+0x20>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <MENU_get_transition+0x20>)
 8001ee2:	2206      	movs	r2, #6
 8001ee4:	701a      	strb	r2, [r3, #0]
	return item;
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	20000000 	.word	0x20000000

08001ef8 <MENU_check_transition>:
 * @note  Evalboard revision E (blue PCB) has an inverted y-axis
 * in the touch controller compared to the display.
 * Uncomment or comment the <b>\#define EVAL_REV_E</b> in main.h accordingly.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8001ef8:	b598      	push	{r3, r4, r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8001efc:	4830      	ldr	r0, [pc, #192]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001efe:	f002 f9fd 	bl	80042fc <BSP_TS_GetState>


// Evalboard revision E (blue) has an inverted y-axis in the touch controller
#ifdef EVAL_REV_E
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001f02:	f001 fa91 	bl	8003428 <BSP_LCD_GetYSize>
 8001f06:	4603      	mov	r3, r0
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	4b2d      	ldr	r3, [pc, #180]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001f0c:	889b      	ldrh	r3, [r3, #4]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b2b      	ldr	r3, [pc, #172]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001f14:	809a      	strh	r2, [r3, #4]
#endif
	// Invert x- and y-axis if LCD ist flipped
#ifdef FLIPPED_LCD
	TS_State.X = BSP_LCD_GetXSize() - TS_State.X;	// Invert the x-axis
 8001f16:	f001 fa7b 	bl	8003410 <BSP_LCD_GetXSize>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001f20:	885b      	ldrh	r3, [r3, #2]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001f28:	805a      	strh	r2, [r3, #2]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
 8001f2a:	f001 fa7d 	bl	8003428 <BSP_LCD_GetYSize>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001f34:	889b      	ldrh	r3, [r3, #4]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001f3c:	809a      	strh	r2, [r3, #4]
	TS_State.Y = BSP_LCD_GetYSize() - TS_State.Y;	// Invert the y-axis
#endif
#ifdef EVAL_REV_E
#endif
*/
	if (TS_State.TouchDetected) {		// If a touch was detected
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d039      	beq.n	8001fba <MENU_check_transition+0xc2>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8001f46:	4b1f      	ldr	r3, [pc, #124]	; (8001fc4 <MENU_check_transition+0xcc>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d135      	bne.n	8001fba <MENU_check_transition+0xc2>
			item_old = item_new;		// Store old item
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <MENU_check_transition+0xd0>)
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	4b1e      	ldr	r3, [pc, #120]	; (8001fcc <MENU_check_transition+0xd4>)
 8001f54:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8001f56:	f001 fa67 	bl	8003428 <BSP_LCD_GetYSize>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	3b28      	subs	r3, #40	; 0x28
 8001f5e:	4a18      	ldr	r2, [pc, #96]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001f60:	8892      	ldrh	r2, [r2, #4]
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d229      	bcs.n	8001fba <MENU_check_transition+0xc2>
 8001f66:	f001 fa5f 	bl	8003428 <BSP_LCD_GetYSize>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001f6e:	8892      	ldrh	r2, [r2, #4]
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d922      	bls.n	8001fba <MENU_check_transition+0xc2>
				item_new = TS_State.X	// Calculate new item
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <MENU_check_transition+0xc8>)
 8001f76:	885b      	ldrh	r3, [r3, #2]
 8001f78:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 8001f7a:	f001 fa49 	bl	8003410 <BSP_LCD_GetXSize>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	4a13      	ldr	r2, [pc, #76]	; (8001fd0 <MENU_check_transition+0xd8>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	fbb4 f3f3 	udiv	r3, r4, r3
 8001f8c:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <MENU_check_transition+0xd0>)
 8001f90:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <MENU_check_transition+0xd0>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d902      	bls.n	8001fa0 <MENU_check_transition+0xa8>
					item_new = MENU_NONE;	// Out of bounds
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	; (8001fc8 <MENU_check_transition+0xd0>)
 8001f9c:	2206      	movs	r2, #6
 8001f9e:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MENU_check_transition+0xd0>)
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <MENU_check_transition+0xd4>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d106      	bne.n	8001fba <MENU_check_transition+0xc2>
					item_new = MENU_NONE;
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MENU_check_transition+0xd0>)
 8001fae:	2206      	movs	r2, #6
 8001fb0:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <MENU_check_transition+0xd4>)
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <MENU_check_transition+0xcc>)
 8001fb8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 8001fba:	bf00      	nop
 8001fbc:	bd98      	pop	{r3, r4, r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000099c 	.word	0x2000099c
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	200000f4 	.word	0x200000f4
 8001fcc:	200000f5 	.word	0x200000f5
 8001fd0:	aaaaaaab 	.word	0xaaaaaaab

08001fd4 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <EXTI15_10_IRQHandler+0x40>)
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d014      	beq.n	800200e <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <EXTI15_10_IRQHandler+0x40>)
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <EXTI15_10_IRQHandler+0x40>)
 8001fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fee:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 8001ff0:	f002 f978 	bl	80042e4 <BSP_TS_ITGetStatus>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 8001ffa:	f002 fa31 	bl	8004460 <BSP_TS_ITClear>
			MENU_check_transition();
 8001ffe:	f7ff ff7b 	bl	8001ef8 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <EXTI15_10_IRQHandler+0x40>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	4a03      	ldr	r2, [pc, #12]	; (8002014 <EXTI15_10_IRQHandler+0x40>)
 8002008:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200c:	6153      	str	r3, [r2, #20]
	}
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40013c00 	.word	0x40013c00

08002018 <__NVIC_EnableIRQ>:
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db0b      	blt.n	8002042 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	4907      	ldr	r1, [pc, #28]	; (8002050 <__NVIC_EnableIRQ+0x38>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2001      	movs	r0, #1
 800203a:	fa00 f202 	lsl.w	r2, r0, r2
 800203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000e100 	.word	0xe000e100

08002054 <__NVIC_ClearPendingIRQ>:
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0c      	blt.n	8002080 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_ClearPendingIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	3360      	adds	r3, #96	; 0x60
 800207c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000e100 	.word	0xe000e100

08002090 <PB_init>:
 * @brief Configure the GPIO for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_init(void)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();		// Enable Clock for GPIO port A
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <PB_init+0x38>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <PB_init+0x38>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6313      	str	r3, [r2, #48]	; 0x30
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <PB_init+0x38>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
	GPIOA->MODER |= (0u << GPIO_MODER_MODER0_Pos);	// Pin 0 of port A = input
 80020b2:	4b06      	ldr	r3, [pc, #24]	; (80020cc <PB_init+0x3c>)
 80020b4:	4a05      	ldr	r2, [pc, #20]	; (80020cc <PB_init+0x3c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6013      	str	r3, [r2, #0]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020000 	.word	0x40020000

080020d0 <PB_enableIRQ>:
 * @brief Configure interrupt on rising edge for the USER pushbutton
 *
 * The USER pushbutton is connected to PA0.
 *****************************************************************************/
void PB_enableIRQ(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	__HAL_RCC_SYSCFG_CLK_ENABLE();		// Enable Clock for system config
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <PB_enableIRQ+0x58>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <PB_enableIRQ+0x58>)
 80020e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b10      	ldr	r3, [pc, #64]	; (8002128 <PB_enableIRQ+0x58>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PA;	// EXTI multiplexer
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <PB_enableIRQ+0x5c>)
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <PB_enableIRQ+0x5c>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_RTSR_TR0;		// Rising Trigger Select on int. line 0
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <PB_enableIRQ+0x60>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <PB_enableIRQ+0x60>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6093      	str	r3, [r2, #8]
	EXTI->IMR |= EXTI_IMR_MR0;			// Interrupt Mask enable on int. line 0
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <PB_enableIRQ+0x60>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <PB_enableIRQ+0x60>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6013      	str	r3, [r2, #0]
	NVIC_ClearPendingIRQ(EXTI0_IRQn);	// Clear pending interrupt on line 0
 8002112:	2006      	movs	r0, #6
 8002114:	f7ff ff9e 	bl	8002054 <__NVIC_ClearPendingIRQ>
	NVIC_EnableIRQ(EXTI0_IRQn);			// Enable interrupt line 0 in the NVIC
 8002118:	2006      	movs	r0, #6
 800211a:	f7ff ff7d 	bl	8002018 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	40013800 	.word	0x40013800
 8002130:	40013c00 	.word	0x40013c00

08002134 <PB_pressed>:
 * @brief Was the pushbutton pressed?
 *
 * @return true if pushbutton was pressed
 *****************************************************************************/
bool PB_pressed(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
	bool pressed = PB_pressed_flag;		// Read/store value of flag
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <PB_pressed+0x20>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	71fb      	strb	r3, [r7, #7]
	PB_pressed_flag = false;			// Reset flag
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <PB_pressed+0x20>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
	return pressed;
 8002146:	79fb      	ldrb	r3, [r7, #7]
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	200009a4 	.word	0x200009a4

08002158 <EXTI0_IRQHandler>:
 *
 * The interrupt handler for external line 0 is called.
 * @n The USER pushbutton is connected to PA0.
 *****************************************************************************/
void EXTI0_IRQHandler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0) {		// Check if interrupt on line 0
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <EXTI0_IRQHandler+0x2c>)
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <EXTI0_IRQHandler+0x22>
		EXTI->PR |= EXTI_PR_PR0;		// Clear pending interrupt on line 0
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <EXTI0_IRQHandler+0x2c>)
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	4a05      	ldr	r2, [pc, #20]	; (8002184 <EXTI0_IRQHandler+0x2c>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6153      	str	r3, [r2, #20]
		PB_pressed_flag = true;			// Set flag
 8002174:	4b04      	ldr	r3, [pc, #16]	; (8002188 <EXTI0_IRQHandler+0x30>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
	}
}
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40013c00 	.word	0x40013c00
 8002188:	200009a4 	.word	0x200009a4

0800218c <NMI_Handler>:
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HardFault_Handler>:
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Hard Fault exception occurs */
	while (1)
 800219e:	e7fe      	b.n	800219e <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Memory Manage exception occurs */
	while (1)
 80021a4:	e7fe      	b.n	80021a4 <MemManage_Handler+0x4>

080021a6 <BusFault_Handler>:
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Bus Fault exception occurs */
	while (1)
 80021aa:	e7fe      	b.n	80021aa <BusFault_Handler+0x4>

080021ac <UsageFault_Handler>:
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
	/* Go to infinite loop when Usage Fault exception occurs */
	while (1)
 80021b0:	e7fe      	b.n	80021b0 <UsageFault_Handler+0x4>

080021b2 <SVC_Handler>:
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <DebugMon_Handler>:
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <PendSV_Handler>:
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 * @param  None
 * @retval None
 */
void SysTick_Handler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80021e0:	f002 f9a4 	bl	800452c <HAL_IncTick>
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <SystemInit+0x60>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	4a15      	ldr	r2, [pc, #84]	; (8002248 <SystemInit+0x60>)
 80021f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021fc:	4b13      	ldr	r3, [pc, #76]	; (800224c <SystemInit+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a12      	ldr	r2, [pc, #72]	; (800224c <SystemInit+0x64>)
 8002202:	f043 0301 	orr.w	r3, r3, #1
 8002206:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002208:	4b10      	ldr	r3, [pc, #64]	; (800224c <SystemInit+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800220e:	4b0f      	ldr	r3, [pc, #60]	; (800224c <SystemInit+0x64>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a0e      	ldr	r2, [pc, #56]	; (800224c <SystemInit+0x64>)
 8002214:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800221c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <SystemInit+0x64>)
 8002220:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <SystemInit+0x68>)
 8002222:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <SystemInit+0x64>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a08      	ldr	r2, [pc, #32]	; (800224c <SystemInit+0x64>)
 800222a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800222e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <SystemInit+0x64>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SystemInit+0x60>)
 8002238:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800223c:	609a      	str	r2, [r3, #8]
#endif
}
 800223e:	bf00      	nop
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00
 800224c:	40023800 	.word	0x40023800
 8002250:	24003010 	.word	0x24003010

08002254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800228c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002258:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800225a:	e003      	b.n	8002264 <LoopCopyDataInit>

0800225c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800225e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002260:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002262:	3104      	adds	r1, #4

08002264 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002264:	480b      	ldr	r0, [pc, #44]	; (8002294 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002268:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800226a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800226c:	d3f6      	bcc.n	800225c <CopyDataInit>
  ldr  r2, =_sbss
 800226e:	4a0b      	ldr	r2, [pc, #44]	; (800229c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002270:	e002      	b.n	8002278 <LoopFillZerobss>

08002272 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002272:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002274:	f842 3b04 	str.w	r3, [r2], #4

08002278 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002278:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800227a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800227c:	d3f9      	bcc.n	8002272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800227e:	f7ff ffb3 	bl	80021e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002282:	f006 fa73 	bl	800876c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002286:	f7fe fe19 	bl	8000ebc <main>
  bx  lr    
 800228a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800228c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002290:	0800cf20 	.word	0x0800cf20
  ldr  r0, =_sdata
 8002294:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002298:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 800229c:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 80022a0:	20000c80 	.word	0x20000c80

080022a4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <CAN1_RX0_IRQHandler>

080022a6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80022aa:	f000 feed 	bl	8003088 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80022ae:	20ca      	movs	r0, #202	; 0xca
 80022b0:	f000 f95d 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80022b4:	20c3      	movs	r0, #195	; 0xc3
 80022b6:	f000 f967 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80022ba:	2008      	movs	r0, #8
 80022bc:	f000 f964 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80022c0:	2050      	movs	r0, #80	; 0x50
 80022c2:	f000 f961 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80022c6:	20cf      	movs	r0, #207	; 0xcf
 80022c8:	f000 f951 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f000 f95b 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80022d2:	20c1      	movs	r0, #193	; 0xc1
 80022d4:	f000 f958 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80022d8:	2030      	movs	r0, #48	; 0x30
 80022da:	f000 f955 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80022de:	20ed      	movs	r0, #237	; 0xed
 80022e0:	f000 f945 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80022e4:	2064      	movs	r0, #100	; 0x64
 80022e6:	f000 f94f 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80022ea:	2003      	movs	r0, #3
 80022ec:	f000 f94c 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80022f0:	2012      	movs	r0, #18
 80022f2:	f000 f949 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80022f6:	2081      	movs	r0, #129	; 0x81
 80022f8:	f000 f946 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80022fc:	20e8      	movs	r0, #232	; 0xe8
 80022fe:	f000 f936 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8002302:	2085      	movs	r0, #133	; 0x85
 8002304:	f000 f940 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002308:	2000      	movs	r0, #0
 800230a:	f000 f93d 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800230e:	2078      	movs	r0, #120	; 0x78
 8002310:	f000 f93a 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8002314:	20cb      	movs	r0, #203	; 0xcb
 8002316:	f000 f92a 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800231a:	2039      	movs	r0, #57	; 0x39
 800231c:	f000 f934 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8002320:	202c      	movs	r0, #44	; 0x2c
 8002322:	f000 f931 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002326:	2000      	movs	r0, #0
 8002328:	f000 f92e 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800232c:	2034      	movs	r0, #52	; 0x34
 800232e:	f000 f92b 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8002332:	2002      	movs	r0, #2
 8002334:	f000 f928 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8002338:	20f7      	movs	r0, #247	; 0xf7
 800233a:	f000 f918 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800233e:	2020      	movs	r0, #32
 8002340:	f000 f922 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8002344:	20ea      	movs	r0, #234	; 0xea
 8002346:	f000 f912 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800234a:	2000      	movs	r0, #0
 800234c:	f000 f91c 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002350:	2000      	movs	r0, #0
 8002352:	f000 f919 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8002356:	20b1      	movs	r0, #177	; 0xb1
 8002358:	f000 f909 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800235c:	2000      	movs	r0, #0
 800235e:	f000 f913 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8002362:	201b      	movs	r0, #27
 8002364:	f000 f910 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002368:	20b6      	movs	r0, #182	; 0xb6
 800236a:	f000 f900 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800236e:	200a      	movs	r0, #10
 8002370:	f000 f90a 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8002374:	20a2      	movs	r0, #162	; 0xa2
 8002376:	f000 f907 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800237a:	20c0      	movs	r0, #192	; 0xc0
 800237c:	f000 f8f7 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8002380:	2010      	movs	r0, #16
 8002382:	f000 f901 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8002386:	20c1      	movs	r0, #193	; 0xc1
 8002388:	f000 f8f1 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800238c:	2010      	movs	r0, #16
 800238e:	f000 f8fb 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8002392:	20c5      	movs	r0, #197	; 0xc5
 8002394:	f000 f8eb 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8002398:	2045      	movs	r0, #69	; 0x45
 800239a:	f000 f8f5 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800239e:	2015      	movs	r0, #21
 80023a0:	f000 f8f2 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80023a4:	20c7      	movs	r0, #199	; 0xc7
 80023a6:	f000 f8e2 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80023aa:	2090      	movs	r0, #144	; 0x90
 80023ac:	f000 f8ec 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80023b0:	2036      	movs	r0, #54	; 0x36
 80023b2:	f000 f8dc 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80023b6:	20c8      	movs	r0, #200	; 0xc8
 80023b8:	f000 f8e6 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80023bc:	20f2      	movs	r0, #242	; 0xf2
 80023be:	f000 f8d6 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f000 f8e0 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80023c8:	20b0      	movs	r0, #176	; 0xb0
 80023ca:	f000 f8d0 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80023ce:	20c2      	movs	r0, #194	; 0xc2
 80023d0:	f000 f8da 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80023d4:	20b6      	movs	r0, #182	; 0xb6
 80023d6:	f000 f8ca 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80023da:	200a      	movs	r0, #10
 80023dc:	f000 f8d4 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80023e0:	20a7      	movs	r0, #167	; 0xa7
 80023e2:	f000 f8d1 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80023e6:	2027      	movs	r0, #39	; 0x27
 80023e8:	f000 f8ce 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80023ec:	2004      	movs	r0, #4
 80023ee:	f000 f8cb 	bl	8002588 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80023f2:	202a      	movs	r0, #42	; 0x2a
 80023f4:	f000 f8bb 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f000 f8c5 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80023fe:	2000      	movs	r0, #0
 8002400:	f000 f8c2 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002404:	2000      	movs	r0, #0
 8002406:	f000 f8bf 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800240a:	20ef      	movs	r0, #239	; 0xef
 800240c:	f000 f8bc 	bl	8002588 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8002410:	202b      	movs	r0, #43	; 0x2b
 8002412:	f000 f8ac 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002416:	2000      	movs	r0, #0
 8002418:	f000 f8b6 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800241c:	2000      	movs	r0, #0
 800241e:	f000 f8b3 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8002422:	2001      	movs	r0, #1
 8002424:	f000 f8b0 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002428:	203f      	movs	r0, #63	; 0x3f
 800242a:	f000 f8ad 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800242e:	20f6      	movs	r0, #246	; 0xf6
 8002430:	f000 f89d 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002434:	2001      	movs	r0, #1
 8002436:	f000 f8a7 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800243a:	2000      	movs	r0, #0
 800243c:	f000 f8a4 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8002440:	2006      	movs	r0, #6
 8002442:	f000 f8a1 	bl	8002588 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002446:	202c      	movs	r0, #44	; 0x2c
 8002448:	f000 f891 	bl	800256e <ili9341_WriteReg>
  LCD_Delay(200);
 800244c:	20c8      	movs	r0, #200	; 0xc8
 800244e:	f000 ff09 	bl	8003264 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8002452:	2026      	movs	r0, #38	; 0x26
 8002454:	f000 f88b 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002458:	2001      	movs	r0, #1
 800245a:	f000 f895 	bl	8002588 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800245e:	20e0      	movs	r0, #224	; 0xe0
 8002460:	f000 f885 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8002464:	200f      	movs	r0, #15
 8002466:	f000 f88f 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800246a:	2029      	movs	r0, #41	; 0x29
 800246c:	f000 f88c 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8002470:	2024      	movs	r0, #36	; 0x24
 8002472:	f000 f889 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002476:	200c      	movs	r0, #12
 8002478:	f000 f886 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800247c:	200e      	movs	r0, #14
 800247e:	f000 f883 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8002482:	2009      	movs	r0, #9
 8002484:	f000 f880 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8002488:	204e      	movs	r0, #78	; 0x4e
 800248a:	f000 f87d 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800248e:	2078      	movs	r0, #120	; 0x78
 8002490:	f000 f87a 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8002494:	203c      	movs	r0, #60	; 0x3c
 8002496:	f000 f877 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800249a:	2009      	movs	r0, #9
 800249c:	f000 f874 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80024a0:	2013      	movs	r0, #19
 80024a2:	f000 f871 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80024a6:	2005      	movs	r0, #5
 80024a8:	f000 f86e 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80024ac:	2017      	movs	r0, #23
 80024ae:	f000 f86b 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80024b2:	2011      	movs	r0, #17
 80024b4:	f000 f868 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f000 f865 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80024be:	20e1      	movs	r0, #225	; 0xe1
 80024c0:	f000 f855 	bl	800256e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f000 f85f 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80024ca:	2016      	movs	r0, #22
 80024cc:	f000 f85c 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80024d0:	201b      	movs	r0, #27
 80024d2:	f000 f859 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80024d6:	2004      	movs	r0, #4
 80024d8:	f000 f856 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80024dc:	2011      	movs	r0, #17
 80024de:	f000 f853 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80024e2:	2007      	movs	r0, #7
 80024e4:	f000 f850 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80024e8:	2031      	movs	r0, #49	; 0x31
 80024ea:	f000 f84d 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80024ee:	2033      	movs	r0, #51	; 0x33
 80024f0:	f000 f84a 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80024f4:	2042      	movs	r0, #66	; 0x42
 80024f6:	f000 f847 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80024fa:	2005      	movs	r0, #5
 80024fc:	f000 f844 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8002500:	200c      	movs	r0, #12
 8002502:	f000 f841 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002506:	200a      	movs	r0, #10
 8002508:	f000 f83e 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800250c:	2028      	movs	r0, #40	; 0x28
 800250e:	f000 f83b 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8002512:	202f      	movs	r0, #47	; 0x2f
 8002514:	f000 f838 	bl	8002588 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002518:	200f      	movs	r0, #15
 800251a:	f000 f835 	bl	8002588 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800251e:	2011      	movs	r0, #17
 8002520:	f000 f825 	bl	800256e <ili9341_WriteReg>
  LCD_Delay(200);
 8002524:	20c8      	movs	r0, #200	; 0xc8
 8002526:	f000 fe9d 	bl	8003264 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800252a:	2029      	movs	r0, #41	; 0x29
 800252c:	f000 f81f 	bl	800256e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8002530:	202c      	movs	r0, #44	; 0x2c
 8002532:	f000 f81c 	bl	800256e <ili9341_WriteReg>
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}

0800253a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800253e:	f000 fda3 	bl	8003088 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8002542:	2103      	movs	r1, #3
 8002544:	20d3      	movs	r0, #211	; 0xd3
 8002546:	f000 f82c 	bl	80025a2 <ili9341_ReadData>
 800254a:	4603      	mov	r3, r0
 800254c:	b29b      	uxth	r3, r3
}
 800254e:	4618      	mov	r0, r3
 8002550:	bd80      	pop	{r7, pc}

08002552 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002556:	2029      	movs	r0, #41	; 0x29
 8002558:	f000 f809 	bl	800256e <ili9341_WriteReg>
}
 800255c:	bf00      	nop
 800255e:	bd80      	pop	{r7, pc}

08002560 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8002564:	2028      	movs	r0, #40	; 0x28
 8002566:	f000 f802 	bl	800256e <ili9341_WriteReg>
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}

0800256e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	4603      	mov	r3, r0
 8002576:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fe1e 	bl	80031bc <LCD_IO_WriteReg>
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fdef 	bl	8003178 <LCD_IO_WriteData>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	460a      	mov	r2, r1
 80025ac:	80fb      	strh	r3, [r7, #6]
 80025ae:	4613      	mov	r3, r2
 80025b0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80025b2:	797a      	ldrb	r2, [r7, #5]
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f000 fe21 	bl	8003200 <LCD_IO_ReadData>
 80025be:	4603      	mov	r3, r0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80025cc:	23f0      	movs	r3, #240	; 0xf0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80025dc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f000 fa59 	bl	8002ab0 <stmpe811_GetInstance>
 80025fe:	4603      	mov	r3, r0
 8002600:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	2bff      	cmp	r3, #255	; 0xff
 8002606:	d112      	bne.n	800262e <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002608:	2000      	movs	r0, #0
 800260a:	f000 fa51 	bl	8002ab0 <stmpe811_GetInstance>
 800260e:	4603      	mov	r3, r0
 8002610:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 8002612:	7bbb      	ldrb	r3, [r7, #14]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d80a      	bhi.n	800262e <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	88fa      	ldrh	r2, [r7, #6]
 800261c:	b2d1      	uxtb	r1, r2
 800261e:	4a06      	ldr	r2, [pc, #24]	; (8002638 <stmpe811_Init+0x4c>)
 8002620:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 8002622:	f000 fe2a 	bl	800327a <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002626:	88fb      	ldrh	r3, [r7, #6]
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f807 	bl	800263c <stmpe811_Reset>
    }
  }
}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	200009a8 	.word	0x200009a8

0800263c <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2202      	movs	r2, #2
 800264c:	2103      	movs	r1, #3
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fe1f 	bl	8003292 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002654:	200a      	movs	r0, #10
 8002656:	f000 fe59 	bl	800330c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2200      	movs	r2, #0
 8002660:	2103      	movs	r1, #3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fe15 	bl	8003292 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 8002668:	2002      	movs	r0, #2
 800266a:	f000 fe4f 	bl	800330c <IOE_Delay>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 8002676:	b590      	push	{r4, r7, lr}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 8002680:	f000 fdfb 	bl	800327a <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f000 fe14 	bl	80032b8 <IOE_Read>
 8002690:	4603      	mov	r3, r0
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f000 fe0b 	bl	80032b8 <IOE_Read>
 80026a2:	4603      	mov	r3, r0
 80026a4:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80026a6:	4323      	orrs	r3, r4
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	b29b      	uxth	r3, r3
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}

080026b4 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80026c2:	88fb      	ldrh	r3, [r7, #6]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2109      	movs	r1, #9
 80026c8:	4618      	mov	r0, r3
 80026ca:	f000 fdf5 	bl	80032b8 <IOE_Read>
 80026ce:	4603      	mov	r3, r0
 80026d0:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80026da:	88fb      	ldrh	r3, [r7, #6]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	2109      	movs	r1, #9
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 fdd5 	bl	8003292 <IOE_Write>
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2109      	movs	r1, #9
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fdd7 	bl	80032b8 <IOE_Read>
 800270a:	4603      	mov	r3, r0
 800270c:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002716:	88fb      	ldrh	r3, [r7, #6]
 8002718:	b2db      	uxtb	r3, r3
 800271a:	7bfa      	ldrb	r2, [r7, #15]
 800271c:	2109      	movs	r1, #9
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fdb7 	bl	8003292 <IOE_Write>
    
}
 8002724:	bf00      	nop
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	460a      	mov	r2, r1
 8002736:	80fb      	strh	r3, [r7, #6]
 8002738:	4613      	mov	r3, r2
 800273a:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	b2db      	uxtb	r3, r3
 8002744:	210a      	movs	r1, #10
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fdb6 	bl	80032b8 <IOE_Read>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	797b      	ldrb	r3, [r7, #5]
 8002754:	4313      	orrs	r3, r2
 8002756:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002758:	88fb      	ldrh	r3, [r7, #6]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	7bfa      	ldrb	r2, [r7, #15]
 800275e:	210a      	movs	r1, #10
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fd96 	bl	8003292 <IOE_Write>
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	4603      	mov	r3, r0
 8002776:	460a      	mov	r2, r1
 8002778:	80fb      	strh	r3, [r7, #6]
 800277a:	4613      	mov	r3, r2
 800277c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	210a      	movs	r1, #10
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fd95 	bl	80032b8 <IOE_Read>
 800278e:	4603      	mov	r3, r0
 8002790:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 8002792:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002796:	43db      	mvns	r3, r3
 8002798:	b25a      	sxtb	r2, r3
 800279a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279e:	4013      	ands	r3, r2
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	210a      	movs	r1, #10
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fd70 	bl	8003292 <IOE_Write>
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	460a      	mov	r2, r1
 80027c4:	80fb      	strh	r3, [r7, #6]
 80027c6:	4613      	mov	r3, r2
 80027c8:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	210b      	movs	r1, #11
 80027d0:	4618      	mov	r0, r3
 80027d2:	f000 fd71 	bl	80032b8 <IOE_Read>
 80027d6:	4603      	mov	r3, r0
 80027d8:	461a      	mov	r2, r3
 80027da:	797b      	ldrb	r3, [r7, #5]
 80027dc:	4013      	ands	r3, r2
 80027de:	b2db      	uxtb	r3, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	460a      	mov	r2, r1
 80027f2:	80fb      	strh	r3, [r7, #6]
 80027f4:	4613      	mov	r3, r2
 80027f6:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	797a      	ldrb	r2, [r7, #5]
 80027fe:	210b      	movs	r1, #11
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fd46 	bl	8003292 <IOE_Write>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	6039      	str	r1, [r7, #0]
 8002818:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2117      	movs	r1, #23
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fd47 	bl	80032b8 <IOE_Read>
 800282a:	4603      	mov	r3, r0
 800282c:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b25b      	sxtb	r3, r3
 8002832:	43db      	mvns	r3, r3
 8002834:	b25a      	sxtb	r2, r3
 8002836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283a:	4013      	ands	r3, r2
 800283c:	b25b      	sxtb	r3, r3
 800283e:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	2117      	movs	r1, #23
 8002848:	4618      	mov	r0, r3
 800284a:	f000 fd22 	bl	8003292 <IOE_Write>
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b084      	sub	sp, #16
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8002860:	88fb      	ldrh	r3, [r7, #6]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2104      	movs	r1, #4
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fd26 	bl	80032b8 <IOE_Read>
 800286c:	4603      	mov	r3, r0
 800286e:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002878:	88fb      	ldrh	r3, [r7, #6]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	2104      	movs	r1, #4
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fd06 	bl	8003292 <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8002886:	88fb      	ldrh	r3, [r7, #6]
 8002888:	21f0      	movs	r1, #240	; 0xf0
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ffbf 	bl	800280e <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	f023 0303 	bic.w	r3, r3, #3
 8002896:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	2104      	movs	r1, #4
 80028a0:	4618      	mov	r0, r3
 80028a2:	f000 fcf6 	bl	8003292 <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2249      	movs	r2, #73	; 0x49
 80028ac:	2120      	movs	r1, #32
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fcef 	bl	8003292 <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80028b4:	2002      	movs	r0, #2
 80028b6:	f000 fd29 	bl	800330c <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80028ba:	88fb      	ldrh	r3, [r7, #6]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2201      	movs	r2, #1
 80028c0:	2121      	movs	r1, #33	; 0x21
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fce5 	bl	8003292 <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	229a      	movs	r2, #154	; 0x9a
 80028ce:	2141      	movs	r1, #65	; 0x41
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fcde 	bl	8003292 <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80028d6:	88fb      	ldrh	r3, [r7, #6]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2201      	movs	r2, #1
 80028dc:	214a      	movs	r1, #74	; 0x4a
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fcd7 	bl	8003292 <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2201      	movs	r2, #1
 80028ea:	214b      	movs	r1, #75	; 0x4b
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fcd0 	bl	8003292 <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2200      	movs	r2, #0
 80028f8:	214b      	movs	r1, #75	; 0x4b
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 fcc9 	bl	8003292 <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2201      	movs	r2, #1
 8002906:	2156      	movs	r1, #86	; 0x56
 8002908:	4618      	mov	r0, r3
 800290a:	f000 fcc2 	bl	8003292 <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2201      	movs	r2, #1
 8002914:	2158      	movs	r1, #88	; 0x58
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fcbb 	bl	8003292 <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 800291c:	88fb      	ldrh	r3, [r7, #6]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2201      	movs	r2, #1
 8002922:	2140      	movs	r1, #64	; 0x40
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fcb4 	bl	8003292 <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 800292a:	88fb      	ldrh	r3, [r7, #6]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	22ff      	movs	r2, #255	; 0xff
 8002930:	210b      	movs	r1, #11
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fcad 	bl	8003292 <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002938:	2002      	movs	r0, #2
 800293a:	f000 fce7 	bl	800330c <IOE_Delay>
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2140      	movs	r1, #64	; 0x40
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fcac 	bl	80032b8 <IOE_Read>
 8002960:	4603      	mov	r3, r0
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b80      	cmp	r3, #128	; 0x80
 8002968:	bf0c      	ite	eq
 800296a:	2301      	moveq	r3, #1
 800296c:	2300      	movne	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 8002972:	7bbb      	ldrb	r3, [r7, #14]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	214c      	movs	r1, #76	; 0x4c
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fc9a 	bl	80032b8 <IOE_Read>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d010      	beq.n	80029ac <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 800298a:	2301      	movs	r3, #1
 800298c:	73fb      	strb	r3, [r7, #15]
 800298e:	e00d      	b.n	80029ac <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2201      	movs	r2, #1
 8002996:	214b      	movs	r1, #75	; 0x4b
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fc7a 	bl	8003292 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800299e:	88fb      	ldrh	r3, [r7, #6]
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2200      	movs	r2, #0
 80029a4:	214b      	movs	r1, #75	; 0x4b
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 fc73 	bl	8003292 <IOE_Write>
  }
  
  return ret;
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b086      	sub	sp, #24
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	607a      	str	r2, [r7, #4]
 80029c2:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80029c4:	89fb      	ldrh	r3, [r7, #14]
 80029c6:	b2d8      	uxtb	r0, r3
 80029c8:	f107 0210 	add.w	r2, r7, #16
 80029cc:	2304      	movs	r3, #4
 80029ce:	21d7      	movs	r1, #215	; 0xd7
 80029d0:	f000 fc85 	bl	80032de <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80029d4:	7c3b      	ldrb	r3, [r7, #16]
 80029d6:	061a      	lsls	r2, r3, #24
 80029d8:	7c7b      	ldrb	r3, [r7, #17]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	431a      	orrs	r2, r3
 80029de:	7cbb      	ldrb	r3, [r7, #18]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	4313      	orrs	r3, r2
 80029e4:	7cfa      	ldrb	r2, [r7, #19]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	0d1b      	lsrs	r3, r3, #20
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002a04:	89fb      	ldrh	r3, [r7, #14]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2201      	movs	r2, #1
 8002a0a:	214b      	movs	r1, #75	; 0x4b
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fc40 	bl	8003292 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8002a12:	89fb      	ldrh	r3, [r7, #14]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2200      	movs	r2, #0
 8002a18:	214b      	movs	r1, #75	; 0x4b
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fc39 	bl	8003292 <IOE_Write>
}
 8002a20:	bf00      	nop
 8002a22:	3718      	adds	r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 8002a32:	f000 fc28 	bl	8003286 <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	211f      	movs	r1, #31
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fe76 	bl	800272c <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fe36 	bl	80026b4 <stmpe811_EnableGlobalIT>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fe47 	bl	80026f0 <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	211f      	movs	r1, #31
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fe81 	bl	800276e <stmpe811_DisableITSource>
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8002a7e:	88fb      	ldrh	r3, [r7, #6]
 8002a80:	211f      	movs	r1, #31
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fe99 	bl	80027ba <stmpe811_ReadGITStatus>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	211f      	movs	r1, #31
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fea1 	bl	80027e8 <stmpe811_ClearGlobalIT>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
	...

08002ab0 <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e00b      	b.n	8002adc <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <stmpe811_GetInstance+0x40>)
 8002ac8:	5cd3      	ldrb	r3, [r2, r3]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	88fa      	ldrh	r2, [r7, #6]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d101      	bne.n	8002ad6 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	e006      	b.n	8002ae4 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d9f0      	bls.n	8002ac4 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8002ae2:	23ff      	movs	r3, #255	; 0xff
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	200009a8 	.word	0x200009a8

08002af4 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10e      	bne.n	8002b22 <BSP_LED_Init+0x2e>
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <BSP_LED_Init+0x9c>)
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4a20      	ldr	r2, [pc, #128]	; (8002b90 <BSP_LED_Init+0x9c>)
 8002b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b12:	6313      	str	r3, [r2, #48]	; 0x30
 8002b14:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <BSP_LED_Init+0x9c>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	e010      	b.n	8002b44 <BSP_LED_Init+0x50>
 8002b22:	79fb      	ldrb	r3, [r7, #7]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10d      	bne.n	8002b44 <BSP_LED_Init+0x50>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <BSP_LED_Init+0x9c>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b30:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <BSP_LED_Init+0x9c>)
 8002b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b36:	6313      	str	r3, [r2, #48]	; 0x30
 8002b38:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <BSP_LED_Init+0x9c>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	4a13      	ldr	r2, [pc, #76]	; (8002b94 <BSP_LED_Init+0xa0>)
 8002b48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002b56:	2302      	movs	r3, #2
 8002b58:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	4a0e      	ldr	r2, [pc, #56]	; (8002b98 <BSP_LED_Init+0xa4>)
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	f107 0214 	add.w	r2, r7, #20
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f002 fa89 	bl	8005080 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	4a09      	ldr	r2, [pc, #36]	; (8002b98 <BSP_LED_Init+0xa4>)
 8002b72:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	4a06      	ldr	r2, [pc, #24]	; (8002b94 <BSP_LED_Init+0xa0>)
 8002b7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	4619      	mov	r1, r3
 8002b82:	f002 fc29 	bl	80053d8 <HAL_GPIO_WritePin>
}
 8002b86:	bf00      	nop
 8002b88:	3728      	adds	r7, #40	; 0x28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	0800a390 	.word	0x0800a390
 8002b98:	2000015c 	.word	0x2000015c

08002b9c <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <BSP_LED_On+0x2c>)
 8002baa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	4a06      	ldr	r2, [pc, #24]	; (8002bcc <BSP_LED_On+0x30>)
 8002bb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f002 fc0d 	bl	80053d8 <HAL_GPIO_WritePin>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	2000015c 	.word	0x2000015c
 8002bcc:	0800a390 	.word	0x0800a390

08002bd0 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <BSP_LED_Off+0x2c>)
 8002bde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <BSP_LED_Off+0x30>)
 8002be6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bea:	2200      	movs	r2, #0
 8002bec:	4619      	mov	r1, r3
 8002bee:	f002 fbf3 	bl	80053d8 <HAL_GPIO_WritePin>
}
 8002bf2:	bf00      	nop
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	2000015c 	.word	0x2000015c
 8002c00:	0800a390 	.word	0x0800a390

08002c04 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	4a07      	ldr	r2, [pc, #28]	; (8002c30 <BSP_LED_Toggle+0x2c>)
 8002c12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	4906      	ldr	r1, [pc, #24]	; (8002c34 <BSP_LED_Toggle+0x30>)
 8002c1a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4610      	mov	r0, r2
 8002c22:	f002 fbf2 	bl	800540a <HAL_GPIO_TogglePin>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	2000015c 	.word	0x2000015c
 8002c34:	0800a390 	.word	0x0800a390

08002c38 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a33      	ldr	r2, [pc, #204]	; (8002d14 <I2Cx_MspInit+0xdc>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d15f      	bne.n	8002d0a <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0304 	and.w	r3, r3, #4
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6e:	4a2a      	ldr	r2, [pc, #168]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6313      	str	r3, [r2, #48]	; 0x30
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	f003 0301 	and.w	r3, r3, #1
 8002c7e:	60fb      	str	r3, [r7, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8002c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002c88:	2312      	movs	r3, #18
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002c90:	2302      	movs	r3, #2
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002c94:	2304      	movs	r3, #4
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	481f      	ldr	r0, [pc, #124]	; (8002d1c <I2Cx_MspInit+0xe4>)
 8002ca0:	f002 f9ee 	bl	8005080 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8002ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002caa:	f107 0314 	add.w	r3, r7, #20
 8002cae:	4619      	mov	r1, r3
 8002cb0:	481b      	ldr	r0, [pc, #108]	; (8002d20 <I2Cx_MspInit+0xe8>)
 8002cb2:	f002 f9e5 	bl	8005080 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002cc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	4a10      	ldr	r2, [pc, #64]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002cd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cdc:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8002cde:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <I2Cx_MspInit+0xe0>)
 8002ce4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ce8:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002cea:	2200      	movs	r2, #0
 8002cec:	210f      	movs	r1, #15
 8002cee:	2048      	movs	r0, #72	; 0x48
 8002cf0:	f001 fd3b 	bl	800476a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002cf4:	2048      	movs	r0, #72	; 0x48
 8002cf6:	f001 fd54 	bl	80047a2 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	210f      	movs	r1, #15
 8002cfe:	2049      	movs	r0, #73	; 0x49
 8002d00:	f001 fd33 	bl	800476a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8002d04:	2049      	movs	r0, #73	; 0x49
 8002d06:	f001 fd4c 	bl	80047a2 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	3728      	adds	r7, #40	; 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40005c00 	.word	0x40005c00
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	40020800 	.word	0x40020800

08002d24 <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002d28:	4814      	ldr	r0, [pc, #80]	; (8002d7c <I2Cx_Init+0x58>)
 8002d2a:	f003 f831 	bl	8005d90 <HAL_I2C_GetState>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d121      	bne.n	8002d78 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <I2Cx_Init+0x58>)
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <I2Cx_Init+0x5c>)
 8002d38:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002d3a:	4b10      	ldr	r3, [pc, #64]	; (8002d7c <I2Cx_Init+0x58>)
 8002d3c:	4a11      	ldr	r2, [pc, #68]	; (8002d84 <I2Cx_Init+0x60>)
 8002d3e:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <I2Cx_Init+0x58>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <I2Cx_Init+0x58>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002d4c:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <I2Cx_Init+0x58>)
 8002d4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d52:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8002d54:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <I2Cx_Init+0x58>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <I2Cx_Init+0x58>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <I2Cx_Init+0x58>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <I2Cx_Init+0x58>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002d6c:	4803      	ldr	r0, [pc, #12]	; (8002d7c <I2Cx_Init+0x58>)
 8002d6e:	f7ff ff63 	bl	8002c38 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8002d72:	4802      	ldr	r0, [pc, #8]	; (8002d7c <I2Cx_Init+0x58>)
 8002d74:	f002 fb64 	bl	8005440 <HAL_I2C_Init>
  }
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	200009ac 	.word	0x200009ac
 8002d80:	40005c00 	.word	0x40005c00
 8002d84:	000186a0 	.word	0x000186a0

08002d88 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <I2Cx_ITConfig+0x58>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <I2Cx_ITConfig+0x58>)
 8002d98:	f043 0301 	orr.w	r3, r3, #1
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <I2Cx_ITConfig+0x58>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8002daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8002db8:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <I2Cx_ITConfig+0x5c>)
 8002dba:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	4809      	ldr	r0, [pc, #36]	; (8002de8 <I2Cx_ITConfig+0x60>)
 8002dc2:	f002 f95d 	bl	8005080 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	210f      	movs	r1, #15
 8002dca:	2028      	movs	r0, #40	; 0x28
 8002dcc:	f001 fccd 	bl	800476a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8002dd0:	2028      	movs	r0, #40	; 0x28
 8002dd2:	f001 fce6 	bl	80047a2 <HAL_NVIC_EnableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	10210000 	.word	0x10210000
 8002de8:	40020000 	.word	0x40020000

08002dec <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af04      	add	r7, sp, #16
 8002df2:	4603      	mov	r3, r0
 8002df4:	71fb      	strb	r3, [r7, #7]
 8002df6:	460b      	mov	r3, r1
 8002df8:	71bb      	strb	r3, [r7, #6]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8002e02:	79fb      	ldrb	r3, [r7, #7]
 8002e04:	b299      	uxth	r1, r3
 8002e06:	79bb      	ldrb	r3, [r7, #6]
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <I2Cx_WriteData+0x4c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	9302      	str	r3, [sp, #8]
 8002e10:	2301      	movs	r3, #1
 8002e12:	9301      	str	r3, [sp, #4]
 8002e14:	1d7b      	adds	r3, r7, #5
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	2301      	movs	r3, #1
 8002e1a:	4808      	ldr	r0, [pc, #32]	; (8002e3c <I2Cx_WriteData+0x50>)
 8002e1c:	f002 fc98 	bl	8005750 <HAL_I2C_Mem_Write>
 8002e20:	4603      	mov	r3, r0
 8002e22:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002e2a:	f000 f863 	bl	8002ef4 <I2Cx_Error>
  }        
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000164 	.word	0x20000164
 8002e3c:	200009ac 	.word	0x200009ac

08002e40 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af04      	add	r7, sp, #16
 8002e46:	4603      	mov	r3, r0
 8002e48:	460a      	mov	r2, r1
 8002e4a:	71fb      	strb	r3, [r7, #7]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	b299      	uxth	r1, r3
 8002e5c:	79bb      	ldrb	r3, [r7, #6]
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <I2Cx_ReadData+0x50>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	9302      	str	r3, [sp, #8]
 8002e66:	2301      	movs	r3, #1
 8002e68:	9301      	str	r3, [sp, #4]
 8002e6a:	f107 030e 	add.w	r3, r7, #14
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2301      	movs	r3, #1
 8002e72:	4808      	ldr	r0, [pc, #32]	; (8002e94 <I2Cx_ReadData+0x54>)
 8002e74:	f002 fd66 	bl	8005944 <HAL_I2C_Mem_Read>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002e82:	f000 f837 	bl	8002ef4 <I2Cx_Error>
  
  }
  return value;
 8002e86:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000164 	.word	0x20000164
 8002e94:	200009ac 	.word	0x200009ac

08002e98 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b088      	sub	sp, #32
 8002e9c:	af04      	add	r7, sp, #16
 8002e9e:	603a      	str	r2, [r7, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	71bb      	strb	r3, [r7, #6]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	b299      	uxth	r1, r3
 8002eb6:	79bb      	ldrb	r3, [r7, #6]
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <I2Cx_ReadBuffer+0x54>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	9302      	str	r3, [sp, #8]
 8002ec0:	88bb      	ldrh	r3, [r7, #4]
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2301      	movs	r3, #1
 8002eca:	4809      	ldr	r0, [pc, #36]	; (8002ef0 <I2Cx_ReadBuffer+0x58>)
 8002ecc:	f002 fd3a 	bl	8005944 <HAL_I2C_Mem_Read>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e002      	b.n	8002ee4 <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002ede:	f000 f809 	bl	8002ef4 <I2Cx_Error>

    return 1;
 8002ee2:	2301      	movs	r3, #1
  }
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000164 	.word	0x20000164
 8002ef0:	200009ac 	.word	0x200009ac

08002ef4 <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8002ef8:	4803      	ldr	r0, [pc, #12]	; (8002f08 <I2Cx_Error+0x14>)
 8002efa:	f002 fbe5 	bl	80056c8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 8002efe:	f7ff ff11 	bl	8002d24 <I2Cx_Init>
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200009ac 	.word	0x200009ac

08002f0c <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002f10:	4819      	ldr	r0, [pc, #100]	; (8002f78 <SPIx_Init+0x6c>)
 8002f12:	f005 f9ca 	bl	80082aa <HAL_SPI_GetState>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d12b      	bne.n	8002f74 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002f1c:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <SPIx_Init+0x6c>)
 8002f1e:	4a17      	ldr	r2, [pc, #92]	; (8002f7c <SPIx_Init+0x70>)
 8002f20:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <SPIx_Init+0x6c>)
 8002f24:	2218      	movs	r2, #24
 8002f26:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <SPIx_Init+0x6c>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <SPIx_Init+0x6c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <SPIx_Init+0x6c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <SPIx_Init+0x6c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002f40:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <SPIx_Init+0x6c>)
 8002f42:	2207      	movs	r2, #7
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <SPIx_Init+0x6c>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	; (8002f78 <SPIx_Init+0x6c>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <SPIx_Init+0x6c>)
 8002f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f58:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002f5a:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <SPIx_Init+0x6c>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <SPIx_Init+0x6c>)
 8002f62:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f66:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002f68:	4803      	ldr	r0, [pc, #12]	; (8002f78 <SPIx_Init+0x6c>)
 8002f6a:	f000 f853 	bl	8003014 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002f6e:	4802      	ldr	r0, [pc, #8]	; (8002f78 <SPIx_Init+0x6c>)
 8002f70:	f004 fc11 	bl	8007796 <HAL_SPI_Init>
  } 
}
 8002f74:	bf00      	nop
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000a00 	.word	0x20000a00
 8002f7c:	40015000 	.word	0x40015000

08002f80 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002f8e:	79fb      	ldrb	r3, [r7, #7]
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	4b09      	ldr	r3, [pc, #36]	; (8002fb8 <SPIx_Read+0x38>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f107 0108 	add.w	r1, r7, #8
 8002f9a:	4808      	ldr	r0, [pc, #32]	; (8002fbc <SPIx_Read+0x3c>)
 8002f9c:	f004 fdf8 	bl	8007b90 <HAL_SPI_Receive>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002faa:	f000 f827 	bl	8002ffc <SPIx_Error>
  }
  
  return readvalue;
 8002fae:	68bb      	ldr	r3, [r7, #8]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000168 	.word	0x20000168
 8002fbc:	20000a00 	.word	0x20000a00

08002fc0 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002fce:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <SPIx_Write+0x34>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	1db9      	adds	r1, r7, #6
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	4808      	ldr	r0, [pc, #32]	; (8002ff8 <SPIx_Write+0x38>)
 8002fd8:	f004 fc84 	bl	80078e4 <HAL_SPI_Transmit>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002fe0:	7bfb      	ldrb	r3, [r7, #15]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002fe6:	f000 f809 	bl	8002ffc <SPIx_Error>
  }
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	20000168 	.word	0x20000168
 8002ff8:	20000a00 	.word	0x20000a00

08002ffc <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8003000:	4803      	ldr	r0, [pc, #12]	; (8003010 <SPIx_Error+0x14>)
 8003002:	f004 fc33 	bl	800786c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8003006:	f7ff ff81 	bl	8002f0c <SPIx_Init>
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000a00 	.word	0x20000a00

08003014 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	; 0x28
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800301c:	2300      	movs	r3, #0
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <SPIx_MspInit+0x6c>)
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	4a16      	ldr	r2, [pc, #88]	; (8003080 <SPIx_MspInit+0x6c>)
 8003026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800302a:	6453      	str	r3, [r2, #68]	; 0x44
 800302c:	4b14      	ldr	r3, [pc, #80]	; (8003080 <SPIx_MspInit+0x6c>)
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	4b10      	ldr	r3, [pc, #64]	; (8003080 <SPIx_MspInit+0x6c>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4a0f      	ldr	r2, [pc, #60]	; (8003080 <SPIx_MspInit+0x6c>)
 8003042:	f043 0320 	orr.w	r3, r3, #32
 8003046:	6313      	str	r3, [r2, #48]	; 0x30
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <SPIx_MspInit+0x6c>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f003 0320 	and.w	r3, r3, #32
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8003054:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003058:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 800305e:	2302      	movs	r3, #2
 8003060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8003062:	2301      	movs	r3, #1
 8003064:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8003066:	2305      	movs	r3, #5
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	4619      	mov	r1, r3
 8003070:	4804      	ldr	r0, [pc, #16]	; (8003084 <SPIx_MspInit+0x70>)
 8003072:	f002 f805 	bl	8005080 <HAL_GPIO_Init>
}
 8003076:	bf00      	nop
 8003078:	3728      	adds	r7, #40	; 0x28
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40021400 	.word	0x40021400

08003088 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800308e:	4b36      	ldr	r3, [pc, #216]	; (8003168 <LCD_IO_Init+0xe0>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d164      	bne.n	8003160 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8003096:	4b34      	ldr	r3, [pc, #208]	; (8003168 <LCD_IO_Init+0xe0>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <LCD_IO_Init+0xe4>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4a31      	ldr	r2, [pc, #196]	; (800316c <LCD_IO_Init+0xe4>)
 80030a6:	f043 0308 	orr.w	r3, r3, #8
 80030aa:	6313      	str	r3, [r2, #48]	; 0x30
 80030ac:	4b2f      	ldr	r3, [pc, #188]	; (800316c <LCD_IO_Init+0xe4>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f003 0308 	and.w	r3, r3, #8
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 80030b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80030be:	2301      	movs	r3, #1
 80030c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80030c6:	2302      	movs	r3, #2
 80030c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80030ca:	f107 030c 	add.w	r3, r7, #12
 80030ce:	4619      	mov	r1, r3
 80030d0:	4827      	ldr	r0, [pc, #156]	; (8003170 <LCD_IO_Init+0xe8>)
 80030d2:	f001 ffd5 	bl	8005080 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <LCD_IO_Init+0xe4>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4a23      	ldr	r2, [pc, #140]	; (800316c <LCD_IO_Init+0xe4>)
 80030e0:	f043 0308 	orr.w	r3, r3, #8
 80030e4:	6313      	str	r3, [r2, #48]	; 0x30
 80030e6:	4b21      	ldr	r3, [pc, #132]	; (800316c <LCD_IO_Init+0xe4>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80030f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003100:	2302      	movs	r3, #2
 8003102:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003104:	f107 030c 	add.w	r3, r7, #12
 8003108:	4619      	mov	r1, r3
 800310a:	4819      	ldr	r0, [pc, #100]	; (8003170 <LCD_IO_Init+0xe8>)
 800310c:	f001 ffb8 	bl	8005080 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003110:	2300      	movs	r3, #0
 8003112:	603b      	str	r3, [r7, #0]
 8003114:	4b15      	ldr	r3, [pc, #84]	; (800316c <LCD_IO_Init+0xe4>)
 8003116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003118:	4a14      	ldr	r2, [pc, #80]	; (800316c <LCD_IO_Init+0xe4>)
 800311a:	f043 0304 	orr.w	r3, r3, #4
 800311e:	6313      	str	r3, [r2, #48]	; 0x30
 8003120:	4b12      	ldr	r3, [pc, #72]	; (800316c <LCD_IO_Init+0xe4>)
 8003122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 800312c:	2304      	movs	r3, #4
 800312e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003130:	2301      	movs	r3, #1
 8003132:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003138:	2302      	movs	r3, #2
 800313a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800313c:	f107 030c 	add.w	r3, r7, #12
 8003140:	4619      	mov	r1, r3
 8003142:	480c      	ldr	r0, [pc, #48]	; (8003174 <LCD_IO_Init+0xec>)
 8003144:	f001 ff9c 	bl	8005080 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003148:	2200      	movs	r2, #0
 800314a:	2104      	movs	r1, #4
 800314c:	4809      	ldr	r0, [pc, #36]	; (8003174 <LCD_IO_Init+0xec>)
 800314e:	f002 f943 	bl	80053d8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003152:	2201      	movs	r2, #1
 8003154:	2104      	movs	r1, #4
 8003156:	4807      	ldr	r0, [pc, #28]	; (8003174 <LCD_IO_Init+0xec>)
 8003158:	f002 f93e 	bl	80053d8 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 800315c:	f7ff fed6 	bl	8002f0c <SPIx_Init>
  }
}
 8003160:	bf00      	nop
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000a58 	.word	0x20000a58
 800316c:	40023800 	.word	0x40023800
 8003170:	40020c00 	.word	0x40020c00
 8003174:	40020800 	.word	0x40020800

08003178 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003182:	2201      	movs	r2, #1
 8003184:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003188:	480a      	ldr	r0, [pc, #40]	; (80031b4 <LCD_IO_WriteData+0x3c>)
 800318a:	f002 f925 	bl	80053d8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 800318e:	2200      	movs	r2, #0
 8003190:	2104      	movs	r1, #4
 8003192:	4809      	ldr	r0, [pc, #36]	; (80031b8 <LCD_IO_WriteData+0x40>)
 8003194:	f002 f920 	bl	80053d8 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff ff10 	bl	8002fc0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80031a0:	2201      	movs	r2, #1
 80031a2:	2104      	movs	r1, #4
 80031a4:	4804      	ldr	r0, [pc, #16]	; (80031b8 <LCD_IO_WriteData+0x40>)
 80031a6:	f002 f917 	bl	80053d8 <HAL_GPIO_WritePin>
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40020c00 	.word	0x40020c00
 80031b8:	40020800 	.word	0x40020800

080031bc <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80031c6:	2200      	movs	r2, #0
 80031c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031cc:	480a      	ldr	r0, [pc, #40]	; (80031f8 <LCD_IO_WriteReg+0x3c>)
 80031ce:	f002 f903 	bl	80053d8 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 80031d2:	2200      	movs	r2, #0
 80031d4:	2104      	movs	r1, #4
 80031d6:	4809      	ldr	r0, [pc, #36]	; (80031fc <LCD_IO_WriteReg+0x40>)
 80031d8:	f002 f8fe 	bl	80053d8 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff feed 	bl	8002fc0 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80031e6:	2201      	movs	r2, #1
 80031e8:	2104      	movs	r1, #4
 80031ea:	4804      	ldr	r0, [pc, #16]	; (80031fc <LCD_IO_WriteReg+0x40>)
 80031ec:	f002 f8f4 	bl	80053d8 <HAL_GPIO_WritePin>
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40020c00 	.word	0x40020c00
 80031fc:	40020800 	.word	0x40020800

08003200 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	460a      	mov	r2, r1
 800320a:	80fb      	strh	r3, [r7, #6]
 800320c:	4613      	mov	r3, r2
 800320e:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003214:	2200      	movs	r2, #0
 8003216:	2104      	movs	r1, #4
 8003218:	4810      	ldr	r0, [pc, #64]	; (800325c <LCD_IO_ReadData+0x5c>)
 800321a:	f002 f8dd 	bl	80053d8 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800321e:	2200      	movs	r2, #0
 8003220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003224:	480e      	ldr	r0, [pc, #56]	; (8003260 <LCD_IO_ReadData+0x60>)
 8003226:	f002 f8d7 	bl	80053d8 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff fec7 	bl	8002fc0 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8003232:	797b      	ldrb	r3, [r7, #5]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fea3 	bl	8002f80 <SPIx_Read>
 800323a:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800323c:	2201      	movs	r2, #1
 800323e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003242:	4807      	ldr	r0, [pc, #28]	; (8003260 <LCD_IO_ReadData+0x60>)
 8003244:	f002 f8c8 	bl	80053d8 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003248:	2201      	movs	r2, #1
 800324a:	2104      	movs	r1, #4
 800324c:	4803      	ldr	r0, [pc, #12]	; (800325c <LCD_IO_ReadData+0x5c>)
 800324e:	f002 f8c3 	bl	80053d8 <HAL_GPIO_WritePin>
  
  return readvalue;
 8003252:	68fb      	ldr	r3, [r7, #12]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40020800 	.word	0x40020800
 8003260:	40020c00 	.word	0x40020c00

08003264 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f001 f97d 	bl	800456c <HAL_Delay>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 800327a:	b580      	push	{r7, lr}
 800327c:	af00      	add	r7, sp, #0
  I2Cx_Init();
 800327e:	f7ff fd51 	bl	8002d24 <I2Cx_Init>
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}

08003286 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 800328a:	f7ff fd7d 	bl	8002d88 <I2Cx_ITConfig>
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}

08003292 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	4603      	mov	r3, r0
 800329a:	71fb      	strb	r3, [r7, #7]
 800329c:	460b      	mov	r3, r1
 800329e:	71bb      	strb	r3, [r7, #6]
 80032a0:	4613      	mov	r3, r2
 80032a2:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 80032a4:	797a      	ldrb	r2, [r7, #5]
 80032a6:	79b9      	ldrb	r1, [r7, #6]
 80032a8:	79fb      	ldrb	r3, [r7, #7]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fd9e 	bl	8002dec <I2Cx_WriteData>
}
 80032b0:	bf00      	nop
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	460a      	mov	r2, r1
 80032c2:	71fb      	strb	r3, [r7, #7]
 80032c4:	4613      	mov	r3, r2
 80032c6:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 80032c8:	79ba      	ldrb	r2, [r7, #6]
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fdb6 	bl	8002e40 <I2Cx_ReadData>
 80032d4:	4603      	mov	r3, r0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	603a      	str	r2, [r7, #0]
 80032e6:	461a      	mov	r2, r3
 80032e8:	4603      	mov	r3, r0
 80032ea:	71fb      	strb	r3, [r7, #7]
 80032ec:	460b      	mov	r3, r1
 80032ee:	71bb      	strb	r3, [r7, #6]
 80032f0:	4613      	mov	r3, r2
 80032f2:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 80032f4:	88bb      	ldrh	r3, [r7, #4]
 80032f6:	79b9      	ldrb	r1, [r7, #6]
 80032f8:	79f8      	ldrb	r0, [r7, #7]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	f7ff fdcc 	bl	8002e98 <I2Cx_ReadBuffer>
 8003300:	4603      	mov	r3, r0
 8003302:	b29b      	uxth	r3, r3
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f001 f929 	bl	800456c <HAL_Delay>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <BSP_LCD_Init_Flipped>:
/**
 * @brief  Initializes the LCD for flipped operation.
 * LCD orientation is rotated by 180°.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init_Flipped(void){
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
	flippedLcd = true;
 8003328:	4b03      	ldr	r3, [pc, #12]	; (8003338 <BSP_LCD_Init_Flipped+0x14>)
 800332a:	2201      	movs	r2, #1
 800332c:	701a      	strb	r2, [r3, #0]
	return BSP_LCD_Init();
 800332e:	f000 f805 	bl	800333c <BSP_LCD_Init>
 8003332:	4603      	mov	r3, r0
}
 8003334:	4618      	mov	r0, r3
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000b94 	.word	0x20000b94

0800333c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8003340:	4b2d      	ldr	r3, [pc, #180]	; (80033f8 <BSP_LCD_Init+0xbc>)
 8003342:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <BSP_LCD_Init+0xc0>)
 8003344:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8003346:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <BSP_LCD_Init+0xbc>)
 8003348:	2209      	movs	r2, #9
 800334a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800334c:	4b2a      	ldr	r3, [pc, #168]	; (80033f8 <BSP_LCD_Init+0xbc>)
 800334e:	2201      	movs	r2, #1
 8003350:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8003352:	4b29      	ldr	r3, [pc, #164]	; (80033f8 <BSP_LCD_Init+0xbc>)
 8003354:	221d      	movs	r2, #29
 8003356:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <BSP_LCD_Init+0xbc>)
 800335a:	2203      	movs	r2, #3
 800335c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800335e:	4b26      	ldr	r3, [pc, #152]	; (80033f8 <BSP_LCD_Init+0xbc>)
 8003360:	f240 120d 	movw	r2, #269	; 0x10d
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <BSP_LCD_Init+0xbc>)
 8003368:	f240 1243 	movw	r2, #323	; 0x143
 800336c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <BSP_LCD_Init+0xbc>)
 8003370:	f240 1217 	movw	r2, #279	; 0x117
 8003374:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8003376:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <BSP_LCD_Init+0xbc>)
 8003378:	f240 1247 	movw	r2, #327	; 0x147
 800337c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800337e:	4b1e      	ldr	r3, [pc, #120]	; (80033f8 <BSP_LCD_Init+0xbc>)
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <BSP_LCD_Init+0xbc>)
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <BSP_LCD_Init+0xbc>)
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <BSP_LCD_Init+0xc4>)
 8003398:	2208      	movs	r2, #8
 800339a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800339c:	4b18      	ldr	r3, [pc, #96]	; (8003400 <BSP_LCD_Init+0xc4>)
 800339e:	22c0      	movs	r2, #192	; 0xc0
 80033a0:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80033a2:	4b17      	ldr	r3, [pc, #92]	; (8003400 <BSP_LCD_Init+0xc4>)
 80033a4:	2204      	movs	r2, #4
 80033a6:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80033a8:	4b15      	ldr	r3, [pc, #84]	; (8003400 <BSP_LCD_Init+0xc4>)
 80033aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80033b0:	4813      	ldr	r0, [pc, #76]	; (8003400 <BSP_LCD_Init+0xc4>)
 80033b2:	f003 ffa7 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80033b6:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <BSP_LCD_Init+0xbc>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80033bc:	4b0e      	ldr	r3, [pc, #56]	; (80033f8 <BSP_LCD_Init+0xbc>)
 80033be:	2200      	movs	r2, #0
 80033c0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80033c2:	4b0d      	ldr	r3, [pc, #52]	; (80033f8 <BSP_LCD_Init+0xbc>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <BSP_LCD_Init+0xbc>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 80033ce:	f000 fb77 	bl	8003ac0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80033d2:	4809      	ldr	r0, [pc, #36]	; (80033f8 <BSP_LCD_Init+0xbc>)
 80033d4:	f003 f842 	bl	800645c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 80033d8:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <BSP_LCD_Init+0xc8>)
 80033da:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <BSP_LCD_Init+0xcc>)
 80033dc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <BSP_LCD_Init+0xc8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 80033e6:	f000 fd79 	bl	8003edc <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80033ea:	4808      	ldr	r0, [pc, #32]	; (800340c <BSP_LCD_Init+0xd0>)
 80033ec:	f000 f8ce 	bl	800358c <BSP_LCD_SetFont>

  return LCD_OK;
 80033f0:	2300      	movs	r3, #0
}  
 80033f2:	4618      	mov	r0, r3
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20000a5c 	.word	0x20000a5c
 80033fc:	40016800 	.word	0x40016800
 8003400:	20000b44 	.word	0x20000b44
 8003404:	20000b90 	.word	0x20000b90
 8003408:	200000fc 	.word	0x200000fc
 800340c:	2000016c 	.word	0x2000016c

08003410 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <BSP_LCD_GetXSize+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	4798      	blx	r3
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	20000b90 	.word	0x20000b90

08003428 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 800342c:	4b03      	ldr	r3, [pc, #12]	; (800343c <BSP_LCD_GetYSize+0x14>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003432:	4798      	blx	r3
 8003434:	4603      	mov	r3, r0
}
 8003436:	4618      	mov	r0, r3
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000b90 	.word	0x20000b90

08003440 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003440:	b580      	push	{r7, lr}
 8003442:	b090      	sub	sp, #64	; 0x40
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003450:	f7ff ffde 	bl	8003410 <BSP_LCD_GetXSize>
 8003454:	4603      	mov	r3, r0
 8003456:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800345c:	f7ff ffe4 	bl	8003428 <BSP_LCD_GetYSize>
 8003460:	4603      	mov	r3, r0
 8003462:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800346c:	23ff      	movs	r3, #255	; 0xff
 800346e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003486:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800348a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800348c:	2307      	movs	r3, #7
 800348e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003490:	f7ff ffbe 	bl	8003410 <BSP_LCD_GetXSize>
 8003494:	4603      	mov	r3, r0
 8003496:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003498:	f7ff ffc6 	bl	8003428 <BSP_LCD_GetYSize>
 800349c:	4603      	mov	r3, r0
 800349e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 80034a0:	88fa      	ldrh	r2, [r7, #6]
 80034a2:	f107 030c 	add.w	r3, r7, #12
 80034a6:	4619      	mov	r1, r3
 80034a8:	4814      	ldr	r0, [pc, #80]	; (80034fc <BSP_LCD_LayerDefaultInit+0xbc>)
 80034aa:	f003 f8b1 	bl	8006610 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	4913      	ldr	r1, [pc, #76]	; (8003500 <BSP_LCD_LayerDefaultInit+0xc0>)
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	3304      	adds	r3, #4
 80034be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034c2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	490e      	ldr	r1, [pc, #56]	; (8003500 <BSP_LCD_LayerDefaultInit+0xc0>)
 80034c8:	4613      	mov	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	3308      	adds	r3, #8
 80034d4:	4a0b      	ldr	r2, [pc, #44]	; (8003504 <BSP_LCD_LayerDefaultInit+0xc4>)
 80034d6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80034d8:	88fa      	ldrh	r2, [r7, #6]
 80034da:	4909      	ldr	r1, [pc, #36]	; (8003500 <BSP_LCD_LayerDefaultInit+0xc0>)
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80034ea:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 80034ec:	4803      	ldr	r0, [pc, #12]	; (80034fc <BSP_LCD_LayerDefaultInit+0xbc>)
 80034ee:	f003 f8cd 	bl	800668c <HAL_LTDC_EnableDither>
}
 80034f2:	bf00      	nop
 80034f4:	3740      	adds	r7, #64	; 0x40
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000a5c 	.word	0x20000a5c
 8003500:	20000b78 	.word	0x20000b78
 8003504:	2000016c 	.word	0x2000016c

08003508 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <BSP_LCD_SelectLayer+0x1c>)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6013      	str	r3, [r2, #0]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000b74 	.word	0x20000b74

08003528 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003530:	4b07      	ldr	r3, [pc, #28]	; (8003550 <BSP_LCD_SetTextColor+0x28>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4907      	ldr	r1, [pc, #28]	; (8003554 <BSP_LCD_SetTextColor+0x2c>)
 8003536:	4613      	mov	r3, r2
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	601a      	str	r2, [r3, #0]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	20000b74 	.word	0x20000b74
 8003554:	20000b78 	.word	0x20000b78

08003558 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <BSP_LCD_SetBackColor+0x2c>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4908      	ldr	r1, [pc, #32]	; (8003588 <BSP_LCD_SetBackColor+0x30>)
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3304      	adds	r3, #4
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	601a      	str	r2, [r3, #0]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	20000b74 	.word	0x20000b74
 8003588:	20000b78 	.word	0x20000b78

0800358c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003594:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <BSP_LCD_SetFont+0x2c>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	4908      	ldr	r1, [pc, #32]	; (80035bc <BSP_LCD_SetFont+0x30>)
 800359a:	4613      	mov	r3, r2
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	3308      	adds	r3, #8
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop
 80035b8:	20000b74 	.word	0x20000b74
 80035bc:	20000b78 	.word	0x20000b78

080035c0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <BSP_LCD_Clear+0x48>)
 80035ca:	681c      	ldr	r4, [r3, #0]
 80035cc:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <BSP_LCD_Clear+0x48>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a0e      	ldr	r2, [pc, #56]	; (800360c <BSP_LCD_Clear+0x4c>)
 80035d2:	2134      	movs	r1, #52	; 0x34
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	335c      	adds	r3, #92	; 0x5c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461e      	mov	r6, r3
 80035e0:	f7ff ff16 	bl	8003410 <BSP_LCD_GetXSize>
 80035e4:	4605      	mov	r5, r0
 80035e6:	f7ff ff1f 	bl	8003428 <BSP_LCD_GetYSize>
 80035ea:	4602      	mov	r2, r0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	2300      	movs	r3, #0
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4613      	mov	r3, r2
 80035f6:	462a      	mov	r2, r5
 80035f8:	4631      	mov	r1, r6
 80035fa:	4620      	mov	r0, r4
 80035fc:	f000 fc36 	bl	8003e6c <FillBuffer>
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003608:	20000b74 	.word	0x20000b74
 800360c:	20000a5c 	.word	0x20000a5c

08003610 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003610:	b590      	push	{r4, r7, lr}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	80fb      	strh	r3, [r7, #6]
 800361a:	460b      	mov	r3, r1
 800361c:	80bb      	strh	r3, [r7, #4]
 800361e:	4613      	mov	r3, r2
 8003620:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <BSP_LCD_DisplayChar+0x80>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	491b      	ldr	r1, [pc, #108]	; (8003694 <BSP_LCD_DisplayChar+0x84>)
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	3308      	adds	r3, #8
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800363e:	4b14      	ldr	r3, [pc, #80]	; (8003690 <BSP_LCD_DisplayChar+0x80>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4c14      	ldr	r4, [pc, #80]	; (8003694 <BSP_LCD_DisplayChar+0x84>)
 8003644:	4613      	mov	r3, r2
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4423      	add	r3, r4
 800364e:	3308      	adds	r3, #8
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003654:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003658:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <BSP_LCD_DisplayChar+0x80>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4c0d      	ldr	r4, [pc, #52]	; (8003694 <BSP_LCD_DisplayChar+0x84>)
 800365e:	4613      	mov	r3, r2
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4423      	add	r3, r4
 8003668:	3308      	adds	r3, #8
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	889b      	ldrh	r3, [r3, #4]
 800366e:	3307      	adds	r3, #7
 8003670:	2b00      	cmp	r3, #0
 8003672:	da00      	bge.n	8003676 <BSP_LCD_DisplayChar+0x66>
 8003674:	3307      	adds	r3, #7
 8003676:	10db      	asrs	r3, r3, #3
 8003678:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800367c:	18ca      	adds	r2, r1, r3
 800367e:	88b9      	ldrh	r1, [r7, #4]
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fb38 	bl	8003cf8 <DrawChar>
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bd90      	pop	{r4, r7, pc}
 8003690:	20000b74 	.word	0x20000b74
 8003694:	20000b78 	.word	0x20000b78

08003698 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003698:	b5b0      	push	{r4, r5, r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	60ba      	str	r2, [r7, #8]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	81fb      	strh	r3, [r7, #14]
 80036a6:	460b      	mov	r3, r1
 80036a8:	81bb      	strh	r3, [r7, #12]
 80036aa:	4613      	mov	r3, r2
 80036ac:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80036ae:	2301      	movs	r3, #1
 80036b0:	83fb      	strh	r3, [r7, #30]
 80036b2:	2300      	movs	r3, #0
 80036b4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80036b6:	2300      	movs	r3, #0
 80036b8:	61bb      	str	r3, [r7, #24]
 80036ba:	2300      	movs	r3, #0
 80036bc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80036c2:	e002      	b.n	80036ca <BSP_LCD_DisplayStringAt+0x32>
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	3301      	adds	r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	617a      	str	r2, [r7, #20]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f6      	bne.n	80036c4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80036d6:	f7ff fe9b 	bl	8003410 <BSP_LCD_GetXSize>
 80036da:	4601      	mov	r1, r0
 80036dc:	4b4b      	ldr	r3, [pc, #300]	; (800380c <BSP_LCD_DisplayStringAt+0x174>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	484b      	ldr	r0, [pc, #300]	; (8003810 <BSP_LCD_DisplayStringAt+0x178>)
 80036e2:	4613      	mov	r3, r2
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4403      	add	r3, r0
 80036ec:	3308      	adds	r3, #8
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	889b      	ldrh	r3, [r3, #4]
 80036f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f6:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d01c      	beq.n	8003738 <BSP_LCD_DisplayStringAt+0xa0>
 80036fe:	2b03      	cmp	r3, #3
 8003700:	dc33      	bgt.n	800376a <BSP_LCD_DisplayStringAt+0xd2>
 8003702:	2b01      	cmp	r3, #1
 8003704:	d002      	beq.n	800370c <BSP_LCD_DisplayStringAt+0x74>
 8003706:	2b02      	cmp	r3, #2
 8003708:	d019      	beq.n	800373e <BSP_LCD_DisplayStringAt+0xa6>
 800370a:	e02e      	b.n	800376a <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	1ad1      	subs	r1, r2, r3
 8003712:	4b3e      	ldr	r3, [pc, #248]	; (800380c <BSP_LCD_DisplayStringAt+0x174>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	483e      	ldr	r0, [pc, #248]	; (8003810 <BSP_LCD_DisplayStringAt+0x178>)
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4403      	add	r3, r0
 8003722:	3308      	adds	r3, #8
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	889b      	ldrh	r3, [r3, #4]
 8003728:	fb01 f303 	mul.w	r3, r1, r3
 800372c:	085b      	lsrs	r3, r3, #1
 800372e:	b29a      	uxth	r2, r3
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	4413      	add	r3, r2
 8003734:	83fb      	strh	r3, [r7, #30]
      break;
 8003736:	e01b      	b.n	8003770 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003738:	89fb      	ldrh	r3, [r7, #14]
 800373a:	83fb      	strh	r3, [r7, #30]
      break;
 800373c:	e018      	b.n	8003770 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	b299      	uxth	r1, r3
 8003746:	4b31      	ldr	r3, [pc, #196]	; (800380c <BSP_LCD_DisplayStringAt+0x174>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4831      	ldr	r0, [pc, #196]	; (8003810 <BSP_LCD_DisplayStringAt+0x178>)
 800374c:	4613      	mov	r3, r2
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4403      	add	r3, r0
 8003756:	3308      	adds	r3, #8
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	889b      	ldrh	r3, [r3, #4]
 800375c:	fb11 f303 	smulbb	r3, r1, r3
 8003760:	b29a      	uxth	r2, r3
 8003762:	89fb      	ldrh	r3, [r7, #14]
 8003764:	4413      	add	r3, r2
 8003766:	83fb      	strh	r3, [r7, #30]
      break;
 8003768:	e002      	b.n	8003770 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 800376a:	89fb      	ldrh	r3, [r7, #14]
 800376c:	83fb      	strh	r3, [r7, #30]
      break;
 800376e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003770:	e01a      	b.n	80037a8 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	781a      	ldrb	r2, [r3, #0]
 8003776:	89b9      	ldrh	r1, [r7, #12]
 8003778:	8bfb      	ldrh	r3, [r7, #30]
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff ff48 	bl	8003610 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003780:	4b22      	ldr	r3, [pc, #136]	; (800380c <BSP_LCD_DisplayStringAt+0x174>)
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	4922      	ldr	r1, [pc, #136]	; (8003810 <BSP_LCD_DisplayStringAt+0x178>)
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	3308      	adds	r3, #8
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	889a      	ldrh	r2, [r3, #4]
 8003796:	8bfb      	ldrh	r3, [r7, #30]
 8003798:	4413      	add	r3, r2
 800379a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	3301      	adds	r3, #1
 80037a0:	60bb      	str	r3, [r7, #8]
    i++;
 80037a2:	8bbb      	ldrh	r3, [r7, #28]
 80037a4:	3301      	adds	r3, #1
 80037a6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2dc      	uxtb	r4, r3
 80037b6:	f7ff fe2b 	bl	8003410 <BSP_LCD_GetXSize>
 80037ba:	8bb9      	ldrh	r1, [r7, #28]
 80037bc:	4b13      	ldr	r3, [pc, #76]	; (800380c <BSP_LCD_DisplayStringAt+0x174>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	4d13      	ldr	r5, [pc, #76]	; (8003810 <BSP_LCD_DisplayStringAt+0x178>)
 80037c2:	4613      	mov	r3, r2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	442b      	add	r3, r5
 80037cc:	3308      	adds	r3, #8
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	889b      	ldrh	r3, [r3, #4]
 80037d2:	fb01 f303 	mul.w	r3, r1, r3
 80037d6:	1ac3      	subs	r3, r0, r3
 80037d8:	b299      	uxth	r1, r3
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <BSP_LCD_DisplayStringAt+0x174>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	480c      	ldr	r0, [pc, #48]	; (8003810 <BSP_LCD_DisplayStringAt+0x178>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4403      	add	r3, r0
 80037ea:	3308      	adds	r3, #8
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	889b      	ldrh	r3, [r3, #4]
 80037f0:	4299      	cmp	r1, r3
 80037f2:	bf2c      	ite	cs
 80037f4:	2301      	movcs	r3, #1
 80037f6:	2300      	movcc	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	4023      	ands	r3, r4
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1b7      	bne.n	8003772 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bdb0      	pop	{r4, r5, r7, pc}
 800380c:	20000b74 	.word	0x20000b74
 8003810:	20000b78 	.word	0x20000b78

08003814 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b08b      	sub	sp, #44	; 0x2c
 8003818:	af00      	add	r7, sp, #0
 800381a:	4604      	mov	r4, r0
 800381c:	4608      	mov	r0, r1
 800381e:	4611      	mov	r1, r2
 8003820:	461a      	mov	r2, r3
 8003822:	4623      	mov	r3, r4
 8003824:	80fb      	strh	r3, [r7, #6]
 8003826:	4603      	mov	r3, r0
 8003828:	80bb      	strh	r3, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	807b      	strh	r3, [r7, #2]
 800382e:	4613      	mov	r3, r2
 8003830:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003832:	2300      	movs	r3, #0
 8003834:	823b      	strh	r3, [r7, #16]
 8003836:	2300      	movs	r3, #0
 8003838:	81fb      	strh	r3, [r7, #14]
 800383a:	2300      	movs	r3, #0
 800383c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800383e:	2300      	movs	r3, #0
 8003840:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003842:	2300      	movs	r3, #0
 8003844:	847b      	strh	r3, [r7, #34]	; 0x22
 8003846:	2300      	movs	r3, #0
 8003848:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800384a:	2300      	movs	r3, #0
 800384c:	83fb      	strh	r3, [r7, #30]
 800384e:	2300      	movs	r3, #0
 8003850:	83bb      	strh	r3, [r7, #28]
 8003852:	2300      	movs	r3, #0
 8003854:	837b      	strh	r3, [r7, #26]
 8003856:	2300      	movs	r3, #0
 8003858:	833b      	strh	r3, [r7, #24]
 800385a:	2300      	movs	r3, #0
 800385c:	82fb      	strh	r3, [r7, #22]
 800385e:	2300      	movs	r3, #0
 8003860:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 8003866:	887a      	ldrh	r2, [r7, #2]
 8003868:	88fb      	ldrh	r3, [r7, #6]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	bfb8      	it	lt
 8003870:	425b      	neglt	r3, r3
 8003872:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8003874:	883a      	ldrh	r2, [r7, #0]
 8003876:	88bb      	ldrh	r3, [r7, #4]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	bfb8      	it	lt
 800387e:	425b      	neglt	r3, r3
 8003880:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8003882:	88fb      	ldrh	r3, [r7, #6]
 8003884:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 8003886:	88bb      	ldrh	r3, [r7, #4]
 8003888:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	88fb      	ldrh	r3, [r7, #6]
 800388e:	429a      	cmp	r2, r3
 8003890:	d304      	bcc.n	800389c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003892:	2301      	movs	r3, #1
 8003894:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003896:	2301      	movs	r3, #1
 8003898:	843b      	strh	r3, [r7, #32]
 800389a:	e005      	b.n	80038a8 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800389c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038a0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80038a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038a6:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 80038a8:	883a      	ldrh	r2, [r7, #0]
 80038aa:	88bb      	ldrh	r3, [r7, #4]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d304      	bcc.n	80038ba <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 80038b0:	2301      	movs	r3, #1
 80038b2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80038b4:	2301      	movs	r3, #1
 80038b6:	83bb      	strh	r3, [r7, #28]
 80038b8:	e005      	b.n	80038c6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80038ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038be:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80038c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038c4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80038c6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80038ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	db10      	blt.n	80038f4 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80038d2:	2300      	movs	r3, #0
 80038d4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80038d6:	2300      	movs	r3, #0
 80038d8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80038da:	8a3b      	ldrh	r3, [r7, #16]
 80038dc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80038de:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80038e2:	0fda      	lsrs	r2, r3, #31
 80038e4:	4413      	add	r3, r2
 80038e6:	105b      	asrs	r3, r3, #1
 80038e8:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80038ea:	89fb      	ldrh	r3, [r7, #14]
 80038ec:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80038ee:	8a3b      	ldrh	r3, [r7, #16]
 80038f0:	82bb      	strh	r3, [r7, #20]
 80038f2:	e00f      	b.n	8003914 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80038f4:	2300      	movs	r3, #0
 80038f6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80038f8:	2300      	movs	r3, #0
 80038fa:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80038fc:	89fb      	ldrh	r3, [r7, #14]
 80038fe:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003900:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003904:	0fda      	lsrs	r2, r3, #31
 8003906:	4413      	add	r3, r2
 8003908:	105b      	asrs	r3, r3, #1
 800390a:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 800390c:	8a3b      	ldrh	r3, [r7, #16]
 800390e:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003910:	89fb      	ldrh	r3, [r7, #14]
 8003912:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003914:	2300      	movs	r3, #0
 8003916:	827b      	strh	r3, [r7, #18]
 8003918:	e037      	b.n	800398a <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 800391a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800391c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <BSP_LCD_DrawLine+0x18c>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	4c20      	ldr	r4, [pc, #128]	; (80039a4 <BSP_LCD_DrawLine+0x190>)
 8003924:	4613      	mov	r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4423      	add	r3, r4
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	461a      	mov	r2, r3
 8003932:	f000 f99b 	bl	8003c6c <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8003936:	8b3a      	ldrh	r2, [r7, #24]
 8003938:	8afb      	ldrh	r3, [r7, #22]
 800393a:	4413      	add	r3, r2
 800393c:	b29b      	uxth	r3, r3
 800393e:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003940:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003944:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003948:	429a      	cmp	r2, r3
 800394a:	db0e      	blt.n	800396a <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 800394c:	8b3a      	ldrh	r2, [r7, #24]
 800394e:	8b7b      	ldrh	r3, [r7, #26]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	b29b      	uxth	r3, r3
 8003954:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003956:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800395a:	4413      	add	r3, r2
 800395c:	b29b      	uxth	r3, r3
 800395e:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003960:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003962:	8bfb      	ldrh	r3, [r7, #30]
 8003964:	4413      	add	r3, r2
 8003966:	b29b      	uxth	r3, r3
 8003968:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800396a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800396c:	8c3b      	ldrh	r3, [r7, #32]
 800396e:	4413      	add	r3, r2
 8003970:	b29b      	uxth	r3, r3
 8003972:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003974:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003976:	8bbb      	ldrh	r3, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	b29b      	uxth	r3, r3
 800397c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800397e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003982:	b29b      	uxth	r3, r3
 8003984:	3301      	adds	r3, #1
 8003986:	b29b      	uxth	r3, r3
 8003988:	827b      	strh	r3, [r7, #18]
 800398a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800398e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003992:	429a      	cmp	r2, r3
 8003994:	ddc1      	ble.n	800391a <BSP_LCD_DrawLine+0x106>
  }
}
 8003996:	bf00      	nop
 8003998:	bf00      	nop
 800399a:	372c      	adds	r7, #44	; 0x2c
 800399c:	46bd      	mov	sp, r7
 800399e:	bd90      	pop	{r4, r7, pc}
 80039a0:	20000b74 	.word	0x20000b74
 80039a4:	20000b78 	.word	0x20000b78

080039a8 <BSP_LCD_FillRect>:
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80039a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af02      	add	r7, sp, #8
 80039b0:	4604      	mov	r4, r0
 80039b2:	4608      	mov	r0, r1
 80039b4:	4611      	mov	r1, r2
 80039b6:	461a      	mov	r2, r3
 80039b8:	4623      	mov	r3, r4
 80039ba:	80fb      	strh	r3, [r7, #6]
 80039bc:	4603      	mov	r3, r0
 80039be:	80bb      	strh	r3, [r7, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	807b      	strh	r3, [r7, #2]
 80039c4:	4613      	mov	r3, r2
 80039c6:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80039cc:	4b30      	ldr	r3, [pc, #192]	; (8003a90 <BSP_LCD_FillRect+0xe8>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4930      	ldr	r1, [pc, #192]	; (8003a94 <BSP_LCD_FillRect+0xec>)
 80039d2:	4613      	mov	r3, r2
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4413      	add	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fda2 	bl	8003528 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */

  if (flippedLcd)
 80039e4:	4b2c      	ldr	r3, [pc, #176]	; (8003a98 <BSP_LCD_FillRect+0xf0>)
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01b      	beq.n	8003a24 <BSP_LCD_FillRect+0x7c>
  {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4 * (-BSP_LCD_GetXSize()*(Ypos+Height) - (Xpos+Width) +76800); //Rotate by 180°
 80039ec:	4b28      	ldr	r3, [pc, #160]	; (8003a90 <BSP_LCD_FillRect+0xe8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <BSP_LCD_FillRect+0xf4>)
 80039f2:	2134      	movs	r1, #52	; 0x34
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	335c      	adds	r3, #92	; 0x5c
 80039fc:	681c      	ldr	r4, [r3, #0]
 80039fe:	f7ff fd07 	bl	8003410 <BSP_LCD_GetXSize>
 8003a02:	4603      	mov	r3, r0
 8003a04:	425b      	negs	r3, r3
 8003a06:	88b9      	ldrh	r1, [r7, #4]
 8003a08:	883a      	ldrh	r2, [r7, #0]
 8003a0a:	440a      	add	r2, r1
 8003a0c:	fb02 f303 	mul.w	r3, r2, r3
 8003a10:	88f9      	ldrh	r1, [r7, #6]
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	440a      	add	r2, r1
 8003a16:	1a9b      	subs	r3, r3, r2
 8003a18:	f503 3396 	add.w	r3, r3, #76800	; 0x12c00
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4423      	add	r3, r4
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	e013      	b.n	8003a4c <BSP_LCD_FillRect+0xa4>
   }
  else {
	  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <BSP_LCD_FillRect+0xe8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <BSP_LCD_FillRect+0xf4>)
 8003a2a:	2134      	movs	r1, #52	; 0x34
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	335c      	adds	r3, #92	; 0x5c
 8003a34:	681c      	ldr	r4, [r3, #0]
 8003a36:	f7ff fceb 	bl	8003410 <BSP_LCD_GetXSize>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	88bb      	ldrh	r3, [r7, #4]
 8003a3e:	fb03 f202 	mul.w	r2, r3, r2
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	4413      	add	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4423      	add	r3, r4
 8003a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <BSP_LCD_FillRect+0xe8>)
 8003a4e:	681c      	ldr	r4, [r3, #0]
 8003a50:	68fd      	ldr	r5, [r7, #12]
 8003a52:	887e      	ldrh	r6, [r7, #2]
 8003a54:	f8b7 8000 	ldrh.w	r8, [r7]
 8003a58:	f7ff fcda 	bl	8003410 <BSP_LCD_GetXSize>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	1ad1      	subs	r1, r2, r3
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <BSP_LCD_FillRect+0xe8>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	480b      	ldr	r0, [pc, #44]	; (8003a94 <BSP_LCD_FillRect+0xec>)
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4403      	add	r3, r0
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	9100      	str	r1, [sp, #0]
 8003a78:	4643      	mov	r3, r8
 8003a7a:	4632      	mov	r2, r6
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	4620      	mov	r0, r4
 8003a80:	f000 f9f4 	bl	8003e6c <FillBuffer>
}
 8003a84:	bf00      	nop
 8003a86:	3710      	adds	r7, #16
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000b74 	.word	0x20000b74
 8003a94:	20000b78 	.word	0x20000b78
 8003a98:	20000b94 	.word	0x20000b94
 8003a9c:	20000a5c 	.word	0x20000a5c

08003aa0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003aa4:	4b05      	ldr	r3, [pc, #20]	; (8003abc <BSP_LCD_DisplayOn+0x1c>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003aae:	4b03      	ldr	r3, [pc, #12]	; (8003abc <BSP_LCD_DisplayOn+0x1c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	4798      	blx	r3
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000b90 	.word	0x20000b90

08003ac0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08e      	sub	sp, #56	; 0x38
 8003ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	623b      	str	r3, [r7, #32]
 8003aca:	4b61      	ldr	r3, [pc, #388]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ace:	4a60      	ldr	r2, [pc, #384]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003ad0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ad6:	4b5e      	ldr	r3, [pc, #376]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ade:	623b      	str	r3, [r7, #32]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	4b5a      	ldr	r3, [pc, #360]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	4a59      	ldr	r2, [pc, #356]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003aec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003af0:	6313      	str	r3, [r2, #48]	; 0x30
 8003af2:	4b57      	ldr	r3, [pc, #348]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afe:	2300      	movs	r3, #0
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	4b53      	ldr	r3, [pc, #332]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4a52      	ldr	r2, [pc, #328]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b0e:	4b50      	ldr	r3, [pc, #320]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	4b4c      	ldr	r3, [pc, #304]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a4b      	ldr	r2, [pc, #300]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b24:	f043 0302 	orr.w	r3, r3, #2
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b49      	ldr	r3, [pc, #292]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	4b45      	ldr	r3, [pc, #276]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b40:	f043 0304 	orr.w	r3, r3, #4
 8003b44:	6313      	str	r3, [r2, #48]	; 0x30
 8003b46:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	4a3d      	ldr	r2, [pc, #244]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b5c:	f043 0308 	orr.w	r3, r3, #8
 8003b60:	6313      	str	r3, [r2, #48]	; 0x30
 8003b62:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a36      	ldr	r2, [pc, #216]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b78:	f043 0320 	orr.w	r3, r3, #32
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b34      	ldr	r3, [pc, #208]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	60bb      	str	r3, [r7, #8]
 8003b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a2f      	ldr	r2, [pc, #188]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b2d      	ldr	r3, [pc, #180]	; (8003c50 <BSP_LCD_MspInit+0x190>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	607b      	str	r3, [r7, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8003ba6:	f641 0358 	movw	r3, #6232	; 0x1858
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8003bb8:	230e      	movs	r3, #14
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4824      	ldr	r0, [pc, #144]	; (8003c54 <BSP_LCD_MspInit+0x194>)
 8003bc4:	f001 fa5c 	bl	8005080 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8003bc8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4820      	ldr	r0, [pc, #128]	; (8003c58 <BSP_LCD_MspInit+0x198>)
 8003bd6:	f001 fa53 	bl	8005080 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8003bda:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003be4:	4619      	mov	r1, r3
 8003be6:	481d      	ldr	r0, [pc, #116]	; (8003c5c <BSP_LCD_MspInit+0x19c>)
 8003be8:	f001 fa4a 	bl	8005080 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003bec:	2348      	movs	r3, #72	; 0x48
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	481a      	ldr	r0, [pc, #104]	; (8003c60 <BSP_LCD_MspInit+0x1a0>)
 8003bf8:	f001 fa42 	bl	8005080 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8003bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c06:	4619      	mov	r1, r3
 8003c08:	4816      	ldr	r0, [pc, #88]	; (8003c64 <BSP_LCD_MspInit+0x1a4>)
 8003c0a:	f001 fa39 	bl	8005080 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8003c0e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4813      	ldr	r0, [pc, #76]	; (8003c68 <BSP_LCD_MspInit+0x1a8>)
 8003c1c:	f001 fa30 	bl	8005080 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003c20:	2303      	movs	r3, #3
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003c24:	2309      	movs	r3, #9
 8003c26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	480a      	ldr	r0, [pc, #40]	; (8003c58 <BSP_LCD_MspInit+0x198>)
 8003c30:	f001 fa26 	bl	8005080 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003c34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4809      	ldr	r0, [pc, #36]	; (8003c68 <BSP_LCD_MspInit+0x1a8>)
 8003c42:	f001 fa1d 	bl	8005080 <HAL_GPIO_Init>
}
 8003c46:	bf00      	nop
 8003c48:	3738      	adds	r7, #56	; 0x38
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800
 8003c54:	40020000 	.word	0x40020000
 8003c58:	40020400 	.word	0x40020400
 8003c5c:	40020800 	.word	0x40020800
 8003c60:	40020c00 	.word	0x40020c00
 8003c64:	40021400 	.word	0x40021400
 8003c68:	40021800 	.word	0x40021800

08003c6c <BSP_LCD_DrawPixel>:
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  * @attention when flippedLcd is true, the LCD orientation is rotated by 180°
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003c6c:	b5b0      	push	{r4, r5, r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	603a      	str	r2, [r7, #0]
 8003c76:	80fb      	strh	r3, [r7, #6]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if (flippedLcd){
 8003c7c:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <BSP_LCD_DrawPixel+0x80>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d018      	beq.n	8003cb6 <BSP_LCD_DrawPixel+0x4a>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + 4 * (76800 - Xpos - BSP_LCD_GetXSize() * Ypos)) = RGB_Code; //Rotate all Pixels by 180°
 8003c84:	4b1a      	ldr	r3, [pc, #104]	; (8003cf0 <BSP_LCD_DrawPixel+0x84>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <BSP_LCD_DrawPixel+0x88>)
 8003c8a:	2134      	movs	r1, #52	; 0x34
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	4413      	add	r3, r2
 8003c92:	335c      	adds	r3, #92	; 0x5c
 8003c94:	681c      	ldr	r4, [r3, #0]
 8003c96:	88fd      	ldrh	r5, [r7, #6]
 8003c98:	f7ff fbba 	bl	8003410 <BSP_LCD_GetXSize>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	88bb      	ldrh	r3, [r7, #4]
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	442b      	add	r3, r5
 8003ca6:	f5c3 3396 	rsb	r3, r3, #76800	; 0x12c00
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4423      	add	r3, r4
 8003cae:	461a      	mov	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6013      	str	r3, [r2, #0]
  }
  else {
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003cb4:	e015      	b.n	8003ce2 <BSP_LCD_DrawPixel+0x76>
	  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <BSP_LCD_DrawPixel+0x84>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a0e      	ldr	r2, [pc, #56]	; (8003cf4 <BSP_LCD_DrawPixel+0x88>)
 8003cbc:	2134      	movs	r1, #52	; 0x34
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	335c      	adds	r3, #92	; 0x5c
 8003cc6:	681c      	ldr	r4, [r3, #0]
 8003cc8:	88bd      	ldrh	r5, [r7, #4]
 8003cca:	f7ff fba1 	bl	8003410 <BSP_LCD_GetXSize>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	fb03 f205 	mul.w	r2, r3, r5
 8003cd4:	88fb      	ldrh	r3, [r7, #6]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4423      	add	r3, r4
 8003cdc:	461a      	mov	r2, r3
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	6013      	str	r3, [r2, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bdb0      	pop	{r4, r5, r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000b94 	.word	0x20000b94
 8003cf0:	20000b74 	.word	0x20000b74
 8003cf4:	20000a5c 	.word	0x20000a5c

08003cf8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	603a      	str	r2, [r7, #0]
 8003d02:	80fb      	strh	r3, [r7, #6]
 8003d04:	460b      	mov	r3, r1
 8003d06:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003d14:	4b53      	ldr	r3, [pc, #332]	; (8003e64 <DrawChar+0x16c>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	4953      	ldr	r1, [pc, #332]	; (8003e68 <DrawChar+0x170>)
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	3308      	adds	r3, #8
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	88db      	ldrh	r3, [r3, #6]
 8003d2a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003d2c:	4b4d      	ldr	r3, [pc, #308]	; (8003e64 <DrawChar+0x16c>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	494d      	ldr	r1, [pc, #308]	; (8003e68 <DrawChar+0x170>)
 8003d32:	4613      	mov	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	3308      	adds	r3, #8
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	889b      	ldrh	r3, [r3, #4]
 8003d42:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003d44:	8a3b      	ldrh	r3, [r7, #16]
 8003d46:	3307      	adds	r3, #7
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	da00      	bge.n	8003d4e <DrawChar+0x56>
 8003d4c:	3307      	adds	r3, #7
 8003d4e:	10db      	asrs	r3, r3, #3
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	8a3b      	ldrh	r3, [r7, #16]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	e076      	b.n	8003e52 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003d64:	8a3b      	ldrh	r3, [r7, #16]
 8003d66:	3307      	adds	r3, #7
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	da00      	bge.n	8003d6e <DrawChar+0x76>
 8003d6c:	3307      	adds	r3, #7
 8003d6e:	10db      	asrs	r3, r3, #3
 8003d70:	461a      	mov	r2, r3
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	fb02 f303 	mul.w	r3, r2, r3
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003d7e:	8a3b      	ldrh	r3, [r7, #16]
 8003d80:	3307      	adds	r3, #7
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	da00      	bge.n	8003d88 <DrawChar+0x90>
 8003d86:	3307      	adds	r3, #7
 8003d88:	10db      	asrs	r3, r3, #3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d002      	beq.n	8003d94 <DrawChar+0x9c>
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d004      	beq.n	8003d9c <DrawChar+0xa4>
 8003d92:	e00c      	b.n	8003dae <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	617b      	str	r3, [r7, #20]
      break;
 8003d9a:	e016      	b.n	8003dca <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	3201      	adds	r2, #1
 8003da6:	7812      	ldrb	r2, [r2, #0]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
      break;
 8003dac:	e00d      	b.n	8003dca <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	041a      	lsls	r2, r3, #16
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	3301      	adds	r3, #1
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	3202      	adds	r2, #2
 8003dc2:	7812      	ldrb	r2, [r2, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]
      break;
 8003dc8:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	e036      	b.n	8003e3e <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003dd0:	8a3a      	ldrh	r2, [r7, #16]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	1ad2      	subs	r2, r2, r3
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	4413      	add	r3, r2
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	2201      	movs	r2, #1
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	4013      	ands	r3, r2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d012      	beq.n	8003e12 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	88fb      	ldrh	r3, [r7, #6]
 8003df2:	4413      	add	r3, r2
 8003df4:	b298      	uxth	r0, r3
 8003df6:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <DrawChar+0x16c>)
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	491b      	ldr	r1, [pc, #108]	; (8003e68 <DrawChar+0x170>)
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	88bb      	ldrh	r3, [r7, #4]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	f7ff ff2e 	bl	8003c6c <BSP_LCD_DrawPixel>
 8003e10:	e012      	b.n	8003e38 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	88fb      	ldrh	r3, [r7, #6]
 8003e18:	4413      	add	r3, r2
 8003e1a:	b298      	uxth	r0, r3
 8003e1c:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <DrawChar+0x16c>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4911      	ldr	r1, [pc, #68]	; (8003e68 <DrawChar+0x170>)
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	88bb      	ldrh	r3, [r7, #4]
 8003e32:	4619      	mov	r1, r3
 8003e34:	f7ff ff1a 	bl	8003c6c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	8a3b      	ldrh	r3, [r7, #16]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d3c4      	bcc.n	8003dd0 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003e46:	88bb      	ldrh	r3, [r7, #4]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	3301      	adds	r3, #1
 8003e50:	61fb      	str	r3, [r7, #28]
 8003e52:	8a7b      	ldrh	r3, [r7, #18]
 8003e54:	69fa      	ldr	r2, [r7, #28]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d384      	bcc.n	8003d64 <DrawChar+0x6c>
  }
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000b74 	.word	0x20000b74
 8003e68:	20000b78 	.word	0x20000b78

08003e6c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003e7a:	4b16      	ldr	r3, [pc, #88]	; (8003ed4 <FillBuffer+0x68>)
 8003e7c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003e80:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003e82:	4b14      	ldr	r3, [pc, #80]	; (8003ed4 <FillBuffer+0x68>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003e88:	4a12      	ldr	r2, [pc, #72]	; (8003ed4 <FillBuffer+0x68>)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <FillBuffer+0x68>)
 8003e90:	4a11      	ldr	r2, [pc, #68]	; (8003ed8 <FillBuffer+0x6c>)
 8003e92:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003e94:	480f      	ldr	r0, [pc, #60]	; (8003ed4 <FillBuffer+0x68>)
 8003e96:	f000 fe5d 	bl	8004b54 <HAL_DMA2D_Init>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d115      	bne.n	8003ecc <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003ea0:	68f9      	ldr	r1, [r7, #12]
 8003ea2:	480c      	ldr	r0, [pc, #48]	; (8003ed4 <FillBuffer+0x68>)
 8003ea4:	f000 ffbe 	bl	8004e24 <HAL_DMA2D_ConfigLayer>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10e      	bne.n	8003ecc <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69f9      	ldr	r1, [r7, #28]
 8003eb8:	4806      	ldr	r0, [pc, #24]	; (8003ed4 <FillBuffer+0x68>)
 8003eba:	f000 fe9e 	bl	8004bfa <HAL_DMA2D_Start>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d103      	bne.n	8003ecc <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003ec4:	210a      	movs	r1, #10
 8003ec6:	4803      	ldr	r0, [pc, #12]	; (8003ed4 <FillBuffer+0x68>)
 8003ec8:	f000 fec2 	bl	8004c50 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003ecc:	bf00      	nop
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000b04 	.word	0x20000b04
 8003ed8:	4002b000 	.word	0x4002b000

08003edc <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003ee0:	4b29      	ldr	r3, [pc, #164]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003ee2:	4a2a      	ldr	r2, [pc, #168]	; (8003f8c <BSP_SDRAM_Init+0xb0>)
 8003ee4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8003ee6:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <BSP_SDRAM_Init+0xb4>)
 8003ee8:	2202      	movs	r2, #2
 8003eea:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003eec:	4b28      	ldr	r3, [pc, #160]	; (8003f90 <BSP_SDRAM_Init+0xb4>)
 8003eee:	2207      	movs	r2, #7
 8003ef0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003ef2:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <BSP_SDRAM_Init+0xb4>)
 8003ef4:	2204      	movs	r2, #4
 8003ef6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8003ef8:	4b25      	ldr	r3, [pc, #148]	; (8003f90 <BSP_SDRAM_Init+0xb4>)
 8003efa:	2207      	movs	r2, #7
 8003efc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003efe:	4b24      	ldr	r3, [pc, #144]	; (8003f90 <BSP_SDRAM_Init+0xb4>)
 8003f00:	2202      	movs	r2, #2
 8003f02:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003f04:	4b22      	ldr	r3, [pc, #136]	; (8003f90 <BSP_SDRAM_Init+0xb4>)
 8003f06:	2202      	movs	r2, #2
 8003f08:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8003f0a:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <BSP_SDRAM_Init+0xb4>)
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f1e:	2204      	movs	r2, #4
 8003f20:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003f22:	4b19      	ldr	r3, [pc, #100]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f24:	2210      	movs	r2, #16
 8003f26:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003f28:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f2a:	2240      	movs	r2, #64	; 0x40
 8003f2c:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003f2e:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f30:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003f34:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003f3c:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f42:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003f44:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8003f4a:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f50:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003f52:	2100      	movs	r1, #0
 8003f54:	480c      	ldr	r0, [pc, #48]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f56:	f000 f87f 	bl	8004058 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8003f5a:	490d      	ldr	r1, [pc, #52]	; (8003f90 <BSP_SDRAM_Init+0xb4>)
 8003f5c:	480a      	ldr	r0, [pc, #40]	; (8003f88 <BSP_SDRAM_Init+0xac>)
 8003f5e:	f003 fb91 	bl	8007684 <HAL_SDRAM_Init>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003f68:	4b0a      	ldr	r3, [pc, #40]	; (8003f94 <BSP_SDRAM_Init+0xb8>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e002      	b.n	8003f76 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003f70:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <BSP_SDRAM_Init+0xb8>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003f76:	f240 506a 	movw	r0, #1386	; 0x56a
 8003f7a:	f000 f80d 	bl	8003f98 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003f7e:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <BSP_SDRAM_Init+0xb8>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	20000b98 	.word	0x20000b98
 8003f8c:	a0000140 	.word	0xa0000140
 8003f90:	20000bcc 	.word	0x20000bcc
 8003f94:	20000184 	.word	0x20000184

08003f98 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003fa4:	4b2a      	ldr	r3, [pc, #168]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003faa:	4b29      	ldr	r3, [pc, #164]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fac:	2208      	movs	r2, #8
 8003fae:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003fb0:	4b27      	ldr	r3, [pc, #156]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003fb6:	4b26      	ldr	r3, [pc, #152]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fc0:	4923      	ldr	r1, [pc, #140]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fc2:	4824      	ldr	r0, [pc, #144]	; (8004054 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003fc4:	f003 fb9c 	bl	8007700 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003fc8:	2001      	movs	r0, #1
 8003fca:	f000 facf 	bl	800456c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003fd4:	4b1e      	ldr	r3, [pc, #120]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003fda:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fdc:	2201      	movs	r2, #1
 8003fde:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8003fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fea:	4919      	ldr	r1, [pc, #100]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003fec:	4819      	ldr	r0, [pc, #100]	; (8004054 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003fee:	f003 fb87 	bl	8007700 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003ff2:	4b17      	ldr	r3, [pc, #92]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ff4:	2203      	movs	r2, #3
 8003ff6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003ff8:	4b15      	ldr	r3, [pc, #84]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ffa:	2208      	movs	r2, #8
 8003ffc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003ffe:	4b14      	ldr	r3, [pc, #80]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004000:	2204      	movs	r2, #4
 8004002:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8004004:	4b12      	ldr	r3, [pc, #72]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004006:	2200      	movs	r2, #0
 8004008:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800400a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800400e:	4910      	ldr	r1, [pc, #64]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004010:	4810      	ldr	r0, [pc, #64]	; (8004054 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004012:	f003 fb75 	bl	8007700 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8004016:	f44f 730c 	mov.w	r3, #560	; 0x230
 800401a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800401c:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800401e:	2204      	movs	r2, #4
 8004020:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004022:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004024:	2208      	movs	r2, #8
 8004026:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8004028:	4b09      	ldr	r3, [pc, #36]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800402a:	2201      	movs	r2, #1
 800402c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4a07      	ldr	r2, [pc, #28]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004032:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004038:	4905      	ldr	r1, [pc, #20]	; (8004050 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800403a:	4806      	ldr	r0, [pc, #24]	; (8004054 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800403c:	f003 fb60 	bl	8007700 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4804      	ldr	r0, [pc, #16]	; (8004054 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004044:	f003 fb87 	bl	8007756 <HAL_SDRAM_ProgramRefreshRate>
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000be8 	.word	0x20000be8
 8004054:	20000b98 	.word	0x20000b98

08004058 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b090      	sub	sp, #64	; 0x40
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80ec 	beq.w	8004242 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
 800406e:	4b77      	ldr	r3, [pc, #476]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	4a76      	ldr	r2, [pc, #472]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6393      	str	r3, [r2, #56]	; 0x38
 800407a:	4b74      	ldr	r3, [pc, #464]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	62bb      	str	r3, [r7, #40]	; 0x28
 8004084:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
 800408a:	4b70      	ldr	r3, [pc, #448]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4a6f      	ldr	r2, [pc, #444]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004090:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004094:	6313      	str	r3, [r2, #48]	; 0x30
 8004096:	4b6d      	ldr	r3, [pc, #436]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	623b      	str	r3, [r7, #32]
 80040a6:	4b69      	ldr	r3, [pc, #420]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	4a68      	ldr	r2, [pc, #416]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	6313      	str	r3, [r2, #48]	; 0x30
 80040b2:	4b66      	ldr	r3, [pc, #408]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 80040b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	623b      	str	r3, [r7, #32]
 80040bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	4b62      	ldr	r3, [pc, #392]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4a61      	ldr	r2, [pc, #388]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 80040c8:	f043 0304 	orr.w	r3, r3, #4
 80040cc:	6313      	str	r3, [r2, #48]	; 0x30
 80040ce:	4b5f      	ldr	r3, [pc, #380]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f003 0304 	and.w	r3, r3, #4
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	4b5b      	ldr	r3, [pc, #364]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 80040e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e2:	4a5a      	ldr	r2, [pc, #360]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 80040e4:	f043 0308 	orr.w	r3, r3, #8
 80040e8:	6313      	str	r3, [r2, #48]	; 0x30
 80040ea:	4b58      	ldr	r3, [pc, #352]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	4b54      	ldr	r3, [pc, #336]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	4a53      	ldr	r2, [pc, #332]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004100:	f043 0310 	orr.w	r3, r3, #16
 8004104:	6313      	str	r3, [r2, #48]	; 0x30
 8004106:	4b51      	ldr	r3, [pc, #324]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	4b4d      	ldr	r3, [pc, #308]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	4a4c      	ldr	r2, [pc, #304]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 800411c:	f043 0320 	orr.w	r3, r3, #32
 8004120:	6313      	str	r3, [r2, #48]	; 0x30
 8004122:	4b4a      	ldr	r3, [pc, #296]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b46      	ldr	r3, [pc, #280]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a45      	ldr	r2, [pc, #276]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b43      	ldr	r3, [pc, #268]	; (800424c <BSP_SDRAM_MspInit+0x1f4>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800414a:	2302      	movs	r3, #2
 800414c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800414e:	2302      	movs	r3, #2
 8004150:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004156:	230c      	movs	r3, #12
 8004158:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800415a:	2360      	movs	r3, #96	; 0x60
 800415c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800415e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004162:	4619      	mov	r1, r3
 8004164:	483a      	ldr	r0, [pc, #232]	; (8004250 <BSP_SDRAM_MspInit+0x1f8>)
 8004166:	f000 ff8b 	bl	8005080 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800416a:	2301      	movs	r3, #1
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800416e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004172:	4619      	mov	r1, r3
 8004174:	4837      	ldr	r0, [pc, #220]	; (8004254 <BSP_SDRAM_MspInit+0x1fc>)
 8004176:	f000 ff83 	bl	8005080 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800417a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004184:	4619      	mov	r1, r3
 8004186:	4834      	ldr	r0, [pc, #208]	; (8004258 <BSP_SDRAM_MspInit+0x200>)
 8004188:	f000 ff7a 	bl	8005080 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800418c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8004192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004196:	4619      	mov	r1, r3
 8004198:	4830      	ldr	r0, [pc, #192]	; (800425c <BSP_SDRAM_MspInit+0x204>)
 800419a:	f000 ff71 	bl	8005080 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800419e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80041a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041a8:	4619      	mov	r1, r3
 80041aa:	482d      	ldr	r0, [pc, #180]	; (8004260 <BSP_SDRAM_MspInit+0x208>)
 80041ac:	f000 ff68 	bl	8005080 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80041b0:	f248 1333 	movw	r3, #33075	; 0x8133
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80041b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041ba:	4619      	mov	r1, r3
 80041bc:	4829      	ldr	r0, [pc, #164]	; (8004264 <BSP_SDRAM_MspInit+0x20c>)
 80041be:	f000 ff5f 	bl	8005080 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80041c2:	4b29      	ldr	r3, [pc, #164]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 80041ca:	2280      	movs	r2, #128	; 0x80
 80041cc:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80041ce:	4b26      	ldr	r3, [pc, #152]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 80041d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d4:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80041d6:	4b24      	ldr	r3, [pc, #144]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 80041d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041dc:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80041de:	4b22      	ldr	r3, [pc, #136]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 80041e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80041e4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80041e6:	4b20      	ldr	r3, [pc, #128]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 80041e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041ec:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 80041ee:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80041f4:	4b1c      	ldr	r3, [pc, #112]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 80041f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041fa:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 80041fc:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 80041fe:	2200      	movs	r2, #0
 8004200:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004202:	4b19      	ldr	r3, [pc, #100]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 8004204:	2203      	movs	r2, #3
 8004206:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004208:	4b17      	ldr	r3, [pc, #92]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 800420a:	2200      	movs	r2, #0
 800420c:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004214:	4b14      	ldr	r3, [pc, #80]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 8004216:	4a15      	ldr	r2, [pc, #84]	; (800426c <BSP_SDRAM_MspInit+0x214>)
 8004218:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a12      	ldr	r2, [pc, #72]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
 8004220:	4a11      	ldr	r2, [pc, #68]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004226:	4810      	ldr	r0, [pc, #64]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 8004228:	f000 fb84 	bl	8004934 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 800422c:	480e      	ldr	r0, [pc, #56]	; (8004268 <BSP_SDRAM_MspInit+0x210>)
 800422e:	f000 fad3 	bl	80047d8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004232:	2200      	movs	r2, #0
 8004234:	210f      	movs	r1, #15
 8004236:	2038      	movs	r0, #56	; 0x38
 8004238:	f000 fa97 	bl	800476a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800423c:	2038      	movs	r0, #56	; 0x38
 800423e:	f000 fab0 	bl	80047a2 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8004242:	bf00      	nop
 8004244:	3740      	adds	r7, #64	; 0x40
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800
 8004250:	40020400 	.word	0x40020400
 8004254:	40020800 	.word	0x40020800
 8004258:	40020c00 	.word	0x40020c00
 800425c:	40021000 	.word	0x40021000
 8004260:	40021400 	.word	0x40021400
 8004264:	40021800 	.word	0x40021800
 8004268:	20000bf8 	.word	0x20000bf8
 800426c:	40026410 	.word	0x40026410

08004270 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	460a      	mov	r2, r1
 800427a:	80fb      	strh	r3, [r7, #6]
 800427c:	4613      	mov	r3, r2
 800427e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8004284:	4a13      	ldr	r2, [pc, #76]	; (80042d4 <BSP_TS_Init+0x64>)
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 800428a:	4a13      	ldr	r2, [pc, #76]	; (80042d8 <BSP_TS_Init+0x68>)
 800428c:	88bb      	ldrh	r3, [r7, #4]
 800428e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8004290:	4b12      	ldr	r3, [pc, #72]	; (80042dc <BSP_TS_Init+0x6c>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2082      	movs	r0, #130	; 0x82
 8004296:	4798      	blx	r3
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	f640 0311 	movw	r3, #2065	; 0x811
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d104      	bne.n	80042ae <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <BSP_TS_Init+0x70>)
 80042a6:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <BSP_TS_Init+0x6c>)
 80042a8:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d109      	bne.n	80042c8 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80042b4:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <BSP_TS_Init+0x70>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2082      	movs	r0, #130	; 0x82
 80042bc:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <BSP_TS_Init+0x70>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	2082      	movs	r0, #130	; 0x82
 80042c6:	4798      	blx	r3
  }

  return ret;
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000c5c 	.word	0x20000c5c
 80042d8:	20000c5e 	.word	0x20000c5e
 80042dc:	20000134 	.word	0x20000134
 80042e0:	20000c58 	.word	0x20000c58

080042e4 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <BSP_TS_ITGetStatus+0x14>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	2082      	movs	r0, #130	; 0x82
 80042f0:	4798      	blx	r3
 80042f2:	4603      	mov	r3, r0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000c58 	.word	0x20000c58

080042fc <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004304:	4b4f      	ldr	r3, [pc, #316]	; (8004444 <BSP_TS_GetState+0x148>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2082      	movs	r0, #130	; 0x82
 800430c:	4798      	blx	r3
 800430e:	4603      	mov	r3, r0
 8004310:	b29a      	uxth	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	881b      	ldrh	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	f000 808d 	beq.w	800443a <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004320:	4b48      	ldr	r3, [pc, #288]	; (8004444 <BSP_TS_GetState+0x148>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f107 020c 	add.w	r2, r7, #12
 800432a:	f107 010e 	add.w	r1, r7, #14
 800432e:	2082      	movs	r0, #130	; 0x82
 8004330:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004332:	89bb      	ldrh	r3, [r7, #12]
 8004334:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004338:	b29b      	uxth	r3, r3
 800433a:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 800433c:	89bb      	ldrh	r3, [r7, #12]
 800433e:	4a42      	ldr	r2, [pc, #264]	; (8004448 <BSP_TS_GetState+0x14c>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	08db      	lsrs	r3, r3, #3
 8004346:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8004348:	8abb      	ldrh	r3, [r7, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 800434e:	2300      	movs	r3, #0
 8004350:	82bb      	strh	r3, [r7, #20]
 8004352:	e008      	b.n	8004366 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8004354:	4b3d      	ldr	r3, [pc, #244]	; (800444c <BSP_TS_GetState+0x150>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	8aba      	ldrh	r2, [r7, #20]
 800435a:	429a      	cmp	r2, r3
 800435c:	d903      	bls.n	8004366 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 800435e:	4b3b      	ldr	r3, [pc, #236]	; (800444c <BSP_TS_GetState+0x150>)
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	3b01      	subs	r3, #1
 8004364:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8004366:	8abb      	ldrh	r3, [r7, #20]
 8004368:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 800436a:	89fb      	ldrh	r3, [r7, #14]
 800436c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004370:	4293      	cmp	r3, r2
 8004372:	d806      	bhi.n	8004382 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8004374:	89fb      	ldrh	r3, [r7, #14]
 8004376:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 800437a:	330e      	adds	r3, #14
 800437c:	b29b      	uxth	r3, r3
 800437e:	81fb      	strh	r3, [r7, #14]
 8004380:	e005      	b.n	800438e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8004382:	89fb      	ldrh	r3, [r7, #14]
 8004384:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8004388:	3308      	adds	r3, #8
 800438a:	b29b      	uxth	r3, r3
 800438c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 800438e:	89fb      	ldrh	r3, [r7, #14]
 8004390:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <BSP_TS_GetState+0x154>)
 8004392:	fba2 2303 	umull	r2, r3, r2, r3
 8004396:	08db      	lsrs	r3, r3, #3
 8004398:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 800439a:	8afb      	ldrh	r3, [r7, #22]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d102      	bne.n	80043a6 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	82fb      	strh	r3, [r7, #22]
 80043a4:	e008      	b.n	80043b8 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 80043a6:	4b2b      	ldr	r3, [pc, #172]	; (8004454 <BSP_TS_GetState+0x158>)
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	8afa      	ldrh	r2, [r7, #22]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d903      	bls.n	80043b8 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 80043b0:	4b28      	ldr	r3, [pc, #160]	; (8004454 <BSP_TS_GetState+0x158>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 80043b8:	8afb      	ldrh	r3, [r7, #22]
 80043ba:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 80043bc:	89fb      	ldrh	r3, [r7, #14]
 80043be:	461a      	mov	r2, r3
 80043c0:	4b25      	ldr	r3, [pc, #148]	; (8004458 <BSP_TS_GetState+0x15c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d906      	bls.n	80043d6 <BSP_TS_GetState+0xda>
 80043c8:	89fa      	ldrh	r2, [r7, #14]
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <BSP_TS_GetState+0x15c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	e005      	b.n	80043e2 <BSP_TS_GetState+0xe6>
 80043d6:	4b20      	ldr	r3, [pc, #128]	; (8004458 <BSP_TS_GetState+0x15c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	b29a      	uxth	r2, r3
 80043dc:	89fb      	ldrh	r3, [r7, #14]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 80043e4:	89bb      	ldrh	r3, [r7, #12]
 80043e6:	461a      	mov	r2, r3
 80043e8:	4b1c      	ldr	r3, [pc, #112]	; (800445c <BSP_TS_GetState+0x160>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d906      	bls.n	80043fe <BSP_TS_GetState+0x102>
 80043f0:	89ba      	ldrh	r2, [r7, #12]
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <BSP_TS_GetState+0x160>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	e005      	b.n	800440a <BSP_TS_GetState+0x10e>
 80043fe:	4b17      	ldr	r3, [pc, #92]	; (800445c <BSP_TS_GetState+0x160>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	b29a      	uxth	r2, r3
 8004404:	89bb      	ldrh	r3, [r7, #12]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	b29b      	uxth	r3, r3
 800440a:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 800440c:	8a7a      	ldrh	r2, [r7, #18]
 800440e:	8a3b      	ldrh	r3, [r7, #16]
 8004410:	4413      	add	r3, r2
 8004412:	2b05      	cmp	r3, #5
 8004414:	dd07      	ble.n	8004426 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8004416:	89fb      	ldrh	r3, [r7, #14]
 8004418:	461a      	mov	r2, r3
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <BSP_TS_GetState+0x15c>)
 800441c:	601a      	str	r2, [r3, #0]
      _y = y; 
 800441e:	89bb      	ldrh	r3, [r7, #12]
 8004420:	461a      	mov	r2, r3
 8004422:	4b0e      	ldr	r3, [pc, #56]	; (800445c <BSP_TS_GetState+0x160>)
 8004424:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004426:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <BSP_TS_GetState+0x15c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	b29a      	uxth	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004430:	4b0a      	ldr	r3, [pc, #40]	; (800445c <BSP_TS_GetState+0x160>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	b29a      	uxth	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	809a      	strh	r2, [r3, #4]
  }
}
 800443a:	bf00      	nop
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000c58 	.word	0x20000c58
 8004448:	ba2e8ba3 	.word	0xba2e8ba3
 800444c:	20000c5e 	.word	0x20000c5e
 8004450:	88888889 	.word	0x88888889
 8004454:	20000c5c 	.word	0x20000c5c
 8004458:	20000c60 	.word	0x20000c60
 800445c:	20000c64 	.word	0x20000c64

08004460 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8004464:	4b03      	ldr	r3, [pc, #12]	; (8004474 <BSP_TS_ITClear+0x14>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	2082      	movs	r0, #130	; 0x82
 800446c:	4798      	blx	r3
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20000c58 	.word	0x20000c58

08004478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800447c:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <HAL_Init+0x40>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a0d      	ldr	r2, [pc, #52]	; (80044b8 <HAL_Init+0x40>)
 8004482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004488:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <HAL_Init+0x40>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a0a      	ldr	r2, [pc, #40]	; (80044b8 <HAL_Init+0x40>)
 800448e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004494:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <HAL_Init+0x40>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a07      	ldr	r2, [pc, #28]	; (80044b8 <HAL_Init+0x40>)
 800449a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800449e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a0:	2003      	movs	r0, #3
 80044a2:	f000 f957 	bl	8004754 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044a6:	200f      	movs	r0, #15
 80044a8:	f000 f810 	bl	80044cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044ac:	f000 f806 	bl	80044bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40023c00 	.word	0x40023c00

080044bc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
	...

080044cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044d4:	4b12      	ldr	r3, [pc, #72]	; (8004520 <HAL_InitTick+0x54>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	4b12      	ldr	r3, [pc, #72]	; (8004524 <HAL_InitTick+0x58>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	4619      	mov	r1, r3
 80044de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 f967 	bl	80047be <HAL_SYSTICK_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e00e      	b.n	8004518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b0f      	cmp	r3, #15
 80044fe:	d80a      	bhi.n	8004516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004500:	2200      	movs	r2, #0
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004508:	f000 f92f 	bl	800476a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800450c:	4a06      	ldr	r2, [pc, #24]	; (8004528 <HAL_InitTick+0x5c>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e000      	b.n	8004518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	200000f8 	.word	0x200000f8
 8004524:	2000018c 	.word	0x2000018c
 8004528:	20000188 	.word	0x20000188

0800452c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004530:	4b06      	ldr	r3, [pc, #24]	; (800454c <HAL_IncTick+0x20>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_IncTick+0x24>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4413      	add	r3, r2
 800453c:	4a04      	ldr	r2, [pc, #16]	; (8004550 <HAL_IncTick+0x24>)
 800453e:	6013      	str	r3, [r2, #0]
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	2000018c 	.word	0x2000018c
 8004550:	20000c68 	.word	0x20000c68

08004554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return uwTick;
 8004558:	4b03      	ldr	r3, [pc, #12]	; (8004568 <HAL_GetTick+0x14>)
 800455a:	681b      	ldr	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000c68 	.word	0x20000c68

0800456c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004574:	f7ff ffee 	bl	8004554 <HAL_GetTick>
 8004578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004584:	d005      	beq.n	8004592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_Delay+0x44>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004592:	bf00      	nop
 8004594:	f7ff ffde 	bl	8004554 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d8f7      	bhi.n	8004594 <HAL_Delay+0x28>
  {
  }
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	2000018c 	.word	0x2000018c

080045b4 <__NVIC_SetPriorityGrouping>:
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045c4:	4b0c      	ldr	r3, [pc, #48]	; (80045f8 <__NVIC_SetPriorityGrouping+0x44>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045d0:	4013      	ands	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045e6:	4a04      	ldr	r2, [pc, #16]	; (80045f8 <__NVIC_SetPriorityGrouping+0x44>)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	60d3      	str	r3, [r2, #12]
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <__NVIC_GetPriorityGrouping>:
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004600:	4b04      	ldr	r3, [pc, #16]	; (8004614 <__NVIC_GetPriorityGrouping+0x18>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	0a1b      	lsrs	r3, r3, #8
 8004606:	f003 0307 	and.w	r3, r3, #7
}
 800460a:	4618      	mov	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	e000ed00 	.word	0xe000ed00

08004618 <__NVIC_EnableIRQ>:
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004626:	2b00      	cmp	r3, #0
 8004628:	db0b      	blt.n	8004642 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800462a:	79fb      	ldrb	r3, [r7, #7]
 800462c:	f003 021f 	and.w	r2, r3, #31
 8004630:	4907      	ldr	r1, [pc, #28]	; (8004650 <__NVIC_EnableIRQ+0x38>)
 8004632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	2001      	movs	r0, #1
 800463a:	fa00 f202 	lsl.w	r2, r0, r2
 800463e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000e100 	.word	0xe000e100

08004654 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004664:	2b00      	cmp	r3, #0
 8004666:	db0a      	blt.n	800467e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	b2da      	uxtb	r2, r3
 800466c:	490c      	ldr	r1, [pc, #48]	; (80046a0 <__NVIC_SetPriority+0x4c>)
 800466e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004672:	0112      	lsls	r2, r2, #4
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	440b      	add	r3, r1
 8004678:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800467c:	e00a      	b.n	8004694 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4908      	ldr	r1, [pc, #32]	; (80046a4 <__NVIC_SetPriority+0x50>)
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	3b04      	subs	r3, #4
 800468c:	0112      	lsls	r2, r2, #4
 800468e:	b2d2      	uxtb	r2, r2
 8004690:	440b      	add	r3, r1
 8004692:	761a      	strb	r2, [r3, #24]
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr
 80046a0:	e000e100 	.word	0xe000e100
 80046a4:	e000ed00 	.word	0xe000ed00

080046a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f1c3 0307 	rsb	r3, r3, #7
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	bf28      	it	cs
 80046c6:	2304      	movcs	r3, #4
 80046c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	3304      	adds	r3, #4
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d902      	bls.n	80046d8 <NVIC_EncodePriority+0x30>
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	3b03      	subs	r3, #3
 80046d6:	e000      	b.n	80046da <NVIC_EncodePriority+0x32>
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43da      	mvns	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	401a      	ands	r2, r3
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
 80046fa:	43d9      	mvns	r1, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004700:	4313      	orrs	r3, r2
         );
}
 8004702:	4618      	mov	r0, r3
 8004704:	3724      	adds	r7, #36	; 0x24
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
	...

08004710 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3b01      	subs	r3, #1
 800471c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004720:	d301      	bcc.n	8004726 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004722:	2301      	movs	r3, #1
 8004724:	e00f      	b.n	8004746 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004726:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <SysTick_Config+0x40>)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	3b01      	subs	r3, #1
 800472c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800472e:	210f      	movs	r1, #15
 8004730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004734:	f7ff ff8e 	bl	8004654 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004738:	4b05      	ldr	r3, [pc, #20]	; (8004750 <SysTick_Config+0x40>)
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800473e:	4b04      	ldr	r3, [pc, #16]	; (8004750 <SysTick_Config+0x40>)
 8004740:	2207      	movs	r2, #7
 8004742:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	e000e010 	.word	0xe000e010

08004754 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff ff29 	bl	80045b4 <__NVIC_SetPriorityGrouping>
}
 8004762:	bf00      	nop
 8004764:	3708      	adds	r7, #8
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800476a:	b580      	push	{r7, lr}
 800476c:	b086      	sub	sp, #24
 800476e:	af00      	add	r7, sp, #0
 8004770:	4603      	mov	r3, r0
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800477c:	f7ff ff3e 	bl	80045fc <__NVIC_GetPriorityGrouping>
 8004780:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	6978      	ldr	r0, [r7, #20]
 8004788:	f7ff ff8e 	bl	80046a8 <NVIC_EncodePriority>
 800478c:	4602      	mov	r2, r0
 800478e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff ff5d 	bl	8004654 <__NVIC_SetPriority>
}
 800479a:	bf00      	nop
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b082      	sub	sp, #8
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	4603      	mov	r3, r0
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ff31 	bl	8004618 <__NVIC_EnableIRQ>
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047be:	b580      	push	{r7, lr}
 80047c0:	b082      	sub	sp, #8
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff ffa2 	bl	8004710 <SysTick_Config>
 80047cc:	4603      	mov	r3, r0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
	...

080047d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047e4:	f7ff feb6 	bl	8004554 <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e099      	b.n	8004928 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2202      	movs	r2, #2
 8004800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0201 	bic.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004814:	e00f      	b.n	8004836 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004816:	f7ff fe9d 	bl	8004554 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b05      	cmp	r3, #5
 8004822:	d908      	bls.n	8004836 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2203      	movs	r2, #3
 800482e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e078      	b.n	8004928 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e8      	bne.n	8004816 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4b38      	ldr	r3, [pc, #224]	; (8004930 <HAL_DMA_Init+0x158>)
 8004850:	4013      	ands	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004862:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800486e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800487a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	2b04      	cmp	r3, #4
 800488e:	d107      	bne.n	80048a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	4313      	orrs	r3, r2
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	f023 0307 	bic.w	r3, r3, #7
 80048b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d117      	bne.n	80048fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00e      	beq.n	80048fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f8bd 	bl	8004a5c <DMA_CheckFifoParam>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2240      	movs	r2, #64	; 0x40
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048f6:	2301      	movs	r3, #1
 80048f8:	e016      	b.n	8004928 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f874 	bl	80049f0 <DMA_CalcBaseAndBitshift>
 8004908:	4603      	mov	r3, r0
 800490a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004910:	223f      	movs	r2, #63	; 0x3f
 8004912:	409a      	lsls	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	f010803f 	.word	0xf010803f

08004934 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e050      	b.n	80049e8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d101      	bne.n	8004956 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004952:	2302      	movs	r3, #2
 8004954:	e048      	b.n	80049e8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0201 	bic.w	r2, r2, #1
 8004964:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2200      	movs	r2, #0
 8004974:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2200      	movs	r2, #0
 800497c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2200      	movs	r2, #0
 8004984:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2200      	movs	r2, #0
 800498c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2221      	movs	r2, #33	; 0x21
 8004994:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f82a 	bl	80049f0 <DMA_CalcBaseAndBitshift>
 800499c:	4603      	mov	r3, r0
 800499e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c8:	223f      	movs	r2, #63	; 0x3f
 80049ca:	409a      	lsls	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	3b10      	subs	r3, #16
 8004a00:	4a14      	ldr	r2, [pc, #80]	; (8004a54 <DMA_CalcBaseAndBitshift+0x64>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	091b      	lsrs	r3, r3, #4
 8004a08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a0a:	4a13      	ldr	r2, [pc, #76]	; (8004a58 <DMA_CalcBaseAndBitshift+0x68>)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4413      	add	r3, r2
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	461a      	mov	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d909      	bls.n	8004a32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a26:	f023 0303 	bic.w	r3, r3, #3
 8004a2a:	1d1a      	adds	r2, r3, #4
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a30:	e007      	b.n	8004a42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a3a:	f023 0303 	bic.w	r3, r3, #3
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3714      	adds	r7, #20
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop
 8004a54:	aaaaaaab 	.word	0xaaaaaaab
 8004a58:	0800cea0 	.word	0x0800cea0

08004a5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d11f      	bne.n	8004ab6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d856      	bhi.n	8004b2a <DMA_CheckFifoParam+0xce>
 8004a7c:	a201      	add	r2, pc, #4	; (adr r2, 8004a84 <DMA_CheckFifoParam+0x28>)
 8004a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a82:	bf00      	nop
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004aa7 	.word	0x08004aa7
 8004a8c:	08004a95 	.word	0x08004a95
 8004a90:	08004b2b 	.word	0x08004b2b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d046      	beq.n	8004b2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa4:	e043      	b.n	8004b2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aae:	d140      	bne.n	8004b32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ab4:	e03d      	b.n	8004b32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004abe:	d121      	bne.n	8004b04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d837      	bhi.n	8004b36 <DMA_CheckFifoParam+0xda>
 8004ac6:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <DMA_CheckFifoParam+0x70>)
 8004ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004acc:	08004add 	.word	0x08004add
 8004ad0:	08004ae3 	.word	0x08004ae3
 8004ad4:	08004add 	.word	0x08004add
 8004ad8:	08004af5 	.word	0x08004af5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae0:	e030      	b.n	8004b44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d025      	beq.n	8004b3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af2:	e022      	b.n	8004b3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004afc:	d11f      	bne.n	8004b3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b02:	e01c      	b.n	8004b3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d903      	bls.n	8004b12 <DMA_CheckFifoParam+0xb6>
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b03      	cmp	r3, #3
 8004b0e:	d003      	beq.n	8004b18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b10:	e018      	b.n	8004b44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	73fb      	strb	r3, [r7, #15]
      break;
 8004b16:	e015      	b.n	8004b44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00e      	beq.n	8004b42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e00b      	b.n	8004b42 <DMA_CheckFifoParam+0xe6>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e00a      	b.n	8004b44 <DMA_CheckFifoParam+0xe8>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e008      	b.n	8004b44 <DMA_CheckFifoParam+0xe8>
      break;
 8004b32:	bf00      	nop
 8004b34:	e006      	b.n	8004b44 <DMA_CheckFifoParam+0xe8>
      break;
 8004b36:	bf00      	nop
 8004b38:	e004      	b.n	8004b44 <DMA_CheckFifoParam+0xe8>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <DMA_CheckFifoParam+0xe8>
      break;   
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <DMA_CheckFifoParam+0xe8>
      break;
 8004b42:	bf00      	nop
    }
  } 
  
  return status; 
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop

08004b54 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e03b      	b.n	8004bde <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f833 	bl	8004be6 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba4:	f023 0107 	bic.w	r1, r3, #7
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bbe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68d1      	ldr	r1, [r2, #12]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b086      	sub	sp, #24
 8004bfe:	af02      	add	r7, sp, #8
 8004c00:	60f8      	str	r0, [r7, #12]
 8004c02:	60b9      	str	r1, [r7, #8]
 8004c04:	607a      	str	r2, [r7, #4]
 8004c06:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_DMA2D_Start+0x1c>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e018      	b.n	8004c48 <HAL_DMA2D_Start+0x4e>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f989 	bl	8004f48 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d056      	beq.n	8004d1a <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004c6c:	f7ff fc72 	bl	8004554 <HAL_GetTick>
 8004c70:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004c72:	e04b      	b.n	8004d0c <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d023      	beq.n	8004cce <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	f043 0202 	orr.w	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004caa:	f043 0201 	orr.w	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2221      	movs	r2, #33	; 0x21
 8004cb8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0a5      	b.n	8004e1a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cd4:	d01a      	beq.n	8004d0c <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004cd6:	f7ff fc3d 	bl	8004554 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d302      	bcc.n	8004cec <HAL_DMA2D_PollForTransfer+0x9c>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10f      	bne.n	8004d0c <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e086      	b.n	8004e1a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0ac      	beq.n	8004c74 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f003 0320 	and.w	r3, r3, #32
 8004d24:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	f003 0320 	and.w	r3, r3, #32
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d061      	beq.n	8004e00 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d3c:	f7ff fc0a 	bl	8004554 <HAL_GetTick>
 8004d40:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004d42:	e056      	b.n	8004df2 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d02e      	beq.n	8004db4 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d64:	f043 0204 	orr.w	r2, r3, #4
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7a:	f043 0202 	orr.w	r2, r3, #2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d005      	beq.n	8004d98 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d90:	f043 0201 	orr.w	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2229      	movs	r2, #41	; 0x29
 8004d9e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2204      	movs	r2, #4
 8004da4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e032      	b.n	8004e1a <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dba:	d01a      	beq.n	8004df2 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004dbc:	f7ff fbca 	bl	8004554 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d302      	bcc.n	8004dd2 <HAL_DMA2D_PollForTransfer+0x182>
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10f      	bne.n	8004df2 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	f043 0220 	orr.w	r2, r3, #32
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2203      	movs	r2, #3
 8004de2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e013      	b.n	8004e1a <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f003 0310 	and.w	r3, r3, #16
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0a1      	beq.n	8004d44 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2212      	movs	r2, #18
 8004e06:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
	...

08004e24 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d101      	bne.n	8004e44 <HAL_DMA2D_ConfigLayer+0x20>
 8004e40:	2302      	movs	r3, #2
 8004e42:	e079      	b.n	8004f38 <HAL_DMA2D_ConfigLayer+0x114>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	3318      	adds	r3, #24
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	041b      	lsls	r3, r3, #16
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8004e6e:	4b35      	ldr	r3, [pc, #212]	; (8004f44 <HAL_DMA2D_ConfigLayer+0x120>)
 8004e70:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b0a      	cmp	r3, #10
 8004e78:	d003      	beq.n	8004e82 <HAL_DMA2D_ConfigLayer+0x5e>
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b09      	cmp	r3, #9
 8004e80:	d107      	bne.n	8004e92 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e005      	b.n	8004e9e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	061b      	lsls	r3, r3, #24
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d120      	bne.n	8004ee6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	43db      	mvns	r3, r3
 8004eae:	ea02 0103 	and.w	r1, r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	6812      	ldr	r2, [r2, #0]
 8004ec4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b0a      	cmp	r3, #10
 8004ecc:	d003      	beq.n	8004ed6 <HAL_DMA2D_ConfigLayer+0xb2>
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	2b09      	cmp	r3, #9
 8004ed4:	d127      	bne.n	8004f26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004ee2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ee4:	e01f      	b.n	8004f26 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	43db      	mvns	r3, r3
 8004ef0:	ea02 0103 	and.w	r1, r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b0a      	cmp	r3, #10
 8004f0e:	d003      	beq.n	8004f18 <HAL_DMA2D_ConfigLayer+0xf4>
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b09      	cmp	r3, #9
 8004f16:	d106      	bne.n	8004f26 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004f24:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	ff03000f 	.word	0xff03000f

08004f48 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b08b      	sub	sp, #44	; 0x2c
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
 8004f54:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	041a      	lsls	r2, r3, #16
 8004f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f66:	431a      	orrs	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f80:	d174      	bne.n	800506c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f88:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f90:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f98:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d108      	bne.n	8004fba <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	431a      	orrs	r2, r3
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb8:	e053      	b.n	8005062 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d106      	bne.n	8004fd0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004fce:	e048      	b.n	8005062 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d111      	bne.n	8004ffc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	0cdb      	lsrs	r3, r3, #19
 8004fdc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	0a9b      	lsrs	r3, r3, #10
 8004fe2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	08db      	lsrs	r3, r3, #3
 8004fe8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	015a      	lsls	r2, r3, #5
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	02db      	lsls	r3, r3, #11
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffa:	e032      	b.n	8005062 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b03      	cmp	r3, #3
 8005002:	d117      	bne.n	8005034 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	0fdb      	lsrs	r3, r3, #31
 8005008:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	0cdb      	lsrs	r3, r3, #19
 800500e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	0adb      	lsrs	r3, r3, #11
 8005014:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	08db      	lsrs	r3, r3, #3
 800501a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	029b      	lsls	r3, r3, #10
 8005024:	431a      	orrs	r2, r3
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	03db      	lsls	r3, r3, #15
 800502a:	4313      	orrs	r3, r2
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4313      	orrs	r3, r2
 8005030:	627b      	str	r3, [r7, #36]	; 0x24
 8005032:	e016      	b.n	8005062 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005034:	6a3b      	ldr	r3, [r7, #32]
 8005036:	0f1b      	lsrs	r3, r3, #28
 8005038:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	0d1b      	lsrs	r3, r3, #20
 800503e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	0b1b      	lsrs	r3, r3, #12
 8005044:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	091b      	lsrs	r3, r3, #4
 800504a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	011a      	lsls	r2, r3, #4
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	431a      	orrs	r2, r3
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	031b      	lsls	r3, r3, #12
 800505a:	4313      	orrs	r3, r2
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	4313      	orrs	r3, r2
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005068:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800506a:	e003      	b.n	8005074 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	60da      	str	r2, [r3, #12]
}
 8005074:	bf00      	nop
 8005076:	372c      	adds	r7, #44	; 0x2c
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005080:	b480      	push	{r7}
 8005082:	b089      	sub	sp, #36	; 0x24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800508a:	2300      	movs	r3, #0
 800508c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005092:	2300      	movs	r3, #0
 8005094:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005096:	2300      	movs	r3, #0
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	e177      	b.n	800538c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800509c:	2201      	movs	r2, #1
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4013      	ands	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	f040 8166 	bne.w	8005386 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d00b      	beq.n	80050da <HAL_GPIO_Init+0x5a>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d007      	beq.n	80050da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050ce:	2b11      	cmp	r3, #17
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	2b12      	cmp	r3, #18
 80050d8:	d130      	bne.n	800513c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	005b      	lsls	r3, r3, #1
 80050e4:	2203      	movs	r2, #3
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4313      	orrs	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005110:	2201      	movs	r2, #1
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	fa02 f303 	lsl.w	r3, r2, r3
 8005118:	43db      	mvns	r3, r3
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	4013      	ands	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	091b      	lsrs	r3, r3, #4
 8005126:	f003 0201 	and.w	r2, r3, #1
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	4313      	orrs	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	005b      	lsls	r3, r3, #1
 8005146:	2203      	movs	r2, #3
 8005148:	fa02 f303 	lsl.w	r3, r2, r3
 800514c:	43db      	mvns	r3, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	4013      	ands	r3, r2
 8005152:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	fa02 f303 	lsl.w	r3, r2, r3
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	4313      	orrs	r3, r2
 8005164:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d003      	beq.n	800517c <HAL_GPIO_Init+0xfc>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b12      	cmp	r3, #18
 800517a:	d123      	bne.n	80051c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	08da      	lsrs	r2, r3, #3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3208      	adds	r2, #8
 8005184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005188:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	220f      	movs	r2, #15
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4013      	ands	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0307 	and.w	r3, r3, #7
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	fa02 f303 	lsl.w	r3, r2, r3
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	08da      	lsrs	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	3208      	adds	r2, #8
 80051be:	69b9      	ldr	r1, [r7, #24]
 80051c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	2203      	movs	r2, #3
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	43db      	mvns	r3, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	4013      	ands	r3, r2
 80051da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0203 	and.w	r2, r3, #3
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80c0 	beq.w	8005386 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
 800520a:	4b66      	ldr	r3, [pc, #408]	; (80053a4 <HAL_GPIO_Init+0x324>)
 800520c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520e:	4a65      	ldr	r2, [pc, #404]	; (80053a4 <HAL_GPIO_Init+0x324>)
 8005210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005214:	6453      	str	r3, [r2, #68]	; 0x44
 8005216:	4b63      	ldr	r3, [pc, #396]	; (80053a4 <HAL_GPIO_Init+0x324>)
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005222:	4a61      	ldr	r2, [pc, #388]	; (80053a8 <HAL_GPIO_Init+0x328>)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	089b      	lsrs	r3, r3, #2
 8005228:	3302      	adds	r3, #2
 800522a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 0303 	and.w	r3, r3, #3
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	220f      	movs	r2, #15
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	43db      	mvns	r3, r3
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	4013      	ands	r3, r2
 8005244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a58      	ldr	r2, [pc, #352]	; (80053ac <HAL_GPIO_Init+0x32c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d037      	beq.n	80052be <HAL_GPIO_Init+0x23e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a57      	ldr	r2, [pc, #348]	; (80053b0 <HAL_GPIO_Init+0x330>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d031      	beq.n	80052ba <HAL_GPIO_Init+0x23a>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a56      	ldr	r2, [pc, #344]	; (80053b4 <HAL_GPIO_Init+0x334>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d02b      	beq.n	80052b6 <HAL_GPIO_Init+0x236>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a55      	ldr	r2, [pc, #340]	; (80053b8 <HAL_GPIO_Init+0x338>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d025      	beq.n	80052b2 <HAL_GPIO_Init+0x232>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a54      	ldr	r2, [pc, #336]	; (80053bc <HAL_GPIO_Init+0x33c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01f      	beq.n	80052ae <HAL_GPIO_Init+0x22e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a53      	ldr	r2, [pc, #332]	; (80053c0 <HAL_GPIO_Init+0x340>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d019      	beq.n	80052aa <HAL_GPIO_Init+0x22a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a52      	ldr	r2, [pc, #328]	; (80053c4 <HAL_GPIO_Init+0x344>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <HAL_GPIO_Init+0x226>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a51      	ldr	r2, [pc, #324]	; (80053c8 <HAL_GPIO_Init+0x348>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00d      	beq.n	80052a2 <HAL_GPIO_Init+0x222>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a50      	ldr	r2, [pc, #320]	; (80053cc <HAL_GPIO_Init+0x34c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d007      	beq.n	800529e <HAL_GPIO_Init+0x21e>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a4f      	ldr	r2, [pc, #316]	; (80053d0 <HAL_GPIO_Init+0x350>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d101      	bne.n	800529a <HAL_GPIO_Init+0x21a>
 8005296:	2309      	movs	r3, #9
 8005298:	e012      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 800529a:	230a      	movs	r3, #10
 800529c:	e010      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 800529e:	2308      	movs	r3, #8
 80052a0:	e00e      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052a2:	2307      	movs	r3, #7
 80052a4:	e00c      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052a6:	2306      	movs	r3, #6
 80052a8:	e00a      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052aa:	2305      	movs	r3, #5
 80052ac:	e008      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052ae:	2304      	movs	r3, #4
 80052b0:	e006      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052b2:	2303      	movs	r3, #3
 80052b4:	e004      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052b6:	2302      	movs	r3, #2
 80052b8:	e002      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <HAL_GPIO_Init+0x240>
 80052be:	2300      	movs	r3, #0
 80052c0:	69fa      	ldr	r2, [r7, #28]
 80052c2:	f002 0203 	and.w	r2, r2, #3
 80052c6:	0092      	lsls	r2, r2, #2
 80052c8:	4093      	lsls	r3, r2
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052d0:	4935      	ldr	r1, [pc, #212]	; (80053a8 <HAL_GPIO_Init+0x328>)
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	089b      	lsrs	r3, r3, #2
 80052d6:	3302      	adds	r3, #2
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80052de:	4b3d      	ldr	r3, [pc, #244]	; (80053d4 <HAL_GPIO_Init+0x354>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005302:	4a34      	ldr	r2, [pc, #208]	; (80053d4 <HAL_GPIO_Init+0x354>)
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005308:	4b32      	ldr	r3, [pc, #200]	; (80053d4 <HAL_GPIO_Init+0x354>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	43db      	mvns	r3, r3
 8005312:	69ba      	ldr	r2, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d003      	beq.n	800532c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800532c:	4a29      	ldr	r2, [pc, #164]	; (80053d4 <HAL_GPIO_Init+0x354>)
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005332:	4b28      	ldr	r3, [pc, #160]	; (80053d4 <HAL_GPIO_Init+0x354>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	43db      	mvns	r3, r3
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	4013      	ands	r3, r2
 8005340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800534e:	69ba      	ldr	r2, [r7, #24]
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005356:	4a1f      	ldr	r2, [pc, #124]	; (80053d4 <HAL_GPIO_Init+0x354>)
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800535c:	4b1d      	ldr	r3, [pc, #116]	; (80053d4 <HAL_GPIO_Init+0x354>)
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	43db      	mvns	r3, r3
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	4013      	ands	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005380:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <HAL_GPIO_Init+0x354>)
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	3301      	adds	r3, #1
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b0f      	cmp	r3, #15
 8005390:	f67f ae84 	bls.w	800509c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	3724      	adds	r7, #36	; 0x24
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40013800 	.word	0x40013800
 80053ac:	40020000 	.word	0x40020000
 80053b0:	40020400 	.word	0x40020400
 80053b4:	40020800 	.word	0x40020800
 80053b8:	40020c00 	.word	0x40020c00
 80053bc:	40021000 	.word	0x40021000
 80053c0:	40021400 	.word	0x40021400
 80053c4:	40021800 	.word	0x40021800
 80053c8:	40021c00 	.word	0x40021c00
 80053cc:	40022000 	.word	0x40022000
 80053d0:	40022400 	.word	0x40022400
 80053d4:	40013c00 	.word	0x40013c00

080053d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	807b      	strh	r3, [r7, #2]
 80053e4:	4613      	mov	r3, r2
 80053e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053e8:	787b      	ldrb	r3, [r7, #1]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80053ee:	887a      	ldrh	r2, [r7, #2]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80053f4:	e003      	b.n	80053fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80053f6:	887b      	ldrh	r3, [r7, #2]
 80053f8:	041a      	lsls	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	619a      	str	r2, [r3, #24]
}
 80053fe:	bf00      	nop
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	887b      	ldrh	r3, [r7, #2]
 800541c:	401a      	ands	r2, r3
 800541e:	887b      	ldrh	r3, [r7, #2]
 8005420:	429a      	cmp	r2, r3
 8005422:	d104      	bne.n	800542e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005424:	887b      	ldrh	r3, [r7, #2]
 8005426:	041a      	lsls	r2, r3, #16
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800542c:	e002      	b.n	8005434 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800542e:	887a      	ldrh	r2, [r7, #2]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	619a      	str	r2, [r3, #24]
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e12b      	b.n	80056aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f95d 	bl	8005726 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2224      	movs	r2, #36	; 0x24
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054a4:	f001 ff1a 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 80054a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	4a81      	ldr	r2, [pc, #516]	; (80056b4 <HAL_I2C_Init+0x274>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d807      	bhi.n	80054c4 <HAL_I2C_Init+0x84>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	4a80      	ldr	r2, [pc, #512]	; (80056b8 <HAL_I2C_Init+0x278>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	bf94      	ite	ls
 80054bc:	2301      	movls	r3, #1
 80054be:	2300      	movhi	r3, #0
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	e006      	b.n	80054d2 <HAL_I2C_Init+0x92>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4a7d      	ldr	r2, [pc, #500]	; (80056bc <HAL_I2C_Init+0x27c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	bf94      	ite	ls
 80054cc:	2301      	movls	r3, #1
 80054ce:	2300      	movhi	r3, #0
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e0e7      	b.n	80056aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4a78      	ldr	r2, [pc, #480]	; (80056c0 <HAL_I2C_Init+0x280>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	0c9b      	lsrs	r3, r3, #18
 80054e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	4a6a      	ldr	r2, [pc, #424]	; (80056b4 <HAL_I2C_Init+0x274>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d802      	bhi.n	8005514 <HAL_I2C_Init+0xd4>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	3301      	adds	r3, #1
 8005512:	e009      	b.n	8005528 <HAL_I2C_Init+0xe8>
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	4a69      	ldr	r2, [pc, #420]	; (80056c4 <HAL_I2C_Init+0x284>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	099b      	lsrs	r3, r3, #6
 8005526:	3301      	adds	r3, #1
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	430b      	orrs	r3, r1
 800552e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800553a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	495c      	ldr	r1, [pc, #368]	; (80056b4 <HAL_I2C_Init+0x274>)
 8005544:	428b      	cmp	r3, r1
 8005546:	d819      	bhi.n	800557c <HAL_I2C_Init+0x13c>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1e59      	subs	r1, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	005b      	lsls	r3, r3, #1
 8005552:	fbb1 f3f3 	udiv	r3, r1, r3
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	f640 73fc 	movw	r3, #4092	; 0xffc
 800555c:	400b      	ands	r3, r1
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_I2C_Init+0x138>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1e59      	subs	r1, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	005b      	lsls	r3, r3, #1
 800556c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005570:	3301      	adds	r3, #1
 8005572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005576:	e051      	b.n	800561c <HAL_I2C_Init+0x1dc>
 8005578:	2304      	movs	r3, #4
 800557a:	e04f      	b.n	800561c <HAL_I2C_Init+0x1dc>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d111      	bne.n	80055a8 <HAL_I2C_Init+0x168>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1e58      	subs	r0, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6859      	ldr	r1, [r3, #4]
 800558c:	460b      	mov	r3, r1
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	440b      	add	r3, r1
 8005592:	fbb0 f3f3 	udiv	r3, r0, r3
 8005596:	3301      	adds	r3, #1
 8005598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	e012      	b.n	80055ce <HAL_I2C_Init+0x18e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1e58      	subs	r0, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	0099      	lsls	r1, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80055be:	3301      	adds	r3, #1
 80055c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	bf0c      	ite	eq
 80055c8:	2301      	moveq	r3, #1
 80055ca:	2300      	movne	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_I2C_Init+0x196>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e022      	b.n	800561c <HAL_I2C_Init+0x1dc>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10e      	bne.n	80055fc <HAL_I2C_Init+0x1bc>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1e58      	subs	r0, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6859      	ldr	r1, [r3, #4]
 80055e6:	460b      	mov	r3, r1
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	440b      	add	r3, r1
 80055ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80055f0:	3301      	adds	r3, #1
 80055f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055fa:	e00f      	b.n	800561c <HAL_I2C_Init+0x1dc>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	1e58      	subs	r0, r3, #1
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6859      	ldr	r1, [r3, #4]
 8005604:	460b      	mov	r3, r1
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	440b      	add	r3, r1
 800560a:	0099      	lsls	r1, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005612:	3301      	adds	r3, #1
 8005614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005618:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	6809      	ldr	r1, [r1, #0]
 8005620:	4313      	orrs	r3, r2
 8005622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69da      	ldr	r2, [r3, #28]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	431a      	orrs	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800564a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6911      	ldr	r1, [r2, #16]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68d2      	ldr	r2, [r2, #12]
 8005656:	4311      	orrs	r1, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	430b      	orrs	r3, r1
 800565e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	695a      	ldr	r2, [r3, #20]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0201 	orr.w	r2, r2, #1
 800568a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	000186a0 	.word	0x000186a0
 80056b8:	001e847f 	.word	0x001e847f
 80056bc:	003d08ff 	.word	0x003d08ff
 80056c0:	431bde83 	.word	0x431bde83
 80056c4:	10624dd3 	.word	0x10624dd3

080056c8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d101      	bne.n	80056da <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e021      	b.n	800571e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2224      	movs	r2, #36	; 0x24
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 0201 	bic.w	r2, r2, #1
 80056f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f821 	bl	800573a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b088      	sub	sp, #32
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	4608      	mov	r0, r1
 800575a:	4611      	mov	r1, r2
 800575c:	461a      	mov	r2, r3
 800575e:	4603      	mov	r3, r0
 8005760:	817b      	strh	r3, [r7, #10]
 8005762:	460b      	mov	r3, r1
 8005764:	813b      	strh	r3, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800576a:	f7fe fef3 	bl	8004554 <HAL_GetTick>
 800576e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b20      	cmp	r3, #32
 800577a:	f040 80d9 	bne.w	8005930 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	2319      	movs	r3, #25
 8005784:	2201      	movs	r2, #1
 8005786:	496d      	ldr	r1, [pc, #436]	; (800593c <HAL_I2C_Mem_Write+0x1ec>)
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 fc89 	bl	80060a0 <I2C_WaitOnFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005794:	2302      	movs	r3, #2
 8005796:	e0cc      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d101      	bne.n	80057a6 <HAL_I2C_Mem_Write+0x56>
 80057a2:	2302      	movs	r3, #2
 80057a4:	e0c5      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d007      	beq.n	80057cc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f042 0201 	orr.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2221      	movs	r2, #33	; 0x21
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2240      	movs	r2, #64	; 0x40
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6a3a      	ldr	r2, [r7, #32]
 80057f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a4d      	ldr	r2, [pc, #308]	; (8005940 <HAL_I2C_Mem_Write+0x1f0>)
 800580c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800580e:	88f8      	ldrh	r0, [r7, #6]
 8005810:	893a      	ldrh	r2, [r7, #8]
 8005812:	8979      	ldrh	r1, [r7, #10]
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	9301      	str	r3, [sp, #4]
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	4603      	mov	r3, r0
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fac4 	bl	8005dac <I2C_RequestMemoryWrite>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d052      	beq.n	80058d0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e081      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 fd0a 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00d      	beq.n	800585a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	2b04      	cmp	r3, #4
 8005844:	d107      	bne.n	8005856 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005854:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e06b      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	781a      	ldrb	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b04      	cmp	r3, #4
 8005896:	d11b      	bne.n	80058d0 <HAL_I2C_Mem_Write+0x180>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d017      	beq.n	80058d0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	3b01      	subs	r3, #1
 80058bc:	b29a      	uxth	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1aa      	bne.n	800582e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f000 fcf6 	bl	80062ce <I2C_WaitOnBTFFlagUntilTimeout>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00d      	beq.n	8005904 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ec:	2b04      	cmp	r3, #4
 80058ee:	d107      	bne.n	8005900 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e016      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	e000      	b.n	8005932 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005930:	2302      	movs	r3, #2
  }
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	00100002 	.word	0x00100002
 8005940:	ffff0000 	.word	0xffff0000

08005944 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08c      	sub	sp, #48	; 0x30
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	4608      	mov	r0, r1
 800594e:	4611      	mov	r1, r2
 8005950:	461a      	mov	r2, r3
 8005952:	4603      	mov	r3, r0
 8005954:	817b      	strh	r3, [r7, #10]
 8005956:	460b      	mov	r3, r1
 8005958:	813b      	strh	r3, [r7, #8]
 800595a:	4613      	mov	r3, r2
 800595c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800595e:	f7fe fdf9 	bl	8004554 <HAL_GetTick>
 8005962:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b20      	cmp	r3, #32
 800596e:	f040 8208 	bne.w	8005d82 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	2319      	movs	r3, #25
 8005978:	2201      	movs	r2, #1
 800597a:	497b      	ldr	r1, [pc, #492]	; (8005b68 <HAL_I2C_Mem_Read+0x224>)
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 fb8f 	bl	80060a0 <I2C_WaitOnFlagUntilTimeout>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005988:	2302      	movs	r3, #2
 800598a:	e1fb      	b.n	8005d84 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005992:	2b01      	cmp	r3, #1
 8005994:	d101      	bne.n	800599a <HAL_I2C_Mem_Read+0x56>
 8005996:	2302      	movs	r3, #2
 8005998:	e1f4      	b.n	8005d84 <HAL_I2C_Mem_Read+0x440>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d007      	beq.n	80059c0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2222      	movs	r2, #34	; 0x22
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2240      	movs	r2, #64	; 0x40
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4a5b      	ldr	r2, [pc, #364]	; (8005b6c <HAL_I2C_Mem_Read+0x228>)
 8005a00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a02:	88f8      	ldrh	r0, [r7, #6]
 8005a04:	893a      	ldrh	r2, [r7, #8]
 8005a06:	8979      	ldrh	r1, [r7, #10]
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	9301      	str	r3, [sp, #4]
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	4603      	mov	r3, r0
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 fa5e 	bl	8005ed4 <I2C_RequestMemoryRead>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e1b0      	b.n	8005d84 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d113      	bne.n	8005a52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	623b      	str	r3, [r7, #32]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	623b      	str	r3, [r7, #32]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	623b      	str	r3, [r7, #32]
 8005a3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4e:	601a      	str	r2, [r3, #0]
 8005a50:	e184      	b.n	8005d5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d11b      	bne.n	8005a92 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61fb      	str	r3, [r7, #28]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	61fb      	str	r3, [r7, #28]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	61fb      	str	r3, [r7, #28]
 8005a7e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	e164      	b.n	8005d5c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	d11b      	bne.n	8005ad2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aa8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ab8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aba:	2300      	movs	r3, #0
 8005abc:	61bb      	str	r3, [r7, #24]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	e144      	b.n	8005d5c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ae8:	e138      	b.n	8005d5c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aee:	2b03      	cmp	r3, #3
 8005af0:	f200 80f1 	bhi.w	8005cd6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d123      	bne.n	8005b44 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 fc25 	bl	8006350 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d001      	beq.n	8005b10 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	e139      	b.n	8005d84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b42:	e10b      	b.n	8005d5c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d14e      	bne.n	8005bea <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	2200      	movs	r2, #0
 8005b54:	4906      	ldr	r1, [pc, #24]	; (8005b70 <HAL_I2C_Mem_Read+0x22c>)
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 faa2 	bl	80060a0 <I2C_WaitOnFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d008      	beq.n	8005b74 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e10e      	b.n	8005d84 <HAL_I2C_Mem_Read+0x440>
 8005b66:	bf00      	nop
 8005b68:	00100002 	.word	0x00100002
 8005b6c:	ffff0000 	.word	0xffff0000
 8005b70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	b2d2      	uxtb	r2, r2
 8005b90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b96:	1c5a      	adds	r2, r3, #1
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	b29a      	uxth	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005be8:	e0b8      	b.n	8005d5c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	4966      	ldr	r1, [pc, #408]	; (8005d8c <HAL_I2C_Mem_Read+0x448>)
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 fa53 	bl	80060a0 <I2C_WaitOnFlagUntilTimeout>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d001      	beq.n	8005c04 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e0bf      	b.n	8005d84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c26:	1c5a      	adds	r2, r3, #1
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	b29a      	uxth	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	494f      	ldr	r1, [pc, #316]	; (8005d8c <HAL_I2C_Mem_Read+0x448>)
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fa25 	bl	80060a0 <I2C_WaitOnFlagUntilTimeout>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e091      	b.n	8005d84 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cd4:	e042      	b.n	8005d5c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fb38 	bl	8006350 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e04c      	b.n	8005d84 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d118      	bne.n	8005d5c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f aec2 	bne.w	8005aea <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3728      	adds	r7, #40	; 0x28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	00010004 	.word	0x00010004

08005d90 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9e:	b2db      	uxtb	r3, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4603      	mov	r3, r0
 8005dbc:	817b      	strh	r3, [r7, #10]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	813b      	strh	r3, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f95c 	bl	80060a0 <I2C_WaitOnFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00c      	beq.n	8005e08 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d003      	beq.n	8005e04 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e05f      	b.n	8005ec8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e08:	897b      	ldrh	r3, [r7, #10]
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	6a3a      	ldr	r2, [r7, #32]
 8005e1c:	492c      	ldr	r1, [pc, #176]	; (8005ed0 <I2C_RequestMemoryWrite+0x124>)
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f995 	bl	800614e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d001      	beq.n	8005e2e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e04c      	b.n	8005ec8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	617b      	str	r3, [r7, #20]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	617b      	str	r3, [r7, #20]
 8005e42:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e46:	6a39      	ldr	r1, [r7, #32]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f000 f9ff 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00d      	beq.n	8005e70 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d107      	bne.n	8005e6c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e02b      	b.n	8005ec8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e70:	88fb      	ldrh	r3, [r7, #6]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d105      	bne.n	8005e82 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e76:	893b      	ldrh	r3, [r7, #8]
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	611a      	str	r2, [r3, #16]
 8005e80:	e021      	b.n	8005ec6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e82:	893b      	ldrh	r3, [r7, #8]
 8005e84:	0a1b      	lsrs	r3, r3, #8
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e92:	6a39      	ldr	r1, [r7, #32]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f9d9 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00d      	beq.n	8005ebc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea4:	2b04      	cmp	r3, #4
 8005ea6:	d107      	bne.n	8005eb8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005eb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e005      	b.n	8005ec8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ebc:	893b      	ldrh	r3, [r7, #8]
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	00010002 	.word	0x00010002

08005ed4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b088      	sub	sp, #32
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	817b      	strh	r3, [r7, #10]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	813b      	strh	r3, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005efc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f8c0 	bl	80060a0 <I2C_WaitOnFlagUntilTimeout>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00c      	beq.n	8005f40 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e0a9      	b.n	8006094 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f40:	897b      	ldrh	r3, [r7, #10]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	461a      	mov	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f4e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	4951      	ldr	r1, [pc, #324]	; (800609c <I2C_RequestMemoryRead+0x1c8>)
 8005f56:	68f8      	ldr	r0, [r7, #12]
 8005f58:	f000 f8f9 	bl	800614e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e096      	b.n	8006094 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f66:	2300      	movs	r3, #0
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	695b      	ldr	r3, [r3, #20]
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	617b      	str	r3, [r7, #20]
 8005f7a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7e:	6a39      	ldr	r1, [r7, #32]
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f963 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00d      	beq.n	8005fa8 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d107      	bne.n	8005fa4 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e075      	b.n	8006094 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d105      	bne.n	8005fba <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005fae:	893b      	ldrh	r3, [r7, #8]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	611a      	str	r2, [r3, #16]
 8005fb8:	e021      	b.n	8005ffe <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005fba:	893b      	ldrh	r3, [r7, #8]
 8005fbc:	0a1b      	lsrs	r3, r3, #8
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	b2da      	uxtb	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fca:	6a39      	ldr	r1, [r7, #32]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f93d 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00d      	beq.n	8005ff4 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fdc:	2b04      	cmp	r3, #4
 8005fde:	d107      	bne.n	8005ff0 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e04f      	b.n	8006094 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005ff4:	893b      	ldrh	r3, [r7, #8]
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006000:	6a39      	ldr	r1, [r7, #32]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	f000 f922 	bl	800624c <I2C_WaitOnTXEFlagUntilTimeout>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00d      	beq.n	800602a <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006012:	2b04      	cmp	r3, #4
 8006014:	d107      	bne.n	8006026 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006024:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e034      	b.n	8006094 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006038:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	2200      	movs	r2, #0
 8006042:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f82a 	bl	80060a0 <I2C_WaitOnFlagUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d00c      	beq.n	800606c <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e013      	b.n	8006094 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800606c:	897b      	ldrh	r3, [r7, #10]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f043 0301 	orr.w	r3, r3, #1
 8006074:	b2da      	uxtb	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	4906      	ldr	r1, [pc, #24]	; (800609c <I2C_RequestMemoryRead+0x1c8>)
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f863 	bl	800614e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3718      	adds	r7, #24
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	00010002 	.word	0x00010002

080060a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4613      	mov	r3, r2
 80060ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060b0:	e025      	b.n	80060fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060b8:	d021      	beq.n	80060fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ba:	f7fe fa4b 	bl	8004554 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d302      	bcc.n	80060d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d116      	bne.n	80060fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f043 0220 	orr.w	r2, r3, #32
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e023      	b.n	8006146 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	0c1b      	lsrs	r3, r3, #16
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b01      	cmp	r3, #1
 8006106:	d10d      	bne.n	8006124 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	43da      	mvns	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4013      	ands	r3, r2
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	bf0c      	ite	eq
 800611a:	2301      	moveq	r3, #1
 800611c:	2300      	movne	r3, #0
 800611e:	b2db      	uxtb	r3, r3
 8006120:	461a      	mov	r2, r3
 8006122:	e00c      	b.n	800613e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	43da      	mvns	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	4013      	ands	r3, r2
 8006130:	b29b      	uxth	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	bf0c      	ite	eq
 8006136:	2301      	moveq	r3, #1
 8006138:	2300      	movne	r3, #0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	461a      	mov	r2, r3
 800613e:	79fb      	ldrb	r3, [r7, #7]
 8006140:	429a      	cmp	r2, r3
 8006142:	d0b6      	beq.n	80060b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	60f8      	str	r0, [r7, #12]
 8006156:	60b9      	str	r1, [r7, #8]
 8006158:	607a      	str	r2, [r7, #4]
 800615a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800615c:	e051      	b.n	8006202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800616c:	d123      	bne.n	80061b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800617c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006186:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2220      	movs	r2, #32
 8006192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	f043 0204 	orr.w	r2, r3, #4
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e046      	b.n	8006244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061bc:	d021      	beq.n	8006202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061be:	f7fe f9c9 	bl	8004554 <HAL_GetTick>
 80061c2:	4602      	mov	r2, r0
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	1ad3      	subs	r3, r2, r3
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d302      	bcc.n	80061d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d116      	bne.n	8006202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ee:	f043 0220 	orr.w	r2, r3, #32
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e020      	b.n	8006244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	d10c      	bne.n	8006226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	43da      	mvns	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4013      	ands	r3, r2
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	bf14      	ite	ne
 800621e:	2301      	movne	r3, #1
 8006220:	2300      	moveq	r3, #0
 8006222:	b2db      	uxtb	r3, r3
 8006224:	e00b      	b.n	800623e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	43da      	mvns	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	4013      	ands	r3, r2
 8006232:	b29b      	uxth	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d18d      	bne.n	800615e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006258:	e02d      	b.n	80062b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f000 f8ce 	bl	80063fc <I2C_IsAcknowledgeFailed>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e02d      	b.n	80062c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006270:	d021      	beq.n	80062b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006272:	f7fe f96f 	bl	8004554 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	429a      	cmp	r2, r3
 8006280:	d302      	bcc.n	8006288 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d116      	bne.n	80062b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2220      	movs	r2, #32
 8006292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a2:	f043 0220 	orr.w	r2, r3, #32
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e007      	b.n	80062c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	695b      	ldr	r3, [r3, #20]
 80062bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062c0:	2b80      	cmp	r3, #128	; 0x80
 80062c2:	d1ca      	bne.n	800625a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062da:	e02d      	b.n	8006338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 f88d 	bl	80063fc <I2C_IsAcknowledgeFailed>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e02d      	b.n	8006348 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f2:	d021      	beq.n	8006338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f4:	f7fe f92e 	bl	8004554 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	429a      	cmp	r2, r3
 8006302:	d302      	bcc.n	800630a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d116      	bne.n	8006338 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006324:	f043 0220 	orr.w	r2, r3, #32
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e007      	b.n	8006348 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b04      	cmp	r3, #4
 8006344:	d1ca      	bne.n	80062dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800635c:	e042      	b.n	80063e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b10      	cmp	r3, #16
 800636a:	d119      	bne.n	80063a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0210 	mvn.w	r2, #16
 8006374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e029      	b.n	80063f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a0:	f7fe f8d8 	bl	8004554 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d302      	bcc.n	80063b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d116      	bne.n	80063e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	f043 0220 	orr.w	r2, r3, #32
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e007      	b.n	80063f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	d1b5      	bne.n	800635e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80063f2:	2300      	movs	r3, #0
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800640e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006412:	d11b      	bne.n	800644c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800641c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	f043 0204 	orr.w	r2, r3, #4
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e000      	b.n	800644e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
	...

0800645c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e0bf      	b.n	80065ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8ba 	bl	80065fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699a      	ldr	r2, [r3, #24]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800649e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6999      	ldr	r1, [r3, #24]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6899      	ldr	r1, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4b4a      	ldr	r3, [pc, #296]	; (80065f8 <HAL_LTDC_Init+0x19c>)
 80064d0:	400b      	ands	r3, r1
 80064d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	041b      	lsls	r3, r3, #16
 80064da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6899      	ldr	r1, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	699a      	ldr	r2, [r3, #24]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	431a      	orrs	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	430a      	orrs	r2, r1
 80064f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68d9      	ldr	r1, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	4b3e      	ldr	r3, [pc, #248]	; (80065f8 <HAL_LTDC_Init+0x19c>)
 80064fe:	400b      	ands	r3, r1
 8006500:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	041b      	lsls	r3, r3, #16
 8006508:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68d9      	ldr	r1, [r3, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6919      	ldr	r1, [r3, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b33      	ldr	r3, [pc, #204]	; (80065f8 <HAL_LTDC_Init+0x19c>)
 800652c:	400b      	ands	r3, r1
 800652e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006534:	041b      	lsls	r3, r3, #16
 8006536:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6919      	ldr	r1, [r3, #16]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6959      	ldr	r1, [r3, #20]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	4b27      	ldr	r3, [pc, #156]	; (80065f8 <HAL_LTDC_Init+0x19c>)
 800655a:	400b      	ands	r3, r1
 800655c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006562:	041b      	lsls	r3, r3, #16
 8006564:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6959      	ldr	r1, [r3, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800658c:	041b      	lsls	r3, r3, #16
 800658e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80065b2:	431a      	orrs	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f042 0206 	orr.w	r2, r2, #6
 80065ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	f000f800 	.word	0xf000f800

080065fc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006610:	b5b0      	push	{r4, r5, r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_LTDC_ConfigLayer+0x1a>
 8006626:	2302      	movs	r3, #2
 8006628:	e02c      	b.n	8006684 <HAL_LTDC_ConfigLayer+0x74>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2202      	movs	r2, #2
 8006636:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2134      	movs	r1, #52	; 0x34
 8006640:	fb01 f303 	mul.w	r3, r1, r3
 8006644:	4413      	add	r3, r2
 8006646:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	4614      	mov	r4, r2
 800664e:	461d      	mov	r5, r3
 8006650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800665a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	68b9      	ldr	r1, [r7, #8]
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f83b 	bl	80066e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2201      	movs	r2, #1
 8006670:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bdb0      	pop	{r4, r5, r7, pc}

0800668c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800669a:	2b01      	cmp	r3, #1
 800669c:	d101      	bne.n	80066a2 <HAL_LTDC_EnableDither+0x16>
 800669e:	2302      	movs	r3, #2
 80066a0:	e016      	b.n	80066d0 <HAL_LTDC_EnableDither+0x44>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80066b2:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <HAL_LTDC_EnableDither+0x50>)
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	4a09      	ldr	r2, [pc, #36]	; (80066dc <HAL_LTDC_EnableDither+0x50>)
 80066b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066bc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40016800 	.word	0x40016800

080066e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b089      	sub	sp, #36	; 0x24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	0c1b      	lsrs	r3, r3, #16
 80066f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066fc:	4413      	add	r3, r2
 80066fe:	041b      	lsls	r3, r3, #16
 8006700:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	01db      	lsls	r3, r3, #7
 800670c:	4413      	add	r3, r2
 800670e:	3384      	adds	r3, #132	; 0x84
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	6812      	ldr	r2, [r2, #0]
 8006716:	4611      	mov	r1, r2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	01d2      	lsls	r2, r2, #7
 800671c:	440a      	add	r2, r1
 800671e:	3284      	adds	r2, #132	; 0x84
 8006720:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006724:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	0c1b      	lsrs	r3, r3, #16
 8006732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006736:	4413      	add	r3, r2
 8006738:	1c5a      	adds	r2, r3, #1
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4619      	mov	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	01db      	lsls	r3, r3, #7
 8006744:	440b      	add	r3, r1
 8006746:	3384      	adds	r3, #132	; 0x84
 8006748:	4619      	mov	r1, r3
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	4313      	orrs	r3, r2
 800674e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	68da      	ldr	r2, [r3, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800675e:	4413      	add	r3, r2
 8006760:	041b      	lsls	r3, r3, #16
 8006762:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	01db      	lsls	r3, r3, #7
 800676e:	4413      	add	r3, r2
 8006770:	3384      	adds	r3, #132	; 0x84
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	6812      	ldr	r2, [r2, #0]
 8006778:	4611      	mov	r1, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	01d2      	lsls	r2, r2, #7
 800677e:	440a      	add	r2, r1
 8006780:	3284      	adds	r2, #132	; 0x84
 8006782:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006786:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	689a      	ldr	r2, [r3, #8]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006796:	4413      	add	r3, r2
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4619      	mov	r1, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	01db      	lsls	r3, r3, #7
 80067a4:	440b      	add	r3, r1
 80067a6:	3384      	adds	r3, #132	; 0x84
 80067a8:	4619      	mov	r1, r3
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	01db      	lsls	r3, r3, #7
 80067ba:	4413      	add	r3, r2
 80067bc:	3384      	adds	r3, #132	; 0x84
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	6812      	ldr	r2, [r2, #0]
 80067c4:	4611      	mov	r1, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	01d2      	lsls	r2, r2, #7
 80067ca:	440a      	add	r2, r1
 80067cc:	3284      	adds	r2, #132	; 0x84
 80067ce:	f023 0307 	bic.w	r3, r3, #7
 80067d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	461a      	mov	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	01db      	lsls	r3, r3, #7
 80067de:	4413      	add	r3, r2
 80067e0:	3384      	adds	r3, #132	; 0x84
 80067e2:	461a      	mov	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80067fa:	041b      	lsls	r3, r3, #16
 80067fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	061b      	lsls	r3, r3, #24
 8006804:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	461a      	mov	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	01db      	lsls	r3, r3, #7
 8006810:	4413      	add	r3, r2
 8006812:	3384      	adds	r3, #132	; 0x84
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	01db      	lsls	r3, r3, #7
 8006820:	4413      	add	r3, r2
 8006822:	3384      	adds	r3, #132	; 0x84
 8006824:	461a      	mov	r2, r3
 8006826:	2300      	movs	r3, #0
 8006828:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006830:	461a      	mov	r2, r3
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	431a      	orrs	r2, r3
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	431a      	orrs	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4619      	mov	r1, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	01db      	lsls	r3, r3, #7
 8006844:	440b      	add	r3, r1
 8006846:	3384      	adds	r3, #132	; 0x84
 8006848:	4619      	mov	r1, r3
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	4313      	orrs	r3, r2
 800684e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	01db      	lsls	r3, r3, #7
 800685a:	4413      	add	r3, r2
 800685c:	3384      	adds	r3, #132	; 0x84
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	6812      	ldr	r2, [r2, #0]
 8006864:	4611      	mov	r1, r2
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	01d2      	lsls	r2, r2, #7
 800686a:	440a      	add	r2, r1
 800686c:	3284      	adds	r2, #132	; 0x84
 800686e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006872:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	01db      	lsls	r3, r3, #7
 800687e:	4413      	add	r3, r2
 8006880:	3384      	adds	r3, #132	; 0x84
 8006882:	461a      	mov	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	01db      	lsls	r3, r3, #7
 8006894:	4413      	add	r3, r2
 8006896:	3384      	adds	r3, #132	; 0x84
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	6812      	ldr	r2, [r2, #0]
 800689e:	4611      	mov	r1, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	01d2      	lsls	r2, r2, #7
 80068a4:	440a      	add	r2, r1
 80068a6:	3284      	adds	r2, #132	; 0x84
 80068a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80068ac:	f023 0307 	bic.w	r3, r3, #7
 80068b0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	69da      	ldr	r2, [r3, #28]
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	68f9      	ldr	r1, [r7, #12]
 80068bc:	6809      	ldr	r1, [r1, #0]
 80068be:	4608      	mov	r0, r1
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	01c9      	lsls	r1, r1, #7
 80068c4:	4401      	add	r1, r0
 80068c6:	3184      	adds	r1, #132	; 0x84
 80068c8:	4313      	orrs	r3, r2
 80068ca:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	01db      	lsls	r3, r3, #7
 80068d6:	4413      	add	r3, r2
 80068d8:	3384      	adds	r3, #132	; 0x84
 80068da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	461a      	mov	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	01db      	lsls	r3, r3, #7
 80068e6:	4413      	add	r3, r2
 80068e8:	3384      	adds	r3, #132	; 0x84
 80068ea:	461a      	mov	r2, r3
 80068ec:	2300      	movs	r3, #0
 80068ee:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	01db      	lsls	r3, r3, #7
 80068fa:	4413      	add	r3, r2
 80068fc:	3384      	adds	r3, #132	; 0x84
 80068fe:	461a      	mov	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d102      	bne.n	8006914 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800690e:	2304      	movs	r3, #4
 8006910:	61fb      	str	r3, [r7, #28]
 8006912:	e01b      	b.n	800694c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d102      	bne.n	8006922 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800691c:	2303      	movs	r3, #3
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	e014      	b.n	800694c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b04      	cmp	r3, #4
 8006928:	d00b      	beq.n	8006942 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800692e:	2b02      	cmp	r3, #2
 8006930:	d007      	beq.n	8006942 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006936:	2b03      	cmp	r3, #3
 8006938:	d003      	beq.n	8006942 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800693e:	2b07      	cmp	r3, #7
 8006940:	d102      	bne.n	8006948 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006942:	2302      	movs	r3, #2
 8006944:	61fb      	str	r3, [r7, #28]
 8006946:	e001      	b.n	800694c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006948:	2301      	movs	r3, #1
 800694a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	461a      	mov	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	01db      	lsls	r3, r3, #7
 8006956:	4413      	add	r3, r2
 8006958:	3384      	adds	r3, #132	; 0x84
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	6812      	ldr	r2, [r2, #0]
 8006960:	4611      	mov	r1, r2
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	01d2      	lsls	r2, r2, #7
 8006966:	440a      	add	r2, r1
 8006968:	3284      	adds	r2, #132	; 0x84
 800696a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800696e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	fb02 f303 	mul.w	r3, r2, r3
 800697a:	041a      	lsls	r2, r3, #16
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	6859      	ldr	r1, [r3, #4]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	1acb      	subs	r3, r1, r3
 8006986:	69f9      	ldr	r1, [r7, #28]
 8006988:	fb01 f303 	mul.w	r3, r1, r3
 800698c:	3303      	adds	r3, #3
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	6809      	ldr	r1, [r1, #0]
 8006992:	4608      	mov	r0, r1
 8006994:	6879      	ldr	r1, [r7, #4]
 8006996:	01c9      	lsls	r1, r1, #7
 8006998:	4401      	add	r1, r0
 800699a:	3184      	adds	r1, #132	; 0x84
 800699c:	4313      	orrs	r3, r2
 800699e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	01db      	lsls	r3, r3, #7
 80069aa:	4413      	add	r3, r2
 80069ac:	3384      	adds	r3, #132	; 0x84
 80069ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	4611      	mov	r1, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	01d2      	lsls	r2, r2, #7
 80069ba:	440a      	add	r2, r1
 80069bc:	3284      	adds	r2, #132	; 0x84
 80069be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80069c2:	f023 0307 	bic.w	r3, r3, #7
 80069c6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	461a      	mov	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	01db      	lsls	r3, r3, #7
 80069d2:	4413      	add	r3, r2
 80069d4:	3384      	adds	r3, #132	; 0x84
 80069d6:	461a      	mov	r2, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	01db      	lsls	r3, r3, #7
 80069e8:	4413      	add	r3, r2
 80069ea:	3384      	adds	r3, #132	; 0x84
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	4611      	mov	r1, r2
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	01d2      	lsls	r2, r2, #7
 80069f8:	440a      	add	r2, r1
 80069fa:	3284      	adds	r2, #132	; 0x84
 80069fc:	f043 0301 	orr.w	r3, r3, #1
 8006a00:	6013      	str	r3, [r2, #0]
}
 8006a02:	bf00      	nop
 8006a04:	3724      	adds	r7, #36	; 0x24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
	...

08006a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e25e      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d075      	beq.n	8006b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a2e:	4b88      	ldr	r3, [pc, #544]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f003 030c 	and.w	r3, r3, #12
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d00c      	beq.n	8006a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a3a:	4b85      	ldr	r3, [pc, #532]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a42:	2b08      	cmp	r3, #8
 8006a44:	d112      	bne.n	8006a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a46:	4b82      	ldr	r3, [pc, #520]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a52:	d10b      	bne.n	8006a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a54:	4b7e      	ldr	r3, [pc, #504]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d05b      	beq.n	8006b18 <HAL_RCC_OscConfig+0x108>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d157      	bne.n	8006b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e239      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a74:	d106      	bne.n	8006a84 <HAL_RCC_OscConfig+0x74>
 8006a76:	4b76      	ldr	r3, [pc, #472]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a75      	ldr	r2, [pc, #468]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	e01d      	b.n	8006ac0 <HAL_RCC_OscConfig+0xb0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x98>
 8006a8e:	4b70      	ldr	r3, [pc, #448]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a6f      	ldr	r2, [pc, #444]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	4b6d      	ldr	r3, [pc, #436]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a6c      	ldr	r2, [pc, #432]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	e00b      	b.n	8006ac0 <HAL_RCC_OscConfig+0xb0>
 8006aa8:	4b69      	ldr	r3, [pc, #420]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a68      	ldr	r2, [pc, #416]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab2:	6013      	str	r3, [r2, #0]
 8006ab4:	4b66      	ldr	r3, [pc, #408]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a65      	ldr	r2, [pc, #404]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d013      	beq.n	8006af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac8:	f7fd fd44 	bl	8004554 <HAL_GetTick>
 8006acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ace:	e008      	b.n	8006ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ad0:	f7fd fd40 	bl	8004554 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	2b64      	cmp	r3, #100	; 0x64
 8006adc:	d901      	bls.n	8006ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e1fe      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae2:	4b5b      	ldr	r3, [pc, #364]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0f0      	beq.n	8006ad0 <HAL_RCC_OscConfig+0xc0>
 8006aee:	e014      	b.n	8006b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006af0:	f7fd fd30 	bl	8004554 <HAL_GetTick>
 8006af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006af6:	e008      	b.n	8006b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006af8:	f7fd fd2c 	bl	8004554 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b64      	cmp	r3, #100	; 0x64
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e1ea      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b0a:	4b51      	ldr	r3, [pc, #324]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1f0      	bne.n	8006af8 <HAL_RCC_OscConfig+0xe8>
 8006b16:	e000      	b.n	8006b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d063      	beq.n	8006bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b26:	4b4a      	ldr	r3, [pc, #296]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f003 030c 	and.w	r3, r3, #12
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b32:	4b47      	ldr	r3, [pc, #284]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b3a:	2b08      	cmp	r3, #8
 8006b3c:	d11c      	bne.n	8006b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b3e:	4b44      	ldr	r3, [pc, #272]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d116      	bne.n	8006b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b4a:	4b41      	ldr	r3, [pc, #260]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d005      	beq.n	8006b62 <HAL_RCC_OscConfig+0x152>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d001      	beq.n	8006b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e1be      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b62:	4b3b      	ldr	r3, [pc, #236]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	4937      	ldr	r1, [pc, #220]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b76:	e03a      	b.n	8006bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d020      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b80:	4b34      	ldr	r3, [pc, #208]	; (8006c54 <HAL_RCC_OscConfig+0x244>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b86:	f7fd fce5 	bl	8004554 <HAL_GetTick>
 8006b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b8c:	e008      	b.n	8006ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b8e:	f7fd fce1 	bl	8004554 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d901      	bls.n	8006ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e19f      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba0:	4b2b      	ldr	r3, [pc, #172]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d0f0      	beq.n	8006b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691b      	ldr	r3, [r3, #16]
 8006bb8:	00db      	lsls	r3, r3, #3
 8006bba:	4925      	ldr	r1, [pc, #148]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	600b      	str	r3, [r1, #0]
 8006bc0:	e015      	b.n	8006bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bc2:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <HAL_RCC_OscConfig+0x244>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc8:	f7fd fcc4 	bl	8004554 <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bd0:	f7fd fcc0 	bl	8004554 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e17e      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006be2:	4b1b      	ldr	r3, [pc, #108]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f0      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0308 	and.w	r3, r3, #8
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d036      	beq.n	8006c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	695b      	ldr	r3, [r3, #20]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d016      	beq.n	8006c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c02:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <HAL_RCC_OscConfig+0x248>)
 8006c04:	2201      	movs	r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c08:	f7fd fca4 	bl	8004554 <HAL_GetTick>
 8006c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c0e:	e008      	b.n	8006c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c10:	f7fd fca0 	bl	8004554 <HAL_GetTick>
 8006c14:	4602      	mov	r2, r0
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d901      	bls.n	8006c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e15e      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c22:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <HAL_RCC_OscConfig+0x240>)
 8006c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c26:	f003 0302 	and.w	r3, r3, #2
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d0f0      	beq.n	8006c10 <HAL_RCC_OscConfig+0x200>
 8006c2e:	e01b      	b.n	8006c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c30:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <HAL_RCC_OscConfig+0x248>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c36:	f7fd fc8d 	bl	8004554 <HAL_GetTick>
 8006c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c3c:	e00e      	b.n	8006c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c3e:	f7fd fc89 	bl	8004554 <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d907      	bls.n	8006c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e147      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
 8006c50:	40023800 	.word	0x40023800
 8006c54:	42470000 	.word	0x42470000
 8006c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c5c:	4b88      	ldr	r3, [pc, #544]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c60:	f003 0302 	and.w	r3, r3, #2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1ea      	bne.n	8006c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 8097 	beq.w	8006da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c76:	2300      	movs	r3, #0
 8006c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c7a:	4b81      	ldr	r3, [pc, #516]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10f      	bne.n	8006ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c86:	2300      	movs	r3, #0
 8006c88:	60bb      	str	r3, [r7, #8]
 8006c8a:	4b7d      	ldr	r3, [pc, #500]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c8e:	4a7c      	ldr	r2, [pc, #496]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c94:	6413      	str	r3, [r2, #64]	; 0x40
 8006c96:	4b7a      	ldr	r3, [pc, #488]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ca6:	4b77      	ldr	r3, [pc, #476]	; (8006e84 <HAL_RCC_OscConfig+0x474>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d118      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cb2:	4b74      	ldr	r3, [pc, #464]	; (8006e84 <HAL_RCC_OscConfig+0x474>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a73      	ldr	r2, [pc, #460]	; (8006e84 <HAL_RCC_OscConfig+0x474>)
 8006cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cbe:	f7fd fc49 	bl	8004554 <HAL_GetTick>
 8006cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cc4:	e008      	b.n	8006cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cc6:	f7fd fc45 	bl	8004554 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	1ad3      	subs	r3, r2, r3
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d901      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	e103      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cd8:	4b6a      	ldr	r3, [pc, #424]	; (8006e84 <HAL_RCC_OscConfig+0x474>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d0f0      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d106      	bne.n	8006cfa <HAL_RCC_OscConfig+0x2ea>
 8006cec:	4b64      	ldr	r3, [pc, #400]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf0:	4a63      	ldr	r2, [pc, #396]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006cf2:	f043 0301 	orr.w	r3, r3, #1
 8006cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf8:	e01c      	b.n	8006d34 <HAL_RCC_OscConfig+0x324>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d10c      	bne.n	8006d1c <HAL_RCC_OscConfig+0x30c>
 8006d02:	4b5f      	ldr	r3, [pc, #380]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	4a5e      	ldr	r2, [pc, #376]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d08:	f043 0304 	orr.w	r3, r3, #4
 8006d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d0e:	4b5c      	ldr	r3, [pc, #368]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	4a5b      	ldr	r2, [pc, #364]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d14:	f043 0301 	orr.w	r3, r3, #1
 8006d18:	6713      	str	r3, [r2, #112]	; 0x70
 8006d1a:	e00b      	b.n	8006d34 <HAL_RCC_OscConfig+0x324>
 8006d1c:	4b58      	ldr	r3, [pc, #352]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d20:	4a57      	ldr	r2, [pc, #348]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	6713      	str	r3, [r2, #112]	; 0x70
 8006d28:	4b55      	ldr	r3, [pc, #340]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2c:	4a54      	ldr	r2, [pc, #336]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d2e:	f023 0304 	bic.w	r3, r3, #4
 8006d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d015      	beq.n	8006d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3c:	f7fd fc0a 	bl	8004554 <HAL_GetTick>
 8006d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d42:	e00a      	b.n	8006d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d44:	f7fd fc06 	bl	8004554 <HAL_GetTick>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e0c2      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d5a:	4b49      	ldr	r3, [pc, #292]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	f003 0302 	and.w	r3, r3, #2
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d0ee      	beq.n	8006d44 <HAL_RCC_OscConfig+0x334>
 8006d66:	e014      	b.n	8006d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d68:	f7fd fbf4 	bl	8004554 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d6e:	e00a      	b.n	8006d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d70:	f7fd fbf0 	bl	8004554 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d901      	bls.n	8006d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006d82:	2303      	movs	r3, #3
 8006d84:	e0ac      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d86:	4b3e      	ldr	r3, [pc, #248]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1ee      	bne.n	8006d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d105      	bne.n	8006da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d98:	4b39      	ldr	r3, [pc, #228]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9c:	4a38      	ldr	r2, [pc, #224]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8098 	beq.w	8006ede <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006dae:	4b34      	ldr	r3, [pc, #208]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 030c 	and.w	r3, r3, #12
 8006db6:	2b08      	cmp	r3, #8
 8006db8:	d05c      	beq.n	8006e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d141      	bne.n	8006e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc2:	4b31      	ldr	r3, [pc, #196]	; (8006e88 <HAL_RCC_OscConfig+0x478>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc8:	f7fd fbc4 	bl	8004554 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dd0:	f7fd fbc0 	bl	8004554 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e07e      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006de2:	4b27      	ldr	r3, [pc, #156]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1f0      	bne.n	8006dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69da      	ldr	r2, [r3, #28]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfc:	019b      	lsls	r3, r3, #6
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	3b01      	subs	r3, #1
 8006e08:	041b      	lsls	r3, r3, #16
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	061b      	lsls	r3, r3, #24
 8006e12:	491b      	ldr	r1, [pc, #108]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e18:	4b1b      	ldr	r3, [pc, #108]	; (8006e88 <HAL_RCC_OscConfig+0x478>)
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e1e:	f7fd fb99 	bl	8004554 <HAL_GetTick>
 8006e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e24:	e008      	b.n	8006e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e26:	f7fd fb95 	bl	8004554 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d901      	bls.n	8006e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e053      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e38:	4b11      	ldr	r3, [pc, #68]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0f0      	beq.n	8006e26 <HAL_RCC_OscConfig+0x416>
 8006e44:	e04b      	b.n	8006ede <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <HAL_RCC_OscConfig+0x478>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e4c:	f7fd fb82 	bl	8004554 <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e54:	f7fd fb7e 	bl	8004554 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e03c      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e66:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <HAL_RCC_OscConfig+0x470>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f0      	bne.n	8006e54 <HAL_RCC_OscConfig+0x444>
 8006e72:	e034      	b.n	8006ede <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d107      	bne.n	8006e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e02f      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
 8006e80:	40023800 	.word	0x40023800
 8006e84:	40007000 	.word	0x40007000
 8006e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006e8c:	4b16      	ldr	r3, [pc, #88]	; (8006ee8 <HAL_RCC_OscConfig+0x4d8>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	69db      	ldr	r3, [r3, #28]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d11c      	bne.n	8006eda <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d115      	bne.n	8006eda <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d10d      	bne.n	8006eda <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d106      	bne.n	8006eda <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d001      	beq.n	8006ede <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40023800 	.word	0x40023800

08006eec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d101      	bne.n	8006f00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e0cc      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f00:	4b68      	ldr	r3, [pc, #416]	; (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 030f 	and.w	r3, r3, #15
 8006f08:	683a      	ldr	r2, [r7, #0]
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d90c      	bls.n	8006f28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f0e:	4b65      	ldr	r3, [pc, #404]	; (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	b2d2      	uxtb	r2, r2
 8006f14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f16:	4b63      	ldr	r3, [pc, #396]	; (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 030f 	and.w	r3, r3, #15
 8006f1e:	683a      	ldr	r2, [r7, #0]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d001      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e0b8      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d020      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0304 	and.w	r3, r3, #4
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f40:	4b59      	ldr	r3, [pc, #356]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	4a58      	ldr	r2, [pc, #352]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d005      	beq.n	8006f64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f58:	4b53      	ldr	r3, [pc, #332]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	4a52      	ldr	r2, [pc, #328]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f64:	4b50      	ldr	r3, [pc, #320]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	494d      	ldr	r1, [pc, #308]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0301 	and.w	r3, r3, #1
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d044      	beq.n	800700c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d107      	bne.n	8006f9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8a:	4b47      	ldr	r3, [pc, #284]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d119      	bne.n	8006fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e07f      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2b02      	cmp	r3, #2
 8006fa0:	d003      	beq.n	8006faa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d107      	bne.n	8006fba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006faa:	4b3f      	ldr	r3, [pc, #252]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d109      	bne.n	8006fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e06f      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fba:	4b3b      	ldr	r3, [pc, #236]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d101      	bne.n	8006fca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e067      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fca:	4b37      	ldr	r3, [pc, #220]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	f023 0203 	bic.w	r2, r3, #3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	4934      	ldr	r1, [pc, #208]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fdc:	f7fd faba 	bl	8004554 <HAL_GetTick>
 8006fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fe2:	e00a      	b.n	8006ffa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe4:	f7fd fab6 	bl	8004554 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e04f      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ffa:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 020c 	and.w	r2, r3, #12
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	429a      	cmp	r2, r3
 800700a:	d1eb      	bne.n	8006fe4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800700c:	4b25      	ldr	r3, [pc, #148]	; (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	429a      	cmp	r2, r3
 8007018:	d20c      	bcs.n	8007034 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800701a:	4b22      	ldr	r3, [pc, #136]	; (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007022:	4b20      	ldr	r3, [pc, #128]	; (80070a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 030f 	and.w	r3, r3, #15
 800702a:	683a      	ldr	r2, [r7, #0]
 800702c:	429a      	cmp	r2, r3
 800702e:	d001      	beq.n	8007034 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e032      	b.n	800709a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d008      	beq.n	8007052 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007040:	4b19      	ldr	r3, [pc, #100]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	4916      	ldr	r1, [pc, #88]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 800704e:	4313      	orrs	r3, r2
 8007050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800705e:	4b12      	ldr	r3, [pc, #72]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	490e      	ldr	r1, [pc, #56]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 800706e:	4313      	orrs	r3, r2
 8007070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007072:	f000 f821 	bl	80070b8 <HAL_RCC_GetSysClockFreq>
 8007076:	4602      	mov	r2, r0
 8007078:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	490a      	ldr	r1, [pc, #40]	; (80070ac <HAL_RCC_ClockConfig+0x1c0>)
 8007084:	5ccb      	ldrb	r3, [r1, r3]
 8007086:	fa22 f303 	lsr.w	r3, r2, r3
 800708a:	4a09      	ldr	r2, [pc, #36]	; (80070b0 <HAL_RCC_ClockConfig+0x1c4>)
 800708c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800708e:	4b09      	ldr	r3, [pc, #36]	; (80070b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f7fd fa1a 	bl	80044cc <HAL_InitTick>

  return HAL_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40023c00 	.word	0x40023c00
 80070a8:	40023800 	.word	0x40023800
 80070ac:	0800a378 	.word	0x0800a378
 80070b0:	200000f8 	.word	0x200000f8
 80070b4:	20000188 	.word	0x20000188

080070b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070bc:	b094      	sub	sp, #80	; 0x50
 80070be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	647b      	str	r3, [r7, #68]	; 0x44
 80070c4:	2300      	movs	r3, #0
 80070c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c8:	2300      	movs	r3, #0
 80070ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070d0:	4b79      	ldr	r3, [pc, #484]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f003 030c 	and.w	r3, r3, #12
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d00d      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0x40>
 80070dc:	2b08      	cmp	r3, #8
 80070de:	f200 80e1 	bhi.w	80072a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_RCC_GetSysClockFreq+0x34>
 80070e6:	2b04      	cmp	r3, #4
 80070e8:	d003      	beq.n	80070f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80070ea:	e0db      	b.n	80072a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070ec:	4b73      	ldr	r3, [pc, #460]	; (80072bc <HAL_RCC_GetSysClockFreq+0x204>)
 80070ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80070f0:	e0db      	b.n	80072aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070f2:	4b73      	ldr	r3, [pc, #460]	; (80072c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80070f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070f6:	e0d8      	b.n	80072aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070f8:	4b6f      	ldr	r3, [pc, #444]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007100:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007102:	4b6d      	ldr	r3, [pc, #436]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d063      	beq.n	80071d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800710e:	4b6a      	ldr	r3, [pc, #424]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	099b      	lsrs	r3, r3, #6
 8007114:	2200      	movs	r2, #0
 8007116:	63bb      	str	r3, [r7, #56]	; 0x38
 8007118:	63fa      	str	r2, [r7, #60]	; 0x3c
 800711a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800711c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007120:	633b      	str	r3, [r7, #48]	; 0x30
 8007122:	2300      	movs	r3, #0
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
 8007126:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800712a:	4622      	mov	r2, r4
 800712c:	462b      	mov	r3, r5
 800712e:	f04f 0000 	mov.w	r0, #0
 8007132:	f04f 0100 	mov.w	r1, #0
 8007136:	0159      	lsls	r1, r3, #5
 8007138:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800713c:	0150      	lsls	r0, r2, #5
 800713e:	4602      	mov	r2, r0
 8007140:	460b      	mov	r3, r1
 8007142:	4621      	mov	r1, r4
 8007144:	1a51      	subs	r1, r2, r1
 8007146:	6139      	str	r1, [r7, #16]
 8007148:	4629      	mov	r1, r5
 800714a:	eb63 0301 	sbc.w	r3, r3, r1
 800714e:	617b      	str	r3, [r7, #20]
 8007150:	f04f 0200 	mov.w	r2, #0
 8007154:	f04f 0300 	mov.w	r3, #0
 8007158:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800715c:	4659      	mov	r1, fp
 800715e:	018b      	lsls	r3, r1, #6
 8007160:	4651      	mov	r1, sl
 8007162:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007166:	4651      	mov	r1, sl
 8007168:	018a      	lsls	r2, r1, #6
 800716a:	4651      	mov	r1, sl
 800716c:	ebb2 0801 	subs.w	r8, r2, r1
 8007170:	4659      	mov	r1, fp
 8007172:	eb63 0901 	sbc.w	r9, r3, r1
 8007176:	f04f 0200 	mov.w	r2, #0
 800717a:	f04f 0300 	mov.w	r3, #0
 800717e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800718a:	4690      	mov	r8, r2
 800718c:	4699      	mov	r9, r3
 800718e:	4623      	mov	r3, r4
 8007190:	eb18 0303 	adds.w	r3, r8, r3
 8007194:	60bb      	str	r3, [r7, #8]
 8007196:	462b      	mov	r3, r5
 8007198:	eb49 0303 	adc.w	r3, r9, r3
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80071aa:	4629      	mov	r1, r5
 80071ac:	024b      	lsls	r3, r1, #9
 80071ae:	4621      	mov	r1, r4
 80071b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80071b4:	4621      	mov	r1, r4
 80071b6:	024a      	lsls	r2, r1, #9
 80071b8:	4610      	mov	r0, r2
 80071ba:	4619      	mov	r1, r3
 80071bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071be:	2200      	movs	r2, #0
 80071c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80071c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80071c8:	f7f9 fcf6 	bl	8000bb8 <__aeabi_uldivmod>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4613      	mov	r3, r2
 80071d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071d4:	e058      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071d6:	4b38      	ldr	r3, [pc, #224]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	099b      	lsrs	r3, r3, #6
 80071dc:	2200      	movs	r2, #0
 80071de:	4618      	mov	r0, r3
 80071e0:	4611      	mov	r1, r2
 80071e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80071e6:	623b      	str	r3, [r7, #32]
 80071e8:	2300      	movs	r3, #0
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
 80071ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80071f0:	4642      	mov	r2, r8
 80071f2:	464b      	mov	r3, r9
 80071f4:	f04f 0000 	mov.w	r0, #0
 80071f8:	f04f 0100 	mov.w	r1, #0
 80071fc:	0159      	lsls	r1, r3, #5
 80071fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007202:	0150      	lsls	r0, r2, #5
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4641      	mov	r1, r8
 800720a:	ebb2 0a01 	subs.w	sl, r2, r1
 800720e:	4649      	mov	r1, r9
 8007210:	eb63 0b01 	sbc.w	fp, r3, r1
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007220:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007224:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007228:	ebb2 040a 	subs.w	r4, r2, sl
 800722c:	eb63 050b 	sbc.w	r5, r3, fp
 8007230:	f04f 0200 	mov.w	r2, #0
 8007234:	f04f 0300 	mov.w	r3, #0
 8007238:	00eb      	lsls	r3, r5, #3
 800723a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800723e:	00e2      	lsls	r2, r4, #3
 8007240:	4614      	mov	r4, r2
 8007242:	461d      	mov	r5, r3
 8007244:	4643      	mov	r3, r8
 8007246:	18e3      	adds	r3, r4, r3
 8007248:	603b      	str	r3, [r7, #0]
 800724a:	464b      	mov	r3, r9
 800724c:	eb45 0303 	adc.w	r3, r5, r3
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800725e:	4629      	mov	r1, r5
 8007260:	028b      	lsls	r3, r1, #10
 8007262:	4621      	mov	r1, r4
 8007264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007268:	4621      	mov	r1, r4
 800726a:	028a      	lsls	r2, r1, #10
 800726c:	4610      	mov	r0, r2
 800726e:	4619      	mov	r1, r3
 8007270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007272:	2200      	movs	r2, #0
 8007274:	61bb      	str	r3, [r7, #24]
 8007276:	61fa      	str	r2, [r7, #28]
 8007278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800727c:	f7f9 fc9c 	bl	8000bb8 <__aeabi_uldivmod>
 8007280:	4602      	mov	r2, r0
 8007282:	460b      	mov	r3, r1
 8007284:	4613      	mov	r3, r2
 8007286:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007288:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	0c1b      	lsrs	r3, r3, #16
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	3301      	adds	r3, #1
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800729a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800729c:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072a2:	e002      	b.n	80072aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072a4:	4b05      	ldr	r3, [pc, #20]	; (80072bc <HAL_RCC_GetSysClockFreq+0x204>)
 80072a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80072a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3750      	adds	r7, #80	; 0x50
 80072b0:	46bd      	mov	sp, r7
 80072b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072b6:	bf00      	nop
 80072b8:	40023800 	.word	0x40023800
 80072bc:	00f42400 	.word	0x00f42400
 80072c0:	007a1200 	.word	0x007a1200

080072c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c4:	b480      	push	{r7}
 80072c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072c8:	4b03      	ldr	r3, [pc, #12]	; (80072d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80072ca:	681b      	ldr	r3, [r3, #0]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	200000f8 	.word	0x200000f8

080072dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072e0:	f7ff fff0 	bl	80072c4 <HAL_RCC_GetHCLKFreq>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4b05      	ldr	r3, [pc, #20]	; (80072fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	0a9b      	lsrs	r3, r3, #10
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	4903      	ldr	r1, [pc, #12]	; (8007300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072f2:	5ccb      	ldrb	r3, [r1, r3]
 80072f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	40023800 	.word	0x40023800
 8007300:	0800a388 	.word	0x0800a388

08007304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10b      	bne.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007328:	2b00      	cmp	r3, #0
 800732a:	d105      	bne.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007334:	2b00      	cmp	r3, #0
 8007336:	d075      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007338:	4b91      	ldr	r3, [pc, #580]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800733e:	f7fd f909 	bl	8004554 <HAL_GetTick>
 8007342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007344:	e008      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007346:	f7fd f905 	bl	8004554 <HAL_GetTick>
 800734a:	4602      	mov	r2, r0
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	2b02      	cmp	r3, #2
 8007352:	d901      	bls.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e189      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007358:	4b8a      	ldr	r3, [pc, #552]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1f0      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d009      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	019a      	lsls	r2, r3, #6
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	071b      	lsls	r3, r3, #28
 800737c:	4981      	ldr	r1, [pc, #516]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01f      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007390:	4b7c      	ldr	r3, [pc, #496]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007396:	0f1b      	lsrs	r3, r3, #28
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	019a      	lsls	r2, r3, #6
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	061b      	lsls	r3, r3, #24
 80073aa:	431a      	orrs	r2, r3
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	071b      	lsls	r3, r3, #28
 80073b0:	4974      	ldr	r1, [pc, #464]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80073b8:	4b72      	ldr	r3, [pc, #456]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073be:	f023 021f 	bic.w	r2, r3, #31
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	496e      	ldr	r1, [pc, #440]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d00d      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	019a      	lsls	r2, r3, #6
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	061b      	lsls	r3, r3, #24
 80073e8:	431a      	orrs	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	071b      	lsls	r3, r3, #28
 80073f0:	4964      	ldr	r1, [pc, #400]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80073f2:	4313      	orrs	r3, r2
 80073f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073f8:	4b61      	ldr	r3, [pc, #388]	; (8007580 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80073fa:	2201      	movs	r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073fe:	f7fd f8a9 	bl	8004554 <HAL_GetTick>
 8007402:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007404:	e008      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007406:	f7fd f8a5 	bl	8004554 <HAL_GetTick>
 800740a:	4602      	mov	r2, r0
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	2b02      	cmp	r3, #2
 8007412:	d901      	bls.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e129      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007418:	4b5a      	ldr	r3, [pc, #360]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d0f0      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d105      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007438:	2b00      	cmp	r3, #0
 800743a:	d079      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800743c:	4b52      	ldr	r3, [pc, #328]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007442:	f7fd f887 	bl	8004554 <HAL_GetTick>
 8007446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007448:	e008      	b.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800744a:	f7fd f883 	bl	8004554 <HAL_GetTick>
 800744e:	4602      	mov	r2, r0
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	2b02      	cmp	r3, #2
 8007456:	d901      	bls.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007458:	2303      	movs	r3, #3
 800745a:	e107      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800745c:	4b49      	ldr	r3, [pc, #292]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007468:	d0ef      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	2b00      	cmp	r3, #0
 8007474:	d020      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007476:	4b43      	ldr	r3, [pc, #268]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747c:	0f1b      	lsrs	r3, r3, #28
 800747e:	f003 0307 	and.w	r3, r3, #7
 8007482:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	019a      	lsls	r2, r3, #6
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	061b      	lsls	r3, r3, #24
 8007490:	431a      	orrs	r2, r3
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	071b      	lsls	r3, r3, #28
 8007496:	493b      	ldr	r1, [pc, #236]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007498:	4313      	orrs	r3, r2
 800749a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800749e:	4b39      	ldr	r3, [pc, #228]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	021b      	lsls	r3, r3, #8
 80074b0:	4934      	ldr	r1, [pc, #208]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d01e      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074c4:	4b2f      	ldr	r3, [pc, #188]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ca:	0e1b      	lsrs	r3, r3, #24
 80074cc:	f003 030f 	and.w	r3, r3, #15
 80074d0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	019a      	lsls	r2, r3, #6
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	061b      	lsls	r3, r3, #24
 80074dc:	431a      	orrs	r2, r3
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	071b      	lsls	r3, r3, #28
 80074e4:	4927      	ldr	r1, [pc, #156]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80074ec:	4b25      	ldr	r3, [pc, #148]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	4922      	ldr	r1, [pc, #136]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007502:	4b21      	ldr	r3, [pc, #132]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007504:	2201      	movs	r2, #1
 8007506:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007508:	f7fd f824 	bl	8004554 <HAL_GetTick>
 800750c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007510:	f7fd f820 	bl	8004554 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e0a4      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007522:	4b18      	ldr	r3, [pc, #96]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800752a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800752e:	d1ef      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 808b 	beq.w	8007654 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	4a0f      	ldr	r2, [pc, #60]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800754c:	6413      	str	r3, [r2, #64]	; 0x40
 800754e:	4b0d      	ldr	r3, [pc, #52]	; (8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a0b      	ldr	r2, [pc, #44]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007564:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007566:	f7fc fff5 	bl	8004554 <HAL_GetTick>
 800756a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800756c:	e010      	b.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800756e:	f7fc fff1 	bl	8004554 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d909      	bls.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	e075      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007580:	42470068 	.word	0x42470068
 8007584:	40023800 	.word	0x40023800
 8007588:	42470070 	.word	0x42470070
 800758c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007590:	4b38      	ldr	r3, [pc, #224]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007598:	2b00      	cmp	r3, #0
 800759a:	d0e8      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800759c:	4b36      	ldr	r3, [pc, #216]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800759e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d02f      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x308>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d028      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075ba:	4b2f      	ldr	r3, [pc, #188]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075c4:	4b2d      	ldr	r3, [pc, #180]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80075c6:	2201      	movs	r2, #1
 80075c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075ca:	4b2c      	ldr	r3, [pc, #176]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80075d0:	4a29      	ldr	r2, [pc, #164]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075d6:	4b28      	ldr	r3, [pc, #160]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80075d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d114      	bne.n	800760c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80075e2:	f7fc ffb7 	bl	8004554 <HAL_GetTick>
 80075e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075e8:	e00a      	b.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ea:	f7fc ffb3 	bl	8004554 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d901      	bls.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e035      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007600:	4b1d      	ldr	r3, [pc, #116]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d0ee      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007618:	d10d      	bne.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800761a:	4b17      	ldr	r3, [pc, #92]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800762a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800762e:	4912      	ldr	r1, [pc, #72]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007630:	4313      	orrs	r3, r2
 8007632:	608b      	str	r3, [r1, #8]
 8007634:	e005      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007636:	4b10      	ldr	r3, [pc, #64]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	4a0f      	ldr	r2, [pc, #60]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800763c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007640:	6093      	str	r3, [r2, #8]
 8007642:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800764e:	490a      	ldr	r1, [pc, #40]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007650:	4313      	orrs	r3, r2
 8007652:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0310 	and.w	r3, r3, #16
 800765c:	2b00      	cmp	r3, #0
 800765e:	d004      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007668:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	40007000 	.word	0x40007000
 8007678:	40023800 	.word	0x40023800
 800767c:	42470e40 	.word	0x42470e40
 8007680:	424711e0 	.word	0x424711e0

08007684 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e025      	b.n	80076e4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d106      	bne.n	80076b2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 f81d 	bl	80076ec <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2202      	movs	r2, #2
 80076b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4619      	mov	r1, r3
 80076c4:	4610      	mov	r0, r2
 80076c6:	f000 ff0f 	bl	80084e8 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6818      	ldr	r0, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	461a      	mov	r2, r3
 80076d4:	6839      	ldr	r1, [r7, #0]
 80076d6:	f000 ff7a 	bl	80085ce <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */ 
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d101      	bne.n	800771c <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007718:	2302      	movs	r3, #2
 800771a:	e018      	b.n	800774e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 ffcd 	bl	80086cc <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b02      	cmp	r3, #2
 8007738:	d104      	bne.n	8007744 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2205      	movs	r2, #5
 800773e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007742:	e003      	b.n	800774c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b02      	cmp	r3, #2
 800776a:	d101      	bne.n	8007770 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800776c:	2302      	movs	r3, #2
 800776e:	e00e      	b.n	800778e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	4618      	mov	r0, r3
 8007780:	f000 ffe0 	bl	8008744 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d101      	bne.n	80077a8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e05d      	b.n	8007864 <HAL_SPI_Init+0xce>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80077ae:	b2db      	uxtb	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d106      	bne.n	80077c2 <HAL_SPI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f87d 	bl	80078bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	431a      	orrs	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	695b      	ldr	r3, [r3, #20]
 80077f4:	431a      	orrs	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	69db      	ldr	r3, [r3, #28]
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	ea42 0103 	orr.w	r1, r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	430a      	orrs	r2, r1
 8007818:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	0c1b      	lsrs	r3, r3, #16
 8007820:	f003 0104 	and.w	r1, r3, #4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007838:	d104      	bne.n	8007844 <HAL_SPI_Init+0xae>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007842:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	69da      	ldr	r2, [r3, #28]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007852:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e01a      	b.n	80078b4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681a      	ldr	r2, [r3, #0]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007894:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f81a 	bl	80078d0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80078b2:	2300      	movs	r3, #0
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3708      	adds	r7, #8
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	4613      	mov	r3, r2
 80078f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d101      	bne.n	8007906 <HAL_SPI_Transmit+0x22>
 8007902:	2302      	movs	r3, #2
 8007904:	e140      	b.n	8007b88 <HAL_SPI_Transmit+0x2a4>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800790e:	f7fc fe21 	bl	8004554 <HAL_GetTick>
 8007912:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007914:	88fb      	ldrh	r3, [r7, #6]
 8007916:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	d002      	beq.n	800792a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007924:	2302      	movs	r3, #2
 8007926:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007928:	e125      	b.n	8007b76 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <HAL_SPI_Transmit+0x52>
 8007930:	88fb      	ldrh	r3, [r7, #6]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d102      	bne.n	800793c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	77fb      	strb	r3, [r7, #31]
    goto error;
 800793a:	e11c      	b.n	8007b76 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2203      	movs	r2, #3
 8007940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	88fa      	ldrh	r2, [r7, #6]
 8007954:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	88fa      	ldrh	r2, [r7, #6]
 800795a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007982:	d107      	bne.n	8007994 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007992:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799c:	d10f      	bne.n	80079be <HAL_SPI_Transmit+0xda>
  {
    SPI_RESET_CRC(hspi);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079bc:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b40      	cmp	r3, #64	; 0x40
 80079ca:	d007      	beq.n	80079dc <HAL_SPI_Transmit+0xf8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079e4:	d14b      	bne.n	8007a7e <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <HAL_SPI_Transmit+0x110>
 80079ee:	8afb      	ldrh	r3, [r7, #22]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d13e      	bne.n	8007a72 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f8:	881a      	ldrh	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	1c9a      	adds	r2, r3, #2
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	3b01      	subs	r3, #1
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007a18:	e02b      	b.n	8007a72 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d112      	bne.n	8007a4e <HAL_SPI_Transmit+0x16a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2c:	881a      	ldrh	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a38:	1c9a      	adds	r2, r3, #2
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8007a4c:	e011      	b.n	8007a72 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a4e:	f7fc fd81 	bl	8004554 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d803      	bhi.n	8007a66 <HAL_SPI_Transmit+0x182>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a64:	d102      	bne.n	8007a6c <HAL_SPI_Transmit+0x188>
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d102      	bne.n	8007a72 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a70:	e081      	b.n	8007b76 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1ce      	bne.n	8007a1a <HAL_SPI_Transmit+0x136>
 8007a7c:	e04c      	b.n	8007b18 <HAL_SPI_Transmit+0x234>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <HAL_SPI_Transmit+0x1a8>
 8007a86:	8afb      	ldrh	r3, [r7, #22]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d140      	bne.n	8007b0e <HAL_SPI_Transmit+0x22a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	7812      	ldrb	r2, [r2, #0]
 8007a98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007ab2:	e02c      	b.n	8007b0e <HAL_SPI_Transmit+0x22a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 0302 	and.w	r3, r3, #2
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d113      	bne.n	8007aea <HAL_SPI_Transmit+0x206>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	330c      	adds	r3, #12
 8007acc:	7812      	ldrb	r2, [r2, #0]
 8007ace:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ae8:	e011      	b.n	8007b0e <HAL_SPI_Transmit+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007aea:	f7fc fd33 	bl	8004554 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d803      	bhi.n	8007b02 <HAL_SPI_Transmit+0x21e>
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b00:	d102      	bne.n	8007b08 <HAL_SPI_Transmit+0x224>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d102      	bne.n	8007b0e <HAL_SPI_Transmit+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007b0c:	e033      	b.n	8007b76 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d1cd      	bne.n	8007ab4 <HAL_SPI_Transmit+0x1d0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b20:	d107      	bne.n	8007b32 <HAL_SPI_Transmit+0x24e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b30:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	68f8      	ldr	r0, [r7, #12]
 8007b38:	f000 fc94 	bl	8008464 <SPI_EndRxTxTransaction>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2220      	movs	r2, #32
 8007b46:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007b50:	2300      	movs	r3, #0
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	613b      	str	r3, [r7, #16]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	77fb      	strb	r3, [r7, #31]
 8007b72:	e000      	b.n	8007b76 <HAL_SPI_Transmit+0x292>
  }

error:
 8007b74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007b86:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af02      	add	r7, sp, #8
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	603b      	str	r3, [r7, #0]
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007bac:	d112      	bne.n	8007bd4 <HAL_SPI_Receive+0x44>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10e      	bne.n	8007bd4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2204      	movs	r2, #4
 8007bba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007bbe:	88fa      	ldrh	r2, [r7, #6]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	68b9      	ldr	r1, [r7, #8]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f000 f95f 	bl	8007e8e <HAL_SPI_TransmitReceive>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	e158      	b.n	8007e86 <HAL_SPI_Receive+0x2f6>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_SPI_Receive+0x52>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e151      	b.n	8007e86 <HAL_SPI_Receive+0x2f6>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bea:	f7fc fcb3 	bl	8004554 <HAL_GetTick>
 8007bee:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d002      	beq.n	8007c02 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c00:	e138      	b.n	8007e74 <HAL_SPI_Receive+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <HAL_SPI_Receive+0x7e>
 8007c08:	88fb      	ldrh	r3, [r7, #6]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007c12:	e12f      	b.n	8007e74 <HAL_SPI_Receive+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2204      	movs	r2, #4
 8007c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	88fa      	ldrh	r2, [r7, #6]
 8007c2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	88fa      	ldrh	r2, [r7, #6]
 8007c32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5a:	d116      	bne.n	8007c8a <HAL_SPI_Receive+0xfa>
  {
    SPI_RESET_CRC(hspi);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c7a:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c92:	d107      	bne.n	8007ca4 <HAL_SPI_Receive+0x114>
  {
    SPI_1LINE_RX(hspi);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ca2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cae:	2b40      	cmp	r3, #64	; 0x40
 8007cb0:	d007      	beq.n	8007cc2 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cc0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d162      	bne.n	8007d90 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007cca:	e02e      	b.n	8007d2a <HAL_SPI_Receive+0x19a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d115      	bne.n	8007d06 <HAL_SPI_Receive+0x176>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f103 020c 	add.w	r2, r3, #12
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	7812      	ldrb	r2, [r2, #0]
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	b29a      	uxth	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d04:	e011      	b.n	8007d2a <HAL_SPI_Receive+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d06:	f7fc fc25 	bl	8004554 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d803      	bhi.n	8007d1e <HAL_SPI_Receive+0x18e>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d1c:	d102      	bne.n	8007d24 <HAL_SPI_Receive+0x194>
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d102      	bne.n	8007d2a <HAL_SPI_Receive+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d28:	e0a4      	b.n	8007e74 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1cb      	bne.n	8007ccc <HAL_SPI_Receive+0x13c>
 8007d34:	e031      	b.n	8007d9a <HAL_SPI_Receive+0x20a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d113      	bne.n	8007d6c <HAL_SPI_Receive+0x1dc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68da      	ldr	r2, [r3, #12]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4e:	b292      	uxth	r2, r2
 8007d50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	1c9a      	adds	r2, r3, #2
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d6a:	e011      	b.n	8007d90 <HAL_SPI_Receive+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d6c:	f7fc fbf2 	bl	8004554 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d803      	bhi.n	8007d84 <HAL_SPI_Receive+0x1f4>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d82:	d102      	bne.n	8007d8a <HAL_SPI_Receive+0x1fa>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <HAL_SPI_Receive+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007d8e:	e071      	b.n	8007e74 <HAL_SPI_Receive+0x2e4>
    while (hspi->RxXferCount > 0U)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1cd      	bne.n	8007d36 <HAL_SPI_Receive+0x1a6>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da2:	d142      	bne.n	8007e2a <HAL_SPI_Receive+0x29a>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007db2:	601a      	str	r2, [r3, #0]

    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 fa81 	bl	80082c6 <SPI_WaitFlagStateUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_SPI_Receive+0x240>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	75fb      	strb	r3, [r7, #23]
      goto error;
 8007dce:	e051      	b.n	8007e74 <HAL_SPI_Receive+0x2e4>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dd8:	d107      	bne.n	8007dea <HAL_SPI_Receive+0x25a>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68da      	ldr	r2, [r3, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	b292      	uxth	r2, r2
 8007de6:	801a      	strh	r2, [r3, #0]
 8007de8:	e008      	b.n	8007dfc <HAL_SPI_Receive+0x26c>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f103 020c 	add.w	r2, r3, #12
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	7812      	ldrb	r2, [r2, #0]
 8007df8:	b2d2      	uxtb	r2, r2
 8007dfa:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	2201      	movs	r2, #1
 8007e04:	2101      	movs	r1, #1
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f000 fa5d 	bl	80082c6 <SPI_WaitFlagStateUntilTimeout>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d008      	beq.n	8007e24 <HAL_SPI_Receive+0x294>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e16:	f043 0202 	orr.w	r2, r3, #2
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	75fb      	strb	r3, [r7, #23]
      goto error;
 8007e22:	e027      	b.n	8007e74 <HAL_SPI_Receive+0x2e4>
    }

    /* Read CRC to Flush DR and RXNE flag */
    READ_REG(hspi->Instance->DR);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	68db      	ldr	r3, [r3, #12]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	6839      	ldr	r1, [r7, #0]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 fab3 	bl	800839a <SPI_EndRxTransaction>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d002      	beq.n	8007e40 <HAL_SPI_Receive+0x2b0>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 0310 	and.w	r3, r3, #16
 8007e4a:	2b10      	cmp	r3, #16
 8007e4c:	d10a      	bne.n	8007e64 <HAL_SPI_Receive+0x2d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e52:	f043 0202 	orr.w	r2, r3, #2
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007e62:	609a      	str	r2, [r3, #8]
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d002      	beq.n	8007e72 <HAL_SPI_Receive+0x2e2>
  {
    errorcode = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	75fb      	strb	r3, [r7, #23]
 8007e70:	e000      	b.n	8007e74 <HAL_SPI_Receive+0x2e4>
  }

error :
 8007e72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b08e      	sub	sp, #56	; 0x38
 8007e92:	af02      	add	r7, sp, #8
 8007e94:	60f8      	str	r0, [r7, #12]
 8007e96:	60b9      	str	r1, [r7, #8]
 8007e98:	607a      	str	r2, [r7, #4]
 8007e9a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_SPI_TransmitReceive+0x26>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e1f6      	b.n	80082a2 <HAL_SPI_TransmitReceive+0x414>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ebc:	f7fc fb4a 	bl	8004554 <HAL_GetTick>
 8007ec0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007ed2:	887b      	ldrh	r3, [r7, #2]
 8007ed4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d00f      	beq.n	8007efe <HAL_SPI_TransmitReceive+0x70>
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007ee4:	d107      	bne.n	8007ef6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d103      	bne.n	8007ef6 <HAL_SPI_TransmitReceive+0x68>
 8007eee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ef2:	2b04      	cmp	r3, #4
 8007ef4:	d003      	beq.n	8007efe <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007ef6:	2302      	movs	r3, #2
 8007ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007efc:	e1c7      	b.n	800828e <HAL_SPI_TransmitReceive+0x400>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <HAL_SPI_TransmitReceive+0x82>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <HAL_SPI_TransmitReceive+0x82>
 8007f0a:	887b      	ldrh	r3, [r7, #2]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d103      	bne.n	8007f18 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007f16:	e1ba      	b.n	800828e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b04      	cmp	r3, #4
 8007f22:	d003      	beq.n	8007f2c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2205      	movs	r2, #5
 8007f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	887a      	ldrh	r2, [r7, #2]
 8007f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	887a      	ldrh	r2, [r7, #2]
 8007f42:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	887a      	ldrh	r2, [r7, #2]
 8007f4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	887a      	ldrh	r2, [r7, #2]
 8007f54:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f6a:	d10f      	bne.n	8007f8c <HAL_SPI_TransmitReceive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f8a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f96:	2b40      	cmp	r3, #64	; 0x40
 8007f98:	d007      	beq.n	8007faa <HAL_SPI_TransmitReceive+0x11c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fb2:	f040 808b 	bne.w	80080cc <HAL_SPI_TransmitReceive+0x23e>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <HAL_SPI_TransmitReceive+0x136>
 8007fbe:	8b7b      	ldrh	r3, [r7, #26]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d178      	bne.n	80080b6 <HAL_SPI_TransmitReceive+0x228>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc8:	881a      	ldrh	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd4:	1c9a      	adds	r2, r3, #2
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	b29a      	uxth	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fe8:	e065      	b.n	80080b6 <HAL_SPI_TransmitReceive+0x228>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d12d      	bne.n	8008054 <HAL_SPI_TransmitReceive+0x1c6>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d028      	beq.n	8008054 <HAL_SPI_TransmitReceive+0x1c6>
 8008002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008004:	2b01      	cmp	r3, #1
 8008006:	d125      	bne.n	8008054 <HAL_SPI_TransmitReceive+0x1c6>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800c:	881a      	ldrh	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008018:	1c9a      	adds	r2, r3, #2
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800802c:	2300      	movs	r3, #0
 800802e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10c      	bne.n	8008054 <HAL_SPI_TransmitReceive+0x1c6>
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800803e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008042:	d107      	bne.n	8008054 <HAL_SPI_TransmitReceive+0x1c6>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008052:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f003 0301 	and.w	r3, r3, #1
 800805e:	2b01      	cmp	r3, #1
 8008060:	d119      	bne.n	8008096 <HAL_SPI_TransmitReceive+0x208>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008066:	b29b      	uxth	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d014      	beq.n	8008096 <HAL_SPI_TransmitReceive+0x208>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008076:	b292      	uxth	r2, r2
 8008078:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807e:	1c9a      	adds	r2, r3, #2
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008092:	2301      	movs	r3, #1
 8008094:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008096:	f7fc fa5d 	bl	8004554 <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d807      	bhi.n	80080b6 <HAL_SPI_TransmitReceive+0x228>
 80080a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ac:	d003      	beq.n	80080b6 <HAL_SPI_TransmitReceive+0x228>
      {
        errorcode = HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80080b4:	e0eb      	b.n	800828e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d194      	bne.n	8007fea <HAL_SPI_TransmitReceive+0x15c>
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d18f      	bne.n	8007fea <HAL_SPI_TransmitReceive+0x15c>
 80080ca:	e08e      	b.n	80081ea <HAL_SPI_TransmitReceive+0x35c>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <HAL_SPI_TransmitReceive+0x24c>
 80080d4:	8b7b      	ldrh	r3, [r7, #26]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d17d      	bne.n	80081d6 <HAL_SPI_TransmitReceive+0x348>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	330c      	adds	r3, #12
 80080e4:	7812      	ldrb	r2, [r2, #0]
 80080e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008100:	e069      	b.n	80081d6 <HAL_SPI_TransmitReceive+0x348>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b02      	cmp	r3, #2
 800810e:	d12e      	bne.n	800816e <HAL_SPI_TransmitReceive+0x2e0>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008114:	b29b      	uxth	r3, r3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d029      	beq.n	800816e <HAL_SPI_TransmitReceive+0x2e0>
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	2b01      	cmp	r3, #1
 800811e:	d126      	bne.n	800816e <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330c      	adds	r3, #12
 800812a:	7812      	ldrb	r2, [r2, #0]
 800812c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800814e:	b29b      	uxth	r3, r3
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10c      	bne.n	800816e <HAL_SPI_TransmitReceive+0x2e0>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800815c:	d107      	bne.n	800816e <HAL_SPI_TransmitReceive+0x2e0>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800816c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f003 0301 	and.w	r3, r3, #1
 8008178:	2b01      	cmp	r3, #1
 800817a:	d119      	bne.n	80081b0 <HAL_SPI_TransmitReceive+0x322>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008180:	b29b      	uxth	r3, r3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d014      	beq.n	80081b0 <HAL_SPI_TransmitReceive+0x322>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	68da      	ldr	r2, [r3, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80081ac:	2301      	movs	r3, #1
 80081ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80081b0:	f7fc f9d0 	bl	8004554 <HAL_GetTick>
 80081b4:	4602      	mov	r2, r0
 80081b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b8:	1ad3      	subs	r3, r2, r3
 80081ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081bc:	429a      	cmp	r2, r3
 80081be:	d803      	bhi.n	80081c8 <HAL_SPI_TransmitReceive+0x33a>
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081c6:	d102      	bne.n	80081ce <HAL_SPI_TransmitReceive+0x340>
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d103      	bne.n	80081d6 <HAL_SPI_TransmitReceive+0x348>
      {
        errorcode = HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80081d4:	e05b      	b.n	800828e <HAL_SPI_TransmitReceive+0x400>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d190      	bne.n	8008102 <HAL_SPI_TransmitReceive+0x274>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d18b      	bne.n	8008102 <HAL_SPI_TransmitReceive+0x274>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081f2:	d117      	bne.n	8008224 <HAL_SPI_TransmitReceive+0x396>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80081f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fa:	2201      	movs	r2, #1
 80081fc:	2101      	movs	r1, #1
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 f861 	bl	80082c6 <SPI_WaitFlagStateUntilTimeout>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d009      	beq.n	800821e <HAL_SPI_TransmitReceive+0x390>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820e:	f043 0202 	orr.w	r2, r3, #2
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 800821c:	e037      	b.n	800828e <HAL_SPI_TransmitReceive+0x400>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f003 0310 	and.w	r3, r3, #16
 800822e:	2b10      	cmp	r3, #16
 8008230:	d10d      	bne.n	800824e <HAL_SPI_TransmitReceive+0x3c0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008236:	f043 0202 	orr.w	r2, r3, #2
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008246:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800824e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008250:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 f906 	bl	8008464 <SPI_EndRxTxTransaction>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d006      	beq.n	800826c <HAL_SPI_TransmitReceive+0x3de>
  {
    errorcode = HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2220      	movs	r2, #32
 8008268:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800826a:	e010      	b.n	800828e <HAL_SPI_TransmitReceive+0x400>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <HAL_SPI_TransmitReceive+0x3fe>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	e000      	b.n	800828e <HAL_SPI_TransmitReceive+0x400>
  }

error :
 800828c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800829e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3730      	adds	r7, #48	; 0x30
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}

080082aa <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b083      	sub	sp, #12
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082b8:	b2db      	uxtb	r3, r3
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr

080082c6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b084      	sub	sp, #16
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	60b9      	str	r1, [r7, #8]
 80082d0:	603b      	str	r3, [r7, #0]
 80082d2:	4613      	mov	r3, r2
 80082d4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082d6:	e04c      	b.n	8008372 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082de:	d048      	beq.n	8008372 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80082e0:	f7fc f938 	bl	8004554 <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	69bb      	ldr	r3, [r7, #24]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d902      	bls.n	80082f6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d13d      	bne.n	8008372 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008304:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800830e:	d111      	bne.n	8008334 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008318:	d004      	beq.n	8008324 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008322:	d107      	bne.n	8008334 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008332:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800833c:	d10f      	bne.n	800835e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800835c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e00f      	b.n	8008392 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	689a      	ldr	r2, [r3, #8]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4013      	ands	r3, r2
 800837c:	68ba      	ldr	r2, [r7, #8]
 800837e:	429a      	cmp	r2, r3
 8008380:	bf0c      	ite	eq
 8008382:	2301      	moveq	r3, #1
 8008384:	2300      	movne	r3, #0
 8008386:	b2db      	uxtb	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	429a      	cmp	r2, r3
 800838e:	d1a3      	bne.n	80082d8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b086      	sub	sp, #24
 800839e:	af02      	add	r7, sp, #8
 80083a0:	60f8      	str	r0, [r7, #12]
 80083a2:	60b9      	str	r1, [r7, #8]
 80083a4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083ae:	d111      	bne.n	80083d4 <SPI_EndRxTransaction+0x3a>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b8:	d004      	beq.n	80083c4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083c2:	d107      	bne.n	80083d4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083d2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083dc:	d12a      	bne.n	8008434 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083e6:	d012      	beq.n	800840e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2200      	movs	r2, #0
 80083f0:	2180      	movs	r1, #128	; 0x80
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f7ff ff67 	bl	80082c6 <SPI_WaitFlagStateUntilTimeout>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d02d      	beq.n	800845a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008402:	f043 0220 	orr.w	r2, r3, #32
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800840a:	2303      	movs	r3, #3
 800840c:	e026      	b.n	800845c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	2200      	movs	r2, #0
 8008416:	2101      	movs	r1, #1
 8008418:	68f8      	ldr	r0, [r7, #12]
 800841a:	f7ff ff54 	bl	80082c6 <SPI_WaitFlagStateUntilTimeout>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01a      	beq.n	800845a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008428:	f043 0220 	orr.w	r2, r3, #32
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008430:	2303      	movs	r3, #3
 8008432:	e013      	b.n	800845c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	2200      	movs	r2, #0
 800843c:	2101      	movs	r1, #1
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f7ff ff41 	bl	80082c6 <SPI_WaitFlagStateUntilTimeout>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800844e:	f043 0220 	orr.w	r2, r3, #32
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e000      	b.n	800845c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af02      	add	r7, sp, #8
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008470:	4b1b      	ldr	r3, [pc, #108]	; (80084e0 <SPI_EndRxTxTransaction+0x7c>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a1b      	ldr	r2, [pc, #108]	; (80084e4 <SPI_EndRxTxTransaction+0x80>)
 8008476:	fba2 2303 	umull	r2, r3, r2, r3
 800847a:	0d5b      	lsrs	r3, r3, #21
 800847c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008480:	fb02 f303 	mul.w	r3, r2, r3
 8008484:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800848e:	d112      	bne.n	80084b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2200      	movs	r2, #0
 8008498:	2180      	movs	r1, #128	; 0x80
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7ff ff13 	bl	80082c6 <SPI_WaitFlagStateUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d016      	beq.n	80084d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084aa:	f043 0220 	orr.w	r2, r3, #32
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e00f      	b.n	80084d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	3b01      	subs	r3, #1
 80084c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084cc:	2b80      	cmp	r3, #128	; 0x80
 80084ce:	d0f2      	beq.n	80084b6 <SPI_EndRxTxTransaction+0x52>
 80084d0:	e000      	b.n	80084d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80084d2:	bf00      	nop
  }

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200000f8 	.word	0x200000f8
 80084e4:	165e9f81 	.word	0x165e9f81

080084e8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80084f6:	2300      	movs	r3, #0
 80084f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d029      	beq.n	8008556 <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800850e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008512:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800851c:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8008522:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 8008528:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 800852e:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8008534:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800853a:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8008540:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8008546:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68fa      	ldr	r2, [r7, #12]
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	e034      	b.n	80085c0 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008562:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800856c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8008572:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008586:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800858a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8008594:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 800859a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80085a0:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80085a6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80085ac:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68fa      	ldr	r2, [r7, #12]
 80085b8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b087      	sub	sp, #28
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80085de:	2300      	movs	r3, #0
 80085e0:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d02e      	beq.n	8008646 <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80085f4:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	3b01      	subs	r3, #1
 8008602:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008604:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	3b01      	subs	r3, #1
 800860c:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 800860e:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	3b01      	subs	r3, #1
 8008616:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8008618:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	3b01      	subs	r3, #1
 8008620:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008622:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	695b      	ldr	r3, [r3, #20]
 8008628:	3b01      	subs	r3, #1
 800862a:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800862c:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	3b01      	subs	r3, #1
 8008634:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8008636:	4313      	orrs	r3, r2
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	4313      	orrs	r3, r2
 800863c:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	609a      	str	r2, [r3, #8]
 8008644:	e03b      	b.n	80086be <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008652:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008656:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	3b01      	subs	r3, #1
 800865e:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	3b01      	subs	r3, #1
 8008666:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8008668:	4313      	orrs	r3, r2
 800866a:	697a      	ldr	r2, [r7, #20]
 800866c:	4313      	orrs	r3, r2
 800866e:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800867c:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	3b01      	subs	r3, #1
 800868a:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800868c:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	3b01      	subs	r3, #1
 8008694:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8008696:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	691b      	ldr	r3, [r3, #16]
 800869c:	3b01      	subs	r3, #1
 800869e:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 80086a0:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	3b01      	subs	r3, #1
 80086a8:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80086aa:	4313      	orrs	r3, r2
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	371c      	adds	r7, #28
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 80086d8:	2300      	movs	r3, #0
 80086da:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 80086dc:	2300      	movs	r3, #0
 80086de:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80086e8:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 80086f2:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80086fa:	4313      	orrs	r3, r2
 80086fc:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008704:	f7fb ff26 	bl	8004554 <HAL_GetTick>
 8008708:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800870a:	e010      	b.n	800872e <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008712:	d00c      	beq.n	800872e <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d007      	beq.n	800872a <FMC_SDRAM_SendCommand+0x5e>
 800871a:	f7fb ff1b 	bl	8004554 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	429a      	cmp	r2, r3
 8008728:	d201      	bcs.n	800872e <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e006      	b.n	800873c <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	f003 0320 	and.w	r3, r3, #32
 8008736:	2b20      	cmp	r3, #32
 8008738:	d0e8      	beq.n	800870c <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	695a      	ldr	r2, [r3, #20]
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	431a      	orrs	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
	...

0800876c <__libc_init_array>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4d0d      	ldr	r5, [pc, #52]	; (80087a4 <__libc_init_array+0x38>)
 8008770:	4c0d      	ldr	r4, [pc, #52]	; (80087a8 <__libc_init_array+0x3c>)
 8008772:	1b64      	subs	r4, r4, r5
 8008774:	10a4      	asrs	r4, r4, #2
 8008776:	2600      	movs	r6, #0
 8008778:	42a6      	cmp	r6, r4
 800877a:	d109      	bne.n	8008790 <__libc_init_array+0x24>
 800877c:	4d0b      	ldr	r5, [pc, #44]	; (80087ac <__libc_init_array+0x40>)
 800877e:	4c0c      	ldr	r4, [pc, #48]	; (80087b0 <__libc_init_array+0x44>)
 8008780:	f001 fbfc 	bl	8009f7c <_init>
 8008784:	1b64      	subs	r4, r4, r5
 8008786:	10a4      	asrs	r4, r4, #2
 8008788:	2600      	movs	r6, #0
 800878a:	42a6      	cmp	r6, r4
 800878c:	d105      	bne.n	800879a <__libc_init_array+0x2e>
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	f855 3b04 	ldr.w	r3, [r5], #4
 8008794:	4798      	blx	r3
 8008796:	3601      	adds	r6, #1
 8008798:	e7ee      	b.n	8008778 <__libc_init_array+0xc>
 800879a:	f855 3b04 	ldr.w	r3, [r5], #4
 800879e:	4798      	blx	r3
 80087a0:	3601      	adds	r6, #1
 80087a2:	e7f2      	b.n	800878a <__libc_init_array+0x1e>
 80087a4:	0800cf18 	.word	0x0800cf18
 80087a8:	0800cf18 	.word	0x0800cf18
 80087ac:	0800cf18 	.word	0x0800cf18
 80087b0:	0800cf1c 	.word	0x0800cf1c

080087b4 <memset>:
 80087b4:	4402      	add	r2, r0
 80087b6:	4603      	mov	r3, r0
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d100      	bne.n	80087be <memset+0xa>
 80087bc:	4770      	bx	lr
 80087be:	f803 1b01 	strb.w	r1, [r3], #1
 80087c2:	e7f9      	b.n	80087b8 <memset+0x4>

080087c4 <sniprintf>:
 80087c4:	b40c      	push	{r2, r3}
 80087c6:	b530      	push	{r4, r5, lr}
 80087c8:	4b17      	ldr	r3, [pc, #92]	; (8008828 <sniprintf+0x64>)
 80087ca:	1e0c      	subs	r4, r1, #0
 80087cc:	681d      	ldr	r5, [r3, #0]
 80087ce:	b09d      	sub	sp, #116	; 0x74
 80087d0:	da08      	bge.n	80087e4 <sniprintf+0x20>
 80087d2:	238b      	movs	r3, #139	; 0x8b
 80087d4:	602b      	str	r3, [r5, #0]
 80087d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087da:	b01d      	add	sp, #116	; 0x74
 80087dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087e0:	b002      	add	sp, #8
 80087e2:	4770      	bx	lr
 80087e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80087e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80087ec:	bf14      	ite	ne
 80087ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80087f2:	4623      	moveq	r3, r4
 80087f4:	9304      	str	r3, [sp, #16]
 80087f6:	9307      	str	r3, [sp, #28]
 80087f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80087fc:	9002      	str	r0, [sp, #8]
 80087fe:	9006      	str	r0, [sp, #24]
 8008800:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008804:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008806:	ab21      	add	r3, sp, #132	; 0x84
 8008808:	a902      	add	r1, sp, #8
 800880a:	4628      	mov	r0, r5
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	f000 f869 	bl	80088e4 <_svfiprintf_r>
 8008812:	1c43      	adds	r3, r0, #1
 8008814:	bfbc      	itt	lt
 8008816:	238b      	movlt	r3, #139	; 0x8b
 8008818:	602b      	strlt	r3, [r5, #0]
 800881a:	2c00      	cmp	r4, #0
 800881c:	d0dd      	beq.n	80087da <sniprintf+0x16>
 800881e:	9b02      	ldr	r3, [sp, #8]
 8008820:	2200      	movs	r2, #0
 8008822:	701a      	strb	r2, [r3, #0]
 8008824:	e7d9      	b.n	80087da <sniprintf+0x16>
 8008826:	bf00      	nop
 8008828:	20000190 	.word	0x20000190

0800882c <__ssputs_r>:
 800882c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008830:	688e      	ldr	r6, [r1, #8]
 8008832:	429e      	cmp	r6, r3
 8008834:	4682      	mov	sl, r0
 8008836:	460c      	mov	r4, r1
 8008838:	4690      	mov	r8, r2
 800883a:	461f      	mov	r7, r3
 800883c:	d838      	bhi.n	80088b0 <__ssputs_r+0x84>
 800883e:	898a      	ldrh	r2, [r1, #12]
 8008840:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008844:	d032      	beq.n	80088ac <__ssputs_r+0x80>
 8008846:	6825      	ldr	r5, [r4, #0]
 8008848:	6909      	ldr	r1, [r1, #16]
 800884a:	eba5 0901 	sub.w	r9, r5, r1
 800884e:	6965      	ldr	r5, [r4, #20]
 8008850:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008858:	3301      	adds	r3, #1
 800885a:	444b      	add	r3, r9
 800885c:	106d      	asrs	r5, r5, #1
 800885e:	429d      	cmp	r5, r3
 8008860:	bf38      	it	cc
 8008862:	461d      	movcc	r5, r3
 8008864:	0553      	lsls	r3, r2, #21
 8008866:	d531      	bpl.n	80088cc <__ssputs_r+0xa0>
 8008868:	4629      	mov	r1, r5
 800886a:	f000 fb63 	bl	8008f34 <_malloc_r>
 800886e:	4606      	mov	r6, r0
 8008870:	b950      	cbnz	r0, 8008888 <__ssputs_r+0x5c>
 8008872:	230c      	movs	r3, #12
 8008874:	f8ca 3000 	str.w	r3, [sl]
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800887e:	81a3      	strh	r3, [r4, #12]
 8008880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008888:	6921      	ldr	r1, [r4, #16]
 800888a:	464a      	mov	r2, r9
 800888c:	f000 fabe 	bl	8008e0c <memcpy>
 8008890:	89a3      	ldrh	r3, [r4, #12]
 8008892:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800889a:	81a3      	strh	r3, [r4, #12]
 800889c:	6126      	str	r6, [r4, #16]
 800889e:	6165      	str	r5, [r4, #20]
 80088a0:	444e      	add	r6, r9
 80088a2:	eba5 0509 	sub.w	r5, r5, r9
 80088a6:	6026      	str	r6, [r4, #0]
 80088a8:	60a5      	str	r5, [r4, #8]
 80088aa:	463e      	mov	r6, r7
 80088ac:	42be      	cmp	r6, r7
 80088ae:	d900      	bls.n	80088b2 <__ssputs_r+0x86>
 80088b0:	463e      	mov	r6, r7
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	4632      	mov	r2, r6
 80088b6:	4641      	mov	r1, r8
 80088b8:	f000 fab6 	bl	8008e28 <memmove>
 80088bc:	68a3      	ldr	r3, [r4, #8]
 80088be:	1b9b      	subs	r3, r3, r6
 80088c0:	60a3      	str	r3, [r4, #8]
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	4433      	add	r3, r6
 80088c6:	6023      	str	r3, [r4, #0]
 80088c8:	2000      	movs	r0, #0
 80088ca:	e7db      	b.n	8008884 <__ssputs_r+0x58>
 80088cc:	462a      	mov	r2, r5
 80088ce:	f000 fba5 	bl	800901c <_realloc_r>
 80088d2:	4606      	mov	r6, r0
 80088d4:	2800      	cmp	r0, #0
 80088d6:	d1e1      	bne.n	800889c <__ssputs_r+0x70>
 80088d8:	6921      	ldr	r1, [r4, #16]
 80088da:	4650      	mov	r0, sl
 80088dc:	f000 fabe 	bl	8008e5c <_free_r>
 80088e0:	e7c7      	b.n	8008872 <__ssputs_r+0x46>
	...

080088e4 <_svfiprintf_r>:
 80088e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e8:	4698      	mov	r8, r3
 80088ea:	898b      	ldrh	r3, [r1, #12]
 80088ec:	061b      	lsls	r3, r3, #24
 80088ee:	b09d      	sub	sp, #116	; 0x74
 80088f0:	4607      	mov	r7, r0
 80088f2:	460d      	mov	r5, r1
 80088f4:	4614      	mov	r4, r2
 80088f6:	d50e      	bpl.n	8008916 <_svfiprintf_r+0x32>
 80088f8:	690b      	ldr	r3, [r1, #16]
 80088fa:	b963      	cbnz	r3, 8008916 <_svfiprintf_r+0x32>
 80088fc:	2140      	movs	r1, #64	; 0x40
 80088fe:	f000 fb19 	bl	8008f34 <_malloc_r>
 8008902:	6028      	str	r0, [r5, #0]
 8008904:	6128      	str	r0, [r5, #16]
 8008906:	b920      	cbnz	r0, 8008912 <_svfiprintf_r+0x2e>
 8008908:	230c      	movs	r3, #12
 800890a:	603b      	str	r3, [r7, #0]
 800890c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008910:	e0d1      	b.n	8008ab6 <_svfiprintf_r+0x1d2>
 8008912:	2340      	movs	r3, #64	; 0x40
 8008914:	616b      	str	r3, [r5, #20]
 8008916:	2300      	movs	r3, #0
 8008918:	9309      	str	r3, [sp, #36]	; 0x24
 800891a:	2320      	movs	r3, #32
 800891c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008920:	f8cd 800c 	str.w	r8, [sp, #12]
 8008924:	2330      	movs	r3, #48	; 0x30
 8008926:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ad0 <_svfiprintf_r+0x1ec>
 800892a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800892e:	f04f 0901 	mov.w	r9, #1
 8008932:	4623      	mov	r3, r4
 8008934:	469a      	mov	sl, r3
 8008936:	f813 2b01 	ldrb.w	r2, [r3], #1
 800893a:	b10a      	cbz	r2, 8008940 <_svfiprintf_r+0x5c>
 800893c:	2a25      	cmp	r2, #37	; 0x25
 800893e:	d1f9      	bne.n	8008934 <_svfiprintf_r+0x50>
 8008940:	ebba 0b04 	subs.w	fp, sl, r4
 8008944:	d00b      	beq.n	800895e <_svfiprintf_r+0x7a>
 8008946:	465b      	mov	r3, fp
 8008948:	4622      	mov	r2, r4
 800894a:	4629      	mov	r1, r5
 800894c:	4638      	mov	r0, r7
 800894e:	f7ff ff6d 	bl	800882c <__ssputs_r>
 8008952:	3001      	adds	r0, #1
 8008954:	f000 80aa 	beq.w	8008aac <_svfiprintf_r+0x1c8>
 8008958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800895a:	445a      	add	r2, fp
 800895c:	9209      	str	r2, [sp, #36]	; 0x24
 800895e:	f89a 3000 	ldrb.w	r3, [sl]
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 80a2 	beq.w	8008aac <_svfiprintf_r+0x1c8>
 8008968:	2300      	movs	r3, #0
 800896a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800896e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008972:	f10a 0a01 	add.w	sl, sl, #1
 8008976:	9304      	str	r3, [sp, #16]
 8008978:	9307      	str	r3, [sp, #28]
 800897a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800897e:	931a      	str	r3, [sp, #104]	; 0x68
 8008980:	4654      	mov	r4, sl
 8008982:	2205      	movs	r2, #5
 8008984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008988:	4851      	ldr	r0, [pc, #324]	; (8008ad0 <_svfiprintf_r+0x1ec>)
 800898a:	f7f7 fc31 	bl	80001f0 <memchr>
 800898e:	9a04      	ldr	r2, [sp, #16]
 8008990:	b9d8      	cbnz	r0, 80089ca <_svfiprintf_r+0xe6>
 8008992:	06d0      	lsls	r0, r2, #27
 8008994:	bf44      	itt	mi
 8008996:	2320      	movmi	r3, #32
 8008998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800899c:	0711      	lsls	r1, r2, #28
 800899e:	bf44      	itt	mi
 80089a0:	232b      	movmi	r3, #43	; 0x2b
 80089a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80089a6:	f89a 3000 	ldrb.w	r3, [sl]
 80089aa:	2b2a      	cmp	r3, #42	; 0x2a
 80089ac:	d015      	beq.n	80089da <_svfiprintf_r+0xf6>
 80089ae:	9a07      	ldr	r2, [sp, #28]
 80089b0:	4654      	mov	r4, sl
 80089b2:	2000      	movs	r0, #0
 80089b4:	f04f 0c0a 	mov.w	ip, #10
 80089b8:	4621      	mov	r1, r4
 80089ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089be:	3b30      	subs	r3, #48	; 0x30
 80089c0:	2b09      	cmp	r3, #9
 80089c2:	d94e      	bls.n	8008a62 <_svfiprintf_r+0x17e>
 80089c4:	b1b0      	cbz	r0, 80089f4 <_svfiprintf_r+0x110>
 80089c6:	9207      	str	r2, [sp, #28]
 80089c8:	e014      	b.n	80089f4 <_svfiprintf_r+0x110>
 80089ca:	eba0 0308 	sub.w	r3, r0, r8
 80089ce:	fa09 f303 	lsl.w	r3, r9, r3
 80089d2:	4313      	orrs	r3, r2
 80089d4:	9304      	str	r3, [sp, #16]
 80089d6:	46a2      	mov	sl, r4
 80089d8:	e7d2      	b.n	8008980 <_svfiprintf_r+0x9c>
 80089da:	9b03      	ldr	r3, [sp, #12]
 80089dc:	1d19      	adds	r1, r3, #4
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	9103      	str	r1, [sp, #12]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	bfbb      	ittet	lt
 80089e6:	425b      	neglt	r3, r3
 80089e8:	f042 0202 	orrlt.w	r2, r2, #2
 80089ec:	9307      	strge	r3, [sp, #28]
 80089ee:	9307      	strlt	r3, [sp, #28]
 80089f0:	bfb8      	it	lt
 80089f2:	9204      	strlt	r2, [sp, #16]
 80089f4:	7823      	ldrb	r3, [r4, #0]
 80089f6:	2b2e      	cmp	r3, #46	; 0x2e
 80089f8:	d10c      	bne.n	8008a14 <_svfiprintf_r+0x130>
 80089fa:	7863      	ldrb	r3, [r4, #1]
 80089fc:	2b2a      	cmp	r3, #42	; 0x2a
 80089fe:	d135      	bne.n	8008a6c <_svfiprintf_r+0x188>
 8008a00:	9b03      	ldr	r3, [sp, #12]
 8008a02:	1d1a      	adds	r2, r3, #4
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	9203      	str	r2, [sp, #12]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	bfb8      	it	lt
 8008a0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008a10:	3402      	adds	r4, #2
 8008a12:	9305      	str	r3, [sp, #20]
 8008a14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ae0 <_svfiprintf_r+0x1fc>
 8008a18:	7821      	ldrb	r1, [r4, #0]
 8008a1a:	2203      	movs	r2, #3
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	f7f7 fbe7 	bl	80001f0 <memchr>
 8008a22:	b140      	cbz	r0, 8008a36 <_svfiprintf_r+0x152>
 8008a24:	2340      	movs	r3, #64	; 0x40
 8008a26:	eba0 000a 	sub.w	r0, r0, sl
 8008a2a:	fa03 f000 	lsl.w	r0, r3, r0
 8008a2e:	9b04      	ldr	r3, [sp, #16]
 8008a30:	4303      	orrs	r3, r0
 8008a32:	3401      	adds	r4, #1
 8008a34:	9304      	str	r3, [sp, #16]
 8008a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a3a:	4826      	ldr	r0, [pc, #152]	; (8008ad4 <_svfiprintf_r+0x1f0>)
 8008a3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a40:	2206      	movs	r2, #6
 8008a42:	f7f7 fbd5 	bl	80001f0 <memchr>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d038      	beq.n	8008abc <_svfiprintf_r+0x1d8>
 8008a4a:	4b23      	ldr	r3, [pc, #140]	; (8008ad8 <_svfiprintf_r+0x1f4>)
 8008a4c:	bb1b      	cbnz	r3, 8008a96 <_svfiprintf_r+0x1b2>
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	3307      	adds	r3, #7
 8008a52:	f023 0307 	bic.w	r3, r3, #7
 8008a56:	3308      	adds	r3, #8
 8008a58:	9303      	str	r3, [sp, #12]
 8008a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a5c:	4433      	add	r3, r6
 8008a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008a60:	e767      	b.n	8008932 <_svfiprintf_r+0x4e>
 8008a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a66:	460c      	mov	r4, r1
 8008a68:	2001      	movs	r0, #1
 8008a6a:	e7a5      	b.n	80089b8 <_svfiprintf_r+0xd4>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	3401      	adds	r4, #1
 8008a70:	9305      	str	r3, [sp, #20]
 8008a72:	4619      	mov	r1, r3
 8008a74:	f04f 0c0a 	mov.w	ip, #10
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a7e:	3a30      	subs	r2, #48	; 0x30
 8008a80:	2a09      	cmp	r2, #9
 8008a82:	d903      	bls.n	8008a8c <_svfiprintf_r+0x1a8>
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d0c5      	beq.n	8008a14 <_svfiprintf_r+0x130>
 8008a88:	9105      	str	r1, [sp, #20]
 8008a8a:	e7c3      	b.n	8008a14 <_svfiprintf_r+0x130>
 8008a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a90:	4604      	mov	r4, r0
 8008a92:	2301      	movs	r3, #1
 8008a94:	e7f0      	b.n	8008a78 <_svfiprintf_r+0x194>
 8008a96:	ab03      	add	r3, sp, #12
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	462a      	mov	r2, r5
 8008a9c:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <_svfiprintf_r+0x1f8>)
 8008a9e:	a904      	add	r1, sp, #16
 8008aa0:	4638      	mov	r0, r7
 8008aa2:	f3af 8000 	nop.w
 8008aa6:	1c42      	adds	r2, r0, #1
 8008aa8:	4606      	mov	r6, r0
 8008aaa:	d1d6      	bne.n	8008a5a <_svfiprintf_r+0x176>
 8008aac:	89ab      	ldrh	r3, [r5, #12]
 8008aae:	065b      	lsls	r3, r3, #25
 8008ab0:	f53f af2c 	bmi.w	800890c <_svfiprintf_r+0x28>
 8008ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ab6:	b01d      	add	sp, #116	; 0x74
 8008ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008abc:	ab03      	add	r3, sp, #12
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	462a      	mov	r2, r5
 8008ac2:	4b06      	ldr	r3, [pc, #24]	; (8008adc <_svfiprintf_r+0x1f8>)
 8008ac4:	a904      	add	r1, sp, #16
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	f000 f87a 	bl	8008bc0 <_printf_i>
 8008acc:	e7eb      	b.n	8008aa6 <_svfiprintf_r+0x1c2>
 8008ace:	bf00      	nop
 8008ad0:	0800cea8 	.word	0x0800cea8
 8008ad4:	0800ceb2 	.word	0x0800ceb2
 8008ad8:	00000000 	.word	0x00000000
 8008adc:	0800882d 	.word	0x0800882d
 8008ae0:	0800ceae 	.word	0x0800ceae

08008ae4 <_printf_common>:
 8008ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae8:	4616      	mov	r6, r2
 8008aea:	4699      	mov	r9, r3
 8008aec:	688a      	ldr	r2, [r1, #8]
 8008aee:	690b      	ldr	r3, [r1, #16]
 8008af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008af4:	4293      	cmp	r3, r2
 8008af6:	bfb8      	it	lt
 8008af8:	4613      	movlt	r3, r2
 8008afa:	6033      	str	r3, [r6, #0]
 8008afc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b00:	4607      	mov	r7, r0
 8008b02:	460c      	mov	r4, r1
 8008b04:	b10a      	cbz	r2, 8008b0a <_printf_common+0x26>
 8008b06:	3301      	adds	r3, #1
 8008b08:	6033      	str	r3, [r6, #0]
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	0699      	lsls	r1, r3, #26
 8008b0e:	bf42      	ittt	mi
 8008b10:	6833      	ldrmi	r3, [r6, #0]
 8008b12:	3302      	addmi	r3, #2
 8008b14:	6033      	strmi	r3, [r6, #0]
 8008b16:	6825      	ldr	r5, [r4, #0]
 8008b18:	f015 0506 	ands.w	r5, r5, #6
 8008b1c:	d106      	bne.n	8008b2c <_printf_common+0x48>
 8008b1e:	f104 0a19 	add.w	sl, r4, #25
 8008b22:	68e3      	ldr	r3, [r4, #12]
 8008b24:	6832      	ldr	r2, [r6, #0]
 8008b26:	1a9b      	subs	r3, r3, r2
 8008b28:	42ab      	cmp	r3, r5
 8008b2a:	dc26      	bgt.n	8008b7a <_printf_common+0x96>
 8008b2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b30:	1e13      	subs	r3, r2, #0
 8008b32:	6822      	ldr	r2, [r4, #0]
 8008b34:	bf18      	it	ne
 8008b36:	2301      	movne	r3, #1
 8008b38:	0692      	lsls	r2, r2, #26
 8008b3a:	d42b      	bmi.n	8008b94 <_printf_common+0xb0>
 8008b3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b40:	4649      	mov	r1, r9
 8008b42:	4638      	mov	r0, r7
 8008b44:	47c0      	blx	r8
 8008b46:	3001      	adds	r0, #1
 8008b48:	d01e      	beq.n	8008b88 <_printf_common+0xa4>
 8008b4a:	6823      	ldr	r3, [r4, #0]
 8008b4c:	68e5      	ldr	r5, [r4, #12]
 8008b4e:	6832      	ldr	r2, [r6, #0]
 8008b50:	f003 0306 	and.w	r3, r3, #6
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	bf08      	it	eq
 8008b58:	1aad      	subeq	r5, r5, r2
 8008b5a:	68a3      	ldr	r3, [r4, #8]
 8008b5c:	6922      	ldr	r2, [r4, #16]
 8008b5e:	bf0c      	ite	eq
 8008b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b64:	2500      	movne	r5, #0
 8008b66:	4293      	cmp	r3, r2
 8008b68:	bfc4      	itt	gt
 8008b6a:	1a9b      	subgt	r3, r3, r2
 8008b6c:	18ed      	addgt	r5, r5, r3
 8008b6e:	2600      	movs	r6, #0
 8008b70:	341a      	adds	r4, #26
 8008b72:	42b5      	cmp	r5, r6
 8008b74:	d11a      	bne.n	8008bac <_printf_common+0xc8>
 8008b76:	2000      	movs	r0, #0
 8008b78:	e008      	b.n	8008b8c <_printf_common+0xa8>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	4649      	mov	r1, r9
 8008b80:	4638      	mov	r0, r7
 8008b82:	47c0      	blx	r8
 8008b84:	3001      	adds	r0, #1
 8008b86:	d103      	bne.n	8008b90 <_printf_common+0xac>
 8008b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b90:	3501      	adds	r5, #1
 8008b92:	e7c6      	b.n	8008b22 <_printf_common+0x3e>
 8008b94:	18e1      	adds	r1, r4, r3
 8008b96:	1c5a      	adds	r2, r3, #1
 8008b98:	2030      	movs	r0, #48	; 0x30
 8008b9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b9e:	4422      	add	r2, r4
 8008ba0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008ba4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ba8:	3302      	adds	r3, #2
 8008baa:	e7c7      	b.n	8008b3c <_printf_common+0x58>
 8008bac:	2301      	movs	r3, #1
 8008bae:	4622      	mov	r2, r4
 8008bb0:	4649      	mov	r1, r9
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	47c0      	blx	r8
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d0e6      	beq.n	8008b88 <_printf_common+0xa4>
 8008bba:	3601      	adds	r6, #1
 8008bbc:	e7d9      	b.n	8008b72 <_printf_common+0x8e>
	...

08008bc0 <_printf_i>:
 8008bc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc4:	7e0f      	ldrb	r7, [r1, #24]
 8008bc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bc8:	2f78      	cmp	r7, #120	; 0x78
 8008bca:	4691      	mov	r9, r2
 8008bcc:	4680      	mov	r8, r0
 8008bce:	460c      	mov	r4, r1
 8008bd0:	469a      	mov	sl, r3
 8008bd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bd6:	d807      	bhi.n	8008be8 <_printf_i+0x28>
 8008bd8:	2f62      	cmp	r7, #98	; 0x62
 8008bda:	d80a      	bhi.n	8008bf2 <_printf_i+0x32>
 8008bdc:	2f00      	cmp	r7, #0
 8008bde:	f000 80d8 	beq.w	8008d92 <_printf_i+0x1d2>
 8008be2:	2f58      	cmp	r7, #88	; 0x58
 8008be4:	f000 80a3 	beq.w	8008d2e <_printf_i+0x16e>
 8008be8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bf0:	e03a      	b.n	8008c68 <_printf_i+0xa8>
 8008bf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bf6:	2b15      	cmp	r3, #21
 8008bf8:	d8f6      	bhi.n	8008be8 <_printf_i+0x28>
 8008bfa:	a101      	add	r1, pc, #4	; (adr r1, 8008c00 <_printf_i+0x40>)
 8008bfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c00:	08008c59 	.word	0x08008c59
 8008c04:	08008c6d 	.word	0x08008c6d
 8008c08:	08008be9 	.word	0x08008be9
 8008c0c:	08008be9 	.word	0x08008be9
 8008c10:	08008be9 	.word	0x08008be9
 8008c14:	08008be9 	.word	0x08008be9
 8008c18:	08008c6d 	.word	0x08008c6d
 8008c1c:	08008be9 	.word	0x08008be9
 8008c20:	08008be9 	.word	0x08008be9
 8008c24:	08008be9 	.word	0x08008be9
 8008c28:	08008be9 	.word	0x08008be9
 8008c2c:	08008d79 	.word	0x08008d79
 8008c30:	08008c9d 	.word	0x08008c9d
 8008c34:	08008d5b 	.word	0x08008d5b
 8008c38:	08008be9 	.word	0x08008be9
 8008c3c:	08008be9 	.word	0x08008be9
 8008c40:	08008d9b 	.word	0x08008d9b
 8008c44:	08008be9 	.word	0x08008be9
 8008c48:	08008c9d 	.word	0x08008c9d
 8008c4c:	08008be9 	.word	0x08008be9
 8008c50:	08008be9 	.word	0x08008be9
 8008c54:	08008d63 	.word	0x08008d63
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	1d1a      	adds	r2, r3, #4
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	602a      	str	r2, [r5, #0]
 8008c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e0a3      	b.n	8008db4 <_printf_i+0x1f4>
 8008c6c:	6820      	ldr	r0, [r4, #0]
 8008c6e:	6829      	ldr	r1, [r5, #0]
 8008c70:	0606      	lsls	r6, r0, #24
 8008c72:	f101 0304 	add.w	r3, r1, #4
 8008c76:	d50a      	bpl.n	8008c8e <_printf_i+0xce>
 8008c78:	680e      	ldr	r6, [r1, #0]
 8008c7a:	602b      	str	r3, [r5, #0]
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	da03      	bge.n	8008c88 <_printf_i+0xc8>
 8008c80:	232d      	movs	r3, #45	; 0x2d
 8008c82:	4276      	negs	r6, r6
 8008c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c88:	485e      	ldr	r0, [pc, #376]	; (8008e04 <_printf_i+0x244>)
 8008c8a:	230a      	movs	r3, #10
 8008c8c:	e019      	b.n	8008cc2 <_printf_i+0x102>
 8008c8e:	680e      	ldr	r6, [r1, #0]
 8008c90:	602b      	str	r3, [r5, #0]
 8008c92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c96:	bf18      	it	ne
 8008c98:	b236      	sxthne	r6, r6
 8008c9a:	e7ef      	b.n	8008c7c <_printf_i+0xbc>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	6820      	ldr	r0, [r4, #0]
 8008ca0:	1d19      	adds	r1, r3, #4
 8008ca2:	6029      	str	r1, [r5, #0]
 8008ca4:	0601      	lsls	r1, r0, #24
 8008ca6:	d501      	bpl.n	8008cac <_printf_i+0xec>
 8008ca8:	681e      	ldr	r6, [r3, #0]
 8008caa:	e002      	b.n	8008cb2 <_printf_i+0xf2>
 8008cac:	0646      	lsls	r6, r0, #25
 8008cae:	d5fb      	bpl.n	8008ca8 <_printf_i+0xe8>
 8008cb0:	881e      	ldrh	r6, [r3, #0]
 8008cb2:	4854      	ldr	r0, [pc, #336]	; (8008e04 <_printf_i+0x244>)
 8008cb4:	2f6f      	cmp	r7, #111	; 0x6f
 8008cb6:	bf0c      	ite	eq
 8008cb8:	2308      	moveq	r3, #8
 8008cba:	230a      	movne	r3, #10
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cc2:	6865      	ldr	r5, [r4, #4]
 8008cc4:	60a5      	str	r5, [r4, #8]
 8008cc6:	2d00      	cmp	r5, #0
 8008cc8:	bfa2      	ittt	ge
 8008cca:	6821      	ldrge	r1, [r4, #0]
 8008ccc:	f021 0104 	bicge.w	r1, r1, #4
 8008cd0:	6021      	strge	r1, [r4, #0]
 8008cd2:	b90e      	cbnz	r6, 8008cd8 <_printf_i+0x118>
 8008cd4:	2d00      	cmp	r5, #0
 8008cd6:	d04d      	beq.n	8008d74 <_printf_i+0x1b4>
 8008cd8:	4615      	mov	r5, r2
 8008cda:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cde:	fb03 6711 	mls	r7, r3, r1, r6
 8008ce2:	5dc7      	ldrb	r7, [r0, r7]
 8008ce4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ce8:	4637      	mov	r7, r6
 8008cea:	42bb      	cmp	r3, r7
 8008cec:	460e      	mov	r6, r1
 8008cee:	d9f4      	bls.n	8008cda <_printf_i+0x11a>
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d10b      	bne.n	8008d0c <_printf_i+0x14c>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	07de      	lsls	r6, r3, #31
 8008cf8:	d508      	bpl.n	8008d0c <_printf_i+0x14c>
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	6861      	ldr	r1, [r4, #4]
 8008cfe:	4299      	cmp	r1, r3
 8008d00:	bfde      	ittt	le
 8008d02:	2330      	movle	r3, #48	; 0x30
 8008d04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d08:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d0c:	1b52      	subs	r2, r2, r5
 8008d0e:	6122      	str	r2, [r4, #16]
 8008d10:	f8cd a000 	str.w	sl, [sp]
 8008d14:	464b      	mov	r3, r9
 8008d16:	aa03      	add	r2, sp, #12
 8008d18:	4621      	mov	r1, r4
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	f7ff fee2 	bl	8008ae4 <_printf_common>
 8008d20:	3001      	adds	r0, #1
 8008d22:	d14c      	bne.n	8008dbe <_printf_i+0x1fe>
 8008d24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d28:	b004      	add	sp, #16
 8008d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d2e:	4835      	ldr	r0, [pc, #212]	; (8008e04 <_printf_i+0x244>)
 8008d30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d34:	6829      	ldr	r1, [r5, #0]
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d3c:	6029      	str	r1, [r5, #0]
 8008d3e:	061d      	lsls	r5, r3, #24
 8008d40:	d514      	bpl.n	8008d6c <_printf_i+0x1ac>
 8008d42:	07df      	lsls	r7, r3, #31
 8008d44:	bf44      	itt	mi
 8008d46:	f043 0320 	orrmi.w	r3, r3, #32
 8008d4a:	6023      	strmi	r3, [r4, #0]
 8008d4c:	b91e      	cbnz	r6, 8008d56 <_printf_i+0x196>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	f023 0320 	bic.w	r3, r3, #32
 8008d54:	6023      	str	r3, [r4, #0]
 8008d56:	2310      	movs	r3, #16
 8008d58:	e7b0      	b.n	8008cbc <_printf_i+0xfc>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	f043 0320 	orr.w	r3, r3, #32
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	2378      	movs	r3, #120	; 0x78
 8008d64:	4828      	ldr	r0, [pc, #160]	; (8008e08 <_printf_i+0x248>)
 8008d66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d6a:	e7e3      	b.n	8008d34 <_printf_i+0x174>
 8008d6c:	0659      	lsls	r1, r3, #25
 8008d6e:	bf48      	it	mi
 8008d70:	b2b6      	uxthmi	r6, r6
 8008d72:	e7e6      	b.n	8008d42 <_printf_i+0x182>
 8008d74:	4615      	mov	r5, r2
 8008d76:	e7bb      	b.n	8008cf0 <_printf_i+0x130>
 8008d78:	682b      	ldr	r3, [r5, #0]
 8008d7a:	6826      	ldr	r6, [r4, #0]
 8008d7c:	6961      	ldr	r1, [r4, #20]
 8008d7e:	1d18      	adds	r0, r3, #4
 8008d80:	6028      	str	r0, [r5, #0]
 8008d82:	0635      	lsls	r5, r6, #24
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	d501      	bpl.n	8008d8c <_printf_i+0x1cc>
 8008d88:	6019      	str	r1, [r3, #0]
 8008d8a:	e002      	b.n	8008d92 <_printf_i+0x1d2>
 8008d8c:	0670      	lsls	r0, r6, #25
 8008d8e:	d5fb      	bpl.n	8008d88 <_printf_i+0x1c8>
 8008d90:	8019      	strh	r1, [r3, #0]
 8008d92:	2300      	movs	r3, #0
 8008d94:	6123      	str	r3, [r4, #16]
 8008d96:	4615      	mov	r5, r2
 8008d98:	e7ba      	b.n	8008d10 <_printf_i+0x150>
 8008d9a:	682b      	ldr	r3, [r5, #0]
 8008d9c:	1d1a      	adds	r2, r3, #4
 8008d9e:	602a      	str	r2, [r5, #0]
 8008da0:	681d      	ldr	r5, [r3, #0]
 8008da2:	6862      	ldr	r2, [r4, #4]
 8008da4:	2100      	movs	r1, #0
 8008da6:	4628      	mov	r0, r5
 8008da8:	f7f7 fa22 	bl	80001f0 <memchr>
 8008dac:	b108      	cbz	r0, 8008db2 <_printf_i+0x1f2>
 8008dae:	1b40      	subs	r0, r0, r5
 8008db0:	6060      	str	r0, [r4, #4]
 8008db2:	6863      	ldr	r3, [r4, #4]
 8008db4:	6123      	str	r3, [r4, #16]
 8008db6:	2300      	movs	r3, #0
 8008db8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dbc:	e7a8      	b.n	8008d10 <_printf_i+0x150>
 8008dbe:	6923      	ldr	r3, [r4, #16]
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	47d0      	blx	sl
 8008dc8:	3001      	adds	r0, #1
 8008dca:	d0ab      	beq.n	8008d24 <_printf_i+0x164>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	079b      	lsls	r3, r3, #30
 8008dd0:	d413      	bmi.n	8008dfa <_printf_i+0x23a>
 8008dd2:	68e0      	ldr	r0, [r4, #12]
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	4298      	cmp	r0, r3
 8008dd8:	bfb8      	it	lt
 8008dda:	4618      	movlt	r0, r3
 8008ddc:	e7a4      	b.n	8008d28 <_printf_i+0x168>
 8008dde:	2301      	movs	r3, #1
 8008de0:	4632      	mov	r2, r6
 8008de2:	4649      	mov	r1, r9
 8008de4:	4640      	mov	r0, r8
 8008de6:	47d0      	blx	sl
 8008de8:	3001      	adds	r0, #1
 8008dea:	d09b      	beq.n	8008d24 <_printf_i+0x164>
 8008dec:	3501      	adds	r5, #1
 8008dee:	68e3      	ldr	r3, [r4, #12]
 8008df0:	9903      	ldr	r1, [sp, #12]
 8008df2:	1a5b      	subs	r3, r3, r1
 8008df4:	42ab      	cmp	r3, r5
 8008df6:	dcf2      	bgt.n	8008dde <_printf_i+0x21e>
 8008df8:	e7eb      	b.n	8008dd2 <_printf_i+0x212>
 8008dfa:	2500      	movs	r5, #0
 8008dfc:	f104 0619 	add.w	r6, r4, #25
 8008e00:	e7f5      	b.n	8008dee <_printf_i+0x22e>
 8008e02:	bf00      	nop
 8008e04:	0800ceb9 	.word	0x0800ceb9
 8008e08:	0800ceca 	.word	0x0800ceca

08008e0c <memcpy>:
 8008e0c:	440a      	add	r2, r1
 8008e0e:	4291      	cmp	r1, r2
 8008e10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008e14:	d100      	bne.n	8008e18 <memcpy+0xc>
 8008e16:	4770      	bx	lr
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e22:	4291      	cmp	r1, r2
 8008e24:	d1f9      	bne.n	8008e1a <memcpy+0xe>
 8008e26:	bd10      	pop	{r4, pc}

08008e28 <memmove>:
 8008e28:	4288      	cmp	r0, r1
 8008e2a:	b510      	push	{r4, lr}
 8008e2c:	eb01 0402 	add.w	r4, r1, r2
 8008e30:	d902      	bls.n	8008e38 <memmove+0x10>
 8008e32:	4284      	cmp	r4, r0
 8008e34:	4623      	mov	r3, r4
 8008e36:	d807      	bhi.n	8008e48 <memmove+0x20>
 8008e38:	1e43      	subs	r3, r0, #1
 8008e3a:	42a1      	cmp	r1, r4
 8008e3c:	d008      	beq.n	8008e50 <memmove+0x28>
 8008e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e46:	e7f8      	b.n	8008e3a <memmove+0x12>
 8008e48:	4402      	add	r2, r0
 8008e4a:	4601      	mov	r1, r0
 8008e4c:	428a      	cmp	r2, r1
 8008e4e:	d100      	bne.n	8008e52 <memmove+0x2a>
 8008e50:	bd10      	pop	{r4, pc}
 8008e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e5a:	e7f7      	b.n	8008e4c <memmove+0x24>

08008e5c <_free_r>:
 8008e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e5e:	2900      	cmp	r1, #0
 8008e60:	d044      	beq.n	8008eec <_free_r+0x90>
 8008e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e66:	9001      	str	r0, [sp, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e6e:	bfb8      	it	lt
 8008e70:	18e4      	addlt	r4, r4, r3
 8008e72:	f000 f913 	bl	800909c <__malloc_lock>
 8008e76:	4a1e      	ldr	r2, [pc, #120]	; (8008ef0 <_free_r+0x94>)
 8008e78:	9801      	ldr	r0, [sp, #4]
 8008e7a:	6813      	ldr	r3, [r2, #0]
 8008e7c:	b933      	cbnz	r3, 8008e8c <_free_r+0x30>
 8008e7e:	6063      	str	r3, [r4, #4]
 8008e80:	6014      	str	r4, [r2, #0]
 8008e82:	b003      	add	sp, #12
 8008e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e88:	f000 b90e 	b.w	80090a8 <__malloc_unlock>
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	d908      	bls.n	8008ea2 <_free_r+0x46>
 8008e90:	6825      	ldr	r5, [r4, #0]
 8008e92:	1961      	adds	r1, r4, r5
 8008e94:	428b      	cmp	r3, r1
 8008e96:	bf01      	itttt	eq
 8008e98:	6819      	ldreq	r1, [r3, #0]
 8008e9a:	685b      	ldreq	r3, [r3, #4]
 8008e9c:	1949      	addeq	r1, r1, r5
 8008e9e:	6021      	streq	r1, [r4, #0]
 8008ea0:	e7ed      	b.n	8008e7e <_free_r+0x22>
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	b10b      	cbz	r3, 8008eac <_free_r+0x50>
 8008ea8:	42a3      	cmp	r3, r4
 8008eaa:	d9fa      	bls.n	8008ea2 <_free_r+0x46>
 8008eac:	6811      	ldr	r1, [r2, #0]
 8008eae:	1855      	adds	r5, r2, r1
 8008eb0:	42a5      	cmp	r5, r4
 8008eb2:	d10b      	bne.n	8008ecc <_free_r+0x70>
 8008eb4:	6824      	ldr	r4, [r4, #0]
 8008eb6:	4421      	add	r1, r4
 8008eb8:	1854      	adds	r4, r2, r1
 8008eba:	42a3      	cmp	r3, r4
 8008ebc:	6011      	str	r1, [r2, #0]
 8008ebe:	d1e0      	bne.n	8008e82 <_free_r+0x26>
 8008ec0:	681c      	ldr	r4, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	6053      	str	r3, [r2, #4]
 8008ec6:	4421      	add	r1, r4
 8008ec8:	6011      	str	r1, [r2, #0]
 8008eca:	e7da      	b.n	8008e82 <_free_r+0x26>
 8008ecc:	d902      	bls.n	8008ed4 <_free_r+0x78>
 8008ece:	230c      	movs	r3, #12
 8008ed0:	6003      	str	r3, [r0, #0]
 8008ed2:	e7d6      	b.n	8008e82 <_free_r+0x26>
 8008ed4:	6825      	ldr	r5, [r4, #0]
 8008ed6:	1961      	adds	r1, r4, r5
 8008ed8:	428b      	cmp	r3, r1
 8008eda:	bf04      	itt	eq
 8008edc:	6819      	ldreq	r1, [r3, #0]
 8008ede:	685b      	ldreq	r3, [r3, #4]
 8008ee0:	6063      	str	r3, [r4, #4]
 8008ee2:	bf04      	itt	eq
 8008ee4:	1949      	addeq	r1, r1, r5
 8008ee6:	6021      	streq	r1, [r4, #0]
 8008ee8:	6054      	str	r4, [r2, #4]
 8008eea:	e7ca      	b.n	8008e82 <_free_r+0x26>
 8008eec:	b003      	add	sp, #12
 8008eee:	bd30      	pop	{r4, r5, pc}
 8008ef0:	20000c6c 	.word	0x20000c6c

08008ef4 <sbrk_aligned>:
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	4e0e      	ldr	r6, [pc, #56]	; (8008f30 <sbrk_aligned+0x3c>)
 8008ef8:	460c      	mov	r4, r1
 8008efa:	6831      	ldr	r1, [r6, #0]
 8008efc:	4605      	mov	r5, r0
 8008efe:	b911      	cbnz	r1, 8008f06 <sbrk_aligned+0x12>
 8008f00:	f000 f8bc 	bl	800907c <_sbrk_r>
 8008f04:	6030      	str	r0, [r6, #0]
 8008f06:	4621      	mov	r1, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f000 f8b7 	bl	800907c <_sbrk_r>
 8008f0e:	1c43      	adds	r3, r0, #1
 8008f10:	d00a      	beq.n	8008f28 <sbrk_aligned+0x34>
 8008f12:	1cc4      	adds	r4, r0, #3
 8008f14:	f024 0403 	bic.w	r4, r4, #3
 8008f18:	42a0      	cmp	r0, r4
 8008f1a:	d007      	beq.n	8008f2c <sbrk_aligned+0x38>
 8008f1c:	1a21      	subs	r1, r4, r0
 8008f1e:	4628      	mov	r0, r5
 8008f20:	f000 f8ac 	bl	800907c <_sbrk_r>
 8008f24:	3001      	adds	r0, #1
 8008f26:	d101      	bne.n	8008f2c <sbrk_aligned+0x38>
 8008f28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
 8008f30:	20000c70 	.word	0x20000c70

08008f34 <_malloc_r>:
 8008f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f38:	1ccd      	adds	r5, r1, #3
 8008f3a:	f025 0503 	bic.w	r5, r5, #3
 8008f3e:	3508      	adds	r5, #8
 8008f40:	2d0c      	cmp	r5, #12
 8008f42:	bf38      	it	cc
 8008f44:	250c      	movcc	r5, #12
 8008f46:	2d00      	cmp	r5, #0
 8008f48:	4607      	mov	r7, r0
 8008f4a:	db01      	blt.n	8008f50 <_malloc_r+0x1c>
 8008f4c:	42a9      	cmp	r1, r5
 8008f4e:	d905      	bls.n	8008f5c <_malloc_r+0x28>
 8008f50:	230c      	movs	r3, #12
 8008f52:	603b      	str	r3, [r7, #0]
 8008f54:	2600      	movs	r6, #0
 8008f56:	4630      	mov	r0, r6
 8008f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f5c:	4e2e      	ldr	r6, [pc, #184]	; (8009018 <_malloc_r+0xe4>)
 8008f5e:	f000 f89d 	bl	800909c <__malloc_lock>
 8008f62:	6833      	ldr	r3, [r6, #0]
 8008f64:	461c      	mov	r4, r3
 8008f66:	bb34      	cbnz	r4, 8008fb6 <_malloc_r+0x82>
 8008f68:	4629      	mov	r1, r5
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	f7ff ffc2 	bl	8008ef4 <sbrk_aligned>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	4604      	mov	r4, r0
 8008f74:	d14d      	bne.n	8009012 <_malloc_r+0xde>
 8008f76:	6834      	ldr	r4, [r6, #0]
 8008f78:	4626      	mov	r6, r4
 8008f7a:	2e00      	cmp	r6, #0
 8008f7c:	d140      	bne.n	8009000 <_malloc_r+0xcc>
 8008f7e:	6823      	ldr	r3, [r4, #0]
 8008f80:	4631      	mov	r1, r6
 8008f82:	4638      	mov	r0, r7
 8008f84:	eb04 0803 	add.w	r8, r4, r3
 8008f88:	f000 f878 	bl	800907c <_sbrk_r>
 8008f8c:	4580      	cmp	r8, r0
 8008f8e:	d13a      	bne.n	8009006 <_malloc_r+0xd2>
 8008f90:	6821      	ldr	r1, [r4, #0]
 8008f92:	3503      	adds	r5, #3
 8008f94:	1a6d      	subs	r5, r5, r1
 8008f96:	f025 0503 	bic.w	r5, r5, #3
 8008f9a:	3508      	adds	r5, #8
 8008f9c:	2d0c      	cmp	r5, #12
 8008f9e:	bf38      	it	cc
 8008fa0:	250c      	movcc	r5, #12
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	4638      	mov	r0, r7
 8008fa6:	f7ff ffa5 	bl	8008ef4 <sbrk_aligned>
 8008faa:	3001      	adds	r0, #1
 8008fac:	d02b      	beq.n	8009006 <_malloc_r+0xd2>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	442b      	add	r3, r5
 8008fb2:	6023      	str	r3, [r4, #0]
 8008fb4:	e00e      	b.n	8008fd4 <_malloc_r+0xa0>
 8008fb6:	6822      	ldr	r2, [r4, #0]
 8008fb8:	1b52      	subs	r2, r2, r5
 8008fba:	d41e      	bmi.n	8008ffa <_malloc_r+0xc6>
 8008fbc:	2a0b      	cmp	r2, #11
 8008fbe:	d916      	bls.n	8008fee <_malloc_r+0xba>
 8008fc0:	1961      	adds	r1, r4, r5
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	6025      	str	r5, [r4, #0]
 8008fc6:	bf18      	it	ne
 8008fc8:	6059      	strne	r1, [r3, #4]
 8008fca:	6863      	ldr	r3, [r4, #4]
 8008fcc:	bf08      	it	eq
 8008fce:	6031      	streq	r1, [r6, #0]
 8008fd0:	5162      	str	r2, [r4, r5]
 8008fd2:	604b      	str	r3, [r1, #4]
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f104 060b 	add.w	r6, r4, #11
 8008fda:	f000 f865 	bl	80090a8 <__malloc_unlock>
 8008fde:	f026 0607 	bic.w	r6, r6, #7
 8008fe2:	1d23      	adds	r3, r4, #4
 8008fe4:	1af2      	subs	r2, r6, r3
 8008fe6:	d0b6      	beq.n	8008f56 <_malloc_r+0x22>
 8008fe8:	1b9b      	subs	r3, r3, r6
 8008fea:	50a3      	str	r3, [r4, r2]
 8008fec:	e7b3      	b.n	8008f56 <_malloc_r+0x22>
 8008fee:	6862      	ldr	r2, [r4, #4]
 8008ff0:	42a3      	cmp	r3, r4
 8008ff2:	bf0c      	ite	eq
 8008ff4:	6032      	streq	r2, [r6, #0]
 8008ff6:	605a      	strne	r2, [r3, #4]
 8008ff8:	e7ec      	b.n	8008fd4 <_malloc_r+0xa0>
 8008ffa:	4623      	mov	r3, r4
 8008ffc:	6864      	ldr	r4, [r4, #4]
 8008ffe:	e7b2      	b.n	8008f66 <_malloc_r+0x32>
 8009000:	4634      	mov	r4, r6
 8009002:	6876      	ldr	r6, [r6, #4]
 8009004:	e7b9      	b.n	8008f7a <_malloc_r+0x46>
 8009006:	230c      	movs	r3, #12
 8009008:	603b      	str	r3, [r7, #0]
 800900a:	4638      	mov	r0, r7
 800900c:	f000 f84c 	bl	80090a8 <__malloc_unlock>
 8009010:	e7a1      	b.n	8008f56 <_malloc_r+0x22>
 8009012:	6025      	str	r5, [r4, #0]
 8009014:	e7de      	b.n	8008fd4 <_malloc_r+0xa0>
 8009016:	bf00      	nop
 8009018:	20000c6c 	.word	0x20000c6c

0800901c <_realloc_r>:
 800901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009020:	4680      	mov	r8, r0
 8009022:	4614      	mov	r4, r2
 8009024:	460e      	mov	r6, r1
 8009026:	b921      	cbnz	r1, 8009032 <_realloc_r+0x16>
 8009028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800902c:	4611      	mov	r1, r2
 800902e:	f7ff bf81 	b.w	8008f34 <_malloc_r>
 8009032:	b92a      	cbnz	r2, 8009040 <_realloc_r+0x24>
 8009034:	f7ff ff12 	bl	8008e5c <_free_r>
 8009038:	4625      	mov	r5, r4
 800903a:	4628      	mov	r0, r5
 800903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009040:	f000 f838 	bl	80090b4 <_malloc_usable_size_r>
 8009044:	4284      	cmp	r4, r0
 8009046:	4607      	mov	r7, r0
 8009048:	d802      	bhi.n	8009050 <_realloc_r+0x34>
 800904a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800904e:	d812      	bhi.n	8009076 <_realloc_r+0x5a>
 8009050:	4621      	mov	r1, r4
 8009052:	4640      	mov	r0, r8
 8009054:	f7ff ff6e 	bl	8008f34 <_malloc_r>
 8009058:	4605      	mov	r5, r0
 800905a:	2800      	cmp	r0, #0
 800905c:	d0ed      	beq.n	800903a <_realloc_r+0x1e>
 800905e:	42bc      	cmp	r4, r7
 8009060:	4622      	mov	r2, r4
 8009062:	4631      	mov	r1, r6
 8009064:	bf28      	it	cs
 8009066:	463a      	movcs	r2, r7
 8009068:	f7ff fed0 	bl	8008e0c <memcpy>
 800906c:	4631      	mov	r1, r6
 800906e:	4640      	mov	r0, r8
 8009070:	f7ff fef4 	bl	8008e5c <_free_r>
 8009074:	e7e1      	b.n	800903a <_realloc_r+0x1e>
 8009076:	4635      	mov	r5, r6
 8009078:	e7df      	b.n	800903a <_realloc_r+0x1e>
	...

0800907c <_sbrk_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d06      	ldr	r5, [pc, #24]	; (8009098 <_sbrk_r+0x1c>)
 8009080:	2300      	movs	r3, #0
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	602b      	str	r3, [r5, #0]
 8009088:	f000 ff6a 	bl	8009f60 <_sbrk>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d102      	bne.n	8009096 <_sbrk_r+0x1a>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	b103      	cbz	r3, 8009096 <_sbrk_r+0x1a>
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	20000c74 	.word	0x20000c74

0800909c <__malloc_lock>:
 800909c:	4801      	ldr	r0, [pc, #4]	; (80090a4 <__malloc_lock+0x8>)
 800909e:	f000 b811 	b.w	80090c4 <__retarget_lock_acquire_recursive>
 80090a2:	bf00      	nop
 80090a4:	20000c78 	.word	0x20000c78

080090a8 <__malloc_unlock>:
 80090a8:	4801      	ldr	r0, [pc, #4]	; (80090b0 <__malloc_unlock+0x8>)
 80090aa:	f000 b80c 	b.w	80090c6 <__retarget_lock_release_recursive>
 80090ae:	bf00      	nop
 80090b0:	20000c78 	.word	0x20000c78

080090b4 <_malloc_usable_size_r>:
 80090b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b8:	1f18      	subs	r0, r3, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bfbc      	itt	lt
 80090be:	580b      	ldrlt	r3, [r1, r0]
 80090c0:	18c0      	addlt	r0, r0, r3
 80090c2:	4770      	bx	lr

080090c4 <__retarget_lock_acquire_recursive>:
 80090c4:	4770      	bx	lr

080090c6 <__retarget_lock_release_recursive>:
 80090c6:	4770      	bx	lr

080090c8 <pow>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	ed2d 8b02 	vpush	{d8}
 80090ce:	eeb0 8a40 	vmov.f32	s16, s0
 80090d2:	eef0 8a60 	vmov.f32	s17, s1
 80090d6:	ec55 4b11 	vmov	r4, r5, d1
 80090da:	f000 f891 	bl	8009200 <__ieee754_pow>
 80090de:	4622      	mov	r2, r4
 80090e0:	462b      	mov	r3, r5
 80090e2:	4620      	mov	r0, r4
 80090e4:	4629      	mov	r1, r5
 80090e6:	ec57 6b10 	vmov	r6, r7, d0
 80090ea:	f7f7 fd27 	bl	8000b3c <__aeabi_dcmpun>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d13b      	bne.n	800916a <pow+0xa2>
 80090f2:	ec51 0b18 	vmov	r0, r1, d8
 80090f6:	2200      	movs	r2, #0
 80090f8:	2300      	movs	r3, #0
 80090fa:	f7f7 fced 	bl	8000ad8 <__aeabi_dcmpeq>
 80090fe:	b1b8      	cbz	r0, 8009130 <pow+0x68>
 8009100:	2200      	movs	r2, #0
 8009102:	2300      	movs	r3, #0
 8009104:	4620      	mov	r0, r4
 8009106:	4629      	mov	r1, r5
 8009108:	f7f7 fce6 	bl	8000ad8 <__aeabi_dcmpeq>
 800910c:	2800      	cmp	r0, #0
 800910e:	d146      	bne.n	800919e <pow+0xd6>
 8009110:	ec45 4b10 	vmov	d0, r4, r5
 8009114:	f000 fe8d 	bl	8009e32 <finite>
 8009118:	b338      	cbz	r0, 800916a <pow+0xa2>
 800911a:	2200      	movs	r2, #0
 800911c:	2300      	movs	r3, #0
 800911e:	4620      	mov	r0, r4
 8009120:	4629      	mov	r1, r5
 8009122:	f7f7 fce3 	bl	8000aec <__aeabi_dcmplt>
 8009126:	b300      	cbz	r0, 800916a <pow+0xa2>
 8009128:	f000 ff14 	bl	8009f54 <__errno>
 800912c:	2322      	movs	r3, #34	; 0x22
 800912e:	e01b      	b.n	8009168 <pow+0xa0>
 8009130:	ec47 6b10 	vmov	d0, r6, r7
 8009134:	f000 fe7d 	bl	8009e32 <finite>
 8009138:	b9e0      	cbnz	r0, 8009174 <pow+0xac>
 800913a:	eeb0 0a48 	vmov.f32	s0, s16
 800913e:	eef0 0a68 	vmov.f32	s1, s17
 8009142:	f000 fe76 	bl	8009e32 <finite>
 8009146:	b1a8      	cbz	r0, 8009174 <pow+0xac>
 8009148:	ec45 4b10 	vmov	d0, r4, r5
 800914c:	f000 fe71 	bl	8009e32 <finite>
 8009150:	b180      	cbz	r0, 8009174 <pow+0xac>
 8009152:	4632      	mov	r2, r6
 8009154:	463b      	mov	r3, r7
 8009156:	4630      	mov	r0, r6
 8009158:	4639      	mov	r1, r7
 800915a:	f7f7 fcef 	bl	8000b3c <__aeabi_dcmpun>
 800915e:	2800      	cmp	r0, #0
 8009160:	d0e2      	beq.n	8009128 <pow+0x60>
 8009162:	f000 fef7 	bl	8009f54 <__errno>
 8009166:	2321      	movs	r3, #33	; 0x21
 8009168:	6003      	str	r3, [r0, #0]
 800916a:	ecbd 8b02 	vpop	{d8}
 800916e:	ec47 6b10 	vmov	d0, r6, r7
 8009172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009174:	2200      	movs	r2, #0
 8009176:	2300      	movs	r3, #0
 8009178:	4630      	mov	r0, r6
 800917a:	4639      	mov	r1, r7
 800917c:	f7f7 fcac 	bl	8000ad8 <__aeabi_dcmpeq>
 8009180:	2800      	cmp	r0, #0
 8009182:	d0f2      	beq.n	800916a <pow+0xa2>
 8009184:	eeb0 0a48 	vmov.f32	s0, s16
 8009188:	eef0 0a68 	vmov.f32	s1, s17
 800918c:	f000 fe51 	bl	8009e32 <finite>
 8009190:	2800      	cmp	r0, #0
 8009192:	d0ea      	beq.n	800916a <pow+0xa2>
 8009194:	ec45 4b10 	vmov	d0, r4, r5
 8009198:	f000 fe4b 	bl	8009e32 <finite>
 800919c:	e7c3      	b.n	8009126 <pow+0x5e>
 800919e:	4f01      	ldr	r7, [pc, #4]	; (80091a4 <pow+0xdc>)
 80091a0:	2600      	movs	r6, #0
 80091a2:	e7e2      	b.n	800916a <pow+0xa2>
 80091a4:	3ff00000 	.word	0x3ff00000

080091a8 <sqrt>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	ed2d 8b02 	vpush	{d8}
 80091ae:	ec55 4b10 	vmov	r4, r5, d0
 80091b2:	f000 fd53 	bl	8009c5c <__ieee754_sqrt>
 80091b6:	4622      	mov	r2, r4
 80091b8:	462b      	mov	r3, r5
 80091ba:	4620      	mov	r0, r4
 80091bc:	4629      	mov	r1, r5
 80091be:	eeb0 8a40 	vmov.f32	s16, s0
 80091c2:	eef0 8a60 	vmov.f32	s17, s1
 80091c6:	f7f7 fcb9 	bl	8000b3c <__aeabi_dcmpun>
 80091ca:	b990      	cbnz	r0, 80091f2 <sqrt+0x4a>
 80091cc:	2200      	movs	r2, #0
 80091ce:	2300      	movs	r3, #0
 80091d0:	4620      	mov	r0, r4
 80091d2:	4629      	mov	r1, r5
 80091d4:	f7f7 fc8a 	bl	8000aec <__aeabi_dcmplt>
 80091d8:	b158      	cbz	r0, 80091f2 <sqrt+0x4a>
 80091da:	f000 febb 	bl	8009f54 <__errno>
 80091de:	2321      	movs	r3, #33	; 0x21
 80091e0:	6003      	str	r3, [r0, #0]
 80091e2:	2200      	movs	r2, #0
 80091e4:	2300      	movs	r3, #0
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	f7f7 fb37 	bl	800085c <__aeabi_ddiv>
 80091ee:	ec41 0b18 	vmov	d8, r0, r1
 80091f2:	eeb0 0a48 	vmov.f32	s0, s16
 80091f6:	eef0 0a68 	vmov.f32	s1, s17
 80091fa:	ecbd 8b02 	vpop	{d8}
 80091fe:	bd38      	pop	{r3, r4, r5, pc}

08009200 <__ieee754_pow>:
 8009200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009204:	ed2d 8b06 	vpush	{d8-d10}
 8009208:	b089      	sub	sp, #36	; 0x24
 800920a:	ed8d 1b00 	vstr	d1, [sp]
 800920e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009212:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009216:	ea58 0102 	orrs.w	r1, r8, r2
 800921a:	ec57 6b10 	vmov	r6, r7, d0
 800921e:	d115      	bne.n	800924c <__ieee754_pow+0x4c>
 8009220:	19b3      	adds	r3, r6, r6
 8009222:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009226:	4152      	adcs	r2, r2
 8009228:	4299      	cmp	r1, r3
 800922a:	4b89      	ldr	r3, [pc, #548]	; (8009450 <__ieee754_pow+0x250>)
 800922c:	4193      	sbcs	r3, r2
 800922e:	f080 84d2 	bcs.w	8009bd6 <__ieee754_pow+0x9d6>
 8009232:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009236:	4630      	mov	r0, r6
 8009238:	4639      	mov	r1, r7
 800923a:	f7f7 f82f 	bl	800029c <__adddf3>
 800923e:	ec41 0b10 	vmov	d0, r0, r1
 8009242:	b009      	add	sp, #36	; 0x24
 8009244:	ecbd 8b06 	vpop	{d8-d10}
 8009248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924c:	4b81      	ldr	r3, [pc, #516]	; (8009454 <__ieee754_pow+0x254>)
 800924e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009252:	429c      	cmp	r4, r3
 8009254:	ee10 aa10 	vmov	sl, s0
 8009258:	463d      	mov	r5, r7
 800925a:	dc06      	bgt.n	800926a <__ieee754_pow+0x6a>
 800925c:	d101      	bne.n	8009262 <__ieee754_pow+0x62>
 800925e:	2e00      	cmp	r6, #0
 8009260:	d1e7      	bne.n	8009232 <__ieee754_pow+0x32>
 8009262:	4598      	cmp	r8, r3
 8009264:	dc01      	bgt.n	800926a <__ieee754_pow+0x6a>
 8009266:	d10f      	bne.n	8009288 <__ieee754_pow+0x88>
 8009268:	b172      	cbz	r2, 8009288 <__ieee754_pow+0x88>
 800926a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800926e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009272:	ea55 050a 	orrs.w	r5, r5, sl
 8009276:	d1dc      	bne.n	8009232 <__ieee754_pow+0x32>
 8009278:	e9dd 3200 	ldrd	r3, r2, [sp]
 800927c:	18db      	adds	r3, r3, r3
 800927e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009282:	4152      	adcs	r2, r2
 8009284:	429d      	cmp	r5, r3
 8009286:	e7d0      	b.n	800922a <__ieee754_pow+0x2a>
 8009288:	2d00      	cmp	r5, #0
 800928a:	da3b      	bge.n	8009304 <__ieee754_pow+0x104>
 800928c:	4b72      	ldr	r3, [pc, #456]	; (8009458 <__ieee754_pow+0x258>)
 800928e:	4598      	cmp	r8, r3
 8009290:	dc51      	bgt.n	8009336 <__ieee754_pow+0x136>
 8009292:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009296:	4598      	cmp	r8, r3
 8009298:	f340 84ac 	ble.w	8009bf4 <__ieee754_pow+0x9f4>
 800929c:	ea4f 5328 	mov.w	r3, r8, asr #20
 80092a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80092a4:	2b14      	cmp	r3, #20
 80092a6:	dd0f      	ble.n	80092c8 <__ieee754_pow+0xc8>
 80092a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80092ac:	fa22 f103 	lsr.w	r1, r2, r3
 80092b0:	fa01 f303 	lsl.w	r3, r1, r3
 80092b4:	4293      	cmp	r3, r2
 80092b6:	f040 849d 	bne.w	8009bf4 <__ieee754_pow+0x9f4>
 80092ba:	f001 0101 	and.w	r1, r1, #1
 80092be:	f1c1 0302 	rsb	r3, r1, #2
 80092c2:	9304      	str	r3, [sp, #16]
 80092c4:	b182      	cbz	r2, 80092e8 <__ieee754_pow+0xe8>
 80092c6:	e05f      	b.n	8009388 <__ieee754_pow+0x188>
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	d15b      	bne.n	8009384 <__ieee754_pow+0x184>
 80092cc:	f1c3 0314 	rsb	r3, r3, #20
 80092d0:	fa48 f103 	asr.w	r1, r8, r3
 80092d4:	fa01 f303 	lsl.w	r3, r1, r3
 80092d8:	4543      	cmp	r3, r8
 80092da:	f040 8488 	bne.w	8009bee <__ieee754_pow+0x9ee>
 80092de:	f001 0101 	and.w	r1, r1, #1
 80092e2:	f1c1 0302 	rsb	r3, r1, #2
 80092e6:	9304      	str	r3, [sp, #16]
 80092e8:	4b5c      	ldr	r3, [pc, #368]	; (800945c <__ieee754_pow+0x25c>)
 80092ea:	4598      	cmp	r8, r3
 80092ec:	d132      	bne.n	8009354 <__ieee754_pow+0x154>
 80092ee:	f1b9 0f00 	cmp.w	r9, #0
 80092f2:	f280 8478 	bge.w	8009be6 <__ieee754_pow+0x9e6>
 80092f6:	4959      	ldr	r1, [pc, #356]	; (800945c <__ieee754_pow+0x25c>)
 80092f8:	4632      	mov	r2, r6
 80092fa:	463b      	mov	r3, r7
 80092fc:	2000      	movs	r0, #0
 80092fe:	f7f7 faad 	bl	800085c <__aeabi_ddiv>
 8009302:	e79c      	b.n	800923e <__ieee754_pow+0x3e>
 8009304:	2300      	movs	r3, #0
 8009306:	9304      	str	r3, [sp, #16]
 8009308:	2a00      	cmp	r2, #0
 800930a:	d13d      	bne.n	8009388 <__ieee754_pow+0x188>
 800930c:	4b51      	ldr	r3, [pc, #324]	; (8009454 <__ieee754_pow+0x254>)
 800930e:	4598      	cmp	r8, r3
 8009310:	d1ea      	bne.n	80092e8 <__ieee754_pow+0xe8>
 8009312:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009316:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800931a:	ea53 030a 	orrs.w	r3, r3, sl
 800931e:	f000 845a 	beq.w	8009bd6 <__ieee754_pow+0x9d6>
 8009322:	4b4f      	ldr	r3, [pc, #316]	; (8009460 <__ieee754_pow+0x260>)
 8009324:	429c      	cmp	r4, r3
 8009326:	dd08      	ble.n	800933a <__ieee754_pow+0x13a>
 8009328:	f1b9 0f00 	cmp.w	r9, #0
 800932c:	f2c0 8457 	blt.w	8009bde <__ieee754_pow+0x9de>
 8009330:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009334:	e783      	b.n	800923e <__ieee754_pow+0x3e>
 8009336:	2302      	movs	r3, #2
 8009338:	e7e5      	b.n	8009306 <__ieee754_pow+0x106>
 800933a:	f1b9 0f00 	cmp.w	r9, #0
 800933e:	f04f 0000 	mov.w	r0, #0
 8009342:	f04f 0100 	mov.w	r1, #0
 8009346:	f6bf af7a 	bge.w	800923e <__ieee754_pow+0x3e>
 800934a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800934e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009352:	e774      	b.n	800923e <__ieee754_pow+0x3e>
 8009354:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009358:	d106      	bne.n	8009368 <__ieee754_pow+0x168>
 800935a:	4632      	mov	r2, r6
 800935c:	463b      	mov	r3, r7
 800935e:	4630      	mov	r0, r6
 8009360:	4639      	mov	r1, r7
 8009362:	f7f7 f951 	bl	8000608 <__aeabi_dmul>
 8009366:	e76a      	b.n	800923e <__ieee754_pow+0x3e>
 8009368:	4b3e      	ldr	r3, [pc, #248]	; (8009464 <__ieee754_pow+0x264>)
 800936a:	4599      	cmp	r9, r3
 800936c:	d10c      	bne.n	8009388 <__ieee754_pow+0x188>
 800936e:	2d00      	cmp	r5, #0
 8009370:	db0a      	blt.n	8009388 <__ieee754_pow+0x188>
 8009372:	ec47 6b10 	vmov	d0, r6, r7
 8009376:	b009      	add	sp, #36	; 0x24
 8009378:	ecbd 8b06 	vpop	{d8-d10}
 800937c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	f000 bc6c 	b.w	8009c5c <__ieee754_sqrt>
 8009384:	2300      	movs	r3, #0
 8009386:	9304      	str	r3, [sp, #16]
 8009388:	ec47 6b10 	vmov	d0, r6, r7
 800938c:	f000 fd48 	bl	8009e20 <fabs>
 8009390:	ec51 0b10 	vmov	r0, r1, d0
 8009394:	f1ba 0f00 	cmp.w	sl, #0
 8009398:	d129      	bne.n	80093ee <__ieee754_pow+0x1ee>
 800939a:	b124      	cbz	r4, 80093a6 <__ieee754_pow+0x1a6>
 800939c:	4b2f      	ldr	r3, [pc, #188]	; (800945c <__ieee754_pow+0x25c>)
 800939e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d123      	bne.n	80093ee <__ieee754_pow+0x1ee>
 80093a6:	f1b9 0f00 	cmp.w	r9, #0
 80093aa:	da05      	bge.n	80093b8 <__ieee754_pow+0x1b8>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	2000      	movs	r0, #0
 80093b2:	492a      	ldr	r1, [pc, #168]	; (800945c <__ieee754_pow+0x25c>)
 80093b4:	f7f7 fa52 	bl	800085c <__aeabi_ddiv>
 80093b8:	2d00      	cmp	r5, #0
 80093ba:	f6bf af40 	bge.w	800923e <__ieee754_pow+0x3e>
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80093c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80093c8:	4323      	orrs	r3, r4
 80093ca:	d108      	bne.n	80093de <__ieee754_pow+0x1de>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4610      	mov	r0, r2
 80093d2:	4619      	mov	r1, r3
 80093d4:	f7f6 ff60 	bl	8000298 <__aeabi_dsub>
 80093d8:	4602      	mov	r2, r0
 80093da:	460b      	mov	r3, r1
 80093dc:	e78f      	b.n	80092fe <__ieee754_pow+0xfe>
 80093de:	9b04      	ldr	r3, [sp, #16]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	f47f af2c 	bne.w	800923e <__ieee754_pow+0x3e>
 80093e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093ea:	4619      	mov	r1, r3
 80093ec:	e727      	b.n	800923e <__ieee754_pow+0x3e>
 80093ee:	0feb      	lsrs	r3, r5, #31
 80093f0:	3b01      	subs	r3, #1
 80093f2:	9306      	str	r3, [sp, #24]
 80093f4:	9a06      	ldr	r2, [sp, #24]
 80093f6:	9b04      	ldr	r3, [sp, #16]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	d102      	bne.n	8009402 <__ieee754_pow+0x202>
 80093fc:	4632      	mov	r2, r6
 80093fe:	463b      	mov	r3, r7
 8009400:	e7e6      	b.n	80093d0 <__ieee754_pow+0x1d0>
 8009402:	4b19      	ldr	r3, [pc, #100]	; (8009468 <__ieee754_pow+0x268>)
 8009404:	4598      	cmp	r8, r3
 8009406:	f340 80fb 	ble.w	8009600 <__ieee754_pow+0x400>
 800940a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800940e:	4598      	cmp	r8, r3
 8009410:	4b13      	ldr	r3, [pc, #76]	; (8009460 <__ieee754_pow+0x260>)
 8009412:	dd0c      	ble.n	800942e <__ieee754_pow+0x22e>
 8009414:	429c      	cmp	r4, r3
 8009416:	dc0f      	bgt.n	8009438 <__ieee754_pow+0x238>
 8009418:	f1b9 0f00 	cmp.w	r9, #0
 800941c:	da0f      	bge.n	800943e <__ieee754_pow+0x23e>
 800941e:	2000      	movs	r0, #0
 8009420:	b009      	add	sp, #36	; 0x24
 8009422:	ecbd 8b06 	vpop	{d8-d10}
 8009426:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942a:	f000 bcf0 	b.w	8009e0e <__math_oflow>
 800942e:	429c      	cmp	r4, r3
 8009430:	dbf2      	blt.n	8009418 <__ieee754_pow+0x218>
 8009432:	4b0a      	ldr	r3, [pc, #40]	; (800945c <__ieee754_pow+0x25c>)
 8009434:	429c      	cmp	r4, r3
 8009436:	dd19      	ble.n	800946c <__ieee754_pow+0x26c>
 8009438:	f1b9 0f00 	cmp.w	r9, #0
 800943c:	dcef      	bgt.n	800941e <__ieee754_pow+0x21e>
 800943e:	2000      	movs	r0, #0
 8009440:	b009      	add	sp, #36	; 0x24
 8009442:	ecbd 8b06 	vpop	{d8-d10}
 8009446:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944a:	f000 bcd7 	b.w	8009dfc <__math_uflow>
 800944e:	bf00      	nop
 8009450:	fff00000 	.word	0xfff00000
 8009454:	7ff00000 	.word	0x7ff00000
 8009458:	433fffff 	.word	0x433fffff
 800945c:	3ff00000 	.word	0x3ff00000
 8009460:	3fefffff 	.word	0x3fefffff
 8009464:	3fe00000 	.word	0x3fe00000
 8009468:	41e00000 	.word	0x41e00000
 800946c:	4b60      	ldr	r3, [pc, #384]	; (80095f0 <__ieee754_pow+0x3f0>)
 800946e:	2200      	movs	r2, #0
 8009470:	f7f6 ff12 	bl	8000298 <__aeabi_dsub>
 8009474:	a354      	add	r3, pc, #336	; (adr r3, 80095c8 <__ieee754_pow+0x3c8>)
 8009476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947a:	4604      	mov	r4, r0
 800947c:	460d      	mov	r5, r1
 800947e:	f7f7 f8c3 	bl	8000608 <__aeabi_dmul>
 8009482:	a353      	add	r3, pc, #332	; (adr r3, 80095d0 <__ieee754_pow+0x3d0>)
 8009484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009488:	4606      	mov	r6, r0
 800948a:	460f      	mov	r7, r1
 800948c:	4620      	mov	r0, r4
 800948e:	4629      	mov	r1, r5
 8009490:	f7f7 f8ba 	bl	8000608 <__aeabi_dmul>
 8009494:	4b57      	ldr	r3, [pc, #348]	; (80095f4 <__ieee754_pow+0x3f4>)
 8009496:	4682      	mov	sl, r0
 8009498:	468b      	mov	fp, r1
 800949a:	2200      	movs	r2, #0
 800949c:	4620      	mov	r0, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	f7f7 f8b2 	bl	8000608 <__aeabi_dmul>
 80094a4:	4602      	mov	r2, r0
 80094a6:	460b      	mov	r3, r1
 80094a8:	a14b      	add	r1, pc, #300	; (adr r1, 80095d8 <__ieee754_pow+0x3d8>)
 80094aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ae:	f7f6 fef3 	bl	8000298 <__aeabi_dsub>
 80094b2:	4622      	mov	r2, r4
 80094b4:	462b      	mov	r3, r5
 80094b6:	f7f7 f8a7 	bl	8000608 <__aeabi_dmul>
 80094ba:	4602      	mov	r2, r0
 80094bc:	460b      	mov	r3, r1
 80094be:	2000      	movs	r0, #0
 80094c0:	494d      	ldr	r1, [pc, #308]	; (80095f8 <__ieee754_pow+0x3f8>)
 80094c2:	f7f6 fee9 	bl	8000298 <__aeabi_dsub>
 80094c6:	4622      	mov	r2, r4
 80094c8:	4680      	mov	r8, r0
 80094ca:	4689      	mov	r9, r1
 80094cc:	462b      	mov	r3, r5
 80094ce:	4620      	mov	r0, r4
 80094d0:	4629      	mov	r1, r5
 80094d2:	f7f7 f899 	bl	8000608 <__aeabi_dmul>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4640      	mov	r0, r8
 80094dc:	4649      	mov	r1, r9
 80094de:	f7f7 f893 	bl	8000608 <__aeabi_dmul>
 80094e2:	a33f      	add	r3, pc, #252	; (adr r3, 80095e0 <__ieee754_pow+0x3e0>)
 80094e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e8:	f7f7 f88e 	bl	8000608 <__aeabi_dmul>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	4650      	mov	r0, sl
 80094f2:	4659      	mov	r1, fp
 80094f4:	f7f6 fed0 	bl	8000298 <__aeabi_dsub>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4680      	mov	r8, r0
 80094fe:	4689      	mov	r9, r1
 8009500:	4630      	mov	r0, r6
 8009502:	4639      	mov	r1, r7
 8009504:	f7f6 feca 	bl	800029c <__adddf3>
 8009508:	2000      	movs	r0, #0
 800950a:	4632      	mov	r2, r6
 800950c:	463b      	mov	r3, r7
 800950e:	4604      	mov	r4, r0
 8009510:	460d      	mov	r5, r1
 8009512:	f7f6 fec1 	bl	8000298 <__aeabi_dsub>
 8009516:	4602      	mov	r2, r0
 8009518:	460b      	mov	r3, r1
 800951a:	4640      	mov	r0, r8
 800951c:	4649      	mov	r1, r9
 800951e:	f7f6 febb 	bl	8000298 <__aeabi_dsub>
 8009522:	9b04      	ldr	r3, [sp, #16]
 8009524:	9a06      	ldr	r2, [sp, #24]
 8009526:	3b01      	subs	r3, #1
 8009528:	4313      	orrs	r3, r2
 800952a:	4682      	mov	sl, r0
 800952c:	468b      	mov	fp, r1
 800952e:	f040 81e7 	bne.w	8009900 <__ieee754_pow+0x700>
 8009532:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80095e8 <__ieee754_pow+0x3e8>
 8009536:	eeb0 8a47 	vmov.f32	s16, s14
 800953a:	eef0 8a67 	vmov.f32	s17, s15
 800953e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009542:	2600      	movs	r6, #0
 8009544:	4632      	mov	r2, r6
 8009546:	463b      	mov	r3, r7
 8009548:	e9dd 0100 	ldrd	r0, r1, [sp]
 800954c:	f7f6 fea4 	bl	8000298 <__aeabi_dsub>
 8009550:	4622      	mov	r2, r4
 8009552:	462b      	mov	r3, r5
 8009554:	f7f7 f858 	bl	8000608 <__aeabi_dmul>
 8009558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800955c:	4680      	mov	r8, r0
 800955e:	4689      	mov	r9, r1
 8009560:	4650      	mov	r0, sl
 8009562:	4659      	mov	r1, fp
 8009564:	f7f7 f850 	bl	8000608 <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4640      	mov	r0, r8
 800956e:	4649      	mov	r1, r9
 8009570:	f7f6 fe94 	bl	800029c <__adddf3>
 8009574:	4632      	mov	r2, r6
 8009576:	463b      	mov	r3, r7
 8009578:	4680      	mov	r8, r0
 800957a:	4689      	mov	r9, r1
 800957c:	4620      	mov	r0, r4
 800957e:	4629      	mov	r1, r5
 8009580:	f7f7 f842 	bl	8000608 <__aeabi_dmul>
 8009584:	460b      	mov	r3, r1
 8009586:	4604      	mov	r4, r0
 8009588:	460d      	mov	r5, r1
 800958a:	4602      	mov	r2, r0
 800958c:	4649      	mov	r1, r9
 800958e:	4640      	mov	r0, r8
 8009590:	f7f6 fe84 	bl	800029c <__adddf3>
 8009594:	4b19      	ldr	r3, [pc, #100]	; (80095fc <__ieee754_pow+0x3fc>)
 8009596:	4299      	cmp	r1, r3
 8009598:	ec45 4b19 	vmov	d9, r4, r5
 800959c:	4606      	mov	r6, r0
 800959e:	460f      	mov	r7, r1
 80095a0:	468b      	mov	fp, r1
 80095a2:	f340 82f1 	ble.w	8009b88 <__ieee754_pow+0x988>
 80095a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80095aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80095ae:	4303      	orrs	r3, r0
 80095b0:	f000 81e4 	beq.w	800997c <__ieee754_pow+0x77c>
 80095b4:	ec51 0b18 	vmov	r0, r1, d8
 80095b8:	2200      	movs	r2, #0
 80095ba:	2300      	movs	r3, #0
 80095bc:	f7f7 fa96 	bl	8000aec <__aeabi_dcmplt>
 80095c0:	3800      	subs	r0, #0
 80095c2:	bf18      	it	ne
 80095c4:	2001      	movne	r0, #1
 80095c6:	e72b      	b.n	8009420 <__ieee754_pow+0x220>
 80095c8:	60000000 	.word	0x60000000
 80095cc:	3ff71547 	.word	0x3ff71547
 80095d0:	f85ddf44 	.word	0xf85ddf44
 80095d4:	3e54ae0b 	.word	0x3e54ae0b
 80095d8:	55555555 	.word	0x55555555
 80095dc:	3fd55555 	.word	0x3fd55555
 80095e0:	652b82fe 	.word	0x652b82fe
 80095e4:	3ff71547 	.word	0x3ff71547
 80095e8:	00000000 	.word	0x00000000
 80095ec:	bff00000 	.word	0xbff00000
 80095f0:	3ff00000 	.word	0x3ff00000
 80095f4:	3fd00000 	.word	0x3fd00000
 80095f8:	3fe00000 	.word	0x3fe00000
 80095fc:	408fffff 	.word	0x408fffff
 8009600:	4bd5      	ldr	r3, [pc, #852]	; (8009958 <__ieee754_pow+0x758>)
 8009602:	402b      	ands	r3, r5
 8009604:	2200      	movs	r2, #0
 8009606:	b92b      	cbnz	r3, 8009614 <__ieee754_pow+0x414>
 8009608:	4bd4      	ldr	r3, [pc, #848]	; (800995c <__ieee754_pow+0x75c>)
 800960a:	f7f6 fffd 	bl	8000608 <__aeabi_dmul>
 800960e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009612:	460c      	mov	r4, r1
 8009614:	1523      	asrs	r3, r4, #20
 8009616:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800961a:	4413      	add	r3, r2
 800961c:	9305      	str	r3, [sp, #20]
 800961e:	4bd0      	ldr	r3, [pc, #832]	; (8009960 <__ieee754_pow+0x760>)
 8009620:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009624:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009628:	429c      	cmp	r4, r3
 800962a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800962e:	dd08      	ble.n	8009642 <__ieee754_pow+0x442>
 8009630:	4bcc      	ldr	r3, [pc, #816]	; (8009964 <__ieee754_pow+0x764>)
 8009632:	429c      	cmp	r4, r3
 8009634:	f340 8162 	ble.w	80098fc <__ieee754_pow+0x6fc>
 8009638:	9b05      	ldr	r3, [sp, #20]
 800963a:	3301      	adds	r3, #1
 800963c:	9305      	str	r3, [sp, #20]
 800963e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009642:	2400      	movs	r4, #0
 8009644:	00e3      	lsls	r3, r4, #3
 8009646:	9307      	str	r3, [sp, #28]
 8009648:	4bc7      	ldr	r3, [pc, #796]	; (8009968 <__ieee754_pow+0x768>)
 800964a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800964e:	ed93 7b00 	vldr	d7, [r3]
 8009652:	4629      	mov	r1, r5
 8009654:	ec53 2b17 	vmov	r2, r3, d7
 8009658:	eeb0 9a47 	vmov.f32	s18, s14
 800965c:	eef0 9a67 	vmov.f32	s19, s15
 8009660:	4682      	mov	sl, r0
 8009662:	f7f6 fe19 	bl	8000298 <__aeabi_dsub>
 8009666:	4652      	mov	r2, sl
 8009668:	4606      	mov	r6, r0
 800966a:	460f      	mov	r7, r1
 800966c:	462b      	mov	r3, r5
 800966e:	ec51 0b19 	vmov	r0, r1, d9
 8009672:	f7f6 fe13 	bl	800029c <__adddf3>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	2000      	movs	r0, #0
 800967c:	49bb      	ldr	r1, [pc, #748]	; (800996c <__ieee754_pow+0x76c>)
 800967e:	f7f7 f8ed 	bl	800085c <__aeabi_ddiv>
 8009682:	ec41 0b1a 	vmov	d10, r0, r1
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 ffbb 	bl	8000608 <__aeabi_dmul>
 8009692:	2300      	movs	r3, #0
 8009694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009698:	9302      	str	r3, [sp, #8]
 800969a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800969e:	46ab      	mov	fp, r5
 80096a0:	106d      	asrs	r5, r5, #1
 80096a2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80096a6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80096aa:	ec41 0b18 	vmov	d8, r0, r1
 80096ae:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80096b2:	2200      	movs	r2, #0
 80096b4:	4640      	mov	r0, r8
 80096b6:	4649      	mov	r1, r9
 80096b8:	4614      	mov	r4, r2
 80096ba:	461d      	mov	r5, r3
 80096bc:	f7f6 ffa4 	bl	8000608 <__aeabi_dmul>
 80096c0:	4602      	mov	r2, r0
 80096c2:	460b      	mov	r3, r1
 80096c4:	4630      	mov	r0, r6
 80096c6:	4639      	mov	r1, r7
 80096c8:	f7f6 fde6 	bl	8000298 <__aeabi_dsub>
 80096cc:	ec53 2b19 	vmov	r2, r3, d9
 80096d0:	4606      	mov	r6, r0
 80096d2:	460f      	mov	r7, r1
 80096d4:	4620      	mov	r0, r4
 80096d6:	4629      	mov	r1, r5
 80096d8:	f7f6 fdde 	bl	8000298 <__aeabi_dsub>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	f7f6 fdd8 	bl	8000298 <__aeabi_dsub>
 80096e8:	4642      	mov	r2, r8
 80096ea:	464b      	mov	r3, r9
 80096ec:	f7f6 ff8c 	bl	8000608 <__aeabi_dmul>
 80096f0:	4602      	mov	r2, r0
 80096f2:	460b      	mov	r3, r1
 80096f4:	4630      	mov	r0, r6
 80096f6:	4639      	mov	r1, r7
 80096f8:	f7f6 fdce 	bl	8000298 <__aeabi_dsub>
 80096fc:	ec53 2b1a 	vmov	r2, r3, d10
 8009700:	f7f6 ff82 	bl	8000608 <__aeabi_dmul>
 8009704:	ec53 2b18 	vmov	r2, r3, d8
 8009708:	ec41 0b19 	vmov	d9, r0, r1
 800970c:	ec51 0b18 	vmov	r0, r1, d8
 8009710:	f7f6 ff7a 	bl	8000608 <__aeabi_dmul>
 8009714:	a37c      	add	r3, pc, #496	; (adr r3, 8009908 <__ieee754_pow+0x708>)
 8009716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971a:	4604      	mov	r4, r0
 800971c:	460d      	mov	r5, r1
 800971e:	f7f6 ff73 	bl	8000608 <__aeabi_dmul>
 8009722:	a37b      	add	r3, pc, #492	; (adr r3, 8009910 <__ieee754_pow+0x710>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 fdb8 	bl	800029c <__adddf3>
 800972c:	4622      	mov	r2, r4
 800972e:	462b      	mov	r3, r5
 8009730:	f7f6 ff6a 	bl	8000608 <__aeabi_dmul>
 8009734:	a378      	add	r3, pc, #480	; (adr r3, 8009918 <__ieee754_pow+0x718>)
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	f7f6 fdaf 	bl	800029c <__adddf3>
 800973e:	4622      	mov	r2, r4
 8009740:	462b      	mov	r3, r5
 8009742:	f7f6 ff61 	bl	8000608 <__aeabi_dmul>
 8009746:	a376      	add	r3, pc, #472	; (adr r3, 8009920 <__ieee754_pow+0x720>)
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f7f6 fda6 	bl	800029c <__adddf3>
 8009750:	4622      	mov	r2, r4
 8009752:	462b      	mov	r3, r5
 8009754:	f7f6 ff58 	bl	8000608 <__aeabi_dmul>
 8009758:	a373      	add	r3, pc, #460	; (adr r3, 8009928 <__ieee754_pow+0x728>)
 800975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975e:	f7f6 fd9d 	bl	800029c <__adddf3>
 8009762:	4622      	mov	r2, r4
 8009764:	462b      	mov	r3, r5
 8009766:	f7f6 ff4f 	bl	8000608 <__aeabi_dmul>
 800976a:	a371      	add	r3, pc, #452	; (adr r3, 8009930 <__ieee754_pow+0x730>)
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f7f6 fd94 	bl	800029c <__adddf3>
 8009774:	4622      	mov	r2, r4
 8009776:	4606      	mov	r6, r0
 8009778:	460f      	mov	r7, r1
 800977a:	462b      	mov	r3, r5
 800977c:	4620      	mov	r0, r4
 800977e:	4629      	mov	r1, r5
 8009780:	f7f6 ff42 	bl	8000608 <__aeabi_dmul>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4630      	mov	r0, r6
 800978a:	4639      	mov	r1, r7
 800978c:	f7f6 ff3c 	bl	8000608 <__aeabi_dmul>
 8009790:	4642      	mov	r2, r8
 8009792:	4604      	mov	r4, r0
 8009794:	460d      	mov	r5, r1
 8009796:	464b      	mov	r3, r9
 8009798:	ec51 0b18 	vmov	r0, r1, d8
 800979c:	f7f6 fd7e 	bl	800029c <__adddf3>
 80097a0:	ec53 2b19 	vmov	r2, r3, d9
 80097a4:	f7f6 ff30 	bl	8000608 <__aeabi_dmul>
 80097a8:	4622      	mov	r2, r4
 80097aa:	462b      	mov	r3, r5
 80097ac:	f7f6 fd76 	bl	800029c <__adddf3>
 80097b0:	4642      	mov	r2, r8
 80097b2:	4682      	mov	sl, r0
 80097b4:	468b      	mov	fp, r1
 80097b6:	464b      	mov	r3, r9
 80097b8:	4640      	mov	r0, r8
 80097ba:	4649      	mov	r1, r9
 80097bc:	f7f6 ff24 	bl	8000608 <__aeabi_dmul>
 80097c0:	4b6b      	ldr	r3, [pc, #428]	; (8009970 <__ieee754_pow+0x770>)
 80097c2:	2200      	movs	r2, #0
 80097c4:	4606      	mov	r6, r0
 80097c6:	460f      	mov	r7, r1
 80097c8:	f7f6 fd68 	bl	800029c <__adddf3>
 80097cc:	4652      	mov	r2, sl
 80097ce:	465b      	mov	r3, fp
 80097d0:	f7f6 fd64 	bl	800029c <__adddf3>
 80097d4:	2000      	movs	r0, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	460d      	mov	r5, r1
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4640      	mov	r0, r8
 80097e0:	4649      	mov	r1, r9
 80097e2:	f7f6 ff11 	bl	8000608 <__aeabi_dmul>
 80097e6:	4b62      	ldr	r3, [pc, #392]	; (8009970 <__ieee754_pow+0x770>)
 80097e8:	4680      	mov	r8, r0
 80097ea:	4689      	mov	r9, r1
 80097ec:	2200      	movs	r2, #0
 80097ee:	4620      	mov	r0, r4
 80097f0:	4629      	mov	r1, r5
 80097f2:	f7f6 fd51 	bl	8000298 <__aeabi_dsub>
 80097f6:	4632      	mov	r2, r6
 80097f8:	463b      	mov	r3, r7
 80097fa:	f7f6 fd4d 	bl	8000298 <__aeabi_dsub>
 80097fe:	4602      	mov	r2, r0
 8009800:	460b      	mov	r3, r1
 8009802:	4650      	mov	r0, sl
 8009804:	4659      	mov	r1, fp
 8009806:	f7f6 fd47 	bl	8000298 <__aeabi_dsub>
 800980a:	ec53 2b18 	vmov	r2, r3, d8
 800980e:	f7f6 fefb 	bl	8000608 <__aeabi_dmul>
 8009812:	4622      	mov	r2, r4
 8009814:	4606      	mov	r6, r0
 8009816:	460f      	mov	r7, r1
 8009818:	462b      	mov	r3, r5
 800981a:	ec51 0b19 	vmov	r0, r1, d9
 800981e:	f7f6 fef3 	bl	8000608 <__aeabi_dmul>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4630      	mov	r0, r6
 8009828:	4639      	mov	r1, r7
 800982a:	f7f6 fd37 	bl	800029c <__adddf3>
 800982e:	4606      	mov	r6, r0
 8009830:	460f      	mov	r7, r1
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4640      	mov	r0, r8
 8009838:	4649      	mov	r1, r9
 800983a:	f7f6 fd2f 	bl	800029c <__adddf3>
 800983e:	a33e      	add	r3, pc, #248	; (adr r3, 8009938 <__ieee754_pow+0x738>)
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	2000      	movs	r0, #0
 8009846:	4604      	mov	r4, r0
 8009848:	460d      	mov	r5, r1
 800984a:	f7f6 fedd 	bl	8000608 <__aeabi_dmul>
 800984e:	4642      	mov	r2, r8
 8009850:	ec41 0b18 	vmov	d8, r0, r1
 8009854:	464b      	mov	r3, r9
 8009856:	4620      	mov	r0, r4
 8009858:	4629      	mov	r1, r5
 800985a:	f7f6 fd1d 	bl	8000298 <__aeabi_dsub>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4630      	mov	r0, r6
 8009864:	4639      	mov	r1, r7
 8009866:	f7f6 fd17 	bl	8000298 <__aeabi_dsub>
 800986a:	a335      	add	r3, pc, #212	; (adr r3, 8009940 <__ieee754_pow+0x740>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 feca 	bl	8000608 <__aeabi_dmul>
 8009874:	a334      	add	r3, pc, #208	; (adr r3, 8009948 <__ieee754_pow+0x748>)
 8009876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800987a:	4606      	mov	r6, r0
 800987c:	460f      	mov	r7, r1
 800987e:	4620      	mov	r0, r4
 8009880:	4629      	mov	r1, r5
 8009882:	f7f6 fec1 	bl	8000608 <__aeabi_dmul>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	4630      	mov	r0, r6
 800988c:	4639      	mov	r1, r7
 800988e:	f7f6 fd05 	bl	800029c <__adddf3>
 8009892:	9a07      	ldr	r2, [sp, #28]
 8009894:	4b37      	ldr	r3, [pc, #220]	; (8009974 <__ieee754_pow+0x774>)
 8009896:	4413      	add	r3, r2
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f6 fcfe 	bl	800029c <__adddf3>
 80098a0:	4682      	mov	sl, r0
 80098a2:	9805      	ldr	r0, [sp, #20]
 80098a4:	468b      	mov	fp, r1
 80098a6:	f7f6 fe45 	bl	8000534 <__aeabi_i2d>
 80098aa:	9a07      	ldr	r2, [sp, #28]
 80098ac:	4b32      	ldr	r3, [pc, #200]	; (8009978 <__ieee754_pow+0x778>)
 80098ae:	4413      	add	r3, r2
 80098b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098b4:	4606      	mov	r6, r0
 80098b6:	460f      	mov	r7, r1
 80098b8:	4652      	mov	r2, sl
 80098ba:	465b      	mov	r3, fp
 80098bc:	ec51 0b18 	vmov	r0, r1, d8
 80098c0:	f7f6 fcec 	bl	800029c <__adddf3>
 80098c4:	4642      	mov	r2, r8
 80098c6:	464b      	mov	r3, r9
 80098c8:	f7f6 fce8 	bl	800029c <__adddf3>
 80098cc:	4632      	mov	r2, r6
 80098ce:	463b      	mov	r3, r7
 80098d0:	f7f6 fce4 	bl	800029c <__adddf3>
 80098d4:	2000      	movs	r0, #0
 80098d6:	4632      	mov	r2, r6
 80098d8:	463b      	mov	r3, r7
 80098da:	4604      	mov	r4, r0
 80098dc:	460d      	mov	r5, r1
 80098de:	f7f6 fcdb 	bl	8000298 <__aeabi_dsub>
 80098e2:	4642      	mov	r2, r8
 80098e4:	464b      	mov	r3, r9
 80098e6:	f7f6 fcd7 	bl	8000298 <__aeabi_dsub>
 80098ea:	ec53 2b18 	vmov	r2, r3, d8
 80098ee:	f7f6 fcd3 	bl	8000298 <__aeabi_dsub>
 80098f2:	4602      	mov	r2, r0
 80098f4:	460b      	mov	r3, r1
 80098f6:	4650      	mov	r0, sl
 80098f8:	4659      	mov	r1, fp
 80098fa:	e610      	b.n	800951e <__ieee754_pow+0x31e>
 80098fc:	2401      	movs	r4, #1
 80098fe:	e6a1      	b.n	8009644 <__ieee754_pow+0x444>
 8009900:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009950 <__ieee754_pow+0x750>
 8009904:	e617      	b.n	8009536 <__ieee754_pow+0x336>
 8009906:	bf00      	nop
 8009908:	4a454eef 	.word	0x4a454eef
 800990c:	3fca7e28 	.word	0x3fca7e28
 8009910:	93c9db65 	.word	0x93c9db65
 8009914:	3fcd864a 	.word	0x3fcd864a
 8009918:	a91d4101 	.word	0xa91d4101
 800991c:	3fd17460 	.word	0x3fd17460
 8009920:	518f264d 	.word	0x518f264d
 8009924:	3fd55555 	.word	0x3fd55555
 8009928:	db6fabff 	.word	0xdb6fabff
 800992c:	3fdb6db6 	.word	0x3fdb6db6
 8009930:	33333303 	.word	0x33333303
 8009934:	3fe33333 	.word	0x3fe33333
 8009938:	e0000000 	.word	0xe0000000
 800993c:	3feec709 	.word	0x3feec709
 8009940:	dc3a03fd 	.word	0xdc3a03fd
 8009944:	3feec709 	.word	0x3feec709
 8009948:	145b01f5 	.word	0x145b01f5
 800994c:	be3e2fe0 	.word	0xbe3e2fe0
 8009950:	00000000 	.word	0x00000000
 8009954:	3ff00000 	.word	0x3ff00000
 8009958:	7ff00000 	.word	0x7ff00000
 800995c:	43400000 	.word	0x43400000
 8009960:	0003988e 	.word	0x0003988e
 8009964:	000bb679 	.word	0x000bb679
 8009968:	0800cee0 	.word	0x0800cee0
 800996c:	3ff00000 	.word	0x3ff00000
 8009970:	40080000 	.word	0x40080000
 8009974:	0800cf00 	.word	0x0800cf00
 8009978:	0800cef0 	.word	0x0800cef0
 800997c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009c54 <__ieee754_pow+0xa54>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	4640      	mov	r0, r8
 8009984:	4649      	mov	r1, r9
 8009986:	f7f6 fc89 	bl	800029c <__adddf3>
 800998a:	4622      	mov	r2, r4
 800998c:	ec41 0b1a 	vmov	d10, r0, r1
 8009990:	462b      	mov	r3, r5
 8009992:	4630      	mov	r0, r6
 8009994:	4639      	mov	r1, r7
 8009996:	f7f6 fc7f 	bl	8000298 <__aeabi_dsub>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	ec51 0b1a 	vmov	r0, r1, d10
 80099a2:	f7f7 f8c1 	bl	8000b28 <__aeabi_dcmpgt>
 80099a6:	2800      	cmp	r0, #0
 80099a8:	f47f ae04 	bne.w	80095b4 <__ieee754_pow+0x3b4>
 80099ac:	4aa4      	ldr	r2, [pc, #656]	; (8009c40 <__ieee754_pow+0xa40>)
 80099ae:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099b2:	4293      	cmp	r3, r2
 80099b4:	f340 8108 	ble.w	8009bc8 <__ieee754_pow+0x9c8>
 80099b8:	151b      	asrs	r3, r3, #20
 80099ba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80099be:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80099c2:	fa4a f303 	asr.w	r3, sl, r3
 80099c6:	445b      	add	r3, fp
 80099c8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80099cc:	4e9d      	ldr	r6, [pc, #628]	; (8009c44 <__ieee754_pow+0xa44>)
 80099ce:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80099d2:	4116      	asrs	r6, r2
 80099d4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80099d8:	2000      	movs	r0, #0
 80099da:	ea23 0106 	bic.w	r1, r3, r6
 80099de:	f1c2 0214 	rsb	r2, r2, #20
 80099e2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80099e6:	fa4a fa02 	asr.w	sl, sl, r2
 80099ea:	f1bb 0f00 	cmp.w	fp, #0
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4620      	mov	r0, r4
 80099f4:	4629      	mov	r1, r5
 80099f6:	bfb8      	it	lt
 80099f8:	f1ca 0a00 	rsblt	sl, sl, #0
 80099fc:	f7f6 fc4c 	bl	8000298 <__aeabi_dsub>
 8009a00:	ec41 0b19 	vmov	d9, r0, r1
 8009a04:	4642      	mov	r2, r8
 8009a06:	464b      	mov	r3, r9
 8009a08:	ec51 0b19 	vmov	r0, r1, d9
 8009a0c:	f7f6 fc46 	bl	800029c <__adddf3>
 8009a10:	a37b      	add	r3, pc, #492	; (adr r3, 8009c00 <__ieee754_pow+0xa00>)
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	2000      	movs	r0, #0
 8009a18:	4604      	mov	r4, r0
 8009a1a:	460d      	mov	r5, r1
 8009a1c:	f7f6 fdf4 	bl	8000608 <__aeabi_dmul>
 8009a20:	ec53 2b19 	vmov	r2, r3, d9
 8009a24:	4606      	mov	r6, r0
 8009a26:	460f      	mov	r7, r1
 8009a28:	4620      	mov	r0, r4
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	f7f6 fc34 	bl	8000298 <__aeabi_dsub>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	4640      	mov	r0, r8
 8009a36:	4649      	mov	r1, r9
 8009a38:	f7f6 fc2e 	bl	8000298 <__aeabi_dsub>
 8009a3c:	a372      	add	r3, pc, #456	; (adr r3, 8009c08 <__ieee754_pow+0xa08>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	f7f6 fde1 	bl	8000608 <__aeabi_dmul>
 8009a46:	a372      	add	r3, pc, #456	; (adr r3, 8009c10 <__ieee754_pow+0xa10>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	4680      	mov	r8, r0
 8009a4e:	4689      	mov	r9, r1
 8009a50:	4620      	mov	r0, r4
 8009a52:	4629      	mov	r1, r5
 8009a54:	f7f6 fdd8 	bl	8000608 <__aeabi_dmul>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	4640      	mov	r0, r8
 8009a5e:	4649      	mov	r1, r9
 8009a60:	f7f6 fc1c 	bl	800029c <__adddf3>
 8009a64:	4604      	mov	r4, r0
 8009a66:	460d      	mov	r5, r1
 8009a68:	4602      	mov	r2, r0
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	4639      	mov	r1, r7
 8009a70:	f7f6 fc14 	bl	800029c <__adddf3>
 8009a74:	4632      	mov	r2, r6
 8009a76:	463b      	mov	r3, r7
 8009a78:	4680      	mov	r8, r0
 8009a7a:	4689      	mov	r9, r1
 8009a7c:	f7f6 fc0c 	bl	8000298 <__aeabi_dsub>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4620      	mov	r0, r4
 8009a86:	4629      	mov	r1, r5
 8009a88:	f7f6 fc06 	bl	8000298 <__aeabi_dsub>
 8009a8c:	4642      	mov	r2, r8
 8009a8e:	4606      	mov	r6, r0
 8009a90:	460f      	mov	r7, r1
 8009a92:	464b      	mov	r3, r9
 8009a94:	4640      	mov	r0, r8
 8009a96:	4649      	mov	r1, r9
 8009a98:	f7f6 fdb6 	bl	8000608 <__aeabi_dmul>
 8009a9c:	a35e      	add	r3, pc, #376	; (adr r3, 8009c18 <__ieee754_pow+0xa18>)
 8009a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa2:	4604      	mov	r4, r0
 8009aa4:	460d      	mov	r5, r1
 8009aa6:	f7f6 fdaf 	bl	8000608 <__aeabi_dmul>
 8009aaa:	a35d      	add	r3, pc, #372	; (adr r3, 8009c20 <__ieee754_pow+0xa20>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f7f6 fbf2 	bl	8000298 <__aeabi_dsub>
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	f7f6 fda6 	bl	8000608 <__aeabi_dmul>
 8009abc:	a35a      	add	r3, pc, #360	; (adr r3, 8009c28 <__ieee754_pow+0xa28>)
 8009abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac2:	f7f6 fbeb 	bl	800029c <__adddf3>
 8009ac6:	4622      	mov	r2, r4
 8009ac8:	462b      	mov	r3, r5
 8009aca:	f7f6 fd9d 	bl	8000608 <__aeabi_dmul>
 8009ace:	a358      	add	r3, pc, #352	; (adr r3, 8009c30 <__ieee754_pow+0xa30>)
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f7f6 fbe0 	bl	8000298 <__aeabi_dsub>
 8009ad8:	4622      	mov	r2, r4
 8009ada:	462b      	mov	r3, r5
 8009adc:	f7f6 fd94 	bl	8000608 <__aeabi_dmul>
 8009ae0:	a355      	add	r3, pc, #340	; (adr r3, 8009c38 <__ieee754_pow+0xa38>)
 8009ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae6:	f7f6 fbd9 	bl	800029c <__adddf3>
 8009aea:	4622      	mov	r2, r4
 8009aec:	462b      	mov	r3, r5
 8009aee:	f7f6 fd8b 	bl	8000608 <__aeabi_dmul>
 8009af2:	4602      	mov	r2, r0
 8009af4:	460b      	mov	r3, r1
 8009af6:	4640      	mov	r0, r8
 8009af8:	4649      	mov	r1, r9
 8009afa:	f7f6 fbcd 	bl	8000298 <__aeabi_dsub>
 8009afe:	4604      	mov	r4, r0
 8009b00:	460d      	mov	r5, r1
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	4640      	mov	r0, r8
 8009b08:	4649      	mov	r1, r9
 8009b0a:	f7f6 fd7d 	bl	8000608 <__aeabi_dmul>
 8009b0e:	2200      	movs	r2, #0
 8009b10:	ec41 0b19 	vmov	d9, r0, r1
 8009b14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b18:	4620      	mov	r0, r4
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	f7f6 fbbc 	bl	8000298 <__aeabi_dsub>
 8009b20:	4602      	mov	r2, r0
 8009b22:	460b      	mov	r3, r1
 8009b24:	ec51 0b19 	vmov	r0, r1, d9
 8009b28:	f7f6 fe98 	bl	800085c <__aeabi_ddiv>
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4604      	mov	r4, r0
 8009b30:	460d      	mov	r5, r1
 8009b32:	463b      	mov	r3, r7
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	f7f6 fd66 	bl	8000608 <__aeabi_dmul>
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	463b      	mov	r3, r7
 8009b40:	f7f6 fbac 	bl	800029c <__adddf3>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	4620      	mov	r0, r4
 8009b4a:	4629      	mov	r1, r5
 8009b4c:	f7f6 fba4 	bl	8000298 <__aeabi_dsub>
 8009b50:	4642      	mov	r2, r8
 8009b52:	464b      	mov	r3, r9
 8009b54:	f7f6 fba0 	bl	8000298 <__aeabi_dsub>
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	493a      	ldr	r1, [pc, #232]	; (8009c48 <__ieee754_pow+0xa48>)
 8009b5e:	2000      	movs	r0, #0
 8009b60:	f7f6 fb9a 	bl	8000298 <__aeabi_dsub>
 8009b64:	ec41 0b10 	vmov	d0, r0, r1
 8009b68:	ee10 3a90 	vmov	r3, s1
 8009b6c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009b70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b74:	da2b      	bge.n	8009bce <__ieee754_pow+0x9ce>
 8009b76:	4650      	mov	r0, sl
 8009b78:	f000 f966 	bl	8009e48 <scalbn>
 8009b7c:	ec51 0b10 	vmov	r0, r1, d0
 8009b80:	ec53 2b18 	vmov	r2, r3, d8
 8009b84:	f7ff bbed 	b.w	8009362 <__ieee754_pow+0x162>
 8009b88:	4b30      	ldr	r3, [pc, #192]	; (8009c4c <__ieee754_pow+0xa4c>)
 8009b8a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009b8e:	429e      	cmp	r6, r3
 8009b90:	f77f af0c 	ble.w	80099ac <__ieee754_pow+0x7ac>
 8009b94:	4b2e      	ldr	r3, [pc, #184]	; (8009c50 <__ieee754_pow+0xa50>)
 8009b96:	440b      	add	r3, r1
 8009b98:	4303      	orrs	r3, r0
 8009b9a:	d009      	beq.n	8009bb0 <__ieee754_pow+0x9b0>
 8009b9c:	ec51 0b18 	vmov	r0, r1, d8
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	f7f6 ffa2 	bl	8000aec <__aeabi_dcmplt>
 8009ba8:	3800      	subs	r0, #0
 8009baa:	bf18      	it	ne
 8009bac:	2001      	movne	r0, #1
 8009bae:	e447      	b.n	8009440 <__ieee754_pow+0x240>
 8009bb0:	4622      	mov	r2, r4
 8009bb2:	462b      	mov	r3, r5
 8009bb4:	f7f6 fb70 	bl	8000298 <__aeabi_dsub>
 8009bb8:	4642      	mov	r2, r8
 8009bba:	464b      	mov	r3, r9
 8009bbc:	f7f6 ffaa 	bl	8000b14 <__aeabi_dcmpge>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	f43f aef3 	beq.w	80099ac <__ieee754_pow+0x7ac>
 8009bc6:	e7e9      	b.n	8009b9c <__ieee754_pow+0x99c>
 8009bc8:	f04f 0a00 	mov.w	sl, #0
 8009bcc:	e71a      	b.n	8009a04 <__ieee754_pow+0x804>
 8009bce:	ec51 0b10 	vmov	r0, r1, d0
 8009bd2:	4619      	mov	r1, r3
 8009bd4:	e7d4      	b.n	8009b80 <__ieee754_pow+0x980>
 8009bd6:	491c      	ldr	r1, [pc, #112]	; (8009c48 <__ieee754_pow+0xa48>)
 8009bd8:	2000      	movs	r0, #0
 8009bda:	f7ff bb30 	b.w	800923e <__ieee754_pow+0x3e>
 8009bde:	2000      	movs	r0, #0
 8009be0:	2100      	movs	r1, #0
 8009be2:	f7ff bb2c 	b.w	800923e <__ieee754_pow+0x3e>
 8009be6:	4630      	mov	r0, r6
 8009be8:	4639      	mov	r1, r7
 8009bea:	f7ff bb28 	b.w	800923e <__ieee754_pow+0x3e>
 8009bee:	9204      	str	r2, [sp, #16]
 8009bf0:	f7ff bb7a 	b.w	80092e8 <__ieee754_pow+0xe8>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	f7ff bb64 	b.w	80092c2 <__ieee754_pow+0xc2>
 8009bfa:	bf00      	nop
 8009bfc:	f3af 8000 	nop.w
 8009c00:	00000000 	.word	0x00000000
 8009c04:	3fe62e43 	.word	0x3fe62e43
 8009c08:	fefa39ef 	.word	0xfefa39ef
 8009c0c:	3fe62e42 	.word	0x3fe62e42
 8009c10:	0ca86c39 	.word	0x0ca86c39
 8009c14:	be205c61 	.word	0xbe205c61
 8009c18:	72bea4d0 	.word	0x72bea4d0
 8009c1c:	3e663769 	.word	0x3e663769
 8009c20:	c5d26bf1 	.word	0xc5d26bf1
 8009c24:	3ebbbd41 	.word	0x3ebbbd41
 8009c28:	af25de2c 	.word	0xaf25de2c
 8009c2c:	3f11566a 	.word	0x3f11566a
 8009c30:	16bebd93 	.word	0x16bebd93
 8009c34:	3f66c16c 	.word	0x3f66c16c
 8009c38:	5555553e 	.word	0x5555553e
 8009c3c:	3fc55555 	.word	0x3fc55555
 8009c40:	3fe00000 	.word	0x3fe00000
 8009c44:	000fffff 	.word	0x000fffff
 8009c48:	3ff00000 	.word	0x3ff00000
 8009c4c:	4090cbff 	.word	0x4090cbff
 8009c50:	3f6f3400 	.word	0x3f6f3400
 8009c54:	652b82fe 	.word	0x652b82fe
 8009c58:	3c971547 	.word	0x3c971547

08009c5c <__ieee754_sqrt>:
 8009c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c60:	ec55 4b10 	vmov	r4, r5, d0
 8009c64:	4e55      	ldr	r6, [pc, #340]	; (8009dbc <__ieee754_sqrt+0x160>)
 8009c66:	43ae      	bics	r6, r5
 8009c68:	ee10 0a10 	vmov	r0, s0
 8009c6c:	ee10 3a10 	vmov	r3, s0
 8009c70:	462a      	mov	r2, r5
 8009c72:	4629      	mov	r1, r5
 8009c74:	d110      	bne.n	8009c98 <__ieee754_sqrt+0x3c>
 8009c76:	ee10 2a10 	vmov	r2, s0
 8009c7a:	462b      	mov	r3, r5
 8009c7c:	f7f6 fcc4 	bl	8000608 <__aeabi_dmul>
 8009c80:	4602      	mov	r2, r0
 8009c82:	460b      	mov	r3, r1
 8009c84:	4620      	mov	r0, r4
 8009c86:	4629      	mov	r1, r5
 8009c88:	f7f6 fb08 	bl	800029c <__adddf3>
 8009c8c:	4604      	mov	r4, r0
 8009c8e:	460d      	mov	r5, r1
 8009c90:	ec45 4b10 	vmov	d0, r4, r5
 8009c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c98:	2d00      	cmp	r5, #0
 8009c9a:	dc10      	bgt.n	8009cbe <__ieee754_sqrt+0x62>
 8009c9c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009ca0:	4330      	orrs	r0, r6
 8009ca2:	d0f5      	beq.n	8009c90 <__ieee754_sqrt+0x34>
 8009ca4:	b15d      	cbz	r5, 8009cbe <__ieee754_sqrt+0x62>
 8009ca6:	ee10 2a10 	vmov	r2, s0
 8009caa:	462b      	mov	r3, r5
 8009cac:	ee10 0a10 	vmov	r0, s0
 8009cb0:	f7f6 faf2 	bl	8000298 <__aeabi_dsub>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	f7f6 fdd0 	bl	800085c <__aeabi_ddiv>
 8009cbc:	e7e6      	b.n	8009c8c <__ieee754_sqrt+0x30>
 8009cbe:	1512      	asrs	r2, r2, #20
 8009cc0:	d074      	beq.n	8009dac <__ieee754_sqrt+0x150>
 8009cc2:	07d4      	lsls	r4, r2, #31
 8009cc4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009cc8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8009ccc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8009cd0:	bf5e      	ittt	pl
 8009cd2:	0fda      	lsrpl	r2, r3, #31
 8009cd4:	005b      	lslpl	r3, r3, #1
 8009cd6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8009cda:	2400      	movs	r4, #0
 8009cdc:	0fda      	lsrs	r2, r3, #31
 8009cde:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009ce2:	107f      	asrs	r7, r7, #1
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	2516      	movs	r5, #22
 8009ce8:	4620      	mov	r0, r4
 8009cea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009cee:	1886      	adds	r6, r0, r2
 8009cf0:	428e      	cmp	r6, r1
 8009cf2:	bfde      	ittt	le
 8009cf4:	1b89      	suble	r1, r1, r6
 8009cf6:	18b0      	addle	r0, r6, r2
 8009cf8:	18a4      	addle	r4, r4, r2
 8009cfa:	0049      	lsls	r1, r1, #1
 8009cfc:	3d01      	subs	r5, #1
 8009cfe:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8009d02:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009d06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d0a:	d1f0      	bne.n	8009cee <__ieee754_sqrt+0x92>
 8009d0c:	462a      	mov	r2, r5
 8009d0e:	f04f 0e20 	mov.w	lr, #32
 8009d12:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8009d16:	4281      	cmp	r1, r0
 8009d18:	eb06 0c05 	add.w	ip, r6, r5
 8009d1c:	dc02      	bgt.n	8009d24 <__ieee754_sqrt+0xc8>
 8009d1e:	d113      	bne.n	8009d48 <__ieee754_sqrt+0xec>
 8009d20:	459c      	cmp	ip, r3
 8009d22:	d811      	bhi.n	8009d48 <__ieee754_sqrt+0xec>
 8009d24:	f1bc 0f00 	cmp.w	ip, #0
 8009d28:	eb0c 0506 	add.w	r5, ip, r6
 8009d2c:	da43      	bge.n	8009db6 <__ieee754_sqrt+0x15a>
 8009d2e:	2d00      	cmp	r5, #0
 8009d30:	db41      	blt.n	8009db6 <__ieee754_sqrt+0x15a>
 8009d32:	f100 0801 	add.w	r8, r0, #1
 8009d36:	1a09      	subs	r1, r1, r0
 8009d38:	459c      	cmp	ip, r3
 8009d3a:	bf88      	it	hi
 8009d3c:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009d40:	eba3 030c 	sub.w	r3, r3, ip
 8009d44:	4432      	add	r2, r6
 8009d46:	4640      	mov	r0, r8
 8009d48:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009d4c:	f1be 0e01 	subs.w	lr, lr, #1
 8009d50:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8009d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009d58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009d5c:	d1db      	bne.n	8009d16 <__ieee754_sqrt+0xba>
 8009d5e:	430b      	orrs	r3, r1
 8009d60:	d006      	beq.n	8009d70 <__ieee754_sqrt+0x114>
 8009d62:	1c50      	adds	r0, r2, #1
 8009d64:	bf13      	iteet	ne
 8009d66:	3201      	addne	r2, #1
 8009d68:	3401      	addeq	r4, #1
 8009d6a:	4672      	moveq	r2, lr
 8009d6c:	f022 0201 	bicne.w	r2, r2, #1
 8009d70:	1063      	asrs	r3, r4, #1
 8009d72:	0852      	lsrs	r2, r2, #1
 8009d74:	07e1      	lsls	r1, r4, #31
 8009d76:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009d7a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009d7e:	bf48      	it	mi
 8009d80:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009d84:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009d88:	4614      	mov	r4, r2
 8009d8a:	e781      	b.n	8009c90 <__ieee754_sqrt+0x34>
 8009d8c:	0ad9      	lsrs	r1, r3, #11
 8009d8e:	3815      	subs	r0, #21
 8009d90:	055b      	lsls	r3, r3, #21
 8009d92:	2900      	cmp	r1, #0
 8009d94:	d0fa      	beq.n	8009d8c <__ieee754_sqrt+0x130>
 8009d96:	02cd      	lsls	r5, r1, #11
 8009d98:	d50a      	bpl.n	8009db0 <__ieee754_sqrt+0x154>
 8009d9a:	f1c2 0420 	rsb	r4, r2, #32
 8009d9e:	fa23 f404 	lsr.w	r4, r3, r4
 8009da2:	1e55      	subs	r5, r2, #1
 8009da4:	4093      	lsls	r3, r2
 8009da6:	4321      	orrs	r1, r4
 8009da8:	1b42      	subs	r2, r0, r5
 8009daa:	e78a      	b.n	8009cc2 <__ieee754_sqrt+0x66>
 8009dac:	4610      	mov	r0, r2
 8009dae:	e7f0      	b.n	8009d92 <__ieee754_sqrt+0x136>
 8009db0:	0049      	lsls	r1, r1, #1
 8009db2:	3201      	adds	r2, #1
 8009db4:	e7ef      	b.n	8009d96 <__ieee754_sqrt+0x13a>
 8009db6:	4680      	mov	r8, r0
 8009db8:	e7bd      	b.n	8009d36 <__ieee754_sqrt+0xda>
 8009dba:	bf00      	nop
 8009dbc:	7ff00000 	.word	0x7ff00000

08009dc0 <with_errno>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	460d      	mov	r5, r1
 8009dc6:	4616      	mov	r6, r2
 8009dc8:	f000 f8c4 	bl	8009f54 <__errno>
 8009dcc:	4629      	mov	r1, r5
 8009dce:	6006      	str	r6, [r0, #0]
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}

08009dd4 <xflow>:
 8009dd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009dd6:	4614      	mov	r4, r2
 8009dd8:	461d      	mov	r5, r3
 8009dda:	b108      	cbz	r0, 8009de0 <xflow+0xc>
 8009ddc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009de0:	e9cd 2300 	strd	r2, r3, [sp]
 8009de4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009de8:	4620      	mov	r0, r4
 8009dea:	4629      	mov	r1, r5
 8009dec:	f7f6 fc0c 	bl	8000608 <__aeabi_dmul>
 8009df0:	2222      	movs	r2, #34	; 0x22
 8009df2:	b003      	add	sp, #12
 8009df4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009df8:	f7ff bfe2 	b.w	8009dc0 <with_errno>

08009dfc <__math_uflow>:
 8009dfc:	b508      	push	{r3, lr}
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009e04:	f7ff ffe6 	bl	8009dd4 <xflow>
 8009e08:	ec41 0b10 	vmov	d0, r0, r1
 8009e0c:	bd08      	pop	{r3, pc}

08009e0e <__math_oflow>:
 8009e0e:	b508      	push	{r3, lr}
 8009e10:	2200      	movs	r2, #0
 8009e12:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009e16:	f7ff ffdd 	bl	8009dd4 <xflow>
 8009e1a:	ec41 0b10 	vmov	d0, r0, r1
 8009e1e:	bd08      	pop	{r3, pc}

08009e20 <fabs>:
 8009e20:	ec51 0b10 	vmov	r0, r1, d0
 8009e24:	ee10 2a10 	vmov	r2, s0
 8009e28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e2c:	ec43 2b10 	vmov	d0, r2, r3
 8009e30:	4770      	bx	lr

08009e32 <finite>:
 8009e32:	b082      	sub	sp, #8
 8009e34:	ed8d 0b00 	vstr	d0, [sp]
 8009e38:	9801      	ldr	r0, [sp, #4]
 8009e3a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009e3e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009e42:	0fc0      	lsrs	r0, r0, #31
 8009e44:	b002      	add	sp, #8
 8009e46:	4770      	bx	lr

08009e48 <scalbn>:
 8009e48:	b570      	push	{r4, r5, r6, lr}
 8009e4a:	ec55 4b10 	vmov	r4, r5, d0
 8009e4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009e52:	4606      	mov	r6, r0
 8009e54:	462b      	mov	r3, r5
 8009e56:	b99a      	cbnz	r2, 8009e80 <scalbn+0x38>
 8009e58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009e5c:	4323      	orrs	r3, r4
 8009e5e:	d036      	beq.n	8009ece <scalbn+0x86>
 8009e60:	4b39      	ldr	r3, [pc, #228]	; (8009f48 <scalbn+0x100>)
 8009e62:	4629      	mov	r1, r5
 8009e64:	ee10 0a10 	vmov	r0, s0
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f7f6 fbcd 	bl	8000608 <__aeabi_dmul>
 8009e6e:	4b37      	ldr	r3, [pc, #220]	; (8009f4c <scalbn+0x104>)
 8009e70:	429e      	cmp	r6, r3
 8009e72:	4604      	mov	r4, r0
 8009e74:	460d      	mov	r5, r1
 8009e76:	da10      	bge.n	8009e9a <scalbn+0x52>
 8009e78:	a32b      	add	r3, pc, #172	; (adr r3, 8009f28 <scalbn+0xe0>)
 8009e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7e:	e03a      	b.n	8009ef6 <scalbn+0xae>
 8009e80:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009e84:	428a      	cmp	r2, r1
 8009e86:	d10c      	bne.n	8009ea2 <scalbn+0x5a>
 8009e88:	ee10 2a10 	vmov	r2, s0
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f7f6 fa04 	bl	800029c <__adddf3>
 8009e94:	4604      	mov	r4, r0
 8009e96:	460d      	mov	r5, r1
 8009e98:	e019      	b.n	8009ece <scalbn+0x86>
 8009e9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	3a36      	subs	r2, #54	; 0x36
 8009ea2:	4432      	add	r2, r6
 8009ea4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009ea8:	428a      	cmp	r2, r1
 8009eaa:	dd08      	ble.n	8009ebe <scalbn+0x76>
 8009eac:	2d00      	cmp	r5, #0
 8009eae:	a120      	add	r1, pc, #128	; (adr r1, 8009f30 <scalbn+0xe8>)
 8009eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb4:	da1c      	bge.n	8009ef0 <scalbn+0xa8>
 8009eb6:	a120      	add	r1, pc, #128	; (adr r1, 8009f38 <scalbn+0xf0>)
 8009eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ebc:	e018      	b.n	8009ef0 <scalbn+0xa8>
 8009ebe:	2a00      	cmp	r2, #0
 8009ec0:	dd08      	ble.n	8009ed4 <scalbn+0x8c>
 8009ec2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ec6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009eca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009ece:	ec45 4b10 	vmov	d0, r4, r5
 8009ed2:	bd70      	pop	{r4, r5, r6, pc}
 8009ed4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009ed8:	da19      	bge.n	8009f0e <scalbn+0xc6>
 8009eda:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009ede:	429e      	cmp	r6, r3
 8009ee0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009ee4:	dd0a      	ble.n	8009efc <scalbn+0xb4>
 8009ee6:	a112      	add	r1, pc, #72	; (adr r1, 8009f30 <scalbn+0xe8>)
 8009ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d1e2      	bne.n	8009eb6 <scalbn+0x6e>
 8009ef0:	a30f      	add	r3, pc, #60	; (adr r3, 8009f30 <scalbn+0xe8>)
 8009ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef6:	f7f6 fb87 	bl	8000608 <__aeabi_dmul>
 8009efa:	e7cb      	b.n	8009e94 <scalbn+0x4c>
 8009efc:	a10a      	add	r1, pc, #40	; (adr r1, 8009f28 <scalbn+0xe0>)
 8009efe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0b8      	beq.n	8009e78 <scalbn+0x30>
 8009f06:	a10e      	add	r1, pc, #56	; (adr r1, 8009f40 <scalbn+0xf8>)
 8009f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f0c:	e7b4      	b.n	8009e78 <scalbn+0x30>
 8009f0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f12:	3236      	adds	r2, #54	; 0x36
 8009f14:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009f18:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4b0c      	ldr	r3, [pc, #48]	; (8009f50 <scalbn+0x108>)
 8009f20:	2200      	movs	r2, #0
 8009f22:	e7e8      	b.n	8009ef6 <scalbn+0xae>
 8009f24:	f3af 8000 	nop.w
 8009f28:	c2f8f359 	.word	0xc2f8f359
 8009f2c:	01a56e1f 	.word	0x01a56e1f
 8009f30:	8800759c 	.word	0x8800759c
 8009f34:	7e37e43c 	.word	0x7e37e43c
 8009f38:	8800759c 	.word	0x8800759c
 8009f3c:	fe37e43c 	.word	0xfe37e43c
 8009f40:	c2f8f359 	.word	0xc2f8f359
 8009f44:	81a56e1f 	.word	0x81a56e1f
 8009f48:	43500000 	.word	0x43500000
 8009f4c:	ffff3cb0 	.word	0xffff3cb0
 8009f50:	3c900000 	.word	0x3c900000

08009f54 <__errno>:
 8009f54:	4b01      	ldr	r3, [pc, #4]	; (8009f5c <__errno+0x8>)
 8009f56:	6818      	ldr	r0, [r3, #0]
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	20000190 	.word	0x20000190

08009f60 <_sbrk>:
 8009f60:	4a04      	ldr	r2, [pc, #16]	; (8009f74 <_sbrk+0x14>)
 8009f62:	6811      	ldr	r1, [r2, #0]
 8009f64:	4603      	mov	r3, r0
 8009f66:	b909      	cbnz	r1, 8009f6c <_sbrk+0xc>
 8009f68:	4903      	ldr	r1, [pc, #12]	; (8009f78 <_sbrk+0x18>)
 8009f6a:	6011      	str	r1, [r2, #0]
 8009f6c:	6810      	ldr	r0, [r2, #0]
 8009f6e:	4403      	add	r3, r0
 8009f70:	6013      	str	r3, [r2, #0]
 8009f72:	4770      	bx	lr
 8009f74:	20000c7c 	.word	0x20000c7c
 8009f78:	20000c80 	.word	0x20000c80

08009f7c <_init>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	bf00      	nop
 8009f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f82:	bc08      	pop	{r3}
 8009f84:	469e      	mov	lr, r3
 8009f86:	4770      	bx	lr

08009f88 <_fini>:
 8009f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8a:	bf00      	nop
 8009f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8e:	bc08      	pop	{r3}
 8009f90:	469e      	mov	lr, r3
 8009f92:	4770      	bx	lr
